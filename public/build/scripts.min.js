!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){t=t||ne;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function i(e){var t=!!e&&"length"in e&&e.length,n=he.type(e);return"function"!==n&&!he.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function o(e,t,n){return he.isFunction(t)?he.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?he.grep(e,function(e){return e===t!==n}):"string"!=typeof t?he.grep(e,function(e){return se.call(t,e)>-1!==n}):Se.test(t)?he.filter(t,e,n):(t=he.filter(t,e),he.grep(e,function(e){return se.call(t,e)>-1!==n&&1===e.nodeType}))}function a(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function s(e){var t={};return he.each(e.match(Me)||[],function(e,n){t[n]=!0}),t}function l(e){return e}function c(e){throw e}function u(e,t,n,i){var r;try{e&&he.isFunction(r=e.promise)?r.call(e).done(t).fail(n):e&&he.isFunction(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}function d(){ne.removeEventListener("DOMContentLoaded",d),e.removeEventListener("load",d),he.ready()}function f(){this.expando=he.expando+f.uid++}function p(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Fe.test(e)?JSON.parse(e):e)}function h(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Re,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=p(n)}catch(e){}je.set(e,t,n)}else n=void 0;return n}function g(e,t,n,i){var r,o=1,a=20,s=i?function(){return i.cur()}:function(){return he.css(e,t,"")},l=s(),c=n&&n[3]||(he.cssNumber[t]?"":"px"),u=(he.cssNumber[t]||"px"!==c&&+l)&&_e.exec(he.css(e,t));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{o=o||".5",u/=o,he.style(e,t,u+c)}while(o!==(o=s()/l)&&1!==o&&--a)}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}function m(e){var t,n=e.ownerDocument,i=e.nodeName,r=We[i];return r||(t=n.body.appendChild(n.createElement(i)),r=he.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),We[i]=r,r)}function v(e,t){for(var n,i,r=[],o=0,a=e.length;o<a;o++)i=e[o],i.style&&(n=i.style.display,t?("none"===n&&(r[o]=Ie.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&Be(i)&&(r[o]=m(i))):"none"!==n&&(r[o]="none",Ie.set(i,"display",n)));for(o=0;o<a;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&r(e,t)?he.merge([e],n):n}function b(e,t){for(var n=0,i=e.length;n<i;n++)Ie.set(e[n],"globalEval",!t||Ie.get(t[n],"globalEval"))}function x(e,t,n,i,r){for(var o,a,s,l,c,u,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===he.type(o))he.merge(f,o.nodeType?[o]:o);else if(Xe.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(ze.exec(o)||["",""])[1].toLowerCase(),l=Ge[s]||Ge._default,a.innerHTML=l[1]+he.htmlPrefilter(o)+l[2],u=l[0];u--;)a=a.lastChild;he.merge(f,a.childNodes),a=d.firstChild,a.textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",p=0;o=f[p++];)if(i&&he.inArray(o,i)>-1)r&&r.push(o);else if(c=he.contains(o.ownerDocument,o),a=y(d.appendChild(o),"script"),c&&b(a),n)for(u=0;o=a[u++];)Ue.test(o.type||"")&&n.push(o);return d}function w(){return!0}function k(){return!1}function C(){try{return ne.activeElement}catch(e){}}function S(e,t,n,i,r,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(s in t)S(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=k;else if(!r)return e;return 1===o&&(a=r,r=function(e){return he().off(e),a.apply(this,arguments)},r.guid=a.guid||(a.guid=he.guid++)),e.each(function(){he.event.add(this,t,r,i,n)})}function E(e,t){return r(e,"table")&&r(11!==t.nodeType?t:t.firstChild,"tr")?he(">tbody",e)[0]||e:e}function T(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function D(e){var t=nt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function P(e,t){var n,i,r,o,a,s,l,c;if(1===t.nodeType){if(Ie.hasData(e)&&(o=Ie.access(e),a=Ie.set(t,o),c=o.events)){delete a.handle,a.events={};for(r in c)for(n=0,i=c[r].length;n<i;n++)he.event.add(t,r,c[r][n])}je.hasData(e)&&(s=je.access(e),l=he.extend({},s),je.set(t,l))}}function M(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ye.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function A(e,t,i,r){t=oe.apply([],t);var o,a,s,l,c,u,d=0,f=e.length,p=f-1,h=t[0],g=he.isFunction(h);if(g||f>1&&"string"==typeof h&&!pe.checkClone&&tt.test(h))return e.each(function(n){var o=e.eq(n);g&&(t[0]=h.call(this,n,o.html())),A(o,t,i,r)});if(f&&(o=x(t,e[0].ownerDocument,!1,e,r),a=o.firstChild,1===o.childNodes.length&&(o=a),a||r)){for(s=he.map(y(o,"script"),T),l=s.length;d<f;d++)c=o,d!==p&&(c=he.clone(c,!0,!0),l&&he.merge(s,y(c,"script"))),i.call(e[d],c,d);if(l)for(u=s[s.length-1].ownerDocument,he.map(s,D),d=0;d<l;d++)c=s[d],Ue.test(c.type||"")&&!Ie.access(c,"globalEval")&&he.contains(u,c)&&(c.src?he._evalUrl&&he._evalUrl(c.src):n(c.textContent.replace(it,""),u))}return e}function O(e,t,n){for(var i,r=t?he.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||he.cleanData(y(i)),i.parentNode&&(n&&he.contains(i.ownerDocument,i)&&b(y(i,"script")),i.parentNode.removeChild(i));return e}function L(e,t,n){var i,r,o,a,s=e.style;return n=n||at(e),n&&(a=n.getPropertyValue(t)||n[t],""!==a||he.contains(e.ownerDocument,e)||(a=he.style(e,t)),!pe.pixelMarginRight()&&ot.test(a)&&rt.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function N(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function I(e){if(e in ft)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=dt.length;n--;)if((e=dt[n]+t)in ft)return e}function j(e){var t=he.cssProps[e];return t||(t=he.cssProps[e]=I(e)||e),t}function F(e,t,n){var i=_e.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function R(e,t,n,i,r){var o,a=0;for(o=n===(i?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(a+=he.css(e,n+He[o],!0,r)),i?("content"===n&&(a-=he.css(e,"padding"+He[o],!0,r)),"margin"!==n&&(a-=he.css(e,"border"+He[o]+"Width",!0,r))):(a+=he.css(e,"padding"+He[o],!0,r),"padding"!==n&&(a+=he.css(e,"border"+He[o]+"Width",!0,r)));return a}function $(e,t,n){var i,r=at(e),o=L(e,t,r),a="border-box"===he.css(e,"boxSizing",!1,r);return ot.test(o)?o:(i=a&&(pe.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+R(e,t,n||(a?"border":"content"),i,r)+"px")}function _(e,t,n,i,r){return new _.prototype.init(e,t,n,i,r)}function H(){ht&&(!1===ne.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(H):e.setTimeout(H,he.fx.interval),he.fx.tick())}function B(){return e.setTimeout(function(){pt=void 0}),pt=he.now()}function q(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)n=He[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function W(e,t,n){for(var i,r=(U.tweeners[t]||[]).concat(U.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function Y(e,t,n){var i,r,o,a,s,l,c,u,d="width"in t||"height"in t,f=this,p={},h=e.style,g=e.nodeType&&Be(e),m=Ie.get(e,"fxshow");n.queue||(a=he._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,he.queue(e,"fx").length||a.empty.fire()})}));for(i in t)if(r=t[i],gt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}p[i]=m&&m[i]||he.style(e,i)}if((l=!he.isEmptyObject(t))||!he.isEmptyObject(p)){d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=m&&m.display,null==c&&(c=Ie.get(e,"display")),u=he.css(e,"display"),"none"===u&&(c?u=c:(v([e],!0),c=e.style.display||c,u=he.css(e,"display"),v([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===he.css(e,"float")&&(l||(f.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1;for(i in p)l||(m?"hidden"in m&&(g=m.hidden):m=Ie.access(e,"fxshow",{display:c}),o&&(m.hidden=!g),g&&v([e],!0),f.done(function(){g||v([e]),Ie.remove(e,"fxshow");for(i in p)he.style(e,i,p[i])})),l=W(g?m[i]:0,i,f),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}}function z(e,t){var n,i,r,o,a;for(n in e)if(i=he.camelCase(n),r=t[i],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=he.cssHooks[i])&&"expand"in a){o=a.expand(o),delete e[i];for(n in o)n in e||(e[n]=o[n],t[n]=r)}else t[i]=r}function U(e,t,n){var i,r,o=0,a=U.prefilters.length,s=he.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=pt||B(),n=Math.max(0,c.startTime+c.duration-t),i=n/c.duration||0,o=1-i,a=0,l=c.tweens.length;a<l;a++)c.tweens[a].run(o);return s.notifyWith(e,[c,o,n]),o<1&&l?n:(l||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:he.extend({},t),opts:he.extend(!0,{specialEasing:{},easing:he.easing._default},n),originalProperties:t,originalOptions:n,startTime:pt||B(),duration:n.duration,tweens:[],createTween:function(t,n){var i=he.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(z(u,c.opts.specialEasing);o<a;o++)if(i=U.prefilters[o].call(c,e,u,c.opts))return he.isFunction(i.stop)&&(he._queueHooks(c.elem,c.opts.queue).stop=he.proxy(i.stop,i)),i;return he.map(u,W,c),he.isFunction(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),he.fx.timer(he.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}function G(e){return(e.match(Me)||[]).join(" ")}function X(e){return e.getAttribute&&e.getAttribute("class")||""}function V(e,t,n,i){var r;if(Array.isArray(t))he.each(t,function(t,r){n||Tt.test(e)?i(e,r):V(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==he.type(t))i(e,t);else for(r in t)V(e+"["+r+"]",t[r],n,i)}function K(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(Me)||[];if(he.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Z(e,t,n,i){function r(s){var l;return o[s]=!0,he.each(e[s]||[],function(e,s){var c=s(t,n,i);return"string"!=typeof c||a||o[c]?a?!(l=c):void 0:(t.dataTypes.unshift(c),r(c),!1)}),l}var o={},a=e===$t;return r(t.dataTypes[0])||!o["*"]&&r("*")}function Q(e,t){var n,i,r=he.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&he.extend(!0,e,i),e}function J(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}function ee(e,t,n,i){var r,o,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=c[l+" "+o]||c["* "+o]))for(r in c)if(s=r.split(" "),s[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[r]:!0!==c[r]&&(o=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}var te=[],ne=e.document,ie=Object.getPrototypeOf,re=te.slice,oe=te.concat,ae=te.push,se=te.indexOf,le={},ce=le.toString,ue=le.hasOwnProperty,de=ue.toString,fe=de.call(Object),pe={},he=function(e,t){return new he.fn.init(e,t)},ge=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ve=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};he.fn=he.prototype={jquery:"3.2.1",constructor:he,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=he.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return he.each(this,e)},map:function(e){return this.pushStack(he.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ae,sort:te.sort,splice:te.splice},he.extend=he.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||he.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],i=e[t],a!==i&&(c&&i&&(he.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&he.isPlainObject(n)?n:{},a[t]=he.extend(c,o,i)):void 0!==i&&(a[t]=i));return a},he.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===he.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=he.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ce.call(e))&&(!(t=ie(e))||"function"==typeof(n=ue.call(t,"constructor")&&t.constructor)&&de.call(n)===fe)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ce.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ve,ye)},each:function(e,t){var n,r=0;if(i(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(ge,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?he.merge(n,"string"==typeof e?[e]:e):ae.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var r,o,a=0,s=[];if(i(e))for(r=e.length;a<r;a++)null!=(o=t(e[a],a,n))&&s.push(o);else for(a in e)null!=(o=t(e[a],a,n))&&s.push(o);return oe.apply([],s)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),he.isFunction(e))return i=re.call(arguments,2),r=function(){return e.apply(t||this,i.concat(re.call(arguments)))},r.guid=e.guid=e.guid||he.guid++,r},now:Date.now,support:pe}),"function"==typeof Symbol&&(he.fn[Symbol.iterator]=te[Symbol.iterator]),he.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var be=function(e){function t(e,t,n,i){var r,o,a,s,l,u,f,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!i&&((t?t.ownerDocument||t:_)!==O&&A(t),t=t||O,N)){if(11!==h&&(l=ge.exec(e)))if(r=l[1]){if(9===h){if(!(a=t.getElementById(r)))return n;if(a.id===r)return n.push(a),n}else if(p&&(a=p.getElementById(r))&&R(t,a)&&a.id===r)return n.push(a),n}else{if(l[2])return K.apply(n,t.getElementsByTagName(e)),n;if((r=l[3])&&x.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(r)),n}if(x.qsa&&!Y[e+" "]&&(!I||!I.test(e))){if(1!==h)p=t,f=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(be,xe):t.setAttribute("id",s=$),u=S(e),o=u.length;o--;)u[o]="#"+s+" "+d(u[o]);f=u.join(","),p=me.test(e)&&c(t.parentNode)||t}if(f)try{return K.apply(n,p.querySelectorAll(f)),n}catch(e){}finally{s===$&&t.removeAttribute("id")}}}return T(e.replace(oe,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[$]=!0,e}function r(e){var t=O.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=t}function a(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ke(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return i(function(t){return t=+t,i(function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))})})}function c(e){return e&&void 0!==e.getElementsByTagName&&e}function u(){}function d(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function f(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&"parentNode"===o,s=B++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,l){var c,u,d,f=[H,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(d=t[$]||(t[$]={}),u=d[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[o])&&c[0]===H&&c[1]===s)return f[2]=c[2];if(u[o]=f,f[2]=e(t,n,l))return!0}return!1}}function p(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function h(e,n,i){for(var r=0,o=n.length;r<o;r++)t(e,n[r],i);return i}function g(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),c&&t.push(s)));return a}function m(e,t,n,r,o,a){return r&&!r[$]&&(r=m(r)),o&&!o[$]&&(o=m(o,a)),i(function(i,a,s,l){var c,u,d,f=[],p=[],m=a.length,v=i||h(t||"*",s.nodeType?[s]:s,[]),y=!e||!i&&t?v:g(v,f,e,s,l),b=n?o||(i?e:m||r)?[]:a:y;if(n&&n(y,b,s,l),r)for(c=g(b,p),r(c,[],s,l),u=c.length;u--;)(d=c[u])&&(b[p[u]]=!(y[p[u]]=d));if(i){if(o||e){if(o){for(c=[],u=b.length;u--;)(d=b[u])&&c.push(y[u]=d);o(null,b=[],c,l)}for(u=b.length;u--;)(d=b[u])&&(c=o?Q(i,d):f[u])>-1&&(i[c]=!(a[c]=d))}}else b=g(b===a?b.splice(m,b.length):b),o?o(null,a,b,l):K.apply(a,b)})}function v(e){for(var t,n,i,r=e.length,o=w.relative[e[0].type],a=o||w.relative[" "],s=o?1:0,l=f(function(e){return e===t},a,!0),c=f(function(e){return Q(t,e)>-1},a,!0),u=[function(e,n,i){var r=!o&&(i||n!==D)||((t=n).nodeType?l(e,n,i):c(e,n,i));return t=null,r}];s<r;s++)if(n=w.relative[e[s].type])u=[f(p(u),n)];else{if(n=w.filter[e[s].type].apply(null,e[s].matches),n[$]){for(i=++s;i<r&&!w.relative[e[i].type];i++);return m(s>1&&p(u),s>1&&d(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(oe,"$1"),n,s<i&&v(e.slice(s,i)),i<r&&v(e=e.slice(i)),i<r&&d(e))}u.push(n)}return p(u)}function y(e,n){var r=n.length>0,o=e.length>0,a=function(i,a,s,l,c){var u,d,f,p=0,h="0",m=i&&[],v=[],y=D,b=i||o&&w.find.TAG("*",c),x=H+=null==y?1:Math.random()||.1,k=b.length;for(c&&(D=a===O||a||c);h!==k&&null!=(u=b[h]);h++){if(o&&u){for(d=0,a||u.ownerDocument===O||(A(u),s=!N);f=e[d++];)if(f(u,a||O,s)){l.push(u);break}c&&(H=x)}r&&((u=!f&&u)&&p--,i&&m.push(u))}if(p+=h,r&&h!==p){for(d=0;f=n[d++];)f(m,v,a,s);if(i){if(p>0)for(;h--;)m[h]||v[h]||(v[h]=X.call(l));v=g(v)}K.apply(l,v),c&&!i&&v.length>0&&p+n.length>1&&t.uniqueSort(l)}return c&&(H=x,D=y),m};return r?i(a):a}var b,x,w,k,C,S,E,T,D,P,M,A,O,L,N,I,j,F,R,$="sizzle"+1*new Date,_=e.document,H=0,B=0,q=n(),W=n(),Y=n(),z=function(e,t){return e===t&&(M=!0),0},U={}.hasOwnProperty,G=[],X=G.pop,V=G.push,K=G.push,Z=G.slice,Q=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ie=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",re=new RegExp(ee+"+","g"),oe=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),ae=new RegExp("^"+ee+"*,"+ee+"*"),se=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ce=new RegExp(ie),ue=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ie),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},fe=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},we=function(){A()},ke=f(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{K.apply(G=Z.call(_.childNodes),_.childNodes),G[_.childNodes.length].nodeType}catch(e){K={apply:G.length?function(e,t){V.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}x=t.support={},C=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},A=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:_;return i!==O&&9===i.nodeType&&i.documentElement?(O=i,L=O.documentElement,N=!C(O),_!==O&&(n=O.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",we,!1):n.attachEvent&&n.attachEvent("onunload",we)),x.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=r(function(e){return e.appendChild(O.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=he.test(O.getElementsByClassName),x.getById=r(function(e){return L.appendChild(e).id=$,!O.getElementsByName||!O.getElementsByName($).length}),x.getById?(w.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&N){var n=t.getElementById(e);return n?[n]:[]}}):(w.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&N){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),w.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},w.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&N)return t.getElementsByClassName(e)},j=[],I=[],(x.qsa=he.test(O.querySelectorAll))&&(r(function(e){L.appendChild(e).innerHTML="<a id='"+$+"'></a><select id='"+$+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&I.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||I.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+$+"-]").length||I.push("~="),e.querySelectorAll(":checked").length||I.push(":checked"),e.querySelectorAll("a#"+$+"+*").length||I.push(".#.+[+~]")}),r(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=O.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&I.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&I.push(":enabled",":disabled"),L.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&I.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),I.push(",.*:")})),(x.matchesSelector=he.test(F=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&r(function(e){x.disconnectedMatch=F.call(e,"*"),F.call(e,"[s!='']:x"),j.push("!=",ie)}),I=I.length&&new RegExp(I.join("|")),j=j.length&&new RegExp(j.join("|")),t=he.test(L.compareDocumentPosition),R=t||he.test(L.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},z=t?function(e,t){if(e===t)return M=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===O||e.ownerDocument===_&&R(_,e)?-1:t===O||t.ownerDocument===_&&R(_,t)?1:P?Q(P,e)-Q(P,t):0:4&n?-1:1)}:function(e,t){if(e===t)return M=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],l=[t];if(!r||!o)return e===O?-1:t===O?1:r?-1:o?1:P?Q(P,e)-Q(P,t):0;if(r===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[i]===l[i];)i++;return i?a(s[i],l[i]):s[i]===_?-1:l[i]===_?1:0},O):O},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==O&&A(e),n=n.replace(le,"='$1']"),x.matchesSelector&&N&&!Y[n+" "]&&(!j||!j.test(n))&&(!I||!I.test(n)))try{var i=F.call(e,n);if(i||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,O,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==O&&A(e),R(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==O&&A(e);var n=w.attrHandle[t.toLowerCase()],i=n&&U.call(w.attrHandle,t.toLowerCase())?n(e,t,!N):void 0;return void 0!==i?i:x.attributes||!N?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(be,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,r=0;if(M=!x.detectDuplicates,P=!x.sortStable&&e.slice(0),e.sort(z),M){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return P=null,e},k=t.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=k(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=k(t);return n},w=t.selectors={cacheLength:50,createPseudo:i,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ce.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=q[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&q(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(r){var o=t.attr(r,e);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(re," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,f,p,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(m){if(o){for(;g;){for(f=t;f=f[g];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(f=m,d=f[$]||(f[$]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),c=u[e]||[],p=c[0]===H&&c[1],b=p&&c[2],f=p&&m.childNodes[p];f=++p&&f&&f[g]||(b=p=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){u[e]=[H,p,b];break}}else if(y&&(f=t,d=f[$]||(f[$]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),c=u[e]||[],p=c[0]===H&&c[1],b=p),!1===b)for(;(f=++p&&f&&f[g]||(b=p=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++b||(y&&(d=f[$]||(f[$]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),u[e]=[H,b]),f!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,n){var r,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[$]?o(n):o.length>1?(r=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,r=o(e,n),a=r.length;a--;)i=Q(e,r[a]),e[i]=!(t[i]=r[a])}):function(e){return o(e,0,r)}):o}},pseudos:{not:i(function(e){var t=[],n=[],r=E(e.replace(oe,"$1"));return r[$]?i(function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||k(t)).indexOf(e)>-1}}),lang:i(function(e){return ue.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=N?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===L},focus:function(e){return e===O.activeElement&&(!O.hasFocus||O.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:s(!1),disabled:s(!0),checked:function(e){var t=e.nodeName.toLowerCase()
;return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return fe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:l(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}},w.pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return u.prototype=w.filters=w.pseudos,w.setFilters=new u,S=t.tokenize=function(e,n){var i,r,o,a,s,l,c,u=W[e+" "];if(u)return n?0:u.slice(0);for(s=e,l=[],c=w.preFilter;s;){i&&!(r=ae.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),i=!1,(r=se.exec(s))&&(i=r.shift(),o.push({value:i,type:r[0].replace(oe," ")}),s=s.slice(i.length));for(a in w.filter)!(r=de[a].exec(s))||c[a]&&!(r=c[a](r))||(i=r.shift(),o.push({value:i,type:a,matches:r}),s=s.slice(i.length));if(!i)break}return n?s.length:s?t.error(e):W(e,l).slice(0)},E=t.compile=function(e,t){var n,i=[],r=[],o=Y[e+" "];if(!o){for(t||(t=S(e)),n=t.length;n--;)o=v(t[n]),o[$]?i.push(o):r.push(o);o=Y(e,y(r,i)),o.selector=e}return o},T=t.select=function(e,t,n,i){var r,o,a,s,l,u="function"==typeof e&&e,f=!i&&S(e=u.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===t.nodeType&&N&&w.relative[o[1].type]){if(!(t=(w.find.ID(a.matches[0].replace(ve,ye),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=de.needsContext.test(e)?0:o.length;r--&&(a=o[r],!w.relative[s=a.type]);)if((l=w.find[s])&&(i=l(a.matches[0].replace(ve,ye),me.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(r,1),!(e=i.length&&d(o)))return K.apply(n,i),n;break}}return(u||E(e,f))(i,t,!N,n,!t||me.test(e)&&c(t.parentNode)||t),n},x.sortStable=$.split("").sort(z).join("")===$,x.detectDuplicates=!!M,A(),x.sortDetached=r(function(e){return 1&e.compareDocumentPosition(O.createElement("fieldset"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||o(J,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);he.find=be,he.expr=be.selectors,he.expr[":"]=he.expr.pseudos,he.uniqueSort=he.unique=be.uniqueSort,he.text=be.getText,he.isXMLDoc=be.isXML,he.contains=be.contains,he.escapeSelector=be.escape;var xe=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&he(e).is(n))break;i.push(e)}return i},we=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},ke=he.expr.match.needsContext,Ce=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Se=/^.[^:#\[\.,]*$/;he.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?he.find.matchesSelector(i,e)?[i]:[]:he.find.matches(e,he.grep(t,function(e){return 1===e.nodeType}))},he.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(he(e).filter(function(){for(t=0;t<i;t++)if(he.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)he.find(e,r[t],n);return i>1?he.uniqueSort(n):n},filter:function(e){return this.pushStack(o(this,e||[],!1))},not:function(e){return this.pushStack(o(this,e||[],!0))},is:function(e){return!!o(this,"string"==typeof e&&ke.test(e)?he(e):e||[],!1).length}});var Ee,Te=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(he.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||Ee,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Te.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof he?t[0]:t,he.merge(this,he.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:ne,!0)),Ce.test(i[1])&&he.isPlainObject(t))for(i in t)he.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return r=ne.getElementById(i[2]),r&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):he.isFunction(e)?void 0!==n.ready?n.ready(e):e(he):he.makeArray(e,this)}).prototype=he.fn,Ee=he(ne);var De=/^(?:parents|prev(?:Until|All))/,Pe={children:!0,contents:!0,next:!0,prev:!0};he.fn.extend({has:function(e){var t=he(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(he.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&he(e);if(!ke.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&he.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?he.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?se.call(he(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(he.uniqueSort(he.merge(this.get(),he(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),he.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return xe(e,"parentNode")},parentsUntil:function(e,t,n){return xe(e,"parentNode",n)},next:function(e){return a(e,"nextSibling")},prev:function(e){return a(e,"previousSibling")},nextAll:function(e){return xe(e,"nextSibling")},prevAll:function(e){return xe(e,"previousSibling")},nextUntil:function(e,t,n){return xe(e,"nextSibling",n)},prevUntil:function(e,t,n){return xe(e,"previousSibling",n)},siblings:function(e){return we((e.parentNode||{}).firstChild,e)},children:function(e){return we(e.firstChild)},contents:function(e){return r(e,"iframe")?e.contentDocument:(r(e,"template")&&(e=e.content||e),he.merge([],e.childNodes))}},function(e,t){he.fn[e]=function(n,i){var r=he.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=he.filter(i,r)),this.length>1&&(Pe[e]||he.uniqueSort(r),De.test(e)&&r.reverse()),this.pushStack(r)}});var Me=/[^\x20\t\r\n\f]+/g;he.Callbacks=function(e){e="string"==typeof e?s(e):he.extend({},e);var t,n,i,r,o=[],a=[],l=-1,c=function(){for(r=r||e.once,i=t=!0;a.length;l=-1)for(n=a.shift();++l<o.length;)!1===o[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(l=o.length-1,a.push(n)),function t(n){he.each(n,function(n,i){he.isFunction(i)?e.unique&&u.has(i)||o.push(i):i&&i.length&&"string"!==he.type(i)&&t(i)})}(arguments),n&&!t&&c()),this},remove:function(){return he.each(arguments,function(e,t){for(var n;(n=he.inArray(t,o,n))>-1;)o.splice(n,1),n<=l&&l--}),this},has:function(e){return e?he.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=a=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},he.extend({Deferred:function(t){var n=[["notify","progress",he.Callbacks("memory"),he.Callbacks("memory"),2],["resolve","done",he.Callbacks("once memory"),he.Callbacks("once memory"),0,"resolved"],["reject","fail",he.Callbacks("once memory"),he.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return he.Deferred(function(t){he.each(n,function(n,i){var r=he.isFunction(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&he.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(t,i,r){function o(t,n,i,r){return function(){var s=this,u=arguments,d=function(){var e,d;if(!(t<a)){if((e=i.apply(s,u))===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,he.isFunction(d)?r?d.call(e,o(a,n,l,r),o(a,n,c,r)):(a++,d.call(e,o(a,n,l,r),o(a,n,c,r),o(a,n,l,n.notifyWith))):(i!==l&&(s=void 0,u=[e]),(r||n.resolveWith)(s,u))}},f=r?d:function(){try{d()}catch(e){he.Deferred.exceptionHook&&he.Deferred.exceptionHook(e,f.stackTrace),t+1>=a&&(i!==c&&(s=void 0,u=[e]),n.rejectWith(s,u))}};t?f():(he.Deferred.getStackHook&&(f.stackTrace=he.Deferred.getStackHook()),e.setTimeout(f))}}var a=0;return he.Deferred(function(e){n[0][3].add(o(0,e,he.isFunction(r)?r:l,e.notifyWith)),n[1][3].add(o(0,e,he.isFunction(t)?t:l)),n[2][3].add(o(0,e,he.isFunction(i)?i:c))}).promise()},promise:function(e){return null!=e?he.extend(e,r):r}},o={};return he.each(n,function(e,t){var a=t[2],s=t[5];r[t[1]]=a.add,s&&a.add(function(){i=s},n[3-e][2].disable,n[0][2].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=re.call(arguments),o=he.Deferred(),a=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?re.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(u(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||he.isFunction(r[n]&&r[n].then)))return o.then();for(;n--;)u(r[n],a(n),o.reject);return o.promise()}});var Ae=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;he.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Ae.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},he.readyException=function(t){e.setTimeout(function(){throw t})};var Oe=he.Deferred();he.fn.ready=function(e){return Oe.then(e).catch(function(e){he.readyException(e)}),this},he.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--he.readyWait:he.isReady)||(he.isReady=!0,!0!==e&&--he.readyWait>0||Oe.resolveWith(ne,[he]))}}),he.ready.then=Oe.then,"complete"===ne.readyState||"loading"!==ne.readyState&&!ne.documentElement.doScroll?e.setTimeout(he.ready):(ne.addEventListener("DOMContentLoaded",d),e.addEventListener("load",d));var Le=function(e,t,n,i,r,o,a){var s=0,l=e.length,c=null==n;if("object"===he.type(n)){r=!0;for(s in n)Le(e,t,s,n[s],!0,o,a)}else if(void 0!==i&&(r=!0,he.isFunction(i)||(a=!0),c&&(a?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(he(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:c?t.call(e):l?t(e[0],n):o},Ne=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};f.uid=1,f.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Ne(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[he.camelCase(t)]=n;else for(i in t)r[he.camelCase(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][he.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){Array.isArray(t)?t=t.map(he.camelCase):(t=he.camelCase(t),t=t in i?[t]:t.match(Me)||[]),n=t.length;for(;n--;)delete i[t[n]]}(void 0===t||he.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!he.isEmptyObject(t)}};var Ie=new f,je=new f,Fe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Re=/[A-Z]/g;he.extend({hasData:function(e){return je.hasData(e)||Ie.hasData(e)},data:function(e,t,n){return je.access(e,t,n)},removeData:function(e,t){je.remove(e,t)},_data:function(e,t,n){return Ie.access(e,t,n)},_removeData:function(e,t){Ie.remove(e,t)}}),he.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=je.get(o),1===o.nodeType&&!Ie.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(i=a[n].name,0===i.indexOf("data-")&&(i=he.camelCase(i.slice(5)),h(o,i,r[i])));Ie.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){je.set(this,e)}):Le(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=je.get(o,e)))return n;if(void 0!==(n=h(o,e)))return n}else this.each(function(){je.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){je.remove(this,e)})}}),he.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Ie.get(e,t),n&&(!i||Array.isArray(n)?i=Ie.access(e,t,he.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=he.queue(e,t),i=n.length,r=n.shift(),o=he._queueHooks(e,t),a=function(){he.dequeue(e,t)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,a,o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ie.get(e,n)||Ie.access(e,n,{empty:he.Callbacks("once memory").add(function(){Ie.remove(e,[t+"queue",n])})})}}),he.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?he.queue(this[0],e):void 0===t?this:this.each(function(){var n=he.queue(this,e,t);he._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&he.dequeue(this,e)})},dequeue:function(e){return this.each(function(){he.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=he.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Ie.get(o[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var $e=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,_e=new RegExp("^(?:([+-])=|)("+$e+")([a-z%]*)$","i"),He=["Top","Right","Bottom","Left"],Be=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&he.contains(e.ownerDocument,e)&&"none"===he.css(e,"display")},qe=function(e,t,n,i){var r,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];r=n.apply(e,i||[]);for(o in t)e.style[o]=a[o];return r},We={};he.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Be(this)?he(this).show():he(this).hide()})}});var Ye=/^(?:checkbox|radio)$/i,ze=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ue=/^$|\/(?:java|ecma)script/i,Ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ge.optgroup=Ge.option,Ge.tbody=Ge.tfoot=Ge.colgroup=Ge.caption=Ge.thead,Ge.th=Ge.td;var Xe=/<|&#?\w+;/;!function(){var e=ne.createDocumentFragment(),t=e.appendChild(ne.createElement("div")),n=ne.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),pe.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",pe.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Ve=ne.documentElement,Ke=/^key/,Ze=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Qe=/^([^.]*)(?:\.(.+)|)/;he.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,c,u,d,f,p,h,g,m=Ie.get(e);if(m)for(n.handler&&(o=n,n=o.handler,r=o.selector),r&&he.find.matchesSelector(Ve,r),n.guid||(n.guid=he.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(t){return void 0!==he&&he.event.triggered!==t.type?he.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Me)||[""],c=t.length;c--;)s=Qe.exec(t[c])||[],p=g=s[1],h=(s[2]||"").split(".").sort(),p&&(d=he.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=he.event.special[p]||{},u=he.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&he.expr.match.needsContext.test(r),namespace:h.join(".")},o),(f=l[p])||(f=l[p]=[],f.delegateCount=0,d.setup&&!1!==d.setup.call(e,i,h,a)||e.addEventListener&&e.addEventListener(p,a)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,u):f.push(u),he.event.global[p]=!0)},remove:function(e,t,n,i,r){var o,a,s,l,c,u,d,f,p,h,g,m=Ie.hasData(e)&&Ie.get(e);if(m&&(l=m.events)){for(t=(t||"").match(Me)||[""],c=t.length;c--;)if(s=Qe.exec(t[c])||[],p=g=s[1],h=(s[2]||"").split(".").sort(),p){for(d=he.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,f=l[p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)u=f[o],!r&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(o,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(e,u));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,m.handle)||he.removeEvent(e,p,m.handle),delete l[p])}else for(p in l)he.event.remove(e,p+t[c],n,i,!0);he.isEmptyObject(l)&&Ie.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=he.event.fix(e),l=new Array(arguments.length),c=(Ie.get(this,"events")||{})[s.type]||[],u=he.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,s)){for(a=he.event.handlers.call(this,s,c),t=0;(r=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(i=((he.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(s.result=i)&&(s.preventDefault(),s.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<l;n++)i=t[n],r=i.selector+" ",void 0===a[r]&&(a[r]=i.needsContext?he(r,this).index(c)>-1:he.find(r,this,null,[c]).length),a[r]&&o.push(i);o.length&&s.push({elem:c,handlers:o})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(he.Event.prototype,e,{enumerable:!0,configurable:!0,get:he.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[he.expando]?e:new he.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==C()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===C()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r(this,"input"))return this.click(),!1},_default:function(e){return r(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},he.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},he.Event=function(e,t){if(!(this instanceof he.Event))return new he.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?w:k,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&he.extend(this,t),this.timeStamp=e&&e.timeStamp||he.now(),this[he.expando]=!0},he.Event.prototype={constructor:he.Event,isDefaultPrevented:k,isPropagationStopped:k,isImmediatePropagationStopped:k,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=w,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=w,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=w,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},he.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ke.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ze.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},he.event.addProp),he.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){he.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return r&&(r===i||he.contains(i,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),he.fn.extend({on:function(e,t,n,i){return S(this,e,t,n,i)},one:function(e,t,n,i){return S(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,he(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=k),this.each(function(){he.event.remove(this,e,n,t)})}});var Je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,et=/<script|<style|<link/i,tt=/checked\s*(?:[^=]|=\s*.checked.)/i,nt=/^true\/(.*)/,it=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;he.extend({htmlPrefilter:function(e){return e.replace(Je,"<$1></$2>")},clone:function(e,t,n){var i,r,o,a,s=e.cloneNode(!0),l=he.contains(e.ownerDocument,e);if(!(pe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||he.isXMLDoc(e)))for(a=y(s),o=y(e),i=0,r=o.length;i<r;i++)M(o[i],a[i]);if(t)if(n)for(o=o||y(e),a=a||y(s),i=0,r=o.length;i<r;i++)P(o[i],a[i]);else P(e,s);return a=y(s,"script"),a.length>0&&b(a,!l&&y(e,"script")),s},cleanData:function(e){for(var t,n,i,r=he.event.special,o=0;void 0!==(n=e[o]);o++)if(Ne(n)){if(t=n[Ie.expando]){if(t.events)for(i in t.events)r[i]?he.event.remove(n,i):he.removeEvent(n,i,t.handle);n[Ie.expando]=void 0}n[je.expando]&&(n[je.expando]=void 0)}}}),he.fn.extend({detach:function(e){return O(this,e,!0)},remove:function(e){return O(this,e)},text:function(e){return Le(this,function(e){return void 0===e?he.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){E(this,e).appendChild(e)}})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=E(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(he.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return he.clone(this,e,t)})},html:function(e){return Le(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!et.test(e)&&!Ge[(ze.exec(e)||["",""])[1].toLowerCase()]){e=he.htmlPrefilter(e);try{for(;n<i;n++)t=this[n]||{},1===t.nodeType&&(he.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;he.inArray(this,e)<0&&(he.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),he.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){he.fn[e]=function(e){for(var n,i=[],r=he(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),he(r[a])[t](n),ae.apply(i,n.get());return this.pushStack(i)}});var rt=/^margin/,ot=new RegExp("^("+$e+")(?!px)[a-z%]+$","i"),at=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ve.appendChild(a);var t=e.getComputedStyle(s);n="1%"!==t.top,o="2px"===t.marginLeft,i="4px"===t.width,s.style.marginRight="50%",r="4px"===t.marginRight,Ve.removeChild(a),s=null}}var n,i,r,o,a=ne.createElement("div"),s=ne.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",pe.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),he.extend(pe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),o}}))}();var st=/^(none|table(?!-c[ea]).+)/,lt=/^--/,ct={position:"absolute",visibility:"hidden",display:"block"},ut={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],ft=ne.createElement("div").style;he.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=L(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=he.camelCase(t),l=lt.test(t),c=e.style;if(l||(t=j(s)),a=he.cssHooks[t]||he.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:c[t];o=typeof n,"string"===o&&(r=_e.exec(n))&&r[1]&&(n=g(e,t,r),o="number"),null!=n&&n===n&&("number"===o&&(n+=r&&r[3]||(he.cssNumber[s]?"":"px")),pe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,a,s=he.camelCase(t);return lt.test(t)||(t=j(s)),a=he.cssHooks[t]||he.cssHooks[s],a&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=L(e,t,i)),"normal"===r&&t in ut&&(r=ut[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),he.each(["height","width"],function(e,t){he.cssHooks[t]={get:function(e,n,i){if(n)return!st.test(he.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?$(e,t,i):qe(e,ct,function(){return $(e,t,i)})},set:function(e,n,i){var r,o=i&&at(e),a=i&&R(e,t,i,"border-box"===he.css(e,"boxSizing",!1,o),o);return a&&(r=_e.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=he.css(e,t)),F(e,n,a)}}}),he.cssHooks.marginLeft=N(pe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(L(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),he.each({margin:"",padding:"",border:"Width"},function(e,t){he.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+He[i]+t]=o[i]||o[i-2]||o[0];return r}},rt.test(e)||(he.cssHooks[e+t].set=F)}),he.fn.extend({css:function(e,t){return Le(this,function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){for(i=at(e),r=t.length;a<r;a++)o[t[a]]=he.css(e,t[a],!1,i);return o}return void 0!==n?he.style(e,t,n):he.css(e,t)},e,t,arguments.length>1)}}),he.Tween=_,_.prototype={constructor:_,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||he.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(he.cssNumber[n]?"":"px")},cur:function(){var e=_.propHooks[this.prop];return e&&e.get?e.get(this):_.propHooks._default.get(this)},run:function(e){var t,n=_.propHooks[this.prop];return this.options.duration?this.pos=t=he.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):_.propHooks._default.set(this),this}},_.prototype.init.prototype=_.prototype,_.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=he.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){he.fx.step[e.prop]?he.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[he.cssProps[e.prop]]&&!he.cssHooks[e.prop]?e.elem[e.prop]=e.now:he.style(e.elem,e.prop,e.now+e.unit)}}},_.propHooks.scrollTop=_.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},he.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},he.fx=_.prototype.init,he.fx.step={};var pt,ht,gt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;he.Animation=he.extend(U,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return g(n.elem,e,_e.exec(t),n),n}]},tweener:function(e,t){he.isFunction(e)?(t=e,e=["*"]):e=e.match(Me);for(var n,i=0,r=e.length;i<r;i++)n=e[i],U.tweeners[n]=U.tweeners[n]||[],U.tweeners[n].unshift(t)},prefilters:[Y],prefilter:function(e,t){t?U.prefilters.unshift(e):U.prefilters.push(e)}}),he.speed=function(e,t,n){var i=e&&"object"==typeof e?he.extend({},e):{complete:n||!n&&t||he.isFunction(e)&&e,duration:e,easing:n&&t||t&&!he.isFunction(t)&&t};return he.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in he.fx.speeds?i.duration=he.fx.speeds[i.duration]:i.duration=he.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){he.isFunction(i.old)&&i.old.call(this),i.queue&&he.dequeue(this,i.queue)},i},he.fn.extend({fadeTo:function(e,t,n,i){return this.filter(Be).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=he.isEmptyObject(e),o=he.speed(t,n,i),a=function(){var t=U(this,he.extend({},e),o);(r||Ie.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=he.timers,a=Ie.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&mt.test(r)&&i(a[r])
;for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||he.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Ie.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=he.timers,a=i?i.length:0;for(n.finish=!0,he.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),he.each(["toggle","show","hide"],function(e,t){var n=he.fn[t];he.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(q(t,!0),e,i,r)}}),he.each({slideDown:q("show"),slideUp:q("hide"),slideToggle:q("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){he.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),he.timers=[],he.fx.tick=function(){var e,t=0,n=he.timers;for(pt=he.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||he.fx.stop(),pt=void 0},he.fx.timer=function(e){he.timers.push(e),he.fx.start()},he.fx.interval=13,he.fx.start=function(){ht||(ht=!0,H())},he.fx.stop=function(){ht=null},he.fx.speeds={slow:600,fast:200,_default:400},he.fn.delay=function(t,n){return t=he.fx?he.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})},function(){var e=ne.createElement("input"),t=ne.createElement("select"),n=t.appendChild(ne.createElement("option"));e.type="checkbox",pe.checkOn=""!==e.value,pe.optSelected=n.selected,e=ne.createElement("input"),e.value="t",e.type="radio",pe.radioValue="t"===e.value}();var vt,yt=he.expr.attrHandle;he.fn.extend({attr:function(e,t){return Le(this,he.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){he.removeAttr(this,e)})}}),he.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?he.prop(e,t,n):(1===o&&he.isXMLDoc(e)||(r=he.attrHooks[t.toLowerCase()]||(he.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void he.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=he.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!pe.radioValue&&"radio"===t&&r(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(Me);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return!1===t?he.removeAttr(e,n):e.setAttribute(n,n),n}},he.each(he.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||he.find.attr;yt[t]=function(e,t,i){var r,o,a=t.toLowerCase();return i||(o=yt[a],yt[a]=r,r=null!=n(e,t,i)?a:null,yt[a]=o),r}});var bt=/^(?:input|select|textarea|button)$/i,xt=/^(?:a|area)$/i;he.fn.extend({prop:function(e,t){return Le(this,he.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[he.propFix[e]||e]})}}),he.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&he.isXMLDoc(e)||(t=he.propFix[t]||t,r=he.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=he.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||xt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),pe.optSelected||(he.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),he.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){he.propFix[this.toLowerCase()]=this}),he.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(he.isFunction(e))return this.each(function(t){he(this).addClass(e.call(this,t,X(this)))});if("string"==typeof e&&e)for(t=e.match(Me)||[];n=this[l++];)if(r=X(n),i=1===n.nodeType&&" "+G(r)+" "){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");s=G(i),r!==s&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(he.isFunction(e))return this.each(function(t){he(this).removeClass(e.call(this,t,X(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Me)||[];n=this[l++];)if(r=X(n),i=1===n.nodeType&&" "+G(r)+" "){for(a=0;o=t[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");s=G(i),r!==s&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):he.isFunction(e)?this.each(function(n){he(this).toggleClass(e.call(this,n,X(this),t),t)}):this.each(function(){var t,i,r,o;if("string"===n)for(i=0,r=he(this),o=e.match(Me)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||(t=X(this),t&&Ie.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Ie.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+G(X(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;he.fn.extend({val:function(e){var t,n,i,r=this[0];{if(arguments.length)return i=he.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(r=i?e.call(this,n,he(this).val()):e,null==r?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=he.map(r,function(e){return null==e?"":e+""})),(t=he.valHooks[this.type]||he.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return(t=he.valHooks[r.type]||he.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(wt,""):null==n?"":n)}}}),he.extend({valHooks:{option:{get:function(e){var t=he.find.attr(e,"value");return null!=t?t:G(he.text(e))}},select:{get:function(e){var t,n,i,o=e.options,a=e.selectedIndex,s="select-one"===e.type,l=s?null:[],c=s?a+1:o.length;for(i=a<0?c:s?a:0;i<c;i++)if(n=o[i],(n.selected||i===a)&&!n.disabled&&(!n.parentNode.disabled||!r(n.parentNode,"optgroup"))){if(t=he(n).val(),s)return t;l.push(t)}return l},set:function(e,t){for(var n,i,r=e.options,o=he.makeArray(t),a=r.length;a--;)i=r[a],(i.selected=he.inArray(he.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),he.each(["radio","checkbox"],function(){he.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=he.inArray(he(e).val(),t)>-1}},pe.checkOn||(he.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var kt=/^(?:focusinfocus|focusoutblur)$/;he.extend(he.event,{trigger:function(t,n,i,r){var o,a,s,l,c,u,d,f=[i||ne],p=ue.call(t,"type")?t.type:t,h=ue.call(t,"namespace")?t.namespace.split("."):[];if(a=s=i=i||ne,3!==i.nodeType&&8!==i.nodeType&&!kt.test(p+he.event.triggered)&&(p.indexOf(".")>-1&&(h=p.split("."),p=h.shift(),h.sort()),c=p.indexOf(":")<0&&"on"+p,t=t[he.expando]?t:new he.Event(p,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:he.makeArray(n,[t]),d=he.event.special[p]||{},r||!d.trigger||!1!==d.trigger.apply(i,n))){if(!r&&!d.noBubble&&!he.isWindow(i)){for(l=d.delegateType||p,kt.test(l+p)||(a=a.parentNode);a;a=a.parentNode)f.push(a),s=a;s===(i.ownerDocument||ne)&&f.push(s.defaultView||s.parentWindow||e)}for(o=0;(a=f[o++])&&!t.isPropagationStopped();)t.type=o>1?l:d.bindType||p,u=(Ie.get(a,"events")||{})[t.type]&&Ie.get(a,"handle"),u&&u.apply(a,n),(u=c&&a[c])&&u.apply&&Ne(a)&&(t.result=u.apply(a,n),!1===t.result&&t.preventDefault());return t.type=p,r||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),n)||!Ne(i)||c&&he.isFunction(i[p])&&!he.isWindow(i)&&(s=i[c],s&&(i[c]=null),he.event.triggered=p,i[p](),he.event.triggered=void 0,s&&(i[c]=s)),t.result}},simulate:function(e,t,n){var i=he.extend(new he.Event,n,{type:e,isSimulated:!0});he.event.trigger(i,null,t)}}),he.fn.extend({trigger:function(e,t){return this.each(function(){he.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return he.event.trigger(e,t,n,!0)}}),he.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){he.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),he.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),pe.focusin="onfocusin"in e,pe.focusin||he.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){he.event.simulate(t,e.target,he.event.fix(e))};he.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=Ie.access(i,t);r||i.addEventListener(e,n,!0),Ie.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Ie.access(i,t)-1;r?Ie.access(i,t,r):(i.removeEventListener(e,n,!0),Ie.remove(i,t))}}});var Ct=e.location,St=he.now(),Et=/\?/;he.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||he.error("Invalid XML: "+t),n};var Tt=/\[\]$/,Dt=/\r?\n/g,Pt=/^(?:submit|button|image|reset|file)$/i,Mt=/^(?:input|select|textarea|keygen)/i;he.param=function(e,t){var n,i=[],r=function(e,t){var n=he.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!he.isPlainObject(e))he.each(e,function(){r(this.name,this.value)});else for(n in e)V(n,e[n],t,r);return i.join("&")},he.fn.extend({serialize:function(){return he.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=he.prop(this,"elements");return e?he.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!he(this).is(":disabled")&&Mt.test(this.nodeName)&&!Pt.test(e)&&(this.checked||!Ye.test(e))}).map(function(e,t){var n=he(this).val();return null==n?null:Array.isArray(n)?he.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\r\n")}}):{name:t.name,value:n.replace(Dt,"\r\n")}}).get()}});var At=/%20/g,Ot=/#.*$/,Lt=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,jt=/^(?:GET|HEAD)$/,Ft=/^\/\//,Rt={},$t={},_t="*/".concat("*"),Ht=ne.createElement("a");Ht.href=Ct.href,he.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:It.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":_t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":he.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Q(Q(e,he.ajaxSettings),t):Q(he.ajaxSettings,e)},ajaxPrefilter:K(Rt),ajaxTransport:K($t),ajax:function(t,n){function i(t,n,i,s){var c,f,p,x,w,k=n;u||(u=!0,l&&e.clearTimeout(l),r=void 0,a=s||"",C.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(x=J(h,C,i)),x=ee(h,x,C,c),c?(h.ifModified&&(w=C.getResponseHeader("Last-Modified"),w&&(he.lastModified[o]=w),(w=C.getResponseHeader("etag"))&&(he.etag[o]=w)),204===t||"HEAD"===h.type?k="nocontent":304===t?k="notmodified":(k=x.state,f=x.data,p=x.error,c=!p)):(p=k,!t&&k||(k="error",t<0&&(t=0))),C.status=t,C.statusText=(n||k)+"",c?v.resolveWith(g,[f,k,C]):v.rejectWith(g,[C,k,p]),C.statusCode(b),b=void 0,d&&m.trigger(c?"ajaxSuccess":"ajaxError",[C,h,c?f:p]),y.fireWith(g,[C,k]),d&&(m.trigger("ajaxComplete",[C,h]),--he.active||he.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,o,a,s,l,c,u,d,f,p,h=he.ajaxSetup({},n),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?he(g):he.event,v=he.Deferred(),y=he.Callbacks("once memory"),b=h.statusCode||{},x={},w={},k="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=Nt.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?a:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)C.always(e[C.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||k;return r&&r.abort(t),i(0,t),this}};if(v.promise(C),h.url=((t||h.url||Ct.href)+"").replace(Ft,Ct.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(Me)||[""],null==h.crossDomain){c=ne.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Ht.protocol+"//"+Ht.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=he.param(h.data,h.traditional)),Z(Rt,h,n,C),u)return C;d=he.event&&h.global,d&&0==he.active++&&he.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!jt.test(h.type),o=h.url.replace(Ot,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(At,"+")):(p=h.url.slice(o.length),h.data&&(o+=(Et.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Lt,"$1"),p=(Et.test(o)?"&":"?")+"_="+St+++p),h.url=o+p),h.ifModified&&(he.lastModified[o]&&C.setRequestHeader("If-Modified-Since",he.lastModified[o]),he.etag[o]&&C.setRequestHeader("If-None-Match",he.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+_t+"; q=0.01":""):h.accepts["*"]);for(f in h.headers)C.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(g,C,h)||u))return C.abort();if(k="abort",y.add(h.complete),C.done(h.success),C.fail(h.error),r=Z($t,h,n,C)){if(C.readyState=1,d&&m.trigger("ajaxSend",[C,h]),u)return C;h.async&&h.timeout>0&&(l=e.setTimeout(function(){C.abort("timeout")},h.timeout));try{u=!1,r.send(x,i)}catch(e){if(u)throw e;i(-1,e)}}else i(-1,"No Transport");return C},getJSON:function(e,t,n){return he.get(e,t,n,"json")},getScript:function(e,t){return he.get(e,void 0,t,"script")}}),he.each(["get","post"],function(e,t){he[t]=function(e,n,i,r){return he.isFunction(n)&&(r=r||i,i=n,n=void 0),he.ajax(he.extend({url:e,type:t,dataType:r,data:n,success:i},he.isPlainObject(e)&&e))}}),he._evalUrl=function(e){return he.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},he.fn.extend({wrapAll:function(e){var t;return this[0]&&(he.isFunction(e)&&(e=e.call(this[0])),t=he(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return he.isFunction(e)?this.each(function(t){he(this).wrapInner(e.call(this,t))}):this.each(function(){var t=he(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=he.isFunction(e);return this.each(function(n){he(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){he(this).replaceWith(this.childNodes)}),this}}),he.expr.pseudos.hidden=function(e){return!he.expr.pseudos.visible(e)},he.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},he.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Bt={0:200,1223:204},qt=he.ajaxSettings.xhr();pe.cors=!!qt&&"withCredentials"in qt,pe.ajax=qt=!!qt,he.ajaxTransport(function(t){var n,i;if(pe.cors||qt&&!t.crossDomain)return{send:function(r,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(a in r)s.setRequestHeader(a,r[a]);n=function(e){return function(){n&&(n=i=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Bt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),i=s.onerror=n("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),he.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),he.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return he.globalEval(e),e}}}),he.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),he.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,r){t=he("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),ne.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Wt=[],Yt=/(=)\?(?=&|$)|\?\?/;he.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Wt.pop()||he.expando+"_"+St++;return this[e]=!0,e}}),he.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,a,s=!1!==t.jsonp&&(Yt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=he.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Yt,"$1"+r):!1!==t.jsonp&&(t.url+=(Et.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return a||he.error(r+" was not called"),a[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){a=arguments},i.always(function(){void 0===o?he(e).removeProp(r):e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,Wt.push(r)),a&&he.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),pe.createHTMLDocument=function(){var e=ne.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),he.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,r,o;return t||(pe.createHTMLDocument?(t=ne.implementation.createHTMLDocument(""),i=t.createElement("base"),i.href=ne.location.href,t.head.appendChild(i)):t=ne),r=Ce.exec(e),o=!n&&[],r?[t.createElement(r[1])]:(r=x([e],t,o),o&&o.length&&he(o).remove(),he.merge([],r.childNodes))},he.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return s>-1&&(i=G(e.slice(s)),e=e.slice(0,s)),he.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&he.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(i?he("<div>").append(he.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},he.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){he.fn[t]=function(e){return this.on(t,e)}}),he.expr.pseudos.animated=function(e){return he.grep(he.timers,function(t){return e===t.elem}).length},he.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,c,u=he.css(e,"position"),d=he(e),f={};"static"===u&&(e.style.position="relative"),s=d.offset(),o=he.css(e,"top"),l=he.css(e,"left"),c=("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1,c?(i=d.position(),a=i.top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),he.isFunction(t)&&(t=t.call(e,n,he.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+r),"using"in t?t.using.call(e,f):d.css(f)}},he.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){he.offset.setOffset(this,e,t)});var t,n,i,r,o=this[0];if(o)return o.getClientRects().length?(i=o.getBoundingClientRect(),t=o.ownerDocument,n=t.documentElement,r=t.defaultView,{top:i.top+r.pageYOffset-n.clientTop,left:i.left+r.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===he.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),r(e[0],"html")||(i=e.offset()),i={top:i.top+he.css(e[0],"borderTopWidth",!0),left:i.left+he.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-he.css(n,"marginTop",!0),left:t.left-i.left-he.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===he.css(e,"position");)e=e.offsetParent;return e||Ve})}}),he.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;he.fn[e]=function(i){return Le(this,function(e,i,r){var o;if(he.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r},e,i,arguments.length)}}),he.each(["top","left"],function(e,t){he.cssHooks[t]=N(pe.pixelPosition,function(e,n){if(n)return n=L(e,t),ot.test(n)?he(e).position()[t]+"px":n})}),he.each({Height:"height",Width:"width"},function(e,t){he.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){he.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===o?"margin":"border");return Le(this,function(t,n,r){var o;return he.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?he.css(t,n,s):he.style(t,n,r,s)},t,a?r:void 0,a)}})}),he.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),he.holdReady=function(e){e?he.readyWait++:he.ready(!0)},he.isArray=Array.isArray,he.parseJSON=JSON.parse,he.nodeName=r,"function"==typeof define&&define.amd&&define("jquery",[],function(){return he});var zt=e.jQuery,Ut=e.$;return he.noConflict=function(t){return e.$===he&&(e.$=Ut),t&&e.jQuery===he&&(e.jQuery=zt),he},t||(e.jQuery=e.$=he),he}),function(e){var t={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};e.fn.bxSlider=function(n){if(0===this.length)return this;if(this.length>1)return this.each(function(){e(this).bxSlider(n)}),this;var r={},o=this,a=e(window).width(),s=e(window).height();if(!e(o).data("bxSlider")){var l=function(){e(o).data("bxSlider")||(r.settings=e.extend({},t,n),r.settings.slideWidth=parseInt(r.settings.slideWidth),r.children=o.children(r.settings.slideSelector),r.children.length<r.settings.minSlides&&(r.settings.minSlides=r.children.length),r.children.length<r.settings.maxSlides&&(r.settings.maxSlides=r.children.length),r.settings.randomStart&&(r.settings.startSlide=Math.floor(Math.random()*r.children.length)),r.active={index:r.settings.startSlide},r.carousel=r.settings.minSlides>1||r.settings.maxSlides>1,r.carousel&&(r.settings.preloadImages="all"),r.minThreshold=r.settings.minSlides*r.settings.slideWidth+(r.settings.minSlides-1)*r.settings.slideMargin,r.maxThreshold=r.settings.maxSlides*r.settings.slideWidth+(r.settings.maxSlides-1)*r.settings.slideMargin,r.working=!1,r.controls={},r.interval=null,r.animProp="vertical"===r.settings.mode?"top":"left",r.usingCSS=r.settings.useCSS&&"fade"!==r.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return r.cssPrefix=t[n].replace("Perspective","").toLowerCase(),r.animProp="-"+r.cssPrefix+"-transform",!0;return!1}(),"vertical"===r.settings.mode&&(r.settings.maxSlides=r.settings.minSlides),o.data("origStyle",o.attr("style")),o.children(r.settings.slideSelector).each(function(){e(this).data("origStyle",e(this).attr("style"))}),c())},c=function(){var t=r.children.eq(r.settings.startSlide);o.wrap('<div class="'+r.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),r.viewport=o.parent(),r.settings.ariaLive&&!r.settings.ticker&&r.viewport.attr("aria-live","polite"),r.loader=e('<div class="bx-loading" />'),r.viewport.prepend(r.loader),o.css({width:"horizontal"===r.settings.mode?1e3*r.children.length+215+"%":"auto",position:"relative"}),r.usingCSS&&r.settings.easing?o.css("-"+r.cssPrefix+"-transition-timing-function",r.settings.easing):r.settings.easing||(r.settings.easing="swing"),r.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),r.viewport.parent().css({maxWidth:p()}),r.children.css({float:"horizontal"===r.settings.mode?"left":"none",listStyle:"none",position:"relative"}),r.children.css("width",h()),"horizontal"===r.settings.mode&&r.settings.slideMargin>0&&r.children.css("marginRight",r.settings.slideMargin),"vertical"===r.settings.mode&&r.settings.slideMargin>0&&r.children.css("marginBottom",r.settings.slideMargin),"fade"===r.settings.mode&&(r.children.css({position:"absolute",zIndex:0,display:"none"}),r.children.eq(r.settings.startSlide).css({zIndex:r.settings.slideZIndex,display:"block"})),r.controls.el=e('<div class="bx-controls" />'),r.settings.captions&&S(),r.active.last=r.settings.startSlide===m()-1,r.settings.video&&o.fitVids(),("all"===r.settings.preloadImages||r.settings.ticker)&&(t=r.children),r.settings.ticker?r.settings.pager=!1:(r.settings.controls&&k(),r.settings.auto&&r.settings.autoControls&&C(),r.settings.pager&&w(),(r.settings.controls||r.settings.autoControls||r.settings.pager)&&r.viewport.after(r.controls.el)),u(t,d)},u=function(t,n){var i=t.find('img:not([src=""]), iframe').length,r=0;if(0===i)return void n();t.find('img:not([src=""]), iframe').each(function(){e(this).one("load error",function(){++r===i&&n()}).each(function(){(this.complete||""==this.src)&&e(this).trigger("load")})})},d=function(){if(r.settings.infiniteLoop&&"fade"!==r.settings.mode&&!r.settings.ticker){var t="vertical"===r.settings.mode?r.settings.minSlides:r.settings.maxSlides,n=r.children.slice(0,t).clone(!0).addClass("bx-clone"),i=r.children.slice(-t).clone(!0).addClass("bx-clone");r.settings.ariaHidden&&(n.attr("aria-hidden",!0),i.attr("aria-hidden",!0)),o.append(n).prepend(i)}r.loader.remove(),y(),"vertical"===r.settings.mode&&(r.settings.adaptiveHeight=!0),r.viewport.height(f()),o.redrawSlider(),r.settings.onSliderLoad.call(o,r.active.index),r.initialized=!0,r.settings.responsive&&e(window).bind("resize",U),r.settings.auto&&r.settings.autoStart&&(m()>1||r.settings.autoSlideForOnePage)&&F(),r.settings.ticker&&R(),r.settings.pager&&A(r.settings.startSlide),r.settings.controls&&N(),r.settings.touchEnabled&&!r.settings.ticker&&B(),r.settings.keyboardEnabled&&!r.settings.ticker&&e(document).keydown(H)},f=function(){var t=0,n=e();if("vertical"===r.settings.mode||r.settings.adaptiveHeight)if(r.carousel){var o=1===r.settings.moveSlides?r.active.index:r.active.index*v();for(n=r.children.eq(o),i=1;i<=r.settings.maxSlides-1;i++)n=o+i>=r.children.length?n.add(r.children.eq(i-1)):n.add(r.children.eq(o+i))}else n=r.children.eq(r.active.index);else n=r.children;return"vertical"===r.settings.mode?(n.each(function(n){t+=e(this).outerHeight()}),r.settings.slideMargin>0&&(t+=r.settings.slideMargin*(r.settings.minSlides-1))):t=Math.max.apply(Math,n.map(function(){return e(this).outerHeight(!1)}).get()),"border-box"===r.viewport.css("box-sizing")?t+=parseFloat(r.viewport.css("padding-top"))+parseFloat(r.viewport.css("padding-bottom"))+parseFloat(r.viewport.css("border-top-width"))+parseFloat(r.viewport.css("border-bottom-width")):"padding-box"===r.viewport.css("box-sizing")&&(t+=parseFloat(r.viewport.css("padding-top"))+parseFloat(r.viewport.css("padding-bottom"))),t},p=function(){var e="100%";return r.settings.slideWidth>0&&(e="horizontal"===r.settings.mode?r.settings.maxSlides*r.settings.slideWidth+(r.settings.maxSlides-1)*r.settings.slideMargin:r.settings.slideWidth),e},h=function(){var e=r.settings.slideWidth,t=r.viewport.width();if(0===r.settings.slideWidth||r.settings.slideWidth>t&&!r.carousel||"vertical"===r.settings.mode)e=t;else if(r.settings.maxSlides>1&&"horizontal"===r.settings.mode){if(t>r.maxThreshold)return e;t<r.minThreshold?e=(t-r.settings.slideMargin*(r.settings.minSlides-1))/r.settings.minSlides:r.settings.shrinkItems&&(e=Math.floor((t+r.settings.slideMargin)/Math.ceil((t+r.settings.slideMargin)/(e+r.settings.slideMargin))-r.settings.slideMargin))}return e},g=function(){var e=1,t=null;return"horizontal"===r.settings.mode&&r.settings.slideWidth>0?r.viewport.width()<r.minThreshold?e=r.settings.minSlides:r.viewport.width()>r.maxThreshold?e=r.settings.maxSlides:(t=r.children.first().width()+r.settings.slideMargin,e=Math.floor((r.viewport.width()+r.settings.slideMargin)/t)||1):"vertical"===r.settings.mode&&(e=r.settings.minSlides),e},m=function(){var e=0,t=0,n=0;if(r.settings.moveSlides>0){if(!r.settings.infiniteLoop){for(;t<r.children.length;)++e,t=n+g(),n+=r.settings.moveSlides<=g()?r.settings.moveSlides:g();return n}e=Math.ceil(r.children.length/v())}else e=Math.ceil(r.children.length/g());return e},v=function(){return r.settings.moveSlides>0&&r.settings.moveSlides<=g()?r.settings.moveSlides:g()},y=function(){var e,t,n;r.children.length>r.settings.maxSlides&&r.active.last&&!r.settings.infiniteLoop?"horizontal"===r.settings.mode?(t=r.children.last(),e=t.position(),b(-(e.left-(r.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===r.settings.mode&&(n=r.children.length-r.settings.minSlides,e=r.children.eq(n).position(),b(-e.top,"reset",0)):(e=r.children.eq(r.active.index*v()).position(),r.active.index===m()-1&&(r.active.last=!0),void 0!==e&&("horizontal"===r.settings.mode?b(-e.left,"reset",0):"vertical"===r.settings.mode&&b(-e.top,"reset",0)))},b=function(t,n,i,a){var s,l;r.usingCSS?(l="vertical"===r.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)",o.css("-"+r.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"===n?(o.css(r.animProp,l),0!==i?o.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){
e(t.target).is(o)&&(o.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),O())}):O()):"reset"===n?o.css(r.animProp,l):"ticker"===n&&(o.css("-"+r.cssPrefix+"-transition-timing-function","linear"),o.css(r.animProp,l),0!==i?o.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){e(t.target).is(o)&&(o.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),b(a.resetValue,"reset",0),$())}):(b(a.resetValue,"reset",0),$()))):(s={},s[r.animProp]=t,"slide"===n?o.animate(s,i,r.settings.easing,function(){O()}):"reset"===n?o.css(r.animProp,t):"ticker"===n&&o.animate(s,i,"linear",function(){b(a.resetValue,"reset",0),$()}))},x=function(){for(var t="",n="",i=m(),o=0;o<i;o++)n="",r.settings.buildPager&&e.isFunction(r.settings.buildPager)||r.settings.pagerCustom?(n=r.settings.buildPager(o),r.pagerEl.addClass("bx-custom-pager")):(n=o+1,r.pagerEl.addClass("bx-default-pager")),t+='<div class="bx-pager-item"><a href="" data-slide-index="'+o+'" class="bx-pager-link">'+n+"</a></div>";r.pagerEl.html(t)},w=function(){r.settings.pagerCustom?r.pagerEl=e(r.settings.pagerCustom):(r.pagerEl=e('<div class="bx-pager" />'),r.settings.pagerSelector?e(r.settings.pagerSelector).html(r.pagerEl):r.controls.el.addClass("bx-has-pager").append(r.pagerEl),x()),r.pagerEl.on("click touchend","a",M)},k=function(){r.controls.next=e('<a class="bx-next" href="">'+r.settings.nextText+"</a>"),r.controls.prev=e('<a class="bx-prev" href="">'+r.settings.prevText+"</a>"),r.controls.next.bind("click touchend",E),r.controls.prev.bind("click touchend",T),r.settings.nextSelector&&e(r.settings.nextSelector).append(r.controls.next),r.settings.prevSelector&&e(r.settings.prevSelector).append(r.controls.prev),r.settings.nextSelector||r.settings.prevSelector||(r.controls.directionEl=e('<div class="bx-controls-direction" />'),r.controls.directionEl.append(r.controls.prev).append(r.controls.next),r.controls.el.addClass("bx-has-controls-direction").append(r.controls.directionEl))},C=function(){r.controls.start=e('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+r.settings.startText+"</a></div>"),r.controls.stop=e('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+r.settings.stopText+"</a></div>"),r.controls.autoEl=e('<div class="bx-controls-auto" />'),r.controls.autoEl.on("click",".bx-start",D),r.controls.autoEl.on("click",".bx-stop",P),r.settings.autoControlsCombine?r.controls.autoEl.append(r.controls.start):r.controls.autoEl.append(r.controls.start).append(r.controls.stop),r.settings.autoControlsSelector?e(r.settings.autoControlsSelector).html(r.controls.autoEl):r.controls.el.addClass("bx-has-controls-auto").append(r.controls.autoEl),L(r.settings.autoStart?"stop":"start")},S=function(){r.children.each(function(t){var n=e(this).find("img:first").attr("title");void 0!==n&&(""+n).length&&e(this).append('<div class="bx-caption"><span>'+n+"</span></div>")})},E=function(e){e.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),o.goToNextSlide())},T=function(e){e.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),o.goToPrevSlide())},D=function(e){o.startAuto(),e.preventDefault()},P=function(e){o.stopAuto(),e.preventDefault()},M=function(t){var n,i;t.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),n=e(t.currentTarget),void 0!==n.attr("data-slide-index")&&(i=parseInt(n.attr("data-slide-index")))!==r.active.index&&o.goToSlide(i))},A=function(t){var n=r.children.length;if("short"===r.settings.pagerType)return r.settings.maxSlides>1&&(n=Math.ceil(r.children.length/r.settings.maxSlides)),void r.pagerEl.html(t+1+r.settings.pagerShortSeparator+n);r.pagerEl.find("a").removeClass("active"),r.pagerEl.each(function(n,i){e(i).find("a").eq(t).addClass("active")})},O=function(){if(r.settings.infiniteLoop){var e="";0===r.active.index?e=r.children.eq(0).position():r.active.index===m()-1&&r.carousel?e=r.children.eq((m()-1)*v()).position():r.active.index===r.children.length-1&&(e=r.children.eq(r.children.length-1).position()),e&&("horizontal"===r.settings.mode?b(-e.left,"reset",0):"vertical"===r.settings.mode&&b(-e.top,"reset",0))}r.working=!1,r.settings.onSlideAfter.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)},L=function(e){r.settings.autoControlsCombine?r.controls.autoEl.html(r.controls[e]):(r.controls.autoEl.find("a").removeClass("active"),r.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},N=function(){1===m()?(r.controls.prev.addClass("disabled"),r.controls.next.addClass("disabled")):!r.settings.infiniteLoop&&r.settings.hideControlOnEnd&&(0===r.active.index?(r.controls.prev.addClass("disabled"),r.controls.next.removeClass("disabled")):r.active.index===m()-1?(r.controls.next.addClass("disabled"),r.controls.prev.removeClass("disabled")):(r.controls.prev.removeClass("disabled"),r.controls.next.removeClass("disabled")))},I=function(){o.startAuto()},j=function(){o.stopAuto()},F=function(){if(r.settings.autoDelay>0){setTimeout(o.startAuto,r.settings.autoDelay)}else o.startAuto(),e(window).focus(I).blur(j);r.settings.autoHover&&o.hover(function(){r.interval&&(o.stopAuto(!0),r.autoPaused=!0)},function(){r.autoPaused&&(o.startAuto(!0),r.autoPaused=null)})},R=function(){var t,n,i,a,s,l,c,u,d=0;"next"===r.settings.autoDirection?o.append(r.children.clone().addClass("bx-clone")):(o.prepend(r.children.clone().addClass("bx-clone")),t=r.children.first().position(),d="horizontal"===r.settings.mode?-t.left:-t.top),b(d,"reset",0),r.settings.pager=!1,r.settings.controls=!1,r.settings.autoControls=!1,r.settings.tickerHover&&(r.usingCSS?(a="horizontal"===r.settings.mode?4:5,r.viewport.hover(function(){n=o.css("-"+r.cssPrefix+"-transform"),i=parseFloat(n.split(",")[a]),b(i,"reset",0)},function(){u=0,r.children.each(function(t){u+="horizontal"===r.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),s=r.settings.speed/u,l="horizontal"===r.settings.mode?"left":"top",c=s*(u-Math.abs(parseInt(i))),$(c)})):r.viewport.hover(function(){o.stop()},function(){u=0,r.children.each(function(t){u+="horizontal"===r.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),s=r.settings.speed/u,l="horizontal"===r.settings.mode?"left":"top",c=s*(u-Math.abs(parseInt(o.css(l)))),$(c)})),$()},$=function(e){var t,n,i,a=e||r.settings.speed,s={left:0,top:0},l={left:0,top:0};"next"===r.settings.autoDirection?s=o.find(".bx-clone").first().position():l=r.children.first().position(),t="horizontal"===r.settings.mode?-s.left:-s.top,n="horizontal"===r.settings.mode?-l.left:-l.top,i={resetValue:n},b(t,"ticker",a,i)},_=function(t){var n=e(window),i={top:n.scrollTop(),left:n.scrollLeft()},r=t.offset();return i.right=i.left+n.width(),i.bottom=i.top+n.height(),r.right=r.left+t.outerWidth(),r.bottom=r.top+t.outerHeight(),!(i.right<r.left||i.left>r.right||i.bottom<r.top||i.top>r.bottom)},H=function(e){var t=document.activeElement.tagName.toLowerCase();if(null==new RegExp(t,["i"]).exec("input|textarea")&&_(o)){if(39===e.keyCode)return E(e),!1;if(37===e.keyCode)return T(e),!1}},B=function(){r.touch={start:{x:0,y:0},end:{x:0,y:0}},r.viewport.bind("touchstart MSPointerDown pointerdown",q),r.viewport.on("click",".bxslider a",function(e){r.viewport.hasClass("click-disabled")&&(e.preventDefault(),r.viewport.removeClass("click-disabled"))})},q=function(e){if(r.controls.el.addClass("disabled"),r.working)e.preventDefault(),r.controls.el.removeClass("disabled");else{r.touch.originalPos=o.position();var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t];r.touch.start.x=n[0].pageX,r.touch.start.y=n[0].pageY,r.viewport.get(0).setPointerCapture&&(r.pointerId=t.pointerId,r.viewport.get(0).setPointerCapture(r.pointerId)),r.viewport.bind("touchmove MSPointerMove pointermove",Y),r.viewport.bind("touchend MSPointerUp pointerup",z),r.viewport.bind("MSPointerCancel pointercancel",W)}},W=function(e){b(r.touch.originalPos.left,"reset",0),r.controls.el.removeClass("disabled"),r.viewport.unbind("MSPointerCancel pointercancel",W),r.viewport.unbind("touchmove MSPointerMove pointermove",Y),r.viewport.unbind("touchend MSPointerUp pointerup",z),r.viewport.get(0).releasePointerCapture&&r.viewport.get(0).releasePointerCapture(r.pointerId)},Y=function(e){var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-r.touch.start.x),o=Math.abs(n[0].pageY-r.touch.start.y),a=0,s=0;3*i>o&&r.settings.preventDefaultSwipeX?e.preventDefault():3*o>i&&r.settings.preventDefaultSwipeY&&e.preventDefault(),"fade"!==r.settings.mode&&r.settings.oneToOneTouch&&("horizontal"===r.settings.mode?(s=n[0].pageX-r.touch.start.x,a=r.touch.originalPos.left+s):(s=n[0].pageY-r.touch.start.y,a=r.touch.originalPos.top+s),b(a,"reset",0))},z=function(e){r.viewport.unbind("touchmove MSPointerMove pointermove",Y),r.controls.el.removeClass("disabled");var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=0,a=0;r.touch.end.x=n[0].pageX,r.touch.end.y=n[0].pageY,"fade"===r.settings.mode?(a=Math.abs(r.touch.start.x-r.touch.end.x))>=r.settings.swipeThreshold&&(r.touch.start.x>r.touch.end.x?o.goToNextSlide():o.goToPrevSlide(),o.stopAuto()):("horizontal"===r.settings.mode?(a=r.touch.end.x-r.touch.start.x,i=r.touch.originalPos.left):(a=r.touch.end.y-r.touch.start.y,i=r.touch.originalPos.top),!r.settings.infiniteLoop&&(0===r.active.index&&a>0||r.active.last&&a<0)?b(i,"reset",200):Math.abs(a)>=r.settings.swipeThreshold?(a<0?o.goToNextSlide():o.goToPrevSlide(),o.stopAuto()):b(i,"reset",200)),r.viewport.unbind("touchend MSPointerUp pointerup",z),r.viewport.get(0).releasePointerCapture&&r.viewport.get(0).releasePointerCapture(r.pointerId)},U=function(t){if(r.initialized)if(r.working)window.setTimeout(U,10);else{var n=e(window).width(),i=e(window).height();a===n&&s===i||(a=n,s=i,o.redrawSlider(),r.settings.onSliderResize.call(o,r.active.index))}},G=function(e){var t=g();r.settings.ariaHidden&&!r.settings.ticker&&(r.children.attr("aria-hidden","true"),r.children.slice(e,e+t).attr("aria-hidden","false"))},X=function(e){return e<0?r.settings.infiniteLoop?m()-1:r.active.index:e>=m()?r.settings.infiniteLoop?0:r.active.index:e};return o.goToSlide=function(t,n){var i,a,s,l,c=!0,u=0,d={left:0,top:0},p=null;if(r.oldIndex=r.active.index,r.active.index=X(t),!r.working&&r.active.index!==r.oldIndex){if(r.working=!0,void 0!==(c=r.settings.onSlideBefore.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index))&&!c)return r.active.index=r.oldIndex,void(r.working=!1);"next"===n?r.settings.onSlideNext.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)||(c=!1):"prev"===n&&(r.settings.onSlidePrev.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)||(c=!1)),r.active.last=r.active.index>=m()-1,(r.settings.pager||r.settings.pagerCustom)&&A(r.active.index),r.settings.controls&&N(),"fade"===r.settings.mode?(r.settings.adaptiveHeight&&r.viewport.height()!==f()&&r.viewport.animate({height:f()},r.settings.adaptiveHeightSpeed),r.children.filter(":visible").fadeOut(r.settings.speed).css({zIndex:0}),r.children.eq(r.active.index).css("zIndex",r.settings.slideZIndex+1).fadeIn(r.settings.speed,function(){e(this).css("zIndex",r.settings.slideZIndex),O()})):(r.settings.adaptiveHeight&&r.viewport.height()!==f()&&r.viewport.animate({height:f()},r.settings.adaptiveHeightSpeed),!r.settings.infiniteLoop&&r.carousel&&r.active.last?"horizontal"===r.settings.mode?(p=r.children.eq(r.children.length-1),d=p.position(),u=r.viewport.width()-p.outerWidth()):(i=r.children.length-r.settings.minSlides,d=r.children.eq(i).position()):r.carousel&&r.active.last&&"prev"===n?(a=1===r.settings.moveSlides?r.settings.maxSlides-v():(m()-1)*v()-(r.children.length-r.settings.maxSlides),p=o.children(".bx-clone").eq(a),d=p.position()):"next"===n&&0===r.active.index?(d=o.find("> .bx-clone").eq(r.settings.maxSlides).position(),r.active.last=!1):t>=0&&(l=t*parseInt(v()),d=r.children.eq(l).position()),void 0!==d&&(s="horizontal"===r.settings.mode?-(d.left-u):-d.top,b(s,"slide",r.settings.speed)),r.working=!1),r.settings.ariaHidden&&G(r.active.index*v())}},o.goToNextSlide=function(){if((r.settings.infiniteLoop||!r.active.last)&&1!=r.working){var e=parseInt(r.active.index)+1;o.goToSlide(e,"next")}},o.goToPrevSlide=function(){if((r.settings.infiniteLoop||0!==r.active.index)&&1!=r.working){var e=parseInt(r.active.index)-1;o.goToSlide(e,"prev")}},o.startAuto=function(e){r.interval||(r.interval=setInterval(function(){"next"===r.settings.autoDirection?o.goToNextSlide():o.goToPrevSlide()},r.settings.pause),r.settings.onAutoChange.call(o,!0),r.settings.autoControls&&!0!==e&&L("stop"))},o.stopAuto=function(e){r.interval&&(clearInterval(r.interval),r.interval=null,r.settings.onAutoChange.call(o,!1),r.settings.autoControls&&!0!==e&&L("start"))},o.getCurrentSlide=function(){return r.active.index},o.getCurrentSlideElement=function(){return r.children.eq(r.active.index)},o.getSlideElement=function(e){return r.children.eq(e)},o.getSlideCount=function(){return r.children.length},o.isWorking=function(){return r.working},o.redrawSlider=function(){r.children.add(o.find(".bx-clone")).outerWidth(h()),r.viewport.css("height",f()),r.settings.ticker||y(),r.active.last&&(r.active.index=m()-1),r.active.index>=m()&&(r.active.last=!0),r.settings.pager&&!r.settings.pagerCustom&&(x(),A(r.active.index)),r.settings.ariaHidden&&G(r.active.index*v())},o.destroySlider=function(){r.initialized&&(r.initialized=!1,e(".bx-clone",this).remove(),r.children.each(function(){void 0!==e(this).data("origStyle")?e(this).attr("style",e(this).data("origStyle")):e(this).removeAttr("style")}),void 0!==e(this).data("origStyle")?this.attr("style",e(this).data("origStyle")):e(this).removeAttr("style"),e(this).unwrap().unwrap(),r.controls.el&&r.controls.el.remove(),r.controls.next&&r.controls.next.remove(),r.controls.prev&&r.controls.prev.remove(),r.pagerEl&&r.settings.controls&&!r.settings.pagerCustom&&r.pagerEl.remove(),e(".bx-caption",this).remove(),r.controls.autoEl&&r.controls.autoEl.remove(),clearInterval(r.interval),r.settings.responsive&&e(window).unbind("resize",U),r.settings.keyboardEnabled&&e(document).unbind("keydown",H),e(this).removeData("bxSlider"),e(window).off("blur",j).off("focus",I))},o.reloadSlider=function(t){void 0!==t&&(n=t),o.destroySlider(),l(),e(o).data("bxSlider",this)},l(),e(o).data("bxSlider",this),this}}}(jQuery),function(e,t,n,i){"use strict";function r(e){var t=n(e.currentTarget),i=e.data?e.data.options:{},r=t.attr("data-fancybox")||"",o=0,a=[];e.isDefaultPrevented()||(e.preventDefault(),r?(a=i.selector?n(i.selector):e.data?e.data.items:[],a=a.length?a.filter('[data-fancybox="'+r+'"]'):n('[data-fancybox="'+r+'"]'),(o=a.index(t))<0&&(o=0)):a=[t],n.fancybox.open(a,i,o))}if(n){if(n.fn.fancybox)return void("console"in e&&console.log("fancyBox already initialized"));var o={loop:!1,margin:[44,0],gutter:50,keyboard:!0,arrows:!0,infobar:!0,toolbar:!0,buttons:["slideShow","fullScreen","thumbs","share","close"],idleTime:3,smallBtn:"auto",protect:!1,modal:!1,image:{preload:"auto"},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},defaultType:"image",animationEffect:"zoom",animationDuration:500,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}<p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}"><svg viewBox="0 0 40 40"><path d="M20,23 L20,8 L20,23 L13,16 L20,23 L27,16 L20,23 M26,28 L13,28 L27,28 L14,28" /></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg viewBox="0 0 40 40"><path d="M 18,17 m-8,0 a 8,8 0 1,0 16,0 a 8,8 0 1,0 -16,0 M25,23 L31,29 L25,23" /></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg viewBox="0 0 40 40"><path d="M10,10 L30,30 M30,10 L10,30" /></svg></button>',smallBtn:'<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><svg viewBox="0 0 40 40"><path d="M10,20 L30,20 L10,20 L18,28 L10,20 L18,12 L10,20"></path></svg></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><svg viewBox="0 0 40 40"><path d="M30,20 L10,20 L30,20 L22,28 L30,20 L22,12 L30,20"></path></svg></button>'},parentEl:"body",autoFocus:!1,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:4e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{margin:0,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"Zurück",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Maßstab"}}},a=n(e),s=n(t),l=0,c=function(e){return e&&e.hasOwnProperty&&e instanceof n},u=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),d=function(){var e,n=t.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in i)if(void 0!==n.style[e])return i[e];return"transitionend"}(),f=function(e){return e&&e.length&&e[0].offsetHeight},p=function(e,i,r){var o=this;o.opts=n.extend(!0,{index:r},n.fancybox.defaults,i||{}),n.fancybox.isMobile&&(o.opts=n.extend(!0,{},o.opts,o.opts.mobile)),i&&n.isArray(i.buttons)&&(o.opts.buttons=i.buttons),o.id=o.opts.id||++l,o.group=[],o.currIndex=parseInt(o.opts.index,10)||0,o.prevIndex=null,o.prevPos=null,o.currPos=0,o.firstRun=null,o.createGroup(e),o.group.length&&(o.$lastFocus=n(t.activeElement).blur(),o.slides={},o.init())};n.extend(p.prototype,{init:function(){var i,r,o,a=this,l=a.group[a.currIndex],c=l.opts,u=n.fancybox.scrollbarWidth;a.scrollTop=s.scrollTop(),a.scrollLeft=s.scrollLeft(),n.fancybox.getInstance()||(n("body").addClass("fancybox-active"),/iPad|iPhone|iPod/.test(navigator.userAgent)&&!e.MSStream?"image"!==l.type&&n("body").css("top",-1*n("body").scrollTop()).addClass("fancybox-iosfix"):!n.fancybox.isMobile&&t.body.scrollHeight>e.innerHeight&&(void 0===u&&(i=n('<div style="width:50px;height:50px;overflow:scroll;" />').appendTo("body"),u=n.fancybox.scrollbarWidth=i[0].offsetWidth-i[0].clientWidth,i.remove()),n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar { margin-right: '+u+"px; }</style>"),n("body").addClass("compensate-for-scrollbar"))),o="",n.each(c.buttons,function(e,t){o+=c.btnTpl[t]||""}),r=n(a.translate(a,c.baseTpl.replace("{{buttons}}",o).replace("{{arrows}}",c.btnTpl.arrowLeft+c.btnTpl.arrowRight))).attr("id","fancybox-container-"+a.id).addClass("fancybox-is-hidden").addClass(c.baseClass).data("FancyBox",a).appendTo(c.parentEl),a.$refs={container:r},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){a.$refs[e]=r.find(".fancybox-"+e)}),a.trigger("onInit"),a.activate(),a.jumpTo(a.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang];return t.replace(/\{\{(\w+)\}\}/g,function(e,t){var i=n[t];return void 0===i?e:i})},createGroup:function(e){var t=this,i=n.makeArray(e);n.each(i,function(e,i){var r,o,a,s,l={},c={};n.isPlainObject(i)?(l=i,c=i.opts||i):"object"===n.type(i)&&n(i).length?(r=n(i),c=r.data(),c=n.extend({},c,c.options||{}),c.$orig=r,l.src=c.src||r.attr("href"),l.type||l.src||(l.type="inline",l.src=i)):l={type:"html",src:i+""},l.opts=n.extend(!0,{},t.opts,c),n.isArray(c.buttons)&&(l.opts.buttons=c.buttons),o=l.type||l.opts.type,a=l.src||"",!o&&a&&(a.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?o="image":a.match(/\.(pdf)((\?|#).*)?$/i)?o="pdf":"#"===a.charAt(0)&&(o="inline")),o?l.type=o:t.trigger("objectNeedsType",l),l.index=t.group.length,l.opts.$orig&&!l.opts.$orig.length&&delete l.opts.$orig,!l.opts.$thumb&&l.opts.$orig&&(l.opts.$thumb=l.opts.$orig.find("img:first")),l.opts.$thumb&&!l.opts.$thumb.length&&delete l.opts.$thumb,"function"===n.type(l.opts.caption)&&(l.opts.caption=l.opts.caption.apply(i,[t,l])),"function"===n.type(t.opts.caption)&&(l.opts.caption=t.opts.caption.apply(i,[t,l])),l.opts.caption instanceof n||(l.opts.caption=void 0===l.opts.caption?"":l.opts.caption+""),"ajax"===o&&(s=a.split(/\s+/,2),s.length>1&&(l.src=s.shift(),l.opts.filter=s.shift())),"auto"==l.opts.smallBtn&&(n.inArray(o,["html","inline","ajax"])>-1?(l.opts.toolbar=!1,l.opts.smallBtn=!0):l.opts.smallBtn=!1),"pdf"===o&&(l.type="iframe",l.opts.iframe.preload=!1),l.opts.modal&&(l.opts=n.extend(!0,l.opts,{infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),t.group.push(l)})},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("click.fb-prev touchend.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("click.fb-next touchend.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}).on("click.fb","[data-fancybox-zoom]",function(e){i[i.isScaledDown()?"scaleToActual":"scaleToFit"]()}),a.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?u(function(){i.update()}):(i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update()},600))}),s.on("focusin.fb",function(e){var r=n.fancybox?n.fancybox.getInstance():null;r.isClosing||!r.current||!r.current.opts.trapFocus||n(e.target).hasClass("fancybox-container")||n(e.target).is(t)||r&&"fixed"!==n(e.target).css("position")&&!r.$refs.container.has(e.target).length&&(e.stopPropagation(),r.focus(),a.scrollTop(i.scrollTop).scrollLeft(i.scrollLeft))}),s.on("keydown.fb",function(e){var t=i.current,r=e.keyCode||e.which;if(t&&t.opts.keyboard&&!n(e.target).is("input")&&!n(e.target).is("textarea"))return 8===r||27===r?(e.preventDefault(),void i.close(e)):37===r||38===r?(e.preventDefault(),void i.previous()):39===r||40===r?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,r)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,s.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=e.setInterval(function(){++i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){var t=this;a.off("orientationchange.fb resize.fb"),s.off("focusin.fb keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),t.idleInterval&&(e.clearInterval(t.idleInterval),t.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,t,i){var r,o,a,s,l,c,u,d=this,p=d.group.length;if(!(d.isSliding||d.isClosing||d.isAnimating&&d.firstRun)){if(e=parseInt(e,10),!(o=d.current?d.current.opts.loop:d.opts.loop)&&(e<0||e>=p))return!1;if(r=d.firstRun=null===d.firstRun,!(p<2&&!r&&d.isSliding)){if(s=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,a=d.createSlide(e),p>1&&((o||a.index>0)&&d.createSlide(e-1),(o||a.index<p-1)&&d.createSlide(e+1)),d.current=a,d.currIndex=a.index,d.currPos=a.pos,d.trigger("beforeShow",r),d.updateControls(),c=n.fancybox.getTranslate(a.$slide),a.isMoved=(0!==c.left||0!==c.top)&&!a.$slide.hasClass("fancybox-animated"),a.forcedDuration=void 0,n.isNumeric(t)?a.forcedDuration=t:t=a.opts[r?"animationDuration":"transitionDuration"],t=parseInt(t,10),r)return a.opts.animationEffect&&t&&d.$refs.container.css("transition-duration",t+"ms"),d.$refs.container.removeClass("fancybox-is-hidden"),f(d.$refs.container),d.$refs.container.addClass("fancybox-is-open"),a.$slide.addClass("fancybox-slide--current"),d.loadSlide(a),void d.preload();n.each(d.slides,function(e,t){n.fancybox.stop(t.$slide)}),a.$slide.removeClass("fancybox-slide--next fancybox-slide--previous").addClass("fancybox-slide--current"),a.isMoved?(l=Math.round(a.$slide.width()),n.each(d.slides,function(e,i){var r=i.pos-a.pos;n.fancybox.animate(i.$slide,{top:0,left:r*l+r*i.opts.gutter},t,function(){i.$slide.removeAttr("style").removeClass("fancybox-slide--next fancybox-slide--previous"),i.pos===d.currPos&&(a.isMoved=!1,d.complete())})})):d.$refs.stage.children().removeAttr("style"),a.isLoaded?d.revealContent(a):d.loadSlide(a),d.preload(),s.pos!==a.pos&&(u="fancybox-slide--"+(s.pos>a.pos?"next":"previous"),s.$slide.removeClass("fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous"),s.isComplete=!1,t&&(a.isMoved||a.opts.transitionEffect)&&(a.isMoved?s.$slide.addClass(u):(u="fancybox-animated "+u+" fancybox-fx-"+a.opts.transitionEffect,n.fancybox.animate(s.$slide,u,t,function(){s.$slide.removeClass(u).removeAttr("style")}))))}}},createSlide:function(e){var t,i,r=this;return i=e%r.group.length,i=i<0?r.group.length+i:i,!r.slides[e]&&r.group[i]&&(t=n('<div class="fancybox-slide"></div>').appendTo(r.$refs.stage),r.slides[e]=n.extend(!0,{},r.group[i],{pos:e,$slide:t,isLoaded:!1}),r.updateSlide(r.slides[e])),r.slides[e]},scaleToActual:function(e,t,i){var r,o,a,s,l,c=this,u=c.current,d=u.$content,f=parseInt(u.$slide.width(),10),p=parseInt(u.$slide.height(),10),h=u.width,g=u.height;"image"!=u.type||u.hasError||!d||c.isAnimating||(n.fancybox.stop(d),c.isAnimating=!0,e=void 0===e?.5*f:e,t=void 0===t?.5*p:t,r=n.fancybox.getTranslate(d),s=h/r.width,l=g/r.height,o=.5*f-.5*h,a=.5*p-.5*g,h>f&&(o=r.left*s-(e*s-e),o>0&&(o=0),o<f-h&&(o=f-h)),g>p&&(a=r.top*l-(t*l-t),a>0&&(a=0),a<p-g&&(a=p-g)),c.updateCursor(h,g),n.fancybox.animate(d,{top:a,left:o,scaleX:s,scaleY:l},i||330,function(){c.isAnimating=!1}),c.SlideShow&&c.SlideShow.isActive&&c.SlideShow.stop())},scaleToFit:function(e){var t,i=this,r=i.current,o=r.$content;"image"!=r.type||r.hasError||!o||i.isAnimating||(n.fancybox.stop(o),i.isAnimating=!0,t=i.getFitPos(r),i.updateCursor(t.width,t.height),n.fancybox.animate(o,{top:t.top,left:t.left,scaleX:t.width/o.width(),scaleY:t.height/o.height()},e||330,function(){i.isAnimating=!1}))},getFitPos:function(e){var t,i,r,o,a,s=this,l=e.$content,c=e.width,u=e.height,d=e.opts.margin;return!(!l||!l.length||!c&&!u)&&("number"===n.type(d)&&(d=[d,d]),2==d.length&&(d=[d[0],d[1],d[0],d[1]]),t=parseInt(s.$refs.stage.width(),10)-(d[1]+d[3]),i=parseInt(s.$refs.stage.height(),10)-(d[0]+d[2]),r=Math.min(1,t/c,i/u),o=Math.floor(r*c),a=Math.floor(r*u),{top:Math.floor(.5*(i-a))+d[0],left:Math.floor(.5*(t-o))+d[3],width:o,height:a})},update:function(){var e=this;n.each(e.slides,function(t,n){e.updateSlide(n)})},updateSlide:function(e){var t=this,i=e.$content;i&&(e.width||e.height)&&(t.isAnimating=!1,n.fancybox.stop(i),n.fancybox.setTranslate(i,t.getFitPos(e)),e.pos===t.currPos&&t.updateCursor()),e.$slide.trigger("refresh"),t.trigger("onUpdate",e)},updateCursor:function(e,t){var n,i=this,r=i.$refs.container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut");i.current&&!i.isClosing&&(i.isZoomable()?(r.addClass("fancybox-is-zoomable"),n=void 0!==e&&void 0!==t?e<i.current.width&&t<i.current.height:i.isScaledDown(),n?r.addClass("fancybox-can-zoomIn"):i.current.opts.touch?r.addClass("fancybox-can-drag"):r.addClass("fancybox-can-zoomOut")):i.current.opts.touch&&r.addClass("fancybox-can-drag"))},isZoomable:function(){var e,t=this,i=t.current;if(i&&!t.isClosing)return!!("image"===i.type&&i.isLoaded&&!i.hasError&&("zoom"===i.opts.clickContent||n.isFunction(i.opts.clickContent)&&"zoom"===i.opts.clickContent(i))&&(e=t.getFitPos(i),i.width>e.width||i.height>e.height))},isScaledDown:function(){var e=this,t=e.current,i=t.$content,r=!1;return i&&(r=n.fancybox.getTranslate(i),r=r.width<t.width||r.height<t.height),r},canPan:function(){var e=this,t=e.current,n=t.$content,i=!1;return n&&(i=e.getFitPos(t),i=Math.abs(n.width()-i.width)>1||Math.abs(n.height()-i.height)>1),i},loadSlide:function(e){var t,i,r,o=this;if(!e.isLoading&&!e.isLoaded){switch(e.isLoading=!0,o.trigger("beforeLoad",e),t=e.type,i=e.$slide,i.off("refresh").trigger("onReset").addClass("fancybox-slide--"+(t||"unknown")).addClass(e.opts.slideClass),t){case"image":o.setImage(e);break;case"iframe":o.setIframe(e);break;case"html":o.setContent(e,e.src||e.content);break;case"inline":n(e.src).length?o.setContent(e,n(e.src)):o.setError(e);break;case"ajax":o.showLoading(e),r=n.ajax(n.extend({},e.opts.ajax.settings,{url:e.src,success:function(t,n){"success"===n&&o.setContent(e,t)},error:function(t,n){t&&"abort"!==n&&o.setError(e)}})),i.one("onReset",function(){r.abort()});break;default:o.setError(e)}return!0}},setImage:function(t){var i,r,o,a,s=this,l=t.opts.srcset||t.opts.image.srcset;if(l){o=e.devicePixelRatio||1,a=e.innerWidth*o,r=l.split(",").map(function(e){var t={};return e.trim().split(/\s+/).forEach(function(e,n){var i=parseInt(e.substring(0,e.length-1),10);if(0===n)return t.url=e;i&&(t.value=i,t.postfix=e[e.length-1])}),t}),r.sort(function(e,t){return e.value-t.value});for(var c=0;c<r.length;c++){var u=r[c];if("w"===u.postfix&&u.value>=a||"x"===u.postfix&&u.value>=o){i=u;break}}!i&&r.length&&(i=r[r.length-1]),i&&(t.src=i.url,t.width&&t.height&&"w"==i.postfix&&(t.height=t.width/t.height*i.value,t.width=i.value))}t.$content=n('<div class="fancybox-image-wrap"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&(t.opts.thumb||t.opts.$thumb)?(t.width=t.opts.width,t.height=t.opts.height,t.$ghost=n("<img />").one("error",function(){n(this).remove(),t.$ghost=null,s.setBigImage(t)}).one("load",function(){s.afterLoad(t),s.setBigImage(t)
}).addClass("fancybox-image").appendTo(t.$content).attr("src",t.opts.thumb||t.opts.$thumb.attr("src"))):s.setBigImage(t)},setBigImage:function(e){var t=this,i=n("<img />");e.$image=i.one("error",function(){t.setError(e)}).one("load",function(){clearTimeout(e.timouts),e.timouts=null,t.isClosing||(e.width=this.naturalWidth,e.height=this.naturalHeight,e.opts.image.srcset&&i.attr("sizes","100vw").attr("srcset",e.opts.image.srcset),t.hideLoading(e),e.$ghost?e.timouts=setTimeout(function(){e.timouts=null,e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))):t.afterLoad(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),(i[0].complete||"complete"==i[0].readyState)&&i[0].naturalWidth&&i[0].naturalHeight?i.trigger("load"):i[0].error?i.trigger("error"):e.timouts=setTimeout(function(){i[0].complete||e.hasError||t.showLoading(e)},100)},setIframe:function(e){var t,i=this,r=e.opts.iframe,o=e.$slide;e.$content=n('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(o),t=n(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(e.$content),r.preload?(i.showLoading(e),t.on("load.fb error.fb",function(t){this.isReady=1,e.$slide.trigger("refresh"),i.afterLoad(e)}),o.on("refresh.fb",function(){var n,i,o,a=e.$content,s=r.css.width,l=r.css.height;if(1===t[0].isReady){try{i=t.contents(),o=i.find("body")}catch(e){}o&&o.length&&(void 0===s&&(n=t[0].contentWindow.document.documentElement.scrollWidth,s=Math.ceil(o.outerWidth(!0)+(a.width()-n)),s+=a.outerWidth()-a.innerWidth()),void 0===l&&(l=Math.ceil(o.outerHeight(!0)),l+=a.outerHeight()-a.innerHeight()),s&&a.width(s),l&&a.height(l)),a.removeClass("fancybox-is-hidden")}})):this.afterLoad(e),t.attr("src",e.src),!0===e.opts.smallBtn&&e.$content.prepend(i.translate(e,e.opts.btnTpl.smallBtn)),o.one("onReset",function(){try{n(this).find("iframe").hide().attr("src","//about:blank")}catch(e){}n(this).empty(),e.isLoaded=!1})},setContent:function(e,t){var i=this;i.isClosing||(i.hideLoading(e),e.$slide.empty(),c(t)&&t.parent().length?(t.parent(".fancybox-slide--inline").trigger("onReset"),e.$placeholder=n("<div></div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===n.type(t)&&(t=n("<div>").append(n.trim(t)).contents(),3===t[0].nodeType&&(t=n("<div>").html(t))),e.opts.filter&&(t=n("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){e.$placeholder&&(e.$placeholder.after(t.hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(n(this).empty(),e.isLoaded=!1)}),e.$content=n(t).appendTo(e.$slide),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.removeClass("fancybox-slide--"+e.type),this.setContent(e,this.translate(e,e.opts.errorTpl))},showLoading:function(e){var t=this;(e=e||t.current)&&!e.$spinner&&(e.$spinner=n(t.opts.spinnerTpl).appendTo(e.$slide))},hideLoading:function(e){var t=this;(e=e||t.current)&&e.$spinner&&(e.$spinner.remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),e.opts.smallBtn&&!e.$smallBtn&&(e.$smallBtn=n(t.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content.filter("div,form").first())),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&n('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.revealContent(e))},revealContent:function(e){var t,i,r,o,a,s=this,l=e.$slide,c=!1;return t=e.opts[s.firstRun?"animationEffect":"transitionEffect"],r=e.opts[s.firstRun?"animationDuration":"transitionDuration"],r=parseInt(void 0===e.forcedDuration?r:e.forcedDuration,10),!e.isMoved&&e.pos===s.currPos&&r||(t=!1),"zoom"!==t||e.pos===s.currPos&&r&&"image"===e.type&&!e.hasError&&(c=s.getThumbPos(e))||(t="fade"),"zoom"===t?(a=s.getFitPos(e),a.scaleX=a.width/c.width,a.scaleY=a.height/c.height,delete a.width,delete a.height,o=e.opts.zoomOpacity,"auto"==o&&(o=Math.abs(e.width/e.height-c.width/c.height)>.1),o&&(c.opacity=.1,a.opacity=1),n.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),c),f(e.$content),void n.fancybox.animate(e.$content,a,r,function(){s.complete()})):(s.updateSlide(e),t?(n.fancybox.stop(l),i="fancybox-animated fancybox-slide--"+(e.pos>=s.prevPos?"next":"previous")+" fancybox-fx-"+t,l.removeAttr("style").removeClass("fancybox-slide--current fancybox-slide--next fancybox-slide--previous").addClass(i),e.$content.removeClass("fancybox-is-hidden"),f(l),void n.fancybox.animate(l,"fancybox-slide--current",r,function(t){l.removeClass(i).removeAttr("style"),e.pos===s.currPos&&s.complete()},!0)):(f(l),e.$content.removeClass("fancybox-is-hidden"),void(e.pos===s.currPos&&s.complete())))},getThumbPos:function(i){var r,o=this,a=!1,s=i.opts.$thumb,l=s?s.offset():0;return l&&s[0].ownerDocument===t&&function(t){for(var i=t[0],r=i.getBoundingClientRect(),o=[];null!==i.parentElement;)"hidden"!==n(i.parentElement).css("overflow")&&"auto"!==n(i.parentElement).css("overflow")||o.push(i.parentElement.getBoundingClientRect()),i=i.parentElement;return o.every(function(e){var t=Math.min(r.right,e.right)-Math.max(r.left,e.left),n=Math.min(r.bottom,e.bottom)-Math.max(r.top,e.top);return t>0&&n>0})&&r.bottom>0&&r.right>0&&r.left<n(e).width()&&r.top<n(e).height()}(s)&&(r=o.$refs.stage.offset(),a={top:l.top-r.top+parseFloat(s.css("border-top-width")||0),left:l.left-r.left+parseFloat(s.css("border-left-width")||0),width:s.width(),height:s.height(),scaleX:1,scaleY:1}),a},complete:function(){var e=this,i=e.current,r={};i.isMoved||!i.isLoaded||i.isComplete||(i.isComplete=!0,i.$slide.siblings().trigger("onReset"),f(i.$slide),i.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,i){i.pos>=e.currPos-1&&i.pos<=e.currPos+1?r[i.pos]=i:i&&(n.fancybox.stop(i.$slide),i.$slide.off().remove())}),e.slides=r,e.updateCursor(),e.trigger("afterShow"),(n(t.activeElement).is("[disabled]")||i.opts.autoFocus&&"image"!=i.type&&"iframe"!==i.type)&&e.focus())},preload:function(){var e,t,n=this;n.group.length<2||(e=n.slides[n.currPos+1],t=n.slides[n.currPos-1],e&&"image"===e.type&&n.loadSlide(e),t&&"image"===t.type&&n.loadSlide(t))},focus:function(){var e,t=this.current;this.isClosing||(t&&t.isComplete&&(e=t.$slide.find("input[autofocus]:enabled:visible:first"),e.length||(e=t.$slide.find("button,:input,[tabindex],a").filter(":enabled:visible:first"))),e=e&&e.length?e:this.$refs.container,e.focus())},activate:function(){var e=this;n(".fancybox-container").each(function(){var t=n(this).data("FancyBox");t&&t.id!==e.id&&!t.isClosing&&(t.trigger("onDeactivate"),t.removeEvents(),t.isVisible=!1)}),e.isVisible=!0,(e.current||e.isIdle)&&(e.update(),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(e,t){var i,r,o,a,s,l,c=this,p=c.current,h=function(){c.cleanUp(e)};return!c.isClosing&&(c.isClosing=!0,!1===c.trigger("beforeClose",e)?(c.isClosing=!1,u(function(){c.update()}),!1):(c.removeEvents(),p.timouts&&clearTimeout(p.timouts),o=p.$content,i=p.opts.animationEffect,r=n.isNumeric(t)?t:i?p.opts.animationDuration:0,p.$slide.off(d).removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),p.$slide.siblings().trigger("onReset").remove(),r&&c.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing"),c.hideLoading(p),c.hideControls(),c.updateCursor(),"zoom"!==i||!0!==e&&o&&r&&"image"===p.type&&!p.hasError&&(l=c.getThumbPos(p))||(i="fade"),"zoom"===i?(n.fancybox.stop(o),s=n.fancybox.getTranslate(o),s.width=s.width*s.scaleX,s.height=s.height*s.scaleY,a=p.opts.zoomOpacity,"auto"==a&&(a=Math.abs(p.width/p.height-l.width/l.height)>.1),a&&(l.opacity=0),s.scaleX=s.width/l.width,s.scaleY=s.height/l.height,s.width=l.width,s.height=l.height,n.fancybox.setTranslate(p.$content,s),f(p.$content),n.fancybox.animate(p.$content,l,r,h),!0):(i&&r?!0===e?setTimeout(h,r):n.fancybox.animate(p.$slide.removeClass("fancybox-slide--current"),"fancybox-animated fancybox-slide--previous fancybox-fx-"+i,r,h):h(),!0)))},cleanUp:function(e){var i,r,o=this,s=n("body");o.current.$slide.trigger("onReset"),o.$refs.container.empty().remove(),o.trigger("afterClose",e),o.$lastFocus&&o.current.opts.backFocus&&o.$lastFocus.focus(),o.current=null,i=n.fancybox.getInstance(),i?i.activate():(a.scrollTop(o.scrollTop).scrollLeft(o.scrollLeft),s.removeClass("fancybox-active compensate-for-scrollbar"),s.hasClass("fancybox-iosfix")&&(r=parseInt(t.body.style.top,10),s.removeClass("fancybox-iosfix").css("top","").scrollTop(-1*r)),n("#fancybox-style-noscroll").remove())},trigger:function(e,t){var i,r=Array.prototype.slice.call(arguments,1),o=this,a=t&&t.opts?t:o.current;if(a?r.unshift(a):a=o,r.unshift(o),n.isFunction(a.opts[e])&&(i=a.opts[e].apply(a,r)),!1===i)return i;"afterClose"!==e&&o.$refs?o.$refs.container.trigger(e+".fb",r):s.trigger(e+".fb",r)},updateControls:function(e){var t=this,n=t.current,i=n.index,r=n.opts.caption,o=t.$refs.container,a=t.$refs.caption;n.$slide.trigger("refresh"),t.$caption=r&&r.length?a.html(r):null,t.isHiddenControls||t.isIdle||t.showControls(),o.find("[data-fancybox-count]").html(t.group.length),o.find("[data-fancybox-index]").html(i+1),o.find("[data-fancybox-prev]").prop("disabled",!n.opts.loop&&i<=0),o.find("[data-fancybox-next]").prop("disabled",!n.opts.loop&&i>=t.group.length-1),"image"===n.type?o.find("[data-fancybox-download]").attr("href",n.opts.image.src||n.src).show():o.find("[data-fancybox-download],[data-fancybox-zoom]").hide()},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav")},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,n=e.$refs.container;e.isHiddenControls=!1,e.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&e.group.length>1)).toggleClass("fancybox-show-nav",!!(t.arrows&&e.group.length>1)).toggleClass("fancybox-is-modal",!!t.modal),e.$caption?n.addClass("fancybox-show-caption "):n.removeClass("fancybox-show-caption")},toggleControls:function(){this.isHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.2.5",defaults:o,getInstance:function(e){var t=n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return t instanceof p&&("string"===n.type(e)?t[e].apply(t,i):"function"===n.type(e)&&e.apply(t,i),t)},open:function(e,t,n){return new p(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close())},destroy:function(){this.close(!0),s.off("click.fb-start")},isMobile:void 0!==t.createTouch&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:function(){var n=t.createElement("div");return e.getComputedStyle&&e.getComputedStyle(n).getPropertyValue("transform")&&!(t.documentMode&&t.documentMode<11)}(),getTranslate:function(e){var t;if(!e||!e.length)return!1;if(t=e.eq(0).css("transform"),t&&-1!==t.indexOf("matrix")?(t=t.split("(")[1],t=t.split(")")[0],t=t.split(",")):t=[],t.length)t=t.length>10?[t[13],t[12],t[0],t[5]]:[t[5],t[4],t[0],t[3]],t=t.map(parseFloat);else{t=[0,0,1,1];var n=/\.*translate\((.*)px,(.*)px\)/i,i=n.exec(e.eq(0).attr("style"));i&&(t[0]=parseFloat(i[2]),t[1]=parseFloat(i[1]))}return{top:t[0],left:t[1],scaleX:t[2],scaleY:t[3],opacity:parseFloat(e.css("opacity")),width:e.width(),height:e.height()}},setTranslate:function(e,t){var n="",i={};if(e&&t)return void 0===t.left&&void 0===t.top||(n=(void 0===t.left?e.position().left:t.left)+"px, "+(void 0===t.top?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),void 0!==t.scaleX&&void 0!==t.scaleY&&(n=(n.length?n+" ":"")+"scale("+t.scaleX+", "+t.scaleY+")"),n.length&&(i.transform=n),void 0!==t.opacity&&(i.opacity=t.opacity),void 0!==t.width&&(i.width=t.width),void 0!==t.height&&(i.height=t.height),e.css(i)},animate:function(e,t,i,r,o){n.isFunction(i)&&(r=i,i=null),n.isPlainObject(t)||e.removeAttr("style"),e.on(d,function(i){(!i||!i.originalEvent||e.is(i.originalEvent.target)&&"z-index"!=i.originalEvent.propertyName)&&(n.fancybox.stop(e),n.isPlainObject(t)?void 0!==t.scaleX&&void 0!==t.scaleY&&(e.css("transition-duration",""),t.width=Math.round(e.width()*t.scaleX),t.height=Math.round(e.height()*t.scaleY),t.scaleX=1,t.scaleY=1,n.fancybox.setTranslate(e,t)):!0!==o&&e.removeClass(t),n.isFunction(r)&&r(i))}),n.isNumeric(i)&&e.css("transition-duration",i+"ms"),n.isPlainObject(t)?n.fancybox.setTranslate(e,t):e.addClass(t),t.scaleX&&e.hasClass("fancybox-image-wrap")&&e.parent().addClass("fancybox-is-scaling"),e.data("timer",setTimeout(function(){e.trigger("transitionend")},i+16))},stop:function(e){clearTimeout(e.data("timer")),e.off("transitionend").css("transition-duration",""),e.hasClass("fancybox-image-wrap")&&e.parent().removeClass("fancybox-is-scaling")}},n.fn.fancybox=function(e){var t;return e=e||{},t=e.selector||!1,t?n("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},r):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},r),this},s.on("click.fb-start","[data-fancybox]",r)}}(window,document,window.jQuery||jQuery),function(e){"use strict";var t=function(t,n,i){if(t)return i=i||"","object"===e.type(i)&&(i=e.param(i,!0)),e.each(n,function(e,n){t=t.replace("$"+e,n||"")}),i.length&&(t+=(t.indexOf("?")>0?"&":"?")+i),t},n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12])+"&output="+(e[12]&&e[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};e(document).on("objectNeedsType.fb",function(i,r,o){var a,s,l,c,u,d,f=o.src||"",p=!1;a=e.extend(!0,{},n,o.opts.media),e.each(a,function(n,i){if(l=f.match(i.matcher)){if(p=i.type,d={},i.paramPlace&&l[i.paramPlace]){u=l[i.paramPlace],"?"==u[0]&&(u=u.substring(1)),u=u.split("&");for(var r=0;r<u.length;++r){var a=u[r].split("=",2);2==a.length&&(d[a[0]]=decodeURIComponent(a[1].replace(/\+/g," ")))}}return c=e.extend(!0,{},i.params,o.opts[n],d),f="function"===e.type(i.url)?i.url.call(this,l,c,o):t(i.url,l,c),s="function"===e.type(i.thumb)?i.thumb.call(this,l,c,o):t(i.thumb,l),"vimeo"===n&&(f=f.replace("&%23","#")),!1}}),p?(o.src=f,o.type=p,o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=s),"iframe"===p&&(e.extend(!0,o.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}}),o.contentProvider=void 0,o.opts.slideClass+=" fancybox-slide--video")):f&&(o.type=o.opts.defaultType)})}(window.jQuery||jQuery),function(e,t,n){"use strict";var i=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),r=function(){return e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.mozCancelAnimationFrame||e.oCancelAnimationFrame||function(t){e.clearTimeout(t)}}(),o=function(t){var n=[];t=t.originalEvent||t||e.e,t=t.touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t];for(var i in t)t[i].pageX?n.push({x:t[i].pageX,y:t[i].pageY}):t[i].clientX&&n.push({x:t[i].clientX,y:t[i].clientY});return n},a=function(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0},s=function(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea')||n.isFunction(e.get(0).onclick)||e.data("selectable"))return!0;for(var t=0,i=e[0].attributes,r=i.length;t<r;t++)if("data-fancybox-"===i[t].nodeName.substr(0,14))return!0;return!1},l=function(t){var n=e.getComputedStyle(t)["overflow-y"],i=e.getComputedStyle(t)["overflow-x"],r=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,o=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth;return r||o},c=function(e){for(var t=!1;;){if(t=l(e.get(0)))break;if(e=e.parent(),!e.length||e.hasClass("fancybox-stage")||e.is("body"))break}return t},u=function(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(t,"ontouchstart"))};u.prototype.destroy=function(){this.$container.off(".fb.touch")},u.prototype.ontouchstart=function(i){var r=this,l=n(i.target),u=r.instance,d=u.current,f=d.$content,p="touchstart"==i.type;if(p&&r.$container.off("mousedown.fb.touch"),!d||r.instance.isAnimating||r.instance.isClosing)return i.stopPropagation(),void i.preventDefault();if((!i.originalEvent||2!=i.originalEvent.button)&&l.length&&!s(l)&&!s(l.parent())&&!(i.originalEvent.clientX>l[0].clientWidth+l.offset().left)&&(r.startPoints=o(i),r.startPoints&&!(r.startPoints.length>1&&u.isSliding))){if(r.$target=l,r.$content=f,r.canTap=!0,r.opts=d.opts.touch,n(t).off(".fb.touch"),n(t).on(p?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(r,"ontouchend")),n(t).on(p?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(r,"ontouchmove")),!r.opts&&!u.canPan()||!l.is(r.$stage)&&!r.$stage.find(l).length)return void(l.is("img")&&i.preventDefault());i.stopPropagation(),n.fancybox.isMobile&&(c(r.$target)||c(r.$target.parent()))||i.preventDefault(),r.canvasWidth=Math.round(d.$slide[0].clientWidth),r.canvasHeight=Math.round(d.$slide[0].clientHeight),r.startTime=(new Date).getTime(),r.distanceX=r.distanceY=r.distance=0,r.isPanning=!1,r.isSwiping=!1,r.isZooming=!1,r.sliderStartPos=r.sliderLastPos||{top:0,left:0},r.contentStartPos=n.fancybox.getTranslate(r.$content),r.contentLastPos=null,1!==r.startPoints.length||r.isZooming||(r.canTap=!u.isSliding,"image"===d.type&&(r.contentStartPos.width>r.canvasWidth+1||r.contentStartPos.height>r.canvasHeight+1)?(n.fancybox.stop(r.$content),r.$content.css("transition-duration","0ms"),r.isPanning=!0):r.isSwiping=!0,r.$container.addClass("fancybox-controls--isGrabbing")),2!==r.startPoints.length||u.isAnimating||d.hasError||"image"!==d.type||!d.isLoaded&&!d.$ghost||(r.isZooming=!0,r.isSwiping=!1,r.isPanning=!1,n.fancybox.stop(r.$content),r.$content.css("transition-duration","0ms"),r.centerPointStartX=.5*(r.startPoints[0].x+r.startPoints[1].x)-n(e).scrollLeft(),r.centerPointStartY=.5*(r.startPoints[0].y+r.startPoints[1].y)-n(e).scrollTop(),r.percentageOfImageAtPinchPointX=(r.centerPointStartX-r.contentStartPos.left)/r.contentStartPos.width,r.percentageOfImageAtPinchPointY=(r.centerPointStartY-r.contentStartPos.top)/r.contentStartPos.height,r.startDistanceBetweenFingers=a(r.startPoints[0],r.startPoints[1]))}},u.prototype.ontouchmove=function(e){var t=this;if(t.newPoints=o(e),n.fancybox.isMobile&&(c(t.$target)||c(t.$target.parent())))return e.stopPropagation(),void(t.canTap=!1);if((t.opts||t.instance.canPan())&&t.newPoints&&t.newPoints.length&&(t.distanceX=a(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=a(t.newPoints[0],t.startPoints[0],"y"),t.distance=a(t.newPoints[0],t.startPoints[0]),t.distance>0)){if(!t.$target.is(t.$stage)&&!t.$stage.find(t.$target).length)return;e.stopPropagation(),e.preventDefault(),t.isSwiping?t.onSwipe():t.isPanning?t.onPan():t.isZooming&&t.onZoom()}},u.prototype.onSwipe=function(){var t,o=this,a=o.isSwiping,s=o.sliderStartPos.left||0;!0===a?Math.abs(o.distance)>10&&(o.canTap=!1,o.instance.group.length<2&&o.opts.vertical?o.isSwiping="y":o.instance.isSliding||!1===o.opts.vertical||"auto"===o.opts.vertical&&n(e).width()>800?o.isSwiping="x":(t=Math.abs(180*Math.atan2(o.distanceY,o.distanceX)/Math.PI),o.isSwiping=t>45&&t<135?"y":"x"),o.instance.isSliding=o.isSwiping,o.startPoints=o.newPoints,n.each(o.instance.slides,function(e,t){n.fancybox.stop(t.$slide),t.$slide.css("transition-duration","0ms"),t.inTransition=!1,t.pos===o.instance.current.pos&&(o.sliderStartPos.left=n.fancybox.getTranslate(t.$slide).left)}),o.instance.SlideShow&&o.instance.SlideShow.isActive&&o.instance.SlideShow.stop()):("x"==a&&(o.distanceX>0&&(o.instance.group.length<2||0===o.instance.current.index&&!o.instance.current.opts.loop)?s+=Math.pow(o.distanceX,.8):o.distanceX<0&&(o.instance.group.length<2||o.instance.current.index===o.instance.group.length-1&&!o.instance.current.opts.loop)?s-=Math.pow(-o.distanceX,.8):s+=o.distanceX),o.sliderLastPos={top:"x"==a?0:o.sliderStartPos.top+o.distanceY,left:s},o.requestId&&(r(o.requestId),o.requestId=null),o.requestId=i(function(){o.sliderLastPos&&(n.each(o.instance.slides,function(e,t){var i=t.pos-o.instance.currPos;n.fancybox.setTranslate(t.$slide,{top:o.sliderLastPos.top,left:o.sliderLastPos.left+i*o.canvasWidth+i*t.opts.gutter})}),o.$container.addClass("fancybox-is-sliding"))}))},u.prototype.onPan=function(){var e,t,o,a=this;a.canTap=!1,e=a.contentStartPos.width>a.canvasWidth?a.contentStartPos.left+a.distanceX:a.contentStartPos.left,t=a.contentStartPos.top+a.distanceY,o=a.limitMovement(e,t,a.contentStartPos.width,a.contentStartPos.height),o.scaleX=a.contentStartPos.scaleX,o.scaleY=a.contentStartPos.scaleY,a.contentLastPos=o,a.requestId&&(r(a.requestId),a.requestId=null),a.requestId=i(function(){n.fancybox.setTranslate(a.$content,a.contentLastPos)})},u.prototype.limitMovement=function(e,t,n,i){var r,o,a,s,l=this,c=l.canvasWidth,u=l.canvasHeight,d=l.contentStartPos.left,f=l.contentStartPos.top,p=l.distanceX,h=l.distanceY;return r=Math.max(0,.5*c-.5*n),o=Math.max(0,.5*u-.5*i),a=Math.min(c-n,.5*c-.5*n),s=Math.min(u-i,.5*u-.5*i),n>c&&(p>0&&e>r&&(e=r-1+Math.pow(-r+d+p,.8)||0),p<0&&e<a&&(e=a+1-Math.pow(a-d-p,.8)||0)),i>u&&(h>0&&t>o&&(t=o-1+Math.pow(-o+f+h,.8)||0),h<0&&t<s&&(t=s+1-Math.pow(s-f-h,.8)||0)),{top:t,left:e}},u.prototype.limitPosition=function(e,t,n,i){var r=this,o=r.canvasWidth,a=r.canvasHeight;return n>o?(e=e>0?0:e,e=e<o-n?o-n:e):e=Math.max(0,o/2-n/2),i>a?(t=t>0?0:t,t=t<a-i?a-i:t):t=Math.max(0,a/2-i/2),{top:t,left:e}},u.prototype.onZoom=function(){var t=this,o=t.contentStartPos.width,s=t.contentStartPos.height,l=t.contentStartPos.left,c=t.contentStartPos.top,u=a(t.newPoints[0],t.newPoints[1]),d=u/t.startDistanceBetweenFingers,f=Math.floor(o*d),p=Math.floor(s*d),h=(o-f)*t.percentageOfImageAtPinchPointX,g=(s-p)*t.percentageOfImageAtPinchPointY,m=(t.newPoints[0].x+t.newPoints[1].x)/2-n(e).scrollLeft(),v=(t.newPoints[0].y+t.newPoints[1].y)/2-n(e).scrollTop(),y=m-t.centerPointStartX,b=v-t.centerPointStartY,x=l+(h+y),w=c+(g+b),k={top:w,left:x,scaleX:t.contentStartPos.scaleX*d,scaleY:t.contentStartPos.scaleY*d};t.canTap=!1,t.newWidth=f,t.newHeight=p,t.contentLastPos=k,t.requestId&&(r(t.requestId),t.requestId=null),t.requestId=i(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})},u.prototype.ontouchend=function(e){var i=this,a=Math.max((new Date).getTime()-i.startTime,1),s=i.isSwiping,l=i.isPanning,c=i.isZooming;if(i.endPoints=o(e),i.$container.removeClass("fancybox-controls--isGrabbing"),n(t).off(".fb.touch"),i.requestId&&(r(i.requestId),i.requestId=null),i.isSwiping=!1,i.isPanning=!1,i.isZooming=!1,i.canTap)return i.onTap(e);i.speed=366,i.velocityX=i.distanceX/a*.5,i.velocityY=i.distanceY/a*.5,i.speedX=Math.max(.5*i.speed,Math.min(1.5*i.speed,1/Math.abs(i.velocityX)*i.speed)),l?i.endPanning():c?i.endZooming():i.endSwiping(s)},u.prototype.endSwiping=function(e){var t=this,i=!1;t.instance.isSliding=!1,t.sliderLastPos=null,"y"==e&&Math.abs(t.distanceY)>50?(n.fancybox.animate(t.instance.current.$slide,{top:t.sliderStartPos.top+t.distanceY+150*t.velocityY,opacity:0},150),i=t.instance.close(!0,300)):"x"==e&&t.distanceX>50&&t.instance.group.length>1?i=t.instance.previous(t.speedX):"x"==e&&t.distanceX<-50&&t.instance.group.length>1&&(i=t.instance.next(t.speedX)),!1!==i||"x"!=e&&"y"!=e||t.instance.jumpTo(t.instance.current.index,150),t.$container.removeClass("fancybox-is-sliding")},u.prototype.endPanning=function(){var e,t,i,r=this;r.contentLastPos&&(!1===r.opts.momentum?(e=r.contentLastPos.left,t=r.contentLastPos.top):(e=r.contentLastPos.left+r.velocityX*r.speed,t=r.contentLastPos.top+r.velocityY*r.speed),i=r.limitPosition(e,t,r.contentStartPos.width,r.contentStartPos.height),i.width=r.contentStartPos.width,i.height=r.contentStartPos.height,n.fancybox.animate(r.$content,i,330))},u.prototype.endZooming=function(){var e,t,i,r,o=this,a=o.instance.current,s=o.newWidth,l=o.newHeight;o.contentLastPos&&(e=o.contentLastPos.left,t=o.contentLastPos.top,r={top:t,left:e,width:s,height:l,scaleX:1,scaleY:1},n.fancybox.setTranslate(o.$content,r),s<o.canvasWidth&&l<o.canvasHeight?o.instance.scaleToFit(150):s>a.width||l>a.height?o.instance.scaleToActual(o.centerPointStartX,o.centerPointStartY,150):(i=o.limitPosition(e,t,s,l),n.fancybox.setTranslate(o.content,n.fancybox.getTranslate(o.$content)),n.fancybox.animate(o.$content,i,150)))},u.prototype.onTap=function(e){var t,i=this,r=n(e.target),a=i.instance,s=a.current,l=e&&o(e)||i.startPoints,c=l[0]?l[0].x-i.$stage.offset().left:0,u=l[0]?l[0].y-i.$stage.offset().top:0,d=function(t){var r=s.opts[t];if(n.isFunction(r)&&(r=r.apply(a,[s,e])),r)switch(r){case"close":a.close(i.startEvent);break;case"toggleControls":a.toggleControls(!0);break;case"next":a.next();break;case"nextOrClose":a.group.length>1?a.next():a.close(i.startEvent);break;case"zoom":"image"==s.type&&(s.isLoaded||s.$ghost)&&(a.canPan()?a.scaleToFit():a.isScaledDown()?a.scaleToActual(c,u):a.group.length<2&&a.close(i.startEvent))}};if(!(e.originalEvent&&2==e.originalEvent.button||a.isSliding||c>r[0].clientWidth+r.offset().left)){if(r.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(r.is(".fancybox-slide"))t="Slide";else{if(!a.current.$content||!a.current.$content.has(e.target).length)return;t="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,Math.abs(c-i.tapX)>50||Math.abs(u-i.tapY)>50||a.isSliding)return this;d("dblclick"+t)}else i.tapX=c,i.tapY=u,s.opts["dblclick"+t]&&s.opts["dblclick"+t]!==s.opts["click"+t]?i.tapped=setTimeout(function(){i.tapped=null,d("click"+t)},300):d("click"+t);return this}},n(t).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new u(t))}),n(t).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,window.jQuery||jQuery),function(e,t){"use strict";t.extend(!0,t.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg viewBox="0 0 40 40"><path d="M13,12 L27,20 L13,27 Z" /><path d="M15,10 v19 M23,10 v19" /></svg></button>'},slideShow:{autoStart:!1,speed:3e3}});var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this;e.$button=e.instance.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),(e.instance.group.length<2||!e.instance.group[e.instance.currIndex].opts.slideShow)&&e.$button.hide()},set:function(e){var t=this;t.instance&&t.instance.current&&(!0===e||t.instance.current.opts.loop||t.instance.currIndex<t.instance.group.length-1)?t.timer=setTimeout(function(){t.isActive&&t.instance.jumpTo((t.instance.currIndex+1)%t.instance.group.length)},t.instance.current.opts.slideShow.speed):(t.stop(),t.instance.idleSecondsCounter=0,t.instance.showControls())},clear:function(){var e=this;clearTimeout(e.timer),e.timer=null},start:function(){var e=this,t=e.instance.current;t&&(e.isActive=!0,e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),e.set(!0))},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),e.isActive=!1},toggle:function(){var e=this;e.isActive?e.stop():e.start()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,i){var r=t&&t.SlideShow;i?r&&n.opts.slideShow.autoStart&&r.start():r&&r.isActive&&r.clear()},"afterShow.fb":function(e,t,n){var i=t&&t.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(n,i,r,o,a){var s=i&&i.SlideShow;!s||!r.opts.slideShow||80!==a&&32!==a||t(e.activeElement).is("button,a,input")||(o.preventDefault(),s.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),t(e).on("visibilitychange",function(){var n=t.fancybox.getInstance(),i=n&&n.SlideShow;i&&i.isActive&&(e.hidden?i.clear():i.set())})}(document,window.jQuery||jQuery),function(e,t){"use strict";var n=function(){var t,n,i,r=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],o={};for(n=0;n<r.length;n++)if((t=r[n])&&t[1]in e){for(i=0;i<t.length;i++)o[r[0][i]]=t[i];return o}return!1}();if(!n)return void(t&&t.fancybox&&(t.fancybox.defaults.btnTpl.fullScreen=!1));var i={request:function(t){t=t||e.documentElement,t[n.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){e[n.exitFullscreen]()},toggle:function(t){t=t||e.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(e[n.fullscreenElement])},enabled:function(){return Boolean(e[n.fullscreenEnabled])}};t.extend(!0,t.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}"><svg viewBox="0 0 40 40"><path d="M9,12 h22 v16 h-22 v-16 v16 h22 v-16 Z" /></svg></button>'},fullScreen:{autoStart:!1}}),t(e).on({"onInit.fb":function(e,t){var n;t&&t.group[t.currIndex].opts.fullScreen?(n=t.$refs.container,n.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle(n[0])}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(n[0]),t.FullScreen=i):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide()},"afterKeydown.fb":function(e,t,n,i,r){t&&t.FullScreen&&70===r&&(i.preventDefault(),t.FullScreen.toggle(t.$refs.container[0]))},"beforeClose.fb":function(e){e&&e.FullScreen&&i.exit()}}),t(e).on(n.fullscreenchange,function(){
var e=i.isFullscreen(),n=t.fancybox.getInstance();n&&(n.current&&"image"===n.current.type&&n.isAnimating&&(n.current.$content.css("transition","none"),n.isAnimating=!1,n.update(!0,!0,0)),n.trigger("onFullscreenChange",e),n.$refs.container.toggleClass("fancybox-is-fullscreen",e))})}(document,window.jQuery||jQuery),function(e,t){"use strict";t.fancybox.defaults=t.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg viewBox="0 0 120 120"><path d="M30,30 h14 v14 h-14 Z M50,30 h14 v14 h-14 Z M70,30 h14 v14 h-14 Z M30,50 h14 v14 h-14 Z M50,50 h14 v14 h-14 Z M70,50 h14 v14 h-14 Z M30,70 h14 v14 h-14 Z M50,70 h14 v14 h-14 Z M70,70 h14 v14 h-14 Z" /></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},t.fancybox.defaults);var n=function(e){this.init(e)};t.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this;t.instance=e,e.Thumbs=t;var n=e.group[0],i=e.group[1];t.opts=e.group[e.currIndex].opts.thumbs,t.$button=e.$refs.toolbar.find("[data-fancybox-thumbs]"),t.opts&&n&&i&&("image"==n.type||n.opts.thumb||n.opts.$thumb)&&("image"==i.type||i.opts.thumb||i.opts.$thumb)?(t.$button.show().on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var e,n,i=this,r=i.instance,o=i.opts.parentEl;i.$grid=t('<div class="fancybox-thumbs fancybox-thumbs-'+i.opts.axis+'"></div>').appendTo(r.$refs.container.find(o).addBack().filter(o)),e="<ul>",t.each(r.group,function(t,i){n=i.opts.thumb||(i.opts.$thumb?i.opts.$thumb.attr("src"):null),n||"image"!==i.type||(n=i.src),n&&n.length&&(e+='<li data-index="'+t+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+n+'" /></li>')}),e+="</ul>",i.$list=t(e).appendTo(i.$grid).on("click","li",function(){r.jumpTo(t(this).data("index"))}),i.$list.find("img").hide().one("load",function(){var e,n,i,r,o=t(this).parent().removeClass("fancybox-thumbs-loading"),a=o.outerWidth(),s=o.outerHeight();e=this.naturalWidth||this.width,n=this.naturalHeight||this.height,i=e/a,r=n/s,i>=1&&r>=1&&(i>r?(e/=r,n=s):(e=a,n/=i)),t(this).css({width:Math.floor(e),height:Math.floor(n),"margin-top":n>s?Math.floor(.3*s-.3*n):Math.floor(.5*s-.5*n),"margin-left":Math.floor(.5*a-.5*e)}).show()}).each(function(){this.src=t(this).data("src")}),"x"===i.opts.axis&&i.$list.width(parseInt(i.$grid.css("padding-right"))+r.group.length*i.$list.children().eq(0).outerWidth(!0)+"px")},focus:function(e){var t,n,i=this,r=i.$list;i.instance.current&&(t=r.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+i.instance.current.index+'"]').addClass("fancybox-thumbs-active"),n=t.position(),"y"===i.opts.axis&&(n.top<0||n.top>r.height()-t.outerHeight())?r.stop().animate({scrollTop:r.scrollTop()+n.top},e):"x"===i.opts.axis&&(n.left<r.parent().scrollLeft()||n.left>r.parent().scrollLeft()+(r.parent().width()-t.outerWidth()))&&r.parent().stop().animate({scrollLeft:n.left},e))},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus(0)):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),t(e).on({"onInit.fb":function(e,t){var i;t&&!t.Thumbs&&(i=new n(t),i.isActive&&!0===i.opts.autoStart&&i.show())},"beforeShow.fb":function(e,t,n,i){var r=t&&t.Thumbs;r&&r.isVisible&&r.focus(i?0:250)},"afterKeydown.fb":function(e,t,n,i,r){var o=t&&t.Thumbs;o&&o.isActive&&71===r&&(i.preventDefault(),o.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,window.jQuery),function(e,t){"use strict";function n(e){var t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(e).replace(/[&<>"'`=\/]/g,function(e){return t[e]})}t.extend(!0,t.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg viewBox="0 0 40 40"><path d="M6,30 C8,18 19,16 23,16 L23,16 L23,10 L33,20 L23,29 L23,24 C19,24 8,27 6,30 Z"></svg></button>'},share:{tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a href="https://www.facebook.com/sharer/sharer.php?u={{src}}" target="_blank" class="fancybox-share_button"><svg version="1.1" viewBox="0 0 32 32" fill="#3b5998"><path d="M27.6 3h-23.2c-.8 0-1.4.6-1.4 1.4v23.1c0 .9.6 1.5 1.4 1.5h12.5v-10.1h-3.4v-3.9h3.4v-2.9c0-3.4 2.1-5.2 5-5.2 1.4 0 2.7.1 3 .2v3.5h-2.1c-1.6 0-1.9.8-1.9 1.9v2.5h3.9l-.5 3.9h-3.4v10.1h6.6c.8 0 1.4-.6 1.4-1.4v-23.2c.1-.8-.5-1.4-1.3-1.4z"></path></svg><span>Facebook</span></a><a href="https://www.pinterest.com/pin/create/button/?url={{src}}&amp;description={{descr}}" target="_blank" class="fancybox-share_button"><svg version="1.1" viewBox="0 0 32 32" fill="#c92228"><path d="M16 3c-7.2 0-13 5.8-13 13 0 5.5 3.4 10.2 8.3 12.1-.1-1-.2-2.6 0-3.7.2-1 1.5-6.5 1.5-6.5s-.4-.8-.4-1.9c0-1.8 1-3.2 2.4-3.2 1.1 0 1.6.8 1.6 1.8 0 1.1-.7 2.8-1.1 4.3-.3 1.3.6 2.3 1.9 2.3 2.3 0 4.1-2.4 4.1-6 0-3.1-2.2-5.3-5.4-5.3-3.7 0-5.9 2.8-5.9 5.6 0 1.1.4 2.3 1 3 .1.1.1.2.1.4-.1.4-.3 1.3-.4 1.5-.1.2-.2.3-.4.2-1.6-.8-2.6-3.1-2.6-5 0-4.1 3-7.9 8.6-7.9 4.5 0 8 3.2 8 7.5 0 4.5-2.8 8.1-6.7 8.1-1.3 0-2.6-.7-3-1.5 0 0-.7 2.5-.8 3.1-.3 1.1-1.1 2.5-1.6 3.4 1.2.4 2.5.6 3.8.6 7.2 0 13-5.8 13-13 0-7.1-5.8-12.9-13-12.9z"></path></svg><span>Pinterest</span></a><a href="https://twitter.com/intent/tweet?url={{src}}&amp;text={{descr}}" target="_blank" class="fancybox-share_button"><svg version="1.1" viewBox="0 0 32 32" fill="#1da1f2"><path d="M30 7.3c-1 .5-2.1.8-3.3.9 1.2-.7 2.1-1.8 2.5-3.2-1.1.7-2.3 1.1-3.6 1.4-1-1.1-2.5-1.8-4.2-1.8-3.2 0-5.7 2.6-5.7 5.7 0 .5.1.9.1 1.3-4.8-.2-9-2.5-11.8-6-.5.9-.8 1.9-.8 3 0 2 1 3.8 2.6 4.8-.9 0-1.8-.3-2.6-.7v.1c0 2.8 2 5.1 4.6 5.6-.5.1-1 .2-1.5.2-.4 0-.7 0-1.1-.1.7 2.3 2.9 3.9 5.4 4-2 1.5-4.4 2.5-7.1 2.5-.5 0-.9 0-1.4-.1 2.5 1.6 5.6 2.6 8.8 2.6 10.6 0 16.3-8.8 16.3-16.3v-.7c1.1-1 2-2 2.8-3.2z"></path></svg><span>Twitter</span></a></p><p><input type="text" value="{{src_raw}}" onfocus="this.select()" /></p></div>'}}),t(e).on("click","[data-fancybox-share]",function(){var e,i,r=t.fancybox.getInstance();r&&(e=!1===r.current.opts.hash?r.current.src:window.location,i=r.current.opts.share.tpl.replace(/\{\{src\}\}/g,encodeURIComponent(e)).replace(/\{\{src_raw\}\}/g,n(e)).replace(/\{\{descr\}\}/g,r.$caption?encodeURIComponent(r.$caption.text()):""),t.fancybox.open({src:r.translate(r,i),type:"html",opts:{animationEffect:"fade",animationDuration:250}}))})}(document,window.jQuery||jQuery),function(e,t,n){"use strict";function i(){var e=t.location.hash.substr(1),n=e.split("-"),i=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,r=n.join("-");return i<1&&(i=1),{hash:e,index:i,gallery:r}}function r(e){var t;""!==e.gallery&&(t=n("[data-fancybox='"+n.escapeSelector(e.gallery)+"']").eq(e.index-1),t.length||(t=n("#"+n.escapeSelector(e.gallery))),t.length&&(a=!1,t.trigger("click")))}function o(e){var t;return!!e&&(t=e.current?e.current.opts:e.opts,t.hash||(t.$orig?t.$orig.data("fancybox"):""))}n.escapeSelector||(n.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})});var a=!0,s=null,l=null;n(function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function(e,t){var n,r;!1!==t.group[t.currIndex].opts.hash&&(n=i(),(r=o(t))&&n.gallery&&r==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(n,i,r){var c;r&&!1!==r.opts.hash&&(c=o(i))&&""!==c&&(t.location.hash.indexOf(c)<0&&(i.opts.origHash=t.location.hash),s=c+(i.group.length>1?"-"+(r.index+1):""),"replaceState"in t.history?(l&&clearTimeout(l),l=setTimeout(function(){t.history[a?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+s),l=null,a=!1},300)):t.location.hash=s)},"beforeClose.fb":function(i,r,a){var c,u;l&&clearTimeout(l),!1!==a.opts.hash&&(c=o(r),u=r&&r.opts.origHash?r.opts.origHash:"",c&&""!==c&&("replaceState"in history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+u):(t.location.hash=u,n(t).scrollTop(r.scrollTop).scrollLeft(r.scrollLeft))),s=null)}}),n(t).on("hashchange.fb",function(){var e=i();n.fancybox.getInstance()?!s||s===e.gallery+"-"+e.index||1===e.index&&s==e.gallery||(s=null,n.fancybox.close()):""!==e.gallery&&r(e)}),setTimeout(function(){r(i())},50))})}(document,window,window.jQuery||jQuery),function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=3)}([function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,function(a){r=[n(2)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e){return e})},function(e,t,n){"use strict";var i,r,o,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(a){r=[n(0),n(10),n(11)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t,n,i){function r(t,n,a){if(!(this instanceof r))return new r(t,n,a);this.el=i,this.events={},this.maskset=i,this.refreshValue=!1,!0!==a&&(e.isPlainObject(t)?n=t:(n=n||{}).alias=t,this.opts=e.extend(!0,{},this.defaults,n),this.noMasksCache=n&&n.definitions!==i,this.userOptions=n||{},this.isRTL=this.opts.numericInput,o(this.opts.alias,n,this.opts))}function o(t,n,a){var s=r.prototype.aliases[t];return s?(s.alias&&o(s.alias,i,a),e.extend(!0,a,s),e.extend(!0,a,n),!0):(null===a.mask&&(a.mask=t),!1)}function s(t,n){function o(t,o,a){var s=!1;if(null!==t&&""!==t||((s=null!==a.regex)?t=(t=a.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(s=!0,t=".*")),1===t.length&&!1===a.greedy&&0!==a.repeat&&(a.placeholder=""),a.repeat>0||"*"===a.repeat||"+"===a.repeat){var l="*"===a.repeat?0:"+"===a.repeat?1:a.repeat;t=a.groupmarker.start+t+a.groupmarker.end+a.quantifiermarker.start+l+","+a.repeat+a.quantifiermarker.end}var c,u=s?"regex_"+a.regex:a.numericInput?t.split("").reverse().join(""):t;return r.prototype.masksCache[u]===i||!0===n?(c={mask:t,maskToken:r.prototype.analyseMask(t,s,a),validPositions:{},_buffer:i,buffer:i,tests:{},metadata:o,maskLength:i},!0!==n&&(r.prototype.masksCache[u]=c,c=e.extend(!0,{},r.prototype.masksCache[u]))):c=e.extend(!0,{},r.prototype.masksCache[u]),c}if(e.isFunction(t.mask)&&(t.mask=t.mask(t)),e.isArray(t.mask)){if(t.mask.length>1){t.keepStatic=null===t.keepStatic||t.keepStatic;var a=t.groupmarker.start;return e.each(t.numericInput?t.mask.reverse():t.mask,function(n,r){a.length>1&&(a+=t.groupmarker.end+t.alternatormarker+t.groupmarker.start),r.mask===i||e.isFunction(r.mask)?a+=r:a+=r.mask}),a+=t.groupmarker.end,o(a,t.mask,t)}t.mask=t.mask.pop()}return t.mask&&t.mask.mask!==i&&!e.isFunction(t.mask.mask)?o(t.mask.mask,t.mask,t):o(t.mask,t.mask,t)}function l(o,s,c){function h(e,t,n){t=t||0;var r,o,a,s=[],l=0,u=v();do{!0===e&&g().validPositions[l]?(o=(a=g().validPositions[l]).match,r=a.locator.slice(),s.push(!0===n?a.input:!1===n?o.nativeDef:j(l,o))):(o=(a=x(l,r,l-1)).match,r=a.locator.slice(),(!1===c.jitMasking||l<u||"number"==typeof c.jitMasking&&isFinite(c.jitMasking)&&c.jitMasking>l)&&s.push(!1===n?o.nativeDef:j(l,o))),l++}while((G===i||l<G)&&(null!==o.fn||""!==o.def)||t>l);return""===s[s.length-1]&&s.pop(),g().maskLength=l+1,s}function g(){return s}function m(e){var t=g();t.buffer=i,!0!==e&&(t.validPositions={},t.p=0)}function v(e,t,n){var r=-1,o=-1,a=n||g().validPositions;e===i&&(e=-1);for(var s in a){var l=parseInt(s);a[l]&&(t||!0!==a[l].generatedInput)&&(l<=e&&(r=l),l>=e&&(o=l))}return-1!==r&&e-r>1||o<e?r:o}function y(t,n,r,o){var a,s=t,l=e.extend(!0,{},g().validPositions),u=!1;for(g().p=t,a=n-1;a>=s;a--)g().validPositions[a]!==i&&(!0!==r&&(!g().validPositions[a].match.optionality&&function(e){var t=g().validPositions[e];if(t!==i&&null===t.match.fn){var n=g().validPositions[e-1],r=g().validPositions[e+1];return n!==i&&r!==i}return!1}(a)||!1===c.canClearPosition(g(),a,v(),o,c))||delete g().validPositions[a]);for(m(!0),a=s+1;a<=v();){for(;g().validPositions[s]!==i;)s++;if(a<s&&(a=s+1),g().validPositions[a]===i&&A(a))a++;else{var d=x(a);!1===u&&l[s]&&l[s].match.def===d.match.def?(g().validPositions[s]=e.extend(!0,{},l[s]),g().validPositions[s].input=d.input,delete g().validPositions[a],a++):k(s,d.match.def)?!1!==M(s,d.input||j(a),!0)&&(delete g().validPositions[a],a++,u=!0):A(a)||(a++,s--),s++}}m(!0)}function b(e,t){for(var n,r=e,o=v(),a=g().validPositions[o]||C(0)[0],s=a.alternation!==i?a.locator[a.alternation].toString().split(","):[],l=0;l<r.length&&(!((n=r[l]).match&&(c.greedy&&!0!==n.match.optionalQuantifier||(!1===n.match.optionality||!1===n.match.newBlockMarker)&&!0!==n.match.optionalQuantifier)&&(a.alternation===i||a.alternation!==n.alternation||n.locator[a.alternation]!==i&&P(n.locator[a.alternation].toString().split(","),s)))||!0===t&&(null!==n.match.fn||/[0-9a-bA-Z]/.test(n.match.def)));l++);return n}function x(e,t,n){return g().validPositions[e]||b(C(e,t?t.slice():t,n))}function w(e){return g().validPositions[e]?g().validPositions[e]:C(e)[0]}function k(e,t){for(var n=!1,i=C(e),r=0;r<i.length;r++)if(i[r].match&&i[r].match.def===t){n=!0;break}return n}function C(t,n,r){function o(n,r,a,l){function d(a,l,m){function v(t,n){var i=0===e.inArray(t,n.matches);return i||e.each(n.matches,function(e,r){if(!0===r.isQuantifier&&(i=v(t,n.matches[e-1])))return!1}),i}function y(t,n,r){var o,a;if(g().validPositions[t-1]&&r&&g().tests[t])for(var s=g().validPositions[t-1].locator,l=g().tests[t][0].locator,c=0;c<r;c++)if(s[c]!==l[c])return s.slice(r+1);return(g().tests[t]||g().validPositions[t])&&e.each(g().tests[t]||[g().validPositions[t]],function(e,t){var s=r!==i?r:t.alternation,l=t.locator[s]!==i?t.locator[s].toString().indexOf(n):-1;(a===i||l<a)&&-1!==l&&(o=t,a=l)}),o?o.locator.slice((r!==i?r:o.alternation)+1):r!==i?y(t,n):i}if(u>1e4)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+g().mask;if(u===t&&a.matches===i)return f.push({match:a,locator:l.reverse(),cd:h}),!0;if(a.matches!==i){if(a.isGroup&&m!==a){if(a=d(n.matches[e.inArray(a,n.matches)+1],l))return!0}else if(a.isOptional){var b=a;if(a=o(a,r,l,m)){if(s=f[f.length-1].match,!v(s,b))return!0;p=!0,u=t}}else if(a.isAlternator){var x,w=a,k=[],C=f.slice(),S=l.length,E=r.length>0?r.shift():-1;if(-1===E||"string"==typeof E){var T,D=u,P=r.slice(),M=[];if("string"==typeof E)M=E.split(",");else for(T=0;T<w.matches.length;T++)M.push(T);for(var A=0;A<M.length;A++){if(T=parseInt(M[A]),f=[],r=y(u,T,S)||P.slice(),!0!==(a=d(w.matches[T]||n.matches[T],[T].concat(l),m)||a)&&a!==i&&M[M.length-1]<w.matches.length){var O=e.inArray(a,n.matches)+1;n.matches.length>O&&(a=d(n.matches[O],[O].concat(l.slice(1,l.length)),m))&&(M.push(O.toString()),e.each(f,function(e,t){t.alternation=l.length-1}))}x=f.slice(),u=D,f=[];for(var L=0;L<x.length;L++){var N=x[L],I=!1;N.alternation=N.alternation||S;for(var j=0;j<k.length;j++){var F=k[j];if("string"!=typeof E||-1!==e.inArray(N.locator[N.alternation].toString(),M)){if(function(e,t){return e.match.nativeDef===t.match.nativeDef||e.match.def===t.match.nativeDef||e.match.nativeDef===t.match.def}(N,F)){I=!0,N.alternation===F.alternation&&-1===F.locator[F.alternation].toString().indexOf(N.locator[N.alternation])&&(F.locator[F.alternation]=F.locator[F.alternation]+","+N.locator[N.alternation],F.alternation=N.alternation),N.match.nativeDef===F.match.def&&(N.locator[N.alternation]=F.locator[F.alternation],k.splice(k.indexOf(F),1,N));break}if(N.match.def===F.match.def){I=!1;break}if(function(e,n){return null===e.match.fn&&null!==n.match.fn&&n.match.fn.test(e.match.def,g(),t,!1,c,!1)}(N,F)||function(e,n){return null!==e.match.fn&&null!==n.match.fn&&n.match.fn.test(e.match.def.replace(/[\[\]]/g,""),g(),t,!1,c,!1)}(N,F)){N.alternation===F.alternation&&-1===N.locator[N.alternation].toString().indexOf(F.locator[F.alternation].toString().split("")[0])&&(N.na=N.na||N.locator[N.alternation].toString(),-1===N.na.indexOf(N.locator[N.alternation].toString().split("")[0])&&(N.na=N.na+","+N.locator[F.alternation].toString().split("")[0]),I=!0,N.locator[N.alternation]=F.locator[F.alternation].toString().split("")[0]+","+N.locator[N.alternation],k.splice(k.indexOf(F),0,N));break}}}I||k.push(N)}}"string"==typeof E&&(k=e.map(k,function(t,n){if(isFinite(n)){var r=t.alternation,o=t.locator[r].toString().split(",");t.locator[r]=i,t.alternation=i;for(var a=0;a<o.length;a++)-1!==e.inArray(o[a],M)&&(t.locator[r]!==i?(t.locator[r]+=",",t.locator[r]+=o[a]):t.locator[r]=parseInt(o[a]),t.alternation=r);if(t.locator[r]!==i)return t}})),f=C.concat(k),u=t,p=f.length>0,a=k.length>0,r=P.slice()}else a=d(w.matches[E]||n.matches[E],[E].concat(l),m);if(a)return!0}else if(a.isQuantifier&&m!==n.matches[e.inArray(a,n.matches)-1])for(var R=a,$=r.length>0?r.shift():0;$<(isNaN(R.quantifier.max)?$+1:R.quantifier.max)&&u<=t;$++){var _=n.matches[e.inArray(R,n.matches)-1];if(a=d(_,[$].concat(l),_)){if(s=f[f.length-1].match,s.optionalQuantifier=$>R.quantifier.min-1,v(s,_)){if($>R.quantifier.min-1){p=!0,u=t;break}return!0}return!0}}else if(a=o(a,r,l,m))return!0}else u++}for(var m=r.length>0?r.shift():0;m<n.matches.length;m++)if(!0!==n.matches[m].isQuantifier){var v=d(n.matches[m],[m].concat(a),l);if(v&&u===t)return v;if(u>t)break}}function a(e){if(c.keepStatic&&t>0&&e.length>1+(""===e[e.length-1].match.def?1:0)&&!0!==e[0].match.optionality&&!0!==e[0].match.optionalQuantifier&&null===e[0].match.fn&&!/[0-9a-bA-Z]/.test(e[0].match.def)){if(g().validPositions[t-1]===i)return[b(e)];if(g().validPositions[t-1].alternation===e[0].alternation)return[b(e)];if(g().validPositions[t-1])return[b(e)]}return e}var s,l=g().maskToken,u=n?r:0,d=n?n.slice():[0],f=[],p=!1,h=n?n.join(""):"";if(t>-1){if(n===i){for(var m,v=t-1;(m=g().validPositions[v]||g().tests[v])===i&&v>-1;)v--;m!==i&&v>-1&&(d=function(t){var n=[];return e.isArray(t)||(t=[t]),t.length>0&&(t[0].alternation===i?0===(n=b(t.slice()).locator.slice()).length&&(n=t[0].locator.slice()):e.each(t,function(e,t){if(""!==t.def)if(0===n.length)n=t.locator.slice();else for(var i=0;i<n.length;i++)t.locator[i]&&-1===n[i].toString().indexOf(t.locator[i])&&(n[i]+=","+t.locator[i])})),n}(m),h=d.join(""),u=v)}if(g().tests[t]&&g().tests[t][0].cd===h)return a(g().tests[t]);for(var y=d.shift();y<l.length&&!(o(l[y],d,[y])&&u===t||u>t);y++);}return(0===f.length||p)&&f.push({match:{fn:null,cardinality:0,optionality:!0,casing:null,def:"",placeholder:""},locator:[],cd:h}),n!==i&&g().tests[t]?a(e.extend(!0,[],f)):(g().tests[t]=e.extend(!0,[],f),a(g().tests[t]))}function S(){return g()._buffer===i&&(g()._buffer=h(!1,1),g().buffer===i&&(g().buffer=g()._buffer.slice())),g()._buffer}function E(e){return g().buffer!==i&&!0!==e||(g().buffer=h(!0,v(),!0)),g().buffer}function T(e,t,n){var r,o;if(!0===e)m(),e=0,t=n.length;else for(r=e;r<t;r++)delete g().validPositions[r];for(o=e,r=e;r<t;r++)if(m(!0),n[r]!==c.skipOptionalPartCharacter){var a=M(o,n[r],!0,!0);!1!==a&&(m(!0),o=a.caret!==i?a.caret:a.pos+1)}}function D(t,n,i){switch(c.casing||n.casing){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase();break;case"title":var o=g().validPositions[i-1];t=0===i||o&&o.input===String.fromCharCode(r.keyCode.SPACE)?t.toUpperCase():t.toLowerCase();break;default:if(e.isFunction(c.casing)){var a=Array.prototype.slice.call(arguments);a.push(g().validPositions),t=c.casing.apply(this,a)}}return t}function P(t,n,r){for(var o,a=c.greedy?n:n.slice(0,1),s=!1,l=r!==i?r.split(","):[],u=0;u<l.length;u++)-1!==(o=t.indexOf(l[u]))&&t.splice(o,1);for(var d=0;d<t.length;d++)if(-1!==e.inArray(t[d],a)){s=!0;break}return s}function M(t,n,o,a,s,l){function u(e){var t=Z?e.begin-e.end>1||e.begin-e.end==1:e.end-e.begin>1||e.end-e.begin==1;return t&&0===e.begin&&e.end===g().maskLength?"full":t}function d(n,r,o){var s=!1;return e.each(C(n),function(l,d){for(var p=d.match,h=r?1:0,b="",x=p.cardinality;x>h;x--)b+=N(n-(x-1));if(r&&(b+=r),E(!0),!1!==(s=null!=p.fn?p.fn.test(b,g(),n,o,c,u(t)):(r===p.def||r===c.skipOptionalPartCharacter)&&""!==p.def&&{c:j(n,p,!0)||p.def,pos:n})){var w=s.c!==i?s.c:r;w=w===c.skipOptionalPartCharacter&&null===p.fn?j(n,p,!0)||p.def:w;var k=n,C=E();if(s.remove!==i&&(e.isArray(s.remove)||(s.remove=[s.remove]),e.each(s.remove.sort(function(e,t){return t-e}),function(e,t){y(t,t+1,!0)})),s.insert!==i&&(e.isArray(s.insert)||(s.insert=[s.insert]),e.each(s.insert.sort(function(e,t){return e-t}),function(e,t){M(t.pos,t.c,!0,a)})),s.refreshFromBuffer){var S=s.refreshFromBuffer;if(T(!0===S?S:S.start,S.end,C),s.pos===i&&s.c===i)return s.pos=v(),!1;if((k=s.pos!==i?s.pos:n)!==n)return s=e.extend(s,M(k,w,!0,a)),!1}else if(!0!==s&&s.pos!==i&&s.pos!==n&&(k=s.pos,T(n,k,E().slice()),k!==n))return s=e.extend(s,M(k,w,!0)),!1;return(!0===s||s.pos!==i||s.c!==i)&&(l>0&&m(!0),f(k,e.extend({},d,{input:D(w,p,k)}),a,u(t))||(s=!1),!1)}}),s}function f(t,n,r,o){if(o||c.insertMode&&g().validPositions[t]!==i&&r===i){var a,s=e.extend(!0,{},g().validPositions),l=v(i,!0);for(a=t;a<=l;a++)delete g().validPositions[a];g().validPositions[t]=e.extend(!0,{},n);var u,d=!0,f=g().validPositions,h=!1,y=g().maskLength;for(a=u=t;a<=l;a++){var b=s[a];if(b!==i)for(var x=u;x<g().maskLength&&(null===b.match.fn&&f[a]&&(!0===f[a].match.optionalQuantifier||!0===f[a].match.optionality)||null!=b.match.fn);){if(x++,!1===h&&s[x]&&s[x].match.def===b.match.def)g().validPositions[x]=e.extend(!0,{},s[x]),g().validPositions[x].input=b.input,p(x),u=x,d=!0;else if(k(x,b.match.def)){var w=M(x,b.input,!0,!0);d=!1!==w,u=w.caret||w.insert?v():x,h=!0}else if(!(d=!0===b.generatedInput)&&x>=g().maskLength-1)break;if(g().maskLength<y&&(g().maskLength=y),d)break}if(!d)break}if(!d)return g().validPositions=e.extend(!0,{},s),m(!0),!1}else g().validPositions[t]=e.extend(!0,{},n);return m(!0),!0}function p(t){for(var n=t-1;n>-1&&!g().validPositions[n];n--);var r,o;for(n++;n<t;n++)g().validPositions[n]===i&&(!1===c.jitMasking||c.jitMasking>n)&&(""===(o=C(n,x(n-1).locator,n-1).slice())[o.length-1].match.def&&o.pop(),(r=b(o))&&(r.match.def===c.radixPointDefinitionSymbol||!A(n,!0)||e.inArray(c.radixPoint,E())<n&&r.match.fn&&r.match.fn.test(j(n),g(),n,!1,c))&&!1!==(w=d(n,j(n,r.match,!0)||(null==r.match.fn?r.match.def:""!==j(n)?j(n):E()[n]),!0))&&(g().validPositions[w.pos||n].generatedInput=!0))}o=!0===o;var h=t;t.begin!==i&&(h=Z&&!u(t)?t.end:t.begin);var w=!0,S=e.extend(!0,{},g().validPositions);if(e.isFunction(c.preValidation)&&!o&&!0!==a&&!0!==l&&(w=c.preValidation(E(),h,n,u(t),c)),!0===w){if(p(h),u(t)&&(q(i,r.keyCode.DELETE,t,!0,!0),h=g().p),h<g().maskLength&&(G===i||h<G)&&(w=d(h,n,o),(!o||!0===a)&&!1===w&&!0!==l)){var L=g().validPositions[h];if(!L||null!==L.match.fn||L.match.def!==n&&n!==c.skipOptionalPartCharacter){if((c.insertMode||g().validPositions[O(h)]===i)&&!A(h,!0))for(var I=h+1,F=O(h);I<=F;I++)if(!1!==(w=d(I,n,o))){!function(t,n){var r=g().validPositions[n];if(r)for(var o=r.locator,a=o.length,s=t;s<n;s++)if(g().validPositions[s]===i&&!A(s,!0)){var l=C(s).slice(),c=b(l,!0),u=-1;""===l[l.length-1].match.def&&l.pop(),e.each(l,function(e,t){for(var n=0;n<a;n++){if(t.locator[n]===i||!P(t.locator[n].toString().split(","),o[n].toString().split(","),t.na)){var r=o[n],s=c.locator[n],l=t.locator[n];r-s>Math.abs(r-l)&&(c=t);break}u<n&&(u=n,c=t)}}),(c=e.extend({},c,{input:j(s,c.match,!0)||c.match.def})).generatedInput=!0,f(s,c,!0),g().validPositions[n]=i,d(n,r.input,!0)}}(h,w.pos!==i?w.pos:I),h=I;break}}else w={caret:O(h)}}!1===w&&c.keepStatic&&!o&&!0!==s&&(w=function(t,n,r){var o,s,l,u,d,f,p,h,y=e.extend(!0,{},g().validPositions),b=!1,x=v();for(u=g().validPositions[x];x>=0;x--)if((l=g().validPositions[x])&&l.alternation!==i){if(o=x,s=g().validPositions[o].alternation,u.locator[l.alternation]!==l.locator[l.alternation])break;u=l}if(s!==i){h=parseInt(o);var w=u.locator[u.alternation||s]!==i?u.locator[u.alternation||s]:p[0];w.length>0&&(w=w.split(",")[0]);var k=g().validPositions[h],S=g().validPositions[h-1];e.each(C(h,S?S.locator:i,h-1),function(o,l){p=l.locator[s]?l.locator[s].toString().split(","):[];for(var u=0;u<p.length;u++){var x=[],C=0,S=0,E=!1;if(w<p[u]&&(l.na===i||-1===e.inArray(p[u],l.na.split(","))||-1===e.inArray(w.toString(),p))){g().validPositions[h]=e.extend(!0,{},l);var T=g().validPositions[h].locator;for(g().validPositions[h].locator[s]=parseInt(p[u]),null==l.match.fn?(k.input!==l.match.def&&(E=!0,!0!==k.generatedInput&&x.push(k.input)),S++,g().validPositions[h].generatedInput=!/[0-9a-bA-Z]/.test(l.match.def),g().validPositions[h].input=l.match.def):g().validPositions[h].input=k.input,d=h+1;d<v(i,!0)+1;d++)(f=g().validPositions[d])&&!0!==f.generatedInput&&/[0-9a-bA-Z]/.test(f.input)?x.push(f.input):d<t&&C++,delete g().validPositions[d];for(E&&x[0]===l.match.def&&x.shift(),m(!0),b=!0;x.length>0;){var D=x.shift();if(D!==c.skipOptionalPartCharacter&&!(b=M(v(i,!0)+1,D,!1,a,!0)))break}if(b){g().validPositions[h].locator=T;var P=v(t)+1;for(d=h+1;d<v()+1;d++)((f=g().validPositions[d])===i||null==f.match.fn)&&d<t+(S-C)&&S++;b=M((t+=S-C)>P?P:t,n,r,a,!0)}if(b)return!1;m(),g().validPositions=e.extend(!0,{},y)}}})}return b}(h,n,o)),!0===w&&(w={pos:h})}if(e.isFunction(c.postValidation)&&!1!==w&&!o&&!0!==a&&!0!==l){var R=c.postValidation(E(!0),w,c);if(R.refreshFromBuffer&&R.buffer){var $=R.refreshFromBuffer;T(!0===$?$:$.start,$.end,R.buffer)}w=!0===R?w:R}return w&&w.pos===i&&(w.pos=h),!1!==w&&!0!==l||(m(!0),g().validPositions=e.extend(!0,{},S)),w}function A(e,t){var n=x(e).match;if(""===n.def&&(n=w(e).match),null!=n.fn)return n.fn;if(!0!==t&&e>-1){var i=C(e);return i.length>1+(""===i[i.length-1].match.def?1:0)}return!1}function O(e,t){var n=g().maskLength;if(e>=n)return n;var i=e;for(C(n+1).length>1&&(h(!0,n+1,!0),n=g().maskLength);++i<n&&(!0===t&&(!0!==w(i).match.newBlockMarker||!A(i))||!0!==t&&!A(i)););return i}function L(e,t){var n,i=e;if(i<=0)return 0;for(;--i>0&&(!0===t&&!0!==w(i).match.newBlockMarker||!0!==t&&!A(i)&&((n=C(i)).length<2||2===n.length&&""===n[1].match.def)););return i}function N(e){return g().validPositions[e]===i?j(e):g().validPositions[e].input}function I(t,n,r,o,a){if(o&&e.isFunction(c.onBeforeWrite)){var s=c.onBeforeWrite.call(V,o,n,r,c);if(s){if(s.refreshFromBuffer){var l=s.refreshFromBuffer;T(!0===l?l:l.start,l.end,s.buffer||n),n=E(!0)}r!==i&&(r=s.caret!==i?s.caret:r)}}t!==i&&(t.inputmask._valueSet(n.join("")),r===i||o!==i&&"blur"===o.type?Y(t,r,0===n.length):p&&o&&"input"===o.type?setTimeout(function(){$(t,r)},0):$(t,r),!0===a&&(J=!0,e(t).trigger("input")))}function j(t,n,r){if((n=n||w(t).match).placeholder!==i||!0===r)return e.isFunction(n.placeholder)?n.placeholder(c):n.placeholder;if(null===n.fn){if(t>-1&&g().validPositions[t]===i){var o,a=C(t),s=[];if(a.length>1+(""===a[a.length-1].match.def?1:0))for(var l=0;l<a.length;l++)if(!0!==a[l].match.optionality&&!0!==a[l].match.optionalQuantifier&&(null===a[l].match.fn||o===i||!1!==a[l].match.fn.test(o.match.def,g(),t,!0,c))&&(s.push(a[l]),null===a[l].match.fn&&(o=a[l]),s.length>1&&/[0-9a-bA-Z]/.test(s[0].match.def)))return c.placeholder.charAt(t%c.placeholder.length)}return n.def}return c.placeholder.charAt(t%c.placeholder.length)}function F(t,o,a,s,l){function u(e,t){return-1!==S().slice(e,O(e)).join("").indexOf(t)&&!A(e)&&w(e).match.nativeDef===t.charAt(t.length-1)}var d=s.slice(),f="",p=-1,h=i;if(m(),a||!0===c.autoUnmask)p=O(p);else{var y=S().slice(0,O(-1)).join(""),b=d.join("").match(new RegExp("^"+r.escapeRegex(y),"g"));b&&b.length>0&&(d.splice(0,b.length*y.length),p=O(p))}if(-1===p?(g().p=O(p),p=0):g().p=p,e.each(d,function(n,r){if(r!==i)if(g().validPositions[n]===i&&d[n]===j(n)&&A(n,!0)&&!1===M(n,d[n],!0,i,i,!0))g().p++;else{var o=new e.Event("_checkval");o.which=r.charCodeAt(0),f+=r;var s=v(i,!0),l=g().validPositions[s],y=x(s+1,l?l.locator.slice():i,s);if(!u(p,f)||a||c.autoUnmask){var b=a?n:null==y.match.fn&&y.match.optionality&&s+1<g().p?s+1:g().p;h=ie.keypressEvent.call(t,o,!0,!1,a,b),p=b+1,f=""}else h=ie.keypressEvent.call(t,o,!0,!1,!0,s+1);if(!1!==h&&!a&&e.isFunction(c.onBeforeWrite)){var w=h;if(h=c.onBeforeWrite.call(V,o,E(),h.forwardPosition,c),(h=e.extend(w,h))&&h.refreshFromBuffer){var k=h.refreshFromBuffer;T(!0===k?k:k.start,k.end,h.buffer),m(!0),h.caret&&(g().p=h.caret,h.forwardPosition=h.caret)}}}}),o){var k=i;n.activeElement===t&&h&&(k=c.numericInput?L(h.forwardPosition):h.forwardPosition),I(t,E(),k,l||new e.Event("checkval"),l&&"input"===l.type)}}function R(t){if(t){if(t.inputmask===i)return t.value;t.inputmask&&t.inputmask.refreshValue&&ie.setValueEvent.call(t)}var n=[],r=g().validPositions;for(var o in r)r[o].match&&null!=r[o].match.fn&&n.push(r[o].input);var a=0===n.length?"":(Z?n.reverse():n).join("");if(e.isFunction(c.onUnMask)){var s=(Z?E().slice().reverse():E()).join("");a=c.onUnMask.call(V,s,a,c)}return a}function $(e,r,o,a){function s(e){return!0===a||!Z||"number"!=typeof e||c.greedy&&""===c.placeholder||(e=E().join("").length-e),e}var l;if(r===i)return e.setSelectionRange?(r=e.selectionStart,o=e.selectionEnd):t.getSelection?(l=t.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==e&&l.commonAncestorContainer!==e||(r=l.startOffset,o=l.endOffset):n.selection&&n.selection.createRange&&(o=(r=0-(l=n.selection.createRange()).duplicate().moveStart("character",-e.inputmask._valueGet().length))+l.text.length),{begin:s(r),end:s(o)};if(r.begin!==i&&(o=r.end,r=r.begin),"number"==typeof r){r=s(r),o="number"==typeof(o=s(o))?o:r;var d=parseInt(((e.ownerDocument.defaultView||t).getComputedStyle?(e.ownerDocument.defaultView||t).getComputedStyle(e,null):e.currentStyle).fontSize)*o;if(e.scrollLeft=d>e.scrollWidth?d:0,u||!1!==c.insertMode||r!==o||o++,e.setSelectionRange)e.selectionStart=r,e.selectionEnd=o;else if(t.getSelection){if(l=n.createRange(),e.firstChild===i||null===e.firstChild){var f=n.createTextNode("");e.appendChild(f)}l.setStart(e.firstChild,r<e.inputmask._valueGet().length?r:e.inputmask._valueGet().length),l.setEnd(e.firstChild,o<e.inputmask._valueGet().length?o:e.inputmask._valueGet().length),l.collapse(!0);var p=t.getSelection();p.removeAllRanges(),p.addRange(l)}else e.createTextRange&&((l=e.createTextRange()).collapse(!0),l.moveEnd("character",o),l.moveStart("character",r),l.select());Y(e,{begin:r,end:o})}}function _(t){var n,r,o=E(),a=o.length,s=v(),l={},c=g().validPositions[s],u=c!==i?c.locator.slice():i;for(n=s+1;n<o.length;n++)u=(r=x(n,u,n-1)).locator.slice(),l[n]=e.extend(!0,{},r);var d=c&&c.alternation!==i?c.locator[c.alternation]:i;for(n=a-1;n>s&&((r=l[n]).match.optionality||r.match.optionalQuantifier&&r.match.newBlockMarker||d&&(d!==l[n].locator[c.alternation]&&null!=r.match.fn||null===r.match.fn&&r.locator[c.alternation]&&P(r.locator[c.alternation].toString().split(","),d.toString().split(","))&&""!==C(n)[0].def))&&o[n]===j(n,r.match);n--)a--;return t?{l:a,def:l[a]?l[a].match:i}:a}function H(e){for(var t,n=_(),r=e.length,o=g().validPositions[v()];n<r&&!A(n,!0)&&(t=o!==i?x(n,o.locator.slice(""),o):w(n))&&!0!==t.match.optionality&&(!0!==t.match.optionalQuantifier&&!0!==t.match.newBlockMarker||n+1===r&&""===(o!==i?x(n+1,o.locator.slice(""),o):w(n+1)).match.def);)n++;for(;(t=g().validPositions[n-1])&&t&&t.match.optionality&&t.input===c.skipOptionalPartCharacter;)n--;return e.splice(n),e}function B(t){
if(e.isFunction(c.isComplete))return c.isComplete(t,c);if("*"===c.repeat)return i;var n=!1,r=_(!0),o=L(r.l);if(r.def===i||r.def.newBlockMarker||r.def.optionality||r.def.optionalQuantifier){n=!0;for(var a=0;a<=o;a++){var s=x(a).match;if(null!==s.fn&&g().validPositions[a]===i&&!0!==s.optionality&&!0!==s.optionalQuantifier||null===s.fn&&t[a]!==j(a,s)){n=!1;break}}}return n}function q(t,n,o,a,s){if((c.numericInput||Z)&&(n===r.keyCode.BACKSPACE?n=r.keyCode.DELETE:n===r.keyCode.DELETE&&(n=r.keyCode.BACKSPACE),Z)){var l=o.end;o.end=o.begin,o.begin=l}n===r.keyCode.BACKSPACE&&(o.end-o.begin<1||!1===c.insertMode)?(o.begin=L(o.begin),g().validPositions[o.begin]!==i&&g().validPositions[o.begin].input===c.groupSeparator&&o.begin--):n===r.keyCode.DELETE&&o.begin===o.end&&(o.end=A(o.end,!0)&&g().validPositions[o.end]&&g().validPositions[o.end].input!==c.radixPoint?o.end+1:O(o.end)+1,g().validPositions[o.begin]!==i&&g().validPositions[o.begin].input===c.groupSeparator&&o.end++),y(o.begin,o.end,!1,a),!0!==a&&function(){if(c.keepStatic){for(var n=[],r=v(-1,!0),o=e.extend(!0,{},g().validPositions),a=g().validPositions[r];r>=0;r--){var s=g().validPositions[r];if(s){if(!0!==s.generatedInput&&/[0-9a-bA-Z]/.test(s.input)&&n.push(s.input),delete g().validPositions[r],s.alternation!==i&&s.locator[s.alternation]!==a.locator[s.alternation])break;a=s}}if(r>-1)for(g().p=O(v(-1,!0));n.length>0;){var l=new e.Event("keypress");l.which=n.pop().charCodeAt(0),ie.keypressEvent.call(t,l,!0,!1,!1,g().p)}else g().validPositions=e.extend(!0,{},o)}}();var u=v(o.begin,!0);if(u<o.begin)g().p=O(u);else if(!0!==a&&(g().p=o.begin,!0!==s))for(;g().p<u&&g().validPositions[g().p]===i;)g().p++}function W(i){function r(e){var t,r=n.createElement("span");for(var a in o)isNaN(a)&&-1!==a.indexOf("font")&&(r.style[a]=o[a]);r.style.textTransform=o.textTransform,r.style.letterSpacing=o.letterSpacing,r.style.position="absolute",r.style.height="auto",r.style.width="auto",r.style.visibility="hidden",r.style.whiteSpace="nowrap",n.body.appendChild(r);var s,l=i.inputmask._valueGet(),c=0;for(t=0,s=l.length;t<=s;t++){if(r.innerHTML+=l.charAt(t)||"_",r.offsetWidth>=e){var u=e-c,d=r.offsetWidth-e;r.innerHTML=l.charAt(t),t=(u-=r.offsetWidth/3)<d?t-1:t;break}c=r.offsetWidth}return n.body.removeChild(r),t}var o=(i.ownerDocument.defaultView||t).getComputedStyle(i,null),a=n.createElement("div");a.style.width=o.width,a.style.textAlign=o.textAlign,(X=n.createElement("div")).className="im-colormask",i.parentNode.insertBefore(X,i),i.parentNode.removeChild(i),X.appendChild(a),X.appendChild(i),i.style.left=a.offsetLeft+"px",e(i).on("click",function(e){return $(i,r(e.clientX)),ie.clickEvent.call(i,[e])}),e(i).on("keydown",function(e){e.shiftKey||!1===c.insertMode||setTimeout(function(){Y(i)},0)})}function Y(e,t,r){function o(){f||null!==s.fn&&l.input!==i?f&&(null!==s.fn&&l.input!==i||""===s.def)&&(f=!1,d+="</span>"):(f=!0,d+="<span class='im-static'>")}function a(i){!0!==i&&p!==t.begin||n.activeElement!==e||(d+="<span class='im-caret' style='border-right-width: 1px;border-right-style: solid;'></span>")}var s,l,u,d="",f=!1,p=0;if(X!==i){var h=E();if(t===i?t=$(e):t.begin===i&&(t={begin:t,end:t}),!0!==r){var m=v();do{a(),g().validPositions[p]?(l=g().validPositions[p],s=l.match,u=l.locator.slice(),o(),d+=h[p]):(l=x(p,u,p-1),s=l.match,u=l.locator.slice(),(!1===c.jitMasking||p<m||"number"==typeof c.jitMasking&&isFinite(c.jitMasking)&&c.jitMasking>p)&&(o(),d+=j(p,s))),p++}while((G===i||p<G)&&(null!==s.fn||""!==s.def)||m>p||f);-1===d.indexOf("im-caret")&&a(!0),f&&o()}var y=X.getElementsByTagName("div")[0];y.innerHTML=d,e.inputmask.positionColorMask(e,y)}}s=s||this.maskset,c=c||this.opts;var z,U,G,X,V=this,K=this.el,Z=this.isRTL,Q=!1,J=!1,ee=!1,te=!1,ne={on:function(t,n,o){var a=function(t){if(this.inputmask===i&&"FORM"!==this.nodeName){var n=e.data(this,"_inputmask_opts");n?new r(n).mask(this):ne.off(this)}else{if("setvalue"===t.type||"FORM"===this.nodeName||!(this.disabled||this.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||!1===c.tabThrough&&t.keyCode===r.keyCode.TAB))){switch(t.type){case"input":if(!0===J)return J=!1,t.preventDefault();break;case"keydown":Q=!1,J=!1;break;case"keypress":if(!0===Q)return t.preventDefault();Q=!0;break;case"click":if(d||f){var a=this,s=arguments;return setTimeout(function(){o.apply(a,s)},0),!1}}var l=o.apply(this,arguments);return!1===l&&(t.preventDefault(),t.stopPropagation()),l}t.preventDefault()}};t.inputmask.events[n]=t.inputmask.events[n]||[],t.inputmask.events[n].push(a),-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).on(n,a):e(t).on(n,a)},off:function(t,n){if(t.inputmask&&t.inputmask.events){var i;n?(i=[])[n]=t.inputmask.events[n]:i=t.inputmask.events,e.each(i,function(n,i){for(;i.length>0;){var r=i.pop();-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).off(n,r):e(t).off(n,r)}delete t.inputmask.events[n]})}}},ie={keydownEvent:function(t){var i=this,o=e(i),a=t.keyCode,s=$(i);if(a===r.keyCode.BACKSPACE||a===r.keyCode.DELETE||f&&a===r.keyCode.BACKSPACE_SAFARI||t.ctrlKey&&a===r.keyCode.X&&!function(e){var t=n.createElement("input"),i="oncut"in t;return i||(t.setAttribute("oncut","return;"),i="function"==typeof t.oncut),t=null,i}())t.preventDefault(),q(i,a,s),I(i,E(!0),g().p,t,i.inputmask._valueGet()!==E().join("")),i.inputmask._valueGet()===S().join("")?o.trigger("cleared"):!0===B(E())&&o.trigger("complete");else if(a===r.keyCode.END||a===r.keyCode.PAGE_DOWN){t.preventDefault();var l=O(v());c.insertMode||l!==g().maskLength||t.shiftKey||l--,$(i,t.shiftKey?s.begin:l,l,!0)}else a===r.keyCode.HOME&&!t.shiftKey||a===r.keyCode.PAGE_UP?(t.preventDefault(),$(i,0,t.shiftKey?s.begin:0,!0)):(c.undoOnEscape&&a===r.keyCode.ESCAPE||90===a&&t.ctrlKey)&&!0!==t.altKey?(F(i,!0,!1,z.split("")),o.trigger("click")):a!==r.keyCode.INSERT||t.shiftKey||t.ctrlKey?!0===c.tabThrough&&a===r.keyCode.TAB?(!0===t.shiftKey?(null===w(s.begin).match.fn&&(s.begin=O(s.begin)),s.end=L(s.begin,!0),s.begin=L(s.end,!0)):(s.begin=O(s.begin,!0),s.end=O(s.begin,!0),s.end<g().maskLength&&s.end--),s.begin<g().maskLength&&(t.preventDefault(),$(i,s.begin,s.end))):t.shiftKey||!1===c.insertMode&&(a===r.keyCode.RIGHT?setTimeout(function(){var e=$(i);$(i,e.begin)},0):a===r.keyCode.LEFT&&setTimeout(function(){var e=$(i);$(i,Z?e.begin+1:e.begin-1)},0)):(c.insertMode=!c.insertMode,$(i,c.insertMode||s.begin!==g().maskLength?s.begin:s.begin-1));c.onKeyDown.call(this,t,E(),$(i).begin,c),ee=-1!==e.inArray(a,c.ignorables)},keypressEvent:function(t,n,o,a,s){var l=this,u=e(l),d=t.which||t.charCode||t.keyCode;if(!(!0===n||t.ctrlKey&&t.altKey)&&(t.ctrlKey||t.metaKey||ee))return d===r.keyCode.ENTER&&z!==E().join("")&&(z=E().join(""),setTimeout(function(){u.trigger("change")},0)),!0;if(d){46===d&&!1===t.shiftKey&&""!==c.radixPoint&&(d=c.radixPoint.charCodeAt(0));var f,p=n?{begin:s,end:s}:$(l),h=String.fromCharCode(d);g().writeOutBuffer=!0;var v=M(p,h,a);if(!1!==v&&(m(!0),f=v.caret!==i?v.caret:n?v.pos+1:O(v.pos),g().p=f),!1!==o&&(setTimeout(function(){c.onKeyValidation.call(l,d,v,c)},0),g().writeOutBuffer&&!1!==v)){var y=E();I(l,y,c.numericInput&&v.caret===i?L(f):f,t,!0!==n),!0!==n&&setTimeout(function(){!0===B(y)&&u.trigger("complete")},0)}if(t.preventDefault(),n)return!1!==v&&(v.forwardPosition=f),v}},pasteEvent:function(n){var i,r=this,o=n.originalEvent||n,a=e(r),s=r.inputmask._valueGet(!0),l=$(r);Z&&(i=l.end,l.end=l.begin,l.begin=i);var u=s.substr(0,l.begin),d=s.substr(l.end,s.length);if(u===(Z?S().reverse():S()).slice(0,l.begin).join("")&&(u=""),d===(Z?S().reverse():S()).slice(l.end).join("")&&(d=""),Z&&(i=u,u=d,d=i),t.clipboardData&&t.clipboardData.getData)s=u+t.clipboardData.getData("Text")+d;else{if(!o.clipboardData||!o.clipboardData.getData)return!0;s=u+o.clipboardData.getData("text/plain")+d}var f=s;if(e.isFunction(c.onBeforePaste)){if(!1===(f=c.onBeforePaste.call(V,s,c)))return n.preventDefault();f||(f=s)}return F(r,!1,!1,Z?f.split("").reverse():f.toString().split("")),I(r,E(),O(v()),n,z!==E().join("")),!0===B(E())&&a.trigger("complete"),n.preventDefault()},inputFallBackEvent:function(t){var n=this,i=n.inputmask._valueGet();if(E().join("")!==i){var o=$(n);if(!1===function(t,n,i){if("."===n.charAt(i.begin-1)&&""!==c.radixPoint&&((n=n.split(""))[i.begin-1]=c.radixPoint.charAt(0),n=n.join("")),n.charAt(i.begin-1)===c.radixPoint&&n.length>E().length){var r=new e.Event("keypress");return r.which=c.radixPoint.charCodeAt(0),ie.keypressEvent.call(t,r,!0,!0,!1,i.begin-1),!1}}(n,i,o))return!1;if(i=i.replace(new RegExp("("+r.escapeRegex(S().join(""))+")*"),""),!1===function(t,n,i){if(d){var r=n.replace(E().join(""),"");if(1===r.length){var o=new e.Event("keypress");return o.which=r.charCodeAt(0),ie.keypressEvent.call(t,o,!0,!0,!1,g().validPositions[i.begin-1]?i.begin:i.begin-1),!1}}}(n,i,o))return!1;o.begin>i.length&&($(n,i.length),o=$(n));var a=E().join(""),s=i.substr(0,o.begin),l=i.substr(o.begin),u=a.substr(0,o.begin),f=a.substr(o.begin),p=o,h="",m=!1;if(s!==u){p.begin=0;for(var v=(m=s.length>=u.length)?s.length:u.length,y=0;s.charAt(y)===u.charAt(y)&&y<v;y++)p.begin++;m&&(h+=s.slice(p.begin,p.end))}l!==f&&(l.length>f.length?m&&(p.end=p.begin):l.length<f.length?p.end+=f.length-l.length:l.charAt(0)!==f.charAt(0)&&p.end++),I(n,E(),p),h.length>0?e.each(h.split(""),function(t,i){var r=new e.Event("keypress");r.which=i.charCodeAt(0),ee=!1,ie.keypressEvent.call(n,r)}):(p.begin===p.end-1&&$(n,L(p.begin+1),p.end),t.keyCode=r.keyCode.DELETE,ie.keydownEvent.call(n,t)),t.preventDefault()}},setValueEvent:function(t){this.inputmask.refreshValue=!1;var n=this,i=n.inputmask._valueGet(!0);e.isFunction(c.onBeforeMask)&&(i=c.onBeforeMask.call(V,i,c)||i),i=i.split(""),F(n,!0,!1,Z?i.reverse():i),z=E().join(""),(c.clearMaskOnLostFocus||c.clearIncomplete)&&n.inputmask._valueGet()===S().join("")&&n.inputmask._valueSet("")},focusEvent:function(e){var t=this,n=t.inputmask._valueGet();c.showMaskOnFocus&&(!c.showMaskOnHover||c.showMaskOnHover&&""===n)&&(t.inputmask._valueGet()!==E().join("")?I(t,E(),O(v())):!1===te&&$(t,O(v()))),!0===c.positionCaretOnTab&&!1===te&&""!==n&&(I(t,E(),$(t)),ie.clickEvent.apply(t,[e,!0])),z=E().join("")},mouseleaveEvent:function(e){var t=this;if(te=!1,c.clearMaskOnLostFocus&&n.activeElement!==t){var i=E().slice(),r=t.inputmask._valueGet();r!==t.getAttribute("placeholder")&&""!==r&&(-1===v()&&r===S().join("")?i=[]:H(i),I(t,i))}},clickEvent:function(t,r){function o(t){if(""!==c.radixPoint){var n=g().validPositions;if(n[t]===i||n[t].input===j(t)){if(t<O(-1))return!0;var r=e.inArray(c.radixPoint,E());if(-1!==r){for(var o in n)if(r<o&&n[o].input!==j(o))return!1;return!0}}}return!1}var a=this;setTimeout(function(){if(n.activeElement===a){var e=$(a);if(r&&(Z?e.end=e.begin:e.begin=e.end),e.begin===e.end)switch(c.positionCaretOnClick){case"none":break;case"radixFocus":if(o(e.begin)){var t=E().join("").indexOf(c.radixPoint);$(a,c.numericInput?O(t):t);break}default:var s=e.begin,l=v(s,!0),u=O(l);if(s<u)$(a,A(s,!0)||A(s-1,!0)?s:O(s));else{var d=g().validPositions[l],f=x(u,d?d.match.locator:i,d),p=j(u,f.match);if(""!==p&&E()[u]!==p&&!0!==f.match.optionalQuantifier&&!0!==f.match.newBlockMarker||!A(u,!0)&&f.match.def===p){var h=O(u);(s>=h||s===u)&&(u=h)}$(a,u)}}}},0)},dblclickEvent:function(e){var t=this;setTimeout(function(){$(t,0,O(v()))},0)},cutEvent:function(i){var o=this,a=e(o),s=$(o),l=i.originalEvent||i,c=t.clipboardData||l.clipboardData,u=Z?E().slice(s.end,s.begin):E().slice(s.begin,s.end);c.setData("text",Z?u.reverse().join(""):u.join("")),n.execCommand&&n.execCommand("copy"),q(o,r.keyCode.DELETE,s),I(o,E(),g().p,i,z!==E().join("")),o.inputmask._valueGet()===S().join("")&&a.trigger("cleared")},blurEvent:function(t){var n=e(this),r=this;if(r.inputmask){var o=r.inputmask._valueGet(),a=E().slice();""!==o&&(c.clearMaskOnLostFocus&&(-1===v()&&o===S().join("")?a=[]:H(a)),!1===B(a)&&(setTimeout(function(){n.trigger("incomplete")},0),c.clearIncomplete&&(m(),a=c.clearMaskOnLostFocus?[]:S().slice())),I(r,a,i,t)),z!==E().join("")&&(z=a.join(""),n.trigger("change"))}},mouseenterEvent:function(e){var t=this;te=!0,n.activeElement!==t&&c.showMaskOnHover&&t.inputmask._valueGet()!==E().join("")&&I(t,E())},submitEvent:function(e){z!==E().join("")&&U.trigger("change"),c.clearMaskOnLostFocus&&-1===v()&&K.inputmask._valueGet&&K.inputmask._valueGet()===S().join("")&&K.inputmask._valueSet(""),c.removeMaskOnSubmit&&(K.inputmask._valueSet(K.inputmask.unmaskedvalue(),!0),setTimeout(function(){I(K,E())},0))},resetEvent:function(e){K.inputmask.refreshValue=!0,setTimeout(function(){U.trigger("setvalue")},0)}};r.prototype.positionColorMask=function(e,t){e.style.left=t.offsetLeft+"px"};var re;if(o!==i)switch(o.action){case"isComplete":return K=o.el,B(E());case"unmaskedvalue":return K!==i&&o.value===i||(re=o.value,re=(e.isFunction(c.onBeforeMask)?c.onBeforeMask.call(V,re,c)||re:re).split(""),F(i,!1,!1,Z?re.reverse():re),e.isFunction(c.onBeforeWrite)&&c.onBeforeWrite.call(V,i,E(),0,c)),R(K);case"mask":!function(t){ne.off(t);var r=function(t,r){var o=t.getAttribute("type"),s="INPUT"===t.tagName&&-1!==e.inArray(o,r.supportsInputType)||t.isContentEditable||"TEXTAREA"===t.tagName;if(!s)if("INPUT"===t.tagName){var l=n.createElement("input");l.setAttribute("type",o),s="text"===l.type,l=null}else s="partial";return!1!==s?function(t){function o(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==v()||!0!==r.nullable?n.activeElement===this&&r.clearMaskOnLostFocus?(Z?H(E().slice()).reverse():H(E().slice())).join(""):l.call(this):"":l.call(this)}function s(t){c.call(this,t),this.inputmask&&e(this).trigger("setvalue")}var l,c;if(!t.inputmask.__valueGet){if(!0!==r.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"===a("test".__proto__)?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var u=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):i;u&&u.get&&u.set?(l=u.get,c=u.set,Object.defineProperty(t,"value",{get:o,set:s,configurable:!0})):"INPUT"!==t.tagName&&(l=function(){return this.textContent},c=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:o,set:s,configurable:!0}))}else n.__lookupGetter__&&t.__lookupGetter__("value")&&(l=t.__lookupGetter__("value"),c=t.__lookupSetter__("value"),t.__defineGetter__("value",o),t.__defineSetter__("value",s));t.inputmask.__valueGet=l,t.inputmask.__valueSet=c}t.inputmask._valueGet=function(e){return Z&&!0!==e?l.call(this.el).split("").reverse().join(""):l.call(this.el)},t.inputmask._valueSet=function(e,t){c.call(this.el,null===e||e===i?"":!0!==t&&Z?e.split("").reverse().join(""):e)},l===i&&(l=function(){return this.value},c=function(e){this.value=e},function(t){if(e.valHooks&&(e.valHooks[t]===i||!0!==e.valHooks[t].inputmaskpatch)){var n=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},o=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=n(e);return-1!==v(i,i,e.inputmask.maskset.validPositions)||!0!==r.nullable?t:""}return n(e)},set:function(t,n){var i,r=e(t);return i=o(t,n),t.inputmask&&r.trigger("setvalue"),i},inputmaskpatch:!0}}}(t.type),function(t){ne.on(t,"mouseenter",function(t){var n=e(this);this.inputmask._valueGet()!==E().join("")&&n.trigger("setvalue")})}(t))}}(t):t.inputmask=i,s}(t,c);if(!1!==r&&(K=t,U=e(K),-1===(G=K!==i?K.maxLength:i)&&(G=i),!0===c.colorMask&&W(K),p&&(K.hasOwnProperty("inputmode")&&(K.inputmode=c.inputmode,K.setAttribute("inputmode",c.inputmode)),"rtfm"===c.androidHack&&(!0!==c.colorMask&&W(K),K.type="password")),!0===r&&(ne.on(K,"submit",ie.submitEvent),ne.on(K,"reset",ie.resetEvent),ne.on(K,"mouseenter",ie.mouseenterEvent),ne.on(K,"blur",ie.blurEvent),ne.on(K,"focus",ie.focusEvent),ne.on(K,"mouseleave",ie.mouseleaveEvent),!0!==c.colorMask&&ne.on(K,"click",ie.clickEvent),ne.on(K,"dblclick",ie.dblclickEvent),ne.on(K,"paste",ie.pasteEvent),ne.on(K,"dragdrop",ie.pasteEvent),ne.on(K,"drop",ie.pasteEvent),ne.on(K,"cut",ie.cutEvent),ne.on(K,"complete",c.oncomplete),ne.on(K,"incomplete",c.onincomplete),ne.on(K,"cleared",c.oncleared),p||!0===c.inputEventOnly?K.removeAttribute("maxLength"):(ne.on(K,"keydown",ie.keydownEvent),ne.on(K,"keypress",ie.keypressEvent)),ne.on(K,"compositionstart",e.noop),ne.on(K,"compositionupdate",e.noop),ne.on(K,"compositionend",e.noop),ne.on(K,"keyup",e.noop),ne.on(K,"input",ie.inputFallBackEvent),ne.on(K,"beforeinput",e.noop)),ne.on(K,"setvalue",ie.setValueEvent),z=S().join(""),""!==K.inputmask._valueGet(!0)||!1===c.clearMaskOnLostFocus||n.activeElement===K)){var o=e.isFunction(c.onBeforeMask)?c.onBeforeMask.call(V,K.inputmask._valueGet(!0),c)||K.inputmask._valueGet(!0):K.inputmask._valueGet(!0);""!==o&&F(K,!0,!1,Z?o.split("").reverse():o.split(""));var s=E().slice();z=s.join(""),!1===B(s)&&c.clearIncomplete&&m(),c.clearMaskOnLostFocus&&n.activeElement!==K&&(-1===v()?s=[]:H(s)),I(K,s),n.activeElement===K&&$(K,O(v()))}}(K);break;case"format":return re=(e.isFunction(c.onBeforeMask)?c.onBeforeMask.call(V,o.value,c)||o.value:o.value).split(""),F(i,!0,!1,Z?re.reverse():re),o.metadata?{value:Z?E().slice().reverse().join(""):E().join(""),metadata:l.call(this,{action:"getmetadata"},s,c)}:Z?E().slice().reverse().join(""):E().join("");case"isValid":o.value?(re=o.value.split(""),F(i,!0,!0,Z?re.reverse():re)):o.value=E().join("");for(var oe=E(),ae=_(),se=oe.length-1;se>ae&&!A(se);se--);return oe.splice(ae,se+1-ae),B(oe)&&o.value===E().join("");case"getemptymask":return S().join("");case"remove":return K&&K.inputmask&&(U=e(K),K.inputmask._valueSet(c.autoUnmask?R(K):K.inputmask._valueGet(!0)),ne.off(K),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(K),"value")&&K.inputmask.__valueGet&&Object.defineProperty(K,"value",{get:K.inputmask.__valueGet,set:K.inputmask.__valueSet,configurable:!0}):n.__lookupGetter__&&K.__lookupGetter__("value")&&K.inputmask.__valueGet&&(K.__defineGetter__("value",K.inputmask.__valueGet),K.__defineSetter__("value",K.inputmask.__valueSet)),K.inputmask=i),K;case"getmetadata":if(e.isArray(s.metadata)){var le=h(!0,0,!1).join("");return e.each(s.metadata,function(e,t){if(t.mask===le)return le=t,!1}),le}return s.metadata}}var c=navigator.userAgent,u=/mobile/i.test(c),d=/iemobile/i.test(c),f=/iphone/i.test(c)&&!d,p=/android/i.test(c)&&!d;return r.prototype={dataAttribute:"data-inputmask",defaults:{placeholder:"_",optionalmarker:{start:"[",end:"]"},quantifiermarker:{start:"{",end:"}"},groupmarker:{start:"(",end:")"},alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!0,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,n){return e.isFunction(n.onBeforeMask)?n.onBeforeMask.call(this,t,n):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:e.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",radixPointDefinitionSymbol:i,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","password"],ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,canClearPosition:e.noop,preValidation:null,postValidation:null,staticDefinitionSymbol:i,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"verbatim",colorMask:!1,androidHack:!1,importDataAttributes:!0},definitions:{9:{validator:"[0-9１-９]",cardinality:1,definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,definitionSymbol:"*"},"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]",cardinality:1}},aliases:{},masksCache:{},mask:function(a){function c(n,r,a,s){if(!0===r.importDataAttributes){var l,c,u,d,f=function(e,r){null!==(r=r!==i?r:n.getAttribute(s+"-"+e))&&("string"==typeof r&&(0===e.indexOf("on")?r=t[r]:"false"===r?r=!1:"true"===r&&(r=!0)),a[e]=r)},p=n.getAttribute(s);if(p&&""!==p&&(p=p.replace(new RegExp("'","g"),'"'),c=JSON.parse("{"+p+"}")),c){u=i;for(d in c)if("alias"===d.toLowerCase()){u=c[d];break}}f("alias",u),a.alias&&o(a.alias,a,r);for(l in r){if(c){u=i;for(d in c)if(d.toLowerCase()===l.toLowerCase()){u=c[d];break}}f(l,u)}}return e.extend(!0,r,a),("rtl"===n.dir||r.rightAlign)&&(n.style.textAlign="right"),("rtl"===n.dir||r.numericInput)&&(n.dir="ltr",n.removeAttribute("dir"),r.isRTL=!0),r}var u=this;return"string"==typeof a&&(a=n.getElementById(a)||n.querySelectorAll(a)),a=a.nodeName?[a]:a,e.each(a,function(t,n){var o=e.extend(!0,{},u.opts);c(n,o,e.extend(!0,{},u.userOptions),u.dataAttribute);var a=s(o,u.noMasksCache);a!==i&&(n.inputmask!==i&&(n.inputmask.opts.autoUnmask=!0,n.inputmask.remove()),n.inputmask=new r(i,i,!0),n.inputmask.opts=o,n.inputmask.noMasksCache=u.noMasksCache,n.inputmask.userOptions=e.extend(!0,{},u.userOptions),n.inputmask.isRTL=o.isRTL||o.numericInput,n.inputmask.el=n,n.inputmask.maskset=a,e.data(n,"_inputmask_opts",o),l.call(n.inputmask,{action:"mask"}))}),a&&a[0]?a[0].inputmask||this:this},option:function(t,n){return"string"==typeof t?this.opts[t]:"object"===(void 0===t?"undefined":a(t))?(e.extend(this.userOptions,t),this.el&&!0!==n&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return l.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"format",value:e,metadata:t})},analyseMask:function(t,n,o){function a(e,t,n,i){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=i||!1,this.quantifier={min:1,max:1}}function s(t,a,s){s=s!==i?s:t.matches.length;var l=t.matches[s-1];if(n)0===a.indexOf("[")||x&&/\\d|\\s|\\w]/i.test(a)||"."===a?t.matches.splice(s++,0,{fn:new RegExp(a,o.casing?"i":""),cardinality:1,optionality:t.isOptional,newBlockMarker:l===i||l.def!==a,casing:null,def:a,placeholder:i,nativeDef:a}):(x&&(a=a[a.length-1]),e.each(a.split(""),function(e,n){l=t.matches[s-1],t.matches.splice(s++,0,{fn:null,cardinality:0,optionality:t.isOptional,newBlockMarker:l===i||l.def!==n&&null!==l.fn,casing:null,def:o.staticDefinitionSymbol||n,placeholder:o.staticDefinitionSymbol!==i?n:i,nativeDef:n})})),x=!1;else{var c=(o.definitions?o.definitions[a]:i)||r.prototype.definitions[a];if(c&&!x){for(var u=c.prevalidator,d=u?u.length:0,f=1;f<c.cardinality;f++){var p=d>=f?u[f-1]:[],h=p.validator,g=p.cardinality;t.matches.splice(s++,0,{fn:h?"string"==typeof h?new RegExp(h,o.casing?"i":""):new function(){this.test=h}:new RegExp("."),cardinality:g||1,optionality:t.isOptional,newBlockMarker:l===i||l.def!==(c.definitionSymbol||a),casing:c.casing,def:c.definitionSymbol||a,placeholder:c.placeholder,nativeDef:a}),l=t.matches[s-1]}t.matches.splice(s++,0,{fn:c.validator?"string"==typeof c.validator?new RegExp(c.validator,o.casing?"i":""):new function(){this.test=c.validator}:new RegExp("."),cardinality:c.cardinality,optionality:t.isOptional,newBlockMarker:l===i||l.def!==(c.definitionSymbol||a),casing:c.casing,def:c.definitionSymbol||a,placeholder:c.placeholder,nativeDef:a})}else t.matches.splice(s++,0,{fn:null,cardinality:0,optionality:t.isOptional,newBlockMarker:l===i||l.def!==a&&null!==l.fn,casing:null,def:o.staticDefinitionSymbol||a,placeholder:o.staticDefinitionSymbol!==i?a:i,nativeDef:a}),x=!1}}function l(t){t&&t.matches&&e.each(t.matches,function(e,r){var a=t.matches[e+1];(a===i||a.matches===i||!1===a.isQuantifier)&&r&&r.isGroup&&(r.isGroup=!1,n||(s(r,o.groupmarker.start,0),!0!==r.openGroup&&s(r,o.groupmarker.end))),l(r)})}function c(){if(k.length>0){if(h=k[k.length-1],s(h,f),h.isAlternator){g=k.pop();for(var e=0;e<g.matches.length;e++)g.matches[e].isGroup=!1;k.length>0?(h=k[k.length-1]).matches.push(g):w.matches.push(g)}}else s(w,f)}function u(e){e.matches=e.matches.reverse();for(var t in e.matches)if(e.matches.hasOwnProperty(t)){var n=parseInt(t);if(e.matches[t].isQuantifier&&e.matches[n+1]&&e.matches[n+1].isGroup){var r=e.matches[t];e.matches.splice(t,1),e.matches.splice(n+1,0,r)}e.matches[t].matches!==i?e.matches[t]=u(e.matches[t]):e.matches[t]=function(e){return e===o.optionalmarker.start?e=o.optionalmarker.end:e===o.optionalmarker.end?e=o.optionalmarker.start:e===o.groupmarker.start?e=o.groupmarker.end:e===o.groupmarker.end&&(e=o.groupmarker.start),e}(e.matches[t])}return e}var d,f,p,h,g,m,v,y=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,b=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,x=!1,w=new a,k=[],C=[];for(n&&(o.optionalmarker.start=i,o.optionalmarker.end=i);d=n?b.exec(t):y.exec(t);){if(f=d[0],n)switch(f.charAt(0)){case"?":f="{0,1}";break;case"+":case"*":f="{"+f+"}"}if(x)c();else switch(f.charAt(0)){case o.escapeChar:x=!0,n&&c();break;case o.optionalmarker.end:case o.groupmarker.end:if(p=k.pop(),p.openGroup=!1,p!==i)if(k.length>0){if((h=k[k.length-1]).matches.push(p),h.isAlternator){g=k.pop();for(var S=0;S<g.matches.length;S++)g.matches[S].isGroup=!1,g.matches[S].alternatorGroup=!1;k.length>0?(h=k[k.length-1]).matches.push(g):w.matches.push(g)}}else w.matches.push(p);else c();break;case o.optionalmarker.start:k.push(new a(!1,!0));break;case o.groupmarker.start:k.push(new a(!0));break;case o.quantifiermarker.start:var E=new a(!1,!1,!0),T=(f=f.replace(/[{}]/g,"")).split(","),D=isNaN(T[0])?T[0]:parseInt(T[0]),P=1===T.length?D:isNaN(T[1])?T[1]:parseInt(T[1]);if("*"!==P&&"+"!==P||(D="*"===P?0:1),E.quantifier={min:D,max:P},k.length>0){var M=k[k.length-1].matches;(d=M.pop()).isGroup||((v=new a(!0)).matches.push(d),d=v),M.push(d),M.push(E)}else(d=w.matches.pop()).isGroup||(n&&null===d.fn&&"."===d.def&&(d.fn=new RegExp(d.def,o.casing?"i":"")),(v=new a(!0)).matches.push(d),d=v),w.matches.push(d),w.matches.push(E);break;case o.alternatormarker:if(k.length>0){var A=(h=k[k.length-1]).matches[h.matches.length-1];m=h.openGroup&&(A.matches===i||!1===A.isGroup&&!1===A.isAlternator)?k.pop():h.matches.pop()}else m=w.matches.pop();if(m.isAlternator)k.push(m);else if(m.alternatorGroup?(g=k.pop(),m.alternatorGroup=!1):g=new a(!1,!1,!1,!0),g.matches.push(m),k.push(g),m.openGroup){m.openGroup=!1;var O=new a(!0);O.alternatorGroup=!0,k.push(O)}break;default:c()}}for(;k.length>0;)p=k.pop(),w.matches.push(p);return w.matches.length>0&&(l(w),C.push(w)),(o.numericInput||o.isRTL)&&u(C[0]),C}},r.extendDefaults=function(t){e.extend(!0,r.prototype.defaults,t)},r.extendDefinitions=function(t){e.extend(!0,r.prototype.definitions,t)},r.extendAliases=function(t){e.extend(!0,r.prototype.aliases,t)},r.format=function(e,t,n){return r(t).format(e,n)},r.unmask=function(e,t){return r(t).unmaskedvalue(e)},r.isValid=function(e,t){return r(t).isValid(e)},r.remove=function(t){e.each(t,function(e,t){t.inputmask&&t.inputmask.remove()})},r.escapeRegex=function(e){var t=["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"];return e.replace(new RegExp("(\\"+t.join("|\\")+")","gim"),"\\$1")},r.keyCode={ALT:18,BACKSPACE:8,BACKSPACE_SAFARI:127,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91,X:88},r})},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}n(4),n(9),n(12),n(13),n(14),n(15);var r=i(n(1)),o=i(n(0)),a=i(n(2));o.default===a.default&&n(16),window.Inputmask=r.default},function(e,t,n){var i=n(5);"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0};r.transform=void 0,n(7)(i,r),i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(6)(void 0)).push([e.i,".im-caret {\r\n\t-webkit-animation: 1s blink step-end infinite;\r\n\tanimation: 1s blink step-end infinite;\r\n}\r\n\r\n@keyframes blink {\r\n\tfrom, to {\r\n\t\tborder-right-color: black;\r\n\t}\r\n\t50% {\r\n\t\tborder-right-color: transparent;\r\n\t}\r\n}\r\n\r\n@-webkit-keyframes blink {\r\n\tfrom, to {\r\n\t\tborder-right-color: black;\r\n\t}\r\n\t50% {\r\n\t\tborder-right-color: transparent;\r\n\t}\r\n}\r\n\r\n.im-static {\r\n\tcolor: grey;\r\n}\r\n",""])},function(e,t){function n(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=i(r);return[n].concat(r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"})).concat([o]).join("\n")}return[n].join("\n")}function i(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var i=n(t,e);return t[2]?"@media "+t[2]+"{"+i+"}":i}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},r=0;r<this.length;r++){var o=this[r][0];"number"==typeof o&&(i[o]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&i[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){function i(e,t){for(var n=0;n<e.length;n++){var i=e[n],r=h[i.id];if(r){for(r.refs++,a=0;a<r.parts.length;a++)r.parts[a](i.parts[a]);for(;a<i.parts.length;a++)r.parts.push(u(i.parts[a],t))}else{for(var o=[],a=0;a<i.parts.length;a++)o.push(u(i.parts[a],t));h[i.id]={id:i.id,refs:1,parts:o}}}}function r(e,t){for(var n=[],i={},r=0;r<e.length;r++){var o=e[r],a=t.base?o[0]+t.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};i[a]?i[a].parts.push(s):n.push(i[a]={id:a,parts:[s]})}return n}function o(e,t){var n=m(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=b[b.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),b.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=m(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=b.indexOf(e);t>=0&&b.splice(t,1)}function s(e){var t=document.createElement("style");return e.attrs.type="text/css",c(t,e.attrs),o(e,t),t}function l(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",c(t,e.attrs),o(e,t),t}function c(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function u(e,t){var n,i,r,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var c=y++;n=v||(v=s(t)),i=d.bind(null,n,c,!1),r=d.bind(null,n,c,!0)
}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=l(t),i=p.bind(null,n,t),r=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(t),i=f.bind(null,n),r=function(){a(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}function d(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=w(t,r);else{var o=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t){var n=t.css,i=t.media;if(i&&e.setAttribute("media",i),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function p(e,t,n){var i=n.css,r=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||o)&&(i=x(i)),r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([i],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var h={},g=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),m=function(e){var t={};return function(n){if(void 0===t[n]){var i=e.call(this,n);if(i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}t[n]=i}return t[n]}}(function(e){return document.querySelector(e)}),v=null,y=0,b=[],x=n(8);e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=g()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=r(e,t);return i(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var s=n[a];(l=h[s.id]).refs--,o.push(l)}for(e&&i(r(e,t),t),a=0;a<o.length;a++){var l=o[a];if(0===l.refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete h[l.id]}}}};var w=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(r))return e;var o;return o=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(o)+")"})}},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,function(a){r=[n(0),n(1)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t){function n(e){return isNaN(e)||29===new Date(e,2,0).getDate()}return t.extendAliases({"dd/mm/yyyy":{mask:"1/2/y",placeholder:"dd/mm/yyyy",regex:{val1pre:new RegExp("[0-3]"),val1:new RegExp("0[1-9]|[12][0-9]|3[01]"),val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9]|3[01])"+n+"[01])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9])"+n+"(0[1-9]|1[012]))|(30"+n+"(0[13-9]|1[012]))|(31"+n+"(0[13578]|1[02]))")}},leapday:"29/02/",separator:"/",yearrange:{minyear:1900,maxyear:2099},isInYearRange:function(e,t,n){if(isNaN(e))return!1;var i=parseInt(e.concat(t.toString().slice(e.length))),r=parseInt(e.concat(n.toString().slice(e.length)));return!isNaN(i)&&t<=i&&i<=n||!isNaN(r)&&t<=r&&r<=n},determinebaseyear:function(e,t,n){var i=(new Date).getFullYear();if(e>i)return e;if(t<i){for(var r=t.toString().slice(0,2),o=t.toString().slice(2,4);t<r+n;)r--;var a=r+o;return e>a?e:a}if(e<=i&&i<=t){for(var s=i.toString().slice(0,2);t<s+n;)s--;var l=s+n;return l<e?e:l}return i},onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val(s.getDate().toString()+(s.getMonth()+1).toString()+s.getFullYear().toString()),a.trigger("setvalue")}},getFrontValue:function(e,t,n){for(var i=0,r=0,o=0;o<e.length&&"2"!==e.charAt(o);o++){var a=n.definitions[e.charAt(o)];a?(i+=r,r=a.cardinality):r++}return t.join("").substr(i,r)},postValidation:function(e,t,i){var r,o,a=e.join("");return 0===i.mask.indexOf("y")?(o=a.substr(0,4),r=a.substring(4,10)):(o=a.substring(6,10),r=a.substr(0,6)),t&&(r!==i.leapday||n(o))},definitions:{1:{validator:function(e,t,n,i,r){var o=r.regex.val1.test(e);return i||o||e.charAt(1)!==r.separator&&-1==="-./".indexOf(e.charAt(1))||!(o=r.regex.val1.test("0"+e.charAt(0)))?o:(t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)})},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=e;isNaN(t.buffer[n+1])||(o+=t.buffer[n+1]);var a=1===o.length?r.regex.val1pre.test(o):r.regex.val1.test(o);if(a&&t.validPositions[n]&&(r.regex.val2(r.separator).test(e+t.validPositions[n].input)||(t.validPositions[n].input="0"===e?"1":"0")),!i&&!a){if(a=r.regex.val1.test(e+"0"))return t.buffer[n]=e,t.buffer[++n]="0",{pos:n,c:"0"};if(a=r.regex.val1.test("0"+e))return t.buffer[n]="0",n++,{pos:n}}return a},cardinality:1}]},2:{validator:function(e,t,n,i,r){var o=r.getFrontValue(t.mask,t.buffer,r);-1!==o.indexOf(r.placeholder[0])&&(o="01"+r.separator);var a=r.regex.val2(r.separator).test(o+e);return i||a||e.charAt(1)!==r.separator&&-1==="-./".indexOf(e.charAt(1))||!(a=r.regex.val2(r.separator).test(o+"0"+e.charAt(0)))?a:(t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)})},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){isNaN(t.buffer[n+1])||(e+=t.buffer[n+1]);var o=r.getFrontValue(t.mask,t.buffer,r);-1!==o.indexOf(r.placeholder[0])&&(o="01"+r.separator);var a=1===e.length?r.regex.val2pre(r.separator).test(o+e):r.regex.val2(r.separator).test(o+e);return a&&t.validPositions[n]&&(r.regex.val2(r.separator).test(e+t.validPositions[n].input)||(t.validPositions[n].input="0"===e?"1":"0")),i||a||!(a=r.regex.val2(r.separator).test(o+"0"+e))?a:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},y:{validator:function(e,t,n,i,r){return r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear)},cardinality:4,prevalidator:[{validator:function(e,t,n,i,r){var o=r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear);if(!i&&!o){var a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e+"0").toString().slice(0,1);if(o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(0),{pos:n};if(a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e+"0").toString().slice(0,2),o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(0),t.buffer[n++]=a.charAt(1),{pos:n}}return o},cardinality:1},{validator:function(e,t,n,i,r){var o=r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear);if(!i&&!o){var a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e).toString().slice(0,2);if(o=r.isInYearRange(e[0]+a[1]+e[1],r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(1),{pos:n};if(a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e).toString().slice(0,2),o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n-1]=a.charAt(0),t.buffer[n++]=a.charAt(1),t.buffer[n++]=e.charAt(0),{refreshFromBuffer:{start:n-3,end:n},pos:n}}return o},cardinality:2},{validator:function(e,t,n,i,r){return r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear)},cardinality:3}]}},insertMode:!1,autoUnmask:!1},"mm/dd/yyyy":{placeholder:"mm/dd/yyyy",alias:"dd/mm/yyyy",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val((s.getMonth()+1).toString()+s.getDate().toString()+s.getFullYear().toString()),a.trigger("setvalue")}}},"yyyy/mm/dd":{mask:"y/1/2",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",leapday:"/02/29",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val(s.getFullYear().toString()+(s.getMonth()+1).toString()+s.getDate().toString()),a.trigger("setvalue")}}},"dd.mm.yyyy":{mask:"1.2.y",placeholder:"dd.mm.yyyy",leapday:"29.02.",separator:".",alias:"dd/mm/yyyy"},"dd-mm-yyyy":{mask:"1-2-y",placeholder:"dd-mm-yyyy",leapday:"29-02-",separator:"-",alias:"dd/mm/yyyy"},"mm.dd.yyyy":{mask:"1.2.y",placeholder:"mm.dd.yyyy",leapday:"02.29.",separator:".",alias:"mm/dd/yyyy"},"mm-dd-yyyy":{mask:"1-2-y",placeholder:"mm-dd-yyyy",leapday:"02-29-",separator:"-",alias:"mm/dd/yyyy"},"yyyy.mm.dd":{mask:"y.1.2",placeholder:"yyyy.mm.dd",leapday:".02.29",separator:".",alias:"yyyy/mm/dd"},"yyyy-mm-dd":{mask:"y-1-2",placeholder:"yyyy-mm-dd",leapday:"-02-29",separator:"-",alias:"yyyy/mm/dd"},datetime:{mask:"1/2/y h:s",placeholder:"dd/mm/yyyy hh:mm",alias:"dd/mm/yyyy",regex:{hrspre:new RegExp("[012]"),hrs24:new RegExp("2[0-4]|1[3-9]"),hrs:new RegExp("[01][0-9]|2[0-4]"),ampm:new RegExp("^[a|p|A|P][m|M]"),mspre:new RegExp("[0-5]"),ms:new RegExp("[0-5][0-9]")},timeseparator:":",hourFormat:"24",definitions:{h:{validator:function(e,t,n,i,r){if("24"===r.hourFormat&&24===parseInt(e,10))return t.buffer[n-1]="0",t.buffer[n]="0",{refreshFromBuffer:{start:n-1,end:n},c:"0"};var o=r.regex.hrs.test(e);if(!i&&!o&&(e.charAt(1)===r.timeseparator||-1!=="-.:".indexOf(e.charAt(1)))&&(o=r.regex.hrs.test("0"+e.charAt(0))))return t.buffer[n-1]="0",t.buffer[n]=e.charAt(0),n++,{refreshFromBuffer:{start:n-2,end:n},pos:n,c:r.timeseparator};if(o&&"24"!==r.hourFormat&&r.regex.hrs24.test(e)){var a=parseInt(e,10);return 24===a?(t.buffer[n+5]="a",t.buffer[n+6]="m"):(t.buffer[n+5]="p",t.buffer[n+6]="m"),(a-=12)<10?(t.buffer[n]=a.toString(),t.buffer[n-1]="0"):(t.buffer[n]=a.toString().charAt(1),t.buffer[n-1]=a.toString().charAt(0)),{refreshFromBuffer:{start:n-1,end:n+6},c:t.buffer[n]}}return o},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=r.regex.hrspre.test(e);return i||o||!(o=r.regex.hrs.test("0"+e))?o:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=r.regex.mspre.test(e);return i||o||!(o=r.regex.ms.test("0"+e))?o:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},t:{validator:function(e,t,n,i,r){return r.regex.ampm.test(e+"m")},casing:"lower",cardinality:1}},insertMode:!1,autoUnmask:!1},datetime12:{mask:"1/2/y h:s t\\m",placeholder:"dd/mm/yyyy hh:mm xm",alias:"datetime",hourFormat:"12"},"mm/dd/yyyy hh:mm xm":{mask:"1/2/y h:s t\\m",placeholder:"mm/dd/yyyy hh:mm xm",alias:"datetime12",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val((s.getMonth()+1).toString()+s.getDate().toString()+s.getFullYear().toString()),a.trigger("setvalue")}}},"hh:mm t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"h:s t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"hh:mm:ss":{mask:"h:s:s",placeholder:"hh:mm:ss",alias:"datetime",autoUnmask:!1},"hh:mm":{mask:"h:s",placeholder:"hh:mm",alias:"datetime",autoUnmask:!1},date:{alias:"dd/mm/yyyy"},"mm/yyyy":{mask:"1/y",placeholder:"mm/yyyy",leapday:"donotuse",separator:"/",alias:"mm/dd/yyyy"},shamsi:{regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"[0-3])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[1-9]|1[012])"+n+"30)|((0[1-6])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},yearrange:{minyear:1300,maxyear:1499},mask:"y/1/2",leapday:"/12/30",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",clearIncomplete:!0},"yyyy-mm-dd hh:mm:ss":{mask:"y-1-2 h:s:s",placeholder:"yyyy-mm-dd hh:mm:ss",alias:"datetime",separator:"-",leapday:"-02-29",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},onKeyDown:function(e,t,n,i){}}}),t})},function(e,t,n){"use strict";var i;"function"==typeof Symbol&&Symbol.iterator,void 0!==(i=function(){return window}.call(t,n,t,e))&&(e.exports=i)},function(e,t,n){"use strict";var i;"function"==typeof Symbol&&Symbol.iterator,void 0!==(i=function(){return document}.call(t,n,t,e))&&(e.exports=i)},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,function(a){r=[n(0),n(1)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t){return t.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"#":{validator:"[0-9A-Fa-f]",cardinality:1,casing:"upper"}}),t.extendAliases({url:{definitions:{i:{validator:".",cardinality:1}},mask:"(\\http://)|(\\http\\s://)|(ftp://)|(ftp\\s://)i{+}",insertMode:!1,autoUnmask:!1,inputmode:"url"},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,n,i,r){return n-1>-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,e=n-2>-1&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):e="00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)},cardinality:1}},onUnMask:function(e,t,n){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",cardinality:1,casing:"lower"},"-":{validator:"[0-9A-Za-z-]",cardinality:1,casing:"lower"}},onUnMask:function(e,t,n){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",cardinality:1,casing:"upper"}},clearIncomplete:!0,autoUnmask:!0}}),t})},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,function(a){r=[n(0),n(1)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t,n){function i(e,n){for(var i="",r=0;r<e.length;r++)t.prototype.definitions[e.charAt(r)]||n.definitions[e.charAt(r)]||n.optionalmarker.start===e.charAt(r)||n.optionalmarker.end===e.charAt(r)||n.quantifiermarker.start===e.charAt(r)||n.quantifiermarker.end===e.charAt(r)||n.groupmarker.start===e.charAt(r)||n.groupmarker.end===e.charAt(r)||n.alternatormarker===e.charAt(r)?i+="\\"+e.charAt(r):i+=e.charAt(r);return i}return t.extendAliases({numeric:{mask:function(e){if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=n),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var t=Math.floor(e.integerDigits/e.groupSize),r=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===r?t-1:t),e.integerDigits<1&&(e.integerDigits="*")}e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&!1===e.integerOptional&&(e.positionCaretOnClick="lvp"),e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",!0===e.numericInput&&(e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var o="[+]";if(o+=i(e.prefix,e),!0===e.integerOptional?o+="~{1,"+e.integerDigits+"}":o+="~{"+e.integerDigits+"}",e.digits!==n){e.radixPointDefinitionSymbol=e.decimalProtect?":":e.radixPoint;var a=e.digits.toString().split(",");isFinite(a[0]&&a[1]&&isFinite(a[1]))?o+=e.radixPointDefinitionSymbol+";{"+e.digits+"}":(isNaN(e.digits)||parseInt(e.digits)>0)&&(e.digitsOptional?o+="["+e.radixPointDefinitionSymbol+";{1,"+e.digits+"}]":o+=e.radixPointDefinitionSymbol+";{"+e.digits+"}")}return o+=i(e.suffix,e),o+="[-]",e.greedy=!1,o},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",groupSize:3,groupSeparator:"",autoGroup:!1,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,inputmode:"numeric",preValidation:function(t,i,r,o,a){if("-"===r||r===a.negationSymbol.front)return!0===a.allowMinus&&(a.isNegative=a.isNegative===n||!a.isNegative,""===t.join("")||{caret:i,dopost:!0});if(!1===o&&r===a.radixPoint&&a.digits!==n&&(isNaN(a.digits)||parseInt(a.digits)>0)){var s=e.inArray(a.radixPoint,t);if(-1!==s)return!0===a.numericInput?i===s:{caret:s+1}}return!0},postValidation:function(i,r,o){var a=o.suffix.split(""),s=o.prefix.split("");if(r.pos===n&&r.caret!==n&&!0!==r.dopost)return r;var l=r.caret!==n?r.caret:r.pos,c=i.slice();o.numericInput&&(l=c.length-l-1,c=c.reverse());var u=c[l];if(u===o.groupSeparator&&(u=c[l+=1]),l===c.length-o.suffix.length-1&&u===o.radixPoint)return r;u!==n&&u!==o.radixPoint&&u!==o.negationSymbol.front&&u!==o.negationSymbol.back&&(c[l]="?",o.prefix.length>0&&l>=(!1===o.isNegative?1:0)&&l<o.prefix.length-1+(!1===o.isNegative?1:0)?s[l-(!1===o.isNegative?1:0)]="?":o.suffix.length>0&&l>=c.length-o.suffix.length-(!1===o.isNegative?1:0)&&(a[l-(c.length-o.suffix.length-(!1===o.isNegative?1:0))]="?")),s=s.join(""),a=a.join("");var d=c.join("").replace(s,"");if(d=d.replace(a,""),d=d.replace(new RegExp(t.escapeRegex(o.groupSeparator),"g"),""),d=d.replace(new RegExp("[-"+t.escapeRegex(o.negationSymbol.front)+"]","g"),""),d=d.replace(new RegExp(t.escapeRegex(o.negationSymbol.back)+"$"),""),isNaN(o.placeholder)&&(d=d.replace(new RegExp(t.escapeRegex(o.placeholder),"g"),"")),d.length>1&&1!==d.indexOf(o.radixPoint)&&("0"===u&&(d=d.replace(/^\?/g,"")),d=d.replace(/^0/g,"")),d.charAt(0)===o.radixPoint&&""!==o.radixPoint&&!0!==o.numericInput&&(d="0"+d),""!==d){if(d=d.split(""),(!o.digitsOptional||o.enforceDigitsOnBlur&&"blur"===r.event)&&isFinite(o.digits)){var f=e.inArray(o.radixPoint,d),p=e.inArray(o.radixPoint,c);-1===f&&(d.push(o.radixPoint),f=d.length-1);for(var h=1;h<=o.digits;h++)o.digitsOptional&&(!o.enforceDigitsOnBlur||"blur"!==r.event)||d[f+h]!==n&&d[f+h]!==o.placeholder.charAt(0)?-1!==p&&c[p+h]!==n&&(d[f+h]=d[f+h]||c[p+h]):d[f+h]=r.placeholder||o.placeholder.charAt(0)}if(!0!==o.autoGroup||""===o.groupSeparator||u===o.radixPoint&&r.pos===n&&!r.dopost)d=d.join("");else{var g=d[d.length-1]===o.radixPoint&&r.c===o.radixPoint;d=t(function(e,t){var n="";if(n+="("+t.groupSeparator+"*{"+t.groupSize+"}){*}",""!==t.radixPoint){var i=e.join("").split(t.radixPoint);i[1]&&(n+=t.radixPoint+"*{"+i[1].match(/^\d*\??\d*/)[0].length+"}")}return n}(d,o),{numericInput:!0,jitMasking:!0,definitions:{"*":{validator:"[0-9?]",cardinality:1}}}).format(d.join("")),g&&(d+=o.radixPoint),d.charAt(0)===o.groupSeparator&&d.substr(1)}}if(o.isNegative&&"blur"===r.event&&(o.isNegative="0"!==d),d=s+d,d+=a,o.isNegative&&(d=o.negationSymbol.front+d,d+=o.negationSymbol.back),d=d.split(""),u!==n)if(u!==o.radixPoint&&u!==o.negationSymbol.front&&u!==o.negationSymbol.back)(l=e.inArray("?",d))>-1?d[l]=u:l=r.caret||0;else if(u===o.radixPoint||u===o.negationSymbol.front||u===o.negationSymbol.back){var m=e.inArray(u,d);-1!==m&&(l=m)}o.numericInput&&(l=d.length-l-1,d=d.reverse());var v={caret:u===n||r.pos!==n?l+(o.numericInput?-1:1):l,buffer:d,refreshFromBuffer:r.dopost||i.join("")!==d.join("")};return v.refreshFromBuffer?v:r},onBeforeWrite:function(i,r,o,a){if(i)switch(i.type){case"keydown":return a.postValidation(r,{caret:o,dopost:!0},a);case"blur":case"checkval":var s;if(function(e){e.parseMinMaxOptions===n&&(null!==e.min&&(e.min=e.min.toString().replace(new RegExp(t.escapeRegex(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.min=e.min.replace(e.radixPoint,".")),e.min=isFinite(e.min)?parseFloat(e.min):NaN,isNaN(e.min)&&(e.min=Number.MIN_VALUE)),null!==e.max&&(e.max=e.max.toString().replace(new RegExp(t.escapeRegex(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.max=e.max.replace(e.radixPoint,".")),e.max=isFinite(e.max)?parseFloat(e.max):NaN,isNaN(e.max)&&(e.max=Number.MAX_VALUE)),e.parseMinMaxOptions="done")}(a),null!==a.min||null!==a.max){if(s=a.onUnMask(r.join(""),n,e.extend({},a,{unmaskAsNumber:!0})),null!==a.min&&s<a.min)return a.isNegative=a.min<0,a.postValidation(a.min.toString().replace(".",a.radixPoint).split(""),{caret:o,dopost:!0,placeholder:"0"},a);if(null!==a.max&&s>a.max)return a.isNegative=a.max<0,a.postValidation(a.max.toString().replace(".",a.radixPoint).split(""),{caret:o,dopost:!0,placeholder:"0"},a)}return a.postValidation(r,{caret:o,placeholder:"0",event:"blur"},a);case"_checkval":return{caret:o}}},regex:{integerPart:function(e,n){return n?new RegExp("["+t.escapeRegex(e.negationSymbol.front)+"+]?"):new RegExp("["+t.escapeRegex(e.negationSymbol.front)+"+]?\\d+")},integerNPart:function(e){return new RegExp("[\\d"+t.escapeRegex(e.groupSeparator)+t.escapeRegex(e.placeholder.charAt(0))+"]+")}},definitions:{"~":{validator:function(e,i,r,o,a,s){var l=o?new RegExp("[0-9"+t.escapeRegex(a.groupSeparator)+"]").test(e):new RegExp("[0-9]").test(e);if(!0===l){if(!0!==a.numericInput&&i.validPositions[r]!==n&&"~"===i.validPositions[r].match.def&&!s){var c=i.buffer.join(""),u=(c=(c=c.replace(new RegExp("[-"+t.escapeRegex(a.negationSymbol.front)+"]","g"),"")).replace(new RegExp(t.escapeRegex(a.negationSymbol.back)+"$"),"")).split(a.radixPoint);u.length>1&&(u[1]=u[1].replace(/0/g,a.placeholder.charAt(0))),"0"===u[0]&&(u[0]=u[0].replace(/0/g,a.placeholder.charAt(0))),c=u[0]+a.radixPoint+u[1]||"";var d=i._buffer.join("");for(c===a.radixPoint&&(c=d);null===c.match(t.escapeRegex(d)+"$");)d=d.slice(1);l=(c=(c=c.replace(d,"")).split(""))[r]===n?{pos:r,remove:r}:{pos:r}}}else o||e!==a.radixPoint||i.validPositions[r-1]!==n||(i.buffer[r]="0",l={pos:r+1});return l},cardinality:1},"+":{validator:function(e,t,n,i,r){return r.allowMinus&&("-"===e||e===r.negationSymbol.front)},cardinality:1,placeholder:""},"-":{validator:function(e,t,n,i,r){return r.allowMinus&&e===r.negationSymbol.back},cardinality:1,placeholder:""},":":{validator:function(e,n,i,r,o){var a="["+t.escapeRegex(o.radixPoint)+"]",s=new RegExp(a).test(e);return s&&n.validPositions[i]&&n.validPositions[i].match.placeholder===o.radixPoint&&(s={caret:i+1}),s},cardinality:1,placeholder:function(e){return e.radixPoint}}},onUnMask:function(e,n,i){if(""===n&&!0===i.nullable)return n;var r=e.replace(i.prefix,"");return r=r.replace(i.suffix,""),r=r.replace(new RegExp(t.escapeRegex(i.groupSeparator),"g"),""),""!==i.placeholder.charAt(0)&&(r=r.replace(new RegExp(i.placeholder.charAt(0),"g"),"0")),i.unmaskAsNumber?(""!==i.radixPoint&&-1!==r.indexOf(i.radixPoint)&&(r=r.replace(t.escapeRegex.call(this,i.radixPoint),".")),r=r.replace(new RegExp("^"+t.escapeRegex(i.negationSymbol.front)),"-"),r=r.replace(new RegExp(t.escapeRegex(i.negationSymbol.back)+"$"),""),Number(r)):r},isComplete:function(e,n){var i=e.join("");if(e.slice().join("")!==i)return!1;var r=i.replace(n.prefix,"");return r=r.replace(n.suffix,""),r=r.replace(new RegExp(t.escapeRegex(n.groupSeparator),"g"),""),","===n.radixPoint&&(r=r.replace(t.escapeRegex(n.radixPoint),".")),isFinite(r)},onBeforeMask:function(e,i){if(i.isNegative=n,e=e.toString().charAt(e.length-1)===i.radixPoint?e.toString().substr(0,e.length-1):e.toString(),""!==i.radixPoint&&isFinite(e)){var r=e.split("."),o=""!==i.groupSeparator?parseInt(i.groupSize):0;2===r.length&&(r[0].length>o||r[1].length>o||r[0].length<=o&&r[1].length<o)&&(e=e.replace(".",i.radixPoint))}var a=e.match(/,/g),s=e.match(/\./g);if(e=s&&a?s.length>a.length?(e=e.replace(/\./g,"")).replace(",",i.radixPoint):a.length>s.length?(e=e.replace(/,/g,"")).replace(".",i.radixPoint):e.indexOf(".")<e.indexOf(",")?e.replace(/\./g,""):e.replace(/,/g,""):e.replace(new RegExp(t.escapeRegex(i.groupSeparator),"g"),""),0===i.digits&&(-1!==e.indexOf(".")?e=e.substring(0,e.indexOf(".")):-1!==e.indexOf(",")&&(e=e.substring(0,e.indexOf(",")))),""!==i.radixPoint&&isFinite(i.digits)&&-1!==e.indexOf(i.radixPoint)){var l=e.split(i.radixPoint)[1].match(new RegExp("\\d*"))[0];if(parseInt(i.digits)<l.toString().length){var c=Math.pow(10,parseInt(i.digits));e=e.replace(t.escapeRegex(i.radixPoint),"."),e=(e=Math.round(parseFloat(e)*c)/c).toString().replace(".",i.radixPoint)}}return e},canClearPosition:function(e,t,n,i,r){var o=e.validPositions[t],a=o.input!==r.radixPoint||null!==e.validPositions[t].match.fn&&!1===r.decimalProtect||o.input===r.radixPoint&&e.validPositions[t+1]&&null===e.validPositions[t+1].match.fn||isFinite(o.input)||t===n||o.input===r.groupSeparator||o.input===r.negationSymbol.front||o.input===r.negationSymbol.back;return!a||"+"!==o.match.nativeDef&&"-"!==o.match.nativeDef||(r.isNegative=!1),a},onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey)switch(n.keyCode){case t.keyCode.UP:a.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(o.step)),a.trigger("setvalue");break;case t.keyCode.DOWN:a.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(o.step)),a.trigger("setvalue")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,digitsOptional:!0,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowMinus:!1}}),t})},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,function(a){r=[n(0),n(1)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t){function n(e,t){var n=(e.mask||e).replace(/#/g,"9").replace(/\)/,"9").replace(/[+()#-]/g,""),i=(t.mask||t).replace(/#/g,"9").replace(/\)/,"9").replace(/[+()#-]/g,""),r=(e.mask||e).split("#")[0],o=(t.mask||t).split("#")[0];return 0===o.indexOf(r)?-1:0===r.indexOf(o)?1:n.localeCompare(i)}var i=t.prototype.analyseMask;return t.prototype.analyseMask=function(t,n,r){function o(e,n,i){n=n||"",i=i||s,""!==n&&(i[n]={});for(var r="",a=i[n]||i,l=e.length-1;l>=0;l--)a[r=(t=e[l].mask||e[l]).substr(0,1)]=a[r]||[],a[r].unshift(t.substr(1)),e.splice(l,1);for(var c in a)a[c].length>500&&o(a[c].slice(),c,a)}function a(t){var n="",i=[];for(var o in t)e.isArray(t[o])?1===t[o].length?i.push(o+t[o]):i.push(o+r.groupmarker.start+t[o].join(r.groupmarker.end+r.alternatormarker+r.groupmarker.start)+r.groupmarker.end):i.push(o+a(t[o]));return 1===i.length?n+=i[0]:n+=r.groupmarker.start+i.join(r.groupmarker.end+r.alternatormarker+r.groupmarker.start)+r.groupmarker.end,n}var s={};return r.phoneCodes&&(r.phoneCodes&&r.phoneCodes.length>1e3&&(o((t=t.substr(1,t.length-2)).split(r.groupmarker.end+r.alternatormarker+r.groupmarker.start)),t=a(s)),t=t.replace(/9/g,"\\9")),i.call(this,t,n,r)},t.extendAliases({abstractphone:{groupmarker:{start:"<",end:">"},countrycode:"",phoneCodes:[],mask:function(e){return e.definitions={"#":t.prototype.definitions[9]},e.phoneCodes.sort(n)},keepStatic:!0,onBeforeMask:function(e,t){var n=e.replace(/^0{1,2}/,"").replace(/[\s]/g,"");return(n.indexOf(t.countrycode)>1||-1===n.indexOf(t.countrycode))&&(n="+"+t.countrycode+n),n},onUnMask:function(e,t,n){return e.replace(/[()#-]/g,"")},inputmode:"tel"}}),t})},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,function(a){r=[n(0),n(1)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t){return t.extendAliases({Regex:{mask:"r",greedy:!1,repeat:"*",regex:null,regexTokens:null,tokenizer:/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,quantifierFilter:/[0-9]+[^,]/,isComplete:function(e,t){return new RegExp(t.regex,t.casing?"i":"").test(e.join(""))},definitions:{r:{validator:function(t,n,i,r,o){function a(e,t){this.matches=[],this.isGroup=e||!1,this.isQuantifier=t||!1,this.quantifier={min:1,max:1},this.repeaterPart=void 0}function s(t,n){var i=!1;n&&(d+="(",p++);for(var r=0;r<t.matches.length;r++){var a=t.matches[r];if(!0===a.isGroup)i=s(a,!0);else if(!0===a.isQuantifier){var c=e.inArray(a,t.matches),u=t.matches[c-1],f=d;if(isNaN(a.quantifier.max)){for(;a.repeaterPart&&a.repeaterPart!==d&&a.repeaterPart.length>d.length&&!(i=s(u,!0)););(i=i||s(u,!0))&&(a.repeaterPart=d),d=f+a.quantifier.max}else{for(var h=0,g=a.quantifier.max-1;h<g&&!(i=s(u,!0));h++);d=f+"{"+a.quantifier.min+","+a.quantifier.max+"}"}}else if(void 0!==a.matches)for(var m=0;m<a.length&&!(i=s(a[m],n));m++);else{var v;if("["==a.charAt(0)){for(v=d,v+=a,x=0;x<p;x++)v+=")";i=(w=new RegExp("^("+v+")$",o.casing?"i":"")).test(l)}else for(var y=0,b=a.length;y<b;y++)if("\\"!==a.charAt(y)){v=d,v=(v+=a.substr(0,y+1)).replace(/\|$/,"");for(var x=0;x<p;x++)v+=")";var w=new RegExp("^("+v+")$",o.casing?"i":"");if(i=w.test(l))break}d+=a}if(i)break}return n&&(d+=")",p--),i}var l,c,u=n.buffer.slice(),d="",f=!1,p=0;null===o.regexTokens&&function(){var e,t,n=new a,i=[];for(o.regexTokens=[];e=o.tokenizer.exec(o.regex);)switch((t=e[0]).charAt(0)){case"(":i.push(new a(!0));break;case")":c=i.pop(),i.length>0?i[i.length-1].matches.push(c):n.matches.push(c);break;case"{":case"+":case"*":var r=new a(!1,!0),s=(t=t.replace(/[{}]/g,"")).split(","),l=isNaN(s[0])?s[0]:parseInt(s[0]),u=1===s.length?l:isNaN(s[1])?s[1]:parseInt(s[1]);if(r.quantifier={min:l,max:u},i.length>0){var d=i[i.length-1].matches;(e=d.pop()).isGroup||((c=new a(!0)).matches.push(e),e=c),d.push(e),d.push(r)}else(e=n.matches.pop()).isGroup||((c=new a(!0)).matches.push(e),e=c),n.matches.push(e),n.matches.push(r);break;default:i.length>0?i[i.length-1].matches.push(t):n.matches.push(t)}n.matches.length>0&&o.regexTokens.push(n)}(),u.splice(i,0,t),l=u.join("");for(var h=0;h<o.regexTokens.length;h++){var g=o.regexTokens[h];if(f=s(g,g.isGroup))break}return f},cardinality:1}}}}),t})},function(e,t,n){"use strict";var i,r,o,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(a){r=[n(2),n(1)],void 0!==(o="function"==typeof(i=a)?i.apply(t,r):i)&&(e.exports=o)}(function(e,t){return void 0===e.fn.inputmask&&(e.fn.inputmask=function(n,i){var r,o=this[0];if(void 0===i&&(i={}),"string"==typeof n)switch(n){case"unmaskedvalue":return o&&o.inputmask?o.inputmask.unmaskedvalue():e(o).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return o&&o.inputmask?o.inputmask.getemptymask():"";case"hasMaskedValue":return!(!o||!o.inputmask)&&o.inputmask.hasMaskedValue();case"isComplete":
return!o||!o.inputmask||o.inputmask.isComplete();case"getmetadata":return o&&o.inputmask?o.inputmask.getmetadata():void 0;case"setvalue":e(o).val(i),o&&void 0===o.inputmask&&e(o).triggerHandler("setvalue");break;case"option":if("string"!=typeof i)return this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(i)});if(o&&void 0!==o.inputmask)return o.inputmask.option(i);break;default:return i.alias=n,r=new t(i),this.each(function(){r.mask(this)})}else{if("object"==(void 0===n?"undefined":a(n)))return r=new t(n),void 0===n.mask&&void 0===n.alias?this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(n);r.mask(this)}):this.each(function(){r.mask(this)});if(void 0===n)return this.each(function(){(r=new t(i)).mask(this)})}}),e.fn.inputmask})}]),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.flatpickr=t()}(this,function(){"use strict";function e(e,t,n){return!1!==n?new Date(e.getTime()).setHours(0,0,0,0)-new Date(t.getTime()).setHours(0,0,0,0):e.getTime()-t.getTime()}function t(e,t,n){void 0===n&&(n=!1);var i;return function(){var r=this,o=arguments;null!==i&&clearTimeout(i),i=window.setTimeout(function(){i=null,n||e.apply(r,o)},t),n&&!i&&e.apply(r,o)}}function n(e){return(e.wheelDelta||-e.deltaY)>=0?1:-1}function i(e,t,n){if(!0===n)return e.classList.add(t);e.classList.remove(t)}function r(e,t,n){var i=window.document.createElement(e);return t=t||"",n=n||"",i.className=t,void 0!==n&&(i.textContent=n),i}function o(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function a(e,t){return t(e)?e:e.parentNode?a(e.parentNode,t):void 0}function s(e){var t=r("div","numInputWrapper"),n=r("input","numInput "+e),i=r("span","arrowUp"),o=r("span","arrowDown");return n.type="text",n.pattern="\\d*",t.appendChild(n),t.appendChild(i),t.appendChild(o),t}function l(l,c){function f(){Oe.utils={getDaysInMonth:function(e,t){return void 0===e&&(e=Oe.currentMonth),void 0===t&&(t=Oe.currentYear),1===e&&(t%4==0&&t%100!=0||t%400==0)?29:Oe.l10n.daysInMonth[e]}}}function h(e){return e.bind(Oe)}function g(e){if(Oe.config.noCalendar&&0===Oe.selectedDates.length){var t=Oe.config.minDate;Oe.setDate((new Date).setHours(t?t.getHours():Oe.config.defaultHour,t?t.getMinutes():Oe.config.defaultMinute,t&&Oe.config.enableSeconds?t.getSeconds():Oe.config.defaultSeconds),!1),E(),De()}Ae(e),0!==Oe.selectedDates.length&&(!Oe.minDateHasTime||"input"!==e.type||e.target.value.length>=2?(E(),De()):setTimeout(function(){E(),De()},1e3))}function b(e,t){return e%12+12*v("PM"===t)}function S(e){switch(e%24){case 0:case 12:return 12;default:return e%12}}function E(){if(void 0!==Oe.hourElement&&void 0!==Oe.minuteElement){var t=(parseInt(Oe.hourElement.value.slice(-2),10)||0)%24,n=(parseInt(Oe.minuteElement.value,10)||0)%60,i=void 0!==Oe.secondElement?(parseInt(Oe.secondElement.value,10)||0)%60:0;void 0!==Oe.amPM&&(t=b(t,Oe.amPM.textContent)),Oe.config.minDate&&Oe.minDateHasTime&&Oe.latestSelectedDateObj&&0===e(Oe.latestSelectedDateObj,Oe.config.minDate)&&(t=Math.max(t,Oe.config.minDate.getHours()))===Oe.config.minDate.getHours()&&(n=Math.max(n,Oe.config.minDate.getMinutes())),Oe.config.maxDate&&Oe.maxDateHasTime&&Oe.latestSelectedDateObj&&0===e(Oe.latestSelectedDateObj,Oe.config.maxDate)&&(t=Math.min(t,Oe.config.maxDate.getHours()))===Oe.config.maxDate.getHours()&&(n=Math.min(n,Oe.config.maxDate.getMinutes())),D(t,n,i)}}function T(e){var t=e||Oe.latestSelectedDateObj;t&&D(t.getHours(),t.getMinutes(),t.getSeconds())}function D(e,t,n){void 0!==Oe.latestSelectedDateObj&&Oe.latestSelectedDateObj.setHours(e%24,t,n||0,0),Oe.hourElement&&Oe.minuteElement&&!Oe.isMobile&&(Oe.hourElement.value=m(Oe.config.time_24hr?e:(12+e)%12+12*v(e%12==0)),Oe.minuteElement.value=m(t),void 0!==Oe.amPM&&(Oe.amPM.textContent=e>=12?"PM":"AM"),void 0!==Oe.secondElement&&(Oe.secondElement.value=m(n)))}function P(e){var t=parseInt(e.target.value)+(e.delta||0);4!==t.toString().length&&"Enter"!==e.key||(Oe.currentYearElement.blur(),/[^\d]/.test(t.toString())||ee(t))}function M(e,t,n){return t instanceof Array?t.forEach(function(t){return M(e,t,n)}):e instanceof Array?e.forEach(function(e){return M(e,t,n)}):(e.addEventListener(t,n),void Oe._handlers.push({element:e,event:t,handler:n}))}function A(e){return function(t){1===t.which&&e(t)}}function O(){ke("onChange")}function L(){if(Oe.config.wrap&&["open","close","toggle","clear"].forEach(function(e){Array.prototype.forEach.call(Oe.element.querySelectorAll("[data-"+e+"]"),function(t){return M(t,"click",Oe[e])})}),Oe.isMobile)return void xe();var e=t(re,50);if(Oe._debouncedChange=t(O,300),"range"===Oe.config.mode&&Oe.daysContainer&&M(Oe.daysContainer,"mouseover",function(e){return ie(e.target)}),M(window.document.body,"keydown",ne),Oe.config.static||M(Oe._input,"keydown",ne),Oe.config.inline||Oe.config.static||M(window,"resize",e),void 0!==window.ontouchstart&&M(window.document.body,"touchstart",J),M(window.document.body,"mousedown",A(J)),M(Oe._input,"blur",J),!0===Oe.config.clickOpens&&(M(Oe._input,"focus",Oe.open),M(Oe._input,"mousedown",A(Oe.open))),void 0!==Oe.daysContainer&&(Oe.monthNav.addEventListener("wheel",function(e){return e.preventDefault()}),M(Oe.monthNav,"wheel",t(Pe,10)),M(Oe.monthNav,"mousedown",A(Me)),M(Oe.monthNav,["keyup","increment"],P),M(Oe.daysContainer,"mousedown",A(de)),Oe.config.animate&&(M(Oe.daysContainer,["webkitAnimationEnd","animationend"],I),M(Oe.monthNav,["webkitAnimationEnd","animationend"],j))),void 0!==Oe.timeContainer&&void 0!==Oe.minuteElement&&void 0!==Oe.hourElement){var n=function(e){return e.target.select()};M(Oe.timeContainer,["wheel","input","increment"],g),M(Oe.timeContainer,"mousedown",A(R)),M(Oe.timeContainer,["wheel","increment"],Oe._debouncedChange),M(Oe.timeContainer,"input",O),M([Oe.hourElement,Oe.minuteElement],["focus","click"],n),void 0!==Oe.secondElement&&M(Oe.secondElement,"focus",function(){return Oe.secondElement&&Oe.secondElement.select()}),void 0!==Oe.amPM&&M(Oe.amPM,"mousedown",A(function(e){g(e),O()}))}}function N(){Oe._animationLoop.forEach(function(e){return e()}),Oe._animationLoop=[]}function I(e){if(Oe.daysContainer&&Oe.daysContainer.childNodes.length>1)switch(e.animationName){case"fpSlideLeft":Oe.daysContainer.lastChild&&Oe.daysContainer.lastChild.classList.remove("slideLeftNew"),Oe.daysContainer.removeChild(Oe.daysContainer.firstChild),Oe.days=Oe.daysContainer.firstChild,N();break;case"fpSlideRight":Oe.daysContainer.firstChild&&Oe.daysContainer.firstChild.classList.remove("slideRightNew"),Oe.daysContainer.removeChild(Oe.daysContainer.lastChild),Oe.days=Oe.daysContainer.firstChild,N()}}function j(e){switch(e.animationName){case"fpSlideLeftNew":case"fpSlideRightNew":Oe.navigationCurrentMonth.classList.remove("slideLeftNew"),Oe.navigationCurrentMonth.classList.remove("slideRightNew");for(var t=Oe.navigationCurrentMonth;t.nextSibling&&/curr/.test(t.nextSibling.className);)Oe.monthNav.removeChild(t.nextSibling);for(;t.previousSibling&&/curr/.test(t.previousSibling.className);)Oe.monthNav.removeChild(t.previousSibling);Oe.oldCurMonth=void 0}}function F(e){var t=void 0!==e?ye(e):Oe.latestSelectedDateObj||(Oe.config.minDate&&Oe.config.minDate>Oe.now?Oe.config.minDate:Oe.config.maxDate&&Oe.config.maxDate<Oe.now?Oe.config.maxDate:Oe.now);try{void 0!==t&&(Oe.currentYear=t.getFullYear(),Oe.currentMonth=t.getMonth())}catch(e){e.message="Invalid date supplied: "+t,Oe.config.errorHandler(e)}Oe.redraw()}function R(e){~e.target.className.indexOf("arrow")&&$(e,e.target.classList.contains("arrowUp")?1:-1)}function $(e,t,n){var i=e&&e.target,r=n||i&&i.parentNode&&i.parentNode.firstChild,o=Ce("increment");o.delta=t,r&&r.dispatchEvent(o)}function _(){var e=window.document.createDocumentFragment();if(Oe.calendarContainer=r("div","flatpickr-calendar"),Oe.calendarContainer.tabIndex=-1,!Oe.config.noCalendar){if(e.appendChild(Y()),Oe.innerContainer=r("div","flatpickr-innerContainer"),Oe.config.weekNumbers){var t=G(),n=t.weekWrapper,o=t.weekNumbers;Oe.innerContainer.appendChild(n),Oe.weekNumbers=o,Oe.weekWrapper=n}Oe.rContainer=r("div","flatpickr-rContainer"),Oe.rContainer.appendChild(U()),Oe.daysContainer||(Oe.daysContainer=r("div","flatpickr-days"),Oe.daysContainer.tabIndex=-1),W(),Oe.rContainer.appendChild(Oe.daysContainer),Oe.innerContainer.appendChild(Oe.rContainer),e.appendChild(Oe.innerContainer)}Oe.config.enableTime&&e.appendChild(z()),i(Oe.calendarContainer,"rangeMode","range"===Oe.config.mode),i(Oe.calendarContainer,"animate",Oe.config.animate),Oe.calendarContainer.appendChild(e);var a=void 0!==Oe.config.appendTo&&Oe.config.appendTo.nodeType;if((Oe.config.inline||Oe.config.static)&&(Oe.calendarContainer.classList.add(Oe.config.inline?"inline":"static"),Oe.config.inline&&(!a&&Oe.element.parentNode?Oe.element.parentNode.insertBefore(Oe.calendarContainer,Oe._input.nextSibling):void 0!==Oe.config.appendTo&&Oe.config.appendTo.appendChild(Oe.calendarContainer)),Oe.config.static)){var s=r("div","flatpickr-wrapper");Oe.element.parentNode&&Oe.element.parentNode.insertBefore(s,Oe.element),s.appendChild(Oe.element),Oe.altInput&&s.appendChild(Oe.altInput),s.appendChild(Oe.calendarContainer)}Oe.config.static||Oe.config.inline||(void 0!==Oe.config.appendTo?Oe.config.appendTo:window.document.body).appendChild(Oe.calendarContainer)}function H(t,n,o,a){var s=te(n,!0),l=r("span","flatpickr-day "+t,n.getDate().toString());return l.dateObj=n,l.$i=a,l.setAttribute("aria-label",Oe.formatDate(n,Oe.config.ariaDateFormat)),0===e(n,Oe.now)&&(Oe.todayDateElem=l,l.classList.add("today")),s?(l.tabIndex=-1,Se(n)&&(l.classList.add("selected"),Oe.selectedDateElem=l,"range"===Oe.config.mode&&(i(l,"startRange",Oe.selectedDates[0]&&0===e(n,Oe.selectedDates[0])),i(l,"endRange",Oe.selectedDates[1]&&0===e(n,Oe.selectedDates[1]))))):(l.classList.add("disabled"),Oe.selectedDates[0]&&Oe.minRangeDate&&n>Oe.minRangeDate&&n<Oe.selectedDates[0]?Oe.minRangeDate=n:Oe.selectedDates[0]&&Oe.maxRangeDate&&n<Oe.maxRangeDate&&n>Oe.selectedDates[0]&&(Oe.maxRangeDate=n)),"range"===Oe.config.mode&&(Ee(n)&&!Se(n)&&l.classList.add("inRange"),1===Oe.selectedDates.length&&void 0!==Oe.minRangeDate&&void 0!==Oe.maxRangeDate&&(n<Oe.minRangeDate||n>Oe.maxRangeDate)&&l.classList.add("notAllowed")),Oe.weekNumbers&&"prevMonthDay"!==t&&o%7==1&&Oe.weekNumbers.insertAdjacentHTML("beforeend","<span class='disabled flatpickr-day'>"+Oe.config.getWeek(n)+"</span>"),ke("onDayCreate",l),l}function B(e,t){var n=e+t||0,i=void 0!==e?Oe.days.childNodes[n]:Oe.selectedDateElem||Oe.todayDateElem||Oe.days.childNodes[0],r=function(){i=i||Oe.days.childNodes[n],i.focus(),"range"===Oe.config.mode&&ie(i)};if(void 0===i&&0!==t)return t>0?(Oe.changeMonth(1,!0,void 0,!0),n%=42):t<0&&(Oe.changeMonth(-1,!0,void 0,!0),n+=42),q(r);r()}function q(e){!0===Oe.config.animate?Oe._animationLoop.push(e):e()}function W(e){if(void 0!==Oe.daysContainer){var t=(new Date(Oe.currentYear,Oe.currentMonth,1).getDay()-Oe.l10n.firstDayOfWeek+7)%7,n="range"===Oe.config.mode,i=Oe.utils.getDaysInMonth((Oe.currentMonth-1+12)%12),a=Oe.utils.getDaysInMonth(),s=window.document.createDocumentFragment(),l=i+1-t,c=0;for(Oe.weekNumbers&&Oe.weekNumbers.firstChild&&(Oe.weekNumbers.textContent=""),n&&(Oe.minRangeDate=new Date(Oe.currentYear,Oe.currentMonth-1,l),Oe.maxRangeDate=new Date(Oe.currentYear,Oe.currentMonth+1,(42-t)%a));l<=i;l++,c++)s.appendChild(H("prevMonthDay",new Date(Oe.currentYear,Oe.currentMonth-1,l),l,c));for(l=1;l<=a;l++,c++)s.appendChild(H("",new Date(Oe.currentYear,Oe.currentMonth,l),l,c));for(var u=a+1;u<=42-t;u++,c++)s.appendChild(H("nextMonthDay",new Date(Oe.currentYear,Oe.currentMonth+1,u%a),u,c));n&&1===Oe.selectedDates.length&&s.childNodes[0]?(Oe._hidePrevMonthArrow=Oe._hidePrevMonthArrow||!!Oe.minRangeDate&&Oe.minRangeDate>s.childNodes[0].dateObj,Oe._hideNextMonthArrow=Oe._hideNextMonthArrow||!!Oe.maxRangeDate&&Oe.maxRangeDate<new Date(Oe.currentYear,Oe.currentMonth+1,1)):Te();var d=r("div","dayContainer");if(d.appendChild(s),Oe.config.animate&&void 0!==e)for(;Oe.daysContainer.childNodes.length>1;)Oe.daysContainer.removeChild(Oe.daysContainer.firstChild);else o(Oe.daysContainer);e&&e>=0?Oe.daysContainer.appendChild(d):Oe.daysContainer.insertBefore(d,Oe.daysContainer.firstChild),Oe.days=Oe.daysContainer.childNodes[0]}}function Y(){var e=window.document.createDocumentFragment();Oe.monthNav=r("div","flatpickr-month"),Oe.prevMonthNav=r("span","flatpickr-prev-month"),Oe.prevMonthNav.innerHTML=Oe.config.prevArrow,Oe.currentMonthElement=r("span","cur-month"),Oe.currentMonthElement.title=Oe.l10n.scrollTitle;var t=s("cur-year");return Oe.currentYearElement=t.childNodes[0],Oe.currentYearElement.title=Oe.l10n.scrollTitle,Oe.config.minDate&&(Oe.currentYearElement.min=Oe.config.minDate.getFullYear().toString()),Oe.config.maxDate&&(Oe.currentYearElement.max=Oe.config.maxDate.getFullYear().toString(),Oe.currentYearElement.disabled=!!Oe.config.minDate&&Oe.config.minDate.getFullYear()===Oe.config.maxDate.getFullYear()),Oe.nextMonthNav=r("span","flatpickr-next-month"),Oe.nextMonthNav.innerHTML=Oe.config.nextArrow,Oe.navigationCurrentMonth=r("div","flatpickr-current-month"),Oe.navigationCurrentMonth.appendChild(Oe.currentMonthElement),Oe.navigationCurrentMonth.appendChild(t),e.appendChild(Oe.prevMonthNav),e.appendChild(Oe.navigationCurrentMonth),e.appendChild(Oe.nextMonthNav),Oe.monthNav.appendChild(e),Object.defineProperty(Oe,"_hidePrevMonthArrow",{get:function(){return Oe.__hidePrevMonthArrow},set:function(e){Oe.__hidePrevMonthArrow!==e&&(Oe.prevMonthNav.style.display=e?"none":"block"),Oe.__hidePrevMonthArrow=e}}),Object.defineProperty(Oe,"_hideNextMonthArrow",{get:function(){return Oe.__hideNextMonthArrow},set:function(e){Oe.__hideNextMonthArrow!==e&&(Oe.nextMonthNav.style.display=e?"none":"block"),Oe.__hideNextMonthArrow=e}}),Te(),Oe.monthNav}function z(){Oe.calendarContainer.classList.add("hasTime"),Oe.config.noCalendar&&Oe.calendarContainer.classList.add("noCalendar"),Oe.timeContainer=r("div","flatpickr-time"),Oe.timeContainer.tabIndex=-1;var e=r("span","flatpickr-time-separator",":"),t=s("flatpickr-hour");Oe.hourElement=t.childNodes[0];var n=s("flatpickr-minute");if(Oe.minuteElement=n.childNodes[0],Oe.hourElement.tabIndex=Oe.minuteElement.tabIndex=-1,Oe.hourElement.value=m(Oe.latestSelectedDateObj?Oe.latestSelectedDateObj.getHours():Oe.config.time_24hr?Oe.config.defaultHour:S(Oe.config.defaultHour)),Oe.minuteElement.value=m(Oe.latestSelectedDateObj?Oe.latestSelectedDateObj.getMinutes():Oe.config.defaultMinute),Oe.hourElement.step=Oe.config.hourIncrement.toString(),Oe.minuteElement.step=Oe.config.minuteIncrement.toString(),Oe.hourElement.min=Oe.config.time_24hr?"0":"1",Oe.hourElement.max=Oe.config.time_24hr?"23":"12",Oe.minuteElement.min="0",Oe.minuteElement.max="59",Oe.hourElement.title=Oe.minuteElement.title=Oe.l10n.scrollTitle,Oe.timeContainer.appendChild(t),Oe.timeContainer.appendChild(e),Oe.timeContainer.appendChild(n),Oe.config.time_24hr&&Oe.timeContainer.classList.add("time24hr"),Oe.config.enableSeconds){Oe.timeContainer.classList.add("hasSeconds");var i=s("flatpickr-second");Oe.secondElement=i.childNodes[0],Oe.secondElement.value=m(Oe.latestSelectedDateObj?Oe.latestSelectedDateObj.getSeconds():Oe.config.defaultSeconds),Oe.secondElement.step=Oe.minuteElement.step,Oe.secondElement.min=Oe.minuteElement.min,Oe.secondElement.max=Oe.minuteElement.max,Oe.timeContainer.appendChild(r("span","flatpickr-time-separator",":")),Oe.timeContainer.appendChild(i)}return Oe.config.time_24hr||(Oe.amPM=r("span","flatpickr-am-pm",Oe.l10n.amPM[v((Oe.latestSelectedDateObj?Oe.hourElement.value:Oe.config.defaultHour)>11)]),Oe.amPM.title=Oe.l10n.toggleTitle,Oe.amPM.tabIndex=-1,Oe.timeContainer.appendChild(Oe.amPM)),Oe.timeContainer}function U(){Oe.weekdayContainer||(Oe.weekdayContainer=r("div","flatpickr-weekdays"));var e=Oe.l10n.firstDayOfWeek,t=Oe.l10n.weekdays.shorthand.slice();return e>0&&e<t.length&&(t=t.splice(e,t.length).concat(t.splice(0,e))),Oe.weekdayContainer.innerHTML="\n    <span class=flatpickr-weekday>\n      "+t.join("</span><span class=flatpickr-weekday>")+"\n    </span>\n    ",Oe.weekdayContainer}function G(){Oe.calendarContainer.classList.add("hasWeeks");var e=r("div","flatpickr-weekwrapper");e.appendChild(r("span","flatpickr-weekday",Oe.l10n.weekAbbreviation));var t=r("div","flatpickr-weeks");return e.appendChild(t),{weekWrapper:e,weekNumbers:t}}function X(e,t,n,i){void 0===t&&(t=!0),void 0===n&&(n=Oe.config.animate),void 0===i&&(i=!1);var r=t?e:e-Oe.currentMonth;if(!(r<0&&Oe._hidePrevMonthArrow||r>0&&Oe._hideNextMonthArrow)){if(Oe.currentMonth+=r,(Oe.currentMonth<0||Oe.currentMonth>11)&&(Oe.currentYear+=Oe.currentMonth>11?1:-1,Oe.currentMonth=(Oe.currentMonth+12)%12,ke("onYearChange")),W(n?r:void 0),!n)return ke("onMonthChange"),Te();var o=Oe.navigationCurrentMonth;if(r<0)for(;o.nextSibling&&/curr/.test(o.nextSibling.className);)Oe.monthNav.removeChild(o.nextSibling);else if(r>0)for(;o.previousSibling&&/curr/.test(o.previousSibling.className);)Oe.monthNav.removeChild(o.previousSibling);Oe.oldCurMonth=Oe.navigationCurrentMonth,Oe.navigationCurrentMonth=Oe.monthNav.insertBefore(Oe.oldCurMonth.cloneNode(!0),r>0?Oe.oldCurMonth.nextSibling:Oe.oldCurMonth);var a=Oe.daysContainer;if(a.firstChild&&a.lastChild&&(r>0?(a.firstChild.classList.add("slideLeft"),a.lastChild.classList.add("slideLeftNew"),Oe.oldCurMonth.classList.add("slideLeft"),Oe.navigationCurrentMonth.classList.add("slideLeftNew")):r<0&&(a.firstChild.classList.add("slideRightNew"),a.lastChild.classList.add("slideRight"),Oe.oldCurMonth.classList.add("slideRight"),Oe.navigationCurrentMonth.classList.add("slideRightNew"))),Oe.currentMonthElement=Oe.navigationCurrentMonth.firstChild,Oe.currentYearElement=Oe.navigationCurrentMonth.lastChild.childNodes[0],Te(),Oe.oldCurMonth.firstChild&&(Oe.oldCurMonth.firstChild.textContent=d(Oe.currentMonth-r,Oe.config.shorthandCurrentMonth,Oe.l10n)),q(function(){return ke("onMonthChange")}),i&&document.activeElement&&document.activeElement.$i){var s=document.activeElement.$i;q(function(){B(s,0)})}}}function V(e){void 0===e&&(e=!0),Oe.input.value="",Oe.altInput&&(Oe.altInput.value=""),Oe.mobileInput&&(Oe.mobileInput.value=""),Oe.selectedDates=[],Oe.latestSelectedDateObj=void 0,Oe.showTimeInput=!1,Oe.redraw(),e&&ke("onChange")}function K(){Oe.isOpen=!1,Oe.isMobile||(Oe.calendarContainer.classList.remove("open"),Oe._input.classList.remove("active")),ke("onClose")}function Z(){void 0!==Oe.config&&ke("onDestroy");for(var e=Oe._handlers.length;e--;){var t=Oe._handlers[e];t.element.removeEventListener(t.event,t.handler)}Oe._handlers=[],Oe.mobileInput?(Oe.mobileInput.parentNode&&Oe.mobileInput.parentNode.removeChild(Oe.mobileInput),Oe.mobileInput=void 0):Oe.calendarContainer&&Oe.calendarContainer.parentNode&&Oe.calendarContainer.parentNode.removeChild(Oe.calendarContainer),Oe.altInput&&(Oe.input.type="text",Oe.altInput.parentNode&&Oe.altInput.parentNode.removeChild(Oe.altInput),delete Oe.altInput),Oe.input&&(Oe.input.type=Oe.input._type,Oe.input.classList.remove("flatpickr-input"),Oe.input.removeAttribute("readonly"),Oe.input.value=""),["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach(function(e){try{delete Oe[e]}catch(e){}})}function Q(e){return!(!Oe.config.appendTo||!Oe.config.appendTo.contains(e))||Oe.calendarContainer.contains(e)}function J(e){if(Oe.isOpen&&!Oe.config.inline){var t=Q(e.target),n=e.target===Oe.input||e.target===Oe.altInput||Oe.element.contains(e.target)||e.path&&e.path.indexOf&&(~e.path.indexOf(Oe.input)||~e.path.indexOf(Oe.altInput));("blur"===e.type?n&&e.relatedTarget&&!Q(e.relatedTarget):!n&&!t)&&-1===Oe.config.ignoredFocusElements.indexOf(e.target)&&(Oe.close(),"range"===Oe.config.mode&&1===Oe.selectedDates.length&&(Oe.clear(!1),Oe.redraw()))}}function ee(e){if(!(!e||Oe.currentYearElement.min&&e<parseInt(Oe.currentYearElement.min)||Oe.currentYearElement.max&&e>parseInt(Oe.currentYearElement.max))){var t=e,n=Oe.currentYear!==t;Oe.currentYear=t||Oe.currentYear,Oe.config.maxDate&&Oe.currentYear===Oe.config.maxDate.getFullYear()?Oe.currentMonth=Math.min(Oe.config.maxDate.getMonth(),Oe.currentMonth):Oe.config.minDate&&Oe.currentYear===Oe.config.minDate.getFullYear()&&(Oe.currentMonth=Math.max(Oe.config.minDate.getMonth(),Oe.currentMonth)),n&&(Oe.redraw(),ke("onYearChange"))}}function te(t,n){void 0===n&&(n=!0);var i=Oe.parseDate(t,void 0,n);if(Oe.config.minDate&&i&&e(i,Oe.config.minDate,void 0!==n?n:!Oe.minDateHasTime)<0||Oe.config.maxDate&&i&&e(i,Oe.config.maxDate,void 0!==n?n:!Oe.maxDateHasTime)>0)return!1;if(!Oe.config.enable.length&&!Oe.config.disable.length)return!0;if(void 0===i)return!1;for(var r=Oe.config.enable.length>0,o=r?Oe.config.enable:Oe.config.disable,a=0,s=void 0;a<o.length;a++){if("function"==typeof(s=o[a])&&s(i))return r;if(s instanceof Date&&void 0!==i&&s.getTime()===i.getTime())return r;if("string"==typeof s&&void 0!==i){var l=Oe.parseDate(s,void 0,!0);return l&&l.getTime()===i.getTime()?r:!r}if("object"==typeof s&&void 0!==i&&s.from&&s.to&&i.getTime()>=s.from.getTime()&&i.getTime()<=s.to.getTime())return r}return!r}function ne(e){var t=e.target===Oe._input,n=Q(e.target),i=Oe.config.allowInput,r=Oe.isOpen&&(!i||!t),o=Oe.config.inline&&t&&!i;if("Enter"===e.key&&t){if(i)return Oe.setDate(Oe._input.value,!0,e.target===Oe.altInput?Oe.config.altFormat:Oe.config.dateFormat),e.target.blur();Oe.open()}else if(n||r||o){var a=!!Oe.timeContainer&&Oe.timeContainer.contains(e.target);switch(e.key){case"Enter":a?De():de(e);break;case"Escape":e.preventDefault(),Oe.close();break;case"Backspace":case"Delete":t&&!Oe.config.allowInput&&Oe.clear();break;case"ArrowLeft":case"ArrowRight":if(a)Oe.hourElement&&Oe.hourElement.focus();else if(e.preventDefault(),Oe.daysContainer){var s="ArrowRight"===e.key?1:-1;e.ctrlKey?X(s,!0,void 0,!0):B(e.target.$i,s)}break;case"ArrowUp":case"ArrowDown":e.preventDefault();var l="ArrowDown"===e.key?1:-1;Oe.daysContainer&&void 0!==e.target.$i?e.ctrlKey?(ee(Oe.currentYear-l),B(e.target.$i,0)):a||B(e.target.$i,7*l):Oe.config.enableTime&&(!a&&Oe.hourElement&&Oe.hourElement.focus(),g(e),Oe._debouncedChange());break;case"Tab":e.target===Oe.hourElement?(e.preventDefault(),Oe.minuteElement.select()):e.target===Oe.minuteElement&&(Oe.secondElement||Oe.amPM)?(e.preventDefault(),void 0!==Oe.secondElement?Oe.secondElement.focus():void 0!==Oe.amPM&&Oe.amPM.focus()):e.target===Oe.secondElement&&Oe.amPM&&(e.preventDefault(),Oe.amPM.focus());break;case"a":void 0!==Oe.amPM&&e.target===Oe.amPM&&(Oe.amPM.textContent="AM",E(),De());break;case"p":void 0!==Oe.amPM&&e.target===Oe.amPM&&(Oe.amPM.textContent="PM",E(),De())}ke("onKeyDown",e)}}function ie(e){if(1===Oe.selectedDates.length&&e.classList.contains("flatpickr-day")&&void 0!==Oe.minRangeDate&&void 0!==Oe.maxRangeDate){for(var t=e.dateObj,n=Oe.parseDate(Oe.selectedDates[0],void 0,!0),i=Math.min(t.getTime(),Oe.selectedDates[0].getTime()),r=Math.max(t.getTime(),Oe.selectedDates[0].getTime()),o=!1,a=i;a<r;a+=p.DAY)if(!te(new Date(a))){o=!0;break}for(var s=0,l=Oe.days.childNodes[s].dateObj;s<42;s++,l=Oe.days.childNodes[s]&&Oe.days.childNodes[s].dateObj)!function(a,s){var l=s.getTime(),c=l<Oe.minRangeDate.getTime()||l>Oe.maxRangeDate.getTime(),u=Oe.days.childNodes[a];if(c)return u.classList.add("notAllowed"),["inRange","startRange","endRange"].forEach(function(e){u.classList.remove(e)}),"continue";if(o&&!c)return"continue";["startRange","inRange","endRange","notAllowed"].forEach(function(e){u.classList.remove(e)});var d=Math.max(Oe.minRangeDate.getTime(),i),f=Math.min(Oe.maxRangeDate.getTime(),r);e.classList.add(t<Oe.selectedDates[0]?"startRange":"endRange"),n<t&&l===n.getTime()?u.classList.add("startRange"):n>t&&l===n.getTime()&&u.classList.add("endRange"),l>=d&&l<=f&&u.classList.add("inRange")}(s,l)}}function re(){!Oe.isOpen||Oe.config.static||Oe.config.inline||ce()}function oe(e,t){if(void 0===t&&(t=Oe._input),Oe.isMobile)return e&&(e.preventDefault(),e.target&&e.target.blur()),setTimeout(function(){void 0!==Oe.mobileInput&&Oe.mobileInput.click()},0),void ke("onOpen");if(!Oe._input.disabled&&!Oe.config.inline){var n=Oe.isOpen;Oe.isOpen=!0,ce(t),Oe.calendarContainer.classList.add("open"),Oe._input.classList.add("active"),!n&&ke("onOpen")}}function ae(e){return function(t){var n=Oe.config["_"+e+"Date"]=Oe.parseDate(t),i=Oe.config["_"+("min"===e?"max":"min")+"Date"];void 0!==n&&(Oe["min"===e?"minDateHasTime":"maxDateHasTime"]=n.getHours()>0||n.getMinutes()>0||n.getSeconds()>0),Oe.selectedDates&&(Oe.selectedDates=Oe.selectedDates.filter(function(e){return te(e)}),Oe.selectedDates.length||"min"!==e||T(n),De()),Oe.daysContainer&&(ue(),void 0!==n?Oe.currentYearElement[e]=n.getFullYear().toString():Oe.currentYearElement.removeAttribute(e),Oe.currentYearElement.disabled=!!i&&void 0!==n&&i.getFullYear()===n.getFullYear())}}function se(){var e=["wrap","weekNumbers","allowInput","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],t=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange"];Oe.config=u({},C.defaultConfig);var n=u({},c,JSON.parse(JSON.stringify(l.dataset||{}))),i={};Object.defineProperty(Oe.config,"enable",{get:function(){return Oe.config._enable||[]},set:function(e){Oe.config._enable=ge(e)}}),Object.defineProperty(Oe.config,"disable",{get:function(){return Oe.config._disable||[]},set:function(e){Oe.config._disable=ge(e)}}),!n.dateFormat&&n.enableTime&&(i.dateFormat=n.noCalendar?"H:i"+(n.enableSeconds?":S":""):C.defaultConfig.dateFormat+" H:i"+(n.enableSeconds?":S":"")),n.altInput&&n.enableTime&&!n.altFormat&&(i.altFormat=n.noCalendar?"h:i"+(n.enableSeconds?":S K":" K"):C.defaultConfig.altFormat+" h:i"+(n.enableSeconds?":S":"")+" K"),Object.defineProperty(Oe.config,"minDate",{get:function(){return Oe.config._minDate},set:ae("min")}),Object.defineProperty(Oe.config,"maxDate",{get:function(){return Oe.config._maxDate},set:ae("max")}),Object.assign(Oe.config,i,n);for(var r=0;r<e.length;r++)Oe.config[e[r]]=!0===Oe.config[e[r]]||"true"===Oe.config[e[r]];for(var r=t.length;r--;)void 0!==Oe.config[t[r]]&&(Oe.config[t[r]]=y(Oe.config[t[r]]||[]).map(h));for(var r=0;r<Oe.config.plugins.length;r++){var o=Oe.config.plugins[r](Oe)||{};for(var a in o)~t.indexOf(a)?Oe.config[a]=y(o[a]).map(h).concat(Oe.config[a]):void 0===n[a]&&(Oe.config[a]=o[a])}Oe.isMobile=!Oe.config.disableMobile&&!Oe.config.inline&&"single"===Oe.config.mode&&!Oe.config.disable.length&&!Oe.config.enable.length&&!Oe.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),ke("onParseConfig")}function le(){"object"!=typeof Oe.config.locale&&void 0===C.l10ns[Oe.config.locale]&&Oe.config.errorHandler(new Error("flatpickr: invalid locale "+Oe.config.locale)),Oe.l10n=u({},C.l10ns.default,"object"==typeof Oe.config.locale?Oe.config.locale:"default"!==Oe.config.locale?C.l10ns[Oe.config.locale]:void 0)}function ce(e){if(void 0===e&&(e=Oe._positionElement),void 0!==Oe.calendarContainer){var t=Oe.calendarContainer.offsetHeight,n=Oe.calendarContainer.offsetWidth,r=Oe.config.position,o=e.getBoundingClientRect(),a=window.innerHeight-o.bottom,s="above"===r||"below"!==r&&a<t&&o.top>t,l=window.pageYOffset+o.top+(s?-t-2:e.offsetHeight+2);if(i(Oe.calendarContainer,"arrowTop",!s),i(Oe.calendarContainer,"arrowBottom",s),!Oe.config.inline){var c=window.pageXOffset+o.left,u=window.document.body.offsetWidth-o.right,d=c+n>window.document.body.offsetWidth;i(Oe.calendarContainer,"rightMost",d),Oe.config.static||(Oe.calendarContainer.style.top=l+"px",d?(Oe.calendarContainer.style.left="auto",Oe.calendarContainer.style.right=u+"px"):(Oe.calendarContainer.style.left=c+"px",Oe.calendarContainer.style.right="auto"))}}}function ue(){Oe.config.noCalendar||Oe.isMobile||(U(),Te(),W())}function de(t){t.preventDefault(),t.stopPropagation();var n=function(e){return e.classList&&e.classList.contains("flatpickr-day")&&!e.classList.contains("disabled")&&!e.classList.contains("notAllowed")},i=a(t.target,n);if(void 0!==i){var r=i,o=Oe.latestSelectedDateObj=new Date(r.dateObj.getTime()),s=o.getMonth()!==Oe.currentMonth&&"range"!==Oe.config.mode;if(Oe.selectedDateElem=r,"single"===Oe.config.mode)Oe.selectedDates=[o];else if("multiple"===Oe.config.mode){var l=Se(o);l?Oe.selectedDates.splice(parseInt(l),1):Oe.selectedDates.push(o)}else"range"===Oe.config.mode&&(2===Oe.selectedDates.length&&Oe.clear(),Oe.selectedDates.push(o),0!==e(o,Oe.selectedDates[0],!0)&&Oe.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()}));if(E(),s){var c=Oe.currentYear!==o.getFullYear();Oe.currentYear=o.getFullYear(),Oe.currentMonth=o.getMonth(),c&&ke("onYearChange"),ke("onMonthChange")}if(W(),Oe.config.minDate&&Oe.minDateHasTime&&Oe.config.enableTime&&0===e(o,Oe.config.minDate)&&T(Oe.config.minDate),De(),Oe.config.enableTime&&setTimeout(function(){return Oe.showTimeInput=!0},50),"range"===Oe.config.mode&&(1===Oe.selectedDates.length?(ie(r),Oe._hidePrevMonthArrow=Oe._hidePrevMonthArrow||void 0!==Oe.minRangeDate&&Oe.minRangeDate>Oe.days.childNodes[0].dateObj,Oe._hideNextMonthArrow=Oe._hideNextMonthArrow||void 0!==Oe.maxRangeDate&&Oe.maxRangeDate<new Date(Oe.currentYear,Oe.currentMonth+1,1)):Te()),ke("onChange"),s?q(function(){return Oe.selectedDateElem&&Oe.selectedDateElem.focus()}):B(r.$i,0),void 0!==Oe.hourElement&&setTimeout(function(){return void 0!==Oe.hourElement&&Oe.hourElement.select()},451),Oe.config.closeOnSelect){var u="single"===Oe.config.mode&&!Oe.config.enableTime,d="range"===Oe.config.mode&&2===Oe.selectedDates.length&&!Oe.config.enableTime;(u||d)&&Oe.close()}}}function fe(e,t){null!==e&&"object"==typeof e?Object.assign(Oe.config,e):Oe.config[e]=t,Oe.redraw(),F()}function pe(e,t){var n=[];if(e instanceof Array)n=e.map(function(e){return Oe.parseDate(e,t)});else if(e instanceof Date||"number"==typeof e)n=[Oe.parseDate(e,t)];else if("string"==typeof e)switch(Oe.config.mode){case"single":n=[Oe.parseDate(e,t)];break;case"multiple":n=e.split(Oe.config.conjunction).map(function(e){return Oe.parseDate(e,t)});break;case"range":n=e.split(Oe.l10n.rangeSeparator).map(function(e){return Oe.parseDate(e,t)})}else Oe.config.errorHandler(new Error("Invalid date supplied: "+JSON.stringify(e)));Oe.selectedDates=n.filter(function(e){return e instanceof Date&&te(e,!1)}),Oe.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()})}function he(e,t,n){if(void 0===t&&(t=!1),0!==e&&!e)return Oe.clear(t);pe(e,n),Oe.showTimeInput=Oe.selectedDates.length>0,Oe.latestSelectedDateObj=Oe.selectedDates[0],Oe.redraw(),F(),T(),De(t),t&&ke("onChange")}function ge(e){return e.map(function(e){return"string"==typeof e||"number"==typeof e||e instanceof Date?Oe.parseDate(e,void 0,!0):e&&"object"==typeof e&&e.from&&e.to?{from:Oe.parseDate(e.from,void 0),to:Oe.parseDate(e.to,void 0)}:e}).filter(function(e){return e})}function me(){Oe.selectedDates=[],Oe.now=new Date;var e=Oe.config.defaultDate||Oe.input.value;e&&pe(e,Oe.config.dateFormat);var t=Oe.selectedDates.length?Oe.selectedDates[0]:Oe.config.minDate&&Oe.config.minDate.getTime()>Oe.now.getTime()?Oe.config.minDate:Oe.config.maxDate&&Oe.config.maxDate.getTime()<Oe.now.getTime()?Oe.config.maxDate:Oe.now;Oe.currentYear=t.getFullYear(),Oe.currentMonth=t.getMonth(),Oe.selectedDates.length&&(Oe.latestSelectedDateObj=Oe.selectedDates[0]),Oe.minDateHasTime=!!Oe.config.minDate&&(Oe.config.minDate.getHours()>0||Oe.config.minDate.getMinutes()>0||Oe.config.minDate.getSeconds()>0),
Oe.maxDateHasTime=!!Oe.config.maxDate&&(Oe.config.maxDate.getHours()>0||Oe.config.maxDate.getMinutes()>0||Oe.config.maxDate.getSeconds()>0),Object.defineProperty(Oe,"showTimeInput",{get:function(){return Oe._showTimeInput},set:function(e){Oe._showTimeInput=e,Oe.calendarContainer&&i(Oe.calendarContainer,"showTimeInput",e),ce()}})}function ve(e,t){return void 0!==Oe.config&&void 0!==Oe.config.formatDate?Oe.config.formatDate(e,t):t.split("").map(function(t,n,i){return k[t]&&"\\"!==i[n-1]?k[t](e,Oe.l10n,Oe.config):"\\"!==t?t:""}).join("")}function ye(e,t,n){if(0===e||e){var i,r=e;if(e instanceof Date)i=new Date(e.getTime());else if("string"!=typeof e&&void 0!==e.toFixed)i=new Date(e);else if("string"==typeof e){var o=t||(Oe.config||C.defaultConfig).dateFormat,a=String(e).trim();if("today"===a)i=new Date,n=!0;else if(/Z$/.test(a)||/GMT$/.test(a))i=new Date(e);else if(Oe.config&&Oe.config.parseDate)i=Oe.config.parseDate(e,o);else{i=Oe.config&&Oe.config.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0);for(var s=void 0,l=[],c=0,u=0,d="";c<o.length;c++){var f=o[c],p="\\"===f,h="\\"===o[c-1]||p;if(w[f]&&!h){d+=w[f];var g=new RegExp(d).exec(e);g&&(s=!0)&&l["Y"!==f?"push":"unshift"]({fn:x[f],val:g[++u]})}else p||(d+=".");l.forEach(function(e){var t=e.fn,n=e.val;return i=t(i,n,Oe.l10n)||i})}i=s?i:void 0}}return i instanceof Date?(!0===n&&i.setHours(0,0,0,0),i):void Oe.config.errorHandler(new Error("Invalid date provided: "+r))}}function be(){if(Oe.input=Oe.config.wrap?l.querySelector("[data-input]"):l,!Oe.input)return void Oe.config.errorHandler(new Error("Invalid input element specified"));Oe.input._type=Oe.input.type,Oe.input.type="text",Oe.input.classList.add("flatpickr-input"),Oe._input=Oe.input,Oe.config.altInput&&(Oe.altInput=r(Oe.input.nodeName,Oe.input.className+" "+Oe.config.altInputClass),Oe._input=Oe.altInput,Oe.altInput.placeholder=Oe.input.placeholder,Oe.altInput.disabled=Oe.input.disabled,Oe.altInput.required=Oe.input.required,Oe.altInput.type="text",Oe.input.type="hidden",!Oe.config.static&&Oe.input.parentNode&&Oe.input.parentNode.insertBefore(Oe.altInput,Oe.input.nextSibling)),Oe.config.allowInput||Oe._input.setAttribute("readonly","readonly"),Oe._positionElement=Oe.config.positionElement||Oe._input}function xe(){var e=Oe.config.enableTime?Oe.config.noCalendar?"time":"datetime-local":"date";Oe.mobileInput=r("input",Oe.input.className+" flatpickr-mobile"),Oe.mobileInput.step=Oe.input.getAttribute("step")||"any",Oe.mobileInput.tabIndex=1,Oe.mobileInput.type=e,Oe.mobileInput.disabled=Oe.input.disabled,Oe.mobileInput.placeholder=Oe.input.placeholder,Oe.mobileFormatStr="datetime-local"===e?"Y-m-d\\TH:i:S":"date"===e?"Y-m-d":"H:i:S",Oe.selectedDates.length&&(Oe.mobileInput.defaultValue=Oe.mobileInput.value=Oe.formatDate(Oe.selectedDates[0],Oe.mobileFormatStr)),Oe.config.minDate&&(Oe.mobileInput.min=Oe.formatDate(Oe.config.minDate,"Y-m-d")),Oe.config.maxDate&&(Oe.mobileInput.max=Oe.formatDate(Oe.config.maxDate,"Y-m-d")),Oe.input.type="hidden",void 0!==Oe.altInput&&(Oe.altInput.type="hidden");try{Oe.input.parentNode&&Oe.input.parentNode.insertBefore(Oe.mobileInput,Oe.input.nextSibling)}catch(e){}M(Oe.mobileInput,"change",function(e){Oe.setDate(e.target.value,!1,Oe.mobileFormatStr),ke("onChange"),ke("onClose")})}function we(){if(Oe.isOpen)return Oe.close();Oe.open()}function ke(e,t){var n=Oe.config[e];if(void 0!==n&&n.length>0)for(var i=0;n[i]&&i<n.length;i++)n[i](Oe.selectedDates,Oe.input.value,Oe,t);"onChange"===e&&(Oe.input.dispatchEvent(Ce("change")),Oe.input.dispatchEvent(Ce("input")))}function Ce(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}function Se(t){for(var n=0;n<Oe.selectedDates.length;n++)if(0===e(Oe.selectedDates[n],t))return""+n;return!1}function Ee(t){return!("range"!==Oe.config.mode||Oe.selectedDates.length<2)&&(e(t,Oe.selectedDates[0])>=0&&e(t,Oe.selectedDates[1])<=0)}function Te(){Oe.config.noCalendar||Oe.isMobile||!Oe.monthNav||(Oe.currentMonthElement.textContent=d(Oe.currentMonth,Oe.config.shorthandCurrentMonth,Oe.l10n)+" ",Oe.currentYearElement.value=Oe.currentYear.toString(),Oe._hidePrevMonthArrow=void 0!==Oe.config.minDate&&(Oe.currentYear===Oe.config.minDate.getFullYear()?Oe.currentMonth<=Oe.config.minDate.getMonth():Oe.currentYear<Oe.config.minDate.getFullYear()),Oe._hideNextMonthArrow=void 0!==Oe.config.maxDate&&(Oe.currentYear===Oe.config.maxDate.getFullYear()?Oe.currentMonth+1>Oe.config.maxDate.getMonth():Oe.currentYear>Oe.config.maxDate.getFullYear()))}function De(e){if(void 0===e&&(e=!0),!Oe.selectedDates.length)return Oe.clear(e);void 0!==Oe.mobileInput&&Oe.mobileFormatStr&&(Oe.mobileInput.value=void 0!==Oe.latestSelectedDateObj?Oe.formatDate(Oe.latestSelectedDateObj,Oe.mobileFormatStr):"");var t="range"!==Oe.config.mode?Oe.config.conjunction:Oe.l10n.rangeSeparator;Oe.input.value=Oe.selectedDates.map(function(e){return Oe.formatDate(e,Oe.config.dateFormat)}).join(t),void 0!==Oe.altInput&&(Oe.altInput.value=Oe.selectedDates.map(function(e){return Oe.formatDate(e,Oe.config.altFormat)}).join(t)),!1!==e&&ke("onValueUpdate")}function Pe(e){e.preventDefault();var t=Oe.currentYearElement.parentNode&&Oe.currentYearElement.parentNode.contains(e.target);if(e.target===Oe.currentMonthElement||t){var i=n(e);t?(ee(Oe.currentYear+i),e.target.value=Oe.currentYear.toString()):Oe.changeMonth(i,!0,!1)}}function Me(e){var t=Oe.prevMonthNav.contains(e.target),n=Oe.nextMonthNav.contains(e.target);t||n?X(t?-1:1):e.target===Oe.currentYearElement?(e.preventDefault(),Oe.currentYearElement.select()):"arrowUp"===e.target.className?Oe.changeYear(Oe.currentYear+1):"arrowDown"===e.target.className&&Oe.changeYear(Oe.currentYear-1)}function Ae(e){e.preventDefault();var t="keydown"===e.type,n=e.target;void 0!==Oe.amPM&&e.target===Oe.amPM&&(Oe.amPM.textContent=Oe.l10n.amPM["AM"===Oe.amPM.textContent?1:0]);var i=Number(n.min),r=Number(n.max),o=Number(n.step),a=parseInt(n.value,10),s=e.delta||(t?38===e.which?1:-1:Math.max(-1,Math.min(1,e.wheelDelta||-e.deltaY))||0),l=a+o*s;if(void 0!==n.value&&2===n.value.length){var c=n===Oe.hourElement,u=n===Oe.minuteElement;l<i?(l=r+l+v(!c)+(v(c)&&v(!Oe.amPM)),u&&$(void 0,-1,Oe.hourElement)):l>r&&(l=n===Oe.hourElement?l-r-v(!Oe.amPM):i,u&&$(void 0,1,Oe.hourElement)),Oe.amPM&&c&&(1===o?l+a===23:Math.abs(l-a)>o)&&(Oe.amPM.textContent="PM"===Oe.amPM.textContent?"AM":"PM"),n.value=m(l)}}var Oe={};return Oe.parseDate=ye,Oe.formatDate=ve,Oe._animationLoop=[],Oe._handlers=[],Oe._bind=M,Oe._setHoursFromDate=T,Oe.changeMonth=X,Oe.changeYear=ee,Oe.clear=V,Oe.close=K,Oe._createElement=r,Oe.destroy=Z,Oe.isEnabled=te,Oe.jumpToDate=F,Oe.open=oe,Oe.redraw=ue,Oe.set=fe,Oe.setDate=he,Oe.toggle=we,function(){Oe.element=Oe.input=l,Oe.isOpen=!1,se(),le(),be(),me(),f(),Oe.isMobile||_(),L(),(Oe.selectedDates.length||Oe.config.noCalendar)&&(Oe.config.enableTime&&T(Oe.config.noCalendar?Oe.latestSelectedDateObj||Oe.config.minDate:void 0),De(!1)),Oe.showTimeInput=Oe.selectedDates.length>0||Oe.config.noCalendar,void 0!==Oe.weekWrapper&&void 0!==Oe.daysContainer&&(Oe.calendarContainer.style.width=Oe.daysContainer.offsetWidth+Oe.weekWrapper.offsetWidth+"px"),Oe.isMobile||ce(),ke("onReady")}(),Oe}function c(e,t){for(var n=Array.prototype.slice.call(e),i=[],r=0;r<n.length;r++){var o=n[r];try{if(null!==o.getAttribute("data-fp-omit"))continue;void 0!==o._flatpickr&&(o._flatpickr.destroy(),o._flatpickr=void 0),o._flatpickr=l(o,t||{}),i.push(o._flatpickr)}catch(e){console.error(e)}}return 1===i.length?i[0]:i}var u=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},d=function(e,t,n){return n.months[t?"shorthand":"longhand"][e]},f=function(e){var t=new Date(e.getFullYear(),0,1);return Math.ceil(((e.getTime()-t.getTime())/864e5+t.getDay()+1)/7)},p={DAY:864e5},h={_disable:[],_enable:[],allowInput:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enable:[],enableSeconds:!1,enableTime:!1,errorHandler:console.warn,getWeek:f,hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1},g={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function(e){var t=e%100;if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"]},m=function(e){return("0"+e).slice(-2)},v=function(e){return!0===e?1:0},y=function(e){return e instanceof Array?e:[e]},b=function(){},x={D:b,F:function(e,t,n){e.setMonth(n.months.longhand.indexOf(t))},G:function(e,t){e.setHours(parseFloat(t))},H:function(e,t){e.setHours(parseFloat(t))},J:function(e,t){e.setDate(parseFloat(t))},K:function(e,t){e.setHours(e.getHours()%12+12*v(/pm/i.test(t)))},M:function(e,t,n){e.setMonth(n.months.shorthand.indexOf(t))},S:function(e,t){e.setSeconds(parseFloat(t))},U:function(e,t){return new Date(1e3*parseFloat(t))},W:function(e,t){var n=parseInt(t);return new Date(e.getFullYear(),0,2+7*(n-1),0,0,0,0)},Y:function(e,t){e.setFullYear(parseFloat(t))},Z:function(e,t){return new Date(t)},d:function(e,t){e.setDate(parseFloat(t))},h:function(e,t){e.setHours(parseFloat(t))},i:function(e,t){e.setMinutes(parseFloat(t))},j:function(e,t){e.setDate(parseFloat(t))},l:b,m:function(e,t){e.setMonth(parseFloat(t)-1)},n:function(e,t){e.setMonth(parseFloat(t)-1)},s:function(e,t){e.setSeconds(parseFloat(t))},w:b,y:function(e,t){e.setFullYear(2e3+parseFloat(t))}},w={D:"(\\w+)",F:"(\\w+)",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"(am|AM|Am|aM|pm|PM|Pm|pM)",M:"(\\w+)",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"(\\w+)",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},k={Z:function(e){return e.toISOString()},D:function(e,t,n){return t.weekdays.shorthand[k.w(e,t,n)]},F:function(e,t,n){return d(k.n(e,t,n)-1,!1,t)},G:function(e,t,n){return m(k.h(e,t,n))},H:function(e){return m(e.getHours())},J:function(e,t){return void 0!==t.ordinal?e.getDate()+t.ordinal(e.getDate()):e.getDate()},K:function(e){return e.getHours()>11?"PM":"AM"},M:function(e,t){return d(e.getMonth(),!0,t)},S:function(e){return m(e.getSeconds())},U:function(e){return e.getTime()/1e3},W:function(e,t,n){return n.getWeek(e)},Y:function(e){return e.getFullYear()},d:function(e){return m(e.getDate())},h:function(e){return e.getHours()%12?e.getHours()%12:12},i:function(e){return m(e.getMinutes())},j:function(e){return e.getDate()},l:function(e,t){return t.weekdays.longhand[e.getDay()]},m:function(e){return m(e.getMonth()+1)},n:function(e){return e.getMonth()+1},s:function(e){return e.getSeconds()},w:function(e){return e.getDay()},y:function(e){return String(e.getFullYear()).substring(2)}};"function"!=typeof Object.assign&&(Object.assign=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(!e)throw TypeError("Cannot convert undefined or null to object");for(var i=0,r=t;i<r.length;i++){var o=r[i];!function(t){t&&Object.keys(t).forEach(function(n){return e[n]=t[n]})}(o)}return e}),"undefined"!=typeof HTMLElement&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(e){return c(this,e)},HTMLElement.prototype.flatpickr=function(e){return c([this],e)});var C;return C=function(e,t){return e instanceof NodeList?c(e,t):"string"==typeof e?c(window.document.querySelectorAll(e),t):c([e],t)},"object"==typeof window&&(window.flatpickr=C),C.defaultConfig=h,C.l10ns={en:u({},g),default:u({},g)},C.localize=function(e){C.l10ns.default=u({},C.l10ns.default,e)},C.setDefaults=function(e){C.defaultConfig=u({},C.defaultConfig,e)},"undefined"!=typeof jQuery&&(jQuery.fn.flatpickr=function(e){return c(this,e)}),Date.prototype.fp_incr=function(e){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof e?parseInt(e,10):e))},C}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.ru={})}(this,function(e){"use strict";var t="undefined"!=typeof window&&void 0!==window.flatpickr?window.flatpickr:{l10ns:{}},n={firstDayOfWeek:1,weekdays:{shorthand:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],longhand:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"]},months:{shorthand:["Янв","Фев","Март","Апр","Май","Июнь","Июль","Авг","Сен","Окт","Ноя","Дек"],longhand:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"]},rangeSeparator:" — ",scrollTitle:"Прокрутите для увеличения",toggleTitle:"Нажмите для переключения"};t.l10ns.ru=n;var i=t.l10ns;e.Russian=n,e.default=i,Object.defineProperty(e,"__esModule",{value:!0})}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.tippy=t()}(this,function(){"use strict";function e(e){_e.forEach(function(t){var n=t.popper,i=t.tippyInstance,r=t.settings,o=r.appendTo,a=r.hideOnClick,s=r.trigger;if(o.contains(n)){var l=!0===a||-1!==s.indexOf("focus"),c=!e||n!==e.popper;l&&c&&i.hide(n)}})}function t(e,t){return(Element.prototype.closest||function(e){for(var t=this;t;){if(ze.call(t,e))return t;t=t.parentElement}}).call(e,t)}function n(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function i(){var i=function(){$e.touch=!0,$e.iOS()&&document.body.classList.add("tippy-touch"),$e.dynamicInputDetection&&window.performance&&document.addEventListener("mousemove",r)},r=function(){var e=void 0;return function(){var t=performance.now();t-e<20&&($e.touch=!1,document.removeEventListener("mousemove",r),$e.iOS()||document.body.classList.remove("tippy-touch")),e=t}}(),o=function(i){if(!(i.target instanceof Element))return e();var r=t(i.target,He.TOOLTIPPED_EL),o=t(i.target,He.POPPER);if(o){if(n(_e,function(e){return e.popper===o}).settings.interactive)return}if(r){var a=n(_e,function(e){return e.el===r}),s=a.settings,l=s.hideOnClick,c=s.multiple,u=s.trigger;if(!c&&$e.touch||!c&&-1!==u.indexOf("click"))return e(a);if(!0!==l||-1!==u.indexOf("click"))return}!t(i.target,He.CONTROLLER)&&document.querySelector(He.POPPER)&&e()},a=function(e){var t=document,n=t.activeElement;n&&n.blur&&ze.call(n,He.TOOLTIPPED_EL)&&n.blur()};document.addEventListener("click",o),document.addEventListener("touchstart",i),window.addEventListener("blur",a),!$e.SUPPORTS_TOUCH&&(navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0)&&document.addEventListener("pointerdown",i)}function r(){return!r.done&&(r.done=!0,i(),!0)}function o(e){window.requestAnimationFrame(function(){setTimeout(e,0)})}function a(e){for(var t=[!1,"webkit"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length;i++){var r=t[i],o=r?""+r+n:e;if(void 0!==window.document.body.style[o])return o}return null}function s(e,t){return Array.prototype.findIndex?e.findIndex(t):e.indexOf(n(e,t))}function l(e){var t=e.getAttribute("title");t&&e.setAttribute("data-original-title",t),e.removeAttribute("title")}function c(e){var t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)}function u(e,t){t?window.getComputedStyle(t)[a("transform")]:window.getComputedStyle(e).opacity}function d(e,t){e.forEach(function(e){e&&t(e.classList)})}function f(e){return{tooltip:e.querySelector(He.TOOLTIP),circle:e.querySelector(He.CIRCLE),content:e.querySelector(He.CONTENT)}}function p(e,t){e.forEach(function(e){if(e){var n=ze.call(e,He.CONTENT),i=n?Math.round(t/1.3):t;e.style[a("transitionDuration")]=i+"ms"}})}function h(e){return"visible"===e.style.visibility}function g(){}function m(e){return!!e&&"[object Object]"===e.toString()}function v(e){return e.replace(/-.+/,"")}function y(e){var t=this,i=n(_e,function(e){return e.el===t}),r=i.popper,o=i.settings.offset,s=v(r.getAttribute("x-placement")),l=Math.round(r.offsetWidth/2),c=Math.round(r.offsetHeight/2),u=document.documentElement.offsetWidth||document.body.offsetWidth,d=e.pageX,f=e.pageY,p=void 0,h=void 0;switch(s){case"top":p=d-l+o,h=f-2*c;break;case"bottom":p=d-l+o,h=f+10;break;case"left":p=d-2*l,h=f-c+o;break;case"right":p=d+5,h=f-c+o}var g=d+5+l+o>u,m=d-5-l+o<0;"top"!==s&&"bottom"!==s||(g&&(p=u-5-2*l),m&&(p=5)),r.style[a("transform")]="translate3d("+p+"px, "+h+"px, 0)"}function b(e){if(e instanceof Element||m(e))return[e];if(e instanceof NodeList)return[].slice.call(e);if(Array.isArray(e))return e;try{return[].slice.call(document.querySelectorAll(e))}catch(e){return[]}}function x(e,t,n){if(!t)return n();var i=f(e.popper),r=i.tooltip,o=!1,a=function(e){r[e+"EventListener"]("webkitTransitionEnd",s),r[e+"EventListener"]("transitionend",s)},s=function(e){e.target!==r||o||(o=!0,a("remove"),n())};a("add"),clearTimeout(e._transitionendTimeout),e._transitionendTimeout=setTimeout(function(){o||(a("remove"),n())},t)}function w(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}function k(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},Xe))}}function C(e){var t={};return e&&"[object Function]"===t.toString.call(e)}function S(e,t){if(1!==e.nodeType)return[];var n=getComputedStyle(e,null);return t?n[t]:n}function E(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function T(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=S(e),n=t.overflow,i=t.overflowX;return/(auto|scroll)/.test(n+t.overflowY+i)?e:T(E(e))}function D(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(t.nodeName)&&"static"===S(t,"position")?D(t):t:e?e.ownerDocument.documentElement:document.documentElement}function P(e){var t=e.nodeName;return"BODY"!==t&&("HTML"===t||D(e.firstElementChild)===e)}function M(e){return null!==e.parentNode?M(e.parentNode):e}function A(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,r=n?t:e,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var a=o.commonAncestorContainer;if(e!==a&&t!==a||i.contains(r))return P(a)?a:D(a);var s=M(e);return s.host?A(s.host,t):A(e,M(t).host)}function O(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",i=e.nodeName;if("BODY"===i||"HTML"===i){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[n]}return e[n]}function L(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=O(t,"top"),r=O(t,"left"),o=n?-1:1;return e.top+=i*o,e.bottom+=i*o,e.left+=r*o,e.right+=r*o,e}function N(e,t){var n="x"===t?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+i+"Width"],10)}function I(e,t,n,i){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],Je()?n["offset"+e]+i["margin"+("Height"===e?"Top":"Left")]+i["margin"+("Height"===e?"Bottom":"Right")]:0)}function j(){var e=document.body,t=document.documentElement,n=Je()&&getComputedStyle(t);return{height:I("Height",e,t,n),width:I("Width",e,t,n)}}function F(e){return it({},e,{right:e.left+e.width,bottom:e.top+e.height})}function R(e){var t={};if(Je())try{t=e.getBoundingClientRect();var n=O(e,"top"),i=O(e,"left");t.top+=n,t.left+=i,t.bottom+=n,t.right+=i}catch(e){}else t=e.getBoundingClientRect();var r={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?j():{},a=o.width||e.clientWidth||r.right-r.left,s=o.height||e.clientHeight||r.bottom-r.top,l=e.offsetWidth-a,c=e.offsetHeight-s;if(l||c){var u=S(e);l-=N(u,"x"),c-=N(u,"y"),r.width-=l,r.height-=c}return F(r)}function $(e,t){var n=Je(),i="HTML"===t.nodeName,r=R(e),o=R(t),a=T(e),s=S(t),l=parseFloat(s.borderTopWidth,10),c=parseFloat(s.borderLeftWidth,10),u=F({top:r.top-o.top-l,left:r.left-o.left-c,width:r.width,height:r.height});if(u.marginTop=0,u.marginLeft=0,!n&&i){var d=parseFloat(s.marginTop,10),f=parseFloat(s.marginLeft,10);u.top-=l-d,u.bottom-=l-d,u.left-=c-f,u.right-=c-f,u.marginTop=d,u.marginLeft=f}return(n?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(u=L(u,t)),u}function _(e){var t=e.ownerDocument.documentElement,n=$(e,t),i=Math.max(t.clientWidth,window.innerWidth||0),r=Math.max(t.clientHeight,window.innerHeight||0),o=O(t),a=O(t,"left");return F({top:o-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:i,height:r})}function H(e){var t=e.nodeName;return"BODY"!==t&&"HTML"!==t&&("fixed"===S(e,"position")||H(E(e)))}function B(e,t,n,i){var r={top:0,left:0},o=A(e,t);if("viewport"===i)r=_(o);else{var a=void 0;"scrollParent"===i?(a=T(E(t)),"BODY"===a.nodeName&&(a=e.ownerDocument.documentElement)):a="window"===i?e.ownerDocument.documentElement:i;var s=$(a,o);if("HTML"!==a.nodeName||H(o))r=s;else{var l=j(),c=l.height,u=l.width;r.top+=s.top-s.marginTop,r.bottom=c+s.top,r.left+=s.left-s.marginLeft,r.right=u+s.left}}return r.left+=n,r.top+=n,r.right-=n,r.bottom-=n,r}function q(e){return e.width*e.height}function W(e,t,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=B(n,i,o,r),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(s).map(function(e){return it({key:e},s[e],{area:q(s[e])})}).sort(function(e,t){return t.area-e.area}),c=l.filter(function(e){var t=e.width,i=e.height;return t>=n.clientWidth&&i>=n.clientHeight}),u=c.length>0?c[0].key:l[0].key,d=e.split("-")[1];return u+(d?"-"+d:"")}function Y(e,t,n){return $(n,A(t,n))}function z(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),i=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+i,height:e.offsetHeight+n}}function U(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function G(e,t,n){n=n.split("-")[0];var i=z(e),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",l=o?"height":"width",c=o?"width":"height";return r[a]=t[a]+t[l]/2-i[l]/2,r[s]=n===s?t[s]-i[c]:t[U(s)],r}function X(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function V(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var i=X(e,function(e){return e[t]===n});return e.indexOf(i)}function K(e,t,n){return(void 0===n?e:e.slice(0,V(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&C(n)&&(t.offsets.popper=F(t.offsets.popper),t.offsets.reference=F(t.offsets.reference),t=n(t,e))}),t}function Z(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=Y(this.state,this.popper,this.reference),e.placement=W(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=G(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=K(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function Q(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function J(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length-1;i++){var r=t[i],o=r?""+r+n:e;if(void 0!==document.body.style[o])return o}return null}function ee(){return this.state.isDestroyed=!0,Q(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[J("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function te(e){var t=e.ownerDocument;return t?t.defaultView:window}function ne(e,t,n,i){var r="BODY"===e.nodeName,o=r?e.ownerDocument.defaultView:e;o.addEventListener(t,n,{passive:!0}),r||ne(T(o.parentNode),t,n,i),i.push(o)}function ie(e,t,n,i){n.updateBound=i,te(e).addEventListener("resize",n.updateBound,{passive:!0});var r=T(e);return ne(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function re(){this.state.eventsEnabled||(this.state=ie(this.reference,this.options,this.state,this.scheduleUpdate))}function oe(e,t){return te(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t}function ae(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=oe(this.reference,this.state))}function se(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function le(e,t){Object.keys(t).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&se(t[n])&&(i="px"),e.style[n]=t[n]+i})}function ce(e,t){Object.keys(t).forEach(function(n){!1!==t[n]?e.setAttribute(n,t[n]):e.removeAttribute(n)})}function ue(e){return le(e.instance.popper,e.styles),ce(e.instance.popper,e.attributes),e.arrowElement&&Object.keys(e.arrowStyles).length&&le(e.arrowElement,e.arrowStyles),e}function de(e,t,n,i,r){var o=Y(r,t,e),a=W(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),le(t,{position:"absolute"}),n}function fe(e,t){var n=t.x,i=t.y,r=e.offsets.popper,o=X(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,s=D(e.instance.popper),l=R(s),c={position:r.position},u={left:Math.floor(r.left),top:Math.floor(r.top),bottom:Math.floor(r.bottom),right:Math.floor(r.right)},d="bottom"===n?"top":"bottom",f="right"===i?"left":"right",p=J("transform"),h=void 0,g=void 0;if(g="bottom"===d?-l.height+u.bottom:u.top,h="right"===f?-l.width+u.right:u.left,a&&p)c[p]="translate3d("+h+"px, "+g+"px, 0)",c[d]=0,c[f]=0,c.willChange="transform";else{var m="bottom"===d?-1:1,v="right"===f?-1:1;c[d]=g*m,c[f]=h*v,c.willChange=d+", "+f}var y={"x-placement":e.placement};return e.attributes=it({},y,e.attributes),e.styles=it({},c,e.styles),e.arrowStyles=it({},e.offsets.arrow,e.arrowStyles),e}function pe(e,t,n){var i=X(e,function(e){return e.name===t}),r=!!i&&e.some(function(e){return e.name===n&&e.enabled&&e.order<i.order});if(!r){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}function he(e,t){var n;if(!pe(e.instance.modifiers,"arrow","keepTogether"))return e;var i=t.element;if("string"==typeof i){if(!(i=e.instance.popper.querySelector(i)))return e}else if(!e.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var r=e.placement.split("-")[0],o=e.offsets,a=o.popper,s=o.reference,l=-1!==["left","right"].indexOf(r),c=l?"height":"width",u=l?"Top":"Left",d=u.toLowerCase(),f=l?"left":"top",p=l?"bottom":"right",h=z(i)[c];s[p]-h<a[d]&&(e.offsets.popper[d]-=a[d]-(s[p]-h)),s[d]+h>a[p]&&(e.offsets.popper[d]+=s[d]+h-a[p]),e.offsets.popper=F(e.offsets.popper);var g=s[d]+s[c]/2-h/2,m=S(e.instance.popper),v=parseFloat(m["margin"+u],10),y=parseFloat(m["border"+u+"Width"],10),b=g-e.offsets.popper[d]-v-y;return b=Math.max(Math.min(a[c]-h,b),0),e.arrowElement=i,e.offsets.arrow=(n={},nt(n,d,Math.round(b)),nt(n,f,""),n),e}function ge(e){return"end"===e?"start":"start"===e?"end":e}function me(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=ot.indexOf(e),i=ot.slice(n+1).concat(ot.slice(0,n));return t?i.reverse():i}function ve(e,t){if(Q(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=B(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),i=e.placement.split("-")[0],r=U(i),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case at.FLIP:a=[i,r];break;case at.CLOCKWISE:a=me(i);break;case at.COUNTERCLOCKWISE:a=me(i,!0);break;default:a=t.behavior}return a.forEach(function(s,l){if(i!==s||a.length===l+1)return e;i=e.placement.split("-")[0],r=U(i);var c=e.offsets.popper,u=e.offsets.reference,d=Math.floor,f="left"===i&&d(c.right)>d(u.left)||"right"===i&&d(c.left)<d(u.right)||"top"===i&&d(c.bottom)>d(u.top)||"bottom"===i&&d(c.top)<d(u.bottom),p=d(c.left)<d(n.left),h=d(c.right)>d(n.right),g=d(c.top)<d(n.top),m=d(c.bottom)>d(n.bottom),v="left"===i&&p||"right"===i&&h||"top"===i&&g||"bottom"===i&&m,y=-1!==["top","bottom"].indexOf(i),b=!!t.flipVariations&&(y&&"start"===o&&p||y&&"end"===o&&h||!y&&"start"===o&&g||!y&&"end"===o&&m);(f||v||b)&&(e.flipped=!0,(f||v)&&(i=a[l+1]),b&&(o=ge(o)),e.placement=i+(o?"-"+o:""),e.offsets.popper=it({},e.offsets.popper,G(e.instance.popper,e.offsets.reference,e.placement)),e=K(e.instance.modifiers,e,"flip"))}),e}function ye(e){var t=e.offsets,n=t.popper,i=t.reference,r=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(r),s=a?"right":"bottom",l=a?"left":"top",c=a?"width":"height";return n[s]<o(i[l])&&(e.offsets.popper[l]=o(i[l])-n[c]),n[l]>o(i[s])&&(e.offsets.popper[l]=o(i[s])),e}function be(e,t,n,i){var r=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],a=r[2];if(!o)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=i}return F(s)[t]/100*o}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}function xe(e,t,n,i){var r=[0,0],o=-1!==["right","left"].indexOf(i),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=a.indexOf(X(a,function(e){return-1!==e.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return c=c.map(function(e,i){
var r=(1===i?!o:o)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return be(e,r,t,n)})}),c.forEach(function(e,t){e.forEach(function(n,i){se(n)&&(r[t]+=n*("-"===e[i-1]?-1:1))})}),r}function we(e,t){var n=t.offset,i=e.placement,r=e.offsets,o=r.popper,a=r.reference,s=i.split("-")[0],l=void 0;return l=se(+n)?[+n,0]:xe(n,o,a,s),"left"===s?(o.top+=l[0],o.left-=l[1]):"right"===s?(o.top+=l[0],o.left+=l[1]):"top"===s?(o.left+=l[0],o.top-=l[1]):"bottom"===s&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e}function ke(e,t){var n=t.boundariesElement||D(e.instance.popper);e.instance.reference===n&&(n=D(n));var i=B(e.instance.popper,e.instance.reference,t.padding,n);t.boundaries=i;var r=t.priority,o=e.offsets.popper,a={primary:function(e){var n=o[e];return o[e]<i[e]&&!t.escapeWithReference&&(n=Math.max(o[e],i[e])),nt({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=o[n];return o[e]>i[e]&&!t.escapeWithReference&&(r=Math.min(o[n],i[e]-("right"===e?o.width:o.height))),nt({},n,r)}};return r.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";o=it({},o,a[t](e))}),e.offsets.popper=o,e}function Ce(e){var t=e.placement,n=t.split("-")[0],i=t.split("-")[1];if(i){var r=e.offsets,o=r.reference,a=r.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",c=s?"width":"height",u={start:nt({},l,o[l]),end:nt({},l,o[l]+o[c]-a[c])};e.offsets.popper=it({},a,u[i])}return e}function Se(e){if(!pe(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=X(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}function Ee(e){var t=e.placement,n=t.split("-")[0],i=e.offsets,r=i.popper,o=i.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return r[a?"left":"top"]=o[n]-(s?r[a?"width":"height"]:0),e.placement=U(t),e.offsets.popper=F(r),e}function Te(e){return-(e-Be.distance)+"px"}function De(e){var t=e.el,n=e.popper,i=e.settings,r=i.position,s=i.popperOptions,l=i.offset,c=i.distance,u=i.flipDuration,d=f(n),p=d.tooltip,h=ft({placement:r},s||{},{modifiers:ft({},s?s.modifiers:{},{flip:ft({padding:c+5},s&&s.modifiers?s.modifiers.flip:{}),offset:ft({offset:l},s&&s.modifiers?s.modifiers.offset:{})}),onUpdate:function(){var e=p.style;e.top="",e.bottom="",e.left="",e.right="",e[v(n.getAttribute("x-placement"))]=Te(c)}});if(window.MutationObserver){var g=n.style,m=new MutationObserver(function(){g[a("transitionDuration")]="0ms",e.popperInstance.update(),o(function(){g[a("transitionDuration")]=u+"ms"})});m.observe(n,{childList:!0,subtree:!0,characterData:!0}),e._mutationObservers.push(m)}return new ct(t,n,h)}function Pe(e){var t=e.el,n=e.popper,i=e.settings,r=i.appendTo,o=i.followCursor;r.contains(n)||(r.appendChild(n),e.popperInstance?(e.popperInstance.update(),o&&!$e.touch||e.popperInstance.enableEventListeners()):e.popperInstance=De(e),o&&!$e.touch&&(t.addEventListener("mousemove",y),e.popperInstance.disableEventListeners()))}function Me(e){var t=e.popper,n=e.popperInstance,i=e.settings.stickyDuration,r=function(){return t.style[a("transitionDuration")]=i+"ms"},s=function(){return t.style[a("transitionDuration")]=""};o(function e(){n&&n.scheduleUpdate(),r(),h(t)?window.requestAnimationFrame(e):s()})}function Ae(e,t){var n=qe.reduce(function(n,i){var r=e.getAttribute("data-"+i.toLowerCase())||t[i];return"false"===r&&(r=!1),"true"===r&&(r=!0),isFinite(r)&&!isNaN(parseFloat(r))&&(r=parseFloat(r)),"string"==typeof r&&"["===r.trim().charAt(0)&&(r=JSON.parse(r)),n[i]=r,n},{});return ft({},t,n)}function Oe(e,t,n){var i=n.position,r=n.distance,o=n.arrow,a=n.animateFill,s=n.inertia,l=n.animation,c=n.arrowSize,u=n.size,d=n.theme,f=n.html,p=n.zIndex,h=n.interactive,g=document.createElement("div");g.setAttribute("class","tippy-popper"),g.setAttribute("role","tooltip"),g.setAttribute("aria-hidden","true"),g.setAttribute("id","tippy-tooltip-"+e),g.style.zIndex=p;var m=document.createElement("div");if(m.setAttribute("class","tippy-tooltip tippy-tooltip--"+u+" leave"),m.setAttribute("data-animation",l),d.split(" ").forEach(function(e){m.classList.add(e+"-theme")}),o){var y=document.createElement("div");y.setAttribute("class","arrow-"+c),y.setAttribute("x-arrow",""),m.appendChild(y)}if(a){m.setAttribute("data-animatefill","");var b=document.createElement("div");b.setAttribute("class","leave"),b.setAttribute("x-circle",""),m.appendChild(b)}s&&m.setAttribute("data-inertia",""),h&&m.setAttribute("data-interactive","");var x=document.createElement("div");if(x.setAttribute("class","tippy-tooltip-content"),f){var w=void 0;f instanceof Element?(x.appendChild(f),w="#"+f.id||"tippy-html-template"):(x.innerHTML=document.getElementById(f.replace("#","")).innerHTML,w=f),g.classList.add("html-template"),h&&g.setAttribute("tabindex","-1"),m.setAttribute("data-template-id",w)}else x.innerHTML=t;return m.style[v(i)]=Te(r),m.appendChild(x),g.appendChild(m),g}function Le(e,t,n,i){var r=[];return"manual"===e?r:(t.addEventListener(e,n.handleTrigger),r.push({event:e,handler:n.handleTrigger}),"mouseenter"===e&&($e.SUPPORTS_TOUCH&&i&&(t.addEventListener("touchstart",n.handleTrigger),r.push({event:"touchstart",handler:n.handleTrigger}),t.addEventListener("touchend",n.handleMouseleave),r.push({event:"touchend",handler:n.handleMouseleave})),t.addEventListener("mouseleave",n.handleMouseleave),r.push({event:"mouseleave",handler:n.handleMouseleave})),"focus"===e&&(t.addEventListener("blur",n.handleBlur),r.push({event:"blur",handler:n.handleBlur})),r)}function Ne(e,t,n){if(!t.getAttribute("x-placement"))return!0;var i=e.clientX,r=e.clientY,o=n.interactiveBorder,a=n.distance,s=t.getBoundingClientRect(),l=v(t.getAttribute("x-placement")),c=o+a,u={top:s.top-r>o,bottom:r-s.bottom>o,left:s.left-i>o,right:i-s.right>o};switch(l){case"top":u.top=s.top-r>c;break;case"bottom":u.bottom=r-s.bottom>c;break;case"left":u.left=s.left-i>c;break;case"right":u.right=i-s.right>c}return u.top||u.bottom||u.left||u.right}function Ie(e,n,i){var r=this,o=(i.position,i.delay),a=(i.duration,i.interactive),s=(i.interactiveBorder,i.distance,i.hideOnClick),l=i.trigger,c=i.touchHold,u=(i.touchWait,void 0),d=void 0,f=function(){clearTimeout(u),clearTimeout(d)},p=function(){if(f(),!h(n)){var e=Array.isArray(o)?o[0]:o;o?u=setTimeout(function(){return r.show(n)},e):r.show(n)}},g=function(e){return r.callbacks.wait?r.callbacks.wait.call(n,p,e):p()},m=function(){f();var e=Array.isArray(o)?o[1]:o;o?d=setTimeout(function(){return r.hide(n)},e):r.hide(n)};return{handleTrigger:function(t){var i="mouseenter"===t.type&&$e.SUPPORTS_TOUCH&&$e.touch;if(!i||!c){var r="click"===t.type,o="persistent"!==s;r&&h(n)&&o?m():g(t),i&&$e.iOS()&&e.click&&e.click()}},handleMouseleave:function(r){if(!("mouseleave"===r.type&&$e.SUPPORTS_TOUCH&&$e.touch&&c)){if(a){var o=function r(o){var a=function(){document.body.removeEventListener("mouseleave",m),document.removeEventListener("mousemove",r),m()},s=t(o.target,He.TOOLTIPPED_EL),c=t(o.target,He.POPPER)===n,u=s===e,d=-1!==l.indexOf("click");if(s&&s!==e)return a();c||u||d||Ne(o,n,i)&&a()};return document.body.addEventListener("mouseleave",m),void document.addEventListener("mousemove",o)}m()}},handleBlur:function(e){e.relatedTarget&&!$e.touch&&(t(e.relatedTarget,He.POPPER)||m())}}}function je(e){return e.arrow&&(e.animateFill=!1),e.appendTo&&"function"==typeof e.appendTo&&(e.appendTo=e.appendTo()),e}function Fe(e){var t=this;return e.reduce(function(e,n){var i=pt,r=ft({},je(t.settings.performance?t.settings:Ae(n,t.settings)));"function"==typeof r.html&&(r.html=r.html(n));var o=r.html,a=r.trigger,s=r.touchHold,c=r.dynamicTitle,u=n.getAttribute("title");if(!u&&!o)return e;n.setAttribute("data-tooltipped",""),n.setAttribute("aria-describedby","tippy-tooltip-"+i),l(n);var d=Oe(i,u,r),p=Ie.call(t,n,d,r),h=[];a.trim().split(" ").forEach(function(e){return h=h.concat(Le(e,n,p,s))});var g=void 0;if(c&&window.MutationObserver){var m=f(d),v=m.content;g=new MutationObserver(function(){var e=n.getAttribute("title");e&&(v.innerHTML=e,l(n))}),g.observe(n,{attributes:!0})}return e.push({id:i,el:n,popper:d,settings:r,listeners:h,tippyInstance:t,_mutationObservers:[g]}),pt++,e},[])}function Re(e,t){return m(e)&&(e={refObj:!0,attributes:e.attributes||{},getBoundingClientRect:e.getBoundingClientRect,clientWidth:e.clientWidth,clientHeight:e.clientHeight,setAttribute:function(t,n){e.attributes[t]=n},getAttribute:function(t){return e.attributes[t]},removeAttribute:function(t){delete e.attributes[t]},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(t){e.classList.classNames[t]=!0},remove:function(t){return e.classList.classNames[t]=!1,!0},contains:function(t){return!!e.classList.classNames[t]}}}),new ht(e,t)}var $e={};"undefined"!=typeof window&&($e.SUPPORTED="requestAnimationFrame"in window,$e.SUPPORTS_TOUCH="ontouchstart"in window,$e.touch=!1,$e.dynamicInputDetection=!0,$e.iOS=function(){return/iPhone|iPad|iPod/.test(navigator.userAgent)&&!window.MSStream});var _e=[],He={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-tooltip-content",CIRCLE:"[x-circle]",ARROW:"[x-arrow]",TOOLTIPPED_EL:"[data-tooltipped]",CONTROLLER:"[data-tippy-controller]"},Be={html:!1,position:"top",animation:"shift",animateFill:!0,arrow:!1,arrowSize:"regular",delay:0,trigger:"mouseenter focus",duration:350,interactive:!1,interactiveBorder:2,theme:"dark",size:"regular",distance:10,offset:0,hideOnClick:!0,multiple:!1,followCursor:!1,inertia:!1,flipDuration:350,sticky:!1,stickyDuration:200,appendTo:function(){return document.body},zIndex:9999,touchHold:!1,performance:!1,dynamicTitle:!1,popperOptions:{}},qe=$e.SUPPORTED&&Object.keys(Be),We={};if("undefined"!=typeof Element){var Ye=Element.prototype;We=Ye.matches||Ye.matchesSelector||Ye.webkitMatchesSelector||Ye.mozMatchesSelector||Ye.msMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}}for(var ze=We,Ue="undefined"!=typeof window&&"undefined"!=typeof document,Ge=["Edge","Trident","Firefox"],Xe=0,Ve=0;Ve<Ge.length;Ve+=1)if(Ue&&navigator.userAgent.indexOf(Ge[Ve])>=0){Xe=1;break}var Ke=Ue&&window.Promise,Ze=Ke?w:k,Qe=void 0,Je=function(){return void 0===Qe&&(Qe=-1!==navigator.appVersion.indexOf("MSIE 10")),Qe},et=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},tt=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),nt=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},it=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},rt=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],ot=rt.slice(3),at={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"},st={shift:{order:100,enabled:!0,fn:Ce},offset:{order:200,enabled:!0,fn:we,offset:0},preventOverflow:{order:300,enabled:!0,fn:ke,priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:ye},arrow:{order:500,enabled:!0,fn:he,element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:ve,behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:Ee},hide:{order:800,enabled:!0,fn:Se},computeStyle:{order:850,enabled:!0,fn:fe,gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:ue,onLoad:de,gpuAcceleration:void 0}},lt={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:st},ct=function(){function e(t,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};et(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=Ze(this.update.bind(this)),this.options=it({},e.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(it({},e.Defaults.modifiers,r.modifiers)).forEach(function(t){i.options.modifiers[t]=it({},e.Defaults.modifiers[t]||{},r.modifiers?r.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return it({name:e},i.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&C(e.onLoad)&&e.onLoad(i.reference,i.popper,i.options,e,i.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return tt(e,[{key:"update",value:function(){return Z.call(this)}},{key:"destroy",value:function(){return ee.call(this)}},{key:"enableEventListeners",value:function(){return re.call(this)}},{key:"disableEventListeners",value:function(){return ae.call(this)}}]),e}();ct.Utils=("undefined"!=typeof window?window:global).PopperUtils,ct.placements=rt,ct.Defaults=lt;var ut=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},dt=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),ft=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},pt=1,ht=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};ut(this,e),$e.SUPPORTED&&(r(),this.state={destroyed:!1},this.selector=t,this.settings=ft({},Be,n),(n.show||n.shown||n.hide||n.hidden)&&console.warn("Callbacks without the `on` prefix are deprecated (with the exception of `wait`). Use onShow, onShown, onHide, and onHidden instead."),this.callbacks={wait:n.wait,show:n.onShow||n.show||g,shown:n.onShown||n.shown||g,hide:n.onHide||n.hide||g,hidden:n.onHidden||n.hidden||g},this.store=Fe.call(this,b(t)),_e.push.apply(_e,this.store))}return dt(e,[{key:"getPopperElement",value:function(e){try{return n(this.store,function(t){return t.el===e}).popper}catch(e){console.error("[getPopperElement]: Element passed as the argument does not exist in the instance")}}},{key:"getReferenceElement",value:function(e){try{return n(this.store,function(t){return t.popper===e}).el}catch(e){console.error("[getReferenceElement]: Popper passed as the argument does not exist in the instance")}}},{key:"getReferenceData",value:function(e){return n(this.store,function(t){return t.el===e||t.popper===e})}},{key:"show",value:function(e,t){var i=this;if(!this.state.destroyed){var r=n(this.store,function(t){return t.popper===e}),a=f(e),s=a.tooltip,l=a.circle,c=a.content;if(!this.selector.refObj&&!document.body.contains(r.el))return void this.destroy(e);this.callbacks.show.call(e);var g=r.el,m=r.settings,v=(m.appendTo,m.sticky),y=m.interactive,b=m.followCursor,w=m.flipDuration,k=m.duration,C=void 0!==t?t:Array.isArray(k)?k[0]:k;p([e,s,l],0),Pe(r),e.style.visibility="visible",e.setAttribute("aria-hidden","false"),o(function(){h(e)&&(b&&!$e.touch||(r.popperInstance.update(),p([e],w)),p([s,l],C),l&&(c.style.opacity=1),y&&g.classList.add("active"),v&&Me(r),u(s,l),d([s,l],function(e){e.contains("tippy-notransition")&&e.remove("tippy-notransition"),e.remove("leave"),e.add("enter")}),x(r,C,function(){h(e)&&!r._onShownFired&&(y&&e.focus(),s.classList.add("tippy-notransition"),r._onShownFired=!0,i.callbacks.shown.call(e))}))})}}},{key:"hide",value:function(e,t){var i=this;if(!this.state.destroyed){this.callbacks.hide.call(e);var r=n(this.store,function(t){return t.popper===e}),o=f(e),a=o.tooltip,s=o.circle,l=o.content,u=r.el,g=r.settings,m=g.appendTo,v=(g.sticky,g.interactive),b=(g.followCursor,g.html),w=g.trigger,k=g.duration,C=void 0!==t?t:Array.isArray(k)?k[1]:k;r._onShownFired=!1,v&&u.classList.remove("active"),e.style.visibility="hidden",e.setAttribute("aria-hidden","true"),p([a,s,s?l:null],C),s&&(l.style.opacity=0),d([a,s],function(e){e.contains("tippy-tooltip")&&e.remove("tippy-notransition"),e.remove("enter"),e.add("leave")}),b&&-1!==w.indexOf("click")&&c(u)&&u.focus(),x(r,C,function(){!h(e)&&m.contains(e)&&"1"!==getComputedStyle(a).opacity&&(u.removeEventListener("mousemove",y),r.popperInstance.disableEventListeners(),m.removeChild(e),i.callbacks.hidden.call(e))})}}},{key:"update",value:function(e){if(!this.state.destroyed){var t=n(this.store,function(t){return t.popper===e}),i=f(e),r=i.content,o=t.el,a=t.settings.html;if(a instanceof Element)return void console.warn("Aborted: update() should not be used if `html` is a DOM element");r.innerHTML=a?document.getElementById(a.replace("#","")).innerHTML:o.getAttribute("title")||o.getAttribute("data-original-title"),a||l(o)}}},{key:"destroy",value:function(e,t){var i=this;if(!this.state.destroyed){var r=n(this.store,function(t){return t.popper===e}),o=r.el,a=r.popperInstance,l=r.listeners,c=r._mutationObservers;h(e)&&this.hide(e,0),l.forEach(function(e){return o.removeEventListener(e.event,e.handler)}),o.setAttribute("title",o.getAttribute("data-original-title")),o.removeAttribute("data-original-title"),o.removeAttribute("data-tooltipped"),o.removeAttribute("aria-describedby"),a&&a.destroy(),c.forEach(function(e){e&&e.disconnect()}),_e.splice(s(_e,function(t){return t.popper===e}),1),(void 0===t||t)&&(this.store=_e.filter(function(e){return e.tippyInstance===i}))}}},{key:"destroyAll",value:function(){var e=this;if(!this.state.destroyed){var t=this.store.length;this.store.forEach(function(n,i){var r=n.popper;e.destroy(r,i===t-1)}),this.store=null,this.state.destroyed=!0}}}]),e}();return Re.Browser=$e,Re.Defaults=Be,Re.disableDynamicInputDetection=function(){return $e.dynamicInputDetection=!1},Re.enableDynamicInputDetection=function(){return $e.dynamicInputDetection=!0},Re}),function(){$("[data-enter-date]").on("click",function(){var e=$(this).parents(".cabinet-risks-recommendation");return e.find(".cabinet-risks-recommendation-default-state").hide(),e.find(".cabinet-risks-recommendation-enter-date-state").show(),!1}),$("[data-save-date]").on("click",function(){var e=$(this).data("save-date"),t=$(this).parents(".cabinet-risks-recommendation"),n=t.find(".cabinet-risks-recommendation-enter-date input").val();return n?($.ajax({method:"POST",url:"/procedure",dataType:"json",data:{date:n,procedure:e,_token:$("input[name=_token]").val()},success:function(e){t.find(".cabinet-risks-recommendation-date").text(e.nextDate),t.find(".cabinet-risks-recommendation-enter-date-state").hide(),t.find(".cabinet-risks-recommendation-default-state").show()}}),!1):(t.find(".cabinet-risks-recommendation-enter-date input").focus(),!1)})}(),function(){$("[data-flatpickr]").each(function(){var e={locale:"ru",dateFormat:"d.m.Y"},t=$(this).data("flatpickr");for(var n in t)e[n]=t[n];$(this).flatpickr(e)})}(),function(){$(".js-header-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(".js-header-slider-next").click(function(){return e.goToNextSlide(),!1}),$(".js-header-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})}),$(".js-header-about-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!0});$(window).resize(function(){e.reloadSlider()})})}(),function(){$(".js-logotypes-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-next").click(function(){return e.goToNextSlide(),!1}),$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})})}(),function(){$("#recommendations-subscribe").on("change",function(){var e=$(this).parents("form");window.recommendationTimeout&&clearTimeout(window.recommendationTimeout),window.recommendationTimeout=setTimeout(function(){e.submit()},1300)})}(),function(){function e(t,n,i){$(t.target).closest(n).length||(i(),$(document).off("click","body",e))}$(".js-offcanvas").click(function(){function t(){$(".js-offcanvas, "+n).removeClass("active")}var n="#offcanvas",i="#offcanvas > .main-offcanvas";return $(this).hasClass("active")?t():function(){$(".js-offcanvas").addClass("active"),$(n).addClass("active"),$(document).on("click","body",function(n){e(n,i,t)})}(),!1})}(),function(e){e.fn.toggler=function(){return this.each(function(){e(this).on("click",function(t){var n=e(this).data("toggle")||e(this).attr("href"),i=e(this).data("toggle-class")||"active",r=e(this).data("toggle-group"),o=e(this).is("[data-toggle-self-deactive]");return console.log(n,i,r),e('[data-toggle-group="'+r+'"]').not(this).each(function(){var t=e(this).data("toggle")||e(this).attr("href"),n=e(this).data("toggle-class")||"active";e(t).removeClass(n),e(this).removeClass(n)}),e(this).hasClass(i)&&o?(e(this).removeClass(i),e(n).removeClass(i)):(e(this).addClass(i),e(n).addClass(i)),!1})}),this}}(jQuery),$(document).ready(function(){$("[data-toggle]").toggler(),$(":input").inputmask(),tippy("[data-tooltip]",{theme:"light"})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsImpxdWVyeS5ieHNsaWRlci5qcyIsImpxdWVyeS5mYW5jeWJveC5qcyIsImpxdWVyeS5pbnB1dG1hc2suYnVuZGxlLmpzIiwiZmxhdHBpY2tyLmpzIiwicnUuanMiLCJ0aXBweS5qcyIsImVudGVyLWRhdGUuanMiLCJoZWFkZXItc2xpZGVyLmpzIiwibG9nb3R5cGVzLXNsaWRlci5qcyIsIm5vdGlmaWNhdG9ucy1jaGVjay5qcyIsIm9mZmNhbnZhcy5qcyIsInRvZ2dsZXIuanMiLCJzY3JpcHRzLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaXNBcnJheUxpa2UiLCJvYmoiLCJsZW5ndGgiLCJ0eXBlIiwialF1ZXJ5IiwiaXNXaW5kb3ciLCJub2RlTmFtZSIsImVsZW0iLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJ3aW5ub3ciLCJlbGVtZW50cyIsInF1YWxpZmllciIsIm5vdCIsImlzRnVuY3Rpb24iLCJncmVwIiwiaSIsImNhbGwiLCJub2RlVHlwZSIsImluZGV4T2YiLCJyaXNTaW1wbGUiLCJ0ZXN0IiwiZmlsdGVyIiwic2libGluZyIsImN1ciIsImRpciIsImNyZWF0ZU9wdGlvbnMiLCJvcHRpb25zIiwib2JqZWN0IiwiZWFjaCIsIm1hdGNoIiwicm5vdGh0bWx3aGl0ZSIsIl8iLCJmbGFnIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZG9uZSIsImZhaWwiLCJ0aGVuIiwiYXBwbHkiLCJ1bmRlZmluZWQiLCJzbGljZSIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeSIsIkRhdGEiLCJleHBhbmRvIiwidWlkIiwiZ2V0RGF0YSIsImRhdGEiLCJyYnJhY2UiLCJKU09OIiwicGFyc2UiLCJkYXRhQXR0ciIsImtleSIsInJlcGxhY2UiLCJybXVsdGlEYXNoIiwiZ2V0QXR0cmlidXRlIiwiZSIsImRhdGFVc2VyIiwic2V0IiwiYWRqdXN0Q1NTIiwicHJvcCIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiY3NzIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwicmNzc051bSIsImV4ZWMiLCJzdHlsZSIsInN0YXJ0IiwiZW5kIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJ0ZW1wIiwib3duZXJEb2N1bWVudCIsImRpc3BsYXkiLCJkZWZhdWx0RGlzcGxheU1hcCIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJpbmRleCIsImRhdGFQcml2IiwiZ2V0IiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiZ2V0QWxsIiwiY29udGV4dCIsInRhZyIsInJldCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicXVlcnlTZWxlY3RvckFsbCIsIm1lcmdlIiwic2V0R2xvYmFsRXZhbCIsImVsZW1zIiwicmVmRWxlbWVudHMiLCJsIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwidG1wIiwid3JhcCIsImNvbnRhaW5zIiwiaiIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwicmh0bWwiLCJydGFnTmFtZSIsIndyYXBNYXAiLCJfZGVmYXVsdCIsImlubmVySFRNTCIsImh0bWxQcmVmaWx0ZXIiLCJsYXN0Q2hpbGQiLCJjaGlsZE5vZGVzIiwiZmlyc3RDaGlsZCIsInRleHRDb250ZW50IiwicHVzaCIsImNyZWF0ZVRleHROb2RlIiwiaW5BcnJheSIsInJzY3JpcHRUeXBlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiZXJyIiwib24iLCJ0eXBlcyIsInNlbGVjdG9yIiwiZm4iLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImFyZ3VtZW50cyIsImd1aWQiLCJhZGQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJjb250ZW50IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJlbW92ZUF0dHJpYnV0ZSIsImNsb25lQ29weUV2ZW50Iiwic3JjIiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZXZlbnRzIiwiaGFzRGF0YSIsImFjY2VzcyIsImhhbmRsZSIsImV4dGVuZCIsImZpeElucHV0IiwicmNoZWNrYWJsZVR5cGUiLCJjaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiYXJncyIsImNhbGxiYWNrIiwiY29uY2F0IiwiZmlyc3QiLCJoYXNTY3JpcHRzIiwibm9kZSIsImlOb0Nsb25lIiwic3VwcG9ydCIsImNoZWNrQ2xvbmUiLCJyY2hlY2tlZCIsInNlbGYiLCJlcSIsImh0bWwiLCJtYXAiLCJjbG9uZSIsIl9ldmFsVXJsIiwicmNsZWFuU2NyaXB0IiwicmVtb3ZlIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFN0eWxlcyIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbE1hcmdpblJpZ2h0Iiwicm51bW5vbnB4Iiwicm1hcmdpbiIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwidmVuZG9yUHJvcE5hbWUiLCJlbXB0eVN0eWxlIiwiY2FwTmFtZSIsInRvVXBwZXJDYXNlIiwiY3NzUHJlZml4ZXMiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF0Y2hlcyIsIk1hdGgiLCJtYXgiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJ2YWwiLCJjc3NFeHBhbmQiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsImJveFNpemluZ1JlbGlhYmxlIiwicGFyc2VGbG9hdCIsIlR3ZWVuIiwiZWFzaW5nIiwicHJvdG90eXBlIiwiaW5pdCIsInNjaGVkdWxlIiwiaW5Qcm9ncmVzcyIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJmeCIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZnhOb3ciLCJub3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsIndoaWNoIiwiYXR0cnMiLCJoZWlnaHQiLCJvcGFjaXR5IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsImRlZmF1bHRQcmVmaWx0ZXIiLCJwcm9wcyIsIm9wdHMiLCJ0b2dnbGUiLCJob29rcyIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiYW5pbSIsIm9yaWciLCJkYXRhU2hvdyIsInF1ZXVlIiwiX3F1ZXVlSG9va3MiLCJ1bnF1ZXVlZCIsImVtcHR5IiwiZmlyZSIsImFsd2F5cyIsInJmeHR5cGVzIiwiaXNFbXB0eU9iamVjdCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJvcEZpbHRlciIsInNwZWNpYWxFYXNpbmciLCJjYW1lbENhc2UiLCJBcnJheSIsImlzQXJyYXkiLCJjc3NIb29rcyIsImV4cGFuZCIsInByb3BlcnRpZXMiLCJyZXN1bHQiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImRlZmVycmVkIiwiRGVmZXJyZWQiLCJjdXJyZW50VGltZSIsInJlbWFpbmluZyIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwicGVyY2VudCIsInR3ZWVucyIsInJ1biIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsInN0b3AiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsInByb3h5IiwicHJvZ3Jlc3MiLCJjb21wbGV0ZSIsInRpbWVyIiwic3RyaXBBbmRDb2xsYXBzZSIsImpvaW4iLCJnZXRDbGFzcyIsImJ1aWxkUGFyYW1zIiwicHJlZml4IiwidHJhZGl0aW9uYWwiLCJyYnJhY2tldCIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImZ1bmMiLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsInVuc2hpZnQiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdCIsInNlbGVjdGVkIiwiaW5zcGVjdGVkIiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsInNlZWtpbmdUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwiYWpheEV4dGVuZCIsInRhcmdldCIsImRlZXAiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJzIiwicmVzcG9uc2VzIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImNvbnRlbnRzIiwic2hpZnQiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwicHJldiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInNwbGl0IiwidGhyb3dzIiwic3RhdGUiLCJlcnJvciIsImFyciIsImdldFByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInJ0cmltIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJwcmV2T2JqZWN0IiwibGFzdCIsImxlbiIsInNvcnQiLCJzcGxpY2UiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJpc1BsYWluT2JqZWN0IiwicmFuZG9tIiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJpc051bWVyaWMiLCJpc05hTiIsInByb3RvIiwiQ3RvciIsImdsb2JhbEV2YWwiLCJzdHJpbmciLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsInNlY29uZCIsImludmVydCIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiRGF0ZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiU2l6emxlIiwic2VlZCIsIm0iLCJuaWQiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJwcmVmZXJyZWREb2MiLCJzZXREb2N1bWVudCIsImRvY3VtZW50SXNIVE1MIiwicnF1aWNrRXhwciIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwiY29tcGlsZXJDYWNoZSIsInJidWdneVFTQSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwic2V0QXR0cmlidXRlIiwidG9rZW5pemUiLCJ0b1NlbGVjdG9yIiwicnNpYmxpbmciLCJ0ZXN0Q29udGV4dCIsInFzYUVycm9yIiwic2VsZWN0IiwiY3JlYXRlQ2FjaGUiLCJjYWNoZSIsImtleXMiLCJFeHByIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiYSIsImIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiZGlzYWJsZWQiLCJpc0Rpc2FibGVkIiwiZGlzYWJsZWRBbmNlc3RvciIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsInNldEZpbHRlcnMiLCJ0b2tlbnMiLCJhZGRDb21iaW5hdG9yIiwibWF0Y2hlciIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsIm5leHQiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJ4bWwiLCJvbGRDYWNoZSIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5ld0NhY2hlIiwiZGlycnVucyIsInVuaXF1ZUlEIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsIm11bHRpcGxlQ29udGV4dHMiLCJjb250ZXh0cyIsImNvbmRlbnNlIiwidW5tYXRjaGVkIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInByZUZpbHRlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwicmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0Iiwib3V0ZXJtb3N0Q29udGV4dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImZpbmQiLCJkaXJydW5zVW5pcXVlIiwicG9wIiwidW5pcXVlU29ydCIsImdldFRleHQiLCJpc1hNTCIsImNvbXBpbGUiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwicmJ1Z2d5TWF0Y2hlcyIsImNsYXNzQ2FjaGUiLCJ0b2tlbkNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZWxzIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCI+IiwiICIsIisiLCJ+IiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIm5vZGVJbmRleCIsInBhcmVudCIsInVzZUNhY2hlIiwicHNldWRvIiwiaWR4IiwibWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsInNlbGVjdGVkSW5kZXgiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInRva2VuIiwiY29tcGlsZWQiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwicmV2ZXJzZSIsIkNhbGxiYWNrcyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwidHVwbGVzIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93IiwibWF4RGVwdGgiLCJUeXBlRXJyb3IiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsImNvbnNvbGUiLCJ3YXJuIiwibWVzc2FnZSIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsImFjY2VwdERhdGEiLCJvd25lciIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJzd2FwIiwib2xkIiwiaGlkZSIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZGl2IiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsInQiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImFkZFByb3AiLCJob29rIiwiRXZlbnQiLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwidHJpZ2dlciIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjc3NUZXh0IiwiY29udGFpbmVyIiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwibWFyZ2luTGVmdCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwibWFyZ2luUmlnaHQiLCJwaXhlbE1hcmdpblJpZ2h0VmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0IiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZsb2F0Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJlYXNlZCIsInBvcyIsInN0ZXAiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJycnVuIiwiKiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJwYXJzZUludCIsImZvciIsImNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImZvY3VzaW4iLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1cyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJoZWFkZXJzIiwic3VjY2VzcyIsIm1vZGlmaWVkIiwic3RhdHVzVGV4dCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJyZXNwb25zZUhlYWRlcnMiLCJ1cmxBbmNob3IiLCJ1bmNhY2hlZCIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJhYm9ydCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJiZWZvcmVTZW5kIiwic2VuZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsImNsaWVudFRvcCIsInBhZ2VYT2Zmc2V0IiwiY2xpZW50TGVmdCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJkZWZhdWx0cyIsIm1vZGUiLCJzbGlkZVNlbGVjdG9yIiwiaW5maW5pdGVMb29wIiwiaGlkZUNvbnRyb2xPbkVuZCIsInNsaWRlTWFyZ2luIiwic3RhcnRTbGlkZSIsInJhbmRvbVN0YXJ0IiwiY2FwdGlvbnMiLCJ0aWNrZXIiLCJ0aWNrZXJIb3ZlciIsImFkYXB0aXZlSGVpZ2h0IiwiYWRhcHRpdmVIZWlnaHRTcGVlZCIsInZpZGVvIiwidXNlQ1NTIiwicHJlbG9hZEltYWdlcyIsInJlc3BvbnNpdmUiLCJzbGlkZVpJbmRleCIsIndyYXBwZXJDbGFzcyIsInRvdWNoRW5hYmxlZCIsInN3aXBlVGhyZXNob2xkIiwib25lVG9PbmVUb3VjaCIsInByZXZlbnREZWZhdWx0U3dpcGVYIiwicHJldmVudERlZmF1bHRTd2lwZVkiLCJhcmlhTGl2ZSIsImFyaWFIaWRkZW4iLCJrZXlib2FyZEVuYWJsZWQiLCJwYWdlciIsInBhZ2VyVHlwZSIsInBhZ2VyU2hvcnRTZXBhcmF0b3IiLCJwYWdlclNlbGVjdG9yIiwiYnVpbGRQYWdlciIsInBhZ2VyQ3VzdG9tIiwiY29udHJvbHMiLCJuZXh0VGV4dCIsInByZXZUZXh0IiwibmV4dFNlbGVjdG9yIiwicHJldlNlbGVjdG9yIiwiYXV0b0NvbnRyb2xzIiwic3RhcnRUZXh0Iiwic3RvcFRleHQiLCJhdXRvQ29udHJvbHNDb21iaW5lIiwiYXV0b0NvbnRyb2xzU2VsZWN0b3IiLCJhdXRvIiwicGF1c2UiLCJhdXRvU3RhcnQiLCJhdXRvRGlyZWN0aW9uIiwic3RvcEF1dG9PbkNsaWNrIiwiYXV0b0hvdmVyIiwiYXV0b0RlbGF5IiwiYXV0b1NsaWRlRm9yT25lUGFnZSIsIm1pblNsaWRlcyIsIm1heFNsaWRlcyIsIm1vdmVTbGlkZXMiLCJzbGlkZVdpZHRoIiwic2hyaW5rSXRlbXMiLCJvblNsaWRlckxvYWQiLCJvblNsaWRlQmVmb3JlIiwib25TbGlkZUFmdGVyIiwib25TbGlkZU5leHQiLCJvblNsaWRlUHJldiIsIm9uU2xpZGVyUmVzaXplIiwib25BdXRvQ2hhbmdlIiwiYnhTbGlkZXIiLCJzbGlkZXIiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsImZsb29yIiwiY2Fyb3VzZWwiLCJtaW5UaHJlc2hvbGQiLCJtYXhUaHJlc2hvbGQiLCJ3b3JraW5nIiwiYW5pbVByb3AiLCJ1c2luZ0NTUyIsImNzc1ByZWZpeCIsInByZWxvYWRTZWxlY3RvciIsInZpZXdwb3J0IiwibG9hZGVyIiwiZ2V0Vmlld3BvcnRNYXhXaWR0aCIsImxpc3RTdHlsZSIsImdldFNsaWRlV2lkdGgiLCJhcHBlbmRDYXB0aW9ucyIsImdldFBhZ2VyUXR5IiwiZml0VmlkcyIsImFwcGVuZENvbnRyb2xzIiwiYXBwZW5kQ29udHJvbHNBdXRvIiwiYXBwZW5kUGFnZXIiLCJsb2FkRWxlbWVudHMiLCJ0b3RhbCIsInNsaWNlQXBwZW5kIiwic2xpY2VQcmVwZW5kIiwic2V0U2xpZGVQb3NpdGlvbiIsImdldFZpZXdwb3J0SGVpZ2h0IiwicmVkcmF3U2xpZGVyIiwiaW5pdGlhbGl6ZWQiLCJyZXNpemVXaW5kb3ciLCJpbml0QXV0byIsImluaXRUaWNrZXIiLCJ1cGRhdGVQYWdlckFjdGl2ZSIsInVwZGF0ZURpcmVjdGlvbkNvbnRyb2xzIiwiaW5pdFRvdWNoIiwia2V5ZG93biIsImtleVByZXNzIiwiY3VycmVudEluZGV4IiwiZ2V0TW92ZUJ5Iiwib3V0ZXJIZWlnaHQiLCJuZXdFbFdpZHRoIiwid3JhcFdpZHRoIiwiY2VpbCIsImdldE51bWJlclNsaWRlc1Nob3dpbmciLCJzbGlkZXNTaG93aW5nIiwiY2hpbGRXaWR0aCIsInBhZ2VyUXR5IiwiYnJlYWtQb2ludCIsImNvdW50ZXIiLCJsYXN0U2hvd2luZ0luZGV4Iiwic2V0UG9zaXRpb25Qcm9wZXJ0eSIsIm91dGVyV2lkdGgiLCJhbmltYXRlT2JqIiwicHJvcFZhbHVlIiwidXBkYXRlQWZ0ZXJTbGlkZVRyYW5zaXRpb24iLCJyZXNldFZhbHVlIiwidGlja2VyTG9vcCIsInBvcHVsYXRlUGFnZXIiLCJwYWdlckh0bWwiLCJsaW5rQ29udGVudCIsInBhZ2VyRWwiLCJjbGlja1BhZ2VyQmluZCIsImNsaWNrTmV4dEJpbmQiLCJjbGlja1ByZXZCaW5kIiwiZGlyZWN0aW9uRWwiLCJhdXRvRWwiLCJjbGlja1N0YXJ0QmluZCIsImNsaWNrU3RvcEJpbmQiLCJ1cGRhdGVBdXRvQ29udHJvbHMiLCJ0aXRsZSIsInN0b3BBdXRvIiwiZ29Ub05leHRTbGlkZSIsImdvVG9QcmV2U2xpZGUiLCJzdGFydEF1dG8iLCJwYWdlckxpbmsiLCJwYWdlckluZGV4IiwiZ29Ub1NsaWRlIiwic2xpZGVJbmRleCIsIm9sZEluZGV4Iiwid2luZG93Rm9jdXNIYW5kbGVyIiwid2luZG93Qmx1ckhhbmRsZXIiLCJhdXRvUGF1c2VkIiwidHJhbnNmb3JtIiwicmF0aW8iLCJwcm9wZXJ0eSIsIm5ld1NwZWVkIiwidG90YWxEaW1lbnMiLCJzdGFydFBvc2l0aW9uIiwiYWJzIiwicmVzdW1lU3BlZWQiLCJhbmltYXRlUHJvcGVydHkiLCJpc09uU2NyZWVuIiwiYm91bmRzIiwicmlnaHQiLCJib3R0b20iLCJhY3RpdmVFbGVtZW50VGFnIiwidGFnTmFtZSIsInRvdWNoIiwieCIsInkiLCJvblRvdWNoU3RhcnQiLCJvcmlnaW5hbFBvcyIsInRvdWNoUG9pbnRzIiwic2V0UG9pbnRlckNhcHR1cmUiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hFbmQiLCJvblBvaW50ZXJDYW5jZWwiLCJyZWxlYXNlUG9pbnRlckNhcHR1cmUiLCJ4TW92ZW1lbnQiLCJ5TW92ZW1lbnQiLCJjaGFuZ2UiLCJkaXN0YW5jZSIsIndpbmRvd1dpZHRoTmV3Iiwid2luZG93SGVpZ2h0TmV3IiwiYXBwbHlBcmlhSGlkZGVuQXR0cmlidXRlcyIsInN0YXJ0VmlzaWJsZUluZGV4IiwibnVtYmVyT2ZTbGlkZXNTaG93aW5nIiwic2V0U2xpZGVJbmRleCIsImRpcmVjdGlvbiIsInJlcXVlc3RFbCIsInBlcmZvcm1UcmFuc2l0aW9uIiwibW92ZUJ5IiwicHJldmVudENvbnRyb2xVcGRhdGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJnZXRDdXJyZW50U2xpZGUiLCJnZXRDdXJyZW50U2xpZGVFbGVtZW50IiwiZ2V0U2xpZGVFbGVtZW50IiwiZ2V0U2xpZGVDb3VudCIsImlzV29ya2luZyIsImRlc3Ryb3lTbGlkZXIiLCJyZWxvYWRTbGlkZXIiLCJfcnVuIiwiJHRhcmdldCIsIml0ZW1zIiwiZmFuY3lib3giLCJsb2ciLCJsb29wIiwiZ3V0dGVyIiwia2V5Ym9hcmQiLCJhcnJvd3MiLCJpbmZvYmFyIiwidG9vbGJhciIsImlkbGVUaW1lIiwic21hbGxCdG4iLCJwcm90ZWN0IiwibW9kYWwiLCJwcmVsb2FkIiwiaWZyYW1lIiwidHBsIiwic2Nyb2xsaW5nIiwiZGVmYXVsdFR5cGUiLCJhbmltYXRpb25FZmZlY3QiLCJhbmltYXRpb25EdXJhdGlvbiIsInpvb21PcGFjaXR5IiwidHJhbnNpdGlvbkVmZmVjdCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInNsaWRlQ2xhc3MiLCJiYXNlQ2xhc3MiLCJiYXNlVHBsIiwic3Bpbm5lclRwbCIsImVycm9yVHBsIiwiYnRuVHBsIiwiZG93bmxvYWQiLCJjbG9zZSIsImFycm93TGVmdCIsImFycm93UmlnaHQiLCJwYXJlbnRFbCIsImF1dG9Gb2N1cyIsImJhY2tGb2N1cyIsInRyYXBGb2N1cyIsImZ1bGxTY3JlZW4iLCJ2ZXJ0aWNhbCIsIm1vbWVudHVtIiwibWVkaWEiLCJzbGlkZVNob3ciLCJ0aHVtYnMiLCJoaWRlT25DbG9zZSIsImF4aXMiLCJvbkluaXQiLCJiZWZvcmVMb2FkIiwiYWZ0ZXJMb2FkIiwiYmVmb3JlU2hvdyIsImFmdGVyU2hvdyIsImJlZm9yZUNsb3NlIiwiYWZ0ZXJDbG9zZSIsIm9uQWN0aXZhdGUiLCJvbkRlYWN0aXZhdGUiLCJjbGlja0NvbnRlbnQiLCJjbGlja1NsaWRlIiwiY2xpY2tPdXRzaWRlIiwiZGJsY2xpY2tDb250ZW50IiwiZGJsY2xpY2tTbGlkZSIsImRibGNsaWNrT3V0c2lkZSIsIm1vYmlsZSIsImkxOG4iLCJlbiIsIkNMT1NFIiwiTkVYVCIsIlBSRVYiLCJFUlJPUiIsIlBMQVlfU1RBUlQiLCJQTEFZX1NUT1AiLCJGVUxMX1NDUkVFTiIsIlRIVU1CUyIsIkRPV05MT0FEIiwiU0hBUkUiLCJaT09NIiwiZGUiLCIkVyIsIiREIiwiY2FsbGVkIiwiaXNRdWVyeSIsInJlcXVlc3RBRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidHJhbnNpdGlvbkVuZCIsInRyYW5zaXRpb25zIiwidHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb24iLCJmb3JjZVJlZHJhdyIsIiRlbCIsIkZhbmN5Qm94IiwiaXNNb2JpbGUiLCJncm91cCIsImN1cnJJbmRleCIsInByZXZJbmRleCIsInByZXZQb3MiLCJjdXJyUG9zIiwiZmlyc3RSdW4iLCJjcmVhdGVHcm91cCIsIiRsYXN0Rm9jdXMiLCJzbGlkZXMiLCIkc2Nyb2xsRGl2IiwiJGNvbnRhaW5lciIsImJ1dHRvblN0ciIsImZpcnN0SXRlbSIsImZpcnN0SXRlbU9wdHMiLCJzY3JvbGxiYXJXaWR0aCIsImdldEluc3RhbmNlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiTVNTdHJlYW0iLCJzY3JvbGxIZWlnaHQiLCJpbm5lckhlaWdodCIsImNsaWVudFdpZHRoIiwidHJhbnNsYXRlIiwiJHJlZnMiLCJmb3JFYWNoIiwiaXRlbSIsImFjdGl2YXRlIiwianVtcFRvIiwic3RyIiwiJGl0ZW0iLCJzcmNQYXJ0cyIsIiRvcmlnIiwiY2hhckF0IiwiJHRodW1iIiwiYWRkRXZlbnRzIiwicmVtb3ZlRXZlbnRzIiwicHJldmlvdXMiLCJpc1NjYWxlZERvd24iLCJ1cGRhdGUiLCJzdGFnZSIsImluc3RhbmNlIiwiaXNDbG9zaW5nIiwia2V5Y29kZSIsImlkbGVTZWNvbmRzQ291bnRlciIsImlzSWRsZSIsInNob3dDb250cm9scyIsImlkbGVJbnRlcnZhbCIsImhpZGVDb250cm9scyIsInNsaWRlIiwiY2FudmFzV2lkdGgiLCJjdXJyZW50UG9zIiwidHJhbnNpdGlvblByb3BzIiwiZ3JvdXBMZW4iLCJpc1NsaWRpbmciLCJpc0FuaW1hdGluZyIsImNyZWF0ZVNsaWRlIiwidXBkYXRlQ29udHJvbHMiLCJnZXRUcmFuc2xhdGUiLCIkc2xpZGUiLCJpc01vdmVkIiwiZm9yY2VkRHVyYXRpb24iLCJsb2FkU2xpZGUiLCJyb3VuZCIsImlzTG9hZGVkIiwicmV2ZWFsQ29udGVudCIsImlzQ29tcGxldGUiLCJ1cGRhdGVTbGlkZSIsInNjYWxlVG9BY3R1YWwiLCJpbWdQb3MiLCJwb3NYIiwicG9zWSIsInNjYWxlWCIsInNjYWxlWSIsIiR3aGF0IiwiJGNvbnRlbnQiLCJjYW52YXNIZWlnaHQiLCJuZXdJbWdXaWR0aCIsIm5ld0ltZ0hlaWdodCIsImhhc0Vycm9yIiwidXBkYXRlQ3Vyc29yIiwiU2xpZGVTaG93IiwiaXNBY3RpdmUiLCJzY2FsZVRvRml0IiwiZ2V0Rml0UG9zIiwibWluUmF0aW8iLCJpbWdXaWR0aCIsImltZ0hlaWdodCIsIm1pbiIsInNldFRyYW5zbGF0ZSIsIm5leHRXaWR0aCIsIm5leHRIZWlnaHQiLCJpc1pvb21hYmxlIiwiZml0UG9zIiwicmV6IiwiY2FuUGFuIiwiYWpheExvYWQiLCJpc0xvYWRpbmciLCJzZXRJbWFnZSIsInNldElmcmFtZSIsInNldENvbnRlbnQiLCJzZXRFcnJvciIsInNob3dMb2FkaW5nIiwidGV4dFN0YXR1cyIsImZvdW5kIiwicHhSYXRpbyIsInNyY3NldCIsImRldmljZVBpeGVsUmF0aW8iLCJpbm5lcldpZHRoIiwic3Vic3RyaW5nIiwicG9zdGZpeCIsInRodW1iIiwiJGdob3N0Iiwic2V0QmlnSW1hZ2UiLCIkaW1nIiwiJGltYWdlIiwidGltb3V0cyIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJoaWRlTG9hZGluZyIsIiRpZnJhbWUiLCJnZXRUaW1lIiwic2Nyb2xsV2lkdGgiLCIkY29udGVudHMiLCIkYm9keSIsIiR3cmFwIiwiZnJhbWVXaWR0aCIsImZyYW1lSGVpZ2h0IiwiaWdub3JlIiwiY29udGVudFdpbmRvdyIsIiRwbGFjZWhvbGRlciIsIiRzbWFsbEJ0biIsIiRzcGlubmVyIiwiZWZmZWN0IiwiZWZmZWN0Q2xhc3NOYW1lIiwiZ2V0VGh1bWJQb3MiLCJzbGlkZVBvcyIsInRodW1iUG9zIiwiZWxlbWVudCIsImVsZW1lbnRSZWN0IiwicGFyZW50UmVjdHMiLCJwYXJlbnRFbGVtZW50IiwiZXZlcnkiLCJwYXJlbnRSZWN0IiwidmlzaWJsZVBpeGVsWCIsInZpc2libGVQaXhlbFkiLCJpc1Zpc2libGUiLCJkIiwiY2xlYW5VcCIsImZvcmNlIiwiJGNhcHRpb24iLCJpc0hpZGRlbkNvbnRyb2xzIiwidG9nZ2xlQ29udHJvbHMiLCJ2ZXJzaW9uIiwiY29tbWFuZCIsImRlc3Ryb3kiLCJjcmVhdGVUb3VjaCIsInVzZTNkIiwiZG9jdW1lbnRNb2RlIiwibWF0cml4IiwidHJhbnNSZWdleCIsInRyYW5zUmV6IiwibGVhdmVBbmltYXRpb25OYW1lIiwicHJvcGVydHlOYW1lIiwiZm9ybWF0IiwieW91dHViZSIsImF1dG9wbGF5IiwiYXV0b2hpZGUiLCJmcyIsInJlbCIsImhkIiwid21vZGUiLCJlbmFibGVqc2FwaSIsImh0bWw1IiwicGFyYW1QbGFjZSIsInZpbWVvIiwic2hvd190aXRsZSIsInNob3dfYnlsaW5lIiwic2hvd19wb3J0cmFpdCIsImZ1bGxzY3JlZW4iLCJhcGkiLCJtZXRhY2FmZSIsImRhaWx5bW90aW9uIiwiYWRkaXRpb25hbEluZm9zIiwidmluZSIsImluc3RhZ3JhbSIsImdtYXBfcGxhY2UiLCJnbWFwX3NlYXJjaCIsInVybFBhcmFtcyIsInBhcmFtT2JqIiwicHJvdmlkZXJOYW1lIiwicHJvdmlkZXJPcHRzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY29udGVudFByb3ZpZGVyIiwicHJvdmlkZXIiLCJjYW5jZWxBRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJvQ2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJwb2ludGVycyIsInBvaW50MiIsInBvaW50MSIsInNxcnQiLCJwb3ciLCJpc0NsaWNrYWJsZSIsIm9uY2xpY2siLCJhdHRzIiwic3Vic3RyIiwiaGFzU2Nyb2xsYmFycyIsImNsaWVudEhlaWdodCIsImhvcml6b250YWwiLCJpc1Njcm9sbGFibGUiLCJHdWVzdHVyZXMiLCIkYmciLCJiZyIsIiRzdGFnZSIsIm9udG91Y2hzdGFydCIsImlzVG91Y2hEZXZpY2UiLCJzdGFydFBvaW50cyIsImNhblRhcCIsImRpc3RhbmNlWCIsImRpc3RhbmNlWSIsImlzUGFubmluZyIsImlzU3dpcGluZyIsImlzWm9vbWluZyIsInNsaWRlclN0YXJ0UG9zIiwic2xpZGVyTGFzdFBvcyIsImNvbnRlbnRTdGFydFBvcyIsImNvbnRlbnRMYXN0UG9zIiwiY2VudGVyUG9pbnRTdGFydFgiLCJjZW50ZXJQb2ludFN0YXJ0WSIsInBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WCIsInBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WSIsInN0YXJ0RGlzdGFuY2VCZXR3ZWVuRmluZ2VycyIsIm9udG91Y2htb3ZlIiwibmV3UG9pbnRzIiwib25Td2lwZSIsIm9uUGFuIiwib25ab29tIiwiYW5nbGUiLCJzd2lwaW5nIiwiYXRhbjIiLCJpblRyYW5zaXRpb24iLCJyZXF1ZXN0SWQiLCJuZXdPZmZzZXRYIiwibmV3T2Zmc2V0WSIsIm5ld1BvcyIsImxpbWl0TW92ZW1lbnQiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsIm1pblRyYW5zbGF0ZVgiLCJtaW5UcmFuc2xhdGVZIiwibWF4VHJhbnNsYXRlWCIsIm1heFRyYW5zbGF0ZVkiLCJjdXJyZW50T2Zmc2V0WCIsImN1cnJlbnRPZmZzZXRZIiwibGltaXRQb3NpdGlvbiIsImN1cnJlbnRXaWR0aCIsImN1cnJlbnRIZWlnaHQiLCJlbmREaXN0YW5jZUJldHdlZW5GaW5nZXJzIiwicGluY2hSYXRpbyIsInRyYW5zbGF0ZUZyb21ab29taW5nWCIsInRyYW5zbGF0ZUZyb21ab29taW5nWSIsImNlbnRlclBvaW50RW5kWCIsImNlbnRlclBvaW50RW5kWSIsInRyYW5zbGF0ZUZyb21UcmFuc2xhdGluZ1giLCJ0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdZIiwib250b3VjaGVuZCIsImRNcyIsInBhbm5pbmciLCJ6b29taW5nIiwiZW5kUG9pbnRzIiwib25UYXAiLCJ2ZWxvY2l0eVgiLCJ2ZWxvY2l0eVkiLCJzcGVlZFgiLCJlbmRQYW5uaW5nIiwiZW5kWm9vbWluZyIsImVuZFN3aXBpbmciLCJ3aGVyZSIsInRhcFgiLCJ0YXBZIiwiYWN0aW9uIiwic3RhcnRFdmVudCIsInRhcHBlZCIsIiRidXR0b24iLCJjbGVhciIsIm9uSW5pdC5mYiIsImJlZm9yZVNob3cuZmIiLCJhZnRlclNob3cuZmIiLCJhZnRlcktleWRvd24uZmIiLCJrZXlwcmVzcyIsImJlZm9yZUNsb3NlLmZiIG9uRGVhY3RpdmF0ZS5mYiIsImZuTWFwIiwiRnVsbFNjcmVlbiIsInJlcXVlc3QiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIkFMTE9XX0tFWUJPQVJEX0lOUFVUIiwiZXhpdCIsImV4aXRGdWxsc2NyZWVuIiwiaXNGdWxsc2NyZWVuIiwiQm9vbGVhbiIsImZ1bGxzY3JlZW5FbGVtZW50IiwiZnVsbHNjcmVlbkVuYWJsZWQiLCJiZWZvcmVDbG9zZS5mYiIsImZ1bGxzY3JlZW5jaGFuZ2UiLCJGYW5jeVRodW1icyIsIiRncmlkIiwiJGxpc3QiLCJUaHVtYnMiLCJjcmVhdGUiLCJ3aWR0aFJhdGlvIiwiaGVpZ2h0UmF0aW8iLCIkcGFyZW50IiwidGh1bWJXaWR0aCIsInRodW1iSGVpZ2h0IiwibWFyZ2luLXRvcCIsIm1hcmdpbi1sZWZ0IiwiZXNjYXBlSHRtbCIsImVudGl0eU1hcCIsIiYiLCI8IiwiXCIiLCInIiwiLyIsImAiLCI9Iiwic2hhcmUiLCJmIiwicGFyc2VVcmwiLCJnYWxsZXJ5IiwidHJpZ2dlckZyb21VcmwiLCJzaG91bGRDcmVhdGVIaXN0b3J5IiwiZ2V0R2FsbGVyeUlEIiwiY3VycmVudEhhc2giLCJ0aW1lcklEIiwib3JpZ0hhc2giLCJoaXN0b3J5IiwicGF0aG5hbWUiLCJzZWFyY2giLCJyZXBsYWNlU3RhdGUiLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImMiLCJvIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJfdHlwZW9mIiwiSW5wdXRtYXNrIiwiYWxpYXMiLCJpbnRlcm5hbCIsIm1hc2tzZXQiLCJyZWZyZXNoVmFsdWUiLCJub01hc2tzQ2FjaGUiLCJkZWZpbml0aW9ucyIsInVzZXJPcHRpb25zIiwiaXNSVEwiLCJudW1lcmljSW5wdXQiLCJyZXNvbHZlQWxpYXMiLCJhbGlhc1N0ciIsImFsaWFzRGVmaW5pdGlvbiIsImFsaWFzZXMiLCJtYXNrIiwiZ2VuZXJhdGVNYXNrU2V0Iiwibm9jYWNoZSIsImdlbmVyYXRlTWFzayIsIm1ldGFkYXRhIiwicmVnZXhNYXNrIiwicmVnZXgiLCJncmVlZHkiLCJyZXBlYXQiLCJwbGFjZWhvbGRlciIsInJlcGVhdFN0YXJ0IiwiZ3JvdXBtYXJrZXIiLCJxdWFudGlmaWVybWFya2VyIiwibWFza3NldERlZmluaXRpb24iLCJtYXNrZGVmS2V5IiwibWFza3NDYWNoZSIsIm1hc2tUb2tlbiIsImFuYWx5c2VNYXNrIiwidmFsaWRQb3NpdGlvbnMiLCJfYnVmZmVyIiwiYnVmZmVyIiwidGVzdHMiLCJtYXNrTGVuZ3RoIiwia2VlcFN0YXRpYyIsImFsdE1hc2siLCJuZHgiLCJtc2siLCJhbHRlcm5hdG9ybWFya2VyIiwibWFza1Njb3BlIiwiYWN0aW9uT2JqIiwiZ2V0TWFza1RlbXBsYXRlIiwiYmFzZU9uSW5wdXQiLCJtaW5pbWFsUG9zIiwiaW5jbHVkZU1vZGUiLCJuZHhJbnRsenIiLCJ0ZXN0UG9zIiwibWFza1RlbXBsYXRlIiwibHZwIiwiZ2V0TGFzdFZhbGlkUG9zaXRpb24iLCJnZXRNYXNrU2V0IiwibG9jYXRvciIsIm5hdGl2ZURlZiIsImdldFBsYWNlaG9sZGVyIiwiZ2V0VGVzdFRlbXBsYXRlIiwiaml0TWFza2luZyIsIm1heExlbmd0aCIsImRlZiIsInJlc2V0TWFza1NldCIsInNvZnQiLCJjbG9zZXN0VG8iLCJzdHJpY3QiLCJ2YWxpZHMiLCJwb3NOZHgiLCJwc05keCIsImdlbmVyYXRlZElucHV0Iiwic3RyaXBWYWxpZFBvc2l0aW9ucyIsIm5vY2hlY2siLCJzdGFydFBvcyIsInBvc2l0aW9uc0Nsb25lIiwibmVlZHNWYWxpZGF0aW9uIiwib3B0aW9uYWxpdHkiLCJwb3NNYXRjaCIsInByZXZNYXRjaCIsIm5leHRNYXRjaCIsImNhbkNsZWFyUG9zaXRpb24iLCJpc01hc2siLCJwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbiIsImlzVmFsaWQiLCJkZXRlcm1pbmVUZXN0VGVtcGxhdGUiLCJndWVzc05leHRCZXN0IiwidGVzdFBvc2l0aW9ucyIsImx2VGVzdCIsImdldFRlc3RzIiwibHZUZXN0QWx0QXJyIiwiYWx0ZXJuYXRpb24iLCJvcHRpb25hbFF1YW50aWZpZXIiLCJuZXdCbG9ja01hcmtlciIsImNoZWNrQWx0ZXJuYXRpb25NYXRjaCIsInRzdFBzIiwiZ2V0VGVzdCIsInZhbGlkIiwidG5keCIsInJlc29sdmVUZXN0RnJvbVRva2VuIiwibmR4SW5pdGlhbGl6ZXIiLCJsb29wTmR4IiwicXVhbnRpZmllclJlY3Vyc2UiLCJoYW5kbGVNYXRjaCIsImlzRmlyc3RNYXRjaCIsImxhdGVzdE1hdGNoIiwidG9rZW5Hcm91cCIsImZpcnN0TWF0Y2giLCJpc1F1YW50aWZpZXIiLCJyZXNvbHZlTmR4SW5pdGlhbGl6ZXIiLCJhbHRlcm5hdGVOZHgiLCJ0YXJnZXRBbHRlcm5hdGlvbiIsImJlc3RNYXRjaCIsImluZGV4UG9zIiwidnBBbHRlcm5hdGlvbiIsInRwQWx0ZXJuYXRpb24iLCJsbW50IiwibmR4UG9zIiwiY2QiLCJjYWNoZURlcGVuZGVuY3kiLCJpc0dyb3VwIiwiaXNPcHRpb25hbCIsIm9wdGlvbmFsVG9rZW4iLCJpbnNlcnRTdG9wIiwiaXNBbHRlcm5hdG9yIiwibWFsdE1hdGNoZXMiLCJhbHRlcm5hdGVUb2tlbiIsIm1hbHRlcm5hdGVNYXRjaGVzIiwiY3VycmVudE1hdGNoZXMiLCJsb29wTmR4Q250IiwiYWx0SW5kZXgiLCJhbW5keCIsIm5keEluaXRpYWxpemVyQ2xvbmUiLCJhbHRJbmRleEFyciIsIm50bmR4IiwibmR4MSIsImFsdE1hdGNoIiwiZHJvcE1hdGNoIiwibmR4MiIsImFsdE1hdGNoMiIsIm5hIiwiYWx0TG9jQXJyIiwiYWxuZHgiLCJxdCIsInFuZHgiLCJxdWFudGlmaWVyIiwiZmlsdGVyVGVzdHMiLCJtYXNrVG9rZW5zIiwicHJldmlvdXNQb3MiLCJ0c3QiLCJtdG5keCIsImNhcmRpbmFsaXR5IiwiY2FzaW5nIiwiZ2V0QnVmZmVyVGVtcGxhdGUiLCJnZXRCdWZmZXIiLCJub0NhY2hlIiwicmVmcmVzaEZyb21CdWZmZXIiLCJza2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyIiwidmFsUmVzdWx0IiwiY2FyZXQiLCJwb3NCZWZvcmUiLCJTUEFDRSIsImFsdEFycjEiLCJhbHRBcnIyIiwibmFOZHgiLCJhbHRBcnJDIiwiaXNNYXRjaCIsIm5hQXJyIiwiZnJvbVNldFZhbGlkIiwiZnJvbUFsdGVybmF0ZSIsInZhbGlkYXRlT25seSIsImlzU2VsZWN0aW9uIiwicG9zT2JqIiwiYmVnaW4iLCJfaXNWYWxpZCIsInJzbHQiLCJsb29wZW5kIiwiY2hycyIsImdldEJ1ZmZlckVsZW1lbnQiLCJ2YWxpZGF0ZWRQb3MiLCJwb3NzaWJsZU1vZGlmaWVkQnVmZmVyIiwicmVmcmVzaCIsInNldFZhbGlkUG9zaXRpb24iLCJ2YWxpZFRlc3QiLCJpbnNlcnRNb2RlIiwidnBzIiwiaW5pdGlhbExlbmd0aCIsImZpbGxNaXNzaW5nTm9uTWFzayIsIm1hc2tQb3MiLCJwbmR4IiwidGVzdFRlbXBsYXRlIiwidGVzdHNGcm9tUG9zIiwicmFkaXhQb2ludERlZmluaXRpb25TeW1ib2wiLCJyYWRpeFBvaW50IiwicHJlVmFsaWRhdGlvbiIsImhhbmRsZVJlbW92ZSIsIkRFTEVURSIsImN1cnJlbnRQb3NWYWxpZCIsInNlZWtOZXh0IiwiblBvcyIsInNuUG9zIiwidnAiLCJ0YXJnZXRMb2NhdG9yIiwidGxsIiwicHMiLCJlcXVhbGl0eSIsInRhcmdldEFJIiwiYmVzdE1hdGNoQUkiLCJ0c3RBSSIsImxhc3RBbHQiLCJhbHRQb3MiLCJwcmV2QWx0UG9zIiwidmFsaWRQb3MiLCJhbHROZHhzIiwiZGVjaXNpb25Qb3MiLCJ2YWxpZFBzQ2xvbmUiLCJpc1ZhbGlkUnNsdCIsImxBbHRQb3MiLCJkZWNpc2lvblRha2VyIiwicG9zc2liaWxpdHlQb3MiLCJtbmR4IiwidmFsaWRJbnB1dHMiLCJzdGF0aWNJbnB1dHNCZWZvcmVQb3MiLCJzdGF0aWNJbnB1dHNCZWZvcmVQb3NBbHRlcm5hdGUiLCJ2ZXJpZnlWYWxpZElucHV0IiwicG9zc2liaWxpdGllcyIsInRhcmdldEx2cCIsInBvc3RWYWxpZGF0aW9uIiwicG9zdFJlc3VsdCIsIm5ld0Jsb2NrIiwibWFza0wiLCJzZWVrUHJldmlvdXMiLCJ3cml0ZUJ1ZmZlciIsImNhcmV0UG9zIiwidHJpZ2dlcklucHV0RXZlbnQiLCJvbkJlZm9yZVdyaXRlIiwiaW5wdXRtYXNrIiwiX3ZhbHVlU2V0IiwicmVuZGVyQ29sb3JNYXNrIiwiYW5kcm9pZCIsInNraXBJbnB1dEV2ZW50IiwicmV0dXJuUEwiLCJwcmV2VGVzdCIsInN0YXRpY0FsdGVybmF0aW9ucyIsImNoZWNrVmFsIiwid3JpdGVPdXQiLCJucHR2bCIsImluaXRpYXRpbmdFdmVudCIsImlzVGVtcGxhdGVNYXRjaCIsImNoYXJDb2RlcyIsImlucHV0VmFsdWUiLCJpbml0aWFsTmR4IiwiYXV0b1VubWFzayIsInN0YXRpY0lucHV0IiwiZXNjYXBlUmVnZXgiLCJuZXh0VGVzdCIsIkV2ZW50SGFuZGxlcnMiLCJrZXlwcmVzc0V2ZW50Iiwib3JpZ1Jlc3VsdCIsImZvcndhcmRQb3NpdGlvbiIsInVubWFza2VkdmFsdWUiLCJzZXRWYWx1ZUV2ZW50IiwidW1WYWx1ZSIsInVubWFza2VkVmFsdWUiLCJvblVuTWFzayIsImJ1ZmZlclZhbHVlIiwibm90cmFuc2xhdGUiLCJ0cmFuc2xhdGVQb3NpdGlvbiIsInJhbmdlIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImdldFJhbmdlQXQiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJkdXBsaWNhdGUiLCJtb3ZlU3RhcnQiLCJfdmFsdWVHZXQiLCJzY3JvbGxDYWxjIiwiY3VycmVudFN0eWxlIiwiZm9udFNpemUiLCJ0ZXh0Tm9kZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29sbGFwc2UiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImNyZWF0ZVRleHRSYW5nZSIsIm1vdmVFbmQiLCJkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbiIsInJldHVybkRlZmluaXRpb24iLCJibCIsInBvc2l0aW9ucyIsImx2VGVzdEFsdCIsImNsZWFyT3B0aW9uYWxUYWlsIiwicmwiLCJsdiIsImxycCIsImFtbCIsImsiLCJmcm9tSXNWYWxpZCIsIkJBQ0tTUEFDRSIsInBlbmQiLCJncm91cFNlcGFyYXRvciIsImluaXRpYWxpemVDb2xvck1hc2siLCJmaW5kQ2FyZXRQb3MiLCJjbGllbnR4IiwiY29tcHV0ZWRTdHlsZSIsInRleHRUcmFuc2Zvcm0iLCJ3aGl0ZVNwYWNlIiwiaXRsIiwiaW5wdXRUZXh0IiwicHJldmlvdXNXaWR0aCIsIm9mZnNldDEiLCJvZmZzZXQyIiwidGVtcGxhdGUiLCJ0ZXh0QWxpZ24iLCJjb2xvck1hc2siLCJvZmZzZXRMZWZ0IiwiY2xpY2tFdmVudCIsImhhbmRsZVN0YXRpYyIsImlzU3RhdGljIiwiaGFuZGxlQ2FyZXQiLCJwb3NpdGlvbkNvbG9yTWFzayIsInVuZG9WYWx1ZSIsInNraXBLZXlQcmVzc0V2ZW50IiwiaWdub3JhYmxlIiwibW91c2VFbnRlciIsIkV2ZW50UnVsZXIiLCJldmVudE5hbWUiLCJldmVudEhhbmRsZXIiLCJldiIsImltT3B0cyIsInJlYWRPbmx5IiwidGFiVGhyb3VnaCIsIlRBQiIsImllbW9iaWxlIiwiaXBob25lIiwicmV0dXJuVmFsIiwiZm9ybSIsImV2QXJyIiwia2V5ZG93bkV2ZW50IiwiJGlucHV0IiwiQkFDS1NQQUNFX1NBRkFSSSIsIlgiLCJpc1N1cHBvcnRlZCIsIkVORCIsIlBBR0VfRE9XTiIsIkhPTUUiLCJQQUdFX1VQIiwidW5kb09uRXNjYXBlIiwiRVNDQVBFIiwiSU5TRVJUIiwiUklHSFQiLCJMRUZUIiwib25LZXlEb3duIiwiaWdub3JhYmxlcyIsImNoZWNrdmFsIiwiRU5URVIiLCJ3cml0ZU91dEJ1ZmZlciIsIm9uS2V5VmFsaWRhdGlvbiIsInBhc3RlRXZlbnQiLCJ0ZW1wVmFsdWUiLCJ2YWx1ZUJlZm9yZUNhcmV0IiwidmFsdWVBZnRlckNhcmV0IiwiY2xpcGJvYXJkRGF0YSIsInBhc3RlVmFsdWUiLCJvbkJlZm9yZVBhc3RlIiwiaW5wdXRGYWxsQmFja0V2ZW50IiwiaW5wdXRDaGFyIiwiZnJvbnRQYXJ0IiwiYmFja1BhcnQiLCJmcm9udEJ1ZmZlclBhcnQiLCJiYWNrQnVmZmVyUGFydCIsImVudHJpZXMiLCJpc0VudHJ5IiwiZnBsIiwiZW50cnkiLCJvbkJlZm9yZU1hc2siLCJjbGVhck1hc2tPbkxvc3RGb2N1cyIsImNsZWFySW5jb21wbGV0ZSIsImZvY3VzRXZlbnQiLCJucHRWYWx1ZSIsInNob3dNYXNrT25Gb2N1cyIsInNob3dNYXNrT25Ib3ZlciIsInBvc2l0aW9uQ2FyZXRPblRhYiIsIm1vdXNlbGVhdmVFdmVudCIsInRhYmJlZCIsImRvUmFkaXhGb2N1cyIsImNsaWNrUG9zIiwicmFkaXhQb3MiLCJzZWxlY3RlZENhcmV0IiwicG9zaXRpb25DYXJldE9uQ2xpY2siLCJjbGlja1Bvc2l0aW9uIiwibHZjbGlja1Bvc2l0aW9uIiwibGFzdFBvc2l0aW9uIiwidHQiLCJkYmxjbGlja0V2ZW50IiwiY3V0RXZlbnQiLCJjbGlwRGF0YSIsInNldERhdGEiLCJleGVjQ29tbWFuZCIsImJsdXJFdmVudCIsIm1vdXNlZW50ZXJFdmVudCIsInN1Ym1pdEV2ZW50IiwicmVtb3ZlTWFza09uU3VibWl0IiwicmVzZXRFdmVudCIsInZhbHVlQnVmZmVyIiwiZWxlbWVudFR5cGUiLCJzdXBwb3J0c0lucHV0VHlwZSIsImlzQ29udGVudEVkaXRhYmxlIiwibnB0IiwibnVsbGFibGUiLCJ2YWx1ZUdldCIsInZhbHVlU2V0IiwiX192YWx1ZUdldCIsIm5vVmFsdWVQYXRjaGluZyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fcHJvdG9fXyIsInZhbHVlUHJvcGVydHkiLCJfX2xvb2t1cEdldHRlcl9fIiwiX19sb29rdXBTZXR0ZXJfXyIsIl9fZGVmaW5lR2V0dGVyX18iLCJfX2RlZmluZVNldHRlcl9fIiwiX192YWx1ZVNldCIsIm92ZXJydWxlUlRMIiwiaW5wdXRtYXNrcGF0Y2giLCJ2YWxob29rR2V0IiwidmFsaG9va1NldCIsIiRlbGVtIiwiaW5wdXRtb2RlIiwiYW5kcm9pZEhhY2siLCJvbmNvbXBsZXRlIiwib25pbmNvbXBsZXRlIiwib25jbGVhcmVkIiwiaW5wdXRFdmVudE9ubHkiLCJpbml0aWFsVmFsdWUiLCJsbWliIiwibWFza1RhcmdldCIsIm10ZHQiLCJ1YSIsImRhdGFBdHRyaWJ1dGUiLCJvcHRpb25hbG1hcmtlciIsImVzY2FwZUNoYXIiLCJwYXN0ZWRWYWx1ZSIsInJpZ2h0QWxpZ24iLCJzdGF0aWNEZWZpbml0aW9uU3ltYm9sIiwiaW1wb3J0RGF0YUF0dHJpYnV0ZXMiLCI5IiwidmFsaWRhdG9yIiwiZGVmaW5pdGlvblN5bWJvbCIsImltcG9ydEF0dHJpYnV0ZU9wdGlvbnMiLCJkYXRhb3B0aW9ucyIsIm9wdGlvbkRhdGEiLCJpbXBvcnRPcHRpb24iLCJhdHRyT3B0aW9ucyIsInNjb3BlZE9wdHMiLCJub3JlbWFzayIsImdldGVtcHR5bWFzayIsImhhc01hc2tlZFZhbHVlIiwiZ2V0bWV0YWRhdGEiLCJNYXNrVG9rZW4iLCJvcGVuR3JvdXAiLCJhbHRlcm5hdG9yR3JvdXAiLCJpbnNlcnRUZXN0RGVmaW5pdGlvbiIsIm10b2tlbiIsIm1hc2tkZWYiLCJwcmV2YWxpZGF0b3JzIiwicHJldmFsaWRhdG9yIiwicHJldmFsaWRhdG9yc0wiLCJ2ZXJpZnlHcm91cE1hcmtlciIsIm5leHRUb2tlbiIsImRlZmF1bHRDYXNlIiwib3BlbmVuaW5ncyIsImN1cnJlbnRPcGVuaW5nVG9rZW4iLCJhbHRlcm5hdG9yIiwiY3VycmVudFRva2VuIiwicmV2ZXJzZVRva2VucyIsImludE1hdGNoIiwic3QiLCJvcGVuaW5nVG9rZW4iLCJsYXN0TWF0Y2giLCJncm91cFRva2VuIiwidG9rZW5pemVyIiwicmVnZXhUb2tlbml6ZXIiLCJtcSIsIm1xMCIsIm1xMSIsInN1YlRva2VuIiwiZXh0ZW5kRGVmYXVsdHMiLCJleHRlbmREZWZpbml0aW9ucyIsImRlZmluaXRpb24iLCJleHRlbmRBbGlhc2VzIiwidW5tYXNrIiwic3BlY2lhbHMiLCJBTFQiLCJDQVBTX0xPQ0siLCJDT01NQSIsIkNPTU1BTkQiLCJDT01NQU5EX0xFRlQiLCJDT01NQU5EX1JJR0hUIiwiQ09OVFJPTCIsIkRPV04iLCJNRU5VIiwiTlVNUEFEX0FERCIsIk5VTVBBRF9ERUNJTUFMIiwiTlVNUEFEX0RJVklERSIsIk5VTVBBRF9FTlRFUiIsIk5VTVBBRF9NVUxUSVBMWSIsIk5VTVBBRF9TVUJUUkFDVCIsIlBFUklPRCIsIlNISUZUIiwiVVAiLCJXSU5ET1dTIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9pbnB1dG1hc2syIiwiX2lucHV0bWFzazQiLCJfanF1ZXJ5MiIsImhtciIsImxvY2FscyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJ0b0NvbW1lbnQiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsInNvdXJjZU1hcCIsInVuZXNjYXBlIiwic3RyaW5naWZ5IiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJhZGRTdHlsZXNUb0RvbSIsImRvbVN0eWxlIiwic3R5bGVzSW5Eb20iLCJyZWZzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJwYXJ0IiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiZ2V0RWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsInJlbW92ZVN0eWxlRWxlbWVudCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImFkZEF0dHJzIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJsaW5rIiwic2luZ2xldG9uIiwic3R5bGVJbmRleCIsInNpbmdsZXRvbkNvdW50ZXIiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsInVwZGF0ZUxpbmsiLCJhcHBseVRvVGFnIiwibmV3T2JqIiwic3R5bGVTaGVldCIsInJlcGxhY2VUZXh0IiwiY3NzTm9kZSIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwiZml4VXJscyIsImJsb2IiLCJvbGRTcmMiLCJpc09sZElFIiwibWVtbyIsImF0b2IiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VtZW50IiwiYmFzZVVybCIsImN1cnJlbnREaXIiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiLCJuZXdVcmwiLCJpc0xlYXBZZWFyIiwieWVhciIsImdldERhdGUiLCJkZC9tbS95eXl5IiwidmFsMXByZSIsInZhbDEiLCJ2YWwycHJlIiwic2VwYXJhdG9yIiwiZXNjYXBlZFNlcGFyYXRvciIsInZhbDIiLCJsZWFwZGF5IiwieWVhcnJhbmdlIiwibWlueWVhciIsIm1heHllYXIiLCJpc0luWWVhclJhbmdlIiwiZW50ZXJlZHllYXIiLCJlbnRlcmVkeWVhcjIiLCJkZXRlcm1pbmViYXNleWVhciIsImhpbnQiLCJjdXJyZW50eWVhciIsImdldEZ1bGxZZWFyIiwibWF4WWVhclByZWZpeCIsIm1heFllYXJQb3N0Zml4IiwibWF4eFllYXIiLCJjdXJyZW50WWVhclByZWZpeCIsImN1cnJlbnRZZWFyQW5kSGludCIsInRvZGF5IiwiZ2V0TW9udGgiLCJnZXRGcm9udFZhbHVlIiwiY3VycmVudFJlc3VsdCIsImRheU1vbnRoVmFsdWUiLCJidWZmZXJTdHIiLCIxIiwicGNocnMiLCIyIiwiZnJvbnRWYWx1ZSIsInllYXJQcmVmaXgiLCJtbS9kZC95eXl5IiwieXl5eS9tbS9kZCIsImRkLm1tLnl5eXkiLCJkZC1tbS15eXl5IiwibW0uZGQueXl5eSIsIm1tLWRkLXl5eXkiLCJ5eXl5Lm1tLmRkIiwieXl5eS1tbS1kZCIsImRhdGV0aW1lIiwiaHJzcHJlIiwiaHJzMjQiLCJocnMiLCJhbXBtIiwibXNwcmUiLCJtcyIsInRpbWVzZXBhcmF0b3IiLCJob3VyRm9ybWF0IiwiaCIsImRhdGV0aW1lMTIiLCJtbS9kZC95eXl5IGhoOm1tIHhtIiwiaGg6bW0gdCIsImg6cyB0IiwiaGg6bW06c3MiLCJoaDptbSIsImRhdGUiLCJtbS95eXl5Iiwic2hhbXNpIiwieXl5eS1tbS1kZCBoaDptbTpzcyIsIkEiLCIjIiwiaXAiLCJtYXNrZWRWYWx1ZSIsImVtYWlsIiwiLSIsIm1hYyIsInZpbiIsIlYiLCJhdXRvRXNjYXBlIiwidHh0IiwiZXNjYXBlZFR4dCIsIm51bWVyaWMiLCJpbnRlZ2VyRGlnaXRzIiwiYXV0b0dyb3VwIiwiZ3JvdXBTaXplIiwic2VwcyIsIm1vZCIsImludGVnZXJPcHRpb25hbCIsImRpZ2l0c09wdGlvbmFsIiwiZGlnaXRzIiwiZGVjaW1hbFByb3RlY3QiLCJkcSIsImVuZm9yY2VEaWdpdHNPbkJsdXIiLCJhbGxvd01pbnVzIiwibmVnYXRpb25TeW1ib2wiLCJmcm9udCIsImJhY2siLCJ1bm1hc2tBc051bWJlciIsImlzTmVnYXRpdmUiLCJkb3Bvc3QiLCJjaGFyQXRQb3MiLCJwcm9jZXNzVmFsdWUiLCJyYWRpeFBvc2l0aW9uIiwicnBiIiwiYWRkUmFkaXgiLCJwb3N0TWFzayIsInJhZGl4U3BsaXQiLCJuZXdDYXJldFBvcyIsInVubWFza2VkIiwicGFyc2VNaW5NYXhPcHRpb25zIiwiTmFOIiwiTnVtYmVyIiwiTUlOX1ZBTFVFIiwiTUFYX1ZBTFVFIiwiaW50ZWdlclBhcnQiLCJlbXB0eUNoZWNrIiwiaW50ZWdlck5QYXJ0IiwicHZSYWRpeFNwbGl0IiwiYnVmZmVyVGVtcGxhdGUiLCI6IiwicmFkaXgiLCJ2cyIsImtvbW1hTWF0Y2hlcyIsImRvdE1hdGNoZXMiLCJkZWNQYXJ0IiwiZGlnaXRzRmFjdG9yIiwiY2FuQ2xlYXIiLCJjdXJyZW5jeSIsImRlY2ltYWwiLCJpbnRlZ2VyIiwicGVyY2VudGFnZSIsIm1hc2tTb3J0IiwibWFza2EiLCJtYXNrYiIsIm1hc2thcyIsIm1hc2ticyIsImxvY2FsZUNvbXBhcmUiLCJhbmFseXNlTWFza0Jhc2UiLCJyZWR1Y2VWYXJpYXRpb25zIiwibWFza3MiLCJwcmV2aW91c1ZhcmlhdGlvbiIsInByZXZpb3VzbWFza0dyb3VwIiwibWFza0dyb3VwcyIsInZhcmlhdGlvbiIsIm1hc2tHcm91cCIsInJlYnVpbGQiLCJzdWJtYXNrcyIsInBob25lQ29kZXMiLCJhYnN0cmFjdHBob25lIiwiY291bnRyeWNvZGUiLCJwcm9jZXNzZWRWYWx1ZSIsIlJlZ2V4IiwicmVnZXhUb2tlbnMiLCJxdWFudGlmaWVyRmlsdGVyIiwiciIsIlJlZ2V4VG9rZW4iLCJyZXBlYXRlclBhcnQiLCJ2YWxpZGF0ZVJlZ2V4VG9rZW4iLCJmcm9tR3JvdXAiLCJpc3ZhbGlkIiwicmVnZXhQYXJ0Iiwib3Blbkdyb3VwQ291bnQiLCJtYXRjaFRva2VuIiwiY3JybnRuZHgiLCJtYXRjaEdyb3VwIiwicmVnZXhQYXJ0QmFrIiwicW0iLCJ0ZXN0RXhwIiwiZXhwIiwidGwiLCJjYnVmZmVyIiwib3Blbmdyb3VwcyIsInF1YW50aWZpZXJUb2tlbiIsInJlZ2V4VG9rZW4iLCJucHRtYXNrIiwiZmxhdHBpY2tyIiwiY29tcGFyZURhdGVzIiwiZGF0ZTEiLCJkYXRlMiIsInRpbWVsZXNzIiwic2V0SG91cnMiLCJkZWJvdW5jZSIsImltbWVkaWF0ZSIsIm1vdXNlRGVsdGEiLCJ3aGVlbERlbHRhIiwiZGVsdGFZIiwiY2xhc3NMaXN0IiwiY2xlYXJOb2RlIiwiZmluZFBhcmVudCIsImNvbmRpdGlvbiIsImNyZWF0ZU51bWJlcklucHV0IiwiaW5wdXRDbGFzc05hbWUiLCJ3cmFwcGVyIiwibnVtSW5wdXQiLCJhcnJvd1VwIiwiYXJyb3dEb3duIiwiRmxhdHBpY2tySW5zdGFuY2UiLCJpbnN0YW5jZUNvbmZpZyIsInNldHVwSGVscGVyRnVuY3Rpb25zIiwidXRpbHMiLCJnZXREYXlzSW5Nb250aCIsIm1vbnRoIiwieXIiLCJjdXJyZW50TW9udGgiLCJjdXJyZW50WWVhciIsImwxMG4iLCJkYXlzSW5Nb250aCIsImJpbmRUb0luc3RhbmNlIiwidXBkYXRlVGltZSIsImNvbmZpZyIsIm5vQ2FsZW5kYXIiLCJzZWxlY3RlZERhdGVzIiwibWluRGF0ZSIsInNldERhdGUiLCJnZXRIb3VycyIsImRlZmF1bHRIb3VyIiwiZ2V0TWludXRlcyIsImRlZmF1bHRNaW51dGUiLCJlbmFibGVTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsImRlZmF1bHRTZWNvbmRzIiwic2V0SG91cnNGcm9tSW5wdXRzIiwidXBkYXRlVmFsdWUiLCJ0aW1lV3JhcHBlciIsIm1pbkRhdGVIYXNUaW1lIiwiYW1wbTJtaWxpdGFyeSIsImhvdXIiLCJhbVBNIiwiaW50IiwibWlsaXRhcnkyYW1wbSIsImhvdXJFbGVtZW50IiwibWludXRlRWxlbWVudCIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJzZWNvbmRFbGVtZW50IiwibGF0ZXN0U2VsZWN0ZWREYXRlT2JqIiwibWF4RGF0ZSIsIm1heERhdGVIYXNUaW1lIiwic2V0SG91cnNGcm9tRGF0ZSIsImRhdGVPYmoiLCJwYWQiLCJ0aW1lXzI0aHIiLCJvblllYXJJbnB1dCIsImRlbHRhIiwiY3VycmVudFllYXJFbGVtZW50IiwiY2hhbmdlWWVhciIsIl9oYW5kbGVycyIsIm9uQ2xpY2siLCJ0cmlnZ2VyQ2hhbmdlIiwidHJpZ2dlckV2ZW50IiwiYmluZEV2ZW50cyIsInNldHVwTW9iaWxlIiwiZGVib3VuY2VkUmVzaXplIiwib25SZXNpemUiLCJfZGVib3VuY2VkQ2hhbmdlIiwiZGF5c0NvbnRhaW5lciIsIm9uTW91c2VPdmVyIiwic3RhdGljIiwiX2lucHV0IiwiaW5saW5lIiwiZG9jdW1lbnRDbGljayIsImNsaWNrT3BlbnMiLCJtb250aE5hdiIsIm9uTW9udGhOYXZTY3JvbGwiLCJvbk1vbnRoTmF2Q2xpY2siLCJzZWxlY3REYXRlIiwiYW5pbWF0ZURheXMiLCJhbmltYXRlTW9udGhzIiwidGltZUNvbnRhaW5lciIsInNlbFRleHQiLCJ0aW1lSW5jcmVtZW50IiwicHJvY2Vzc1Bvc3REYXlBbmltYXRpb24iLCJfYW5pbWF0aW9uTG9vcCIsImFuaW1hdGlvbk5hbWUiLCJkYXlzIiwibmF2aWdhdGlvbkN1cnJlbnRNb250aCIsIm5hdiIsInByZXZpb3VzU2libGluZyIsIm9sZEN1ck1vbnRoIiwianVtcFRvRGF0ZSIsImp1bXBEYXRlIiwicGFyc2VEYXRlIiwiZXJyb3JIYW5kbGVyIiwicmVkcmF3IiwiaW5jcmVtZW50TnVtSW5wdXQiLCJpbnB1dEVsZW0iLCJjcmVhdGVFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJidWlsZCIsImNhbGVuZGFyQ29udGFpbmVyIiwiYnVpbGRNb250aE5hdiIsImlubmVyQ29udGFpbmVyIiwid2Vla051bWJlcnMiLCJfYSIsImJ1aWxkV2Vla3MiLCJ3ZWVrV3JhcHBlciIsInJDb250YWluZXIiLCJidWlsZFdlZWtkYXlzIiwiYnVpbGREYXlzIiwiZW5hYmxlVGltZSIsImJ1aWxkVGltZSIsImN1c3RvbUFwcGVuZCIsImFsdElucHV0IiwiY3JlYXRlRGF5IiwiZGF5TnVtYmVyIiwiZGF0ZUlzRW5hYmxlZCIsImlzRW5hYmxlZCIsImRheUVsZW1lbnQiLCIkaSIsImZvcm1hdERhdGUiLCJhcmlhRGF0ZUZvcm1hdCIsInRvZGF5RGF0ZUVsZW0iLCJpc0RhdGVTZWxlY3RlZCIsInNlbGVjdGVkRGF0ZUVsZW0iLCJtaW5SYW5nZURhdGUiLCJtYXhSYW5nZURhdGUiLCJpc0RhdGVJblJhbmdlIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiZ2V0V2VlayIsImZvY3VzT25EYXkiLCJuZXdJbmRleCIsInRhcmdldE5vZGUiLCJjaGFuZ2VNb250aCIsImFmdGVyRGF5QW5pbSIsImZpcnN0T2ZNb250aCIsImdldERheSIsImZpcnN0RGF5T2ZXZWVrIiwiaXNSYW5nZU1vZGUiLCJwcmV2TW9udGhEYXlzIiwiZGF5SW5kZXgiLCJkYXlOdW0iLCJfaGlkZVByZXZNb250aEFycm93IiwiX2hpZGVOZXh0TW9udGhBcnJvdyIsInVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgiLCJkYXlDb250YWluZXIiLCJtb250aE5hdkZyYWdtZW50IiwicHJldk1vbnRoTmF2IiwicHJldkFycm93IiwiY3VycmVudE1vbnRoRWxlbWVudCIsInNjcm9sbFRpdGxlIiwieWVhcklucHV0IiwibmV4dE1vbnRoTmF2IiwibmV4dEFycm93IiwiX19oaWRlUHJldk1vbnRoQXJyb3ciLCJfX2hpZGVOZXh0TW9udGhBcnJvdyIsImhvdXJJbnB1dCIsIm1pbnV0ZUlucHV0IiwiaG91ckluY3JlbWVudCIsIm1pbnV0ZUluY3JlbWVudCIsInNlY29uZElucHV0IiwidG9nZ2xlVGl0bGUiLCJ3ZWVrZGF5Q29udGFpbmVyIiwid2Vla2RheXMiLCJzaG9ydGhhbmQiLCJ3ZWVrQWJicmV2aWF0aW9uIiwiaXNfb2Zmc2V0IiwiZnJvbV9rZXlib2FyZCIsIm1vbnRoVG9TdHIiLCJzaG9ydGhhbmRDdXJyZW50TW9udGgiLCJpbmRleF8xIiwidHJpZ2dlckNoYW5nZUV2ZW50IiwibW9iaWxlSW5wdXQiLCJzaG93VGltZUlucHV0IiwiaXNPcGVuIiwiX3R5cGUiLCJpc0NhbGVuZGFyRWxlbSIsImlzQ2FsZW5kYXJFbGVtZW50IiwiaXNJbnB1dCIsInBhdGgiLCJpZ25vcmVkRm9jdXNFbGVtZW50cyIsIm5ld1llYXIiLCJuZXdZZWFyTnVtIiwiaXNOZXdZZWFyIiwiZGF0ZVRvQ2hlY2siLCJlbmFibGUiLCJhcnJheSIsImZyb20iLCJjYWxlbmRhckVsZW0iLCJhbGxvd0lucHV0IiwiYWxsb3dLZXlkb3duIiwiYWxsb3dJbmxpbmVLZXlkb3duIiwiYWx0Rm9ybWF0IiwiZGF0ZUZvcm1hdCIsImlzVGltZU9iaiIsImRlbHRhXzEiLCJob3ZlckRhdGUiLCJpbml0aWFsRGF0ZSIsInJhbmdlU3RhcnREYXRlIiwicmFuZ2VFbmREYXRlIiwiY29udGFpbnNEaXNhYmxlZCIsIkRBWSIsInRpbWVzdGFtcCIsIm91dE9mUmFuZ2UiLCJkYXlFbGVtIiwicG9zaXRpb25DYWxlbmRhciIsInBvc2l0aW9uRWxlbWVudCIsIndhc09wZW4iLCJtaW5NYXhEYXRlU2V0dGVyIiwiaW52ZXJzZURhdGVPYmoiLCJwYXJzZUNvbmZpZyIsImJvb2xPcHRzIiwiX19hc3NpZ24iLCJkZWZhdWx0Q29uZmlnIiwidXNlckNvbmZpZyIsImRhdGFzZXQiLCJmb3JtYXRzJCQxIiwiX2VuYWJsZSIsImRhdGVzIiwicGFyc2VEYXRlUnVsZXMiLCJfZGlzYWJsZSIsIl9taW5EYXRlIiwiX21heERhdGUiLCJhc3NpZ24iLCJhcnJheWlmeSIsInBsdWdpbnMiLCJwbHVnaW5Db25mIiwiZGlzYWJsZU1vYmlsZSIsInNldHVwTG9jYWxlIiwibG9jYWxlIiwibDEwbnMiLCJfcG9zaXRpb25FbGVtZW50IiwiY2FsZW5kYXJIZWlnaHQiLCJjYWxlbmRhcldpZHRoIiwiY29uZmlnUG9zIiwiaW5wdXRCb3VuZHMiLCJkaXN0YW5jZUZyb21Cb3R0b20iLCJzaG93T25Ub3AiLCJyaWdodE1vc3QiLCJpc1NlbGVjdGFibGUiLCJkYXkiLCJzZWxlY3RlZERhdGUiLCJzaG91bGRDaGFuZ2VNb250aCIsImNsb3NlT25TZWxlY3QiLCJzaW5nbGUiLCJzZXRTZWxlY3RlZERhdGUiLCJpbnB1dERhdGUiLCJjb25qdW5jdGlvbiIsInJhbmdlU2VwYXJhdG9yIiwicnVsZSIsInNldHVwRGF0ZXMiLCJwcmVsb2FkZWREYXRlIiwiZGVmYXVsdERhdGUiLCJfc2hvd1RpbWVJbnB1dCIsImZybXQiLCJmb3JtYXRzIiwiZ2l2ZW5Gb3JtYXQiLCJwYXJzZWREYXRlIiwiZGF0ZV9vcmlnIiwidG9GaXhlZCIsImRhdGVzdHIiLCJvcHMiLCJtYXRjaEluZGV4IiwicmVnZXhTdHIiLCJpc0JhY2tTbGFzaCIsInRva2VuUmVnZXgiLCJyZXZGb3JtYXQiLCJzZXR1cElucHV0cyIsImFsdElucHV0Q2xhc3MiLCJyZXF1aXJlZCIsImlucHV0VHlwZSIsIm1vYmlsZUZvcm1hdFN0ciIsImluaXRFdmVudCIsImpvaW5DaGFyIiwiZE9iaiIsImlzWWVhciIsImlzUHJldk1vbnRoIiwiaXNOZXh0TW9udGgiLCJpc0tleURvd24iLCJuZXdWYWx1ZSIsImlzSG91ckVsZW0iLCJpc01pbnV0ZUVsZW0iLCJfYmluZCIsIl9zZXRIb3Vyc0Zyb21EYXRlIiwiX2NyZWF0ZUVsZW1lbnQiLCJfZmxhdHBpY2tyIiwibm9kZUxpc3QiLCJpbnN0YW5jZXMiLCJtb250aE51bWJlciIsIm1vbnRocyIsImdpdmVuRGF0ZSIsIm9uZWphbiIsIm9uQ2hhbmdlIiwib25DbG9zZSIsIm9uRGF5Q3JlYXRlIiwib25EZXN0cm95Iiwib25Nb250aENoYW5nZSIsIm9uT3BlbiIsIm9uUGFyc2VDb25maWciLCJvblJlYWR5Iiwib25WYWx1ZVVwZGF0ZSIsIm9uWWVhckNoYW5nZSIsImVuZ2xpc2giLCJsb25naGFuZCIsIm9yZGluYWwiLCJudGgiLCJudW1iZXIiLCJkb19ub3RoaW5nIiwiRCIsIkYiLCJtb250aE5hbWUiLCJzZXRNb250aCIsIkciLCJIIiwiSiIsIksiLCJNIiwic2hvcnRNb250aCIsIlMiLCJzZXRTZWNvbmRzIiwiVSIsInVuaXhTZWNvbmRzIiwiVyIsIndlZWtOdW0iLCJ3ZWVrTnVtYmVyIiwiWSIsInNldEZ1bGxZZWFyIiwiWiIsIklTT0RhdGUiLCJzZXRNaW51dGVzIiwidG9JU09TdHJpbmciLCJfaSIsImFyZ3NfMSIsIkhUTUxFbGVtZW50IiwiSFRNTENvbGxlY3Rpb24iLCJOb2RlTGlzdCIsImxvY2FsaXplIiwic2V0RGVmYXVsdHMiLCJmcF9pbmNyIiwicnUiLCJmcCIsIlJ1c3NpYW4iLCJ0aXBweSIsImhpZGVBbGxQb3BwZXJzIiwiZXhjbHVkZSIsIlN0b3JlIiwicmVmRGF0YSIsInBvcHBlciIsInRpcHB5SW5zdGFuY2UiLCJfcmVmRGF0YSRzZXR0aW5ncyIsImhpZGVPbkNsaWNrIiwiaXNIaWRlT25DbGljayIsImlzTm90Q3VycmVudFJlZiIsInBhcmVudFNlbGVjdG9yIiwiRWxlbWVudCIsIm1hdGNoZXMkMSIsImNoZWNrRm4iLCJiaW5kRXZlbnRMaXN0ZW5lcnMiLCJ0b3VjaEhhbmRsZXIiLCJCcm93c2VyIiwiaU9TIiwiZHluYW1pY0lucHV0RGV0ZWN0aW9uIiwicGVyZm9ybWFuY2UiLCJtb3VzZW1vdmVIYW5kbGVyIiwiY2xpY2tIYW5kbGVyIiwiU2VsZWN0b3JzIiwiVE9PTFRJUFBFRF9FTCIsIlBPUFBFUiIsInJlZiIsImludGVyYWN0aXZlIiwiX3JlZiIsIl9yZWYkc2V0dGluZ3MiLCJtdWx0aXBsZSIsIkNPTlRST0xMRVIiLCJibHVySGFuZGxlciIsIl9kb2N1bWVudCIsIlNVUFBPUlRTX1RPVUNIIiwibWF4VG91Y2hQb2ludHMiLCJtc01heFRvdWNoUG9pbnRzIiwicHJlZml4ZXMiLCJ1cHBlclByb3AiLCJfcHJlZml4IiwicHJlZml4ZWRQcm9wIiwiZmluZEluZGV4IiwicmVtb3ZlVGl0bGUiLCJlbGVtZW50SXNJblZpZXdwb3J0IiwidHJpZ2dlclJlZmxvdyIsInRvb2x0aXAiLCJjaXJjbGUiLCJtb2RpZnlDbGFzc0xpc3QiLCJnZXRJbm5lckVsZW1lbnRzIiwiVE9PTFRJUCIsIkNJUkNMRSIsIkNPTlRFTlQiLCJhcHBseVRyYW5zaXRpb25EdXJhdGlvbiIsImlzQ29udGVudCIsIl9kdXJhdGlvbiIsImlzT2JqZWN0TGl0ZXJhbCIsImdldENvcmVQbGFjZW1lbnQiLCJwbGFjZW1lbnQiLCJmb2xsb3dDdXJzb3JIYW5kbGVyIiwiX3RoaXMiLCJoYWxmUG9wcGVyV2lkdGgiLCJoYWxmUG9wcGVySGVpZ2h0IiwicGFnZVdpZHRoIiwiaXNSaWdodE92ZXJmbG93aW5nIiwiaXNMZWZ0T3ZlcmZsb3dpbmciLCJnZXRBcnJheU9mRWxlbWVudHMiLCJvblRyYW5zaXRpb25FbmQiLCJfZ2V0SW5uZXJFbGVtZW50cyIsInRyYW5zaXRpb25lbmRGaXJlZCIsImxpc3RlbmVycyIsImxpc3RlbmVyQ2FsbGJhY2siLCJfdHJhbnNpdGlvbmVuZFRpbWVvdXQiLCJtaWNyb3Rhc2tEZWJvdW5jZSIsIlByb21pc2UiLCJ0YXNrRGVib3VuY2UiLCJzY2hlZHVsZWQiLCJ0aW1lb3V0RHVyYXRpb24iLCJmdW5jdGlvblRvQ2hlY2siLCJnZXRUeXBlIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwiZ2V0UGFyZW50Tm9kZSIsImdldFNjcm9sbFBhcmVudCIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsImdldE9mZnNldFBhcmVudCIsImlzT2Zmc2V0Q29udGFpbmVyIiwiZ2V0Um9vdCIsImZpbmRDb21tb25PZmZzZXRQYXJlbnQiLCJlbGVtZW50MSIsImVsZW1lbnQyIiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsImVsZW1lbnQxcm9vdCIsImdldFNjcm9sbCIsInNpZGUiLCJ1cHBlclNpZGUiLCJzY3JvbGxpbmdFbGVtZW50IiwiaW5jbHVkZVNjcm9sbCIsIm1vZGlmaWVyIiwiZ2V0Qm9yZGVyc1NpemUiLCJzaWRlQSIsInNpZGVCIiwiZ2V0U2l6ZSIsImlzSUUxMCQxIiwiZ2V0V2luZG93U2l6ZXMiLCJnZXRDbGllbnRSZWN0Iiwib2Zmc2V0cyIsIl9leHRlbmRzIiwic2l6ZXMiLCJob3JpelNjcm9sbGJhciIsInZlcnRTY3JvbGxiYXIiLCJnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUiLCJpc0lFMTAiLCJpc0hUTUwiLCJjaGlsZHJlblJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsImdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZSIsInJlbGF0aXZlT2Zmc2V0IiwiaXNGaXhlZCIsImdldEJvdW5kYXJpZXMiLCJyZWZlcmVuY2UiLCJib3VuZGFyaWVzRWxlbWVudCIsImJvdW5kYXJpZXMiLCJib3VuZGFyaWVzTm9kZSIsIl9nZXRXaW5kb3dTaXplcyIsImdldEFyZWEiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiYXJlYSIsImZpbHRlcmVkQXJlYXMiLCJfcmVmMiIsImNvbXB1dGVkUGxhY2VtZW50IiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsImdldE91dGVyU2l6ZXMiLCJtYXJnaW5Cb3R0b20iLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsImdldFBvcHBlck9mZnNldHMiLCJyZWZlcmVuY2VPZmZzZXRzIiwicG9wcGVyUmVjdCIsInBvcHBlck9mZnNldHMiLCJpc0hvcml6IiwibWFpblNpZGUiLCJzZWNvbmRhcnlTaWRlIiwibWVhc3VyZW1lbnQiLCJzZWNvbmRhcnlNZWFzdXJlbWVudCIsImZpbmQkMSIsImZpbmRJbmRleCQxIiwicnVuTW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZW5kcyIsImlzRGVzdHJveWVkIiwiYXJyb3dTdHlsZXMiLCJmbGlwcGVkIiwiZmxpcCIsIm9yaWdpbmFsUGxhY2VtZW50IiwiaXNDcmVhdGVkIiwib25VcGRhdGUiLCJvbkNyZWF0ZSIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInRvQ2hlY2siLCJkaXNhYmxlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVPbkRlc3Ryb3kiLCJnZXRXaW5kb3ciLCJhdHRhY2hUb1Njcm9sbFBhcmVudHMiLCJzY3JvbGxQYXJlbnRzIiwiaXNCb2R5IiwicGFzc2l2ZSIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVCb3VuZCIsInNjcm9sbEVsZW1lbnQiLCJldmVudHNFbmFibGVkIiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJzY2hlZHVsZVVwZGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwic2V0U3R5bGVzIiwic2V0QXR0cmlidXRlcyIsImFwcGx5U3R5bGUiLCJhcnJvd0VsZW1lbnQiLCJhcHBseVN0eWxlT25Mb2FkIiwibW9kaWZpZXJPcHRpb25zIiwiY29tcHV0ZVN0eWxlIiwibGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIiwiZ3B1QWNjZWxlcmF0aW9uIiwib2Zmc2V0UGFyZW50UmVjdCIsInByZWZpeGVkUHJvcGVydHkiLCJ3aWxsQ2hhbmdlIiwiaW52ZXJ0VG9wIiwiaW52ZXJ0TGVmdCIsIngtcGxhY2VtZW50IiwiYXJyb3ciLCJpc01vZGlmaWVyUmVxdWlyZWQiLCJyZXF1ZXN0aW5nTmFtZSIsInJlcXVlc3RlZE5hbWUiLCJyZXF1ZXN0aW5nIiwiaXNSZXF1aXJlZCIsIl9yZXF1ZXN0aW5nIiwicmVxdWVzdGVkIiwiX2RhdGEkb2Zmc2V0cyRhcnJvdyIsIl9kYXRhJG9mZnNldHMiLCJpc1ZlcnRpY2FsIiwic2lkZUNhcGl0YWxpemVkIiwiYWx0U2lkZSIsIm9wU2lkZSIsImFycm93RWxlbWVudFNpemUiLCJjZW50ZXIiLCJwb3BwZXJNYXJnaW5TaWRlIiwicG9wcGVyQm9yZGVyU2lkZSIsInNpZGVWYWx1ZSIsImdldE9wcG9zaXRlVmFyaWF0aW9uIiwiY2xvY2t3aXNlIiwidmFsaWRQbGFjZW1lbnRzIiwicGxhY2VtZW50T3Bwb3NpdGUiLCJmbGlwT3JkZXIiLCJiZWhhdmlvciIsIkJFSEFWSU9SUyIsIkZMSVAiLCJDTE9DS1dJU0UiLCJDT1VOVEVSQ0xPQ0tXSVNFIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb24iLCJmbGlwVmFyaWF0aW9ucyIsImtlZXBUb2dldGhlciIsInRvVmFsdWUiLCJwYXJzZU9mZnNldCIsImJhc2VQbGFjZW1lbnQiLCJ1c2VIZWlnaHQiLCJmcmFnbWVudHMiLCJmcmFnIiwiZGl2aWRlciIsInNwbGl0UmVnZXgiLCJvcCIsIm1lcmdlV2l0aFByZXZpb3VzIiwicmVkdWNlIiwiaW5kZXgyIiwicHJldmVudE92ZXJmbG93IiwicHJpb3JpdHkiLCJwcmltYXJ5IiwiZXNjYXBlV2l0aFJlZmVyZW5jZSIsInNlY29uZGFyeSIsInNoaWZ0dmFyaWF0aW9uIiwic2hpZnRPZmZzZXRzIiwiYm91bmQiLCJpbm5lciIsInN1YnRyYWN0TGVuZ3RoIiwiZ2V0T2Zmc2V0RGlzdGFuY2VJblB4IiwiRGVmYXVsdHMiLCJjcmVhdGVQb3BwZXJJbnN0YW5jZSIsIl9kYXRhJHNldHRpbmdzIiwicG9wcGVyT3B0aW9ucyIsImZsaXBEdXJhdGlvbiIsIl9leHRlbmRzJDEiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZXIiLCJwb3BwZXJJbnN0YW5jZSIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY2hhcmFjdGVyRGF0YSIsIl9tdXRhdGlvbk9ic2VydmVycyIsIlBvcHBlciIsIm1vdW50UG9wcGVyIiwiZm9sbG93Q3Vyc29yIiwibWFrZVN0aWNreSIsInN0aWNreUR1cmF0aW9uIiwicmVtb3ZlVHJhbnNpdGlvbkR1cmF0aW9uIiwidXBkYXRlUG9zaXRpb24iLCJnZXRJbmRpdmlkdWFsU2V0dGluZ3MiLCJpbnN0YW5jZVNldHRpbmdzIiwiRGVmYXVsdHNLZXlzIiwiYWNjIiwiY3JlYXRlUG9wcGVyRWxlbWVudCIsImFuaW1hdGVGaWxsIiwiaW5lcnRpYSIsImFycm93U2l6ZSIsInNpemUiLCJ0aGVtZSIsIl9hcnJvdyIsInRlbXBsYXRlSWQiLCJjcmVhdGVUcmlnZ2VyIiwidG91Y2hIb2xkIiwiaGFuZGxlVHJpZ2dlciIsImhhbmRsZU1vdXNlbGVhdmUiLCJoYW5kbGVCbHVyIiwiY3Vyc29ySXNPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIiLCJpbnRlcmFjdGl2ZUJvcmRlciIsImNvcmVQb3NpdGlvbiIsImJvcmRlcldpdGhEaXN0YW5jZSIsImV4Y2VlZHMiLCJnZXRFdmVudExpc3RlbmVySGFuZGxlcnMiLCJzaG93RGVsYXkiLCJ0b3VjaFdhaXQiLCJoaWRlRGVsYXkiLCJjbGVhclRpbWVvdXRzIiwiX3Nob3ciLCJfZGVsYXkiLCJjYWxsYmFja3MiLCJtb3VzZWVudGVyVG91Y2giLCJpc0NsaWNrIiwiaXNOb3RQZXJzaXN0ZW50IiwiaGFuZGxlTW91c2Vtb3ZlIiwidHJpZ2dlckhpZGUiLCJjbG9zZXN0VG9vbHRpcHBlZEVsIiwiaXNPdmVyUG9wcGVyIiwiaXNPdmVyRWwiLCJpc0NsaWNrVHJpZ2dlcmVkIiwiZXZhbHVhdGVTZXR0aW5ncyIsImNyZWF0ZVRvb2x0aXBzIiwiaWRDb3VudGVyIiwiZHluYW1pY1RpdGxlIiwidGlwcHkkMiIsInJlZk9iaiIsIlRpcHB5IiwiU1VQUE9SVEVEIiwiQVJST1ciLCJzdGlja3kiLCJpc0Jyb3dzZXIiLCJsb25nZXJUaW1lb3V0QnJvd3NlcnMiLCJzdXBwb3J0c01pY3JvVGFza3MiLCJhcHBWZXJzaW9uIiwiY2xhc3NDYWxsQ2hlY2siLCJDb25zdHJ1Y3RvciIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwbGFjZW1lbnRzIiwib25Mb2FkIiwiRGVmYXVsdHMkMSIsIlV0aWxzIiwiUG9wcGVyVXRpbHMiLCJjbGFzc0NhbGxDaGVjayQxIiwiY3JlYXRlQ2xhc3MkMSIsImRlc3Ryb3llZCIsInNob3duIiwib25TaG93Iiwib25TaG93biIsIm9uSGlkZSIsIm9uSGlkZGVuIiwic3RvcmUiLCJjdXN0b21EdXJhdGlvbiIsIl9vblNob3duRmlyZWQiLCJfdGhpczIiLCJfZ2V0SW5uZXJFbGVtZW50czIiLCJfZGF0YSRzZXR0aW5nczIiLCJfZ2V0SW5uZXJFbGVtZW50czMiLCJfaXNMYXN0IiwiX3RoaXMzIiwibGlzdGVuZXIiLCJkaXNjb25uZWN0IiwiX3RoaXM0Iiwic3RvcmVMZW5ndGgiLCJkaXNhYmxlRHluYW1pY0lucHV0RGV0ZWN0aW9uIiwiZW5hYmxlRHluYW1pY0lucHV0RGV0ZWN0aW9uIiwicm93IiwicHJvY2VkdXJlIiwiX3Rva2VuIiwibmV4dERhdGUiLCJhbHRPcHRpb25zIiwiaGVhZGVyU2xpZGVyIiwicmVzaXplIiwiaGVhZGVyU2xpZGVyQWJvdXQiLCJsb2dvdHlwZXNTbGlkZXIiLCJyZWNvbW1lbmRhdGlvblRpbWVvdXQiLCJoaWRlRXZlbnQiLCJjbG9zZXN0RWwiLCJoaWRlRnVuYyIsIm9mZmNhbnZhc092ZXJsYXkiLCJvZmZjYW52YXMiLCJ0b2dnbGVyIiwidG9nZ2xlVGFyZ2V0IiwidG9nZ2xlR3JvdXAiLCJ0b2dnbGVTZWxmRGVhY3RpdmUiLCJ0YXJnZXRDbGFzcyJdLCJtYXBwaW5ncyI6IkNBYUEsU0FBQUEsRUFBQUMsR0FFQSxZQUVBLGlCQUFBQyxTQUFBLGdCQUFBQSxRQUFBQyxRQVNBRCxPQUFBQyxRQUFBSCxFQUFBSSxTQUNBSCxFQUFBRCxHQUFBLEdBQ0EsU0FBQUssR0FDQSxJQUFBQSxFQUFBRCxTQUNBLEtBQUEsSUFBQUUsT0FBQSwyQ0FFQSxPQUFBTCxHQUFBSSxJQUdBSixFQUFBRCxJQUlBLG1CQUFBTyxRQUFBQSxPQUFBQyxLQUFBLFNBQUFELEVBQUFFLEdBTUEsWUE4QkEsU0FBQUMsR0FBQUMsRUFBQUMsR0FDQUEsRUFBQUEsR0FBQVIsRUFFQSxJQUFBUyxHQUFBRCxFQUFBRSxjQUFBLFNBRUFELEdBQUFFLEtBQUFKLEVBQ0FDLEVBQUFJLEtBQUFDLFlBQUFKLEdBQUFLLFdBQUFDLFlBQUFOLEdBd2JBLFFBQUFPLEdBQUFDLEdBTUEsR0FBQUMsS0FBQUQsR0FBQSxVQUFBQSxJQUFBQSxFQUFBQyxPQUNBQyxFQUFBQyxHQUFBRCxLQUFBRixFQUVBLE9BQUEsYUFBQUUsSUFBQUMsR0FBQUMsU0FBQUosS0FJQSxVQUFBRSxHQUFBLElBQUFELEdBQ0EsZ0JBQUFBLElBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUFBRCxJQWt3RUEsUUFBQUssR0FBQUMsRUFBQUMsR0FFQSxNQUFBRCxHQUFBRCxVQUFBQyxFQUFBRCxTQUFBRyxnQkFBQUQsRUFBQUMsY0FVQSxRQUFBQyxHQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE1BQUFULElBQUFVLFdBQUFGLEdBQ0FSLEdBQUFXLEtBQUFKLEVBQUEsU0FBQUosRUFBQVMsR0FDQSxRQUFBSixFQUFBSyxLQUFBVixFQUFBUyxFQUFBVCxLQUFBTSxJQUtBRCxFQUFBTSxTQUNBZCxHQUFBVyxLQUFBSixFQUFBLFNBQUFKLEdBQ0EsTUFBQUEsS0FBQUssSUFBQUMsSUFLQSxnQkFBQUQsR0FDQVIsR0FBQVcsS0FBQUosRUFBQSxTQUFBSixHQUNBLE1BQUFZLElBQUFGLEtBQUFMLEVBQUFMLElBQUEsSUFBQU0sSUFLQU8sR0FBQUMsS0FBQVQsR0FDQVIsR0FBQWtCLE9BQUFWLEVBQUFELEVBQUFFLElBSUFELEVBQUFSLEdBQUFrQixPQUFBVixFQUFBRCxHQUNBUCxHQUFBVyxLQUFBSixFQUFBLFNBQUFKLEdBQ0EsTUFBQVksSUFBQUYsS0FBQUwsRUFBQUwsSUFBQSxJQUFBTSxHQUFBLElBQUFOLEVBQUFXLFlBa1JBLFFBQUFLLEdBQUFDLEVBQUFDLEdBQ0EsTUFBQUQsRUFBQUEsRUFBQUMsS0FBQSxJQUFBRCxFQUFBTixXQUNBLE1BQUFNLEdBcUZBLFFBQUFFLEdBQUFDLEdBQ0EsR0FBQUMsS0FJQSxPQUhBeEIsSUFBQXlCLEtBQUFGLEVBQUFHLE1BQUFDLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUwsRUFBQUssSUFBQSxJQUVBTCxFQTROQSxRQUFBTSxHQUFBQyxHQUNBLE1BQUFBLEdBRUEsUUFBQUMsR0FBQUMsR0FDQSxLQUFBQSxHQUdBLFFBQUFDLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQUMsRUFFQSxLQUdBSixHQUFBbkMsR0FBQVUsV0FBQTZCLEVBQUFKLEVBQUFLLFNBQ0FELEVBQUExQixLQUFBc0IsR0FBQU0sS0FBQUwsR0FBQU0sS0FBQUwsR0FHQUYsR0FBQW5DLEdBQUFVLFdBQUE2QixFQUFBSixFQUFBUSxNQUNBSixFQUFBMUIsS0FBQXNCLEVBQUFDLEVBQUFDLEdBUUFELEVBQUFRLFVBQUFDLElBQUFWLEdBQUFXLE1BQUFSLElBTUEsTUFBQUgsR0FJQUUsRUFBQU8sVUFBQUMsSUFBQVYsS0FzYUEsUUFBQVksS0FDQW5FLEdBQUFvRSxvQkFBQSxtQkFBQUQsR0FDQWhFLEVBQUFpRSxvQkFBQSxPQUFBRCxHQUNBL0MsR0FBQWlELFFBbUdBLFFBQUFDLEtBQ0FsRSxLQUFBbUUsUUFBQW5ELEdBQUFtRCxRQUFBRCxFQUFBRSxNQXdLQSxRQUFBQyxHQUFBQyxHQUNBLE1BQUEsU0FBQUEsR0FJQSxVQUFBQSxJQUlBLFNBQUFBLEVBQ0EsS0FJQUEsS0FBQUEsRUFBQSxJQUNBQSxFQUdBQyxHQUFBdEMsS0FBQXFDLEdBQ0FFLEtBQUFDLE1BQUFILEdBR0FBLEdBR0EsUUFBQUksR0FBQXZELEVBQUF3RCxFQUFBTCxHQUNBLEdBQUFsRCxFQUlBLFFBQUF5QyxLQUFBUyxHQUFBLElBQUFuRCxFQUFBVyxTQUlBLEdBSEFWLEVBQUEsUUFBQXVELEVBQUFDLFFBQUFDLEdBQUEsT0FBQXhELGNBR0EsaUJBRkFpRCxFQUFBbkQsRUFBQTJELGFBQUExRCxJQUVBLENBQ0EsSUFDQWtELEVBQUFELEVBQUFDLEdBQ0EsTUFBQVMsSUFHQUMsR0FBQUMsSUFBQTlELEVBQUF3RCxFQUFBTCxPQUVBQSxPQUFBVCxFQUdBLE9BQUFTLEdBcVNBLFFBQUFZLEdBQUEvRCxFQUFBZ0UsRUFBQUMsRUFBQUMsR0FDQSxHQUFBQyxHQUNBQyxFQUFBLEVBQ0FDLEVBQUEsR0FDQUMsRUFBQUosRUFDQSxXQUNBLE1BQUFBLEdBQUFqRCxPQUVBLFdBQ0EsTUFBQXBCLElBQUEwRSxJQUFBdkUsRUFBQWdFLEVBQUEsS0FFQVEsRUFBQUYsSUFDQUcsRUFBQVIsR0FBQUEsRUFBQSxLQUFBcEUsR0FBQTZFLFVBQUFWLEdBQUEsR0FBQSxNQUdBVyxHQUFBOUUsR0FBQTZFLFVBQUFWLElBQUEsT0FBQVMsSUFBQUQsSUFDQUksR0FBQUMsS0FBQWhGLEdBQUEwRSxJQUFBdkUsRUFBQWdFLEdBRUEsSUFBQVcsR0FBQUEsRUFBQSxLQUFBRixFQUFBLENBR0FBLEVBQUFBLEdBQUFFLEVBQUEsR0FHQVYsRUFBQUEsTUFHQVUsR0FBQUgsR0FBQSxDQUVBLElBSUFKLEVBQUFBLEdBQUEsS0FHQU8sR0FBQVAsRUFDQXZFLEdBQUFpRixNQUFBOUUsRUFBQWdFLEVBQUFXLEVBQUFGLFNBS0FMLEtBQUFBLEVBQUFFLElBQUFFLElBQUEsSUFBQUosS0FBQUMsR0FpQkEsTUFiQUosS0FDQVUsR0FBQUEsSUFBQUgsR0FBQSxFQUdBTCxFQUFBRixFQUFBLEdBQ0FVLEdBQUFWLEVBQUEsR0FBQSxHQUFBQSxFQUFBLElBQ0FBLEVBQUEsR0FDQUMsSUFDQUEsRUFBQU8sS0FBQUEsRUFDQVAsRUFBQWEsTUFBQUosRUFDQVQsRUFBQWMsSUFBQWIsSUFHQUEsRUFNQSxRQUFBYyxHQUFBakYsR0FDQSxHQUFBa0YsR0FDQWpHLEVBQUFlLEVBQUFtRixjQUNBcEYsRUFBQUMsRUFBQUQsU0FDQXFGLEVBQUFDLEdBQUF0RixFQUVBLE9BQUFxRixLQUlBRixFQUFBakcsRUFBQXFHLEtBQUFoRyxZQUFBTCxFQUFBRSxjQUFBWSxJQUNBcUYsRUFBQXZGLEdBQUEwRSxJQUFBVyxFQUFBLFdBRUFBLEVBQUEzRixXQUFBQyxZQUFBMEYsR0FFQSxTQUFBRSxJQUNBQSxFQUFBLFNBRUFDLEdBQUF0RixHQUFBcUYsRUFFQUEsR0FHQSxRQUFBRyxHQUFBbkYsRUFBQW9GLEdBT0EsSUFOQSxHQUFBSixHQUFBcEYsRUFDQXlGLEtBQ0FDLEVBQUEsRUFDQS9GLEVBQUFTLEVBQUFULE9BR0ErRixFQUFBL0YsRUFBQStGLElBQ0ExRixFQUFBSSxFQUFBc0YsR0FDQTFGLEVBQUE4RSxRQUlBTSxFQUFBcEYsRUFBQThFLE1BQUFNLFFBQ0FJLEdBS0EsU0FBQUosSUFDQUssRUFBQUMsR0FBQUMsR0FBQUMsSUFBQTVGLEVBQUEsWUFBQSxLQUNBeUYsRUFBQUMsS0FDQTFGLEVBQUE4RSxNQUFBTSxRQUFBLEtBR0EsS0FBQXBGLEVBQUE4RSxNQUFBTSxTQUFBUyxHQUFBN0YsS0FDQXlGLEVBQUFDLEdBQUFULEVBQUFqRixLQUdBLFNBQUFvRixJQUNBSyxFQUFBQyxHQUFBLE9BR0FDLEdBQUE3QixJQUFBOUQsRUFBQSxVQUFBb0YsSUFNQSxLQUFBTSxFQUFBLEVBQUFBLEVBQUEvRixFQUFBK0YsSUFDQSxNQUFBRCxFQUFBQyxLQUNBdEYsRUFBQXNGLEdBQUFaLE1BQUFNLFFBQUFLLEVBQUFDLEdBSUEsT0FBQXRGLEdBd0RBLFFBQUEwRixHQUFBQyxFQUFBQyxHQUlBLEdBQUFDLEVBWUEsT0FUQUEsT0FEQSxLQUFBRixFQUFBRyxxQkFDQUgsRUFBQUcscUJBQUFGLEdBQUEsU0FFQSxLQUFBRCxFQUFBSSxpQkFDQUosRUFBQUksaUJBQUFILEdBQUEsWUFNQXRELEtBQUFzRCxHQUFBQSxHQUFBakcsRUFBQWdHLEVBQUFDLEdBQ0FuRyxHQUFBdUcsT0FBQUwsR0FBQUUsR0FHQUEsRUFLQSxRQUFBSSxHQUFBQyxFQUFBQyxHQUlBLElBSEEsR0FBQTlGLEdBQUEsRUFDQStGLEVBQUFGLEVBQUEzRyxPQUVBYyxFQUFBK0YsRUFBQS9GLElBQ0FrRixHQUFBN0IsSUFDQXdDLEVBQUE3RixHQUNBLGNBQ0E4RixHQUFBWixHQUFBQyxJQUFBVyxFQUFBOUYsR0FBQSxlQVFBLFFBQUFnRyxHQUFBSCxFQUFBUCxFQUFBVyxFQUFBQyxFQUFBQyxHQU9BLElBTkEsR0FBQTVHLEdBQUE2RyxFQUFBYixFQUFBYyxFQUFBQyxFQUFBQyxFQUNBQyxFQUFBbEIsRUFBQW1CLHlCQUNBQyxLQUNBMUcsRUFBQSxFQUNBK0YsRUFBQUYsRUFBQTNHLE9BRUFjLEVBQUErRixFQUFBL0YsSUFHQSxJQUZBVCxFQUFBc0csRUFBQTdGLEtBRUEsSUFBQVQsRUFHQSxHQUFBLFdBQUFILEdBQUFELEtBQUFJLEdBSUFILEdBQUF1RyxNQUFBZSxFQUFBbkgsRUFBQVcsVUFBQVgsR0FBQUEsT0FHQSxJQUFBb0gsR0FBQXRHLEtBQUFkLEdBSUEsQ0FVQSxJQVRBNkcsRUFBQUEsR0FBQUksRUFBQTNILFlBQUF5RyxFQUFBNUcsY0FBQSxRQUdBNkcsR0FBQXFCLEdBQUF4QyxLQUFBN0UsS0FBQSxHQUFBLEtBQUEsR0FBQUUsY0FDQTRHLEVBQUFRLEdBQUF0QixJQUFBc0IsR0FBQUMsU0FDQVYsRUFBQVcsVUFBQVYsRUFBQSxHQUFBakgsR0FBQTRILGNBQUF6SCxHQUFBOEcsRUFBQSxHQUdBRSxFQUFBRixFQUFBLEdBQ0FFLEtBQ0FILEVBQUFBLEVBQUFhLFNBS0E3SCxJQUFBdUcsTUFBQWUsRUFBQU4sRUFBQWMsWUFHQWQsRUFBQUksRUFBQVcsV0FHQWYsRUFBQWdCLFlBQUEsT0F6QkFWLEdBQUFXLEtBQUEvQixFQUFBZ0MsZUFBQS9ILEdBa0NBLEtBSEFpSCxFQUFBWSxZQUFBLEdBRUFwSCxFQUFBLEVBQ0FULEVBQUFtSCxFQUFBMUcsTUFHQSxHQUFBa0csR0FBQTlHLEdBQUFtSSxRQUFBaEksRUFBQTJHLElBQUEsRUFDQUMsR0FDQUEsRUFBQWtCLEtBQUE5SCxPQWdCQSxJQVhBK0csRUFBQWxILEdBQUFrSCxTQUFBL0csRUFBQW1GLGNBQUFuRixHQUdBNkcsRUFBQWYsRUFBQW1CLEVBQUEzSCxZQUFBVSxHQUFBLFVBR0ErRyxHQUNBVixFQUFBUSxHQUlBSCxFQUVBLElBREFNLEVBQUEsRUFDQWhILEVBQUE2RyxFQUFBRyxNQUNBaUIsR0FBQW5ILEtBQUFkLEVBQUFKLE1BQUEsS0FDQThHLEVBQUFvQixLQUFBOUgsRUFNQSxPQUFBaUgsR0FxQ0EsUUFBQWlCLEtBQ0EsT0FBQSxFQUdBLFFBQUFDLEtBQ0EsT0FBQSxFQUtBLFFBQUFDLEtBQ0EsSUFDQSxNQUFBM0osSUFBQTRKLGNBQ0EsTUFBQUMsS0FHQSxRQUFBQyxHQUFBdkksRUFBQXdJLEVBQUFDLEVBQUF0RixFQUFBdUYsRUFBQUMsR0FDQSxHQUFBQyxHQUFBaEosQ0FHQSxJQUFBLGdCQUFBNEksR0FBQSxDQUdBLGdCQUFBQyxLQUdBdEYsRUFBQUEsR0FBQXNGLEVBQ0FBLE1BQUEvRixHQUVBLEtBQUE5QyxJQUFBNEksR0FDQUQsRUFBQXZJLEVBQUFKLEVBQUE2SSxFQUFBdEYsRUFBQXFGLEVBQUE1SSxHQUFBK0ksRUFFQSxPQUFBM0ksR0FzQkEsR0FuQkEsTUFBQW1ELEdBQUEsTUFBQXVGLEdBR0FBLEVBQUFELEVBQ0F0RixFQUFBc0YsTUFBQS9GLElBQ0EsTUFBQWdHLElBQ0EsZ0JBQUFELElBR0FDLEVBQUF2RixFQUNBQSxNQUFBVCxLQUlBZ0csRUFBQXZGLEVBQ0FBLEVBQUFzRixFQUNBQSxNQUFBL0YsTUFHQSxJQUFBZ0csRUFDQUEsRUFBQVAsTUFDQSxLQUFBTyxFQUNBLE1BQUExSSxFQWVBLE9BWkEsS0FBQTJJLElBQ0FDLEVBQUFGLEVBQ0FBLEVBQUEsU0FBQUcsR0FJQSxNQURBaEosTUFBQWlKLElBQUFELEdBQ0FELEVBQUFuRyxNQUFBNUQsS0FBQWtLLFlBSUFMLEVBQUFNLEtBQUFKLEVBQUFJLE9BQUFKLEVBQUFJLEtBQUFuSixHQUFBbUosU0FFQWhKLEVBQUFzQixLQUFBLFdBQ0F6QixHQUFBZ0osTUFBQUksSUFBQXBLLEtBQUEySixFQUFBRSxFQUFBdkYsRUFBQXNGLEtBZ3FCQSxRQUFBUyxHQUFBbEosRUFBQW1KLEdBQ0EsTUFBQXBKLEdBQUFDLEVBQUEsVUFDQUQsRUFBQSxLQUFBb0osRUFBQXhJLFNBQUF3SSxFQUFBQSxFQUFBdkIsV0FBQSxNQUVBL0gsR0FBQSxTQUFBRyxHQUFBLElBQUFBLEVBR0FBLEVBSUEsUUFBQW9KLEdBQUFwSixHQUVBLE1BREFBLEdBQUFKLE1BQUEsT0FBQUksRUFBQTJELGFBQUEsU0FBQSxJQUFBM0QsRUFBQUosS0FDQUksRUFFQSxRQUFBcUosR0FBQXJKLEdBQ0EsR0FBQXVCLEdBQUErSCxHQUFBekUsS0FBQTdFLEVBQUFKLEtBUUEsT0FOQTJCLEdBQ0F2QixFQUFBSixLQUFBMkIsRUFBQSxHQUVBdkIsRUFBQXVKLGdCQUFBLFFBR0F2SixFQUdBLFFBQUF3SixHQUFBQyxFQUFBQyxHQUNBLEdBQUFqSixHQUFBK0YsRUFBQTVHLEVBQUErSixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxDQUVBLElBQUEsSUFBQUwsRUFBQS9JLFNBQUEsQ0FLQSxHQUFBZ0YsR0FBQXFFLFFBQUFQLEtBQ0FFLEVBQUFoRSxHQUFBc0UsT0FBQVIsR0FDQUcsRUFBQWpFLEdBQUE3QixJQUFBNEYsRUFBQUMsR0FDQUksRUFBQUosRUFBQUksUUFFQSxPQUNBSCxHQUFBTSxPQUNBTixFQUFBRyxTQUVBLEtBQUFuSyxJQUFBbUssR0FDQSxJQUFBdEosRUFBQSxFQUFBK0YsRUFBQXVELEVBQUFuSyxHQUFBRCxPQUFBYyxFQUFBK0YsRUFBQS9GLElBQ0FaLEdBQUFnSixNQUFBSSxJQUFBUyxFQUFBOUosRUFBQW1LLEVBQUFuSyxHQUFBYSxJQU9Bb0QsR0FBQW1HLFFBQUFQLEtBQ0FJLEVBQUFoRyxHQUFBb0csT0FBQVIsR0FDQUssRUFBQWpLLEdBQUFzSyxVQUFBTixHQUVBaEcsR0FBQUMsSUFBQTRGLEVBQUFJLEtBS0EsUUFBQU0sR0FBQVgsRUFBQUMsR0FDQSxHQUFBM0osR0FBQTJKLEVBQUEzSixTQUFBRyxhQUdBLFdBQUFILEdBQUFzSyxHQUFBdkosS0FBQTJJLEVBQUE3SixNQUNBOEosRUFBQVksUUFBQWIsRUFBQWEsUUFHQSxVQUFBdkssR0FBQSxhQUFBQSxJQUNBMkosRUFBQWEsYUFBQWQsRUFBQWMsY0FJQSxRQUFBQyxHQUFBQyxFQUFBQyxFQUFBQyxFQUFBL0QsR0FHQThELEVBQUFFLEdBQUFuSSxTQUFBaUksRUFFQSxJQUFBekQsR0FBQTRELEVBQUFuRSxFQUFBb0UsRUFBQUMsRUFBQTlMLEVBQ0F3QixFQUFBLEVBQ0ErRixFQUFBaUUsRUFBQTlLLE9BQ0FxTCxFQUFBeEUsRUFBQSxFQUNBeEUsRUFBQTBJLEVBQUEsR0FDQW5LLEVBQUFWLEdBQUFVLFdBQUF5QixFQUdBLElBQUF6QixHQUNBaUcsRUFBQSxHQUFBLGdCQUFBeEUsS0FDQWlKLEdBQUFDLFlBQUFDLEdBQUFySyxLQUFBa0IsR0FDQSxNQUFBeUksR0FBQW5KLEtBQUEsU0FBQW9FLEdBQ0EsR0FBQTBGLEdBQUFYLEVBQUFZLEdBQUEzRixFQUNBbkYsS0FDQW1LLEVBQUEsR0FBQTFJLEVBQUF0QixLQUFBN0IsS0FBQTZHLEVBQUEwRixFQUFBRSxTQUVBZCxFQUFBWSxFQUFBVixFQUFBQyxFQUFBL0QsSUFJQSxJQUFBSixJQUNBUyxFQUFBUixFQUFBaUUsRUFBQUQsRUFBQSxHQUFBdEYsZUFBQSxFQUFBc0YsRUFBQTdELEdBQ0FpRSxFQUFBNUQsRUFBQVcsV0FFQSxJQUFBWCxFQUFBVSxXQUFBaEksU0FDQXNILEVBQUE0RCxHQUlBQSxHQUFBakUsR0FBQSxDQU9BLElBTkFGLEVBQUE3RyxHQUFBMEwsSUFBQXpGLEVBQUFtQixFQUFBLFVBQUFtQyxHQUNBMEIsRUFBQXBFLEVBQUEvRyxPQUtBYyxFQUFBK0YsRUFBQS9GLElBQ0FzSyxFQUFBOUQsRUFFQXhHLElBQUF1SyxJQUNBRCxFQUFBbEwsR0FBQTJMLE1BQUFULEdBQUEsR0FBQSxHQUdBRCxHQUlBakwsR0FBQXVHLE1BQUFNLEVBQUFaLEVBQUFpRixFQUFBLFlBSUFKLEVBQUFqSyxLQUFBK0osRUFBQWhLLEdBQUFzSyxFQUFBdEssRUFHQSxJQUFBcUssRUFPQSxJQU5BN0wsRUFBQXlILEVBQUFBLEVBQUEvRyxPQUFBLEdBQUF3RixjQUdBdEYsR0FBQTBMLElBQUE3RSxFQUFBMkMsR0FHQTVJLEVBQUEsRUFBQUEsRUFBQXFLLEVBQUFySyxJQUNBc0ssRUFBQXJFLEVBQUFqRyxHQUNBd0gsR0FBQW5ILEtBQUFpSyxFQUFBbkwsTUFBQSxNQUNBK0YsR0FBQXNFLE9BQUFjLEVBQUEsZUFDQWxMLEdBQUFrSCxTQUFBOUgsRUFBQThMLEtBRUFBLEVBQUF0QixJQUdBNUosR0FBQTRMLFVBQ0E1TCxHQUFBNEwsU0FBQVYsRUFBQXRCLEtBR0ExSyxFQUFBZ00sRUFBQWxELFlBQUFwRSxRQUFBaUksR0FBQSxJQUFBek0sSUFRQSxNQUFBd0wsR0FHQSxRQUFBa0IsR0FBQTNMLEVBQUF5SSxFQUFBbUQsR0FLQSxJQUpBLEdBQUFiLEdBQ0E1RCxFQUFBc0IsRUFBQTVJLEdBQUFrQixPQUFBMEgsRUFBQXpJLEdBQUFBLEVBQ0FTLEVBQUEsRUFFQSxPQUFBc0ssRUFBQTVELEVBQUExRyxJQUFBQSxJQUNBbUwsR0FBQSxJQUFBYixFQUFBcEssVUFDQWQsR0FBQWdNLFVBQUEvRixFQUFBaUYsSUFHQUEsRUFBQXhMLGFBQ0FxTSxHQUFBL0wsR0FBQWtILFNBQUFnRSxFQUFBNUYsY0FBQTRGLElBQ0ExRSxFQUFBUCxFQUFBaUYsRUFBQSxXQUVBQSxFQUFBeEwsV0FBQUMsWUFBQXVMLEdBSUEsT0FBQS9LLEdBNlZBLFFBQUE4TCxHQUFBOUwsRUFBQUMsRUFBQThMLEdBQ0EsR0FBQUMsR0FBQUMsRUFBQUMsRUFBQWpHLEVBTUFuQixFQUFBOUUsRUFBQThFLEtBcUNBLE9BbkNBaUgsR0FBQUEsR0FBQUksR0FBQW5NLEdBS0ErTCxJQUNBOUYsRUFBQThGLEVBQUFLLGlCQUFBbk0sSUFBQThMLEVBQUE5TCxHQUVBLEtBQUFnRyxHQUFBcEcsR0FBQWtILFNBQUEvRyxFQUFBbUYsY0FBQW5GLEtBQ0FpRyxFQUFBcEcsR0FBQWlGLE1BQUE5RSxFQUFBQyxLQVFBZ0wsR0FBQW9CLG9CQUFBQyxHQUFBeEwsS0FBQW1GLElBQUFzRyxHQUFBekwsS0FBQWIsS0FHQStMLEVBQUFsSCxFQUFBa0gsTUFDQUMsRUFBQW5ILEVBQUFtSCxTQUNBQyxFQUFBcEgsRUFBQW9ILFNBR0FwSCxFQUFBbUgsU0FBQW5ILEVBQUFvSCxTQUFBcEgsRUFBQWtILE1BQUEvRixFQUNBQSxFQUFBOEYsRUFBQUMsTUFHQWxILEVBQUFrSCxNQUFBQSxFQUNBbEgsRUFBQW1ILFNBQUFBLEVBQ0FuSCxFQUFBb0gsU0FBQUEsUUFJQXhKLEtBQUF1RCxFQUlBQSxFQUFBLEdBQ0FBLEVBSUEsUUFBQXVHLEdBQUFDLEVBQUFDLEdBR0EsT0FDQTlHLElBQUEsV0FDQSxNQUFBNkcsZ0JBSUE1TixNQUFBK0csS0FLQS9HLEtBQUErRyxJQUFBOEcsR0FBQWpLLE1BQUE1RCxLQUFBa0ssYUF1QkEsUUFBQTRELEdBQUExTSxHQUdBLEdBQUFBLElBQUEyTSxJQUNBLE1BQUEzTSxFQU9BLEtBSEEsR0FBQTRNLEdBQUE1TSxFQUFBLEdBQUE2TSxjQUFBN00sRUFBQTBDLE1BQUEsR0FDQWxDLEVBQUFzTSxHQUFBcE4sT0FFQWMsS0FFQSxJQURBUixFQUFBOE0sR0FBQXRNLEdBQUFvTSxJQUNBRCxJQUNBLE1BQUEzTSxHQU9BLFFBQUErTSxHQUFBL00sR0FDQSxHQUFBZ0csR0FBQXBHLEdBQUFvTixTQUFBaE4sRUFJQSxPQUhBZ0csS0FDQUEsRUFBQXBHLEdBQUFvTixTQUFBaE4sR0FBQTBNLEVBQUExTSxJQUFBQSxHQUVBZ0csRUFHQSxRQUFBaUgsR0FBQWxOLEVBQUFnQyxFQUFBbUwsR0FJQSxHQUFBQyxHQUFBeEksR0FBQUMsS0FBQTdDLEVBQ0EsT0FBQW9MLEdBR0FDLEtBQUFDLElBQUEsRUFBQUYsRUFBQSxJQUFBRCxHQUFBLEtBQUFDLEVBQUEsSUFBQSxNQUNBcEwsRUFHQSxRQUFBdUwsR0FBQXZOLEVBQUFDLEVBQUF1TixFQUFBQyxFQUFBQyxHQUNBLEdBQUFqTixHQUNBa04sRUFBQSxDQVdBLEtBUEFsTixFQURBK00sS0FBQUMsRUFBQSxTQUFBLFdBQ0EsRUFJQSxVQUFBeE4sRUFBQSxFQUFBLEVBR0FRLEVBQUEsRUFBQUEsR0FBQSxFQUdBLFdBQUErTSxJQUNBRyxHQUFBOU4sR0FBQTBFLElBQUF2RSxFQUFBd04sRUFBQUksR0FBQW5OLElBQUEsRUFBQWlOLElBR0FELEdBR0EsWUFBQUQsSUFDQUcsR0FBQTlOLEdBQUEwRSxJQUFBdkUsRUFBQSxVQUFBNE4sR0FBQW5OLElBQUEsRUFBQWlOLElBSUEsV0FBQUYsSUFDQUcsR0FBQTlOLEdBQUEwRSxJQUFBdkUsRUFBQSxTQUFBNE4sR0FBQW5OLEdBQUEsU0FBQSxFQUFBaU4sTUFLQUMsR0FBQTlOLEdBQUEwRSxJQUFBdkUsRUFBQSxVQUFBNE4sR0FBQW5OLElBQUEsRUFBQWlOLEdBR0EsWUFBQUYsSUFDQUcsR0FBQTlOLEdBQUEwRSxJQUFBdkUsRUFBQSxTQUFBNE4sR0FBQW5OLEdBQUEsU0FBQSxFQUFBaU4sSUFLQSxPQUFBQyxHQUdBLFFBQUFFLEdBQUE3TixFQUFBQyxFQUFBdU4sR0FHQSxHQUFBTSxHQUNBSixFQUFBdkIsR0FBQW5NLEdBQ0EyTixFQUFBN0IsRUFBQTlMLEVBQUFDLEVBQUF5TixHQUNBRCxFQUFBLGVBQUE1TixHQUFBMEUsSUFBQXZFLEVBQUEsYUFBQSxFQUFBME4sRUFHQSxPQUFBcEIsSUFBQXhMLEtBQUE2TSxHQUNBQSxHQUtBRyxFQUFBTCxJQUNBeEMsR0FBQThDLHFCQUFBSixJQUFBM04sRUFBQThFLE1BQUE3RSxJQUlBLFNBQUEwTixJQUNBQSxFQUFBM04sRUFBQSxTQUFBQyxFQUFBLEdBQUE2TSxjQUFBN00sRUFBQTBDLE1BQUEsTUFJQWdMLEVBQUFLLFdBQUFMLElBQUEsR0FJQUosRUFDQXZOLEVBQ0FDLEVBQ0F1TixJQUFBQyxFQUFBLFNBQUEsV0FDQUssRUFDQUosR0FFQSxNQWlSQSxRQUFBTyxHQUFBak8sRUFBQW9CLEVBQUE0QyxFQUFBZ0IsRUFBQWtKLEdBQ0EsTUFBQSxJQUFBRCxHQUFBRSxVQUFBQyxLQUFBcE8sRUFBQW9CLEVBQUE0QyxFQUFBZ0IsRUFBQWtKLEdBMEhBLFFBQUFHLEtBQ0FDLE1BQ0EsSUFBQTdQLEdBQUE4UCxRQUFBM1AsRUFBQTRQLHNCQUNBNVAsRUFBQTRQLHNCQUFBSCxHQUVBelAsRUFBQTZQLFdBQUFKLEVBQUF4TyxHQUFBNk8sR0FBQUMsVUFHQTlPLEdBQUE2TyxHQUFBRSxRQUtBLFFBQUFDLEtBSUEsTUFIQWpRLEdBQUE2UCxXQUFBLFdBQ0FLLE9BQUFwTSxLQUVBb00sR0FBQWpQLEdBQUFrUCxNQUlBLFFBQUFDLEdBQUFwUCxFQUFBcVAsR0FDQSxHQUFBQyxHQUNBek8sRUFBQSxFQUNBME8sR0FBQUMsT0FBQXhQLEVBS0EsS0FEQXFQLEVBQUFBLEVBQUEsRUFBQSxFQUNBeE8sRUFBQSxFQUFBQSxHQUFBLEVBQUF3TyxFQUNBQyxFQUFBdEIsR0FBQW5OLEdBQ0EwTyxFQUFBLFNBQUFELEdBQUFDLEVBQUEsVUFBQUQsR0FBQXRQLENBT0EsT0FKQXFQLEtBQ0FFLEVBQUFFLFFBQUFGLEVBQUFuRCxNQUFBcE0sR0FHQXVQLEVBR0EsUUFBQUcsR0FBQXROLEVBQUFnQyxFQUFBdUwsR0FLQSxJQUpBLEdBQUFyTCxHQUNBdUcsR0FBQStFLEVBQUFDLFNBQUF6TCxRQUFBNEcsT0FBQTRFLEVBQUFDLFNBQUEsTUFDQS9KLEVBQUEsRUFDQS9GLEVBQUE4SyxFQUFBOUssT0FDQStGLEVBQUEvRixFQUFBK0YsSUFDQSxHQUFBeEIsRUFBQXVHLEVBQUEvRSxHQUFBaEYsS0FBQTZPLEVBQUF2TCxFQUFBaEMsR0FHQSxNQUFBa0MsR0FLQSxRQUFBd0wsR0FBQTFQLEVBQUEyUCxFQUFBQyxHQUNBLEdBQUE1TCxHQUFBaEMsRUFBQTZOLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUE3SyxFQUNBOEssRUFBQSxTQUFBUCxJQUFBLFVBQUFBLEdBQ0FRLEVBQUF0UixLQUNBdVIsS0FDQXRMLEVBQUE5RSxFQUFBOEUsTUFDQXlKLEVBQUF2TyxFQUFBVyxVQUFBa0YsR0FBQTdGLEdBQ0FxUSxFQUFBMUssR0FBQUMsSUFBQTVGLEVBQUEsU0FHQTRQLEdBQUFVLFFBQ0FSLEVBQUFqUSxHQUFBMFEsWUFBQXZRLEVBQUEsTUFDQSxNQUFBOFAsRUFBQVUsV0FDQVYsRUFBQVUsU0FBQSxFQUNBVCxFQUFBRCxFQUFBVyxNQUFBQyxLQUNBWixFQUFBVyxNQUFBQyxLQUFBLFdBQ0FaLEVBQUFVLFVBQ0FULE1BSUFELEVBQUFVLFdBRUFMLEVBQUFRLE9BQUEsV0FHQVIsRUFBQVEsT0FBQSxXQUNBYixFQUFBVSxXQUNBM1EsR0FBQXlRLE1BQUF0USxFQUFBLE1BQUFMLFFBQ0FtUSxFQUFBVyxNQUFBQyxXQU9BLEtBQUExTSxJQUFBMkwsR0FFQSxHQURBM04sRUFBQTJOLEVBQUEzTCxHQUNBNE0sR0FBQTlQLEtBQUFrQixHQUFBLENBR0EsU0FGQTJOLEdBQUEzTCxHQUNBNkwsRUFBQUEsR0FBQSxXQUFBN04sRUFDQUEsS0FBQXVNLEVBQUEsT0FBQSxRQUFBLENBSUEsR0FBQSxTQUFBdk0sSUFBQXFPLE9BQUEzTixLQUFBMk4sRUFBQXJNLEdBS0EsUUFKQXVLLElBQUEsRUFPQTZCLEVBQUFwTSxHQUFBcU0sR0FBQUEsRUFBQXJNLElBQUFuRSxHQUFBaUYsTUFBQTlFLEVBQUFnRSxHQU1BLElBREFnTSxHQUFBblEsR0FBQWdSLGNBQUFsQixNQUNBOVAsR0FBQWdSLGNBQUFULEdBQUEsQ0FLQUYsR0FBQSxJQUFBbFEsRUFBQVcsV0FLQWlQLEVBQUFrQixVQUFBaE0sRUFBQWdNLFNBQUFoTSxFQUFBaU0sVUFBQWpNLEVBQUFrTSxXQUdBZixFQUFBSSxHQUFBQSxFQUFBakwsUUFDQSxNQUFBNkssSUFDQUEsRUFBQXRLLEdBQUFDLElBQUE1RixFQUFBLFlBRUFvRixFQUFBdkYsR0FBQTBFLElBQUF2RSxFQUFBLFdBQ0EsU0FBQW9GLElBQ0E2SyxFQUNBN0ssRUFBQTZLLEdBSUExSyxHQUFBdkYsSUFBQSxHQUNBaVEsRUFBQWpRLEVBQUE4RSxNQUFBTSxTQUFBNkssRUFDQTdLLEVBQUF2RixHQUFBMEUsSUFBQXZFLEVBQUEsV0FDQXVGLEdBQUF2RixPQUtBLFdBQUFvRixHQUFBLGlCQUFBQSxHQUFBLE1BQUE2SyxJQUNBLFNBQUFwUSxHQUFBMEUsSUFBQXZFLEVBQUEsV0FHQWdRLElBQ0FHLEVBQUE3TixLQUFBLFdBQ0F3QyxFQUFBTSxRQUFBNkssSUFFQSxNQUFBQSxJQUNBN0ssRUFBQU4sRUFBQU0sUUFDQTZLLEVBQUEsU0FBQTdLLEVBQUEsR0FBQUEsSUFHQU4sRUFBQU0sUUFBQSxpQkFLQXdLLEVBQUFrQixXQUNBaE0sRUFBQWdNLFNBQUEsU0FDQVgsRUFBQVEsT0FBQSxXQUNBN0wsRUFBQWdNLFNBQUFsQixFQUFBa0IsU0FBQSxHQUNBaE0sRUFBQWlNLFVBQUFuQixFQUFBa0IsU0FBQSxHQUNBaE0sRUFBQWtNLFVBQUFwQixFQUFBa0IsU0FBQSxNQUtBZCxHQUFBLENBQ0EsS0FBQWhNLElBQUFvTSxHQUdBSixJQUNBSyxFQUNBLFVBQUFBLEtBQ0E5QixFQUFBOEIsRUFBQTlCLFFBR0E4QixFQUFBMUssR0FBQXNFLE9BQUFqSyxFQUFBLFVBQUFvRixRQUFBNkssSUFJQUosSUFDQVEsRUFBQTlCLFFBQUFBLEdBSUFBLEdBQ0FoSixHQUFBdkYsSUFBQSxHQUtBbVEsRUFBQTdOLEtBQUEsV0FLQWlNLEdBQ0FoSixHQUFBdkYsSUFFQTJGLEdBQUFnRyxPQUFBM0wsRUFBQSxTQUNBLEtBQUFnRSxJQUFBb00sR0FDQXZRLEdBQUFpRixNQUFBOUUsRUFBQWdFLEVBQUFvTSxFQUFBcE0sT0FNQWdNLEVBQUFWLEVBQUFmLEVBQUE4QixFQUFBck0sR0FBQSxFQUFBQSxFQUFBbU0sR0FDQW5NLElBQUFxTSxLQUNBQSxFQUFBck0sR0FBQWdNLEVBQUFqTCxNQUNBd0osSUFDQXlCLEVBQUFoTCxJQUFBZ0wsRUFBQWpMLE1BQ0FpTCxFQUFBakwsTUFBQSxLQU1BLFFBQUFrTSxHQUFBdEIsRUFBQXVCLEdBQ0EsR0FBQXhMLEdBQUF6RixFQUFBaU8sRUFBQWxNLEVBQUE4TixDQUdBLEtBQUFwSyxJQUFBaUssR0FlQSxHQWRBMVAsRUFBQUosR0FBQXNSLFVBQUF6TCxHQUNBd0ksRUFBQWdELEVBQUFqUixHQUNBK0IsRUFBQTJOLEVBQUFqSyxHQUNBMEwsTUFBQUMsUUFBQXJQLEtBQ0FrTSxFQUFBbE0sRUFBQSxHQUNBQSxFQUFBMk4sRUFBQWpLLEdBQUExRCxFQUFBLElBR0EwRCxJQUFBekYsSUFDQTBQLEVBQUExUCxHQUFBK0IsUUFDQTJOLEdBQUFqSyxLQUdBb0ssRUFBQWpRLEdBQUF5UixTQUFBclIsS0FDQSxVQUFBNlAsR0FBQSxDQUNBOU4sRUFBQThOLEVBQUF5QixPQUFBdlAsU0FDQTJOLEdBQUExUCxFQUlBLEtBQUF5RixJQUFBMUQsR0FDQTBELElBQUFpSyxLQUNBQSxFQUFBakssR0FBQTFELEVBQUEwRCxHQUNBd0wsRUFBQXhMLEdBQUF3SSxPQUlBZ0QsR0FBQWpSLEdBQUFpTyxFQUtBLFFBQUFzQixHQUFBeFAsRUFBQXdSLEVBQUFwUSxHQUNBLEdBQUFxUSxHQUNBQyxFQUNBaE0sRUFBQSxFQUNBL0YsRUFBQTZQLEVBQUFtQyxXQUFBaFMsT0FDQWlTLEVBQUEvUixHQUFBZ1MsV0FBQWxCLE9BQUEsaUJBR0EvQixHQUFBNU8sT0FFQTRPLEVBQUEsV0FDQSxHQUFBOEMsRUFDQSxPQUFBLENBWUEsS0FWQSxHQUFBSSxHQUFBaEQsSUFBQUQsSUFDQWtELEVBQUExRSxLQUFBQyxJQUFBLEVBQUFpQyxFQUFBeUMsVUFBQXpDLEVBQUEwQyxTQUFBSCxHQUlBNU0sRUFBQTZNLEVBQUF4QyxFQUFBMEMsVUFBQSxFQUNBQyxFQUFBLEVBQUFoTixFQUNBUSxFQUFBLEVBQ0EvRixFQUFBNFAsRUFBQTRDLE9BQUF4UyxPQUVBK0YsRUFBQS9GLEVBQUErRixJQUNBNkosRUFBQTRDLE9BQUF6TSxHQUFBME0sSUFBQUYsRUFNQSxPQUhBTixHQUFBUyxXQUFBclMsR0FBQXVQLEVBQUEyQyxFQUFBSCxJQUdBRyxFQUFBLEdBQUF2UyxFQUNBb1MsR0FJQXBTLEdBQ0FpUyxFQUFBUyxXQUFBclMsR0FBQXVQLEVBQUEsRUFBQSxJQUlBcUMsRUFBQVUsWUFBQXRTLEdBQUF1UCxLQUNBLElBRUFBLEVBQUFxQyxFQUFBdlAsU0FDQXJDLEtBQUFBLEVBQ0EyUCxNQUFBOVAsR0FBQXNLLFVBQUFxSCxHQUNBNUIsS0FBQS9QLEdBQUFzSyxRQUFBLEdBQ0ErRyxpQkFDQWhELE9BQUFyTyxHQUFBcU8sT0FBQTNHLFVBQ0FuRyxHQUNBbVIsbUJBQUFmLEVBQ0FnQixnQkFBQXBSLEVBQ0E0USxVQUFBbEQsSUFBQUQsSUFDQW9ELFNBQUE3USxFQUFBNlEsU0FDQUUsVUFDQTdDLFlBQUEsU0FBQXRMLEVBQUFnQixHQUNBLEdBQUFkLEdBQUFyRSxHQUFBb08sTUFBQWpPLEVBQUF1UCxFQUFBSyxLQUFBNUwsRUFBQWdCLEVBQ0F1SyxFQUFBSyxLQUFBc0IsY0FBQWxOLElBQUF1TCxFQUFBSyxLQUFBMUIsT0FFQSxPQURBcUIsR0FBQTRDLE9BQUFySyxLQUFBNUQsR0FDQUEsR0FFQXVPLEtBQUEsU0FBQUMsR0FDQSxHQUFBaE4sR0FBQSxFQUlBL0YsRUFBQStTLEVBQUFuRCxFQUFBNEMsT0FBQXhTLE9BQUEsQ0FDQSxJQUFBK1IsRUFDQSxNQUFBN1MsS0FHQSxLQURBNlMsR0FBQSxFQUNBaE0sRUFBQS9GLEVBQUErRixJQUNBNkosRUFBQTRDLE9BQUF6TSxHQUFBME0sSUFBQSxFQVVBLE9BTkFNLElBQ0FkLEVBQUFTLFdBQUFyUyxHQUFBdVAsRUFBQSxFQUFBLElBQ0FxQyxFQUFBVSxZQUFBdFMsR0FBQXVQLEVBQUFtRCxLQUVBZCxFQUFBZSxXQUFBM1MsR0FBQXVQLEVBQUFtRCxJQUVBN1QsUUFHQThRLEVBQUFKLEVBQUFJLEtBSUEsS0FGQXNCLEVBQUF0QixFQUFBSixFQUFBSyxLQUFBc0IsZUFFQXhMLEVBQUEvRixFQUFBK0YsSUFFQSxHQURBK0wsRUFBQWpDLEVBQUFtQyxXQUFBak0sR0FBQWhGLEtBQUE2TyxFQUFBdlAsRUFBQTJQLEVBQUFKLEVBQUFLLE1BTUEsTUFKQS9QLElBQUFVLFdBQUFrUixFQUFBZ0IsUUFDQTVTLEdBQUEwUSxZQUFBaEIsRUFBQXZQLEtBQUF1UCxFQUFBSyxLQUFBVSxPQUFBbUMsS0FDQTVTLEdBQUErUyxNQUFBbkIsRUFBQWdCLEtBQUFoQixJQUVBQSxDQXlCQSxPQXJCQTVSLElBQUEwTCxJQUFBb0UsRUFBQUwsRUFBQUMsR0FFQTFQLEdBQUFVLFdBQUFnUCxFQUFBSyxLQUFBN0ssUUFDQXdLLEVBQUFLLEtBQUE3SyxNQUFBckUsS0FBQVYsRUFBQXVQLEdBSUFBLEVBQ0FzRCxTQUFBdEQsRUFBQUssS0FBQWlELFVBQ0F2USxLQUFBaU4sRUFBQUssS0FBQXROLEtBQUFpTixFQUFBSyxLQUFBa0QsVUFDQXZRLEtBQUFnTixFQUFBSyxLQUFBck4sTUFDQW9PLE9BQUFwQixFQUFBSyxLQUFBZSxRQUVBOVEsR0FBQTZPLEdBQUFxRSxNQUNBbFQsR0FBQXNLLE9BQUF5RSxHQUNBNU8sS0FBQUEsRUFDQW1RLEtBQUFaLEVBQ0FlLE1BQUFmLEVBQUFLLEtBQUFVLFNBSUFmLEVBaWxCQSxRQUFBeUQsR0FBQWhSLEdBRUEsT0FEQUEsRUFBQVQsTUFBQUMsU0FDQXlSLEtBQUEsS0FJQSxRQUFBQyxHQUFBbFQsR0FDQSxNQUFBQSxHQUFBMkQsY0FBQTNELEVBQUEyRCxhQUFBLFVBQUEsR0ErbUJBLFFBQUF3UCxHQUFBQyxFQUFBMVQsRUFBQTJULEVBQUFwSyxHQUNBLEdBQUFoSixFQUVBLElBQUFtUixNQUFBQyxRQUFBM1IsR0FHQUcsR0FBQXlCLEtBQUE1QixFQUFBLFNBQUFlLEVBQUFtQixHQUNBeVIsR0FBQUMsR0FBQXhTLEtBQUFzUyxHQUdBbkssRUFBQW1LLEVBQUF4UixHQUtBdVIsRUFDQUMsRUFBQSxLQUFBLGdCQUFBeFIsSUFBQSxNQUFBQSxFQUFBbkIsRUFBQSxJQUFBLElBQ0FtQixFQUNBeVIsRUFDQXBLLFNBS0EsSUFBQW9LLEdBQUEsV0FBQXhULEdBQUFELEtBQUFGLEdBVUF1SixFQUFBbUssRUFBQTFULE9BUEEsS0FBQU8sSUFBQVAsR0FDQXlULEVBQUFDLEVBQUEsSUFBQW5ULEVBQUEsSUFBQVAsRUFBQU8sR0FBQW9ULEVBQUFwSyxHQTBIQSxRQUFBc0ssR0FBQUMsR0FHQSxNQUFBLFVBQUFDLEVBQUFDLEdBRUEsZ0JBQUFELEtBQ0FDLEVBQUFELEVBQ0FBLEVBQUEsSUFHQSxJQUFBRSxHQUNBbFQsRUFBQSxFQUNBbVQsRUFBQUgsRUFBQXZULGNBQUFxQixNQUFBQyxPQUVBLElBQUEzQixHQUFBVSxXQUFBbVQsR0FHQSxLQUFBQyxFQUFBQyxFQUFBblQsTUFHQSxNQUFBa1QsRUFBQSxJQUNBQSxFQUFBQSxFQUFBaFIsTUFBQSxJQUFBLEtBQ0E2USxFQUFBRyxHQUFBSCxFQUFBRyxRQUFBRSxRQUFBSCxLQUlBRixFQUFBRyxHQUFBSCxFQUFBRyxRQUFBN0wsS0FBQTRMLElBUUEsUUFBQUksR0FBQU4sRUFBQXBTLEVBQUFvUixFQUFBdUIsR0FLQSxRQUFBQyxHQUFBTCxHQUNBLEdBQUFNLEVBY0EsT0FiQUMsR0FBQVAsSUFBQSxFQUNBOVQsR0FBQXlCLEtBQUFrUyxFQUFBRyxPQUFBLFNBQUFsUyxFQUFBMFMsR0FDQSxHQUFBQyxHQUFBRCxFQUFBL1MsRUFBQW9SLEVBQUF1QixFQUNBLE9BQUEsZ0JBQUFLLElBQ0FDLEdBQUFILEVBQUFFLEdBS0FDLElBQ0FKLEVBQUFHLE9BREEsSUFIQWhULEVBQUF3UyxVQUFBQyxRQUFBTyxHQUNBSixFQUFBSSxJQUNBLEtBS0FILEVBbEJBLEdBQUFDLE1BQ0FHLEVBQUFiLElBQUFjLEVBb0JBLE9BQUFOLEdBQUE1UyxFQUFBd1MsVUFBQSxNQUFBTSxFQUFBLE1BQUFGLEVBQUEsS0FNQSxRQUFBTyxHQUFBQyxFQUFBL0ssR0FDQSxHQUFBakcsR0FBQWlSLEVBQ0FDLEVBQUE3VSxHQUFBOFUsYUFBQUQsZUFFQSxLQUFBbFIsSUFBQWlHLE9BQ0EvRyxLQUFBK0csRUFBQWpHLE1BQ0FrUixFQUFBbFIsR0FBQWdSLEVBQUFDLElBQUFBLE9BQUFqUixHQUFBaUcsRUFBQWpHLEdBT0EsT0FKQWlSLElBQ0E1VSxHQUFBc0ssUUFBQSxFQUFBcUssRUFBQUMsR0FHQUQsRUFPQSxRQUFBSSxHQUFBQyxFQUFBZCxFQUFBZSxHQU9BLElBTEEsR0FBQUMsR0FBQW5WLEVBQUFvVixFQUFBQyxFQUNBQyxFQUFBTCxFQUFBSyxTQUNBdEIsRUFBQWlCLEVBQUFqQixVQUdBLE1BQUFBLEVBQUEsSUFDQUEsRUFBQXVCLFlBQ0F6UyxLQUFBcVMsSUFDQUEsRUFBQUYsRUFBQU8sVUFBQXJCLEVBQUFzQixrQkFBQSxnQkFLQSxJQUFBTixFQUNBLElBQUFuVixJQUFBc1YsR0FDQSxHQUFBQSxFQUFBdFYsSUFBQXNWLEVBQUF0VixHQUFBa0IsS0FBQWlVLEdBQUEsQ0FDQW5CLEVBQUFDLFFBQUFqVSxFQUNBLE9BTUEsR0FBQWdVLEVBQUEsSUFBQWtCLEdBQ0FFLEVBQUFwQixFQUFBLE9BQ0EsQ0FHQSxJQUFBaFUsSUFBQWtWLEdBQUEsQ0FDQSxJQUFBbEIsRUFBQSxJQUFBaUIsRUFBQVMsV0FBQTFWLEVBQUEsSUFBQWdVLEVBQUEsSUFBQSxDQUNBb0IsRUFBQXBWLENBQ0EsT0FFQXFWLElBQ0FBLEVBQUFyVixHQUtBb1YsRUFBQUEsR0FBQUMsRUFNQSxHQUFBRCxFQUlBLE1BSEFBLEtBQUFwQixFQUFBLElBQ0FBLEVBQUFDLFFBQUFtQixHQUVBRixFQUFBRSxHQU9BLFFBQUFPLElBQUFWLEVBQUFXLEVBQUF6QixFQUFBMEIsR0FDQSxHQUFBQyxHQUFBQyxFQUFBQyxFQUFBL08sRUFBQWdQLEVBQ0FQLEtBR0ExQixFQUFBaUIsRUFBQWpCLFVBQUFqUixPQUdBLElBQUFpUixFQUFBLEdBQ0EsSUFBQWdDLElBQUFmLEdBQUFTLFdBQ0FBLEVBQUFNLEVBQUExVixlQUFBMlUsRUFBQVMsV0FBQU0sRUFPQSxLQUhBRCxFQUFBL0IsRUFBQXVCLFFBR0FRLEdBY0EsR0FaQWQsRUFBQWlCLGVBQUFILEtBQ0E1QixFQUFBYyxFQUFBaUIsZUFBQUgsSUFBQUgsSUFJQUssR0FBQUosR0FBQVosRUFBQWtCLGFBQ0FQLEVBQUFYLEVBQUFrQixXQUFBUCxFQUFBWCxFQUFBbEIsV0FHQWtDLEVBQUFGLEVBQ0FBLEVBQUEvQixFQUFBdUIsUUFLQSxHQUFBLE1BQUFRLEVBRUFBLEVBQUFFLE1BR0EsSUFBQSxNQUFBQSxHQUFBQSxJQUFBRixFQUFBLENBTUEsS0FIQUMsRUFBQU4sRUFBQU8sRUFBQSxJQUFBRixJQUFBTCxFQUFBLEtBQUFLLElBSUEsSUFBQUQsSUFBQUosR0FJQSxHQURBek8sRUFBQTZPLEVBQUFNLE1BQUEsS0FDQW5QLEVBQUEsS0FBQThPLElBR0FDLEVBQUFOLEVBQUFPLEVBQUEsSUFBQWhQLEVBQUEsS0FDQXlPLEVBQUEsS0FBQXpPLEVBQUEsS0FDQSxFQUdBLElBQUErTyxFQUNBQSxFQUFBTixFQUFBSSxJQUdBLElBQUFKLEVBQUFJLEtBQ0FDLEVBQUE5TyxFQUFBLEdBQ0ErTSxFQUFBQyxRQUFBaE4sRUFBQSxJQUVBLE9BT0EsSUFBQSxJQUFBK08sRUFHQSxHQUFBQSxHQUFBZixFQUFBb0IsT0FDQVQsRUFBQUksRUFBQUosT0FFQSxLQUNBQSxFQUFBSSxFQUFBSixHQUNBLE1BQUE1UixHQUNBLE9BQ0FzUyxNQUFBLGNBQ0FDLE1BQUFQLEVBQUFoUyxFQUFBLHNCQUFBaVMsRUFBQSxPQUFBRixJQVNBLE9BQUFPLE1BQUEsVUFBQS9TLEtBQUFxUyxHQS9nUkEsR0FBQVksT0FFQTNYLEdBQUFHLEVBQUFILFNBRUE0WCxHQUFBQyxPQUFBQyxlQUVBNVQsR0FBQXlULEdBQUF6VCxNQUVBaUksR0FBQXdMLEdBQUF4TCxPQUVBOUMsR0FBQXNPLEdBQUF0TyxLQUVBbEgsR0FBQXdWLEdBQUF4VixRQUVBNFYsTUFFQUMsR0FBQUQsR0FBQUMsU0FFQUMsR0FBQUYsR0FBQUcsZUFFQUMsR0FBQUYsR0FBQUQsU0FFQUksR0FBQUQsR0FBQWxXLEtBQUE0VixRQUVBckwsTUFzQkFwTCxHQUFBLFNBQUE0SSxFQUFBMUMsR0FJQSxNQUFBLElBQUFsRyxJQUFBNkksR0FBQTBGLEtBQUEzRixFQUFBMUMsSUFLQStRLEdBQUEscUNBR0FDLEdBQUEsUUFDQUMsR0FBQSxZQUdBQyxHQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQUEsR0FBQXJLLGNBR0FqTixJQUFBNkksR0FBQTdJLEdBQUFzTyxXQUdBaUosT0ExQkEsUUE0QkFDLFlBQUF4WCxHQUdBRixPQUFBLEVBRUEyWCxRQUFBLFdBQ0EsTUFBQTNVLElBQUFqQyxLQUFBN0IsT0FLQStHLElBQUEsU0FBQTJSLEdBR0EsTUFBQSxPQUFBQSxFQUNBNVUsR0FBQWpDLEtBQUE3QixNQUlBMFksRUFBQSxFQUFBMVksS0FBQTBZLEVBQUExWSxLQUFBYyxRQUFBZCxLQUFBMFksSUFLQUMsVUFBQSxTQUFBbFIsR0FHQSxHQUFBTCxHQUFBcEcsR0FBQXVHLE1BQUF2SCxLQUFBd1ksY0FBQS9RLEVBTUEsT0FIQUwsR0FBQXdSLFdBQUE1WSxLQUdBb0gsR0FJQTNFLEtBQUEsU0FBQXFKLEdBQ0EsTUFBQTlLLElBQUF5QixLQUFBekMsS0FBQThMLElBR0FZLElBQUEsU0FBQVosR0FDQSxNQUFBOUwsTUFBQTJZLFVBQUEzWCxHQUFBMEwsSUFBQTFNLEtBQUEsU0FBQW1CLEVBQUFTLEdBQ0EsTUFBQWtLLEdBQUFqSyxLQUFBVixFQUFBUyxFQUFBVCxPQUlBMkMsTUFBQSxXQUNBLE1BQUE5RCxNQUFBMlksVUFBQTdVLEdBQUFGLE1BQUE1RCxLQUFBa0ssYUFHQThCLE1BQUEsV0FDQSxNQUFBaE0sTUFBQXdNLEdBQUEsSUFHQXFNLEtBQUEsV0FDQSxNQUFBN1ksTUFBQXdNLElBQUEsSUFHQUEsR0FBQSxTQUFBNUssR0FDQSxHQUFBa1gsR0FBQTlZLEtBQUFjLE9BQ0FxSCxHQUFBdkcsR0FBQUEsRUFBQSxFQUFBa1gsRUFBQSxFQUNBLE9BQUE5WSxNQUFBMlksVUFBQXhRLEdBQUEsR0FBQUEsRUFBQTJRLEdBQUE5WSxLQUFBbUksU0FHQWhDLElBQUEsV0FDQSxNQUFBbkcsTUFBQTRZLFlBQUE1WSxLQUFBd1ksZUFLQXZQLEtBQUFBLEdBQ0E4UCxLQUFBeEIsR0FBQXdCLEtBQ0FDLE9BQUF6QixHQUFBeUIsUUFHQWhZLEdBQUFzSyxPQUFBdEssR0FBQTZJLEdBQUF5QixPQUFBLFdBQ0EsR0FBQS9JLEdBQUFuQixFQUFBd0osRUFBQXFPLEVBQUFDLEVBQUF2TSxFQUNBZ0osRUFBQXpMLFVBQUEsT0FDQXRJLEVBQUEsRUFDQWQsRUFBQW9KLFVBQUFwSixPQUNBOFUsR0FBQSxDQXNCQSxLQW5CQSxpQkFBQUQsS0FDQUMsRUFBQUQsRUFHQUEsRUFBQXpMLFVBQUF0SSxPQUNBQSxLQUlBLGdCQUFBK1QsSUFBQTNVLEdBQUFVLFdBQUFpVSxLQUNBQSxNQUlBL1QsSUFBQWQsSUFDQTZVLEVBQUEzVixLQUNBNEIsS0FHQUEsRUFBQWQsRUFBQWMsSUFHQSxHQUFBLE9BQUFXLEVBQUEySCxVQUFBdEksSUFHQSxJQUFBUixJQUFBbUIsR0FDQXFJLEVBQUErSyxFQUFBdlUsR0FDQTZYLEVBQUExVyxFQUFBbkIsR0FHQXVVLElBQUFzRCxJQUtBckQsR0FBQXFELElBQUFqWSxHQUFBbVksY0FBQUYsS0FDQUMsRUFBQTNHLE1BQUFDLFFBQUF5RyxNQUVBQyxHQUNBQSxHQUFBLEVBQ0F2TSxFQUFBL0IsR0FBQTJILE1BQUFDLFFBQUE1SCxHQUFBQSxNQUdBK0IsRUFBQS9CLEdBQUE1SixHQUFBbVksY0FBQXZPLEdBQUFBLEtBSUErSyxFQUFBdlUsR0FBQUosR0FBQXNLLE9BQUFzSyxFQUFBakosRUFBQXNNLFFBR0FwVixLQUFBb1YsSUFDQXRELEVBQUF2VSxHQUFBNlgsR0FPQSxPQUFBdEQsSUFHQTNVLEdBQUFzSyxRQUdBbkgsUUFBQSxVQWhMQSxRQWdMQXFLLEtBQUE0SyxVQUFBeFUsUUFBQSxNQUFBLElBR0F5VSxTQUFBLEVBRUEvQixNQUFBLFNBQUFnQyxHQUNBLEtBQUEsSUFBQXhaLE9BQUF3WixJQUdBQyxLQUFBLGFBRUE3WCxXQUFBLFNBQUFiLEdBQ0EsTUFBQSxhQUFBRyxHQUFBRCxLQUFBRixJQUdBSSxTQUFBLFNBQUFKLEdBQ0EsTUFBQSxPQUFBQSxHQUFBQSxJQUFBQSxFQUFBZCxRQUdBeVosVUFBQSxTQUFBM1ksR0FLQSxHQUFBRSxHQUFBQyxHQUFBRCxLQUFBRixFQUNBLFFBQUEsV0FBQUUsR0FBQSxXQUFBQSxLQUtBMFksTUFBQTVZLEVBQUFzTyxXQUFBdE8sS0FHQXNZLGNBQUEsU0FBQXRZLEdBQ0EsR0FBQTZZLEdBQUFDLENBSUEsVUFBQTlZLEdBQUEsb0JBQUErVyxHQUFBL1YsS0FBQWhCLFFBSUE2WSxFQUFBbEMsR0FBQTNXLEtBU0EsbUJBREE4WSxFQUFBOUIsR0FBQWhXLEtBQUE2WCxFQUFBLGdCQUFBQSxFQUFBbEIsY0FDQVQsR0FBQWxXLEtBQUE4WCxLQUFBM0IsS0FHQWhHLGNBQUEsU0FBQW5SLEdBSUEsR0FBQU8sRUFFQSxLQUFBQSxJQUFBUCxHQUNBLE9BQUEsQ0FFQSxRQUFBLEdBR0FFLEtBQUEsU0FBQUYsR0FDQSxNQUFBLE9BQUFBLEVBQ0FBLEVBQUEsR0FJQSxnQkFBQUEsSUFBQSxrQkFBQUEsR0FDQThXLEdBQUFDLEdBQUEvVixLQUFBaEIsS0FBQSxlQUNBQSxJQUlBK1ksV0FBQSxTQUFBelosR0FDQUQsRUFBQUMsSUFNQW1TLFVBQUEsU0FBQXVILEdBQ0EsTUFBQUEsR0FBQWpWLFFBQUFzVCxHQUFBLE9BQUF0VCxRQUFBdVQsR0FBQUMsS0FHQTNWLEtBQUEsU0FBQTVCLEVBQUFpTCxHQUNBLEdBQUFoTCxHQUFBYyxFQUFBLENBRUEsSUFBQWhCLEVBQUFDLEdBRUEsSUFEQUMsRUFBQUQsRUFBQUMsT0FDQWMsRUFBQWQsSUFDQSxJQUFBZ0wsRUFBQWpLLEtBQUFoQixFQUFBZSxHQUFBQSxFQUFBZixFQUFBZSxJQURBQSxTQU1BLEtBQUFBLElBQUFmLEdBQ0EsSUFBQSxJQUFBaUwsRUFBQWpLLEtBQUFoQixFQUFBZSxHQUFBQSxFQUFBZixFQUFBZSxJQUNBLEtBS0EsT0FBQWYsSUFJQWlaLEtBQUEsU0FBQXZaLEdBQ0EsTUFBQSxPQUFBQSxFQUNBLElBQ0FBLEVBQUEsSUFBQXFFLFFBQUFxVCxHQUFBLEtBSUE4QixVQUFBLFNBQUF4QyxFQUFBeUMsR0FDQSxHQUFBNVMsR0FBQTRTLEtBYUEsT0FYQSxPQUFBekMsSUFDQTNXLEVBQUE2VyxPQUFBRixJQUNBdlcsR0FBQXVHLE1BQUFILEVBQ0EsZ0JBQUFtUSxJQUNBQSxHQUFBQSxHQUdBdE8sR0FBQXBILEtBQUF1RixFQUFBbVEsSUFJQW5RLEdBR0ErQixRQUFBLFNBQUFoSSxFQUFBb1csRUFBQTNWLEdBQ0EsTUFBQSxPQUFBMlYsR0FBQSxFQUFBeFYsR0FBQUYsS0FBQTBWLEVBQUFwVyxFQUFBUyxJQUtBMkYsTUFBQSxTQUFBeUUsRUFBQWlPLEdBS0EsSUFKQSxHQUFBbkIsSUFBQW1CLEVBQUFuWixPQUNBcUgsRUFBQSxFQUNBdkcsRUFBQW9LLEVBQUFsTCxPQUVBcUgsRUFBQTJRLEVBQUEzUSxJQUNBNkQsRUFBQXBLLEtBQUFxWSxFQUFBOVIsRUFLQSxPQUZBNkQsR0FBQWxMLE9BQUFjLEVBRUFvSyxHQUdBckssS0FBQSxTQUFBOEYsRUFBQXFFLEVBQUFvTyxHQVNBLElBUkEsR0FDQTNMLE1BQ0EzTSxFQUFBLEVBQ0FkLEVBQUEyRyxFQUFBM0csT0FDQXFaLEdBQUFELEVBSUF0WSxFQUFBZCxFQUFBYyxLQUNBa0ssRUFBQXJFLEVBQUE3RixHQUFBQSxLQUNBdVksR0FDQTVMLEVBQUF0RixLQUFBeEIsRUFBQTdGLEdBSUEsT0FBQTJNLElBSUE3QixJQUFBLFNBQUFqRixFQUFBcUUsRUFBQXNPLEdBQ0EsR0FBQXRaLEdBQUFxQyxFQUNBdkIsRUFBQSxFQUNBd0YsSUFHQSxJQUFBeEcsRUFBQTZHLEdBRUEsSUFEQTNHLEVBQUEyRyxFQUFBM0csT0FDQWMsRUFBQWQsRUFBQWMsSUFHQSxPQUZBdUIsRUFBQTJJLEVBQUFyRSxFQUFBN0YsR0FBQUEsRUFBQXdZLEtBR0FoVCxFQUFBNkIsS0FBQTlGLE9BTUEsS0FBQXZCLElBQUE2RixHQUdBLE9BRkF0RSxFQUFBMkksRUFBQXJFLEVBQUE3RixHQUFBQSxFQUFBd1ksS0FHQWhULEVBQUE2QixLQUFBOUYsRUFNQSxPQUFBNEksSUFBQW5JLFNBQUF3RCxJQUlBK0MsS0FBQSxFQUlBNEosTUFBQSxTQUFBbEssRUFBQTNDLEdBQ0EsR0FBQWMsR0FBQTZELEVBQUFrSSxDQVVBLElBUkEsZ0JBQUE3TSxLQUNBYyxFQUFBNkIsRUFBQTNDLEdBQ0FBLEVBQUEyQyxFQUNBQSxFQUFBN0IsR0FLQWhILEdBQUFVLFdBQUFtSSxHQWFBLE1BUkFnQyxHQUFBL0gsR0FBQWpDLEtBQUFxSSxVQUFBLEdBQ0E2SixFQUFBLFdBQ0EsTUFBQWxLLEdBQUFqRyxNQUFBc0QsR0FBQWxILEtBQUE2TCxFQUFBRSxPQUFBakksR0FBQWpDLEtBQUFxSSxjQUlBNkosRUFBQTVKLEtBQUFOLEVBQUFNLEtBQUFOLEVBQUFNLE1BQUFuSixHQUFBbUosT0FFQTRKLEdBR0E3RCxJQUFBbUssS0FBQW5LLElBSUE5RCxRQUFBQSxLQUdBLGtCQUFBa08sVUFDQXRaLEdBQUE2SSxHQUFBeVEsT0FBQUMsVUFBQWhELEdBQUErQyxPQUFBQyxXQUlBdlosR0FBQXlCLEtBQUEsdUVBQUEwVSxNQUFBLEtBQ0EsU0FBQXZWLEVBQUFSLEdBQ0F1VyxHQUFBLFdBQUF2VyxFQUFBLEtBQUFBLEVBQUFDLGVBbUJBLElBQUFtWixJQVdBLFNBQUF6YSxHQTZNQSxRQUFBeWEsR0FBQTVRLEVBQUExQyxFQUFBOFMsRUFBQVMsR0FDQSxHQUFBQyxHQUFBOVksRUFBQVQsRUFBQXdaLEVBQUFqWSxFQUFBa1ksRUFBQUMsRUFDQUMsRUFBQTVULEdBQUFBLEVBQUFaLGNBR0F4RSxFQUFBb0YsRUFBQUEsRUFBQXBGLFNBQUEsQ0FLQSxJQUhBa1ksRUFBQUEsTUFHQSxnQkFBQXBRLEtBQUFBLEdBQ0EsSUFBQTlILEdBQUEsSUFBQUEsR0FBQSxLQUFBQSxFQUVBLE1BQUFrWSxFQUlBLEtBQUFTLEtBRUF2VCxFQUFBQSxFQUFBWixlQUFBWSxFQUFBNlQsS0FBQW5iLEdBQ0FvYixFQUFBOVQsR0FFQUEsRUFBQUEsR0FBQXRILEVBRUFxYixHQUFBLENBSUEsR0FBQSxLQUFBblosSUFBQVksRUFBQXdZLEdBQUFsVixLQUFBNEQsSUFHQSxHQUFBOFEsRUFBQWhZLEVBQUEsSUFHQSxHQUFBLElBQUFaLEVBQUEsQ0FDQSxLQUFBWCxFQUFBK0YsRUFBQWlVLGVBQUFULElBVUEsTUFBQVYsRUFMQSxJQUFBN1ksRUFBQWlhLEtBQUFWLEVBRUEsTUFEQVYsR0FBQS9RLEtBQUE5SCxHQUNBNlksTUFZQSxJQUFBYyxJQUFBM1osRUFBQTJaLEVBQUFLLGVBQUFULEtBQ0F4UyxFQUFBaEIsRUFBQS9GLElBQ0FBLEVBQUFpYSxLQUFBVixFQUdBLE1BREFWLEdBQUEvUSxLQUFBOUgsR0FDQTZZLE1BS0EsQ0FBQSxHQUFBdFgsRUFBQSxHQUVBLE1BREF1RyxHQUFBckYsTUFBQW9XLEVBQUE5UyxFQUFBRyxxQkFBQXVDLElBQ0FvUSxDQUdBLEtBQUFVLEVBQUFoWSxFQUFBLEtBQUEwSixFQUFBaVAsd0JBQ0FuVSxFQUFBbVUsdUJBR0EsTUFEQXBTLEdBQUFyRixNQUFBb1csRUFBQTlTLEVBQUFtVSx1QkFBQVgsSUFDQVYsRUFLQSxHQUFBNU4sRUFBQWtQLE1BQ0FDLEVBQUEzUixFQUFBLFFBQ0E0UixJQUFBQSxFQUFBdlosS0FBQTJILElBQUEsQ0FFQSxHQUFBLElBQUE5SCxFQUNBZ1osRUFBQTVULEVBQ0EyVCxFQUFBalIsTUFNQSxJQUFBLFdBQUExQyxFQUFBaEcsU0FBQUcsY0FBQSxDQVlBLEtBVEFzWixFQUFBelQsRUFBQXBDLGFBQUEsT0FDQTZWLEVBQUFBLEVBQUEvVixRQUFBNlcsR0FBQUMsSUFFQXhVLEVBQUF5VSxhQUFBLEtBQUFoQixFQUFBeFcsR0FJQXlXLEVBQUFnQixFQUFBaFMsR0FDQWhJLEVBQUFnWixFQUFBOVosT0FDQWMsS0FDQWdaLEVBQUFoWixHQUFBLElBQUErWSxFQUFBLElBQUFrQixFQUFBakIsRUFBQWhaLEdBRUFpWixHQUFBRCxFQUFBeEcsS0FBQSxLQUdBMEcsRUFBQWdCLEdBQUE3WixLQUFBMkgsSUFBQW1TLEVBQUE3VSxFQUFBeEcsYUFDQXdHLEVBR0EsR0FBQTJULEVBQ0EsSUFJQSxNQUhBNVIsR0FBQXJGLE1BQUFvVyxFQUNBYyxFQUFBeFQsaUJBQUF1VCxJQUVBYixFQUNBLE1BQUFnQyxJQUNBLFFBQ0FyQixJQUFBeFcsR0FDQStDLEVBQUF3RCxnQkFBQSxRQVNBLE1BQUF1UixHQUFBclMsRUFBQWhGLFFBQUFxVCxHQUFBLE1BQUEvUSxFQUFBOFMsRUFBQVMsR0FTQSxRQUFBeUIsS0FHQSxRQUFBQyxHQUFBeFgsRUFBQXhCLEdBTUEsTUFKQWlaLEdBQUFuVCxLQUFBdEUsRUFBQSxLQUFBMFgsRUFBQUMsbUJBRUFILEdBQUFDLEVBQUE5RixTQUVBNkYsRUFBQXhYLEVBQUEsS0FBQXhCLEVBUkEsR0FBQWlaLEtBVUEsT0FBQUQsR0FPQSxRQUFBSSxHQUFBMVMsR0FFQSxNQURBQSxHQUFBMUYsSUFBQSxFQUNBMEYsRUFPQSxRQUFBMlMsR0FBQTNTLEdBQ0EsR0FBQTRTLEdBQUE3YyxFQUFBVSxjQUFBLFdBRUEsS0FDQSxRQUFBdUosRUFBQTRTLEdBQ0EsTUFBQTFYLEdBQ0EsT0FBQSxFQUNBLFFBRUEwWCxFQUFBL2IsWUFDQStiLEVBQUEvYixXQUFBQyxZQUFBOGIsR0FHQUEsRUFBQSxNQVNBLFFBQUFDLEdBQUFwTSxFQUFBcU0sR0FJQSxJQUhBLEdBQUFwRixHQUFBakgsRUFBQTZHLE1BQUEsS0FDQXZWLEVBQUEyVixFQUFBelcsT0FFQWMsS0FDQXlhLEVBQUFPLFdBQUFyRixFQUFBM1YsSUFBQSthLEVBVUEsUUFBQUUsR0FBQUMsRUFBQUMsR0FDQSxHQUFBM2EsR0FBQTJhLEdBQUFELEVBQ0FFLEVBQUE1YSxHQUFBLElBQUEwYSxFQUFBaGIsVUFBQSxJQUFBaWIsRUFBQWpiLFVBQ0FnYixFQUFBRyxZQUFBRixFQUFBRSxXQUdBLElBQUFELEVBQ0EsTUFBQUEsRUFJQSxJQUFBNWEsRUFDQSxLQUFBQSxFQUFBQSxFQUFBOGEsYUFDQSxHQUFBOWEsSUFBQTJhLEVBQ0EsT0FBQSxDQUtBLE9BQUFELEdBQUEsR0FBQSxFQTZCQSxRQUFBSyxHQUFBQyxHQUdBLE1BQUEsVUFBQWpjLEdBS0EsTUFBQSxRQUFBQSxHQVNBQSxFQUFBVCxhQUFBLElBQUFTLEVBQUFpYyxTQUdBLFNBQUFqYyxHQUNBLFNBQUFBLEdBQUFULFdBQ0FTLEVBQUFULFdBQUEwYyxXQUFBQSxFQUVBamMsRUFBQWljLFdBQUFBLEVBTUFqYyxFQUFBa2MsYUFBQUQsR0FJQWpjLEVBQUFrYyxjQUFBRCxHQUNBRSxHQUFBbmMsS0FBQWljLEVBR0FqYyxFQUFBaWMsV0FBQUEsRUFLQSxTQUFBamMsSUFDQUEsRUFBQWljLFdBQUFBLEdBWUEsUUFBQUcsR0FBQTFULEdBQ0EsTUFBQTBTLEdBQUEsU0FBQWlCLEdBRUEsTUFEQUEsSUFBQUEsRUFDQWpCLEVBQUEsU0FBQTlCLEVBQUFsTSxHQU1BLElBTEEsR0FBQXBHLEdBQ0FzVixFQUFBNVQsS0FBQTRRLEVBQUEzWixPQUFBMGMsR0FDQTViLEVBQUE2YixFQUFBM2MsT0FHQWMsS0FDQTZZLEVBQUF0UyxFQUFBc1YsRUFBQTdiLE1BQ0E2WSxFQUFBdFMsS0FBQW9HLEVBQUFwRyxHQUFBc1MsRUFBQXRTLFNBWUEsUUFBQTRULEdBQUE3VSxHQUNBLE1BQUFBLFFBQUEsS0FBQUEsRUFBQUcsc0JBQUFILEVBeWpDQSxRQUFBd1csTUF1RUEsUUFBQTdCLEdBQUE4QixHQUlBLElBSEEsR0FBQS9iLEdBQUEsRUFDQWtYLEVBQUE2RSxFQUFBN2MsT0FDQThJLEVBQUEsR0FDQWhJLEVBQUFrWCxFQUFBbFgsSUFDQWdJLEdBQUErVCxFQUFBL2IsR0FBQXVCLEtBRUEsT0FBQXlHLEdBR0EsUUFBQWdVLEdBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQTFiLEdBQUF5YixFQUFBemIsSUFDQTJiLEVBQUFGLEVBQUFHLEtBQ0F0WixFQUFBcVosR0FBQTNiLEVBQ0E2YixFQUFBSCxHQUFBLGVBQUFwWixFQUNBd1osRUFBQTFhLEdBRUEsT0FBQXFhLEdBQUE5UixNQUVBLFNBQUE3SyxFQUFBK0YsRUFBQWtYLEdBQ0EsS0FBQWpkLEVBQUFBLEVBQUFrQixJQUNBLEdBQUEsSUFBQWxCLEVBQUFXLFVBQUFvYyxFQUNBLE1BQUFMLEdBQUExYyxFQUFBK0YsRUFBQWtYLEVBR0EsUUFBQSxHQUlBLFNBQUFqZCxFQUFBK0YsRUFBQWtYLEdBQ0EsR0FBQUMsR0FBQUMsRUFBQUMsRUFDQUMsR0FBQUMsRUFBQU4sRUFHQSxJQUFBQyxHQUNBLEtBQUFqZCxFQUFBQSxFQUFBa0IsSUFDQSxJQUFBLElBQUFsQixFQUFBVyxVQUFBb2MsSUFDQUwsRUFBQTFjLEVBQUErRixFQUFBa1gsR0FDQSxPQUFBLE1BS0EsTUFBQWpkLEVBQUFBLEVBQUFrQixJQUNBLEdBQUEsSUFBQWxCLEVBQUFXLFVBQUFvYyxFQU9BLEdBTkFLLEVBQUFwZCxFQUFBZ0QsS0FBQWhELEVBQUFnRCxPQUlBbWEsRUFBQUMsRUFBQXBkLEVBQUF1ZCxZQUFBSCxFQUFBcGQsRUFBQXVkLGNBRUFWLEdBQUFBLElBQUE3YyxFQUFBRCxTQUFBRyxjQUNBRixFQUFBQSxFQUFBa0IsSUFBQWxCLE1BQ0EsQ0FBQSxJQUFBa2QsRUFBQUMsRUFBQTNaLEtBQ0EwWixFQUFBLEtBQUFJLEdBQUFKLEVBQUEsS0FBQUYsRUFHQSxNQUFBSyxHQUFBLEdBQUFILEVBQUEsRUFNQSxJQUhBQyxFQUFBM1osR0FBQTZaLEVBR0FBLEVBQUEsR0FBQVgsRUFBQTFjLEVBQUErRixFQUFBa1gsR0FDQSxPQUFBLEVBTUEsT0FBQSxHQUlBLFFBQUFPLEdBQUFDLEdBQ0EsTUFBQUEsR0FBQTlkLE9BQUEsRUFDQSxTQUFBSyxFQUFBK0YsRUFBQWtYLEdBRUEsSUFEQSxHQUFBeGMsR0FBQWdkLEVBQUE5ZCxPQUNBYyxLQUNBLElBQUFnZCxFQUFBaGQsR0FBQVQsRUFBQStGLEVBQUFrWCxHQUNBLE9BQUEsQ0FHQSxRQUFBLEdBRUFRLEVBQUEsR0FHQSxRQUFBQyxHQUFBalYsRUFBQWtWLEVBQUE5RSxHQUdBLElBRkEsR0FBQXBZLEdBQUEsRUFDQWtYLEVBQUFnRyxFQUFBaGUsT0FDQWMsRUFBQWtYLEVBQUFsWCxJQUNBNFksRUFBQTVRLEVBQUFrVixFQUFBbGQsR0FBQW9ZLEVBRUEsT0FBQUEsR0FHQSxRQUFBK0UsR0FBQUMsRUFBQXRTLEVBQUF4SyxFQUFBZ0YsRUFBQWtYLEdBT0EsSUFOQSxHQUFBamQsR0FDQThkLEtBQ0FyZCxFQUFBLEVBQ0FrWCxFQUFBa0csRUFBQWxlLE9BQ0FvZSxFQUFBLE1BQUF4UyxFQUVBOUssRUFBQWtYLEVBQUFsWCxLQUNBVCxFQUFBNmQsRUFBQXBkLE1BQ0FNLElBQUFBLEVBQUFmLEVBQUErRixFQUFBa1gsS0FDQWEsRUFBQWhXLEtBQUE5SCxHQUNBK2QsR0FDQXhTLEVBQUF6RCxLQUFBckgsSUFNQSxPQUFBcWQsR0FHQSxRQUFBRSxHQUFBQyxFQUFBeFYsRUFBQWlVLEVBQUF3QixFQUFBQyxFQUFBQyxHQU9BLE1BTkFGLEtBQUFBLEVBQUFsYixLQUNBa2IsRUFBQUYsRUFBQUUsSUFFQUMsSUFBQUEsRUFBQW5iLEtBQ0FtYixFQUFBSCxFQUFBRyxFQUFBQyxJQUVBaEQsRUFBQSxTQUFBOUIsRUFBQVQsRUFBQTlTLEVBQUFrWCxHQUNBLEdBQUEvWCxHQUFBekUsRUFBQVQsRUFDQXFlLEtBQ0FDLEtBQ0FDLEVBQUExRixFQUFBbFosT0FHQTJHLEVBQUFnVCxHQUFBb0UsRUFBQWpWLEdBQUEsSUFBQTFDLEVBQUFwRixVQUFBb0YsR0FBQUEsTUFHQXlZLEdBQUFQLElBQUEzRSxHQUFBN1EsRUFFQW5DLEVBREFzWCxFQUFBdFgsRUFBQStYLEVBQUFKLEVBQUFsWSxFQUFBa1gsR0FHQXdCLEVBQUEvQixFQUVBeUIsSUFBQTdFLEVBQUEyRSxFQUFBTSxHQUFBTCxNQU1BckYsRUFDQTJGLENBUUEsSUFMQTlCLEdBQ0FBLEVBQUE4QixFQUFBQyxFQUFBMVksRUFBQWtYLEdBSUFpQixFQU1BLElBTEFoWixFQUFBMFksRUFBQWEsRUFBQUgsR0FDQUosRUFBQWhaLEtBQUFhLEVBQUFrWCxHQUdBeGMsRUFBQXlFLEVBQUF2RixPQUNBYyxNQUNBVCxFQUFBa0YsRUFBQXpFLE1BQ0FnZSxFQUFBSCxFQUFBN2QsTUFBQStkLEVBQUFGLEVBQUE3ZCxJQUFBVCxHQUtBLElBQUFzWixHQUNBLEdBQUE2RSxHQUFBRixFQUFBLENBQ0EsR0FBQUUsRUFBQSxDQUlBLElBRkFqWixLQUNBekUsRUFBQWdlLEVBQUE5ZSxPQUNBYyxNQUNBVCxFQUFBeWUsRUFBQWhlLEtBRUF5RSxFQUFBNEMsS0FBQTBXLEVBQUEvZCxHQUFBVCxFQUdBbWUsR0FBQSxLQUFBTSxLQUFBdlosRUFBQStYLEdBS0EsSUFEQXhjLEVBQUFnZSxFQUFBOWUsT0FDQWMsTUFDQVQsRUFBQXllLEVBQUFoZSxNQUNBeUUsRUFBQWlaLEVBQUF2ZCxFQUFBMFksRUFBQXRaLEdBQUFxZSxFQUFBNWQsS0FBQSxJQUVBNlksRUFBQXBVLEtBQUEyVCxFQUFBM1QsR0FBQWxGLFNBT0F5ZSxHQUFBYixFQUNBYSxJQUFBNUYsRUFDQTRGLEVBQUE1RyxPQUFBMEcsRUFBQUUsRUFBQTllLFFBQ0E4ZSxHQUVBTixFQUNBQSxFQUFBLEtBQUF0RixFQUFBNEYsRUFBQXhCLEdBRUFuVixFQUFBckYsTUFBQW9XLEVBQUE0RixLQU1BLFFBQUFDLEdBQUFsQyxHQXdCQSxJQXZCQSxHQUFBbUMsR0FBQWpDLEVBQUExVixFQUNBMlEsRUFBQTZFLEVBQUE3YyxPQUNBaWYsRUFBQTFELEVBQUEyRCxTQUFBckMsRUFBQSxHQUFBNWMsTUFDQWtmLEVBQUFGLEdBQUExRCxFQUFBMkQsU0FBQSxLQUNBcGUsRUFBQW1lLEVBQUEsRUFBQSxFQUdBRyxFQUFBdEMsRUFBQSxTQUFBemMsR0FDQSxNQUFBQSxLQUFBMmUsR0FDQUcsR0FBQSxHQUNBRSxFQUFBdkMsRUFBQSxTQUFBemMsR0FDQSxNQUFBWSxHQUFBK2QsRUFBQTNlLElBQUEsR0FDQThlLEdBQUEsR0FDQXJCLEdBQUEsU0FBQXpkLEVBQUErRixFQUFBa1gsR0FDQSxHQUFBaFgsSUFBQTJZLElBQUEzQixHQUFBbFgsSUFBQWtaLE1BQ0FOLEVBQUE1WSxHQUFBcEYsU0FDQW9lLEVBQUEvZSxFQUFBK0YsRUFBQWtYLEdBQ0ErQixFQUFBaGYsRUFBQStGLEVBQUFrWCxHQUdBLE9BREEwQixHQUFBLEtBQ0ExWSxJQUdBeEYsRUFBQWtYLEVBQUFsWCxJQUNBLEdBQUFpYyxFQUFBeEIsRUFBQTJELFNBQUFyQyxFQUFBL2IsR0FBQWIsTUFDQTZkLEdBQUFoQixFQUFBZSxFQUFBQyxHQUFBZixRQUNBLENBSUEsR0FIQUEsRUFBQXhCLEVBQUFuYSxPQUFBeWIsRUFBQS9iLEdBQUFiLE1BQUE2QyxNQUFBLEtBQUErWixFQUFBL2IsR0FBQTJNLFNBR0FzUCxFQUFBMVosR0FBQSxDQUdBLElBREFnRSxJQUFBdkcsRUFDQXVHLEVBQUEyUSxJQUNBdUQsRUFBQTJELFNBQUFyQyxFQUFBeFYsR0FBQXBILE1BREFvSCxLQUtBLE1BQUFnWCxHQUNBdmQsRUFBQSxHQUFBK2MsRUFBQUMsR0FDQWhkLEVBQUEsR0FBQWlhLEVBRUE4QixFQUFBN1osTUFBQSxFQUFBbEMsRUFBQSxHQUFBbUssUUFBQTVJLE1BQUEsTUFBQXdhLEVBQUEvYixFQUFBLEdBQUFiLEtBQUEsSUFBQSxNQUNBNkQsUUFBQXFULEdBQUEsTUFDQTRGLEVBQ0FqYyxFQUFBdUcsR0FBQTBYLEVBQUFsQyxFQUFBN1osTUFBQWxDLEVBQUF1RyxJQUNBQSxFQUFBMlEsR0FBQStHLEVBQUFsQyxFQUFBQSxFQUFBN1osTUFBQXFFLElBQ0FBLEVBQUEyUSxHQUFBK0MsRUFBQThCLElBR0FpQixFQUFBM1YsS0FBQTRVLEdBSUEsTUFBQWMsR0FBQUMsR0FHQSxRQUFBeUIsR0FBQUMsRUFBQUMsR0FDQSxHQUFBQyxHQUFBRCxFQUFBemYsT0FBQSxFQUNBMmYsRUFBQUgsRUFBQXhmLE9BQUEsRUFDQTRmLEVBQUEsU0FBQWpHLEVBQUF2VCxFQUFBa1gsRUFBQXBFLEVBQUEyRyxHQUNBLEdBQUF4ZixHQUFBZ0gsRUFBQTBWLEVBQ0ErQyxFQUFBLEVBQ0FoZixFQUFBLElBQ0FvZCxFQUFBdkUsTUFDQW9HLEtBQ0FDLEVBQUFWLEVBRUEzWSxFQUFBZ1QsR0FBQWdHLEdBQUFwRSxFQUFBMEUsS0FBQSxJQUFBLElBQUFKLEdBRUFLLEVBQUF2QyxHQUFBLE1BQUFxQyxFQUFBLEVBQUF0UyxLQUFBNEssVUFBQSxHQUNBTixFQUFBclIsRUFBQTNHLE1BU0EsS0FQQTZmLElBQ0FQLEVBQUFsWixJQUFBdEgsR0FBQXNILEdBQUF5WixHQU1BL2UsSUFBQWtYLEdBQUEsT0FBQTNYLEVBQUFzRyxFQUFBN0YsSUFBQUEsSUFBQSxDQUNBLEdBQUE2ZSxHQUFBdGYsRUFBQSxDQU1BLElBTEFnSCxFQUFBLEVBQ0FqQixHQUFBL0YsRUFBQW1GLGdCQUFBMUcsSUFDQW9iLEVBQUE3WixHQUNBaWQsR0FBQW5ELEdBRUE0QyxFQUFBeUMsRUFBQW5ZLE1BQ0EsR0FBQTBWLEVBQUExYyxFQUFBK0YsR0FBQXRILEVBQUF3ZSxHQUFBLENBQ0FwRSxFQUFBL1EsS0FBQTlILEVBQ0EsT0FHQXdmLElBQ0FsQyxFQUFBdUMsR0FLQVIsS0FFQXJmLEdBQUEwYyxHQUFBMWMsSUFDQXlmLElBSUFuRyxHQUNBdUUsRUFBQS9WLEtBQUE5SCxJQWdCQSxHQVRBeWYsR0FBQWhmLEVBU0E0ZSxHQUFBNWUsSUFBQWdmLEVBQUEsQ0FFQSxJQURBelksRUFBQSxFQUNBMFYsRUFBQTBDLEVBQUFwWSxNQUNBMFYsRUFBQW1CLEVBQUE2QixFQUFBM1osRUFBQWtYLEVBR0EsSUFBQTNELEVBQUEsQ0FFQSxHQUFBbUcsRUFBQSxFQUNBLEtBQUFoZixLQUNBb2QsRUFBQXBkLElBQUFpZixFQUFBamYsS0FDQWlmLEVBQUFqZixHQUFBcWYsRUFBQXBmLEtBQUFtWSxHQU1BNkcsR0FBQTlCLEVBQUE4QixHQUlBNVgsRUFBQXJGLE1BQUFvVyxFQUFBNkcsR0FHQUYsSUFBQWxHLEdBQUFvRyxFQUFBL2YsT0FBQSxHQUNBOGYsRUFBQUwsRUFBQXpmLE9BQUEsR0FFQTBaLEVBQUEwRyxXQUFBbEgsR0FVQSxNQUxBMkcsS0FDQWxDLEVBQUF1QyxFQUNBWixFQUFBVSxHQUdBOUIsRUFHQSxPQUFBd0IsR0FDQWpFLEVBQUFtRSxHQUNBQSxFQS9nRUEsR0FBQTllLEdBQ0F3SyxFQUNBaVEsRUFDQThFLEVBQ0FDLEVBQ0F4RixFQUNBeUYsRUFDQXBGLEVBQ0FtRSxFQUNBa0IsRUFDQUMsRUFHQXZHLEVBQ0FwYixFQUNBNGhCLEVBQ0F2RyxFQUNBTyxFQUNBaUcsRUFDQWxULEVBQ0FyRyxFQUdBL0QsRUFBQSxTQUFBLEVBQUEsR0FBQWtXLE1BQ0FVLEVBQUFoYixFQUFBSCxTQUNBNmUsRUFBQSxFQUNBaGIsRUFBQSxFQUNBaWUsRUFBQXhGLElBQ0F5RixFQUFBekYsSUFDQVgsRUFBQVcsSUFDQTBGLEVBQUEsU0FBQTlFLEVBQUFDLEdBSUEsTUFIQUQsS0FBQUMsSUFDQXdFLEdBQUEsR0FFQSxHQUlBMUosS0FBQUMsZUFDQVAsS0FDQTBKLEVBQUExSixFQUFBMEosSUFDQVksRUFBQXRLLEVBQUF0TyxLQUNBQSxFQUFBc08sRUFBQXRPLEtBQ0FuRixFQUFBeVQsRUFBQXpULE1BR0EvQixFQUFBLFNBQUErZixFQUFBM2dCLEdBR0EsSUFGQSxHQUFBUyxHQUFBLEVBQ0FrWCxFQUFBZ0osRUFBQWhoQixPQUNBYyxFQUFBa1gsRUFBQWxYLElBQ0EsR0FBQWtnQixFQUFBbGdCLEtBQUFULEVBQ0EsTUFBQVMsRUFHQSxRQUFBLEdBR0FtZ0IsRUFBQSw2SEFLQUMsR0FBQSxzQkFHQUMsR0FBQSxnQ0FHQUMsR0FBQSxNQUFBRixHQUFBLEtBQUFDLEdBQUEsT0FBQUQsR0FFQSxnQkFBQUEsR0FFQSwyREFBQUMsR0FBQSxPQUFBRCxHQUNBLE9BRUFHLEdBQUEsS0FBQUYsR0FBQSx3RkFLQUMsR0FBQSxlQU1BRSxHQUFBLEdBQUFDLFFBQUFMLEdBQUEsSUFBQSxLQUNBL0osR0FBQSxHQUFBb0ssUUFBQSxJQUFBTCxHQUFBLDhCQUFBQSxHQUFBLEtBQUEsS0FFQU0sR0FBQSxHQUFBRCxRQUFBLElBQUFMLEdBQUEsS0FBQUEsR0FBQSxLQUNBTyxHQUFBLEdBQUFGLFFBQUEsSUFBQUwsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsS0FFQVEsR0FBQSxHQUFBSCxRQUFBLElBQUFMLEdBQUEsaUJBQUFBLEdBQUEsT0FBQSxLQUVBUyxHQUFBLEdBQUFKLFFBQUFGLElBQ0FPLEdBQUEsR0FBQUwsUUFBQSxJQUFBSixHQUFBLEtBRUFVLElBQ0FDLEdBQUEsR0FBQVAsUUFBQSxNQUFBSixHQUFBLEtBQ0FZLE1BQUEsR0FBQVIsUUFBQSxRQUFBSixHQUFBLEtBQ0FhLElBQUEsR0FBQVQsUUFBQSxLQUFBSixHQUFBLFNBQ0FjLEtBQUEsR0FBQVYsUUFBQSxJQUFBSCxJQUNBYyxPQUFBLEdBQUFYLFFBQUEsSUFBQUYsSUFDQWMsTUFBQSxHQUFBWixRQUFBLHlEQUFBTCxHQUNBLCtCQUFBQSxHQUFBLGNBQUFBLEdBQ0EsYUFBQUEsR0FBQSxTQUFBLEtBQ0FrQixLQUFBLEdBQUFiLFFBQUEsT0FBQU4sRUFBQSxLQUFBLEtBR0FvQixhQUFBLEdBQUFkLFFBQUEsSUFBQUwsR0FBQSxtREFDQUEsR0FBQSxtQkFBQUEsR0FBQSxtQkFBQSxNQUdBb0IsR0FBQSxzQ0FDQUMsR0FBQSxTQUVBQyxHQUFBLHlCQUdBcEksR0FBQSxtQ0FFQVksR0FBQSxPQUlBeUgsR0FBQSxHQUFBbEIsUUFBQSxxQkFBQUwsR0FBQSxNQUFBQSxHQUFBLE9BQUEsTUFDQXdCLEdBQUEsU0FBQTVnQixFQUFBNmdCLEVBQUFDLEdBQ0EsR0FBQUMsR0FBQSxLQUFBRixFQUFBLEtBSUEsT0FBQUUsS0FBQUEsR0FBQUQsRUFDQUQsRUFDQUUsRUFBQSxFQUVBQyxPQUFBQyxhQUFBRixFQUFBLE9BRUFDLE9BQUFDLGFBQUFGLEdBQUEsR0FBQSxNQUFBLEtBQUFBLEVBQUEsUUFLQWxJLEdBQUEsc0RBQ0FDLEdBQUEsU0FBQW9JLEVBQUFDLEdBQ0EsTUFBQUEsR0FHQSxPQUFBRCxFQUNBLElBSUFBLEVBQUFoZ0IsTUFBQSxHQUFBLEdBQUEsS0FBQWdnQixFQUFBRSxXQUFBRixFQUFBaGpCLE9BQUEsR0FBQThXLFNBQUEsSUFBQSxJQUlBLEtBQUFrTSxHQU9BRyxHQUFBLFdBQ0FqSixLQUdBc0MsR0FBQU0sRUFDQSxTQUFBemMsR0FDQSxPQUFBLElBQUFBLEVBQUFpYyxXQUFBLFFBQUFqYyxJQUFBLFNBQUFBLE1BRUFrQixJQUFBLGFBQUE0YixLQUFBLFVBSUEsS0FDQWhWLEVBQUFyRixNQUNBMlQsRUFBQXpULEVBQUFqQyxLQUFBa1osRUFBQWpTLFlBQ0FpUyxFQUFBalMsWUFJQXlPLEVBQUF3RCxFQUFBalMsV0FBQWhJLFFBQUFnQixTQUNBLE1BQUFpRCxHQUNBa0UsR0FBQXJGLE1BQUEyVCxFQUFBelcsT0FHQSxTQUFBNlUsRUFBQXVPLEdBQ0FyQyxFQUFBamUsTUFBQStSLEVBQUE3UixFQUFBakMsS0FBQXFpQixLQUtBLFNBQUF2TyxFQUFBdU8sR0FJQSxJQUhBLEdBQUEvYixHQUFBd04sRUFBQTdVLE9BQ0FjLEVBQUEsRUFFQStULEVBQUF4TixLQUFBK2IsRUFBQXRpQixPQUNBK1QsRUFBQTdVLE9BQUFxSCxFQUFBLElBb1ZBaUUsRUFBQW9PLEVBQUFwTyxXQU9BZ1YsRUFBQTVHLEVBQUE0RyxNQUFBLFNBQUFqZ0IsR0FHQSxHQUFBZ2pCLEdBQUFoakIsSUFBQUEsRUFBQW1GLGVBQUFuRixHQUFBZ2pCLGVBQ0EsU0FBQUEsR0FBQSxTQUFBQSxFQUFBampCLFVBUUE4WixFQUFBUixFQUFBUSxZQUFBLFNBQUE5TyxHQUNBLEdBQUFrWSxHQUFBQyxFQUNBamtCLEVBQUE4TCxFQUFBQSxFQUFBNUYsZUFBQTRGLEVBQUE2TyxDQUdBLE9BQUEzYSxLQUFBUixHQUFBLElBQUFRLEVBQUEwQixVQUFBMUIsRUFBQStqQixpQkFLQXZrQixFQUFBUSxFQUNBb2hCLEVBQUE1aEIsRUFBQXVrQixnQkFDQWxKLEdBQUFtRyxFQUFBeGhCLEdBSUFtYixJQUFBbmIsSUFDQXlrQixFQUFBemtCLEVBQUEwa0IsY0FBQUQsRUFBQUUsTUFBQUYsSUFHQUEsRUFBQUcsaUJBQ0FILEVBQUFHLGlCQUFBLFNBQUFQLElBQUEsR0FHQUksRUFBQUksYUFDQUosRUFBQUksWUFBQSxXQUFBUixLQVVBN1gsRUFBQThWLFdBQUExRixFQUFBLFNBQUFDLEdBRUEsTUFEQUEsR0FBQWlJLFVBQUEsS0FDQWpJLEVBQUEzWCxhQUFBLGVBT0FzSCxFQUFBL0UscUJBQUFtVixFQUFBLFNBQUFDLEdBRUEsTUFEQUEsR0FBQWhjLFlBQUFiLEVBQUEra0IsY0FBQSxNQUNBbEksRUFBQXBWLHFCQUFBLEtBQUF2RyxTQUlBc0wsRUFBQWlQLHVCQUFBaUksR0FBQXJoQixLQUFBckMsRUFBQXliLHdCQU1BalAsRUFBQXdZLFFBQUFwSSxFQUFBLFNBQUFDLEdBRUEsTUFEQStFLEdBQUEvZ0IsWUFBQWdjLEdBQUFyQixHQUFBalgsR0FDQXZFLEVBQUFpbEIsb0JBQUFqbEIsRUFBQWlsQixrQkFBQTFnQixHQUFBckQsU0FJQXNMLEVBQUF3WSxTQUNBdkksRUFBQW5hLE9BQUEsR0FBQSxTQUFBa1osR0FDQSxHQUFBMEosR0FBQTFKLEVBQUF4VyxRQUFBMmUsR0FBQUMsR0FDQSxPQUFBLFVBQUFyaUIsR0FDQSxNQUFBQSxHQUFBMkQsYUFBQSxRQUFBZ2dCLElBR0F6SSxFQUFBMEUsS0FBQSxHQUFBLFNBQUEzRixFQUFBbFUsR0FDQSxPQUFBLEtBQUFBLEVBQUFpVSxnQkFBQUYsRUFBQSxDQUNBLEdBQUE5WixHQUFBK0YsRUFBQWlVLGVBQUFDLEVBQ0EsT0FBQWphLElBQUFBLFVBSUFrYixFQUFBbmEsT0FBQSxHQUFBLFNBQUFrWixHQUNBLEdBQUEwSixHQUFBMUosRUFBQXhXLFFBQUEyZSxHQUFBQyxHQUNBLE9BQUEsVUFBQXJpQixHQUNBLEdBQUErSyxPQUFBLEtBQUEvSyxFQUFBNGpCLGtCQUNBNWpCLEVBQUE0akIsaUJBQUEsS0FDQSxPQUFBN1ksSUFBQUEsRUFBQS9JLFFBQUEyaEIsSUFNQXpJLEVBQUEwRSxLQUFBLEdBQUEsU0FBQTNGLEVBQUFsVSxHQUNBLE9BQUEsS0FBQUEsRUFBQWlVLGdCQUFBRixFQUFBLENBQ0EsR0FBQS9PLEdBQUF0SyxFQUFBNkYsRUFDQXRHLEVBQUErRixFQUFBaVUsZUFBQUMsRUFFQSxJQUFBamEsRUFBQSxDQUlBLElBREErSyxFQUFBL0ssRUFBQTRqQixpQkFBQSxRQUNBN1ksRUFBQS9JLFFBQUFpWSxFQUNBLE9BQUFqYSxFQU1BLEtBRkFzRyxFQUFBUCxFQUFBMmQsa0JBQUF6SixHQUNBeFosRUFBQSxFQUNBVCxFQUFBc0csRUFBQTdGLE1BRUEsSUFEQXNLLEVBQUEvSyxFQUFBNGpCLGlCQUFBLFFBQ0E3WSxFQUFBL0ksUUFBQWlZLEVBQ0EsT0FBQWphLEdBS0EsWUFNQWtiLEVBQUEwRSxLQUFBLElBQUEzVSxFQUFBL0UscUJBQ0EsU0FBQUYsRUFBQUQsR0FDQSxXQUFBLEtBQUFBLEVBQUFHLHFCQUNBSCxFQUFBRyxxQkFBQUYsR0FHQWlGLEVBQUFrUCxJQUNBcFUsRUFBQUksaUJBQUFILE9BREEsSUFLQSxTQUFBQSxFQUFBRCxHQUNBLEdBQUEvRixHQUNBNkcsS0FDQXBHLEVBQUEsRUFFQW9ZLEVBQUE5UyxFQUFBRyxxQkFBQUYsRUFHQSxJQUFBLE1BQUFBLEVBQUEsQ0FDQSxLQUFBaEcsRUFBQTZZLEVBQUFwWSxNQUNBLElBQUFULEVBQUFXLFVBQ0FrRyxFQUFBaUIsS0FBQTlILEVBSUEsT0FBQTZHLEdBRUEsTUFBQWdTLElBSUFxQyxFQUFBMEUsS0FBQSxNQUFBM1UsRUFBQWlQLHdCQUFBLFNBQUFxSixFQUFBeGQsR0FDQSxPQUFBLEtBQUFBLEVBQUFtVSx3QkFBQUosRUFDQSxNQUFBL1QsR0FBQW1VLHVCQUFBcUosSUFVQWpELEtBT0FqRyxNQUVBcFAsRUFBQWtQLElBQUFnSSxHQUFBcmhCLEtBQUFyQyxFQUFBMEgscUJBR0FrVixFQUFBLFNBQUFDLEdBTUErRSxFQUFBL2dCLFlBQUFnYyxHQUFBOVQsVUFBQSxVQUFBeEUsRUFBQSxxQkFDQUEsRUFBQSxrRUFPQXNZLEVBQUFuVixpQkFBQSx3QkFBQXhHLFFBQ0EwYSxFQUFBdlMsS0FBQSxTQUFBK1ksR0FBQSxnQkFLQXZGLEVBQUFuVixpQkFBQSxjQUFBeEcsUUFDQTBhLEVBQUF2UyxLQUFBLE1BQUErWSxHQUFBLGFBQUFELEVBQUEsS0FJQXRGLEVBQUFuVixpQkFBQSxRQUFBbkQsRUFBQSxNQUFBckQsUUFDQTBhLEVBQUF2UyxLQUFBLE1BTUF3VCxFQUFBblYsaUJBQUEsWUFBQXhHLFFBQ0EwYSxFQUFBdlMsS0FBQSxZQU1Bd1QsRUFBQW5WLGlCQUFBLEtBQUFuRCxFQUFBLE1BQUFyRCxRQUNBMGEsRUFBQXZTLEtBQUEsY0FJQXVULEVBQUEsU0FBQUMsR0FDQUEsRUFBQTlULFVBQUEsbUZBS0EsSUFBQXFjLEdBQUFwbEIsRUFBQVUsY0FBQSxRQUNBMGtCLEdBQUFySixhQUFBLE9BQUEsVUFDQWMsRUFBQWhjLFlBQUF1a0IsR0FBQXJKLGFBQUEsT0FBQSxLQUlBYyxFQUFBblYsaUJBQUEsWUFBQXhHLFFBQ0EwYSxFQUFBdlMsS0FBQSxPQUFBK1ksR0FBQSxlQUtBLElBQUF2RixFQUFBblYsaUJBQUEsWUFBQXhHLFFBQ0EwYSxFQUFBdlMsS0FBQSxXQUFBLGFBS0F1WSxFQUFBL2dCLFlBQUFnYyxHQUFBVyxVQUFBLEVBQ0EsSUFBQVgsRUFBQW5WLGlCQUFBLGFBQUF4RyxRQUNBMGEsRUFBQXZTLEtBQUEsV0FBQSxhQUlBd1QsRUFBQW5WLGlCQUFBLFFBQ0FrVSxFQUFBdlMsS0FBQSxZQUlBbUQsRUFBQTZZLGdCQUFBM0IsR0FBQXJoQixLQUFBc00sRUFBQWlULEVBQUFqVCxTQUNBaVQsRUFBQTBELHVCQUNBMUQsRUFBQTJELG9CQUNBM0QsRUFBQTRELGtCQUNBNUQsRUFBQTZELHFCQUVBN0ksRUFBQSxTQUFBQyxHQUdBclEsRUFBQWtaLGtCQUFBL1csRUFBQTFNLEtBQUE0YSxFQUFBLEtBSUFsTyxFQUFBMU0sS0FBQTRhLEVBQUEsYUFDQWdGLEVBQUF4WSxLQUFBLEtBQUFrWixNQUlBM0csRUFBQUEsRUFBQTFhLFFBQUEsR0FBQXVoQixRQUFBN0csRUFBQXBILEtBQUEsTUFDQXFOLEVBQUFBLEVBQUEzZ0IsUUFBQSxHQUFBdWhCLFFBQUFaLEVBQUFyTixLQUFBLE1BSUFnUSxFQUFBZCxHQUFBcmhCLEtBQUF1ZixFQUFBK0QseUJBS0FyZCxFQUFBa2MsR0FBQWQsR0FBQXJoQixLQUFBdWYsRUFBQXRaLFVBQ0EsU0FBQTRVLEVBQUFDLEdBQ0EsR0FBQXlJLEdBQUEsSUFBQTFJLEVBQUFoYixTQUFBZ2IsRUFBQXFILGdCQUFBckgsRUFDQTJJLEVBQUExSSxHQUFBQSxFQUFBcmMsVUFDQSxPQUFBb2MsS0FBQTJJLE1BQUFBLEdBQUEsSUFBQUEsRUFBQTNqQixZQUNBMGpCLEVBQUF0ZCxTQUNBc2QsRUFBQXRkLFNBQUF1ZCxHQUNBM0ksRUFBQXlJLHlCQUFBLEdBQUF6SSxFQUFBeUksd0JBQUFFLE1BR0EsU0FBQTNJLEVBQUFDLEdBQ0EsR0FBQUEsRUFDQSxLQUFBQSxFQUFBQSxFQUFBcmMsWUFDQSxHQUFBcWMsSUFBQUQsRUFDQSxPQUFBLENBSUEsUUFBQSxHQU9BOEUsRUFBQXdDLEVBQ0EsU0FBQXRILEVBQUFDLEdBR0EsR0FBQUQsSUFBQUMsRUFFQSxNQURBd0UsSUFBQSxFQUNBLENBSUEsSUFBQW1FLElBQUE1SSxFQUFBeUkseUJBQUF4SSxFQUFBd0ksdUJBQ0EsT0FBQUcsS0FLQUEsR0FBQTVJLEVBQUF4VyxlQUFBd1csTUFBQUMsRUFBQXpXLGVBQUF5VyxHQUNBRCxFQUFBeUksd0JBQUF4SSxHQUdBLEVBR0EsRUFBQTJJLElBQ0F0WixFQUFBdVosY0FBQTVJLEVBQUF3SSx3QkFBQXpJLEtBQUE0SSxFQUdBNUksSUFBQWxkLEdBQUFrZCxFQUFBeFcsZ0JBQUF5VSxHQUFBN1MsRUFBQTZTLEVBQUErQixJQUNBLEVBRUFDLElBQUFuZCxHQUFBbWQsRUFBQXpXLGdCQUFBeVUsR0FBQTdTLEVBQUE2UyxFQUFBZ0MsR0FDQSxFQUlBdUUsRUFDQXZmLEVBQUF1ZixFQUFBeEUsR0FBQS9hLEVBQUF1ZixFQUFBdkUsR0FDQSxFQUdBLEVBQUEySSxHQUFBLEVBQUEsSUFFQSxTQUFBNUksRUFBQUMsR0FFQSxHQUFBRCxJQUFBQyxFQUVBLE1BREF3RSxJQUFBLEVBQ0EsQ0FHQSxJQUFBbmYsR0FDQVIsRUFBQSxFQUNBZ2tCLEVBQUE5SSxFQUFBcGMsV0FDQStrQixFQUFBMUksRUFBQXJjLFdBQ0FtbEIsR0FBQS9JLEdBQ0FnSixHQUFBL0ksRUFHQSxLQUFBNkksSUFBQUgsRUFDQSxNQUFBM0ksS0FBQWxkLEdBQUEsRUFDQW1kLElBQUFuZCxFQUFBLEVBQ0FnbUIsR0FBQSxFQUNBSCxFQUFBLEVBQ0FuRSxFQUNBdmYsRUFBQXVmLEVBQUF4RSxHQUFBL2EsRUFBQXVmLEVBQUF2RSxHQUNBLENBR0EsSUFBQTZJLElBQUFILEVBQ0EsTUFBQTVJLEdBQUFDLEVBQUFDLEVBS0EsS0FEQTNhLEVBQUEwYSxFQUNBMWEsRUFBQUEsRUFBQTFCLFlBQ0FtbEIsRUFBQTdRLFFBQUE1UyxFQUdBLEtBREFBLEVBQUEyYSxFQUNBM2EsRUFBQUEsRUFBQTFCLFlBQ0FvbEIsRUFBQTlRLFFBQUE1UyxFQUlBLE1BQUF5akIsRUFBQWprQixLQUFBa2tCLEVBQUFsa0IsSUFDQUEsR0FHQSxPQUFBQSxHQUVBaWIsRUFBQWdKLEVBQUFqa0IsR0FBQWtrQixFQUFBbGtCLElBR0Fpa0IsRUFBQWprQixLQUFBbVosR0FBQSxFQUNBK0ssRUFBQWxrQixLQUFBbVosRUFBQSxFQUNBLEdBR0FuYixHQTNZQUEsR0E4WUE0YSxFQUFBak0sUUFBQSxTQUFBd1gsRUFBQXhrQixHQUNBLE1BQUFpWixHQUFBdUwsRUFBQSxLQUFBLEtBQUF4a0IsSUFHQWlaLEVBQUF5SyxnQkFBQSxTQUFBOWpCLEVBQUE0a0IsR0FTQSxJQVBBNWtCLEVBQUFtRixlQUFBbkYsS0FBQXZCLEdBQ0FvYixFQUFBN1osR0FJQTRrQixFQUFBQSxFQUFBbmhCLFFBQUE0ZCxHQUFBLFVBRUFwVyxFQUFBNlksaUJBQUFoSyxJQUNBTSxFQUFBd0ssRUFBQSxRQUNBdEUsSUFBQUEsRUFBQXhmLEtBQUE4akIsT0FDQXZLLElBQUFBLEVBQUF2WixLQUFBOGpCLElBRUEsSUFDQSxHQUFBM2UsR0FBQW1ILEVBQUExTSxLQUFBVixFQUFBNGtCLEVBR0EsSUFBQTNlLEdBQUFnRixFQUFBa1osbUJBR0Fua0IsRUFBQXZCLFVBQUEsS0FBQXVCLEVBQUF2QixTQUFBa0MsU0FDQSxNQUFBc0YsR0FFQSxNQUFBckMsSUFHQSxNQUFBeVYsR0FBQXVMLEVBQUFubUIsRUFBQSxNQUFBdUIsSUFBQUwsT0FBQSxHQUdBMFosRUFBQXRTLFNBQUEsU0FBQWhCLEVBQUEvRixHQUtBLE9BSEErRixFQUFBWixlQUFBWSxLQUFBdEgsR0FDQW9iLEVBQUE5VCxHQUVBZ0IsRUFBQWhCLEVBQUEvRixJQUdBcVosRUFBQXdMLEtBQUEsU0FBQTdrQixFQUFBQyxJQUVBRCxFQUFBbUYsZUFBQW5GLEtBQUF2QixHQUNBb2IsRUFBQTdaLEVBR0EsSUFBQTBJLEdBQUF3UyxFQUFBTyxXQUFBeGIsRUFBQUMsZUFFQXlOLEVBQUFqRixHQUFBZ08sRUFBQWhXLEtBQUF3YSxFQUFBTyxXQUFBeGIsRUFBQUMsZUFDQXdJLEVBQUExSSxFQUFBQyxHQUFBNlosT0FDQXBYLEVBRUEsWUFBQUEsS0FBQWlMLEVBQ0FBLEVBQ0ExQyxFQUFBOFYsYUFBQWpILEVBQ0E5WixFQUFBMkQsYUFBQTFELElBQ0EwTixFQUFBM04sRUFBQTRqQixpQkFBQTNqQixLQUFBME4sRUFBQW1YLFVBQ0FuWCxFQUFBM0wsTUFDQSxNQUdBcVgsRUFBQTBMLE9BQUEsU0FBQUMsR0FDQSxPQUFBQSxFQUFBLElBQUF2aEIsUUFBQTZXLEdBQUFDLEtBR0FsQixFQUFBbEQsTUFBQSxTQUFBZ0MsR0FDQSxLQUFBLElBQUF4WixPQUFBLDBDQUFBd1osSUFPQWtCLEVBQUEwRyxXQUFBLFNBQUFsSCxHQUNBLEdBQUE3WSxHQUNBaWxCLEtBQ0FqZSxFQUFBLEVBQ0F2RyxFQUFBLENBT0EsSUFKQTJmLEdBQUFuVixFQUFBaWEsaUJBQ0EvRSxHQUFBbFYsRUFBQWthLFlBQUF0TSxFQUFBbFcsTUFBQSxHQUNBa1csRUFBQWpCLEtBQUE2SSxHQUVBTCxFQUFBLENBQ0EsS0FBQXBnQixFQUFBNlksRUFBQXBZLE1BQ0FULElBQUE2WSxFQUFBcFksS0FDQXVHLEVBQUFpZSxFQUFBbmQsS0FBQXJILEdBR0EsTUFBQXVHLEtBQ0E2UixFQUFBaEIsT0FBQW9OLEVBQUFqZSxHQUFBLEdBUUEsTUFGQW1aLEdBQUEsS0FFQXRILEdBT0FtSCxFQUFBM0csRUFBQTJHLFFBQUEsU0FBQWhnQixHQUNBLEdBQUErSyxHQUNBOUUsRUFBQSxHQUNBeEYsRUFBQSxFQUNBRSxFQUFBWCxFQUFBVyxRQUVBLElBQUFBLEdBTUEsR0FBQSxJQUFBQSxHQUFBLElBQUFBLEdBQUEsS0FBQUEsRUFBQSxDQUdBLEdBQUEsZ0JBQUFYLEdBQUE2SCxZQUNBLE1BQUE3SCxHQUFBNkgsV0FHQSxLQUFBN0gsRUFBQUEsRUFBQTRILFdBQUE1SCxFQUFBQSxFQUFBQSxFQUFBK2IsWUFDQTlWLEdBQUErWixFQUFBaGdCLE9BR0EsSUFBQSxJQUFBVyxHQUFBLElBQUFBLEVBQ0EsTUFBQVgsR0FBQW9sQixjQWhCQSxNQUFBcmEsRUFBQS9LLEVBQUFTLE1BRUF3RixHQUFBK1osRUFBQWpWLEVBa0JBLE9BQUE5RSxJQUdBaVYsRUFBQTdCLEVBQUFnTSxXQUdBbEssWUFBQSxHQUVBbUssYUFBQWxLLEVBRUE3WixNQUFBaWdCLEdBRUEvRixjQUVBbUUsUUFFQWYsVUFDQTBHLEtBQUFya0IsSUFBQSxhQUFBMkosT0FBQSxHQUNBMmEsS0FBQXRrQixJQUFBLGNBQ0F1a0IsS0FBQXZrQixJQUFBLGtCQUFBMkosT0FBQSxHQUNBNmEsS0FBQXhrQixJQUFBLG9CQUdBK2MsV0FDQTJELEtBQUEsU0FBQXJnQixHQVVBLE1BVEFBLEdBQUEsR0FBQUEsRUFBQSxHQUFBa0MsUUFBQTJlLEdBQUFDLElBR0E5Z0IsRUFBQSxJQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQUFBLElBQUFrQyxRQUFBMmUsR0FBQUMsSUFFQSxPQUFBOWdCLEVBQUEsS0FDQUEsRUFBQSxHQUFBLElBQUFBLEVBQUEsR0FBQSxLQUdBQSxFQUFBb0IsTUFBQSxFQUFBLElBR0FtZixNQUFBLFNBQUF2Z0IsR0E2QkEsTUFsQkFBLEdBQUEsR0FBQUEsRUFBQSxHQUFBckIsY0FFQSxRQUFBcUIsRUFBQSxHQUFBb0IsTUFBQSxFQUFBLElBRUFwQixFQUFBLElBQ0E4WCxFQUFBbEQsTUFBQTVVLEVBQUEsSUFLQUEsRUFBQSxLQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQUFBLEdBQUEsR0FBQSxTQUFBQSxFQUFBLElBQUEsUUFBQUEsRUFBQSxLQUNBQSxFQUFBLEtBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUFBLFFBQUFBLEVBQUEsS0FHQUEsRUFBQSxJQUNBOFgsRUFBQWxELE1BQUE1VSxFQUFBLElBR0FBLEdBR0FzZ0IsT0FBQSxTQUFBdGdCLEdBQ0EsR0FBQW9rQixHQUNBQyxHQUFBcmtCLEVBQUEsSUFBQUEsRUFBQSxFQUVBLE9BQUFpZ0IsSUFBQSxNQUFBMWdCLEtBQUFTLEVBQUEsSUFDQSxNQUlBQSxFQUFBLEdBQ0FBLEVBQUEsR0FBQUEsRUFBQSxJQUFBQSxFQUFBLElBQUEsR0FHQXFrQixHQUFBdEUsR0FBQXhnQixLQUFBOGtCLEtBRUFELEVBQUFsTCxFQUFBbUwsR0FBQSxNQUVBRCxFQUFBQyxFQUFBaGxCLFFBQUEsSUFBQWdsQixFQUFBam1CLE9BQUFnbUIsR0FBQUMsRUFBQWptQixVQUdBNEIsRUFBQSxHQUFBQSxFQUFBLEdBQUFvQixNQUFBLEVBQUFnakIsR0FDQXBrQixFQUFBLEdBQUFxa0IsRUFBQWpqQixNQUFBLEVBQUFnakIsSUFJQXBrQixFQUFBb0IsTUFBQSxFQUFBLE1BSUE1QixRQUVBNGdCLElBQUEsU0FBQWtFLEdBQ0EsR0FBQTlsQixHQUFBOGxCLEVBQUFwaUIsUUFBQTJlLEdBQUFDLElBQUFuaUIsYUFDQSxPQUFBLE1BQUEybEIsRUFDQSxXQUFBLE9BQUEsR0FDQSxTQUFBN2xCLEdBQ0EsTUFBQUEsR0FBQUQsVUFBQUMsRUFBQUQsU0FBQUcsZ0JBQUFILElBSUEyaEIsTUFBQSxTQUFBNkIsR0FDQSxHQUFBdUMsR0FBQXZGLEVBQUFnRCxFQUFBLElBRUEsT0FBQXVDLEtBQ0FBLEVBQUEsR0FBQTVFLFFBQUEsTUFBQUwsR0FBQSxJQUFBMEMsRUFBQSxJQUFBMUMsR0FBQSxTQUNBTixFQUFBZ0QsRUFBQSxTQUFBdmpCLEdBQ0EsTUFBQThsQixHQUFBaGxCLEtBQUEsZ0JBQUFkLEdBQUF1akIsV0FBQXZqQixFQUFBdWpCLGVBQUEsS0FBQXZqQixFQUFBMkQsY0FBQTNELEVBQUEyRCxhQUFBLFVBQUEsT0FJQWllLEtBQUEsU0FBQTNoQixFQUFBOGxCLEVBQUFDLEdBQ0EsTUFBQSxVQUFBaG1CLEdBQ0EsR0FBQXlSLEdBQUE0SCxFQUFBd0wsS0FBQTdrQixFQUFBQyxFQUVBLE9BQUEsT0FBQXdSLEVBQ0EsT0FBQXNVLEdBRUFBLElBSUF0VSxHQUFBLEdBRUEsTUFBQXNVLEVBQUF0VSxJQUFBdVUsRUFDQSxPQUFBRCxFQUFBdFUsSUFBQXVVLEVBQ0EsT0FBQUQsRUFBQUMsR0FBQSxJQUFBdlUsRUFBQTdRLFFBQUFvbEIsR0FDQSxPQUFBRCxFQUFBQyxHQUFBdlUsRUFBQTdRLFFBQUFvbEIsSUFBQSxFQUNBLE9BQUFELEVBQUFDLEdBQUF2VSxFQUFBOU8sT0FBQXFqQixFQUFBcm1CLFVBQUFxbUIsRUFDQSxPQUFBRCxHQUFBLElBQUF0VSxFQUFBaE8sUUFBQXdkLEdBQUEsS0FBQSxLQUFBcmdCLFFBQUFvbEIsSUFBQSxFQUNBLE9BQUFELElBQUF0VSxJQUFBdVUsR0FBQXZVLEVBQUE5TyxNQUFBLEVBQUFxakIsRUFBQXJtQixPQUFBLEtBQUFxbUIsRUFBQSxRQUtBbEUsTUFBQSxTQUFBbGlCLEVBQUFxbUIsRUFBQTVKLEVBQUF4UixFQUFBNk0sR0FDQSxHQUFBd08sR0FBQSxRQUFBdG1CLEVBQUErQyxNQUFBLEVBQUEsR0FDQXdqQixFQUFBLFNBQUF2bUIsRUFBQStDLE9BQUEsR0FDQXlqQixFQUFBLFlBQUFILENBRUEsT0FBQSxLQUFBcGIsR0FBQSxJQUFBNk0sRUFHQSxTQUFBMVgsR0FDQSxRQUFBQSxFQUFBVCxZQUdBLFNBQUFTLEVBQUErRixFQUFBa1gsR0FDQSxHQUFBakMsR0FBQW1DLEVBQUFDLEVBQUFyUyxFQUFBc2IsRUFBQXRoQixFQUNBN0QsRUFBQWdsQixJQUFBQyxFQUFBLGNBQUEsa0JBQ0FHLEVBQUF0bUIsRUFBQVQsV0FDQVUsRUFBQW1tQixHQUFBcG1CLEVBQUFELFNBQUFHLGNBQ0FxbUIsR0FBQXRKLElBQUFtSixFQUNBdkssR0FBQSxDQUVBLElBQUF5SyxFQUFBLENBR0EsR0FBQUosRUFBQSxDQUNBLEtBQUFobEIsR0FBQSxDQUVBLElBREE2SixFQUFBL0ssRUFDQStLLEVBQUFBLEVBQUE3SixJQUNBLEdBQUFrbEIsRUFDQXJiLEVBQUFoTCxTQUFBRyxnQkFBQUQsRUFDQSxJQUFBOEssRUFBQXBLLFNBRUEsT0FBQSxDQUlBb0UsR0FBQTdELEVBQUEsU0FBQXRCLElBQUFtRixHQUFBLGNBRUEsT0FBQSxFQU1BLEdBSEFBLEdBQUFvaEIsRUFBQUcsRUFBQTFlLFdBQUEwZSxFQUFBNWUsV0FHQXllLEdBQUFJLEdBa0JBLElBYkF4YixFQUFBdWIsRUFDQWxKLEVBQUFyUyxFQUFBL0gsS0FBQStILEVBQUEvSCxPQUlBbWEsRUFBQUMsRUFBQXJTLEVBQUF3UyxZQUNBSCxFQUFBclMsRUFBQXdTLGNBRUF2QyxFQUFBbUMsRUFBQXZkLE9BQ0F5bUIsRUFBQXJMLEVBQUEsS0FBQXNDLEdBQUF0QyxFQUFBLEdBQ0FhLEVBQUF3SyxHQUFBckwsRUFBQSxHQUNBalEsRUFBQXNiLEdBQUFDLEVBQUEzZSxXQUFBMGUsR0FFQXRiLElBQUFzYixHQUFBdGIsR0FBQUEsRUFBQTdKLEtBR0EyYSxFQUFBd0ssRUFBQSxJQUFBdGhCLEVBQUErYSxPQUdBLEdBQUEsSUFBQS9VLEVBQUFwSyxZQUFBa2IsR0FBQTlRLElBQUEvSyxFQUFBLENBQ0FtZCxFQUFBdmQsSUFBQTBkLEVBQUErSSxFQUFBeEssRUFDQSxZQXVCQSxJQWpCQTBLLElBRUF4YixFQUFBL0ssRUFDQW9kLEVBQUFyUyxFQUFBL0gsS0FBQStILEVBQUEvSCxPQUlBbWEsRUFBQUMsRUFBQXJTLEVBQUF3UyxZQUNBSCxFQUFBclMsRUFBQXdTLGNBRUF2QyxFQUFBbUMsRUFBQXZkLE9BQ0F5bUIsRUFBQXJMLEVBQUEsS0FBQXNDLEdBQUF0QyxFQUFBLEdBQ0FhLEVBQUF3SyxJQUtBLElBQUF4SyxFQUVBLE1BQUE5USxJQUFBc2IsR0FBQXRiLEdBQUFBLEVBQUE3SixLQUNBMmEsRUFBQXdLLEVBQUEsSUFBQXRoQixFQUFBK2EsVUFFQXNHLEVBQ0FyYixFQUFBaEwsU0FBQUcsZ0JBQUFELEVBQ0EsSUFBQThLLEVBQUFwSyxjQUNBa2IsSUFHQTBLLElBQ0FuSixFQUFBclMsRUFBQS9ILEtBQUErSCxFQUFBL0gsT0FJQW1hLEVBQUFDLEVBQUFyUyxFQUFBd1MsWUFDQUgsRUFBQXJTLEVBQUF3UyxjQUVBSixFQUFBdmQsSUFBQTBkLEVBQUF6QixJQUdBOVEsSUFBQS9LLE1BVUEsT0FEQTZiLEdBQUFuRSxLQUNBN00sR0FBQWdSLEVBQUFoUixHQUFBLEdBQUFnUixFQUFBaFIsR0FBQSxLQUtBZ1gsT0FBQSxTQUFBMkUsRUFBQW5LLEdBS0EsR0FBQTNSLEdBQ0FoQyxFQUFBd1MsRUFBQThGLFFBQUF3RixJQUFBdEwsRUFBQXFCLFdBQUFpSyxFQUFBdG1CLGdCQUNBbVosRUFBQWxELE1BQUEsdUJBQUFxUSxFQUtBLE9BQUE5ZCxHQUFBMUYsR0FDQTBGLEVBQUEyVCxHQUlBM1QsRUFBQS9JLE9BQUEsR0FDQStLLEdBQUE4YixFQUFBQSxFQUFBLEdBQUFuSyxHQUNBbkIsRUFBQXFCLFdBQUE1RixlQUFBNlAsRUFBQXRtQixlQUNBa2IsRUFBQSxTQUFBOUIsRUFBQWxNLEdBSUEsSUFIQSxHQUFBcVosR0FDQUMsRUFBQWhlLEVBQUE0USxFQUFBK0MsR0FDQTViLEVBQUFpbUIsRUFBQS9tQixPQUNBYyxLQUNBZ21CLEVBQUE3bEIsRUFBQTBZLEVBQUFvTixFQUFBam1CLElBQ0E2WSxFQUFBbU4sS0FBQXJaLEVBQUFxWixHQUFBQyxFQUFBam1CLE1BR0EsU0FBQVQsR0FDQSxNQUFBMEksR0FBQTFJLEVBQUEsRUFBQTBLLEtBSUFoQyxJQUlBc1ksU0FFQTFnQixJQUFBOGEsRUFBQSxTQUFBM1MsR0FJQSxHQUFBb2IsTUFDQWhMLEtBQ0E2RCxFQUFBd0QsRUFBQXpYLEVBQUFoRixRQUFBcVQsR0FBQSxNQUVBLE9BQUE0RixHQUFBMVosR0FDQW9ZLEVBQUEsU0FBQTlCLEVBQUFsTSxFQUFBckgsRUFBQWtYLEdBTUEsSUFMQSxHQUFBamQsR0FDQTZkLEVBQUFuQixFQUFBcEQsRUFBQSxLQUFBMkQsTUFDQXhjLEVBQUE2WSxFQUFBM1osT0FHQWMsTUFDQVQsRUFBQTZkLEVBQUFwZCxNQUNBNlksRUFBQTdZLEtBQUEyTSxFQUFBM00sR0FBQVQsTUFJQSxTQUFBQSxFQUFBK0YsRUFBQWtYLEdBS0EsTUFKQTRHLEdBQUEsR0FBQTdqQixFQUNBMGMsRUFBQW1ILEVBQUEsS0FBQTVHLEVBQUFwRSxHQUVBZ0wsRUFBQSxHQUFBLE1BQ0FoTCxFQUFBaUgsU0FJQTZHLElBQUF2TCxFQUFBLFNBQUEzUyxHQUNBLE1BQUEsVUFBQXpJLEdBQ0EsTUFBQXFaLEdBQUE1USxFQUFBekksR0FBQUwsT0FBQSxLQUlBb0gsU0FBQXFVLEVBQUEsU0FBQWhjLEdBRUEsTUFEQUEsR0FBQUEsRUFBQXFFLFFBQUEyZSxHQUFBQyxJQUNBLFNBQUFyaUIsR0FDQSxPQUFBQSxFQUFBNkgsYUFBQTdILEVBQUE0bUIsV0FBQTVHLEVBQUFoZ0IsSUFBQVksUUFBQXhCLElBQUEsS0FXQXluQixLQUFBekwsRUFBQSxTQUFBeUwsR0FNQSxNQUpBdEYsSUFBQXpnQixLQUFBK2xCLEdBQUEsS0FDQXhOLEVBQUFsRCxNQUFBLHFCQUFBMFEsR0FFQUEsRUFBQUEsRUFBQXBqQixRQUFBMmUsR0FBQUMsSUFBQW5pQixjQUNBLFNBQUFGLEdBQ0EsR0FBQThtQixFQUNBLElBQ0EsR0FBQUEsRUFBQWhOLEVBQ0E5WixFQUFBNm1CLEtBQ0E3bUIsRUFBQTJELGFBQUEsYUFBQTNELEVBQUEyRCxhQUFBLFFBR0EsT0FEQW1qQixFQUFBQSxFQUFBNW1CLGlCQUNBMm1CLEdBQUEsSUFBQUMsRUFBQWxtQixRQUFBaW1CLEVBQUEsWUFFQTdtQixFQUFBQSxFQUFBVCxhQUFBLElBQUFTLEVBQUFXLFNBQ0EsUUFBQSxLQUtBNlQsT0FBQSxTQUFBeFUsR0FDQSxHQUFBK21CLEdBQUFub0IsRUFBQW9vQixVQUFBcG9CLEVBQUFvb0IsU0FBQUQsSUFDQSxPQUFBQSxJQUFBQSxFQUFBcGtCLE1BQUEsS0FBQTNDLEVBQUFpYSxJQUdBZ04sS0FBQSxTQUFBam5CLEdBQ0EsTUFBQUEsS0FBQXFnQixHQUdBNkcsTUFBQSxTQUFBbG5CLEdBQ0EsTUFBQUEsS0FBQXZCLEVBQUE0SixpQkFBQTVKLEVBQUEwb0IsVUFBQTFvQixFQUFBMG9CLGdCQUFBbm5CLEVBQUFKLE1BQUFJLEVBQUFvbkIsT0FBQXBuQixFQUFBcW5CLFdBSUFDLFFBQUF0TCxHQUFBLEdBQ0FDLFNBQUFELEdBQUEsR0FFQTFSLFFBQUEsU0FBQXRLLEdBR0EsR0FBQUQsR0FBQUMsRUFBQUQsU0FBQUcsYUFDQSxPQUFBLFVBQUFILEtBQUFDLEVBQUFzSyxTQUFBLFdBQUF2SyxLQUFBQyxFQUFBaVU7NkRBR0FBLFNBQUEsU0FBQWpVLEdBT0EsTUFKQUEsR0FBQVQsWUFDQVMsRUFBQVQsV0FBQWdvQixlQUdBLElBQUF2bkIsRUFBQWlVLFVBSUF4RCxNQUFBLFNBQUF6USxHQUtBLElBQUFBLEVBQUFBLEVBQUE0SCxXQUFBNUgsRUFBQUEsRUFBQUEsRUFBQStiLFlBQ0EsR0FBQS9iLEVBQUFXLFNBQUEsRUFDQSxPQUFBLENBR0EsUUFBQSxHQUdBMmxCLE9BQUEsU0FBQXRtQixHQUNBLE9BQUFrYixFQUFBOEYsUUFBQSxNQUFBaGhCLElBSUF3bkIsT0FBQSxTQUFBeG5CLEdBQ0EsTUFBQWtpQixJQUFBcGhCLEtBQUFkLEVBQUFELFdBR0E4akIsTUFBQSxTQUFBN2pCLEdBQ0EsTUFBQWlpQixJQUFBbmhCLEtBQUFkLEVBQUFELFdBR0EwbkIsT0FBQSxTQUFBem5CLEdBQ0EsR0FBQUMsR0FBQUQsRUFBQUQsU0FBQUcsYUFDQSxPQUFBLFVBQUFELEdBQUEsV0FBQUQsRUFBQUosTUFBQSxXQUFBSyxHQUdBYixLQUFBLFNBQUFZLEdBQ0EsR0FBQTZrQixFQUNBLE9BQUEsVUFBQTdrQixFQUFBRCxTQUFBRyxlQUNBLFNBQUFGLEVBQUFKLE9BSUEsT0FBQWlsQixFQUFBN2tCLEVBQUEyRCxhQUFBLFVBQUEsU0FBQWtoQixFQUFBM2tCLGdCQUlBMkssTUFBQXVSLEVBQUEsV0FDQSxPQUFBLEtBR0ExRSxLQUFBMEUsRUFBQSxTQUFBRSxFQUFBM2MsR0FDQSxPQUFBQSxFQUFBLEtBR0EwTCxHQUFBK1EsRUFBQSxTQUFBRSxFQUFBM2MsRUFBQTBjLEdBQ0EsT0FBQUEsRUFBQSxFQUFBQSxFQUFBMWMsRUFBQTBjLEtBR0FxTCxLQUFBdEwsRUFBQSxTQUFBRSxFQUFBM2MsR0FFQSxJQURBLEdBQUFjLEdBQUEsRUFDQUEsRUFBQWQsRUFBQWMsR0FBQSxFQUNBNmIsRUFBQXhVLEtBQUFySCxFQUVBLE9BQUE2YixLQUdBcUwsSUFBQXZMLEVBQUEsU0FBQUUsRUFBQTNjLEdBRUEsSUFEQSxHQUFBYyxHQUFBLEVBQ0FBLEVBQUFkLEVBQUFjLEdBQUEsRUFDQTZiLEVBQUF4VSxLQUFBckgsRUFFQSxPQUFBNmIsS0FHQXNMLEdBQUF4TCxFQUFBLFNBQUFFLEVBQUEzYyxFQUFBMGMsR0FFQSxJQURBLEdBQUE1YixHQUFBNGIsRUFBQSxFQUFBQSxFQUFBMWMsRUFBQTBjLElBQ0E1YixHQUFBLEdBQ0E2YixFQUFBeFUsS0FBQXJILEVBRUEsT0FBQTZiLEtBR0F1TCxHQUFBekwsRUFBQSxTQUFBRSxFQUFBM2MsRUFBQTBjLEdBRUEsSUFEQSxHQUFBNWIsR0FBQTRiLEVBQUEsRUFBQUEsRUFBQTFjLEVBQUEwYyxJQUNBNWIsRUFBQWQsR0FDQTJjLEVBQUF4VSxLQUFBckgsRUFFQSxPQUFBNmIsT0FLQXBCLEVBQUE4RixRQUFBLElBQUE5RixFQUFBOEYsUUFBQSxFQUdBLEtBQUF2Z0IsS0FBQXFuQixPQUFBLEVBQUFDLFVBQUEsRUFBQUMsTUFBQSxFQUFBQyxVQUFBLEVBQUFDLE9BQUEsR0FDQWhOLEVBQUE4RixRQUFBdmdCLEdBeHBDQSxTQUFBYixHQUNBLE1BQUEsVUFBQUksR0FFQSxNQUFBLFVBREFBLEVBQUFELFNBQUFHLGVBQ0FGLEVBQUFKLE9BQUFBLElBcXBDQWEsRUFFQSxLQUFBQSxLQUFBMG5CLFFBQUEsRUFBQUMsT0FBQSxHQUNBbE4sRUFBQThGLFFBQUF2Z0IsR0FocENBLFNBQUFiLEdBQ0EsTUFBQSxVQUFBSSxHQUNBLEdBQUFDLEdBQUFELEVBQUFELFNBQUFHLGFBQ0EsUUFBQSxVQUFBRCxHQUFBLFdBQUFBLElBQUFELEVBQUFKLE9BQUFBLElBNm9DQWEsRUFtbkJBLE9BOW1CQThiLEdBQUFwTyxVQUFBK00sRUFBQW1OLFFBQUFuTixFQUFBOEYsUUFDQTlGLEVBQUFxQixXQUFBLEdBQUFBLEdBRUE5QixFQUFBcEIsRUFBQW9CLFNBQUEsU0FBQWhTLEVBQUE2ZixHQUNBLEdBQUE1QixHQUFBbmxCLEVBQUFpYixFQUFBNWMsRUFDQTJvQixFQUFBOU8sRUFBQStPLEVBQ0FDLEVBQUFqSSxFQUFBL1gsRUFBQSxJQUVBLElBQUFnZ0IsRUFDQSxNQUFBSCxHQUFBLEVBQUFHLEVBQUE5bEIsTUFBQSxFQU9BLEtBSkE0bEIsRUFBQTlmLEVBQ0FnUixLQUNBK08sRUFBQXROLEVBQUErQyxVQUVBc0ssR0FBQSxDQUdBN0IsS0FBQW5sQixFQUFBNGYsR0FBQXRjLEtBQUEwakIsTUFDQWhuQixJQUVBZ25CLEVBQUFBLEVBQUE1bEIsTUFBQXBCLEVBQUEsR0FBQTVCLFNBQUE0b0IsR0FFQTlPLEVBQUEzUixLQUFBMFUsT0FHQWtLLEdBQUEsR0FHQW5sQixFQUFBNmYsR0FBQXZjLEtBQUEwakIsTUFDQTdCLEVBQUFubEIsRUFBQTRULFFBQ0FxSCxFQUFBMVUsTUFDQTlGLE1BQUEwa0IsRUFFQTltQixLQUFBMkIsRUFBQSxHQUFBa0MsUUFBQXFULEdBQUEsT0FFQXlSLEVBQUFBLEVBQUE1bEIsTUFBQStqQixFQUFBL21CLFFBSUEsS0FBQUMsSUFBQXNiLEdBQUFuYSxTQUNBUSxFQUFBaWdCLEdBQUE1aEIsR0FBQWlGLEtBQUEwakIsS0FBQUMsRUFBQTVvQixNQUNBMkIsRUFBQWluQixFQUFBNW9CLEdBQUEyQixNQUNBbWxCLEVBQUFubEIsRUFBQTRULFFBQ0FxSCxFQUFBMVUsTUFDQTlGLE1BQUEwa0IsRUFDQTltQixLQUFBQSxFQUNBd04sUUFBQTdMLElBRUFnbkIsRUFBQUEsRUFBQTVsQixNQUFBK2pCLEVBQUEvbUIsUUFJQSxLQUFBK21CLEVBQ0EsTUFPQSxNQUFBNEIsR0FDQUMsRUFBQTVvQixPQUNBNG9CLEVBQ0FsUCxFQUFBbEQsTUFBQTFOLEdBRUErWCxFQUFBL1gsRUFBQWdSLEdBQUE5VyxNQUFBLElBK1hBdWQsRUFBQTdHLEVBQUE2RyxRQUFBLFNBQUF6WCxFQUFBbEgsR0FDQSxHQUFBZCxHQUNBMmUsS0FDQUQsS0FDQXNKLEVBQUFyTyxFQUFBM1IsRUFBQSxJQUVBLEtBQUFnZ0IsRUFBQSxDQU1BLElBSkFsbkIsSUFDQUEsRUFBQWtaLEVBQUFoUyxJQUVBaEksRUFBQWMsRUFBQTVCLE9BQ0FjLEtBQ0Fnb0IsRUFBQS9KLEVBQUFuZCxFQUFBZCxJQUNBZ29CLEVBQUF6bEIsR0FDQW9jLEVBQUF0WCxLQUFBMmdCLEdBRUF0SixFQUFBclgsS0FBQTJnQixFQUtBQSxHQUFBck8sRUFBQTNSLEVBQUF5VyxFQUFBQyxFQUFBQyxJQUdBcUosRUFBQWhnQixTQUFBQSxFQUVBLE1BQUFnZ0IsSUFZQTNOLEVBQUF6QixFQUFBeUIsT0FBQSxTQUFBclMsRUFBQTFDLEVBQUE4UyxFQUFBUyxHQUNBLEdBQUE3WSxHQUFBK2IsRUFBQWtNLEVBQUE5b0IsRUFBQWdnQixFQUNBK0ksRUFBQSxrQkFBQWxnQixJQUFBQSxFQUNBbEgsR0FBQStYLEdBQUFtQixFQUFBaFMsRUFBQWtnQixFQUFBbGdCLFVBQUFBLEVBTUEsSUFKQW9RLEVBQUFBLE1BSUEsSUFBQXRYLEVBQUE1QixPQUFBLENBSUEsR0FEQTZjLEVBQUFqYixFQUFBLEdBQUFBLEVBQUEsR0FBQW9CLE1BQUEsR0FDQTZaLEVBQUE3YyxPQUFBLEdBQUEsUUFBQStvQixFQUFBbE0sRUFBQSxJQUFBNWMsTUFDQSxJQUFBbUcsRUFBQXBGLFVBQUFtWixHQUFBb0IsRUFBQTJELFNBQUFyQyxFQUFBLEdBQUE1YyxNQUFBLENBR0EsS0FEQW1HLEdBQUFtVixFQUFBMEUsS0FBQSxHQUFBOEksRUFBQXRiLFFBQUEsR0FBQTNKLFFBQUEyZSxHQUFBQyxJQUFBdGMsUUFBQSxJQUVBLE1BQUE4UyxFQUdBOFAsS0FDQTVpQixFQUFBQSxFQUFBeEcsWUFHQWtKLEVBQUFBLEVBQUE5RixNQUFBNlosRUFBQXJILFFBQUFuVCxNQUFBckMsUUFLQSxJQURBYyxFQUFBK2dCLEdBQUEsYUFBQTFnQixLQUFBMkgsR0FBQSxFQUFBK1QsRUFBQTdjLE9BQ0FjLE1BQ0Fpb0IsRUFBQWxNLEVBQUEvYixJQUdBeWEsRUFBQTJELFNBQUFqZixFQUFBOG9CLEVBQUE5b0IsUUFHQSxJQUFBZ2dCLEVBQUExRSxFQUFBMEUsS0FBQWhnQixNQUVBMFosRUFBQXNHLEVBQ0E4SSxFQUFBdGIsUUFBQSxHQUFBM0osUUFBQTJlLEdBQUFDLElBQ0ExSCxHQUFBN1osS0FBQTBiLEVBQUEsR0FBQTVjLE9BQUFnYixFQUFBN1UsRUFBQXhHLGFBQUF3RyxJQUNBLENBS0EsR0FGQXlXLEVBQUEzRSxPQUFBcFgsRUFBQSxLQUNBZ0ksRUFBQTZRLEVBQUEzWixRQUFBK2EsRUFBQThCLElBR0EsTUFEQTFVLEdBQUFyRixNQUFBb1csRUFBQVMsR0FDQVQsQ0FHQSxRQWVBLE9BUEE4UCxHQUFBekksRUFBQXpYLEVBQUFsSCxJQUNBK1gsRUFDQXZULEdBQ0ErVCxFQUNBakIsR0FDQTlTLEdBQUE0VSxHQUFBN1osS0FBQTJILElBQUFtUyxFQUFBN1UsRUFBQXhHLGFBQUF3RyxHQUVBOFMsR0FNQTVOLEVBQUFrYSxXQUFBbmlCLEVBQUFnVCxNQUFBLElBQUE0QixLQUFBNkksR0FBQXhOLEtBQUEsTUFBQWpRLEVBSUFpSSxFQUFBaWEsbUJBQUE5RSxFQUdBdkcsSUFJQTVPLEVBQUF1WixhQUFBbkosRUFBQSxTQUFBQyxHQUVBLE1BQUEsR0FBQUEsRUFBQThJLHdCQUFBM2xCLEVBQUFVLGNBQUEsZUFNQWtjLEVBQUEsU0FBQUMsR0FFQSxNQURBQSxHQUFBOVQsVUFBQSxtQkFDQSxNQUFBOFQsRUFBQTFULFdBQUFqRSxhQUFBLFdBRUE0WCxFQUFBLHlCQUFBLFNBQUF2YixFQUFBQyxFQUFBZ2dCLEdBQ0EsSUFBQUEsRUFDQSxNQUFBamdCLEdBQUEyRCxhQUFBMUQsRUFBQSxTQUFBQSxFQUFBQyxjQUFBLEVBQUEsS0FPQStLLEVBQUE4VixZQUFBMUYsRUFBQSxTQUFBQyxHQUdBLE1BRkFBLEdBQUE5VCxVQUFBLFdBQ0E4VCxFQUFBMVQsV0FBQTRTLGFBQUEsUUFBQSxJQUNBLEtBQUFjLEVBQUExVCxXQUFBakUsYUFBQSxZQUVBNFgsRUFBQSxRQUFBLFNBQUF2YixFQUFBQyxFQUFBZ2dCLEdBQ0EsSUFBQUEsR0FBQSxVQUFBamdCLEVBQUFELFNBQUFHLGNBQ0EsTUFBQUYsR0FBQXVLLGVBT0E4USxFQUFBLFNBQUFDLEdBQ0EsTUFBQSxPQUFBQSxFQUFBM1gsYUFBQSxlQUVBNFgsRUFBQXFGLEVBQUEsU0FBQTVnQixFQUFBQyxFQUFBZ2dCLEdBQ0EsR0FBQXRTLEVBQ0EsS0FBQXNTLEVBQ0EsT0FBQSxJQUFBamdCLEVBQUFDLEdBQUFBLEVBQUFDLGVBQ0F5TixFQUFBM04sRUFBQTRqQixpQkFBQTNqQixLQUFBME4sRUFBQW1YLFVBQ0FuWCxFQUFBM0wsTUFDQSxPQUtBcVgsR0FFQXphLEVBSUFpQixJQUFBK2YsS0FBQXZHLEdBQ0F4WixHQUFBK2tCLEtBQUF2TCxHQUFBZ00sVUFHQXhsQixHQUFBK2tCLEtBQUEsS0FBQS9rQixHQUFBK2tCLEtBQUE1RCxRQUNBbmhCLEdBQUFrZ0IsV0FBQWxnQixHQUFBK29CLE9BQUF2UCxHQUFBMEcsV0FDQWxnQixHQUFBVCxLQUFBaWEsR0FBQTJHLFFBQ0FuZ0IsR0FBQWdwQixTQUFBeFAsR0FBQTRHLE1BQ0FwZ0IsR0FBQWtILFNBQUFzUyxHQUFBdFMsU0FDQWxILEdBQUFpcEIsZUFBQXpQLEdBQUEwTCxNQUtBLElBQUE3akIsSUFBQSxTQUFBbEIsRUFBQWtCLEVBQUE2bkIsR0FJQSxJQUhBLEdBQUFyQyxNQUNBc0MsTUFBQXRtQixLQUFBcW1CLEdBRUEvb0IsRUFBQUEsRUFBQWtCLEtBQUEsSUFBQWxCLEVBQUFXLFVBQ0EsR0FBQSxJQUFBWCxFQUFBVyxTQUFBLENBQ0EsR0FBQXFvQixHQUFBbnBCLEdBQUFHLEdBQUFpcEIsR0FBQUYsR0FDQSxLQUVBckMsR0FBQTVlLEtBQUE5SCxHQUdBLE1BQUEwbUIsSUFJQXdDLEdBQUEsU0FBQUMsRUFBQW5wQixHQUdBLElBRkEsR0FBQTBtQixNQUVBeUMsRUFBQUEsRUFBQUEsRUFBQXBOLFlBQ0EsSUFBQW9OLEVBQUF4b0IsVUFBQXdvQixJQUFBbnBCLEdBQ0EwbUIsRUFBQTVlLEtBQUFxaEIsRUFJQSxPQUFBekMsSUFJQTBDLEdBQUF2cEIsR0FBQStrQixLQUFBcmpCLE1BQUF5Z0IsYUFTQXFILEdBQUEsa0VBSUF4b0IsR0FBQSxnQkFvQ0FoQixJQUFBa0IsT0FBQSxTQUFBNmpCLEVBQUF0ZSxFQUFBaEcsR0FDQSxHQUFBTixHQUFBc0csRUFBQSxFQU1BLE9BSkFoRyxLQUNBc2tCLEVBQUEsUUFBQUEsRUFBQSxLQUdBLElBQUF0ZSxFQUFBM0csUUFBQSxJQUFBSyxFQUFBVyxTQUNBZCxHQUFBK2YsS0FBQWtFLGdCQUFBOWpCLEVBQUE0a0IsSUFBQTVrQixNQUdBSCxHQUFBK2YsS0FBQXhTLFFBQUF3WCxFQUFBL2tCLEdBQUFXLEtBQUE4RixFQUFBLFNBQUF0RyxHQUNBLE1BQUEsS0FBQUEsRUFBQVcsYUFJQWQsR0FBQTZJLEdBQUF5QixRQUNBeVYsS0FBQSxTQUFBblgsR0FDQSxHQUFBaEksR0FBQXdGLEVBQ0EwUixFQUFBOVksS0FBQWMsT0FDQXlMLEVBQUF2TSxJQUVBLElBQUEsZ0JBQUE0SixHQUNBLE1BQUE1SixNQUFBMlksVUFBQTNYLEdBQUE0SSxHQUFBMUgsT0FBQSxXQUNBLElBQUFOLEVBQUEsRUFBQUEsRUFBQWtYLEVBQUFsWCxJQUNBLEdBQUFaLEdBQUFrSCxTQUFBcUUsRUFBQTNLLEdBQUE1QixNQUNBLE9BQUEsSUFRQSxLQUZBb0gsRUFBQXBILEtBQUEyWSxjQUVBL1csRUFBQSxFQUFBQSxFQUFBa1gsRUFBQWxYLElBQ0FaLEdBQUErZixLQUFBblgsRUFBQTJDLEVBQUEzSyxHQUFBd0YsRUFHQSxPQUFBMFIsR0FBQSxFQUFBOVgsR0FBQWtnQixXQUFBOVosR0FBQUEsR0FFQWxGLE9BQUEsU0FBQTBILEdBQ0EsTUFBQTVKLE1BQUEyWSxVQUFBclgsRUFBQXRCLEtBQUE0SixPQUFBLEtBRUFuSSxJQUFBLFNBQUFtSSxHQUNBLE1BQUE1SixNQUFBMlksVUFBQXJYLEVBQUF0QixLQUFBNEosT0FBQSxLQUVBd2dCLEdBQUEsU0FBQXhnQixHQUNBLFFBQUF0SSxFQUNBdEIsS0FJQSxnQkFBQTRKLElBQUEyZ0IsR0FBQXRvQixLQUFBMkgsR0FDQTVJLEdBQUE0SSxHQUNBQSxPQUNBLEdBQ0E5SSxTQVNBLElBQUEycEIsSUFNQXZQLEdBQUEsdUNBRUFsYSxHQUFBNkksR0FBQTBGLEtBQUEsU0FBQTNGLEVBQUExQyxFQUFBa2hCLEdBQ0EsR0FBQTFsQixHQUFBdkIsQ0FHQSxLQUFBeUksRUFDQSxNQUFBNUosS0FRQSxJQUhBb29CLEVBQUFBLEdBQUFxQyxHQUdBLGdCQUFBN2dCLEdBQUEsQ0FhQSxLQVBBbEgsRUFMQSxNQUFBa0gsRUFBQSxJQUNBLE1BQUFBLEVBQUFBLEVBQUE5SSxPQUFBLElBQ0E4SSxFQUFBOUksUUFBQSxHQUdBLEtBQUE4SSxFQUFBLE1BR0FzUixHQUFBbFYsS0FBQTRELE1BSUFsSCxFQUFBLElBQUF3RSxFQTZDQSxPQUFBQSxHQUFBQSxFQUFBcVIsUUFDQXJSLEdBQUFraEIsR0FBQXJILEtBQUFuWCxHQUtBNUosS0FBQXdZLFlBQUF0UixHQUFBNlosS0FBQW5YLEVBaERBLElBQUFsSCxFQUFBLEdBQUEsQ0FZQSxHQVhBd0UsRUFBQUEsWUFBQWxHLElBQUFrRyxFQUFBLEdBQUFBLEVBSUFsRyxHQUFBdUcsTUFBQXZILEtBQUFnQixHQUFBMHBCLFVBQ0Fob0IsRUFBQSxHQUNBd0UsR0FBQUEsRUFBQXBGLFNBQUFvRixFQUFBWixlQUFBWSxFQUFBdEgsSUFDQSxJQUlBNHFCLEdBQUF2b0IsS0FBQVMsRUFBQSxLQUFBMUIsR0FBQW1ZLGNBQUFqUyxHQUNBLElBQUF4RSxJQUFBd0UsR0FHQWxHLEdBQUFVLFdBQUExQixLQUFBMEMsSUFDQTFDLEtBQUEwQyxHQUFBd0UsRUFBQXhFLElBSUExQyxLQUFBZ21CLEtBQUF0akIsRUFBQXdFLEVBQUF4RSxHQUtBLE9BQUExQyxNQVlBLE1BUkFtQixHQUFBdkIsR0FBQXViLGVBQUF6WSxFQUFBLElBRUF2QixJQUdBbkIsS0FBQSxHQUFBbUIsRUFDQW5CLEtBQUFjLE9BQUEsR0FFQWQsS0FjQSxNQUFBNEosR0FBQTlILFVBQ0E5QixLQUFBLEdBQUE0SixFQUNBNUosS0FBQWMsT0FBQSxFQUNBZCxNQUlBZ0IsR0FBQVUsV0FBQWtJLE9BQ0EvRixLQUFBdWtCLEVBQUFua0IsTUFDQW1rQixFQUFBbmtCLE1BQUEyRixHQUdBQSxFQUFBNUksSUFHQUEsR0FBQStZLFVBQUFuUSxFQUFBNUosUUFJQXNQLFVBQUF0TyxHQUFBNkksR0FHQTRnQixHQUFBenBCLEdBQUFwQixHQUdBLElBQUErcUIsSUFBQSxpQ0FHQUMsSUFDQUMsVUFBQSxFQUNBeFUsVUFBQSxFQUNBNEgsTUFBQSxFQUNBakgsTUFBQSxFQUdBaFcsSUFBQTZJLEdBQUF5QixRQUNBd2MsSUFBQSxTQUFBblMsR0FDQSxHQUFBbVYsR0FBQTlwQixHQUFBMlUsRUFBQTNWLE1BQ0EySCxFQUFBbWpCLEVBQUFocUIsTUFFQSxPQUFBZCxNQUFBa0MsT0FBQSxXQUVBLElBREEsR0FBQU4sR0FBQSxFQUNBQSxFQUFBK0YsRUFBQS9GLElBQ0EsR0FBQVosR0FBQWtILFNBQUFsSSxLQUFBOHFCLEVBQUFscEIsSUFDQSxPQUFBLEtBTUFtcEIsUUFBQSxTQUFBdkUsRUFBQXRmLEdBQ0EsR0FBQTlFLEdBQ0FSLEVBQUEsRUFDQStGLEVBQUEzSCxLQUFBYyxPQUNBK21CLEtBQ0FpRCxFQUFBLGdCQUFBdEUsSUFBQXhsQixHQUFBd2xCLEVBR0EsS0FBQStELEdBQUF0b0IsS0FBQXVrQixHQUNBLEtBQUE1a0IsRUFBQStGLEVBQUEvRixJQUNBLElBQUFRLEVBQUFwQyxLQUFBNEIsR0FBQVEsR0FBQUEsSUFBQThFLEVBQUE5RSxFQUFBQSxFQUFBMUIsV0FHQSxHQUFBMEIsRUFBQU4sU0FBQSxLQUFBZ3BCLEVBQ0FBLEVBQUFqa0IsTUFBQXpFLElBQUEsRUFHQSxJQUFBQSxFQUFBTixVQUNBZCxHQUFBK2YsS0FBQWtFLGdCQUFBN2lCLEVBQUFva0IsSUFBQSxDQUVBcUIsRUFBQTVlLEtBQUE3RyxFQUNBLE9BTUEsTUFBQXBDLE1BQUEyWSxVQUFBa1AsRUFBQS9tQixPQUFBLEVBQUFFLEdBQUFrZ0IsV0FBQTJHLEdBQUFBLElBSUFoaEIsTUFBQSxTQUFBMUYsR0FHQSxNQUFBQSxHQUtBLGdCQUFBQSxHQUNBWSxHQUFBRixLQUFBYixHQUFBRyxHQUFBbkIsS0FBQSxJQUlBK0IsR0FBQUYsS0FBQTdCLEtBR0FtQixFQUFBb1gsT0FBQXBYLEVBQUEsR0FBQUEsR0FaQW5CLEtBQUEsSUFBQUEsS0FBQSxHQUFBVSxXQUFBVixLQUFBZ00sUUFBQWdmLFVBQUFscUIsUUFBQSxHQWdCQXNKLElBQUEsU0FBQVIsRUFBQTFDLEdBQ0EsTUFBQWxILE1BQUEyWSxVQUNBM1gsR0FBQWtnQixXQUNBbGdCLEdBQUF1RyxNQUFBdkgsS0FBQStHLE1BQUEvRixHQUFBNEksRUFBQTFDLE9BS0ErakIsUUFBQSxTQUFBcmhCLEdBQ0EsTUFBQTVKLE1BQUFvSyxJQUFBLE1BQUFSLEVBQ0E1SixLQUFBNFksV0FBQTVZLEtBQUE0WSxXQUFBMVcsT0FBQTBILE9BVUE1SSxHQUFBeUIsTUFDQWdsQixPQUFBLFNBQUF0bUIsR0FDQSxHQUFBc21CLEdBQUF0bUIsRUFBQVQsVUFDQSxPQUFBK21CLElBQUEsS0FBQUEsRUFBQTNsQixTQUFBMmxCLEVBQUEsTUFFQXlELFFBQUEsU0FBQS9wQixHQUNBLE1BQUFrQixJQUFBbEIsRUFBQSxlQUVBZ3FCLGFBQUEsU0FBQWhxQixFQUFBUyxFQUFBc29CLEdBQ0EsTUFBQTduQixJQUFBbEIsRUFBQSxhQUFBK29CLElBRUFqTSxLQUFBLFNBQUE5YyxHQUNBLE1BQUFnQixHQUFBaEIsRUFBQSxnQkFFQTZWLEtBQUEsU0FBQTdWLEdBQ0EsTUFBQWdCLEdBQUFoQixFQUFBLG9CQUVBaXFCLFFBQUEsU0FBQWpxQixHQUNBLE1BQUFrQixJQUFBbEIsRUFBQSxnQkFFQTZwQixRQUFBLFNBQUE3cEIsR0FDQSxNQUFBa0IsSUFBQWxCLEVBQUEsb0JBRUFrcUIsVUFBQSxTQUFBbHFCLEVBQUFTLEVBQUFzb0IsR0FDQSxNQUFBN25CLElBQUFsQixFQUFBLGNBQUErb0IsSUFFQW9CLFVBQUEsU0FBQW5xQixFQUFBUyxFQUFBc29CLEdBQ0EsTUFBQTduQixJQUFBbEIsRUFBQSxrQkFBQStvQixJQUVBRyxTQUFBLFNBQUFscEIsR0FDQSxNQUFBa3BCLEtBQUFscEIsRUFBQVQsZ0JBQUFxSSxXQUFBNUgsSUFFQTBwQixTQUFBLFNBQUExcEIsR0FDQSxNQUFBa3BCLElBQUFscEIsRUFBQTRILGFBRUFzTixTQUFBLFNBQUFsVixHQUNBLE1BQUFELEdBQUFDLEVBQUEsVUFDQUEsRUFBQW9xQixpQkFNQXJxQixFQUFBQyxFQUFBLGNBQ0FBLEVBQUFBLEVBQUFtSixTQUFBbkosR0FHQUgsR0FBQXVHLFNBQUFwRyxFQUFBMkgsZUFFQSxTQUFBMUgsRUFBQXlJLEdBQ0E3SSxHQUFBNkksR0FBQXpJLEdBQUEsU0FBQThvQixFQUFBdGdCLEdBQ0EsR0FBQWllLEdBQUE3bUIsR0FBQTBMLElBQUExTSxLQUFBNkosRUFBQXFnQixFQXVCQSxPQXJCQSxVQUFBOW9CLEVBQUEwQyxPQUFBLEtBQ0E4RixFQUFBc2dCLEdBR0F0Z0IsR0FBQSxnQkFBQUEsS0FDQWllLEVBQUE3bUIsR0FBQWtCLE9BQUEwSCxFQUFBaWUsSUFHQTduQixLQUFBYyxPQUFBLElBR0E4cEIsR0FBQXhwQixJQUNBSixHQUFBa2dCLFdBQUEyRyxHQUlBOEMsR0FBQTFvQixLQUFBYixJQUNBeW1CLEVBQUEyRCxXQUlBeHJCLEtBQUEyWSxVQUFBa1AsS0FHQSxJQUFBbGxCLElBQUEsbUJBbUNBM0IsSUFBQXlxQixVQUFBLFNBQUFscEIsR0FJQUEsRUFBQSxnQkFBQUEsR0FDQUQsRUFBQUMsR0FDQXZCLEdBQUFzSyxVQUFBL0ksRUFFQSxJQUNBbXBCLEdBR0FDLEVBR0FDLEVBR0FDLEVBR0EvSixLQUdBclEsS0FHQXFhLEdBQUEsRUFHQWphLEVBQUEsV0FRQSxJQUxBZ2EsRUFBQUEsR0FBQXRwQixFQUFBd3BCLEtBSUFILEVBQUFGLEdBQUEsRUFDQWphLEVBQUEzUSxPQUFBZ3JCLEdBQUEsRUFFQSxJQURBSCxFQUFBbGEsRUFBQTZFLFVBQ0F3VixFQUFBaEssRUFBQWhoQixTQUdBLElBQUFnaEIsRUFBQWdLLEdBQUFsb0IsTUFBQStuQixFQUFBLEdBQUFBLEVBQUEsS0FDQXBwQixFQUFBeXBCLGNBR0FGLEVBQUFoSyxFQUFBaGhCLE9BQ0E2cUIsR0FBQSxFQU1BcHBCLEdBQUFvcEIsU0FDQUEsR0FBQSxHQUdBRCxHQUFBLEVBR0FHLElBSUEvSixFQURBNkosS0FLQSxLQU1BcGYsR0FHQW5DLElBQUEsV0EyQkEsTUExQkEwWCxLQUdBNkosSUFBQUQsSUFDQUksRUFBQWhLLEVBQUFoaEIsT0FBQSxFQUNBMlEsRUFBQXhJLEtBQUEwaUIsSUFHQSxRQUFBdmhCLEdBQUF5QixHQUNBN0ssR0FBQXlCLEtBQUFvSixFQUFBLFNBQUFqSixFQUFBd1gsR0FDQXBaLEdBQUFVLFdBQUEwWSxHQUNBN1gsRUFBQXduQixRQUFBeGQsRUFBQXViLElBQUExTixJQUNBMEgsRUFBQTdZLEtBQUFtUixHQUVBQSxHQUFBQSxFQUFBdFosUUFBQSxXQUFBRSxHQUFBRCxLQUFBcVosSUFHQWhRLEVBQUFnUSxNQUdBbFEsV0FFQXloQixJQUFBRCxHQUNBN1osS0FHQTdSLE1BSUE4TSxPQUFBLFdBWUEsTUFYQTlMLElBQUF5QixLQUFBeUgsVUFBQSxTQUFBdEgsRUFBQXdYLEdBRUEsSUFEQSxHQUFBdlQsSUFDQUEsRUFBQTdGLEdBQUFtSSxRQUFBaVIsRUFBQTBILEVBQUFqYixLQUFBLEdBQ0FpYixFQUFBOUksT0FBQW5TLEVBQUEsR0FHQUEsR0FBQWlsQixHQUNBQSxNQUlBOXJCLE1BS0E4bkIsSUFBQSxTQUFBamUsR0FDQSxNQUFBQSxHQUNBN0ksR0FBQW1JLFFBQUFVLEVBQUFpWSxJQUFBLEVBQ0FBLEVBQUFoaEIsT0FBQSxHQUlBOFEsTUFBQSxXQUlBLE1BSEFrUSxLQUNBQSxNQUVBOWhCLE1BTUFpc0IsUUFBQSxXQUdBLE1BRkFKLEdBQUFwYSxLQUNBcVEsRUFBQTZKLEVBQUEsR0FDQTNyQixNQUVBb2QsU0FBQSxXQUNBLE9BQUEwRSxHQU1Bb0ssS0FBQSxXQUtBLE1BSkFMLEdBQUFwYSxLQUNBa2EsR0FBQUQsSUFDQTVKLEVBQUE2SixFQUFBLElBRUEzckIsTUFFQTZyQixPQUFBLFdBQ0EsUUFBQUEsR0FJQU0sU0FBQSxTQUFBamxCLEVBQUEyRSxHQVNBLE1BUkFnZ0IsS0FDQWhnQixFQUFBQSxNQUNBQSxHQUFBM0UsRUFBQTJFLEVBQUEvSCxNQUFBK0gsRUFBQS9ILFFBQUErSCxHQUNBNEYsRUFBQXhJLEtBQUE0QyxHQUNBNmYsR0FDQTdaLEtBR0E3UixNQUlBNlIsS0FBQSxXQUVBLE1BREF0RixHQUFBNGYsU0FBQW5zQixLQUFBa0ssV0FDQWxLLE1BSUE0ckIsTUFBQSxXQUNBLFFBQUFBLEdBSUEsT0FBQXJmLElBNENBdkwsR0FBQXNLLFFBRUEwSCxTQUFBLFNBQUE2QixHQUNBLEdBQUF1WCxLQUlBLFNBQUEsV0FBQXByQixHQUFBeXFCLFVBQUEsVUFDQXpxQixHQUFBeXFCLFVBQUEsVUFBQSxJQUNBLFVBQUEsT0FBQXpxQixHQUFBeXFCLFVBQUEsZUFDQXpxQixHQUFBeXFCLFVBQUEsZUFBQSxFQUFBLGFBQ0EsU0FBQSxPQUFBenFCLEdBQUF5cUIsVUFBQSxlQUNBenFCLEdBQUF5cUIsVUFBQSxlQUFBLEVBQUEsYUFFQXBVLEVBQUEsVUFDQTdULEdBQ0E2VCxNQUFBLFdBQ0EsTUFBQUEsSUFFQXZGLE9BQUEsV0FFQSxNQURBaUIsR0FBQXRQLEtBQUF5RyxXQUFBeEcsS0FBQXdHLFdBQ0FsSyxNQUVBcXNCLE1BQUEsU0FBQXhpQixHQUNBLE1BQUFyRyxHQUFBRyxLQUFBLEtBQUFrRyxJQUlBeWlCLEtBQUEsV0FDQSxHQUFBQyxHQUFBcmlCLFNBRUEsT0FBQWxKLElBQUFnUyxTQUFBLFNBQUF3WixHQUNBeHJCLEdBQUF5QixLQUFBMnBCLEVBQUEsU0FBQXhxQixFQUFBNnFCLEdBR0EsR0FBQTVpQixHQUFBN0ksR0FBQVUsV0FBQTZxQixFQUFBRSxFQUFBLE1BQUFGLEVBQUFFLEVBQUEsR0FLQTFaLEdBQUEwWixFQUFBLElBQUEsV0FDQSxHQUFBQyxHQUFBN2lCLEdBQUFBLEVBQUFqRyxNQUFBNUQsS0FBQWtLLFVBQ0F3aUIsSUFBQTFyQixHQUFBVSxXQUFBZ3JCLEVBQUFscEIsU0FDQWtwQixFQUFBbHBCLFVBQ0F3USxTQUFBd1ksRUFBQUcsUUFDQWxwQixLQUFBK29CLEVBQUFwcEIsU0FDQU0sS0FBQThvQixFQUFBbnBCLFFBRUFtcEIsRUFBQUMsRUFBQSxHQUFBLFFBQ0F6c0IsS0FDQTZKLEdBQUE2aUIsR0FBQXhpQixlQUtBcWlCLEVBQUEsT0FDQS9vQixXQUVBRyxLQUFBLFNBQUFpcEIsRUFBQUMsRUFBQUMsR0FFQSxRQUFBMXBCLEdBQUEycEIsRUFBQWhhLEVBQUE0SixFQUFBcVEsR0FDQSxNQUFBLFlBQ0EsR0FBQUMsR0FBQWp0QixLQUNBNkwsRUFBQTNCLFVBQ0FnakIsRUFBQSxXQUNBLEdBQUFSLEdBQUEvb0IsQ0FLQSxNQUFBb3BCLEVBQUFJLEdBQUEsQ0FRQSxJQUpBVCxFQUFBL1AsRUFBQS9ZLE1BQUFxcEIsRUFBQXBoQixNQUlBa0gsRUFBQXZQLFVBQ0EsS0FBQSxJQUFBNHBCLFdBQUEsMkJBT0F6cEIsR0FBQStvQixJQUtBLGdCQUFBQSxJQUNBLGtCQUFBQSxLQUNBQSxFQUFBL29CLEtBR0EzQyxHQUFBVSxXQUFBaUMsR0FHQXFwQixFQUNBcnBCLEVBQUE5QixLQUNBNnFCLEVBQ0F0cEIsRUFBQStwQixFQUFBcGEsRUFBQWpRLEVBQUFrcUIsR0FDQTVwQixFQUFBK3BCLEVBQUFwYSxFQUFBL1AsRUFBQWdxQixLQU9BRyxJQUVBeHBCLEVBQUE5QixLQUNBNnFCLEVBQ0F0cEIsRUFBQStwQixFQUFBcGEsRUFBQWpRLEVBQUFrcUIsR0FDQTVwQixFQUFBK3BCLEVBQUFwYSxFQUFBL1AsRUFBQWdxQixHQUNBNXBCLEVBQUErcEIsRUFBQXBhLEVBQUFqUSxFQUNBaVEsRUFBQVMsZUFTQW1KLElBQUE3WixJQUNBbXFCLE1BQUFwcEIsR0FDQWdJLEdBQUE2Z0IsS0FLQU0sR0FBQWphLEVBQUFVLGFBQUF3WixFQUFBcGhCLE1BS0F3aEIsRUFBQUwsRUFDQUUsRUFDQSxXQUNBLElBQ0FBLElBQ0EsTUFBQW5vQixHQUVBL0QsR0FBQWdTLFNBQUFzYSxlQUNBdHNCLEdBQUFnUyxTQUFBc2EsY0FBQXZvQixFQUNBc29CLEVBQUFFLFlBTUFSLEVBQUEsR0FBQUksSUFJQXhRLElBQUEzWixJQUNBaXFCLE1BQUFwcEIsR0FDQWdJLEdBQUE5RyxJQUdBZ08sRUFBQWUsV0FBQW1aLEVBQUFwaEIsS0FTQWtoQixHQUNBTSxLQUtBcnNCLEdBQUFnUyxTQUFBd2EsZUFDQUgsRUFBQUUsV0FBQXZzQixHQUFBZ1MsU0FBQXdhLGdCQUVBenRCLEVBQUE2UCxXQUFBeWQsS0F6SEEsR0FBQUYsR0FBQSxDQThIQSxPQUFBbnNCLElBQUFnUyxTQUFBLFNBQUF3WixHQUdBSixFQUFBLEdBQUEsR0FBQWhpQixJQUNBaEgsRUFDQSxFQUNBb3BCLEVBQ0F4ckIsR0FBQVUsV0FBQW9yQixHQUNBQSxFQUNBaHFCLEVBQ0EwcEIsRUFBQWhaLGFBS0E0WSxFQUFBLEdBQUEsR0FBQWhpQixJQUNBaEgsRUFDQSxFQUNBb3BCLEVBQ0F4ckIsR0FBQVUsV0FBQWtyQixHQUNBQSxFQUNBOXBCLElBS0FzcEIsRUFBQSxHQUFBLEdBQUFoaUIsSUFDQWhILEVBQ0EsRUFDQW9wQixFQUNBeHJCLEdBQUFVLFdBQUFtckIsR0FDQUEsRUFDQTdwQixNQUdBUSxXQUtBQSxRQUFBLFNBQUEzQyxHQUNBLE1BQUEsT0FBQUEsRUFBQUcsR0FBQXNLLE9BQUF6SyxFQUFBMkMsR0FBQUEsSUFHQXVQLElBMkRBLE9BeERBL1IsSUFBQXlCLEtBQUEycEIsRUFBQSxTQUFBeHFCLEVBQUE2cUIsR0FDQSxHQUFBM0ssR0FBQTJLLEVBQUEsR0FDQWdCLEVBQUFoQixFQUFBLEVBS0FqcEIsR0FBQWlwQixFQUFBLElBQUEzSyxFQUFBMVgsSUFHQXFqQixHQUNBM0wsRUFBQTFYLElBQ0EsV0FJQWlOLEVBQUFvVyxHQUtBckIsRUFBQSxFQUFBeHFCLEdBQUEsR0FBQXFxQixRQUdBRyxFQUFBLEdBQUEsR0FBQUYsTUFPQXBLLEVBQUExWCxJQUFBcWlCLEVBQUEsR0FBQTVhLE1BS0FrQixFQUFBMFosRUFBQSxJQUFBLFdBRUEsTUFEQTFaLEdBQUEwWixFQUFBLEdBQUEsUUFBQXpzQixPQUFBK1MsTUFBQWxQLEdBQUE3RCxLQUFBa0ssV0FDQWxLLE1BTUErUyxFQUFBMFosRUFBQSxHQUFBLFFBQUEzSyxFQUFBcUssV0FJQTNvQixFQUFBQSxRQUFBdVAsR0FHQThCLEdBQ0FBLEVBQUFoVCxLQUFBa1IsRUFBQUEsR0FJQUEsR0FJQTJhLEtBQUEsU0FBQUMsR0FDQSxHQUdBemEsR0FBQWhKLFVBQUFwSixPQUdBYyxFQUFBc1IsRUFHQTBhLEVBQUFyYixNQUFBM1EsR0FDQWlzQixFQUFBL3BCLEdBQUFqQyxLQUFBcUksV0FHQTRqQixFQUFBOXNCLEdBQUFnUyxXQUdBK2EsRUFBQSxTQUFBbnNCLEdBQ0EsTUFBQSxVQUFBdUIsR0FDQXlxQixFQUFBaHNCLEdBQUE1QixLQUNBNnRCLEVBQUFqc0IsR0FBQXNJLFVBQUFwSixPQUFBLEVBQUFnRCxHQUFBakMsS0FBQXFJLFdBQUEvRyxJQUNBK1AsR0FDQTRhLEVBQUFyYSxZQUFBbWEsRUFBQUMsSUFNQSxJQUFBM2EsR0FBQSxJQUNBaFEsRUFBQXlxQixFQUFBRyxFQUFBcnFCLEtBQUFzcUIsRUFBQW5zQixJQUFBd0IsUUFBQTBxQixFQUFBenFCLFFBQ0E2UCxHQUdBLFlBQUE0YSxFQUFBelcsU0FDQXJXLEdBQUFVLFdBQUFtc0IsRUFBQWpzQixJQUFBaXNCLEVBQUFqc0IsR0FBQStCLE9BRUEsTUFBQW1xQixHQUFBbnFCLE1BS0EsTUFBQS9CLEtBQ0FzQixFQUFBMnFCLEVBQUFqc0IsR0FBQW1zQixFQUFBbnNCLEdBQUFrc0IsRUFBQXpxQixPQUdBLE9BQUF5cUIsR0FBQXRxQixZQU9BLElBQUF3cUIsSUFBQSx3REFFQWh0QixJQUFBZ1MsU0FBQXNhLGNBQUEsU0FBQWhXLEVBQUEyVyxHQUlBbHVCLEVBQUFtdUIsU0FBQW51QixFQUFBbXVCLFFBQUFDLE1BQUE3VyxHQUFBMFcsR0FBQS9yQixLQUFBcVYsRUFBQWxXLE9BQ0FyQixFQUFBbXVCLFFBQUFDLEtBQUEsOEJBQUE3VyxFQUFBOFcsUUFBQTlXLEVBQUEyVyxNQUFBQSxJQU9BanRCLEdBQUFxdEIsZUFBQSxTQUFBL1csR0FDQXZYLEVBQUE2UCxXQUFBLFdBQ0EsS0FBQTBILEtBUUEsSUFBQWdYLElBQUF0dEIsR0FBQWdTLFVBRUFoUyxJQUFBNkksR0FBQTVGLE1BQUEsU0FBQTRGLEdBWUEsTUFWQXlrQixJQUNBM3FCLEtBQUFrRyxHQUtBd2lCLE1BQUEsU0FBQS9VLEdBQ0F0VyxHQUFBcXRCLGVBQUEvVyxLQUdBdFgsTUFHQWdCLEdBQUFzSyxRQUdBK04sU0FBQSxFQUlBa1YsVUFBQSxFQUdBdHFCLE1BQUEsU0FBQXVxQixLQUdBLElBQUFBLElBQUF4dEIsR0FBQXV0QixVQUFBdnRCLEdBQUFxWSxXQUtBclksR0FBQXFZLFNBQUEsR0FHQSxJQUFBbVYsS0FBQXh0QixHQUFBdXRCLFVBQUEsR0FLQUQsR0FBQTdhLFlBQUE3VCxJQUFBb0IsU0FJQUEsR0FBQWlELE1BQUFOLEtBQUEycUIsR0FBQTNxQixLQWFBLGFBQUEvRCxHQUFBNnVCLFlBQ0EsWUFBQTd1QixHQUFBNnVCLGFBQUE3dUIsR0FBQXVrQixnQkFBQXVLLFNBR0EzdUIsRUFBQTZQLFdBQUE1TyxHQUFBaUQsUUFLQXJFLEdBQUE0a0IsaUJBQUEsbUJBQUF6Z0IsR0FHQWhFLEVBQUF5a0IsaUJBQUEsT0FBQXpnQixHQVFBLElBQUFxSCxJQUFBLFNBQUEzRCxFQUFBb0MsRUFBQWxGLEVBQUF4QixFQUFBd3JCLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQWp0QixHQUFBLEVBQ0FrWCxFQUFBclIsRUFBQTNHLE9BQ0FndUIsRUFBQSxNQUFBbnFCLENBR0EsSUFBQSxXQUFBM0QsR0FBQUQsS0FBQTRELEdBQUEsQ0FDQWdxQixHQUFBLENBQ0EsS0FBQS9zQixJQUFBK0MsR0FDQXlHLEdBQUEzRCxFQUFBb0MsRUFBQWpJLEVBQUErQyxFQUFBL0MsSUFBQSxFQUFBZ3RCLEVBQUFDLE9BSUEsUUFBQWhyQixLQUFBVixJQUNBd3JCLEdBQUEsRUFFQTN0QixHQUFBVSxXQUFBeUIsS0FDQTByQixHQUFBLEdBR0FDLElBR0FELEdBQ0FobEIsRUFBQWhJLEtBQUE0RixFQUFBdEUsR0FDQTBHLEVBQUEsT0FJQWlsQixFQUFBamxCLEVBQ0FBLEVBQUEsU0FBQTFJLEVBQUF3RCxFQUFBeEIsR0FDQSxNQUFBMnJCLEdBQUFqdEIsS0FBQWIsR0FBQUcsR0FBQWdDLE1BS0EwRyxHQUNBLEtBQUFqSSxFQUFBa1gsRUFBQWxYLElBQ0FpSSxFQUNBcEMsRUFBQTdGLEdBQUErQyxFQUFBa3FCLEVBQ0ExckIsRUFDQUEsRUFBQXRCLEtBQUE0RixFQUFBN0YsR0FBQUEsRUFBQWlJLEVBQUFwQyxFQUFBN0YsR0FBQStDLElBTUEsT0FBQWdxQixHQUNBbG5CLEVBSUFxbkIsRUFDQWpsQixFQUFBaEksS0FBQTRGLEdBR0FxUixFQUFBalAsRUFBQXBDLEVBQUEsR0FBQTlDLEdBQUFpcUIsR0FFQUcsR0FBQSxTQUFBQyxHQVFBLE1BQUEsS0FBQUEsRUFBQWx0QixVQUFBLElBQUFrdEIsRUFBQWx0QixZQUFBa3RCLEVBQUFsdEIsU0FVQW9DLEdBQUFFLElBQUEsRUFFQUYsRUFBQW9MLFdBRUE2TSxNQUFBLFNBQUE2UyxHQUdBLEdBQUE3ckIsR0FBQTZyQixFQUFBaHZCLEtBQUFtRSxRQTRCQSxPQXpCQWhCLEtBQ0FBLEtBS0E0ckIsR0FBQUMsS0FJQUEsRUFBQWx0QixTQUNBa3RCLEVBQUFodkIsS0FBQW1FLFNBQUFoQixFQU1Bc1UsT0FBQXdYLGVBQUFELEVBQUFodkIsS0FBQW1FLFNBQ0FoQixNQUFBQSxFQUNBK3JCLGNBQUEsTUFNQS9yQixHQUVBOEIsSUFBQSxTQUFBK3BCLEVBQUExcUIsRUFBQW5CLEdBQ0EsR0FBQWdDLEdBQ0FnWCxFQUFBbmMsS0FBQW1jLE1BQUE2UyxFQUlBLElBQUEsZ0JBQUExcUIsR0FDQTZYLEVBQUFuYixHQUFBc1IsVUFBQWhPLElBQUFuQixNQU1BLEtBQUFnQyxJQUFBYixHQUNBNlgsRUFBQW5iLEdBQUFzUixVQUFBbk4sSUFBQWIsRUFBQWEsRUFHQSxPQUFBZ1gsSUFFQXBWLElBQUEsU0FBQWlvQixFQUFBcnFCLEdBQ0EsV0FBQWQsS0FBQWMsRUFDQTNFLEtBQUFtYyxNQUFBNlMsR0FHQUEsRUFBQWh2QixLQUFBbUUsVUFBQTZxQixFQUFBaHZCLEtBQUFtRSxTQUFBbkQsR0FBQXNSLFVBQUEzTixLQUVBeUcsT0FBQSxTQUFBNGpCLEVBQUFycUIsRUFBQXhCLEdBYUEsV0FBQVUsS0FBQWMsR0FDQUEsR0FBQSxnQkFBQUEsUUFBQWQsS0FBQVYsRUFFQW5ELEtBQUErRyxJQUFBaW9CLEVBQUFycUIsSUFTQTNFLEtBQUFpRixJQUFBK3BCLEVBQUFycUIsRUFBQXhCLE9BSUFVLEtBQUFWLEVBQUFBLEVBQUF3QixJQUVBbUksT0FBQSxTQUFBa2lCLEVBQUFycUIsR0FDQSxHQUFBL0MsR0FDQXVhLEVBQUE2UyxFQUFBaHZCLEtBQUFtRSxRQUVBLFFBQUFOLEtBQUFzWSxFQUFBLENBSUEsT0FBQXRZLEtBQUFjLEVBQUEsQ0FHQTROLE1BQUFDLFFBQUE3TixHQUlBQSxFQUFBQSxFQUFBK0gsSUFBQTFMLEdBQUFzUixZQUVBM04sRUFBQTNELEdBQUFzUixVQUFBM04sR0FJQUEsRUFBQUEsSUFBQXdYLElBQ0F4WCxHQUNBQSxFQUFBakMsTUFBQUMsU0FHQWYsRUFBQStDLEVBQUE3RCxNQUVBLE1BQUFjLFdBQ0F1YSxHQUFBeFgsRUFBQS9DLFNBS0FpQyxLQUFBYyxHQUFBM0QsR0FBQWdSLGNBQUFtSyxNQU1BNlMsRUFBQWx0QixTQUNBa3RCLEVBQUFodkIsS0FBQW1FLGFBQUFOLFNBRUFtckIsR0FBQWh2QixLQUFBbUUsWUFJQWdILFFBQUEsU0FBQTZqQixHQUNBLEdBQUE3UyxHQUFBNlMsRUFBQWh2QixLQUFBbUUsUUFDQSxZQUFBTixLQUFBc1ksSUFBQW5iLEdBQUFnUixjQUFBbUssSUFHQSxJQUFBclYsSUFBQSxHQUFBNUMsR0FFQWMsR0FBQSxHQUFBZCxHQWNBSyxHQUFBLGdDQUNBTSxHQUFBLFFBa0RBN0QsSUFBQXNLLFFBQ0FILFFBQUEsU0FBQWhLLEdBQ0EsTUFBQTZELElBQUFtRyxRQUFBaEssSUFBQTJGLEdBQUFxRSxRQUFBaEssSUFHQW1ELEtBQUEsU0FBQW5ELEVBQUFDLEVBQUFrRCxHQUNBLE1BQUFVLElBQUFvRyxPQUFBakssRUFBQUMsRUFBQWtELElBR0E2cUIsV0FBQSxTQUFBaHVCLEVBQUFDLEdBQ0E0RCxHQUFBOEgsT0FBQTNMLEVBQUFDLElBS0FndUIsTUFBQSxTQUFBanVCLEVBQUFDLEVBQUFrRCxHQUNBLE1BQUF3QyxJQUFBc0UsT0FBQWpLLEVBQUFDLEVBQUFrRCxJQUdBK3FCLFlBQUEsU0FBQWx1QixFQUFBQyxHQUNBMEYsR0FBQWdHLE9BQUEzTCxFQUFBQyxNQUlBSixHQUFBNkksR0FBQXlCLFFBQ0FoSCxLQUFBLFNBQUFLLEVBQUF4QixHQUNBLEdBQUF2QixHQUFBUixFQUFBa0QsRUFDQW5ELEVBQUFuQixLQUFBLEdBQ0FzUSxFQUFBblAsR0FBQUEsRUFBQStnQixVQUdBLFFBQUFyZSxLQUFBYyxFQUFBLENBQ0EsR0FBQTNFLEtBQUFjLFNBQ0F3RCxFQUFBVSxHQUFBK0IsSUFBQTVGLEdBRUEsSUFBQUEsRUFBQVcsV0FBQWdGLEdBQUFDLElBQUE1RixFQUFBLGlCQUFBLENBRUEsSUFEQVMsRUFBQTBPLEVBQUF4UCxPQUNBYyxLQUlBME8sRUFBQTFPLEtBQ0FSLEVBQUFrUCxFQUFBMU8sR0FBQVIsS0FDQSxJQUFBQSxFQUFBVyxRQUFBLFdBQ0FYLEVBQUFKLEdBQUFzUixVQUFBbFIsRUFBQTBDLE1BQUEsSUFDQVksRUFBQXZELEVBQUFDLEVBQUFrRCxFQUFBbEQsS0FJQTBGLElBQUE3QixJQUFBOUQsRUFBQSxnQkFBQSxHQUlBLE1BQUFtRCxHQUlBLE1BQUEsZ0JBQUFLLEdBQ0EzRSxLQUFBeUMsS0FBQSxXQUNBdUMsR0FBQUMsSUFBQWpGLEtBQUEyRSxLQUlBeUcsR0FBQXBMLEtBQUEsU0FBQW1ELEdBQ0EsR0FBQW1CLEVBT0EsSUFBQW5ELE9BQUEwQyxLQUFBVixFQUFBLENBS0EsT0FBQVUsTUFEQVMsRUFBQVUsR0FBQStCLElBQUE1RixFQUFBd0QsSUFFQSxNQUFBTCxFQU1BLFFBQUFULE1BREFTLEVBQUFJLEVBQUF2RCxFQUFBd0QsSUFFQSxNQUFBTCxPQVFBdEUsTUFBQXlDLEtBQUEsV0FHQXVDLEdBQUFDLElBQUFqRixLQUFBMkUsRUFBQXhCLE1BRUEsS0FBQUEsRUFBQStHLFVBQUFwSixPQUFBLEVBQUEsTUFBQSxJQUdBcXVCLFdBQUEsU0FBQXhxQixHQUNBLE1BQUEzRSxNQUFBeUMsS0FBQSxXQUNBdUMsR0FBQThILE9BQUE5TSxLQUFBMkUsUUFNQTNELEdBQUFzSyxRQUNBbUcsTUFBQSxTQUFBdFEsRUFBQUosRUFBQXVELEdBQ0EsR0FBQW1OLEVBRUEsSUFBQXRRLEVBWUEsTUFYQUosSUFBQUEsR0FBQSxNQUFBLFFBQ0EwUSxFQUFBM0ssR0FBQUMsSUFBQTVGLEVBQUFKLEdBR0F1RCxLQUNBbU4sR0FBQWMsTUFBQUMsUUFBQWxPLEdBQ0FtTixFQUFBM0ssR0FBQXNFLE9BQUFqSyxFQUFBSixFQUFBQyxHQUFBK1ksVUFBQXpWLElBRUFtTixFQUFBeEksS0FBQTNFLElBR0FtTixPQUlBNmQsUUFBQSxTQUFBbnVCLEVBQUFKLEdBQ0FBLEVBQUFBLEdBQUEsSUFFQSxJQUFBMFEsR0FBQXpRLEdBQUF5USxNQUFBdFEsRUFBQUosR0FDQXd1QixFQUFBOWQsRUFBQTNRLE9BQ0ErSSxFQUFBNEgsRUFBQTZFLFFBQ0FyRixFQUFBalEsR0FBQTBRLFlBQUF2USxFQUFBSixHQUNBa2QsRUFBQSxXQUNBamQsR0FBQXN1QixRQUFBbnVCLEVBQUFKLEdBSUEsZ0JBQUE4SSxJQUNBQSxFQUFBNEgsRUFBQTZFLFFBQ0FpWixLQUdBMWxCLElBSUEsT0FBQTlJLEdBQ0EwUSxFQUFBdUQsUUFBQSxvQkFJQS9ELEdBQUEyQyxLQUNBL0osRUFBQWhJLEtBQUFWLEVBQUE4YyxFQUFBaE4sS0FHQXNlLEdBQUF0ZSxHQUNBQSxFQUFBVyxNQUFBQyxRQUtBSCxZQUFBLFNBQUF2USxFQUFBSixHQUNBLEdBQUE0RCxHQUFBNUQsRUFBQSxZQUNBLE9BQUErRixJQUFBQyxJQUFBNUYsRUFBQXdELElBQUFtQyxHQUFBc0UsT0FBQWpLLEVBQUF3RCxHQUNBaU4sTUFBQTVRLEdBQUF5cUIsVUFBQSxlQUFBcmhCLElBQUEsV0FDQXRELEdBQUFnRyxPQUFBM0wsR0FBQUosRUFBQSxRQUFBNEQsV0FNQTNELEdBQUE2SSxHQUFBeUIsUUFDQW1HLE1BQUEsU0FBQTFRLEVBQUF1RCxHQUNBLEdBQUFrckIsR0FBQSxDQVFBLE9BTkEsZ0JBQUF6dUIsS0FDQXVELEVBQUF2RCxFQUNBQSxFQUFBLEtBQ0F5dUIsS0FHQXRsQixVQUFBcEosT0FBQTB1QixFQUNBeHVCLEdBQUF5USxNQUFBelIsS0FBQSxHQUFBZSxPQUdBOEMsS0FBQVMsRUFDQXRFLEtBQ0FBLEtBQUF5QyxLQUFBLFdBQ0EsR0FBQWdQLEdBQUF6USxHQUFBeVEsTUFBQXpSLEtBQUFlLEVBQUF1RCxFQUdBdEQsSUFBQTBRLFlBQUExUixLQUFBZSxHQUVBLE9BQUFBLEdBQUEsZUFBQTBRLEVBQUEsSUFDQXpRLEdBQUFzdUIsUUFBQXR2QixLQUFBZSxNQUlBdXVCLFFBQUEsU0FBQXZ1QixHQUNBLE1BQUFmLE1BQUF5QyxLQUFBLFdBQ0F6QixHQUFBc3VCLFFBQUF0dkIsS0FBQWUsTUFHQTB1QixXQUFBLFNBQUExdUIsR0FDQSxNQUFBZixNQUFBeVIsTUFBQTFRLEdBQUEsVUFLQXlDLFFBQUEsU0FBQXpDLEVBQUFGLEdBQ0EsR0FBQW1ILEdBQ0EwbkIsRUFBQSxFQUNBQyxFQUFBM3VCLEdBQUFnUyxXQUNBelIsRUFBQXZCLEtBQ0E0QixFQUFBNUIsS0FBQWMsT0FDQXNDLEVBQUEsYUFDQXNzQixHQUNBQyxFQUFBbGMsWUFBQWxTLEdBQUFBLElBVUEsS0FOQSxnQkFBQVIsS0FDQUYsRUFBQUUsRUFDQUEsTUFBQThDLElBRUE5QyxFQUFBQSxHQUFBLEtBRUFhLE1BQ0FvRyxFQUFBbEIsR0FBQUMsSUFBQXhGLEVBQUFLLEdBQUFiLEVBQUEsZ0JBQ0FpSCxFQUFBNEosUUFDQThkLElBQ0ExbkIsRUFBQTRKLE1BQUF4SCxJQUFBaEgsR0FJQSxPQURBQSxLQUNBdXNCLEVBQUFuc0IsUUFBQTNDLEtBR0EsSUFBQSt1QixJQUFBLHNDQUFBQyxPQUVBOXBCLEdBQUEsR0FBQXNjLFFBQUEsaUJBQUF1TixHQUFBLGNBQUEsS0FHQTdnQixJQUFBLE1BQUEsUUFBQSxTQUFBLFFBRUEvSCxHQUFBLFNBQUE3RixFQUFBc2IsR0FPQSxNQUhBdGIsR0FBQXNiLEdBQUF0YixFQUdBLFNBQUFBLEVBQUE4RSxNQUFBTSxTQUNBLEtBQUFwRixFQUFBOEUsTUFBQU0sU0FNQXZGLEdBQUFrSCxTQUFBL0csRUFBQW1GLGNBQUFuRixJQUVBLFNBQUFILEdBQUEwRSxJQUFBdkUsRUFBQSxZQUdBMnVCLEdBQUEsU0FBQTN1QixFQUFBb0IsRUFBQXVKLEVBQUFELEdBQ0EsR0FBQXpFLEdBQUFoRyxFQUNBMnVCLElBR0EsS0FBQTN1QixJQUFBbUIsR0FDQXd0QixFQUFBM3VCLEdBQUFELEVBQUE4RSxNQUFBN0UsR0FDQUQsRUFBQThFLE1BQUE3RSxHQUFBbUIsRUFBQW5CLEVBR0FnRyxHQUFBMEUsRUFBQWxJLE1BQUF6QyxFQUFBMEssTUFHQSxLQUFBekssSUFBQW1CLEdBQ0FwQixFQUFBOEUsTUFBQTdFLEdBQUEydUIsRUFBQTN1QixFQUdBLE9BQUFnRyxJQXFFQVosS0F5RUF4RixJQUFBNkksR0FBQXlCLFFBQ0EzRSxLQUFBLFdBQ0EsTUFBQUQsR0FBQTFHLE1BQUEsSUFFQWd3QixLQUFBLFdBQ0EsTUFBQXRwQixHQUFBMUcsT0FFQWdSLE9BQUEsU0FBQXFHLEdBQ0EsTUFBQSxpQkFBQUEsR0FDQUEsRUFBQXJYLEtBQUEyRyxPQUFBM0csS0FBQWd3QixPQUdBaHdCLEtBQUF5QyxLQUFBLFdBQ0F1RSxHQUFBaEgsTUFDQWdCLEdBQUFoQixNQUFBMkcsT0FFQTNGLEdBQUFoQixNQUFBZ3dCLFdBS0EsSUFBQXhrQixJQUFBLHdCQUVBaEQsR0FBQSxpQ0FFQVksR0FBQSw0QkFLQVgsSUFHQXduQixRQUFBLEVBQUEsK0JBQUEsYUFLQUMsT0FBQSxFQUFBLFVBQUEsWUFDQUMsS0FBQSxFQUFBLG9CQUFBLHVCQUNBQyxJQUFBLEVBQUEsaUJBQUEsb0JBQ0FDLElBQUEsRUFBQSxxQkFBQSx5QkFFQTNuQixVQUFBLEVBQUEsR0FBQSxJQUlBRCxJQUFBNm5CLFNBQUE3bkIsR0FBQXduQixPQUVBeG5CLEdBQUE4bkIsTUFBQTluQixHQUFBK25CLE1BQUEvbkIsR0FBQWdvQixTQUFBaG9CLEdBQUFpb0IsUUFBQWpvQixHQUFBeW5CLE1BQ0F6bkIsR0FBQWtvQixHQUFBbG9CLEdBQUE0bkIsRUEwQ0EsSUFBQTluQixJQUFBLGFBNEZBLFdBQ0EsR0FBQUgsR0FBQXhJLEdBQUF5SSx5QkFDQXVvQixFQUFBeG9CLEVBQUEzSCxZQUFBYixHQUFBVSxjQUFBLFFBQ0Ewa0IsRUFBQXBsQixHQUFBVSxjQUFBLFFBTUEwa0IsR0FBQXJKLGFBQUEsT0FBQSxTQUNBcUosRUFBQXJKLGFBQUEsVUFBQSxXQUNBcUosRUFBQXJKLGFBQUEsT0FBQSxLQUVBaVYsRUFBQW53QixZQUFBdWtCLEdBSUE1WSxHQUFBQyxXQUFBdWtCLEVBQUFDLFdBQUEsR0FBQUEsV0FBQSxHQUFBaG9CLFVBQUE0QyxRQUlBbWxCLEVBQUFqb0IsVUFBQSx5QkFDQXlELEdBQUEwa0IsaUJBQUFGLEVBQUFDLFdBQUEsR0FBQWhvQixVQUFBNkMsZUFFQSxJQUFBeVksSUFBQXZrQixHQUFBdWtCLGdCQUtBNE0sR0FBQSxPQUNBQyxHQUFBLGlEQUNBQyxHQUFBLHFCQW1GQWp3QixJQUFBZ0osT0FFQXhLLFVBRUE0SyxJQUFBLFNBQUFqSixFQUFBd0ksRUFBQWdULEVBQUFyWSxFQUFBc0YsR0FFQSxHQUFBc25CLEdBQUFDLEVBQUFucEIsRUFDQWtELEVBQUFrbUIsRUFBQUMsRUFDQXJFLEVBQUFzRSxFQUFBdndCLEVBQUF3d0IsRUFBQUMsRUFDQUMsRUFBQTNxQixHQUFBQyxJQUFBNUYsRUFHQSxJQUFBc3dCLEVBdUNBLElBbENBOVUsRUFBQUEsVUFDQXVVLEVBQUF2VSxFQUNBQSxFQUFBdVUsRUFBQXZVLFFBQ0EvUyxFQUFBc25CLEVBQUF0bkIsVUFLQUEsR0FDQTVJLEdBQUErZixLQUFBa0UsZ0JBQUFkLEdBQUF2YSxHQUlBK1MsRUFBQXhTLE9BQ0F3UyxFQUFBeFMsS0FBQW5KLEdBQUFtSixTQUlBZSxFQUFBdW1CLEVBQUF2bUIsVUFDQUEsRUFBQXVtQixFQUFBdm1CLFlBRUFpbUIsRUFBQU0sRUFBQXBtQixVQUNBOGxCLEVBQUFNLEVBQUFwbUIsT0FBQSxTQUFBdEcsR0FJQSxXQUFBLEtBQUEvRCxJQUFBQSxHQUFBZ0osTUFBQTBuQixZQUFBM3NCLEVBQUFoRSxLQUNBQyxHQUFBZ0osTUFBQTJuQixTQUFBL3RCLE1BQUF6QyxFQUFBK0ksZUFBQXJHLEtBS0E4RixHQUFBQSxHQUFBLElBQUFqSCxNQUFBQyxNQUFBLElBQ0F5dUIsRUFBQXpuQixFQUFBN0ksT0FDQXN3QixLQUNBcHBCLEVBQUFpcEIsR0FBQWpyQixLQUFBMkQsRUFBQXluQixRQUNBcndCLEVBQUF5d0IsRUFBQXhwQixFQUFBLEdBQ0F1cEIsR0FBQXZwQixFQUFBLElBQUEsSUFBQW1QLE1BQUEsS0FBQTRCLE9BR0FoWSxJQUtBaXNCLEVBQUFoc0IsR0FBQWdKLE1BQUFnakIsUUFBQWpzQixPQUdBQSxHQUFBNkksRUFBQW9qQixFQUFBNEUsYUFBQTVFLEVBQUE2RSxXQUFBOXdCLEVBR0Fpc0IsRUFBQWhzQixHQUFBZ0osTUFBQWdqQixRQUFBanNCLE9BR0Fzd0IsRUFBQXJ3QixHQUFBc0ssUUFDQXZLLEtBQUFBLEVBQ0F5d0IsU0FBQUEsRUFDQWx0QixLQUFBQSxFQUNBcVksUUFBQUEsRUFDQXhTLEtBQUF3UyxFQUFBeFMsS0FDQVAsU0FBQUEsRUFDQXVaLGFBQUF2WixHQUFBNUksR0FBQStrQixLQUFBcmpCLE1BQUF5Z0IsYUFBQWxoQixLQUFBMkgsR0FDQWtvQixVQUFBUCxFQUFBbmQsS0FBQSxNQUNBOGMsSUFHQUksRUFBQXBtQixFQUFBbkssTUFDQXV3QixFQUFBcG1CLEVBQUFuSyxNQUNBdXdCLEVBQUFTLGNBQUEsRUFHQS9FLEVBQUFnRixRQUNBLElBQUFoRixFQUFBZ0YsTUFBQW53QixLQUFBVixFQUFBbUQsRUFBQWl0QixFQUFBSixJQUVBaHdCLEVBQUFxakIsa0JBQ0FyakIsRUFBQXFqQixpQkFBQXpqQixFQUFBb3dCLElBS0FuRSxFQUFBNWlCLE1BQ0E0aUIsRUFBQTVpQixJQUFBdkksS0FBQVYsRUFBQWt3QixHQUVBQSxFQUFBMVUsUUFBQXhTLE9BQ0FrbkIsRUFBQTFVLFFBQUF4UyxLQUFBd1MsRUFBQXhTLE9BS0FQLEVBQ0EwbkIsRUFBQXRZLE9BQUFzWSxFQUFBUyxnQkFBQSxFQUFBVixHQUVBQyxFQUFBcm9CLEtBQUFvb0IsR0FJQXJ3QixHQUFBZ0osTUFBQXhLLE9BQUF1QixJQUFBLElBTUErTCxPQUFBLFNBQUEzTCxFQUFBd0ksRUFBQWdULEVBQUEvUyxFQUFBcW9CLEdBRUEsR0FBQTlwQixHQUFBK3BCLEVBQUFscUIsRUFDQWtELEVBQUFrbUIsRUFBQUMsRUFDQXJFLEVBQUFzRSxFQUFBdndCLEVBQUF3d0IsRUFBQUMsRUFDQUMsRUFBQTNxQixHQUFBcUUsUUFBQWhLLElBQUEyRixHQUFBQyxJQUFBNUYsRUFFQSxJQUFBc3dCLElBQUF2bUIsRUFBQXVtQixFQUFBdm1CLFFBQUEsQ0FPQSxJQUZBdkIsR0FBQUEsR0FBQSxJQUFBakgsTUFBQUMsTUFBQSxJQUNBeXVCLEVBQUF6bkIsRUFBQTdJLE9BQ0Fzd0IsS0FNQSxHQUxBcHBCLEVBQUFpcEIsR0FBQWpyQixLQUFBMkQsRUFBQXluQixRQUNBcndCLEVBQUF5d0IsRUFBQXhwQixFQUFBLEdBQ0F1cEIsR0FBQXZwQixFQUFBLElBQUEsSUFBQW1QLE1BQUEsS0FBQTRCLE9BR0FoWSxFQUFBLENBZUEsSUFSQWlzQixFQUFBaHNCLEdBQUFnSixNQUFBZ2pCLFFBQUFqc0IsT0FDQUEsR0FBQTZJLEVBQUFvakIsRUFBQTRFLGFBQUE1RSxFQUFBNkUsV0FBQTl3QixFQUNBdXdCLEVBQUFwbUIsRUFBQW5LLE9BQ0FpSCxFQUFBQSxFQUFBLElBQ0EsR0FBQXFhLFFBQUEsVUFBQWtQLEVBQUFuZCxLQUFBLGlCQUFBLFdBR0E4ZCxFQUFBL3BCLEVBQUFtcEIsRUFBQXh3QixPQUNBcUgsS0FDQWtwQixFQUFBQyxFQUFBbnBCLElBRUE4cEIsR0FBQVQsSUFBQUgsRUFBQUcsVUFDQTdVLEdBQUFBLEVBQUF4UyxPQUFBa25CLEVBQUFsbkIsTUFDQW5DLElBQUFBLEVBQUEvRixLQUFBb3ZCLEVBQUFTLFlBQ0Fsb0IsR0FBQUEsSUFBQXluQixFQUFBem5CLFdBQ0EsT0FBQUEsSUFBQXluQixFQUFBem5CLFlBQ0EwbkIsRUFBQXRZLE9BQUE3USxFQUFBLEdBRUFrcEIsRUFBQXpuQixVQUNBMG5CLEVBQUFTLGdCQUVBL0UsRUFBQWxnQixRQUNBa2dCLEVBQUFsZ0IsT0FBQWpMLEtBQUFWLEVBQUFrd0IsR0FPQWEsS0FBQVosRUFBQXh3QixTQUNBa3NCLEVBQUFtRixXQUNBLElBQUFuRixFQUFBbUYsU0FBQXR3QixLQUFBVixFQUFBb3dCLEVBQUFFLEVBQUFwbUIsU0FFQXJLLEdBQUFveEIsWUFBQWp4QixFQUFBSixFQUFBMHdCLEVBQUFwbUIsY0FHQUgsR0FBQW5LLFFBMUNBLEtBQUFBLElBQUFtSyxHQUNBbEssR0FBQWdKLE1BQUE4QyxPQUFBM0wsRUFBQUosRUFBQTRJLEVBQUF5bkIsR0FBQXpVLEVBQUEvUyxHQUFBLEVBOENBNUksSUFBQWdSLGNBQUE5RyxJQUNBcEUsR0FBQWdHLE9BQUEzTCxFQUFBLG1CQUlBd3dCLFNBQUEsU0FBQVUsR0FHQSxHQUVBendCLEdBQUF1RyxFQUFBZixFQUFBeWdCLEVBQUF3SixFQUFBaUIsRUFGQXRvQixFQUFBaEosR0FBQWdKLE1BQUF1b0IsSUFBQUYsR0FHQXhtQixFQUFBLEdBQUEwRyxPQUFBckksVUFBQXBKLFFBQ0F3d0IsR0FBQXhxQixHQUFBQyxJQUFBL0csS0FBQSxlQUFBZ0ssRUFBQWpKLFVBQ0Fpc0IsRUFBQWhzQixHQUFBZ0osTUFBQWdqQixRQUFBaGpCLEVBQUFqSixTQUtBLEtBRkE4SyxFQUFBLEdBQUE3QixFQUVBcEksRUFBQSxFQUFBQSxFQUFBc0ksVUFBQXBKLE9BQUFjLElBQ0FpSyxFQUFBakssR0FBQXNJLFVBQUF0SSxFQU1BLElBSEFvSSxFQUFBd29CLGVBQUF4eUIsTUFHQWd0QixFQUFBeUYsY0FBQSxJQUFBekYsRUFBQXlGLFlBQUE1d0IsS0FBQTdCLEtBQUFnSyxHQUFBLENBU0EsSUFKQXNvQixFQUFBdHhCLEdBQUFnSixNQUFBc25CLFNBQUF6dkIsS0FBQTdCLEtBQUFnSyxFQUFBc25CLEdBR0ExdkIsRUFBQSxHQUNBaW1CLEVBQUF5SyxFQUFBMXdCLFFBQUFvSSxFQUFBMG9CLHdCQUlBLElBSEExb0IsRUFBQTJvQixjQUFBOUssRUFBQTFtQixLQUVBZ0gsRUFBQSxHQUNBa3BCLEVBQUF4SixFQUFBeUosU0FBQW5wQixRQUNBNkIsRUFBQTRvQixpQ0FJQTVvQixFQUFBNm9CLGFBQUE3b0IsRUFBQTZvQixXQUFBNXdCLEtBQUFvdkIsRUFBQVMsYUFFQTluQixFQUFBcW5CLFVBQUFBLEVBQ0FybkIsRUFBQTFGLEtBQUErc0IsRUFBQS9zQixTQUtBVCxNQUhBdUQsSUFBQXBHLEdBQUFnSixNQUFBZ2pCLFFBQUFxRSxFQUFBRyxlQUFBbm1CLFFBQ0FnbUIsRUFBQTFVLFNBQUEvWSxNQUFBaWtCLEVBQUExbUIsS0FBQTBLLE1BR0EsS0FBQTdCLEVBQUE0SSxPQUFBeEwsS0FDQTRDLEVBQUE4b0IsaUJBQ0E5b0IsRUFBQStvQixtQkFZQSxPQUpBL0YsR0FBQWdHLGNBQ0FoRyxFQUFBZ0csYUFBQW54QixLQUFBN0IsS0FBQWdLLEdBR0FBLEVBQUE0SSxTQUdBMGUsU0FBQSxTQUFBdG5CLEVBQUFzbkIsR0FDQSxHQUFBMXZCLEdBQUF5dkIsRUFBQWxMLEVBQUE4TSxFQUFBQyxFQUNBWixLQUNBUCxFQUFBVCxFQUFBUyxjQUNBM3ZCLEVBQUE0SCxFQUFBMkwsTUFHQSxJQUFBb2MsR0FJQTN2QixFQUFBTixZQU9BLFVBQUFrSSxFQUFBakosTUFBQWlKLEVBQUE0ZSxRQUFBLEdBRUEsS0FBQXhtQixJQUFBcEMsS0FBQW9DLEVBQUFBLEVBQUExQixZQUFBVixLQUlBLEdBQUEsSUFBQW9DLEVBQUFOLFdBQUEsVUFBQWtJLEVBQUFqSixPQUFBLElBQUFxQixFQUFBZ2IsVUFBQSxDQUdBLElBRkE2VixLQUNBQyxLQUNBdHhCLEVBQUEsRUFBQUEsRUFBQW13QixFQUFBbndCLElBQ0F5dkIsRUFBQUMsRUFBQTF2QixHQUdBdWtCLEVBQUFrTCxFQUFBem5CLFNBQUEsUUFFQS9GLEtBQUFxdkIsRUFBQS9NLEtBQ0ErTSxFQUFBL00sR0FBQWtMLEVBQUFsTyxhQUNBbmlCLEdBQUFtbEIsRUFBQW5tQixNQUFBNkcsTUFBQXpFLElBQUEsRUFDQXBCLEdBQUErZixLQUFBb0YsRUFBQW5tQixLQUFBLE1BQUFvQyxJQUFBdEIsUUFFQW95QixFQUFBL00sSUFDQThNLEVBQUFocUIsS0FBQW9vQixFQUdBNEIsR0FBQW55QixRQUNBd3hCLEVBQUFycEIsTUFBQTlILEtBQUFpQixFQUFBa3ZCLFNBQUEyQixJQVlBLE1BTEE3d0IsR0FBQXBDLEtBQ0EreEIsRUFBQVQsRUFBQXh3QixRQUNBd3hCLEVBQUFycEIsTUFBQTlILEtBQUFpQixFQUFBa3ZCLFNBQUFBLEVBQUF4dEIsTUFBQWl1QixLQUdBTyxHQUdBYSxRQUFBLFNBQUEveEIsRUFBQWd5QixHQUNBM2IsT0FBQXdYLGVBQUFqdUIsR0FBQXF5QixNQUFBL2pCLFVBQUFsTyxHQUNBa3lCLFlBQUEsRUFDQXBFLGNBQUEsRUFFQW5vQixJQUFBL0YsR0FBQVUsV0FBQTB4QixHQUNBLFdBQ0EsR0FBQXB6QixLQUFBdXpCLGNBQ0EsTUFBQUgsR0FBQXB6QixLQUFBdXpCLGdCQUdBLFdBQ0EsR0FBQXZ6QixLQUFBdXpCLGNBQ0EsTUFBQXZ6QixNQUFBdXpCLGNBQUFueUIsSUFJQTZELElBQUEsU0FBQTlCLEdBQ0FzVSxPQUFBd1gsZUFBQWp2QixLQUFBb0IsR0FDQWt5QixZQUFBLEVBQ0FwRSxjQUFBLEVBQ0FzRSxVQUFBLEVBQ0Fyd0IsTUFBQUEsUUFNQW92QixJQUFBLFNBQUFnQixHQUNBLE1BQUFBLEdBQUF2eUIsR0FBQW1ELFNBQ0FvdkIsRUFDQSxHQUFBdnlCLElBQUFxeUIsTUFBQUUsSUFHQXZHLFNBQ0F5RyxNQUdBQyxVQUFBLEdBRUFyTCxPQUdBc0wsUUFBQSxXQUNBLEdBQUEzekIsT0FBQXVKLEtBQUF2SixLQUFBcW9CLE1BRUEsTUFEQXJvQixNQUFBcW9CLFNBQ0EsR0FHQXVKLGFBQUEsV0FFQWdDLE1BQ0FELFFBQUEsV0FDQSxHQUFBM3pCLE9BQUF1SixLQUFBdkosS0FBQTR6QixLQUVBLE1BREE1ekIsTUFBQTR6QixRQUNBLEdBR0FoQyxhQUFBLFlBRUFpQyxPQUdBRixRQUFBLFdBQ0EsR0FBQSxhQUFBM3pCLEtBQUFlLE1BQUFmLEtBQUE2ekIsT0FBQTN5QixFQUFBbEIsS0FBQSxTQUVBLE1BREFBLE1BQUE2ekIsU0FDQSxHQUtBbnJCLFNBQUEsU0FBQXNCLEdBQ0EsTUFBQTlJLEdBQUE4SSxFQUFBMkwsT0FBQSxPQUlBbWUsY0FDQWQsYUFBQSxTQUFBaHBCLE9BSUFuRyxLQUFBbUcsRUFBQTRJLFFBQUE1SSxFQUFBdXBCLGdCQUNBdnBCLEVBQUF1cEIsY0FBQVEsWUFBQS9wQixFQUFBNEksWUFPQTVSLEdBQUFveEIsWUFBQSxTQUFBanhCLEVBQUFKLEVBQUFzSyxHQUdBbEssRUFBQTZDLHFCQUNBN0MsRUFBQTZDLG9CQUFBakQsRUFBQXNLLElBSUFySyxHQUFBcXlCLE1BQUEsU0FBQXpvQixFQUFBa0csR0FHQSxLQUFBOVEsZUFBQWdCLElBQUFxeUIsT0FDQSxNQUFBLElBQUFyeUIsSUFBQXF5QixNQUFBem9CLEVBQUFrRyxFQUlBbEcsSUFBQUEsRUFBQTdKLE1BQ0FmLEtBQUF1ekIsY0FBQTNvQixFQUNBNUssS0FBQWUsS0FBQTZKLEVBQUE3SixLQUlBZixLQUFBZzBCLG1CQUFBcHBCLEVBQUFxcEIsc0JBQ0Fwd0IsS0FBQStHLEVBQUFxcEIsbUJBR0EsSUFBQXJwQixFQUFBbXBCLFlBQ0ExcUIsRUFDQUMsRUFLQXRKLEtBQUEyVixPQUFBL0ssRUFBQStLLFFBQUEsSUFBQS9LLEVBQUErSyxPQUFBN1QsU0FDQThJLEVBQUErSyxPQUFBalYsV0FDQWtLLEVBQUErSyxPQUVBM1YsS0FBQTJ5QixjQUFBL25CLEVBQUErbkIsY0FDQTN5QixLQUFBazBCLGNBQUF0cEIsRUFBQXNwQixlQUlBbDBCLEtBQUFlLEtBQUE2SixFQUlBa0csR0FDQTlQLEdBQUFzSyxPQUFBdEwsS0FBQThRLEdBSUE5USxLQUFBbTBCLFVBQUF2cEIsR0FBQUEsRUFBQXVwQixXQUFBbnpCLEdBQUFrUCxNQUdBbFEsS0FBQWdCLEdBQUFtRCxVQUFBLEdBS0FuRCxHQUFBcXlCLE1BQUEvakIsV0FDQWtKLFlBQUF4WCxHQUFBcXlCLE1BQ0FXLG1CQUFBMXFCLEVBQ0FvcEIscUJBQUFwcEIsRUFDQXNwQiw4QkFBQXRwQixFQUNBOHFCLGFBQUEsRUFFQXRCLGVBQUEsV0FDQSxHQUFBL3RCLEdBQUEvRSxLQUFBdXpCLGFBRUF2ekIsTUFBQWcwQixtQkFBQTNxQixFQUVBdEUsSUFBQS9FLEtBQUFvMEIsYUFDQXJ2QixFQUFBK3RCLGtCQUdBQyxnQkFBQSxXQUNBLEdBQUFodUIsR0FBQS9FLEtBQUF1ekIsYUFFQXZ6QixNQUFBMHlCLHFCQUFBcnBCLEVBRUF0RSxJQUFBL0UsS0FBQW8wQixhQUNBcnZCLEVBQUFndUIsbUJBR0FzQix5QkFBQSxXQUNBLEdBQUF0dkIsR0FBQS9FLEtBQUF1ekIsYUFFQXZ6QixNQUFBNHlCLDhCQUFBdnBCLEVBRUF0RSxJQUFBL0UsS0FBQW8wQixhQUNBcnZCLEVBQUFzdkIsMkJBR0FyMEIsS0FBQSt5QixvQkFLQS94QixHQUFBeUIsTUFDQTZ4QixRQUFBLEVBQ0FDLFNBQUEsRUFDQUMsWUFBQSxFQUNBQyxnQkFBQSxFQUNBQyxTQUFBLEVBQ0FDLFFBQUEsRUFDQUMsWUFBQSxFQUNBQyxTQUFBLEVBQ0FDLE9BQUEsRUFDQUMsT0FBQSxFQUNBQyxVQUFBLEVBQ0FDLE1BQUEsRUFDQUMsTUFBQSxFQUNBQyxVQUFBLEVBQ0F4d0IsS0FBQSxFQUNBeXdCLFNBQUEsRUFDQXhNLFFBQUEsRUFDQXlNLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxXQUFBLEVBQ0FDLGFBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLGVBQUEsRUFDQUMsV0FBQSxFQUNBQyxTQUFBLEVBRUEzbEIsTUFBQSxTQUFBckcsR0FDQSxHQUFBNGUsR0FBQTVlLEVBQUE0ZSxNQUdBLE9BQUEsT0FBQTVlLEVBQUFxRyxPQUFBMGdCLEdBQUE5dUIsS0FBQStILEVBQUFqSixNQUNBLE1BQUFpSixFQUFBbXJCLFNBQUFuckIsRUFBQW1yQixTQUFBbnJCLEVBQUFvckIsU0FJQXByQixFQUFBcUcsV0FBQXhNLEtBQUEra0IsR0FBQW9JLEdBQUEvdUIsS0FBQStILEVBQUFqSixNQUNBLEVBQUE2bkIsRUFDQSxFQUdBLEVBQUFBLEVBQ0EsRUFHQSxFQUFBQSxFQUNBLEVBR0EsRUFHQTVlLEVBQUFxRyxRQUVBclAsR0FBQWdKLE1BQUFtcEIsU0FVQW55QixHQUFBeUIsTUFDQXd6QixXQUFBLFlBQ0FDLFdBQUEsV0FDQUMsYUFBQSxjQUNBQyxhQUFBLGNBQ0EsU0FBQTdrQixFQUFBZ2hCLEdBQ0F2eEIsR0FBQWdKLE1BQUFnakIsUUFBQXpiLElBQ0FxZ0IsYUFBQVcsRUFDQVYsU0FBQVUsRUFFQWxuQixPQUFBLFNBQUFyQixHQUNBLEdBQUE1QyxHQUNBdU8sRUFBQTNWLEtBQ0FxMkIsRUFBQXJzQixFQUFBa3FCLGNBQ0E3QyxFQUFBcm5CLEVBQUFxbkIsU0FTQSxPQUxBZ0YsS0FBQUEsSUFBQTFnQixHQUFBM1UsR0FBQWtILFNBQUF5TixFQUFBMGdCLE1BQ0Fyc0IsRUFBQWpKLEtBQUFzd0IsRUFBQUcsU0FDQXBxQixFQUFBaXFCLEVBQUExVSxRQUFBL1ksTUFBQTVELEtBQUFrSyxXQUNBRixFQUFBakosS0FBQXd4QixHQUVBbnJCLE1BS0FwRyxHQUFBNkksR0FBQXlCLFFBRUE1QixHQUFBLFNBQUFDLEVBQUFDLEVBQUF0RixFQUFBdUYsR0FDQSxNQUFBSCxHQUFBMUosS0FBQTJKLEVBQUFDLEVBQUF0RixFQUFBdUYsSUFFQUMsSUFBQSxTQUFBSCxFQUFBQyxFQUFBdEYsRUFBQXVGLEdBQ0EsTUFBQUgsR0FBQTFKLEtBQUEySixFQUFBQyxFQUFBdEYsRUFBQXVGLEVBQUEsSUFFQUksSUFBQSxTQUFBTixFQUFBQyxFQUFBQyxHQUNBLEdBQUF3bkIsR0FBQXR3QixDQUNBLElBQUE0SSxHQUFBQSxFQUFBbXBCLGdCQUFBbnBCLEVBQUEwbkIsVUFXQSxNQVJBQSxHQUFBMW5CLEVBQUEwbkIsVUFDQXJ3QixHQUFBMkksRUFBQTZvQixnQkFBQXZvQixJQUNBb25CLEVBQUFTLFVBQ0FULEVBQUFHLFNBQUEsSUFBQUgsRUFBQVMsVUFDQVQsRUFBQUcsU0FDQUgsRUFBQXpuQixTQUNBeW5CLEVBQUExVSxTQUVBM2MsSUFFQSxJQUFBLGdCQUFBMkosR0FBQSxDQUdBLElBQUE1SSxJQUFBNEksR0FDQTNKLEtBQUFpSyxJQUFBbEosRUFBQTZJLEVBQUFELEVBQUE1SSxHQUVBLE9BQUFmLE1BV0EsT0FUQSxJQUFBNEosR0FBQSxrQkFBQUEsS0FHQUMsRUFBQUQsRUFDQUEsTUFBQS9GLEtBRUEsSUFBQWdHLElBQ0FBLEVBQUFQLEdBRUF0SixLQUFBeUMsS0FBQSxXQUNBekIsR0FBQWdKLE1BQUE4QyxPQUFBOU0sS0FBQTJKLEVBQUFFLEVBQUFELE9BTUEsSUFLQTBzQixJQUFBLDhGQU9BQyxHQUFBLHdCQUdBanFCLEdBQUEsb0NBQ0E3QixHQUFBLGNBQ0FvQyxHQUFBLDBDQTZMQTdMLElBQUFzSyxRQUNBMUMsY0FBQSxTQUFBNkQsR0FDQSxNQUFBQSxHQUFBN0gsUUFBQTB4QixHQUFBLGNBR0EzcEIsTUFBQSxTQUFBeEwsRUFBQXExQixFQUFBQyxHQUNBLEdBQUE3MEIsR0FBQStGLEVBQUErdUIsRUFBQUMsRUFDQWhxQixFQUFBeEwsRUFBQTB2QixXQUFBLEdBQ0ErRixFQUFBNTFCLEdBQUFrSCxTQUFBL0csRUFBQW1GLGNBQUFuRixFQUdBLE1BQUFpTCxHQUFBMGtCLGdCQUFBLElBQUEzdkIsRUFBQVcsVUFBQSxLQUFBWCxFQUFBVyxVQUNBZCxHQUFBZ3BCLFNBQUE3b0IsSUFNQSxJQUhBdzFCLEVBQUExdkIsRUFBQTBGLEdBQ0ErcEIsRUFBQXp2QixFQUFBOUYsR0FFQVMsRUFBQSxFQUFBK0YsRUFBQSt1QixFQUFBNTFCLE9BQUFjLEVBQUErRixFQUFBL0YsSUFDQTJKLEVBQUFtckIsRUFBQTkwQixHQUFBKzBCLEVBQUEvMEIsR0FLQSxJQUFBNDBCLEVBQ0EsR0FBQUMsRUFJQSxJQUhBQyxFQUFBQSxHQUFBenZCLEVBQUE5RixHQUNBdzFCLEVBQUFBLEdBQUExdkIsRUFBQTBGLEdBRUEvSyxFQUFBLEVBQUErRixFQUFBK3VCLEVBQUE1MUIsT0FBQWMsRUFBQStGLEVBQUEvRixJQUNBK0ksRUFBQStyQixFQUFBOTBCLEdBQUErMEIsRUFBQS8wQixRQUdBK0ksR0FBQXhKLEVBQUF3TCxFQVdBLE9BTkFncUIsR0FBQTF2QixFQUFBMEYsRUFBQSxVQUNBZ3FCLEVBQUE3MUIsT0FBQSxHQUNBMEcsRUFBQW12QixHQUFBQyxHQUFBM3ZCLEVBQUE5RixFQUFBLFdBSUF3TCxHQUdBSyxVQUFBLFNBQUF2RixHQUtBLElBSkEsR0FBQW5ELEdBQUFuRCxFQUFBSixFQUNBaXNCLEVBQUFoc0IsR0FBQWdKLE1BQUFnakIsUUFDQXByQixFQUFBLE1BRUFpQyxNQUFBMUMsRUFBQXNHLEVBQUE3RixJQUFBQSxJQUNBLEdBQUFtdEIsR0FBQTV0QixHQUFBLENBQ0EsR0FBQW1ELEVBQUFuRCxFQUFBMkYsR0FBQTNDLFNBQUEsQ0FDQSxHQUFBRyxFQUFBNEcsT0FDQSxJQUFBbkssSUFBQXVELEdBQUE0RyxPQUNBOGhCLEVBQUFqc0IsR0FDQUMsR0FBQWdKLE1BQUE4QyxPQUFBM0wsRUFBQUosR0FJQUMsR0FBQW94QixZQUFBanhCLEVBQUFKLEVBQUF1RCxFQUFBK0csT0FPQWxLLEdBQUEyRixHQUFBM0MsYUFBQU4sR0FFQTFDLEVBQUE2RCxHQUFBYixXQUlBaEQsRUFBQTZELEdBQUFiLGFBQUFOLFFBT0E3QyxHQUFBNkksR0FBQXlCLFFBQ0F1ckIsT0FBQSxTQUFBanRCLEdBQ0EsTUFBQWtELEdBQUE5TSxLQUFBNEosR0FBQSxJQUdBa0QsT0FBQSxTQUFBbEQsR0FDQSxNQUFBa0QsR0FBQTlNLEtBQUE0SixJQUdBckosS0FBQSxTQUFBNEMsR0FDQSxNQUFBaUksSUFBQXBMLEtBQUEsU0FBQW1ELEdBQ0EsV0FBQVUsS0FBQVYsRUFDQW5DLEdBQUFULEtBQUFQLE1BQ0FBLEtBQUE0UixRQUFBblAsS0FBQSxXQUNBLElBQUF6QyxLQUFBOEIsVUFBQSxLQUFBOUIsS0FBQThCLFVBQUEsSUFBQTlCLEtBQUE4QixXQUNBOUIsS0FBQWdKLFlBQUE3RixNQUdBLEtBQUFBLEVBQUErRyxVQUFBcEosU0FHQWcyQixPQUFBLFdBQ0EsTUFBQW5yQixHQUFBM0wsS0FBQWtLLFVBQUEsU0FBQS9JLEdBQ0EsR0FBQSxJQUFBbkIsS0FBQThCLFVBQUEsS0FBQTlCLEtBQUE4QixVQUFBLElBQUE5QixLQUFBOEIsU0FBQSxDQUNBdUksRUFBQXJLLEtBQUFtQixHQUNBVixZQUFBVSxPQUtBNDFCLFFBQUEsV0FDQSxNQUFBcHJCLEdBQUEzTCxLQUFBa0ssVUFBQSxTQUFBL0ksR0FDQSxHQUFBLElBQUFuQixLQUFBOEIsVUFBQSxLQUFBOUIsS0FBQThCLFVBQUEsSUFBQTlCLEtBQUE4QixTQUFBLENBQ0EsR0FBQTZULEdBQUF0TCxFQUFBckssS0FBQW1CLEVBQ0F3VSxHQUFBcWhCLGFBQUE3MUIsRUFBQXdVLEVBQUE1TSxnQkFLQWt1QixPQUFBLFdBQ0EsTUFBQXRyQixHQUFBM0wsS0FBQWtLLFVBQUEsU0FBQS9JLEdBQ0FuQixLQUFBVSxZQUNBVixLQUFBVSxXQUFBczJCLGFBQUE3MUIsRUFBQW5CLFNBS0FrM0IsTUFBQSxXQUNBLE1BQUF2ckIsR0FBQTNMLEtBQUFrSyxVQUFBLFNBQUEvSSxHQUNBbkIsS0FBQVUsWUFDQVYsS0FBQVUsV0FBQXMyQixhQUFBNzFCLEVBQUFuQixLQUFBa2QsZ0JBS0F0TCxNQUFBLFdBSUEsSUFIQSxHQUFBelEsR0FDQVMsRUFBQSxFQUVBLE9BQUFULEVBQUFuQixLQUFBNEIsSUFBQUEsSUFDQSxJQUFBVCxFQUFBVyxXQUdBZCxHQUFBZ00sVUFBQS9GLEVBQUE5RixHQUFBLElBR0FBLEVBQUE2SCxZQUFBLEdBSUEsT0FBQWhKLE9BR0EyTSxNQUFBLFNBQUE2cEIsRUFBQUMsR0FJQSxNQUhBRCxHQUFBLE1BQUFBLEdBQUFBLEVBQ0FDLEVBQUEsTUFBQUEsRUFBQUQsRUFBQUMsRUFFQXoyQixLQUFBME0sSUFBQSxXQUNBLE1BQUExTCxJQUFBMkwsTUFBQTNNLEtBQUF3MkIsRUFBQUMsTUFJQWhxQixLQUFBLFNBQUF0SixHQUNBLE1BQUFpSSxJQUFBcEwsS0FBQSxTQUFBbUQsR0FDQSxHQUFBaEMsR0FBQW5CLEtBQUEsT0FDQTRCLEVBQUEsRUFDQStGLEVBQUEzSCxLQUFBYyxNQUVBLFFBQUErQyxLQUFBVixHQUFBLElBQUFoQyxFQUFBVyxTQUNBLE1BQUFYLEdBQUF3SCxTQUlBLElBQUEsZ0JBQUF4RixLQUFBb3pCLEdBQUF0MEIsS0FBQWtCLEtBQ0FzRixJQUFBRCxHQUFBeEMsS0FBQTdDLEtBQUEsR0FBQSxLQUFBLEdBQUE5QixlQUFBLENBRUE4QixFQUFBbkMsR0FBQTRILGNBQUF6RixFQUVBLEtBQ0EsS0FBQXZCLEVBQUErRixFQUFBL0YsSUFDQVQsRUFBQW5CLEtBQUE0QixPQUdBLElBQUFULEVBQUFXLFdBQ0FkLEdBQUFnTSxVQUFBL0YsRUFBQTlGLEdBQUEsSUFDQUEsRUFBQXdILFVBQUF4RixFQUlBaEMsR0FBQSxFQUdBLE1BQUE0RCxLQUdBNUQsR0FDQW5CLEtBQUE0UixRQUFBa2xCLE9BQUEzekIsSUFFQSxLQUFBQSxFQUFBK0csVUFBQXBKLFNBR0FxMkIsWUFBQSxXQUNBLEdBQUFwdkIsS0FHQSxPQUFBNEQsR0FBQTNMLEtBQUFrSyxVQUFBLFNBQUEvSSxHQUNBLEdBQUFzbUIsR0FBQXpuQixLQUFBVSxVQUVBTSxJQUFBbUksUUFBQW5KLEtBQUErSCxHQUFBLElBQ0EvRyxHQUFBZ00sVUFBQS9GLEVBQUFqSCxPQUNBeW5CLEdBQ0FBLEVBQUEyUCxhQUFBajJCLEVBQUFuQixRQUtBK0gsTUFJQS9HLEdBQUF5QixNQUNBNDBCLFNBQUEsU0FDQUMsVUFBQSxVQUNBTixhQUFBLFNBQ0FPLFlBQUEsUUFDQUMsV0FBQSxlQUNBLFNBQUFwMkIsRUFBQXEyQixHQUNBejJCLEdBQUE2SSxHQUFBekksR0FBQSxTQUFBd0ksR0FPQSxJQU5BLEdBQUFuQyxHQUNBTCxLQUNBc3dCLEVBQUExMkIsR0FBQTRJLEdBQ0FpUCxFQUFBNmUsRUFBQTUyQixPQUFBLEVBQ0FjLEVBQUEsRUFFQUEsR0FBQWlYLEVBQUFqWCxJQUNBNkYsRUFBQTdGLElBQUFpWCxFQUFBN1ksS0FBQUEsS0FBQTJNLE9BQUEsR0FDQTNMLEdBQUEwMkIsRUFBQTkxQixJQUFBNjFCLEdBQUFod0IsR0FJQXdCLEdBQUFyRixNQUFBd0QsRUFBQUssRUFBQVYsTUFHQSxPQUFBL0csTUFBQTJZLFVBQUF2UixLQUdBLElBQUFzRyxJQUFBLFVBRUFELEdBQUEsR0FBQTRVLFFBQUEsS0FBQXVOLEdBQUEsa0JBQUEsS0FFQXRpQixHQUFBLFNBQUFuTSxHQUtBLEdBQUE4ekIsR0FBQTl6QixFQUFBbUYsY0FBQWdlLFdBTUEsT0FKQTJRLElBQUFBLEVBQUEwQyxTQUNBMUMsRUFBQWwxQixHQUdBazFCLEVBQUEyQyxpQkFBQXoyQixLQUtBLFdBSUEsUUFBQTAyQixLQUdBLEdBQUFqSCxFQUFBLENBSUFBLEVBQUEzcUIsTUFBQTZ4QixRQUNBLDRHQUlBbEgsRUFBQWpvQixVQUFBLEdBQ0F3YixHQUFBMWpCLFlBQUFzM0IsRUFFQSxJQUFBQyxHQUFBajRCLEVBQUE2M0IsaUJBQUFoSCxFQUNBcUgsR0FBQSxPQUFBRCxFQUFBelQsSUFHQTJULEVBQUEsUUFBQUYsRUFBQUcsV0FDQUMsRUFBQSxRQUFBSixFQUFBN3FCLE1BSUF5akIsRUFBQTNxQixNQUFBb3lCLFlBQUEsTUFDQUMsRUFBQSxRQUFBTixFQUFBSyxZQUVBbFUsR0FBQXhqQixZQUFBbzNCLEdBSUFuSCxFQUFBLE1BR0EsR0FBQXFILEdBQUFHLEVBQUFFLEVBQUFKLEVBQ0FILEVBQUFuNEIsR0FBQVUsY0FBQSxPQUNBc3dCLEVBQUFoeEIsR0FBQVUsY0FBQSxNQUdBc3dCLEdBQUEzcUIsUUFNQTJxQixFQUFBM3FCLE1BQUFzeUIsZUFBQSxjQUNBM0gsRUFBQUMsV0FBQSxHQUFBNXFCLE1BQUFzeUIsZUFBQSxHQUNBbnNCLEdBQUFvc0IsZ0JBQUEsZ0JBQUE1SCxFQUFBM3FCLE1BQUFzeUIsZUFFQVIsRUFBQTl4QixNQUFBNnhCLFFBQUEsNEZBRUFDLEVBQUF0M0IsWUFBQW13QixHQUVBNXZCLEdBQUFzSyxPQUFBYyxJQUNBcXNCLGNBQUEsV0FFQSxNQURBWixLQUNBSSxHQUVBL29CLGtCQUFBLFdBRUEsTUFEQTJvQixLQUNBTyxHQUVBNXFCLGlCQUFBLFdBRUEsTUFEQXFxQixLQUNBUyxHQUVBSSxtQkFBQSxXQUVBLE1BREFiLEtBQ0FLLFFBK0VBLElBS0FTLElBQUEsNEJBQ0FDLEdBQUEsTUFDQUMsSUFBQUMsU0FBQSxXQUFBQyxXQUFBLFNBQUF4eUIsUUFBQSxTQUNBeXlCLElBQ0FDLGNBQUEsSUFDQUMsV0FBQSxPQUdBaHJCLElBQUEsU0FBQSxNQUFBLE1BQ0FILEdBQUFuTyxHQUFBVSxjQUFBLE9BQUEyRixLQWlJQWpGLElBQUFzSyxRQUlBbUgsVUFDQWpDLFNBQ0F6SixJQUFBLFNBQUE1RixFQUFBK0wsR0FDQSxHQUFBQSxFQUFBLENBR0EsR0FBQTlGLEdBQUE2RixFQUFBOUwsRUFBQSxVQUNBLE9BQUEsS0FBQWlHLEVBQUEsSUFBQUEsTUFPQXZCLFdBQ0FzekIseUJBQUEsRUFDQUMsYUFBQSxFQUNBQyxhQUFBLEVBQ0FDLFVBQUEsRUFDQUMsWUFBQSxFQUNBTCxZQUFBLEVBQ0FNLFlBQUEsRUFDQWhwQixTQUFBLEVBQ0FpcEIsT0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFFBQUEsRUFDQUMsUUFBQSxFQUNBQyxNQUFBLEdBS0F6ckIsVUFDQTByQixNQUFBLFlBSUE3ekIsTUFBQSxTQUFBOUUsRUFBQUMsRUFBQStCLEVBQUF3TCxHQUdBLEdBQUF4TixHQUFBLElBQUFBLEVBQUFXLFVBQUEsSUFBQVgsRUFBQVcsVUFBQVgsRUFBQThFLE1BQUEsQ0FLQSxHQUFBbUIsR0FBQXJHLEVBQUFrUSxFQUNBOG9CLEVBQUEvNEIsR0FBQXNSLFVBQUFsUixHQUNBNDRCLEVBQUFwQixHQUFBMzJCLEtBQUFiLEdBQ0E2RSxFQUFBOUUsRUFBQThFLEtBYUEsSUFSQSt6QixJQUNBNTRCLEVBQUErTSxFQUFBNHJCLElBSUE5b0IsRUFBQWpRLEdBQUF5UixTQUFBclIsSUFBQUosR0FBQXlSLFNBQUFzbkIsT0FHQWwyQixLQUFBVixFQXdDQSxNQUFBOE4sSUFBQSxPQUFBQSxRQUNBcE4sTUFBQXVELEVBQUE2SixFQUFBbEssSUFBQTVGLEdBQUEsRUFBQXdOLElBRUF2SCxFQUlBbkIsRUFBQTdFLEVBOUNBTCxTQUFBb0MsR0FHQSxXQUFBcEMsSUFBQXFHLEVBQUFyQixHQUFBQyxLQUFBN0MsS0FBQWlFLEVBQUEsS0FDQWpFLEVBQUErQixFQUFBL0QsRUFBQUMsRUFBQWdHLEdBR0FyRyxFQUFBLFVBSUEsTUFBQW9DLEdBQUFBLElBQUFBLElBS0EsV0FBQXBDLElBQ0FvQyxHQUFBaUUsR0FBQUEsRUFBQSxLQUFBcEcsR0FBQTZFLFVBQUFrMEIsR0FBQSxHQUFBLE9BSUEzdEIsR0FBQW9zQixpQkFBQSxLQUFBcjFCLEdBQUEsSUFBQS9CLEVBQUFXLFFBQUEsZ0JBQ0FrRSxFQUFBN0UsR0FBQSxXQUlBNlAsR0FBQSxPQUFBQSxRQUNBcE4sTUFBQVYsRUFBQThOLEVBQUFoTSxJQUFBOUQsRUFBQWdDLEVBQUF3TCxNQUVBcXJCLEVBQ0EvekIsRUFBQWcwQixZQUFBNzRCLEVBQUErQixHQUVBOEMsRUFBQTdFLEdBQUErQixNQWtCQXVDLElBQUEsU0FBQXZFLEVBQUFDLEVBQUF1TixFQUFBRSxHQUNBLEdBQUFDLEdBQUE0SixFQUFBekgsRUFDQThvQixFQUFBLzRCLEdBQUFzUixVQUFBbFIsRUE2QkEsT0E1QkF3M0IsSUFBQTMyQixLQUFBYixLQU1BQSxFQUFBK00sRUFBQTRyQixJQUlBOW9CLEVBQUFqUSxHQUFBeVIsU0FBQXJSLElBQUFKLEdBQUF5UixTQUFBc25CLEdBR0E5b0IsR0FBQSxPQUFBQSxLQUNBbkMsRUFBQW1DLEVBQUFsSyxJQUFBNUYsR0FBQSxFQUFBd04sUUFJQTlLLEtBQUFpTCxJQUNBQSxFQUFBN0IsRUFBQTlMLEVBQUFDLEVBQUF5TixJQUlBLFdBQUFDLEdBQUExTixJQUFBNDNCLE1BQ0FscUIsRUFBQWtxQixHQUFBNTNCLElBSUEsS0FBQXVOLEdBQUFBLEdBQ0ErSixFQUFBdkosV0FBQUwsSUFDQSxJQUFBSCxHQUFBdXJCLFNBQUF4aEIsR0FBQUEsR0FBQSxFQUFBNUosR0FHQUEsS0FJQTlOLEdBQUF5QixNQUFBLFNBQUEsU0FBQSxTQUFBYixFQUFBUixHQUNBSixHQUFBeVIsU0FBQXJSLElBQ0EyRixJQUFBLFNBQUE1RixFQUFBK0wsRUFBQXlCLEdBQ0EsR0FBQXpCLEVBSUEsT0FBQXlyQixHQUFBMTJCLEtBQUFqQixHQUFBMEUsSUFBQXZFLEVBQUEsYUFRQUEsRUFBQWc1QixpQkFBQXI1QixRQUFBSyxFQUFBaTVCLHdCQUFBanRCLE1BSUE2QixFQUFBN04sRUFBQUMsRUFBQXVOLEdBSEFtaEIsR0FBQTN1QixFQUFBMDNCLEdBQUEsV0FDQSxNQUFBN3BCLEdBQUE3TixFQUFBQyxFQUFBdU4sTUFNQTFKLElBQUEsU0FBQTlELEVBQUFnQyxFQUFBd0wsR0FDQSxHQUFBSixHQUNBTSxFQUFBRixHQUFBckIsR0FBQW5NLEdBQ0FtTixFQUFBSyxHQUFBRCxFQUNBdk4sRUFDQUMsRUFDQXVOLEVBQ0EsZUFBQTNOLEdBQUEwRSxJQUFBdkUsRUFBQSxhQUFBLEVBQUEwTixHQUNBQSxFQVdBLE9BUEFQLEtBQUFDLEVBQUF4SSxHQUFBQyxLQUFBN0MsS0FDQSxRQUFBb0wsRUFBQSxJQUFBLFFBRUFwTixFQUFBOEUsTUFBQTdFLEdBQUErQixFQUNBQSxFQUFBbkMsR0FBQTBFLElBQUF2RSxFQUFBQyxJQUdBaU4sRUFBQWxOLEVBQUFnQyxFQUFBbUwsT0FLQXROLEdBQUF5UixTQUFBMGxCLFdBQUF4cUIsRUFBQXZCLEdBQUFzc0IsbUJBQ0EsU0FBQXYzQixFQUFBK0wsR0FDQSxHQUFBQSxFQUNBLE9BQUFpQyxXQUFBbEMsRUFBQTlMLEVBQUEsZ0JBQ0FBLEVBQUFpNUIsd0JBQUFDLEtBQ0F2SyxHQUFBM3VCLEdBQUFnM0IsV0FBQSxHQUFBLFdBQ0EsTUFBQWgzQixHQUFBaTVCLHdCQUFBQyxRQUVBLE9BTUFyNUIsR0FBQXlCLE1BQ0E2M0IsT0FBQSxHQUNBQyxRQUFBLEdBQ0FDLE9BQUEsU0FDQSxTQUFBam1CLEVBQUFrbUIsR0FDQXo1QixHQUFBeVIsU0FBQThCLEVBQUFrbUIsSUFDQS9uQixPQUFBLFNBQUF2UCxHQU9BLElBTkEsR0FBQXZCLEdBQUEsRUFDQTg0QixLQUdBQyxFQUFBLGdCQUFBeDNCLEdBQUFBLEVBQUFnVSxNQUFBLE1BQUFoVSxHQUVBdkIsRUFBQSxFQUFBQSxJQUNBODRCLEVBQUFubUIsRUFBQXhGLEdBQUFuTixHQUFBNjRCLEdBQ0FFLEVBQUEvNEIsSUFBQSs0QixFQUFBLzRCLEVBQUEsSUFBQSs0QixFQUFBLEVBR0EsT0FBQUQsS0FJQWh0QixHQUFBekwsS0FBQXNTLEtBQ0F2VCxHQUFBeVIsU0FBQThCLEVBQUFrbUIsR0FBQXgxQixJQUFBb0osS0FJQXJOLEdBQUE2SSxHQUFBeUIsUUFDQTVGLElBQUEsU0FBQXRFLEVBQUErQixHQUNBLE1BQUFpSSxJQUFBcEwsS0FBQSxTQUFBbUIsRUFBQUMsRUFBQStCLEdBQ0EsR0FBQTBMLEdBQUFpSyxFQUNBcE0sS0FDQTlLLEVBQUEsQ0FFQSxJQUFBMlEsTUFBQUMsUUFBQXBSLEdBQUEsQ0FJQSxJQUhBeU4sRUFBQXZCLEdBQUFuTSxHQUNBMlgsRUFBQTFYLEVBQUFOLE9BRUFjLEVBQUFrWCxFQUFBbFgsSUFDQThLLEVBQUF0TCxFQUFBUSxJQUFBWixHQUFBMEUsSUFBQXZFLEVBQUFDLEVBQUFRLElBQUEsRUFBQWlOLEVBR0EsT0FBQW5DLEdBR0EsV0FBQTdJLEtBQUFWLEVBQ0FuQyxHQUFBaUYsTUFBQTlFLEVBQUFDLEVBQUErQixHQUNBbkMsR0FBQTBFLElBQUF2RSxFQUFBQyxJQUNBQSxFQUFBK0IsRUFBQStHLFVBQUFwSixPQUFBLE1BUUFFLEdBQUFvTyxNQUFBQSxFQUVBQSxFQUFBRSxXQUNBa0osWUFBQXBKLEVBQ0FHLEtBQUEsU0FBQXBPLEVBQUFvQixFQUFBNEMsRUFBQWdCLEVBQUFrSixFQUFBekosR0FDQTVGLEtBQUFtQixLQUFBQSxFQUNBbkIsS0FBQW1GLEtBQUFBLEVBQ0FuRixLQUFBcVAsT0FBQUEsR0FBQXJPLEdBQUFxTyxPQUFBM0csU0FDQTFJLEtBQUF1QyxRQUFBQSxFQUNBdkMsS0FBQWtHLE1BQUFsRyxLQUFBa1EsSUFBQWxRLEtBQUFvQyxNQUNBcEMsS0FBQW1HLElBQUFBLEVBQ0FuRyxLQUFBNEYsS0FBQUEsSUFBQTVFLEdBQUE2RSxVQUFBVixHQUFBLEdBQUEsT0FFQS9DLElBQUEsV0FDQSxHQUFBNk8sR0FBQTdCLEVBQUF3ckIsVUFBQTU2QixLQUFBbUYsS0FFQSxPQUFBOEwsSUFBQUEsRUFBQWxLLElBQ0FrSyxFQUFBbEssSUFBQS9HLE1BQ0FvUCxFQUFBd3JCLFVBQUFseUIsU0FBQTNCLElBQUEvRyxPQUVBdVQsSUFBQSxTQUFBRixHQUNBLEdBQUF3bkIsR0FDQTVwQixFQUFBN0IsRUFBQXdyQixVQUFBNTZCLEtBQUFtRixLQW9CQSxPQWxCQW5GLE1BQUF1QyxRQUFBNlEsU0FDQXBULEtBQUE4NkIsSUFBQUQsRUFBQTc1QixHQUFBcU8sT0FBQXJQLEtBQUFxUCxRQUNBZ0UsRUFBQXJULEtBQUF1QyxRQUFBNlEsU0FBQUMsRUFBQSxFQUFBLEVBQUFyVCxLQUFBdUMsUUFBQTZRLFVBR0FwVCxLQUFBODZCLElBQUFELEVBQUF4bkIsRUFFQXJULEtBQUFrUSxLQUFBbFEsS0FBQW1HLElBQUFuRyxLQUFBa0csT0FBQTIwQixFQUFBNzZCLEtBQUFrRyxNQUVBbEcsS0FBQXVDLFFBQUF3NEIsTUFDQS82QixLQUFBdUMsUUFBQXc0QixLQUFBbDVCLEtBQUE3QixLQUFBbUIsS0FBQW5CLEtBQUFrUSxJQUFBbFEsTUFHQWlSLEdBQUFBLEVBQUFoTSxJQUNBZ00sRUFBQWhNLElBQUFqRixNQUVBb1AsRUFBQXdyQixVQUFBbHlCLFNBQUF6RCxJQUFBakYsTUFFQUEsT0FJQW9QLEVBQUFFLFVBQUFDLEtBQUFELFVBQUFGLEVBQUFFLFVBRUFGLEVBQUF3ckIsV0FDQWx5QixVQUNBM0IsSUFBQSxTQUFBMUIsR0FDQSxHQUFBdU4sRUFJQSxPQUFBLEtBQUF2TixFQUFBbEUsS0FBQVcsVUFDQSxNQUFBdUQsRUFBQWxFLEtBQUFrRSxFQUFBRixPQUFBLE1BQUFFLEVBQUFsRSxLQUFBOEUsTUFBQVosRUFBQUYsTUFDQUUsRUFBQWxFLEtBQUFrRSxFQUFBRixPQU9BeU4sRUFBQTVSLEdBQUEwRSxJQUFBTCxFQUFBbEUsS0FBQWtFLEVBQUFGLEtBQUEsSUFHQXlOLEdBQUEsU0FBQUEsRUFBQUEsRUFBQSxJQUVBM04sSUFBQSxTQUFBSSxHQUtBckUsR0FBQTZPLEdBQUFrckIsS0FBQTExQixFQUFBRixNQUNBbkUsR0FBQTZPLEdBQUFrckIsS0FBQTExQixFQUFBRixNQUFBRSxHQUNBLElBQUFBLEVBQUFsRSxLQUFBVyxVQUNBLE1BQUF1RCxFQUFBbEUsS0FBQThFLE1BQUFqRixHQUFBb04sU0FBQS9JLEVBQUFGLFNBQ0FuRSxHQUFBeVIsU0FBQXBOLEVBQUFGLE1BR0FFLEVBQUFsRSxLQUFBa0UsRUFBQUYsTUFBQUUsRUFBQTZLLElBRkFsUCxHQUFBaUYsTUFBQVosRUFBQWxFLEtBQUFrRSxFQUFBRixLQUFBRSxFQUFBNkssSUFBQTdLLEVBQUFPLFNBVUF3SixFQUFBd3JCLFVBQUFJLFVBQUE1ckIsRUFBQXdyQixVQUFBSyxZQUNBaDJCLElBQUEsU0FBQUksR0FDQUEsRUFBQWxFLEtBQUFXLFVBQUF1RCxFQUFBbEUsS0FBQVQsYUFDQTJFLEVBQUFsRSxLQUFBa0UsRUFBQUYsTUFBQUUsRUFBQTZLLE9BS0FsUCxHQUFBcU8sUUFDQTZyQixPQUFBLFNBQUFDLEdBQ0EsTUFBQUEsSUFFQUMsTUFBQSxTQUFBRCxHQUNBLE1BQUEsR0FBQTNzQixLQUFBNnNCLElBQUFGLEVBQUEzc0IsS0FBQThzQixJQUFBLEdBRUE1eUIsU0FBQSxTQUdBMUgsR0FBQTZPLEdBQUFULEVBQUFFLFVBQUFDLEtBR0F2TyxHQUFBNk8sR0FBQWtyQixPQUtBLElBQ0E5cUIsSUFBQVIsR0FDQXNDLEdBQUEseUJBQ0F3cEIsR0FBQSxhQXNZQXY2QixJQUFBMlAsVUFBQTNQLEdBQUFzSyxPQUFBcUYsR0FFQUMsVUFDQTRxQixLQUFBLFNBQUFyMkIsRUFBQWhDLEdBQ0EsR0FBQWtDLEdBQUFyRixLQUFBeVEsWUFBQXRMLEVBQUFoQyxFQUVBLE9BREErQixHQUFBRyxFQUFBbEUsS0FBQWdFLEVBQUFZLEdBQUFDLEtBQUE3QyxHQUFBa0MsR0FDQUEsS0FJQW8yQixRQUFBLFNBQUEzcUIsRUFBQWhGLEdBQ0E5SyxHQUFBVSxXQUFBb1AsSUFDQWhGLEVBQUFnRixFQUNBQSxHQUFBLE1BRUFBLEVBQUFBLEVBQUFwTyxNQUFBQyxHQU9BLEtBSkEsR0FBQXdDLEdBQ0EwQixFQUFBLEVBQ0EvRixFQUFBZ1EsRUFBQWhRLE9BRUErRixFQUFBL0YsRUFBQStGLElBQ0ExQixFQUFBMkwsRUFBQWpLLEdBQ0E4SixFQUFBQyxTQUFBekwsR0FBQXdMLEVBQUFDLFNBQUF6TCxPQUNBd0wsRUFBQUMsU0FBQXpMLEdBQUE2UCxRQUFBbEosSUFJQWdILFlBQUFqQyxHQUVBNnFCLFVBQUEsU0FBQTV2QixFQUFBaXJCLEdBQ0FBLEVBQ0FwbUIsRUFBQW1DLFdBQUFrQyxRQUFBbEosR0FFQTZFLEVBQUFtQyxXQUFBN0osS0FBQTZDLE1BS0E5SyxHQUFBMjZCLE1BQUEsU0FBQUEsRUFBQXRzQixFQUFBeEYsR0FDQSxHQUFBK3hCLEdBQUFELEdBQUEsZ0JBQUFBLEdBQUEzNkIsR0FBQXNLLFVBQUFxd0IsSUFDQTFuQixTQUFBcEssSUFBQUEsR0FBQXdGLEdBQ0FyTyxHQUFBVSxXQUFBaTZCLElBQUFBLEVBQ0F2b0IsU0FBQXVvQixFQUNBdHNCLE9BQUF4RixHQUFBd0YsR0FBQUEsSUFBQXJPLEdBQUFVLFdBQUEyTixJQUFBQSxFQW9DQSxPQWhDQXJPLElBQUE2TyxHQUFBNUYsSUFDQTJ4QixFQUFBeG9CLFNBQUEsRUFHQSxnQkFBQXdvQixHQUFBeG9CLFdBQ0F3b0IsRUFBQXhvQixXQUFBcFMsSUFBQTZPLEdBQUFnc0IsT0FDQUQsRUFBQXhvQixTQUFBcFMsR0FBQTZPLEdBQUFnc0IsT0FBQUQsRUFBQXhvQixVQUdBd29CLEVBQUF4b0IsU0FBQXBTLEdBQUE2TyxHQUFBZ3NCLE9BQUFuekIsVUFNQSxNQUFBa3pCLEVBQUFucUIsUUFBQSxJQUFBbXFCLEVBQUFucUIsUUFDQW1xQixFQUFBbnFCLE1BQUEsTUFJQW1xQixFQUFBN0wsSUFBQTZMLEVBQUEzbkIsU0FFQTJuQixFQUFBM25CLFNBQUEsV0FDQWpULEdBQUFVLFdBQUFrNkIsRUFBQTdMLE1BQ0E2TCxFQUFBN0wsSUFBQWx1QixLQUFBN0IsTUFHQTQ3QixFQUFBbnFCLE9BQ0F6USxHQUFBc3VCLFFBQUF0dkIsS0FBQTQ3QixFQUFBbnFCLFFBSUFtcUIsR0FHQTU2QixHQUFBNkksR0FBQXlCLFFBQ0F3d0IsT0FBQSxTQUFBSCxFQUFBSSxFQUFBMXNCLEVBQUF2RCxHQUdBLE1BQUE5TCxNQUFBa0MsT0FBQThFLElBQUF0QixJQUFBLFVBQUEsR0FBQWlCLE9BR0FSLE1BQUE2MUIsU0FBQXhyQixRQUFBdXJCLEdBQUFKLEVBQUF0c0IsRUFBQXZELElBRUFrd0IsUUFBQSxTQUFBNzJCLEVBQUF3MkIsRUFBQXRzQixFQUFBdkQsR0FDQSxHQUFBOEYsR0FBQTVRLEdBQUFnUixjQUFBN00sR0FDQTgyQixFQUFBajdCLEdBQUEyNkIsTUFBQUEsRUFBQXRzQixFQUFBdkQsR0FDQW93QixFQUFBLFdBR0EsR0FBQTVxQixHQUFBWCxFQUFBM1EsS0FBQWdCLEdBQUFzSyxVQUFBbkcsR0FBQTgyQixJQUdBcnFCLEdBQUE5SyxHQUFBQyxJQUFBL0csS0FBQSxZQUNBc1IsRUFBQXNDLE1BQUEsR0FLQSxPQUZBc29CLEdBQUFDLE9BQUFELEVBRUF0cUIsSUFBQSxJQUFBcXFCLEVBQUF4cUIsTUFDQXpSLEtBQUF5QyxLQUFBeTVCLEdBQ0FsOEIsS0FBQXlSLE1BQUF3cUIsRUFBQXhxQixNQUFBeXFCLElBRUF0b0IsS0FBQSxTQUFBN1MsRUFBQTB1QixFQUFBNWIsR0FDQSxHQUFBdW9CLEdBQUEsU0FBQW5yQixHQUNBLEdBQUEyQyxHQUFBM0MsRUFBQTJDLFdBQ0EzQyxHQUFBMkMsS0FDQUEsRUFBQUMsR0FZQSxPQVRBLGdCQUFBOVMsS0FDQThTLEVBQUE0YixFQUNBQSxFQUFBMXVCLEVBQ0FBLE1BQUE4QyxJQUVBNHJCLElBQUEsSUFBQTF1QixHQUNBZixLQUFBeVIsTUFBQTFRLEdBQUEsU0FHQWYsS0FBQXlDLEtBQUEsV0FDQSxHQUFBNnNCLElBQUEsRUFDQXpvQixFQUFBLE1BQUE5RixHQUFBQSxFQUFBLGFBQ0FzN0IsRUFBQXI3QixHQUFBcTdCLE9BQ0EvM0IsRUFBQXdDLEdBQUFDLElBQUEvRyxLQUVBLElBQUE2RyxFQUNBdkMsRUFBQXVDLElBQUF2QyxFQUFBdUMsR0FBQStNLE1BQ0F3b0IsRUFBQTkzQixFQUFBdUMsUUFHQSxLQUFBQSxJQUFBdkMsR0FDQUEsRUFBQXVDLElBQUF2QyxFQUFBdUMsR0FBQStNLE1BQUEybkIsR0FBQXQ1QixLQUFBNEUsSUFDQXUxQixFQUFBOTNCLEVBQUF1QyxHQUtBLEtBQUFBLEVBQUF3MUIsRUFBQXY3QixPQUFBK0YsS0FDQXcxQixFQUFBeDFCLEdBQUExRixPQUFBbkIsTUFDQSxNQUFBZSxHQUFBczdCLEVBQUF4MUIsR0FBQTRLLFFBQUExUSxJQUVBczdCLEVBQUF4MUIsR0FBQXlLLEtBQUFzQyxLQUFBQzttRkFDQXliLEdBQUEsRUFDQStNLEVBQUFyakIsT0FBQW5TLEVBQUEsS0FPQXlvQixHQUFBemIsR0FDQTdTLEdBQUFzdUIsUUFBQXR2QixLQUFBZSxNQUlBbzdCLE9BQUEsU0FBQXA3QixHQUlBLE9BSEEsSUFBQUEsSUFDQUEsRUFBQUEsR0FBQSxNQUVBZixLQUFBeUMsS0FBQSxXQUNBLEdBQUFvRSxHQUNBdkMsRUFBQXdDLEdBQUFDLElBQUEvRyxNQUNBeVIsRUFBQW5OLEVBQUF2RCxFQUFBLFNBQ0FrUSxFQUFBM00sRUFBQXZELEVBQUEsY0FDQXM3QixFQUFBcjdCLEdBQUFxN0IsT0FDQXY3QixFQUFBMlEsRUFBQUEsRUFBQTNRLE9BQUEsQ0FhQSxLQVZBd0QsRUFBQTYzQixRQUFBLEVBR0FuN0IsR0FBQXlRLE1BQUF6UixLQUFBZSxNQUVBa1EsR0FBQUEsRUFBQTJDLE1BQ0EzQyxFQUFBMkMsS0FBQS9SLEtBQUE3QixNQUFBLEdBSUE2RyxFQUFBdzFCLEVBQUF2N0IsT0FBQStGLEtBQ0F3MUIsRUFBQXgxQixHQUFBMUYsT0FBQW5CLE1BQUFxOEIsRUFBQXgxQixHQUFBNEssUUFBQTFRLElBQ0FzN0IsRUFBQXgxQixHQUFBeUssS0FBQXNDLE1BQUEsR0FDQXlvQixFQUFBcmpCLE9BQUFuUyxFQUFBLEdBS0EsS0FBQUEsRUFBQSxFQUFBQSxFQUFBL0YsRUFBQStGLElBQ0E0SyxFQUFBNUssSUFBQTRLLEVBQUE1SyxHQUFBczFCLFFBQ0ExcUIsRUFBQTVLLEdBQUFzMUIsT0FBQXQ2QixLQUFBN0IsWUFLQXNFLEdBQUE2M0IsWUFLQW43QixHQUFBeUIsTUFBQSxTQUFBLE9BQUEsUUFBQSxTQUFBYixFQUFBUixHQUNBLEdBQUFrN0IsR0FBQXQ3QixHQUFBNkksR0FBQXpJLEVBQ0FKLElBQUE2SSxHQUFBekksR0FBQSxTQUFBdTZCLEVBQUF0c0IsRUFBQXZELEdBQ0EsTUFBQSxPQUFBNnZCLEdBQUEsaUJBQUFBLEdBQ0FXLEVBQUExNEIsTUFBQTVELEtBQUFrSyxXQUNBbEssS0FBQWc4QixRQUFBN3JCLEVBQUEvTyxHQUFBLEdBQUF1NkIsRUFBQXRzQixFQUFBdkQsTUFLQTlLLEdBQUF5QixNQUNBODVCLFVBQUFwc0IsRUFBQSxRQUNBcXNCLFFBQUFyc0IsRUFBQSxRQUNBc3NCLFlBQUF0c0IsRUFBQSxVQUNBdXNCLFFBQUFsc0IsUUFBQSxRQUNBbXNCLFNBQUFuc0IsUUFBQSxRQUNBb3NCLFlBQUFwc0IsUUFBQSxXQUNBLFNBQUFwUCxFQUFBMFAsR0FDQTlQLEdBQUE2SSxHQUFBekksR0FBQSxTQUFBdTZCLEVBQUF0c0IsRUFBQXZELEdBQ0EsTUFBQTlMLE1BQUFnOEIsUUFBQWxyQixFQUFBNnFCLEVBQUF0c0IsRUFBQXZELE1BSUE5SyxHQUFBcTdCLFVBQ0FyN0IsR0FBQTZPLEdBQUFFLEtBQUEsV0FDQSxHQUFBbUUsR0FDQXRTLEVBQUEsRUFDQXk2QixFQUFBcjdCLEdBQUFxN0IsTUFJQSxLQUZBcHNCLEdBQUFqUCxHQUFBa1AsTUFFQXRPLEVBQUF5NkIsRUFBQXY3QixPQUFBYyxLQUNBc1MsRUFBQW1vQixFQUFBejZCLE9BR0F5NkIsRUFBQXo2QixLQUFBc1MsR0FDQW1vQixFQUFBcmpCLE9BQUFwWCxJQUFBLEVBSUF5NkIsR0FBQXY3QixRQUNBRSxHQUFBNk8sR0FBQStELE9BRUEzRCxPQUFBcE0sSUFHQTdDLEdBQUE2TyxHQUFBcUUsTUFBQSxTQUFBQSxHQUNBbFQsR0FBQXE3QixPQUFBcHpCLEtBQUFpTCxHQUNBbFQsR0FBQTZPLEdBQUEzSixTQUdBbEYsR0FBQTZPLEdBQUFDLFNBQUEsR0FDQTlPLEdBQUE2TyxHQUFBM0osTUFBQSxXQUNBdUosS0FJQUEsSUFBQSxFQUNBRCxNQUdBeE8sR0FBQTZPLEdBQUErRCxLQUFBLFdBQ0FuRSxHQUFBLE1BR0F6TyxHQUFBNk8sR0FBQWdzQixRQUNBZ0IsS0FBQSxJQUNBQyxLQUFBLElBR0FwMEIsU0FBQSxLQU1BMUgsR0FBQTZJLEdBQUFrekIsTUFBQSxTQUFBQyxFQUFBajhCLEdBSUEsTUFIQWk4QixHQUFBaDhCLEdBQUE2TyxHQUFBN08sR0FBQTZPLEdBQUFnc0IsT0FBQW1CLElBQUFBLEVBQUFBLEVBQ0FqOEIsRUFBQUEsR0FBQSxLQUVBZixLQUFBeVIsTUFBQTFRLEVBQUEsU0FBQWtkLEVBQUFoTixHQUNBLEdBQUFnc0IsR0FBQWw5QixFQUFBNlAsV0FBQXFPLEVBQUErZSxFQUNBL3JCLEdBQUEyQyxLQUFBLFdBQ0E3VCxFQUFBbTlCLGFBQUFELE9BTUEsV0FDQSxHQUFBalksR0FBQXBsQixHQUFBVSxjQUFBLFNBQ0EyYixFQUFBcmMsR0FBQVUsY0FBQSxVQUNBczdCLEVBQUEzZixFQUFBeGIsWUFBQWIsR0FBQVUsY0FBQSxVQUVBMGtCLEdBQUFqa0IsS0FBQSxXQUlBcUwsR0FBQSt3QixRQUFBLEtBQUFuWSxFQUFBN2hCLE1BSUFpSixHQUFBZ3hCLFlBQUF4QixFQUFBeG1CLFNBSUE0UCxFQUFBcGxCLEdBQUFVLGNBQUEsU0FDQTBrQixFQUFBN2hCLE1BQUEsSUFDQTZoQixFQUFBamtCLEtBQUEsUUFDQXFMLEdBQUFpeEIsV0FBQSxNQUFBclksRUFBQTdoQixRQUlBLElBQUFtNkIsSUFDQTFnQixHQUFBNWIsR0FBQStrQixLQUFBbkosVUFFQTViLElBQUE2SSxHQUFBeUIsUUFDQTBhLEtBQUEsU0FBQTVrQixFQUFBK0IsR0FDQSxNQUFBaUksSUFBQXBMLEtBQUFnQixHQUFBZ2xCLEtBQUE1a0IsRUFBQStCLEVBQUErRyxVQUFBcEosT0FBQSxJQUdBeThCLFdBQUEsU0FBQW44QixHQUNBLE1BQUFwQixNQUFBeUMsS0FBQSxXQUNBekIsR0FBQXU4QixXQUFBdjlCLEtBQUFvQixRQUtBSixHQUFBc0ssUUFDQTBhLEtBQUEsU0FBQTdrQixFQUFBQyxFQUFBK0IsR0FDQSxHQUFBaUUsR0FBQTZKLEVBQ0F1c0IsRUFBQXI4QixFQUFBVyxRQUdBLElBQUEsSUFBQTA3QixHQUFBLElBQUFBLEdBQUEsSUFBQUEsRUFLQSxXQUFBLEtBQUFyOEIsRUFBQTJELGFBQ0E5RCxHQUFBbUUsS0FBQWhFLEVBQUFDLEVBQUErQixJQUtBLElBQUFxNkIsR0FBQXg4QixHQUFBZ3BCLFNBQUE3b0IsS0FDQThQLEVBQUFqUSxHQUFBeThCLFVBQUFyOEIsRUFBQUMsaUJBQ0FMLEdBQUEra0IsS0FBQXJqQixNQUFBd2dCLEtBQUFqaEIsS0FBQWIsR0FBQWs4QixPQUFBejVCLFNBR0FBLEtBQUFWLEVBQ0EsT0FBQUEsTUFDQW5DLElBQUF1OEIsV0FBQXA4QixFQUFBQyxHQUlBNlAsR0FBQSxPQUFBQSxRQUNBcE4sTUFBQXVELEVBQUE2SixFQUFBaE0sSUFBQTlELEVBQUFnQyxFQUFBL0IsSUFDQWdHLEdBR0FqRyxFQUFBd2EsYUFBQXZhLEVBQUErQixFQUFBLElBQ0FBLEdBR0E4TixHQUFBLE9BQUFBLElBQUEsUUFBQTdKLEVBQUE2SixFQUFBbEssSUFBQTVGLEVBQUFDLElBQ0FnRyxHQUdBQSxFQUFBcEcsR0FBQStmLEtBQUFpRixLQUFBN2tCLEVBQUFDLEdBR0EsTUFBQWdHLE1BQUF2RCxHQUFBdUQsS0FHQXEyQixXQUNBMThCLE1BQ0FrRSxJQUFBLFNBQUE5RCxFQUFBZ0MsR0FDQSxJQUFBaUosR0FBQWl4QixZQUFBLFVBQUFsNkIsR0FDQWpDLEVBQUFDLEVBQUEsU0FBQSxDQUNBLEdBQUEyTixHQUFBM04sRUFBQWdDLEtBS0EsT0FKQWhDLEdBQUF3YSxhQUFBLE9BQUF4WSxHQUNBMkwsSUFDQTNOLEVBQUFnQyxNQUFBMkwsR0FFQTNMLE1BTUFvNkIsV0FBQSxTQUFBcDhCLEVBQUFnQyxHQUNBLEdBQUEvQixHQUNBUSxFQUFBLEVBSUE4N0IsRUFBQXY2QixHQUFBQSxFQUFBVCxNQUFBQyxHQUVBLElBQUErNkIsR0FBQSxJQUFBdjhCLEVBQUFXLFNBQ0EsS0FBQVYsRUFBQXM4QixFQUFBOTdCLE1BQ0FULEVBQUF1SixnQkFBQXRKLE1BT0FrOEIsSUFDQXI0QixJQUFBLFNBQUE5RCxFQUFBZ0MsRUFBQS9CLEdBUUEsT0FQQSxJQUFBK0IsRUFHQW5DLEdBQUF1OEIsV0FBQXA4QixFQUFBQyxHQUVBRCxFQUFBd2EsYUFBQXZhLEVBQUFBLEdBRUFBLElBSUFKLEdBQUF5QixLQUFBekIsR0FBQStrQixLQUFBcmpCLE1BQUF3Z0IsS0FBQTJNLE9BQUFudEIsTUFBQSxRQUFBLFNBQUFkLEVBQUFSLEdBQ0EsR0FBQXU4QixHQUFBL2dCLEdBQUF4YixJQUFBSixHQUFBK2YsS0FBQWlGLElBRUFwSixJQUFBeGIsR0FBQSxTQUFBRCxFQUFBQyxFQUFBZ2dCLEdBQ0EsR0FBQWhhLEdBQUFpRSxFQUNBdXlCLEVBQUF4OEIsRUFBQUMsYUFZQSxPQVZBK2YsS0FHQS9WLEVBQUF1UixHQUFBZ2hCLEdBQ0FoaEIsR0FBQWdoQixHQUFBeDJCLEVBQ0FBLEVBQUEsTUFBQXUyQixFQUFBeDhCLEVBQUFDLEVBQUFnZ0IsR0FDQXdjLEVBQ0EsS0FDQWhoQixHQUFBZ2hCLEdBQUF2eUIsR0FFQWpFLElBT0EsSUFBQXkyQixJQUFBLHNDQUNBQyxHQUFBLGVBRUE5OEIsSUFBQTZJLEdBQUF5QixRQUNBbkcsS0FBQSxTQUFBL0QsRUFBQStCLEdBQ0EsTUFBQWlJLElBQUFwTCxLQUFBZ0IsR0FBQW1FLEtBQUEvRCxFQUFBK0IsRUFBQStHLFVBQUFwSixPQUFBLElBR0FpOUIsV0FBQSxTQUFBMzhCLEdBQ0EsTUFBQXBCLE1BQUF5QyxLQUFBLGlCQUNBekMsTUFBQWdCLEdBQUFnOUIsUUFBQTU4QixJQUFBQSxRQUtBSixHQUFBc0ssUUFDQW5HLEtBQUEsU0FBQWhFLEVBQUFDLEVBQUErQixHQUNBLEdBQUFpRSxHQUFBNkosRUFDQXVzQixFQUFBcjhCLEVBQUFXLFFBR0EsSUFBQSxJQUFBMDdCLEdBQUEsSUFBQUEsR0FBQSxJQUFBQSxFQVdBLE1BUEEsS0FBQUEsR0FBQXg4QixHQUFBZ3BCLFNBQUE3b0IsS0FHQUMsRUFBQUosR0FBQWc5QixRQUFBNThCLElBQUFBLEVBQ0E2UCxFQUFBalEsR0FBQTQ1QixVQUFBeDVCLFFBR0F5QyxLQUFBVixFQUNBOE4sR0FBQSxPQUFBQSxRQUNBcE4sTUFBQXVELEVBQUE2SixFQUFBaE0sSUFBQTlELEVBQUFnQyxFQUFBL0IsSUFDQWdHLEVBR0FqRyxFQUFBQyxHQUFBK0IsRUFHQThOLEdBQUEsT0FBQUEsSUFBQSxRQUFBN0osRUFBQTZKLEVBQUFsSyxJQUFBNUYsRUFBQUMsSUFDQWdHLEVBR0FqRyxFQUFBQyxJQUdBdzVCLFdBQ0FwUyxVQUNBemhCLElBQUEsU0FBQTVGLEdBT0EsR0FBQTg4QixHQUFBajlCLEdBQUErZixLQUFBaUYsS0FBQTdrQixFQUFBLFdBRUEsT0FBQTg4QixHQUNBQyxTQUFBRCxFQUFBLElBSUFKLEdBQUE1N0IsS0FBQWQsRUFBQUQsV0FDQTQ4QixHQUFBNzdCLEtBQUFkLEVBQUFELFdBQ0FDLEVBQUFvbkIsS0FFQSxHQUdBLEtBS0F5VixTQUNBRyxJQUFBLFVBQ0FDLE1BQUEsZUFZQWh5QixHQUFBZ3hCLGNBQ0FwOEIsR0FBQTQ1QixVQUFBeGxCLFVBQ0FyTyxJQUFBLFNBQUE1RixHQUlBLEdBQUFzbUIsR0FBQXRtQixFQUFBVCxVQUlBLE9BSEErbUIsSUFBQUEsRUFBQS9tQixZQUNBK21CLEVBQUEvbUIsV0FBQWdvQixjQUVBLE1BRUF6akIsSUFBQSxTQUFBOUQsR0FJQSxHQUFBc21CLEdBQUF0bUIsRUFBQVQsVUFDQSttQixLQUNBQSxFQUFBaUIsY0FFQWpCLEVBQUEvbUIsWUFDQSttQixFQUFBL21CLFdBQUFnb0Isa0JBT0ExbkIsR0FBQXlCLE1BQ0EsV0FDQSxXQUNBLFlBQ0EsY0FDQSxjQUNBLFVBQ0EsVUFDQSxTQUNBLGNBQ0EsbUJBQ0EsV0FDQXpCLEdBQUFnOUIsUUFBQWgrQixLQUFBcUIsZUFBQXJCLE9Ba0JBZ0IsR0FBQTZJLEdBQUF5QixRQUNBK3lCLFNBQUEsU0FBQWw3QixHQUNBLEdBQUFtN0IsR0FBQW45QixFQUFBaUIsRUFBQW04QixFQUFBQyxFQUFBcjJCLEVBQUFzMkIsRUFDQTc4QixFQUFBLENBRUEsSUFBQVosR0FBQVUsV0FBQXlCLEdBQ0EsTUFBQW5ELE1BQUF5QyxLQUFBLFNBQUEwRixHQUNBbkgsR0FBQWhCLE1BQUFxK0IsU0FBQWw3QixFQUFBdEIsS0FBQTdCLEtBQUFtSSxFQUFBa00sRUFBQXJVLFNBSUEsSUFBQSxnQkFBQW1ELElBQUFBLEVBR0EsSUFGQW03QixFQUFBbjdCLEVBQUFULE1BQUFDLFFBRUF4QixFQUFBbkIsS0FBQTRCLE1BSUEsR0FIQTI4QixFQUFBbHFCLEVBQUFsVCxHQUNBaUIsRUFBQSxJQUFBakIsRUFBQVcsVUFBQSxJQUFBcVMsRUFBQW9xQixHQUFBLElBRUEsQ0FFQSxJQURBcDJCLEVBQUEsRUFDQXEyQixFQUFBRixFQUFBbjJCLE1BQ0EvRixFQUFBTCxRQUFBLElBQUF5OEIsRUFBQSxLQUFBLElBQ0FwOEIsR0FBQW84QixFQUFBLElBS0FDLEdBQUF0cUIsRUFBQS9SLEdBQ0FtOEIsSUFBQUUsR0FDQXQ5QixFQUFBd2EsYUFBQSxRQUFBOGlCLEdBTUEsTUFBQXorQixPQUdBMCtCLFlBQUEsU0FBQXY3QixHQUNBLEdBQUFtN0IsR0FBQW45QixFQUFBaUIsRUFBQW04QixFQUFBQyxFQUFBcjJCLEVBQUFzMkIsRUFDQTc4QixFQUFBLENBRUEsSUFBQVosR0FBQVUsV0FBQXlCLEdBQ0EsTUFBQW5ELE1BQUF5QyxLQUFBLFNBQUEwRixHQUNBbkgsR0FBQWhCLE1BQUEwK0IsWUFBQXY3QixFQUFBdEIsS0FBQTdCLEtBQUFtSSxFQUFBa00sRUFBQXJVLFNBSUEsS0FBQWtLLFVBQUFwSixPQUNBLE1BQUFkLE1BQUFnbUIsS0FBQSxRQUFBLEdBR0EsSUFBQSxnQkFBQTdpQixJQUFBQSxFQUdBLElBRkFtN0IsRUFBQW43QixFQUFBVCxNQUFBQyxRQUVBeEIsRUFBQW5CLEtBQUE0QixNQU1BLEdBTEEyOEIsRUFBQWxxQixFQUFBbFQsR0FHQWlCLEVBQUEsSUFBQWpCLEVBQUFXLFVBQUEsSUFBQXFTLEVBQUFvcUIsR0FBQSxJQUVBLENBRUEsSUFEQXAyQixFQUFBLEVBQ0FxMkIsRUFBQUYsRUFBQW4yQixNQUdBLEtBQUEvRixFQUFBTCxRQUFBLElBQUF5OEIsRUFBQSxNQUFBLEdBQ0FwOEIsRUFBQUEsRUFBQXdDLFFBQUEsSUFBQTQ1QixFQUFBLElBQUEsSUFLQUMsR0FBQXRxQixFQUFBL1IsR0FDQW04QixJQUFBRSxHQUNBdDlCLEVBQUF3YSxhQUFBLFFBQUE4aUIsR0FNQSxNQUFBeitCLE9BR0EyK0IsWUFBQSxTQUFBeDdCLEVBQUF5N0IsR0FDQSxHQUFBNzlCLFNBQUFvQyxFQUVBLE9BQUEsaUJBQUF5N0IsSUFBQSxXQUFBNzlCLEVBQ0E2OUIsRUFBQTUrQixLQUFBcStCLFNBQUFsN0IsR0FBQW5ELEtBQUEwK0IsWUFBQXY3QixHQUdBbkMsR0FBQVUsV0FBQXlCLEdBQ0FuRCxLQUFBeUMsS0FBQSxTQUFBYixHQUNBWixHQUFBaEIsTUFBQTIrQixZQUNBeDdCLEVBQUF0QixLQUFBN0IsS0FBQTRCLEVBQUF5UyxFQUFBclUsTUFBQTQrQixHQUNBQSxLQUtBNStCLEtBQUF5QyxLQUFBLFdBQ0EsR0FBQWlpQixHQUFBOWlCLEVBQUEySyxFQUFBc3lCLENBRUEsSUFBQSxXQUFBOTlCLEVBT0EsSUFKQWEsRUFBQSxFQUNBMkssRUFBQXZMLEdBQUFoQixNQUNBNitCLEVBQUExN0IsRUFBQVQsTUFBQUMsUUFFQStoQixFQUFBbWEsRUFBQWo5QixNQUdBMkssRUFBQXV5QixTQUFBcGEsR0FDQW5ZLEVBQUFteUIsWUFBQWhhLEdBRUFuWSxFQUFBOHhCLFNBQUEzWixZQUtBN2dCLEtBQUFWLEdBQUEsWUFBQXBDLElBQ0EyakIsRUFBQXJRLEVBQUFyVSxNQUNBMGtCLEdBR0E1ZCxHQUFBN0IsSUFBQWpGLEtBQUEsZ0JBQUEwa0IsR0FPQTFrQixLQUFBMmIsY0FDQTNiLEtBQUEyYixhQUFBLFFBQ0ErSSxJQUFBLElBQUF2aEIsRUFDQSxHQUNBMkQsR0FBQUMsSUFBQS9HLEtBQUEsa0JBQUEsUUFPQTgrQixTQUFBLFNBQUFsMUIsR0FDQSxHQUFBOGEsR0FBQXZqQixFQUNBUyxFQUFBLENBR0EsS0FEQThpQixFQUFBLElBQUE5YSxFQUFBLElBQ0F6SSxFQUFBbkIsS0FBQTRCLE1BQ0EsR0FBQSxJQUFBVCxFQUFBVyxXQUNBLElBQUFxUyxFQUFBRSxFQUFBbFQsSUFBQSxLQUFBWSxRQUFBMmlCLElBQUEsRUFDQSxPQUFBLENBSUEsUUFBQSxJQU9BLElBQUFxYSxJQUFBLEtBRUEvOUIsSUFBQTZJLEdBQUF5QixRQUNBd0QsSUFBQSxTQUFBM0wsR0FDQSxHQUFBOE4sR0FBQTdKLEVBQUExRixFQUNBUCxFQUFBbkIsS0FBQSxFQUVBLEVBQUEsR0FBQWtLLFVBQUFwSixPQTRCQSxNQUZBWSxHQUFBVixHQUFBVSxXQUFBeUIsR0FFQW5ELEtBQUF5QyxLQUFBLFNBQUFiLEdBQ0EsR0FBQWtOLEVBRUEsS0FBQTlPLEtBQUE4QixXQUtBZ04sRUFEQXBOLEVBQ0F5QixFQUFBdEIsS0FBQTdCLEtBQUE0QixFQUFBWixHQUFBaEIsTUFBQThPLE9BRUEzTCxFQUlBLE1BQUEyTCxFQUNBQSxFQUFBLEdBRUEsZ0JBQUFBLEdBQ0FBLEdBQUEsR0FFQXlELE1BQUFDLFFBQUExRCxLQUNBQSxFQUFBOU4sR0FBQTBMLElBQUFvQyxFQUFBLFNBQUEzTCxHQUNBLE1BQUEsT0FBQUEsRUFBQSxHQUFBQSxFQUFBLE9BSUE4TixFQUFBalEsR0FBQWcrQixTQUFBaC9CLEtBQUFlLE9BQUFDLEdBQUFnK0IsU0FBQWgvQixLQUFBa0IsU0FBQUcsaUJBR0EsT0FBQTRQLFFBQUFwTixLQUFBb04sRUFBQWhNLElBQUFqRixLQUFBOE8sRUFBQSxXQUNBOU8sS0FBQW1ELE1BQUEyTCxLQXpEQSxJQUFBM04sRUFJQSxPQUhBOFAsRUFBQWpRLEdBQUFnK0IsU0FBQTc5QixFQUFBSixPQUNBQyxHQUFBZytCLFNBQUE3OUIsRUFBQUQsU0FBQUcsaUJBR0EsT0FBQTRQLFFBQ0FwTixNQUFBdUQsRUFBQTZKLEVBQUFsSyxJQUFBNUYsRUFBQSxVQUVBaUcsR0FHQUEsRUFBQWpHLEVBQUFnQyxNQUdBLGdCQUFBaUUsR0FDQUEsRUFBQXhDLFFBQUFtNkIsR0FBQSxJQUlBLE1BQUEzM0IsRUFBQSxHQUFBQSxPQTRDQXBHLEdBQUFzSyxRQUNBMHpCLFVBQ0EvTyxRQUNBbHBCLElBQUEsU0FBQTVGLEdBRUEsR0FBQTJOLEdBQUE5TixHQUFBK2YsS0FBQWlGLEtBQUE3a0IsRUFBQSxRQUNBLE9BQUEsT0FBQTJOLEVBQ0FBLEVBTUFxRixFQUFBblQsR0FBQVQsS0FBQVksTUFHQThhLFFBQ0FsVixJQUFBLFNBQUE1RixHQUNBLEdBQUFnQyxHQUFBOHNCLEVBQUFydUIsRUFDQVcsRUFBQXBCLEVBQUFvQixRQUNBc0UsRUFBQTFGLEVBQUF1bkIsY0FDQTVlLEVBQUEsZUFBQTNJLEVBQUFKLEtBQ0E2RixFQUFBa0QsRUFBQSxRQUNBMkUsRUFBQTNFLEVBQUFqRCxFQUFBLEVBQUF0RSxFQUFBekIsTUFVQSxLQVBBYyxFQURBaUYsRUFBQSxFQUNBNEgsRUFHQTNFLEVBQUFqRCxFQUFBLEVBSUFqRixFQUFBNk0sRUFBQTdNLElBS0EsR0FKQXF1QixFQUFBMXRCLEVBQUFYLElBSUFxdUIsRUFBQTdhLFVBQUF4VCxJQUFBaUYsS0FHQW9wQixFQUFBN1MsWUFDQTZTLEVBQUF2dkIsV0FBQTBjLFdBQ0FsYyxFQUFBK3VCLEVBQUF2dkIsV0FBQSxhQUFBLENBTUEsR0FIQXlDLEVBQUFuQyxHQUFBaXZCLEdBQUFuaEIsTUFHQWhGLEVBQ0EsTUFBQTNHLEVBSUF5RCxHQUFBcUMsS0FBQTlGLEdBSUEsTUFBQXlELElBR0EzQixJQUFBLFNBQUE5RCxFQUFBZ0MsR0FNQSxJQUxBLEdBQUE4N0IsR0FBQWhQLEVBQ0ExdEIsRUFBQXBCLEVBQUFvQixRQUNBcUUsRUFBQTVGLEdBQUErWSxVQUFBNVcsR0FDQXZCLEVBQUFXLEVBQUF6QixPQUVBYyxLQUNBcXVCLEVBQUExdEIsRUFBQVgsSUFJQXF1QixFQUFBN2EsU0FDQXBVLEdBQUFtSSxRQUFBbkksR0FBQWcrQixTQUFBL08sT0FBQWxwQixJQUFBa3BCLEdBQUFycEIsSUFBQSxLQUVBcTRCLEdBQUEsRUFVQSxPQUhBQSxLQUNBOTlCLEVBQUF1bkIsZUFBQSxHQUVBOWhCLE9BT0E1RixHQUFBeUIsTUFBQSxRQUFBLFlBQUEsV0FDQXpCLEdBQUFnK0IsU0FBQWgvQixPQUNBaUYsSUFBQSxTQUFBOUQsRUFBQWdDLEdBQ0EsR0FBQW9QLE1BQUFDLFFBQUFyUCxHQUNBLE1BQUFoQyxHQUFBc0ssUUFBQXpLLEdBQUFtSSxRQUFBbkksR0FBQUcsR0FBQTJOLE1BQUEzTCxJQUFBLElBSUFpSixHQUFBK3dCLFVBQ0FuOEIsR0FBQWcrQixTQUFBaC9CLE1BQUErRyxJQUFBLFNBQUE1RixHQUNBLE1BQUEsUUFBQUEsRUFBQTJELGFBQUEsU0FBQSxLQUFBM0QsRUFBQWdDLFNBV0EsSUFBQSs3QixJQUFBLGlDQUVBbCtCLElBQUFzSyxPQUFBdEssR0FBQWdKLE9BRUEycEIsUUFBQSxTQUFBM3BCLEVBQUExRixFQUFBbkQsRUFBQWcrQixHQUVBLEdBQUF2OUIsR0FBQVEsRUFBQTRGLEVBQUFvM0IsRUFBQUMsRUFBQWgwQixFQUFBMmhCLEVBQ0FzUyxHQUFBbitCLEdBQUF2QixJQUNBbUIsRUFBQThXLEdBQUFoVyxLQUFBbUksRUFBQSxRQUFBQSxFQUFBakosS0FBQWlKLEVBQ0F1bkIsRUFBQTFaLEdBQUFoVyxLQUFBbUksRUFBQSxhQUFBQSxFQUFBOG5CLFVBQUEzYSxNQUFBLE9BS0EsSUFIQS9VLEVBQUE0RixFQUFBN0csRUFBQUEsR0FBQXZCLEdBR0EsSUFBQXVCLEVBQUFXLFVBQUEsSUFBQVgsRUFBQVcsV0FLQW85QixHQUFBajlCLEtBQUFsQixFQUFBQyxHQUFBZ0osTUFBQTBuQixhQUlBM3dCLEVBQUFnQixRQUFBLE1BQUEsSUFHQXd2QixFQUFBeHdCLEVBQUFvVyxNQUFBLEtBQ0FwVyxFQUFBd3dCLEVBQUFqYixRQUNBaWIsRUFBQXhZLFFBRUFzbUIsRUFBQXQrQixFQUFBZ0IsUUFBQSxLQUFBLEdBQUEsS0FBQWhCLEVBR0FpSixFQUFBQSxFQUFBaEosR0FBQW1ELFNBQ0E2RixFQUNBLEdBQUFoSixJQUFBcXlCLE1BQUF0eUIsRUFBQSxnQkFBQWlKLElBQUFBLEdBR0FBLEVBQUF1MUIsVUFBQUosRUFBQSxFQUFBLEVBQ0FuMUIsRUFBQThuQixVQUFBUCxFQUFBbmQsS0FBQSxLQUNBcEssRUFBQTZvQixXQUFBN29CLEVBQUE4bkIsVUFDQSxHQUFBelAsUUFBQSxVQUFBa1AsRUFBQW5kLEtBQUEsaUJBQUEsV0FDQSxLQUdBcEssRUFBQTRJLFdBQUEvTyxHQUNBbUcsRUFBQTJMLFNBQ0EzTCxFQUFBMkwsT0FBQXhVLEdBSUFtRCxFQUFBLE1BQUFBLEdBQ0EwRixHQUNBaEosR0FBQStZLFVBQUF6VixHQUFBMEYsSUFHQWdqQixFQUFBaHNCLEdBQUFnSixNQUFBZ2pCLFFBQUFqc0IsT0FDQW8rQixJQUFBblMsRUFBQTJHLFVBQUEsSUFBQTNHLEVBQUEyRyxRQUFBL3ZCLE1BQUF6QyxFQUFBbUQsSUFBQSxDQU1BLElBQUE2NkIsSUFBQW5TLEVBQUEwRyxXQUFBMXlCLEdBQUFDLFNBQUFFLEdBQUEsQ0FNQSxJQUpBaStCLEVBQUFwUyxFQUFBNEUsY0FBQTd3QixFQUNBbStCLEdBQUFqOUIsS0FBQW05QixFQUFBcitCLEtBQ0FxQixFQUFBQSxFQUFBMUIsWUFFQTBCLEVBQUFBLEVBQUFBLEVBQUExQixXQUNBNCtCLEVBQUFyMkIsS0FBQTdHLEdBQ0E0RixFQUFBNUYsQ0FJQTRGLE1BQUE3RyxFQUFBbUYsZUFBQTFHLEtBQ0EwL0IsRUFBQXIyQixLQUFBakIsRUFBQXNjLGFBQUF0YyxFQUFBdzNCLGNBQUF6L0IsR0FNQSxJQURBNkIsRUFBQSxHQUNBUSxFQUFBazlCLEVBQUExOUIsUUFBQW9JLEVBQUEwb0Isd0JBRUExb0IsRUFBQWpKLEtBQUFhLEVBQUEsRUFDQXc5QixFQUNBcFMsRUFBQTZFLFVBQUE5d0IsRUFHQXNLLEdBQUF2RSxHQUFBQyxJQUFBM0UsRUFBQSxlQUFBNEgsRUFBQWpKLE9BQ0ErRixHQUFBQyxJQUFBM0UsRUFBQSxVQUNBaUosR0FDQUEsRUFBQXpILE1BQUF4QixFQUFBa0MsSUFJQStHLEVBQUFnMEIsR0FBQWo5QixFQUFBaTlCLEtBQ0FoMEIsRUFBQXpILE9BQUFtckIsR0FBQTNzQixLQUNBNEgsRUFBQTRJLE9BQUF2SCxFQUFBekgsTUFBQXhCLEVBQUFrQyxJQUNBLElBQUEwRixFQUFBNEksUUFDQTVJLEVBQUE4b0IsaUJBb0NBLE9BaENBOW9CLEdBQUFqSixLQUFBQSxFQUdBbytCLEdBQUFuMUIsRUFBQWdxQixzQkFFQWhILEVBQUF0a0IsV0FDQSxJQUFBc2tCLEVBQUF0a0IsU0FBQTlFLE1BQUEwN0IsRUFBQXJlLE1BQUEzYyxLQUNBeXFCLEdBQUE1dEIsSUFJQWsrQixHQUFBcitCLEdBQUFVLFdBQUFQLEVBQUFKLE1BQUFDLEdBQUFDLFNBQUFFLEtBR0E2RyxFQUFBN0csRUFBQWsrQixHQUVBcjNCLElBQ0E3RyxFQUFBaytCLEdBQUEsTUFJQXIrQixHQUFBZ0osTUFBQTBuQixVQUFBM3dCLEVBQ0FJLEVBQUFKLEtBQ0FDLEdBQUFnSixNQUFBMG5CLGNBQUE3dEIsR0FFQW1FLElBQ0E3RyxFQUFBaytCLEdBQUFyM0IsSUFNQWdDLEVBQUE0SSxTQUtBNnNCLFNBQUEsU0FBQTErQixFQUFBSSxFQUFBNkksR0FDQSxHQUFBakYsR0FBQS9ELEdBQUFzSyxPQUNBLEdBQUF0SyxJQUFBcXlCLE1BQ0FycEIsR0FFQWpKLEtBQUFBLEVBQ0FxekIsYUFBQSxHQUlBcHpCLElBQUFnSixNQUFBMnBCLFFBQUE1dUIsRUFBQSxLQUFBNUQsTUFLQUgsR0FBQTZJLEdBQUF5QixRQUVBcW9CLFFBQUEsU0FBQTV5QixFQUFBdUQsR0FDQSxNQUFBdEUsTUFBQXlDLEtBQUEsV0FDQXpCLEdBQUFnSixNQUFBMnBCLFFBQUE1eUIsRUFBQXVELEVBQUF0RSxTQUdBMC9CLGVBQUEsU0FBQTMrQixFQUFBdUQsR0FDQSxHQUFBbkQsR0FBQW5CLEtBQUEsRUFDQSxJQUFBbUIsRUFDQSxNQUFBSCxJQUFBZ0osTUFBQTJwQixRQUFBNXlCLEVBQUF1RCxFQUFBbkQsR0FBQSxNQU1BSCxHQUFBeUIsS0FBQSx3TEFFQTBVLE1BQUEsS0FDQSxTQUFBdlYsRUFBQVIsR0FHQUosR0FBQTZJLEdBQUF6SSxHQUFBLFNBQUFrRCxFQUFBdUYsR0FDQSxNQUFBSyxXQUFBcEosT0FBQSxFQUNBZCxLQUFBMEosR0FBQXRJLEVBQUEsS0FBQWtELEVBQUF1RixHQUNBN0osS0FBQTJ6QixRQUFBdnlCLE1BSUFKLEdBQUE2SSxHQUFBeUIsUUFDQXEwQixNQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQTcvQixNQUFBaTJCLFdBQUEySixHQUFBMUosV0FBQTJKLEdBQUFELE1BT0F4ekIsR0FBQTB6QixRQUFBLGFBQUEvL0IsR0FXQXFNLEdBQUEwekIsU0FDQTkrQixHQUFBeUIsTUFBQTRsQixNQUFBLFVBQUF1TCxLQUFBLFlBQUEsU0FBQXJpQixFQUFBZ2hCLEdBR0EsR0FBQTVWLEdBQUEsU0FBQTNTLEdBQ0FoSixHQUFBZ0osTUFBQXkxQixTQUFBbE4sRUFBQXZvQixFQUFBMkwsT0FBQTNVLEdBQUFnSixNQUFBdW9CLElBQUF2b0IsSUFHQWhKLElBQUFnSixNQUFBZ2pCLFFBQUF1RixJQUNBUCxNQUFBLFdBQ0EsR0FBQTV4QixHQUFBSixLQUFBc0csZUFBQXRHLEtBQ0ErL0IsRUFBQWo1QixHQUFBc0UsT0FBQWhMLEVBQUFteUIsRUFFQXdOLElBQ0EzL0IsRUFBQW9rQixpQkFBQWpULEVBQUFvTCxHQUFBLEdBRUE3VixHQUFBc0UsT0FBQWhMLEVBQUFteUIsR0FBQXdOLEdBQUEsR0FBQSxJQUVBNU4sU0FBQSxXQUNBLEdBQUEveEIsR0FBQUosS0FBQXNHLGVBQUF0RyxLQUNBKy9CLEVBQUFqNUIsR0FBQXNFLE9BQUFoTCxFQUFBbXlCLEdBQUEsQ0FFQXdOLEdBS0FqNUIsR0FBQXNFLE9BQUFoTCxFQUFBbXlCLEVBQUF3TixJQUpBMy9CLEVBQUE0RCxvQkFBQXVOLEVBQUFvTCxHQUFBLEdBQ0E3VixHQUFBZ0csT0FBQTFNLEVBQUFteUIsT0FTQSxJQUFBcEssSUFBQXBvQixFQUFBb29CLFNBRUE2WCxHQUFBaC9CLEdBQUFrUCxNQUVBK3ZCLEdBQUEsSUFLQWovQixJQUFBay9CLFNBQUEsU0FBQTU3QixHQUNBLEdBQUE4WixFQUNBLEtBQUE5WixHQUFBLGdCQUFBQSxHQUNBLE1BQUEsS0FLQSxLQUNBOFosR0FBQSxHQUFBcmUsR0FBQW9nQyxXQUFBQyxnQkFBQTk3QixFQUFBLFlBQ0EsTUFBQVMsR0FDQXFaLE1BQUF2YSxHQU1BLE1BSEF1YSxLQUFBQSxFQUFBL1cscUJBQUEsZUFBQXZHLFFBQ0FFLEdBQUFzVyxNQUFBLGdCQUFBaFQsR0FFQThaLEVBSUEsSUFDQTNKLElBQUEsUUFDQTRyQixHQUFBLFNBQ0FDLEdBQUEsd0NBQ0FDLEdBQUEsb0NBMENBdi9CLElBQUF3L0IsTUFBQSxTQUFBMWpCLEVBQUF0SSxHQUNBLEdBQUFELEdBQ0F5QixLQUNBNUwsRUFBQSxTQUFBekYsRUFBQTg3QixHQUdBLEdBQUF0OUIsR0FBQW5DLEdBQUFVLFdBQUErK0IsR0FDQUEsSUFDQUEsQ0FFQXpxQixHQUFBQSxFQUFBbFYsUUFBQTQvQixtQkFBQS83QixHQUFBLElBQ0ErN0IsbUJBQUEsTUFBQXY5QixFQUFBLEdBQUFBLEdBSUEsSUFBQW9QLE1BQUFDLFFBQUFzSyxJQUFBQSxFQUFBdkUsU0FBQXZYLEdBQUFtWSxjQUFBMkQsR0FHQTliLEdBQUF5QixLQUFBcWEsRUFBQSxXQUNBMVMsRUFBQXBLLEtBQUFvQixLQUFBcEIsS0FBQW1ELGFBT0EsS0FBQW9SLElBQUF1SSxHQUNBeEksRUFBQUMsRUFBQXVJLEVBQUF2SSxHQUFBQyxFQUFBcEssRUFLQSxPQUFBNEwsR0FBQTVCLEtBQUEsTUFHQXBULEdBQUE2SSxHQUFBeUIsUUFDQXExQixVQUFBLFdBQ0EsTUFBQTMvQixJQUFBdy9CLE1BQUF4Z0MsS0FBQTRnQyxtQkFFQUEsZUFBQSxXQUNBLE1BQUE1Z0MsTUFBQTBNLElBQUEsV0FHQSxHQUFBbkwsR0FBQVAsR0FBQW1FLEtBQUFuRixLQUFBLFdBQ0EsT0FBQXVCLEdBQUFQLEdBQUErWSxVQUFBeFksR0FBQXZCLE9BRUFrQyxPQUFBLFdBQ0EsR0FBQW5CLEdBQUFmLEtBQUFlLElBR0EsT0FBQWYsTUFBQW9CLE9BQUFKLEdBQUFoQixNQUFBb3FCLEdBQUEsY0FDQW1XLEdBQUF0K0IsS0FBQWpDLEtBQUFrQixZQUFBby9CLEdBQUFyK0IsS0FBQWxCLEtBQ0FmLEtBQUF5TCxVQUFBRCxHQUFBdkosS0FBQWxCLE1BRUEyTCxJQUFBLFNBQUE5SyxFQUFBVCxHQUNBLEdBQUEyTixHQUFBOU4sR0FBQWhCLE1BQUE4TyxLQUVBLE9BQUEsT0FBQUEsRUFDQSxLQUdBeUQsTUFBQUMsUUFBQTFELEdBQ0E5TixHQUFBMEwsSUFBQW9DLEVBQUEsU0FBQUEsR0FDQSxPQUFBMU4sS0FBQUQsRUFBQUMsS0FBQStCLE1BQUEyTCxFQUFBbEssUUFBQXk3QixHQUFBLFlBSUFqL0IsS0FBQUQsRUFBQUMsS0FBQStCLE1BQUEyTCxFQUFBbEssUUFBQXk3QixHQUFBLFdBQ0F0NUIsUUFLQSxJQUNBODVCLElBQUEsT0FDQUMsR0FBQSxPQUNBQyxHQUFBLGdCQUNBQyxHQUFBLDZCQUdBQyxHQUFBLDREQUNBQyxHQUFBLGlCQUNBQyxHQUFBLFFBV0FydUIsTUFPQTJDLE1BR0EyckIsR0FBQSxLQUFBcjFCLE9BQUEsS0FHQXMxQixHQUFBemhDLEdBQUFVLGNBQUEsSUFDQStnQyxJQUFBOVksS0FBQUosR0FBQUksS0FnUEF2bkIsR0FBQXNLLFFBR0FnMkIsT0FBQSxFQUdBQyxnQkFDQUMsUUFFQTFyQixjQUNBMnJCLElBQUF0WixHQUFBSSxLQUNBeG5CLEtBQUEsTUFDQTJnQyxRQUFBVCxHQUFBaC9CLEtBQUFrbUIsR0FBQXdaLFVBQ0FuaUMsUUFBQSxFQUNBb2lDLGFBQUEsRUFDQUMsT0FBQSxFQUNBQyxZQUFBLG1EQWNBQyxTQUNBdkcsSUFBQTRGLEdBQ0E3Z0MsS0FBQSxhQUNBa00sS0FBQSxZQUNBMlIsSUFBQSw0QkFDQTRqQixLQUFBLHFDQUdBM3JCLFVBQ0ErSCxJQUFBLFVBQ0EzUixLQUFBLFNBQ0F1MUIsS0FBQSxZQUdBL3FCLGdCQUNBbUgsSUFBQSxjQUNBN2QsS0FBQSxlQUNBeWhDLEtBQUEsZ0JBS0F2ckIsWUFHQXdyQixTQUFBcmUsT0FHQXNlLGFBQUEsRUFHQUMsWUFBQTM5QixLQUFBQyxNQUdBMjlCLFdBQUFwaEMsR0FBQWsvQixVQU9BcnFCLGFBQ0E0ckIsS0FBQSxFQUNBdjZCLFNBQUEsSUFPQW03QixVQUFBLFNBQUExc0IsRUFBQTJzQixHQUNBLE1BQUFBLEdBR0E1c0IsRUFBQUEsRUFBQUMsRUFBQTNVLEdBQUE4VSxjQUFBd3NCLEdBR0E1c0IsRUFBQTFVLEdBQUE4VSxhQUFBSCxJQUdBNHNCLGNBQUE3dEIsRUFBQTVCLElBQ0EwdkIsY0FBQTl0QixFQUFBZSxJQUdBZ3RCLEtBQUEsU0FBQWhCLEVBQUFsL0IsR0FtVUEsUUFBQWtCLEdBQUFpL0IsRUFBQUMsRUFBQTFzQixFQUFBMnNCLEdBQ0EsR0FBQWhzQixHQUFBaXNCLEVBQUF2ckIsRUFBQVgsRUFBQW1zQixFQUNBQyxFQUFBSixDQUdBNStCLEtBSUFBLEdBQUEsRUFHQWkvQixHQUNBampDLEVBQUFtOUIsYUFBQThGLEdBS0FDLE1BQUFwL0IsR0FHQXEvQixFQUFBTixHQUFBLEdBR0ExdEIsRUFBQXVaLFdBQUFpVSxFQUFBLEVBQUEsRUFBQSxFQUdBOXJCLEVBQUE4ckIsR0FBQSxLQUFBQSxFQUFBLEtBQUEsTUFBQUEsRUFHQXpzQixJQUNBVSxFQUFBWixFQUFBQyxFQUFBZCxFQUFBZSxJQUlBVSxFQUFBRCxHQUFBVixFQUFBVyxFQUFBekIsRUFBQTBCLEdBR0FBLEdBR0FaLEVBQUFtdEIsYUFDQUwsRUFBQTV0QixFQUFBc0Isa0JBQUEsaUJBQ0Fzc0IsSUFDQTloQyxHQUFBdWdDLGFBQUE2QixHQUFBTixJQUVBQSxFQUFBNXRCLEVBQUFzQixrQkFBQSxXQUVBeFYsR0FBQXdnQyxLQUFBNEIsR0FBQU4sSUFLQSxNQUFBSixHQUFBLFNBQUExc0IsRUFBQWpWLEtBQ0FnaUMsRUFBQSxZQUdBLE1BQUFMLEVBQ0FLLEVBQUEsZUFJQUEsRUFBQXBzQixFQUFBVSxNQUNBd3JCLEVBQUFsc0IsRUFBQXJTLEtBQ0FnVCxFQUFBWCxFQUFBVyxNQUNBVixHQUFBVSxLQUtBQSxFQUFBeXJCLEdBQ0FMLEdBQUFLLElBQ0FBLEVBQUEsUUFDQUwsRUFBQSxJQUNBQSxFQUFBLEtBTUF4dEIsRUFBQXd0QixPQUFBQSxFQUNBeHRCLEVBQUE2dEIsWUFBQUosR0FBQUksR0FBQSxHQUdBbnNCLEVBQ0E3RCxFQUFBVSxZQUFBNHZCLEdBQUFSLEVBQUFFLEVBQUE3dEIsSUFFQW5DLEVBQUFlLFdBQUF1dkIsR0FBQW51QixFQUFBNnRCLEVBQUF6ckIsSUFJQXBDLEVBQUFvdUIsV0FBQUEsR0FDQUEsTUFBQXovQixHQUVBMC9CLEdBQ0FDLEVBQUE3UCxRQUFBL2MsRUFBQSxjQUFBLGFBQ0ExQixFQUFBYyxFQUFBWSxFQUFBaXNCLEVBQUF2ckIsSUFJQW1zQixFQUFBdFgsU0FBQWtYLEdBQUFudUIsRUFBQTZ0QixJQUVBUSxJQUNBQyxFQUFBN1AsUUFBQSxnQkFBQXplLEVBQUFjLE1BR0FoVixHQUFBc2dDLFFBQ0F0Z0MsR0FBQWdKLE1BQUEycEIsUUFBQSxjQTNhQSxnQkFBQThOLEtBQ0FsL0IsRUFBQWsvQixFQUNBQSxNQUFBNTlCLElBSUF0QixFQUFBQSxLQUVBLElBQUEwZ0MsR0FHQUcsRUFHQUYsRUFDQVEsRUFHQVYsRUFHQVcsRUFHQTUvQixFQUdBdy9CLEVBR0EzaEMsRUFHQWdpQyxFQUdBNXRCLEVBQUFoVixHQUFBcWhDLGFBQUE5L0IsR0FHQThnQyxFQUFBcnRCLEVBQUE5TyxTQUFBOE8sRUFHQXd0QixFQUFBeHRCLEVBQUE5TyxVQUNBbThCLEVBQUF2aEMsVUFBQXVoQyxFQUFBOXFCLFFBQ0F2WCxHQUFBcWlDLEdBQ0FyaUMsR0FBQWdKLE1BR0ErSSxFQUFBL1IsR0FBQWdTLFdBQ0F5d0IsRUFBQXppQyxHQUFBeXFCLFVBQUEsZUFHQTZYLEVBQUF0dEIsRUFBQXN0QixlQUdBTyxLQUNBQyxLQUdBQyxFQUFBLFdBR0E3dUIsR0FDQXVaLFdBQUEsRUFHQWpZLGtCQUFBLFNBQUE3UixHQUNBLEdBQUFqQyxFQUNBLElBQUFxQixFQUFBLENBQ0EsSUFBQTIvQixFQUVBLElBREFBLEtBQ0FoaEMsRUFBQXMrQixHQUFBaDdCLEtBQUFrOUIsSUFDQVEsRUFBQWhoQyxFQUFBLEdBQUFyQixlQUFBcUIsRUFBQSxFQUdBQSxHQUFBZ2hDLEVBQUEvK0IsRUFBQXRELGVBRUEsTUFBQSxPQUFBcUIsRUFBQSxLQUFBQSxHQUlBc2hDLHNCQUFBLFdBQ0EsTUFBQWpnQyxHQUFBbS9CLEVBQUEsTUFJQWUsaUJBQUEsU0FBQTdpQyxFQUFBK0IsR0FNQSxNQUxBLE9BQUFZLElBQ0EzQyxFQUFBMGlDLEVBQUExaUMsRUFBQUMsZUFDQXlpQyxFQUFBMWlDLEVBQUFDLGdCQUFBRCxFQUNBeWlDLEVBQUF6aUMsR0FBQStCLEdBRUFuRCxNQUlBa2tDLGlCQUFBLFNBQUFuakMsR0FJQSxNQUhBLE9BQUFnRCxJQUNBaVMsRUFBQU8sU0FBQXhWLEdBRUFmLE1BSUFzakMsV0FBQSxTQUFBNTJCLEdBQ0EsR0FBQXZNLEVBQ0EsSUFBQXVNLEVBQ0EsR0FBQTNJLEVBR0FtUixFQUFBcEQsT0FBQXBGLEVBQUF3SSxFQUFBd3RCLGFBSUEsS0FBQXZpQyxJQUFBdU0sR0FDQTQyQixFQUFBbmpDLElBQUFtakMsRUFBQW5qQyxHQUFBdU0sRUFBQXZNLEdBSUEsT0FBQUgsT0FJQW1rQyxNQUFBLFNBQUFwQixHQUNBLEdBQUFxQixHQUFBckIsR0FBQWdCLENBS0EsT0FKQWQsSUFDQUEsRUFBQWtCLE1BQUFDLEdBRUEzZ0MsRUFBQSxFQUFBMmdDLEdBQ0Fwa0MsTUFvQkEsSUFmQStTLEVBQUF2UCxRQUFBMFIsR0FLQWMsRUFBQXlyQixNQUFBQSxHQUFBenJCLEVBQUF5ckIsS0FBQXRaLEdBQUFJLE1BQUEsSUFDQTNqQixRQUFBdThCLEdBQUFoWixHQUFBd1osU0FBQSxNQUdBM3JCLEVBQUFqVixLQUFBd0IsRUFBQWdCLFFBQUFoQixFQUFBeEIsTUFBQWlWLEVBQUF6UyxRQUFBeVMsRUFBQWpWLEtBR0FpVixFQUFBakIsV0FBQWlCLEVBQUFsQixVQUFBLEtBQUF6VCxjQUFBcUIsTUFBQUMsTUFBQSxJQUdBLE1BQUFxVCxFQUFBcXVCLFlBQUEsQ0FDQVYsRUFBQS9qQyxHQUFBVSxjQUFBLElBS0EsS0FDQXFqQyxFQUFBcGIsS0FBQXZTLEVBQUF5ckIsSUFJQWtDLEVBQUFwYixLQUFBb2IsRUFBQXBiLEtBQ0F2UyxFQUFBcXVCLFlBQUFoRCxHQUFBTSxTQUFBLEtBQUFOLEdBQUFpRCxNQUNBWCxFQUFBaEMsU0FBQSxLQUFBZ0MsRUFBQVcsS0FDQSxNQUFBdi9CLEdBSUFpUixFQUFBcXVCLGFBQUEsR0FhQSxHQVJBcnVCLEVBQUExUixNQUFBMFIsRUFBQTRyQixhQUFBLGdCQUFBNXJCLEdBQUExUixPQUNBMFIsRUFBQTFSLEtBQUF0RCxHQUFBdy9CLE1BQUF4cUIsRUFBQTFSLEtBQUEwUixFQUFBeEIsY0FJQVMsRUFBQW5DLEdBQUFrRCxFQUFBelQsRUFBQTJTLEdBR0FuUixFQUNBLE1BQUFtUixFQUtBcXVCLEdBQUF2aUMsR0FBQWdKLE9BQUFnTSxFQUFBeFcsT0FHQStqQyxHQUFBLEdBQUF2aUMsR0FBQXNnQyxVQUNBdGdDLEdBQUFnSixNQUFBMnBCLFFBQUEsYUFJQTNkLEVBQUFqVixLQUFBaVYsRUFBQWpWLEtBQUFrTixjQUdBK0gsRUFBQXV1QixZQUFBckQsR0FBQWovQixLQUFBK1QsRUFBQWpWLE1BS0FxaUMsRUFBQXB0QixFQUFBeXJCLElBQUE3OEIsUUFBQWs4QixHQUFBLElBR0E5cUIsRUFBQXV1QixXQXVCQXZ1QixFQUFBMVIsTUFBQTBSLEVBQUE0ckIsYUFDQSxLQUFBNXJCLEVBQUE4ckIsYUFBQSxJQUFBLy9CLFFBQUEsdUNBQ0FpVSxFQUFBMVIsS0FBQTBSLEVBQUExUixLQUFBTSxRQUFBaThCLEdBQUEsT0F0QkErQyxFQUFBNXRCLEVBQUF5ckIsSUFBQTM5QixNQUFBcy9CLEVBQUF0aUMsUUFHQWtWLEVBQUExUixPQUNBOCtCLElBQUFuRCxHQUFBaCtCLEtBQUFtaEMsR0FBQSxJQUFBLEtBQUFwdEIsRUFBQTFSLFdBR0EwUixHQUFBMVIsT0FJQSxJQUFBMFIsRUFBQW1HLFFBQ0FpbkIsRUFBQUEsRUFBQXgrQixRQUFBbThCLEdBQUEsTUFDQTZDLEdBQUEzRCxHQUFBaCtCLEtBQUFtaEMsR0FBQSxJQUFBLEtBQUEsS0FBQXBELEtBQUE0RCxHQUlBNXRCLEVBQUF5ckIsSUFBQTJCLEVBQUFRLEdBU0E1dEIsRUFBQW10QixhQUNBbmlDLEdBQUF1Z0MsYUFBQTZCLElBQ0FsdUIsRUFBQSt1QixpQkFBQSxvQkFBQWpqQyxHQUFBdWdDLGFBQUE2QixJQUVBcGlDLEdBQUF3Z0MsS0FBQTRCLElBQ0FsdUIsRUFBQSt1QixpQkFBQSxnQkFBQWpqQyxHQUFBd2dDLEtBQUE0QixNQUtBcHRCLEVBQUExUixNQUFBMFIsRUFBQXV1QixhQUFBLElBQUF2dUIsRUFBQThyQixhQUFBdi9CLEVBQUF1L0IsY0FDQTVzQixFQUFBK3VCLGlCQUFBLGVBQUFqdUIsRUFBQThyQixhQUlBNXNCLEVBQUErdUIsaUJBQ0EsU0FDQWp1QixFQUFBakIsVUFBQSxJQUFBaUIsRUFBQStyQixRQUFBL3JCLEVBQUFqQixVQUFBLElBQ0FpQixFQUFBK3JCLFFBQUEvckIsRUFBQWpCLFVBQUEsS0FDQSxNQUFBaUIsRUFBQWpCLFVBQUEsR0FBQSxLQUFBcXNCLEdBQUEsV0FBQSxJQUNBcHJCLEVBQUErckIsUUFBQSxLQUlBLEtBQUFuZ0MsSUFBQW9VLEdBQUE0c0IsUUFDQTF0QixFQUFBK3VCLGlCQUFBcmlDLEVBQUFvVSxFQUFBNHNCLFFBQUFoaEMsR0FJQSxJQUFBb1UsRUFBQXd1QixjQUNBLElBQUF4dUIsRUFBQXd1QixXQUFBM2lDLEtBQUF3aEMsRUFBQW51QixFQUFBYyxJQUFBalMsR0FHQSxNQUFBbVIsR0FBQWl2QixPQWVBLElBWEFKLEVBQUEsUUFHQU4sRUFBQXI1QixJQUFBNEwsRUFBQS9CLFVBQ0FpQixFQUFBelIsS0FBQXVTLEVBQUE2c0IsU0FDQTN0QixFQUFBeFIsS0FBQXNTLEVBQUFzQixPQUdBMnJCLEVBQUFodUIsRUFBQVEsR0FBQU8sRUFBQXpULEVBQUEyUyxHQUtBLENBU0EsR0FSQUEsRUFBQXVaLFdBQUEsRUFHQThVLEdBQ0FDLEVBQUE3UCxRQUFBLFlBQUF6ZSxFQUFBYyxJQUlBalMsRUFDQSxNQUFBbVIsRUFJQWMsR0FBQTZyQixPQUFBN3JCLEVBQUFpbkIsUUFBQSxJQUNBK0YsRUFBQWpqQyxFQUFBNlAsV0FBQSxXQUNBc0YsRUFBQWl2QixNQUFBLFlBQ0FudUIsRUFBQWluQixTQUdBLEtBQ0FsNUIsR0FBQSxFQUNBay9CLEVBQUF3QixLQUFBWixFQUFBcGdDLEdBQ0EsTUFBQXNCLEdBR0EsR0FBQWhCLEVBQ0EsS0FBQWdCLEVBSUF0QixJQUFBLEVBQUFzQixRQWhDQXRCLElBQUEsRUFBQSxlQXFKQSxPQUFBeVIsSUFHQXd2QixRQUFBLFNBQUFqRCxFQUFBbjlCLEVBQUF3SCxHQUNBLE1BQUE5SyxJQUFBK0YsSUFBQTA2QixFQUFBbjlCLEVBQUF3SCxFQUFBLFNBR0E2NEIsVUFBQSxTQUFBbEQsRUFBQTMxQixHQUNBLE1BQUE5SyxJQUFBK0YsSUFBQTA2QixNQUFBNTlCLEdBQUFpSSxFQUFBLGFBSUE5SyxHQUFBeUIsTUFBQSxNQUFBLFFBQUEsU0FBQWIsRUFBQTJCLEdBQ0F2QyxHQUFBdUMsR0FBQSxTQUFBaytCLEVBQUFuOUIsRUFBQXdILEVBQUEvSyxHQVVBLE1BUEFDLElBQUFVLFdBQUE0QyxLQUNBdkQsRUFBQUEsR0FBQStLLEVBQ0FBLEVBQUF4SCxFQUNBQSxNQUFBVCxJQUlBN0MsR0FBQXloQyxLQUFBemhDLEdBQUFzSyxRQUNBbTJCLElBQUFBLEVBQ0ExZ0MsS0FBQXdDLEVBQ0F1UixTQUFBL1QsRUFDQXVELEtBQUFBLEVBQ0F1K0IsUUFBQS8yQixHQUNBOUssR0FBQW1ZLGNBQUFzb0IsSUFBQUEsT0FLQXpnQyxHQUFBNEwsU0FBQSxTQUFBNjBCLEdBQ0EsTUFBQXpnQyxJQUFBeWhDLE1BQ0FoQixJQUFBQSxFQUdBMWdDLEtBQUEsTUFDQStULFNBQUEsU0FDQXFILE9BQUEsRUFDQTBsQixPQUFBLEVBQ0FyaUMsUUFBQSxFQUNBNFgsUUFBQSxLQUtBcFcsR0FBQTZJLEdBQUF5QixRQUNBczVCLFFBQUEsU0FBQW40QixHQUNBLEdBQUF4RSxFQXlCQSxPQXZCQWpJLE1BQUEsS0FDQWdCLEdBQUFVLFdBQUErSyxLQUNBQSxFQUFBQSxFQUFBNUssS0FBQTdCLEtBQUEsS0FJQWlJLEVBQUFqSCxHQUFBeUwsRUFBQXpNLEtBQUEsR0FBQXNHLGVBQUFrRyxHQUFBLEdBQUFHLE9BQUEsR0FFQTNNLEtBQUEsR0FBQVUsWUFDQXVILEVBQUErdUIsYUFBQWgzQixLQUFBLElBR0FpSSxFQUFBeUUsSUFBQSxXQUdBLElBRkEsR0FBQXZMLEdBQUFuQixLQUVBbUIsRUFBQTBqQyxtQkFDQTFqQyxFQUFBQSxFQUFBMGpDLGlCQUdBLE9BQUExakMsS0FDQTIxQixPQUFBOTJCLE9BR0FBLE1BR0E4a0MsVUFBQSxTQUFBcjRCLEdBQ0EsTUFBQXpMLElBQUFVLFdBQUErSyxHQUNBek0sS0FBQXlDLEtBQUEsU0FBQWIsR0FDQVosR0FBQWhCLE1BQUE4a0MsVUFBQXI0QixFQUFBNUssS0FBQTdCLEtBQUE0QixNQUlBNUIsS0FBQXlDLEtBQUEsV0FDQSxHQUFBOEosR0FBQXZMLEdBQUFoQixNQUNBcVcsRUFBQTlKLEVBQUE4SixVQUVBQSxHQUFBdlYsT0FDQXVWLEVBQUF1dUIsUUFBQW40QixHQUdBRixFQUFBdXFCLE9BQUFycUIsTUFLQXhFLEtBQUEsU0FBQXdFLEdBQ0EsR0FBQS9LLEdBQUFWLEdBQUFVLFdBQUErSyxFQUVBLE9BQUF6TSxNQUFBeUMsS0FBQSxTQUFBYixHQUNBWixHQUFBaEIsTUFBQTRrQyxRQUFBbGpDLEVBQUErSyxFQUFBNUssS0FBQTdCLEtBQUE0QixHQUFBNkssTUFJQXM0QixPQUFBLFNBQUFuN0IsR0FJQSxNQUhBNUosTUFBQXluQixPQUFBN2QsR0FBQW5JLElBQUEsUUFBQWdCLEtBQUEsV0FDQXpCLEdBQUFoQixNQUFBbTNCLFlBQUFuM0IsS0FBQThJLGNBRUE5SSxRQUtBZ0IsR0FBQStrQixLQUFBNUQsUUFBQXpTLE9BQUEsU0FBQXZPLEdBQ0EsT0FBQUgsR0FBQStrQixLQUFBNUQsUUFBQTZpQixRQUFBN2pDLElBRUFILEdBQUEra0IsS0FBQTVELFFBQUE2aUIsUUFBQSxTQUFBN2pDLEdBQ0EsU0FBQUEsRUFBQThqQyxhQUFBOWpDLEVBQUErakMsY0FBQS9qQyxFQUFBZzVCLGlCQUFBcjVCLFNBTUFFLEdBQUE4VSxhQUFBcXZCLElBQUEsV0FDQSxJQUNBLE1BQUEsSUFBQXBsQyxHQUFBcWxDLGVBQ0EsTUFBQXJnQyxLQUdBLElBQUFzZ0MsS0FHQUMsRUFBQSxJQUlBQyxLQUFBLEtBRUFDLEdBQUF4a0MsR0FBQThVLGFBQUFxdkIsS0FFQS80QixJQUFBcTVCLE9BQUFELElBQUEsbUJBQUFBLElBQ0FwNUIsR0FBQXEyQixLQUFBK0MsS0FBQUEsR0FFQXhrQyxHQUFBd2hDLGNBQUEsU0FBQWpnQyxHQUNBLEdBQUF1SixHQUFBNDVCLENBR0EsSUFBQXQ1QixHQUFBcTVCLE1BQUFELEtBQUFqakMsRUFBQThoQyxZQUNBLE9BQ0FJLEtBQUEsU0FBQTdCLEVBQUEzdUIsR0FDQSxHQUFBclMsR0FDQXVqQyxFQUFBNWlDLEVBQUE0aUMsS0FXQSxJQVRBQSxFQUFBUSxLQUNBcGpDLEVBQUF4QixLQUNBd0IsRUFBQWsvQixJQUNBbC9CLEVBQUFzL0IsTUFDQXQvQixFQUFBcWpDLFNBQ0FyakMsRUFBQTZtQixVQUlBN21CLEVBQUFzakMsVUFDQSxJQUFBamtDLElBQUFXLEdBQUFzakMsVUFDQVYsRUFBQXZqQyxHQUFBVyxFQUFBc2pDLFVBQUFqa0MsRUFLQVcsR0FBQWdVLFVBQUE0dUIsRUFBQWpCLGtCQUNBaUIsRUFBQWpCLGlCQUFBM2hDLEVBQUFnVSxVQVFBaFUsRUFBQThoQyxhQUFBekIsRUFBQSxzQkFDQUEsRUFBQSxvQkFBQSxpQkFJQSxLQUFBaGhDLElBQUFnaEMsR0FDQXVDLEVBQUFsQixpQkFBQXJpQyxFQUFBZ2hDLEVBQUFoaEMsR0FJQWtLLEdBQUEsU0FBQS9LLEdBQ0EsTUFBQSxZQUNBK0ssSUFDQUEsRUFBQTQ1QixFQUFBUCxFQUFBVyxPQUNBWCxFQUFBWSxRQUFBWixFQUFBYSxRQUFBYixFQUFBYyxtQkFBQSxLQUVBLFVBQUFsbEMsRUFDQW9rQyxFQUFBaEIsUUFDQSxVQUFBcGpDLEVBS0EsZ0JBQUFva0MsR0FBQXpDLE9BQ0F6dUIsRUFBQSxFQUFBLFNBRUFBLEVBR0FreEIsRUFBQXpDLE9BQ0F5QyxFQUFBcEMsWUFJQTl1QixFQUNBb3hCLEdBQUFGLEVBQUF6QyxTQUFBeUMsRUFBQXpDLE9BQ0F5QyxFQUFBcEMsV0FLQSxVQUFBb0MsRUFBQWUsY0FBQSxTQUNBLGdCQUFBZixHQUFBZ0IsY0FDQUMsT0FBQWpCLEVBQUF4dUIsV0FDQXBXLEtBQUE0a0MsRUFBQWdCLGNBQ0FoQixFQUFBbkIsNEJBUUFtQixFQUFBVyxPQUFBaDZCLElBQ0E0NUIsRUFBQVAsRUFBQVksUUFBQWo2QixFQUFBLGFBS0FqSSxLQUFBc2hDLEVBQUFhLFFBQ0FiLEVBQUFhLFFBQUFOLEVBRUFQLEVBQUFjLG1CQUFBLFdBR0EsSUFBQWQsRUFBQTFXLFlBTUExdUIsRUFBQTZQLFdBQUEsV0FDQTlELEdBQ0E0NUIsT0FRQTU1QixFQUFBQSxFQUFBLFFBRUEsS0FHQXE1QixFQUFBVixLQUFBbGlDLEVBQUFnaUMsWUFBQWhpQyxFQUFBK0IsTUFBQSxNQUNBLE1BQUFTLEdBR0EsR0FBQStHLEVBQ0EsS0FBQS9HLEtBS0FvL0IsTUFBQSxXQUNBcjRCLEdBQ0FBLFFBV0E5SyxHQUFBdWhDLGNBQUEsU0FBQXZzQixHQUNBQSxFQUFBcXVCLGNBQ0FydUIsRUFBQUssU0FBQWhXLFFBQUEsS0FLQVcsR0FBQXFoQyxXQUNBTixTQUNBMWhDLE9BQUEsNkZBR0FnVyxVQUNBaFcsT0FBQSwyQkFFQW9XLFlBQ0E0dkIsY0FBQSxTQUFBOWxDLEdBRUEsTUFEQVMsSUFBQTRZLFdBQUFyWixHQUNBQSxNQU1BUyxHQUFBdWhDLGNBQUEsU0FBQSxTQUFBdnNCLE9BQ0FuUyxLQUFBbVMsRUFBQW1HLFFBQ0FuRyxFQUFBbUcsT0FBQSxHQUVBbkcsRUFBQXF1QixjQUNBcnVCLEVBQUFqVixLQUFBLFNBS0FDLEdBQUF3aEMsY0FBQSxTQUFBLFNBQUF4c0IsR0FHQSxHQUFBQSxFQUFBcXVCLFlBQUEsQ0FDQSxHQUFBaGtDLEdBQUF5TCxDQUNBLFFBQ0EyNEIsS0FBQSxTQUFBN2hDLEVBQUFxUixHQUNBNVQsRUFBQVcsR0FBQSxZQUFBbUUsTUFDQW1oQyxRQUFBdHdCLEVBQUF1d0IsY0FDQTM3QixJQUFBb0wsRUFBQXlyQixNQUNBLzNCLEdBQ0EsYUFDQW9DLEVBQUEsU0FBQTA2QixHQUNBbm1DLEVBQUF5TSxTQUNBaEIsRUFBQSxLQUNBMDZCLEdBQ0F2eUIsRUFBQSxVQUFBdXlCLEVBQUF6bEMsS0FBQSxJQUFBLElBQUF5bEMsRUFBQXpsQyxRQU1BbkIsR0FBQVksS0FBQUMsWUFBQUosRUFBQSxLQUVBOGpDLE1BQUEsV0FDQXI0QixHQUNBQSxRQVVBLElBQUEyNkIsT0FDQUMsR0FBQSxtQkFHQTFsQyxJQUFBcWhDLFdBQ0FzRSxNQUFBLFdBQ0FDLGNBQUEsV0FDQSxHQUFBOTZCLEdBQUEyNkIsR0FBQXhsQixPQUFBamdCLEdBQUFtRCxRQUFBLElBQUE2N0IsSUFFQSxPQURBaGdDLE1BQUE4TCxJQUFBLEVBQ0FBLEtBS0E5SyxHQUFBdWhDLGNBQUEsYUFBQSxTQUFBdnNCLEVBQUE2d0IsRUFBQTN4QixHQUVBLEdBQUE0eEIsR0FBQUMsRUFBQUMsRUFDQUMsR0FBQSxJQUFBanhCLEVBQUEyd0IsUUFBQUQsR0FBQXprQyxLQUFBK1QsRUFBQXlyQixLQUNBLE1BQ0EsZ0JBQUF6ckIsR0FBQTFSLE1BRUEsS0FEQTBSLEVBQUE4ckIsYUFBQSxJQUNBLy9CLFFBQUEsc0NBQ0Eya0MsR0FBQXprQyxLQUFBK1QsRUFBQTFSLE9BQUEsT0FJQSxJQUFBMmlDLEdBQUEsVUFBQWp4QixFQUFBakIsVUFBQSxHQThEQSxNQTNEQSt4QixHQUFBOXdCLEVBQUE0d0IsY0FBQTVsQyxHQUFBVSxXQUFBc1UsRUFBQTR3QixlQUNBNXdCLEVBQUE0d0IsZ0JBQ0E1d0IsRUFBQTR3QixjQUdBSyxFQUNBanhCLEVBQUFpeEIsR0FBQWp4QixFQUFBaXhCLEdBQUFyaUMsUUFBQThoQyxHQUFBLEtBQUFJLElBQ0EsSUFBQTl3QixFQUFBMndCLFFBQ0Ezd0IsRUFBQXlyQixNQUFBeEIsR0FBQWgrQixLQUFBK1QsRUFBQXlyQixLQUFBLElBQUEsS0FBQXpyQixFQUFBMndCLE1BQUEsSUFBQUcsR0FJQTl3QixFQUFBUyxXQUFBLGVBQUEsV0FJQSxNQUhBdXdCLElBQ0FobUMsR0FBQXNXLE1BQUF3dkIsRUFBQSxtQkFFQUUsRUFBQSxJQUlBaHhCLEVBQUFqQixVQUFBLEdBQUEsT0FHQWd5QixFQUFBaG5DLEVBQUErbUMsR0FDQS9tQyxFQUFBK21DLEdBQUEsV0FDQUUsRUFBQTk4QixXQUlBZ0wsRUFBQXBELE9BQUEsZUFHQWpPLEtBQUFrakMsRUFDQS9sQyxHQUFBakIsR0FBQWcrQixXQUFBK0ksR0FJQS9tQyxFQUFBK21DLEdBQUFDLEVBSUEvd0IsRUFBQTh3QixLQUdBOXdCLEVBQUE0d0IsY0FBQUMsRUFBQUQsY0FHQUgsR0FBQXg5QixLQUFBNjlCLElBSUFFLEdBQUFobUMsR0FBQVUsV0FBQXFsQyxJQUNBQSxFQUFBQyxFQUFBLElBR0FBLEVBQUFELE1BQUFsakMsS0FJQSxXQVlBdUksR0FBQTg2QixtQkFBQSxXQUNBLEdBQUF6Z0MsR0FBQTdHLEdBQUF1bkMsZUFBQUQsbUJBQUEsSUFBQXpnQyxJQUVBLE9BREFBLEdBQUFrQyxVQUFBLDZCQUNBLElBQUFsQyxFQUFBcUMsV0FBQWhJLFVBUUFFLEdBQUEwcEIsVUFBQSxTQUFBcG1CLEVBQUE0QyxFQUFBa2dDLEdBQ0EsR0FBQSxnQkFBQTlpQyxHQUNBLFFBRUEsa0JBQUE0QyxLQUNBa2dDLEVBQUFsZ0MsRUFDQUEsR0FBQSxFQUdBLElBQUE2VyxHQUFBc3BCLEVBQUF4L0IsQ0F3QkEsT0F0QkFYLEtBSUFrRixHQUFBODZCLG9CQUNBaGdDLEVBQUF0SCxHQUFBdW5DLGVBQUFELG1CQUFBLElBS0FucEIsRUFBQTdXLEVBQUE1RyxjQUFBLFFBQ0F5ZCxFQUFBd0ssS0FBQTNvQixHQUFBdW9CLFNBQUFJLEtBQ0FyaEIsRUFBQTFHLEtBQUFDLFlBQUFzZCxJQUVBN1csRUFBQXRILElBSUF5bkMsRUFBQTdjLEdBQUF4a0IsS0FBQTFCLEdBQ0F1RCxHQUFBdS9CLE1BR0FDLEdBQ0FuZ0MsRUFBQTVHLGNBQUErbUMsRUFBQSxNQUdBQSxFQUFBei9CLEdBQUF0RCxHQUFBNEMsRUFBQVcsR0FFQUEsR0FBQUEsRUFBQS9HLFFBQ0FFLEdBQUE2RyxHQUFBaUYsU0FHQTlMLEdBQUF1RyxTQUFBOC9CLEVBQUF2K0IsY0FPQTlILEdBQUE2SSxHQUFBNHBCLEtBQUEsU0FBQWdPLEVBQUE2RixFQUFBeDdCLEdBQ0EsR0FBQWxDLEdBQUE3SSxFQUFBNFYsRUFDQXBLLEVBQUF2TSxLQUNBaUssRUFBQXczQixFQUFBMS9CLFFBQUEsSUFzREEsT0FwREFrSSxJQUFBLElBQ0FMLEVBQUF1SyxFQUFBc3RCLEVBQUEzOUIsTUFBQW1HLElBQ0F3M0IsRUFBQUEsRUFBQTM5QixNQUFBLEVBQUFtRyxJQUlBakosR0FBQVUsV0FBQTRsQyxJQUdBeDdCLEVBQUF3N0IsRUFDQUEsTUFBQXpqQyxJQUdBeWpDLEdBQUEsZ0JBQUFBLEtBQ0F2bUMsRUFBQSxRQUlBd0wsRUFBQXpMLE9BQUEsR0FDQUUsR0FBQXloQyxNQUNBaEIsSUFBQUEsRUFLQTFnQyxLQUFBQSxHQUFBLE1BQ0ErVCxTQUFBLE9BQ0F4USxLQUFBZ2pDLElBQ0E3akMsS0FBQSxTQUFBMGlDLEdBR0F4dkIsRUFBQXpNLFVBRUFxQyxFQUFBRSxLQUFBN0MsRUFJQTVJLEdBQUEsU0FBQTgxQixPQUFBOTFCLEdBQUEwcEIsVUFBQXliLElBQUFwbEIsS0FBQW5YLEdBR0F1OEIsS0FLQXIwQixPQUFBaEcsR0FBQSxTQUFBb0osRUFBQXd0QixHQUNBbjJCLEVBQUE5SixLQUFBLFdBQ0FxSixFQUFBbEksTUFBQTVELEtBQUEyVyxJQUFBekIsRUFBQWl4QixhQUFBekQsRUFBQXh0QixRQUtBbFYsTUFPQWdCLEdBQUF5QixNQUNBLFlBQ0EsV0FDQSxlQUNBLFlBQ0EsY0FDQSxZQUNBLFNBQUFiLEVBQUFiLEdBQ0FDLEdBQUE2SSxHQUFBOUksR0FBQSxTQUFBOEksR0FDQSxNQUFBN0osTUFBQTBKLEdBQUEzSSxFQUFBOEksTUFPQTdJLEdBQUEra0IsS0FBQTVELFFBQUFvbEIsU0FBQSxTQUFBcG1DLEdBQ0EsTUFBQUgsSUFBQVcsS0FBQVgsR0FBQXE3QixPQUFBLFNBQUF4eUIsR0FDQSxNQUFBMUksS0FBQTBJLEVBQUExSSxPQUNBTCxRQU1BRSxHQUFBd21DLFFBQ0FDLFVBQUEsU0FBQXRtQyxFQUFBb0IsRUFBQVgsR0FDQSxHQUFBOGxDLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQ0FsUCxFQUFBOTNCLEdBQUEwRSxJQUFBdkUsRUFBQSxZQUNBOG1DLEVBQUFqbkMsR0FBQUcsR0FDQTJQLElBR0EsWUFBQWdvQixJQUNBMzNCLEVBQUE4RSxNQUFBNnlCLFNBQUEsWUFHQWdQLEVBQUFHLEVBQUFULFNBQ0FJLEVBQUE1bUMsR0FBQTBFLElBQUF2RSxFQUFBLE9BQ0E0bUMsRUFBQS9tQyxHQUFBMEUsSUFBQXZFLEVBQUEsUUFDQTZtQyxHQUFBLGFBQUFsUCxHQUFBLFVBQUFBLEtBQ0E4TyxFQUFBRyxHQUFBaG1DLFFBQUEsU0FBQSxFQUlBaW1DLEdBQ0FOLEVBQUFPLEVBQUFuUCxXQUNBK08sRUFBQUgsRUFBQW5qQixJQUNBb2pCLEVBQUFELEVBQUFyTixPQUdBd04sRUFBQTE0QixXQUFBeTRCLElBQUEsRUFDQUQsRUFBQXg0QixXQUFBNDRCLElBQUEsR0FHQS9tQyxHQUFBVSxXQUFBYSxLQUdBQSxFQUFBQSxFQUFBVixLQUFBVixFQUFBUyxFQUFBWixHQUFBc0ssVUFBQXc4QixLQUdBLE1BQUF2bEMsRUFBQWdpQixNQUNBelQsRUFBQXlULElBQUFoaUIsRUFBQWdpQixJQUFBdWpCLEVBQUF2akIsSUFBQXNqQixHQUVBLE1BQUF0bEMsRUFBQTgzQixPQUNBdnBCLEVBQUF1cEIsS0FBQTkzQixFQUFBODNCLEtBQUF5TixFQUFBek4sS0FBQXNOLEdBR0EsU0FBQXBsQyxHQUNBQSxFQUFBMmxDLE1BQUFybUMsS0FBQVYsRUFBQTJQLEdBR0FtM0IsRUFBQXZpQyxJQUFBb0wsS0FLQTlQLEdBQUE2SSxHQUFBeUIsUUFDQWs4QixPQUFBLFNBQUFqbEMsR0FHQSxHQUFBMkgsVUFBQXBKLE9BQ0EsV0FBQStDLEtBQUF0QixFQUNBdkMsS0FDQUEsS0FBQXlDLEtBQUEsU0FBQWIsR0FDQVosR0FBQXdtQyxPQUFBQyxVQUFBem5DLEtBQUF1QyxFQUFBWCxJQUlBLElBQUF4QixHQUFBb2hCLEVBQUEybUIsRUFBQUMsRUFDQWpuQyxFQUFBbkIsS0FBQSxFQUVBLElBQUFtQixFQVFBLE1BQUFBLEdBQUFnNUIsaUJBQUFyNUIsUUFJQXFuQyxFQUFBaG5DLEVBQUFpNUIsd0JBRUFoNkIsRUFBQWUsRUFBQW1GLGNBQ0FrYixFQUFBcGhCLEVBQUErakIsZ0JBQ0Fpa0IsRUFBQWhvQyxFQUFBa2tCLGFBR0FDLElBQUE0akIsRUFBQTVqQixJQUFBNmpCLEVBQUFDLFlBQUE3bUIsRUFBQThtQixVQUNBak8sS0FBQThOLEVBQUE5TixLQUFBK04sRUFBQUcsWUFBQS9tQixFQUFBZ25CLGNBWEFqa0IsSUFBQSxFQUFBOFYsS0FBQSxJQWVBdkIsU0FBQSxXQUNBLEdBQUE5NEIsS0FBQSxHQUFBLENBSUEsR0FBQXlvQyxHQUFBakIsRUFDQXJtQyxFQUFBbkIsS0FBQSxHQUNBMG9DLEdBQUFua0IsSUFBQSxFQUFBOFYsS0FBQSxFQTRCQSxPQXhCQSxVQUFBcjVCLEdBQUEwRSxJQUFBdkUsRUFBQSxZQUdBcW1DLEVBQUFybUMsRUFBQWk1Qix5QkFLQXFPLEVBQUF6b0MsS0FBQXlvQyxlQUdBakIsRUFBQXhuQyxLQUFBd25DLFNBQ0F0bUMsRUFBQXVuQyxFQUFBLEdBQUEsVUFDQUMsRUFBQUQsRUFBQWpCLFVBSUFrQixHQUNBbmtCLElBQUFta0IsRUFBQW5rQixJQUFBdmpCLEdBQUEwRSxJQUFBK2lDLEVBQUEsR0FBQSxrQkFBQSxHQUNBcE8sS0FBQXFPLEVBQUFyTyxLQUFBcjVCLEdBQUEwRSxJQUFBK2lDLEVBQUEsR0FBQSxtQkFBQSxNQU1BbGtCLElBQUFpakIsRUFBQWpqQixJQUFBbWtCLEVBQUFua0IsSUFBQXZqQixHQUFBMEUsSUFBQXZFLEVBQUEsYUFBQSxHQUNBazVCLEtBQUFtTixFQUFBbk4sS0FBQXFPLEVBQUFyTyxLQUFBcjVCLEdBQUEwRSxJQUFBdkUsRUFBQSxjQUFBLE1BY0FzbkMsYUFBQSxXQUNBLE1BQUF6b0MsTUFBQTBNLElBQUEsV0FHQSxJQUZBLEdBQUErN0IsR0FBQXpvQyxLQUFBeW9DLGFBRUFBLEdBQUEsV0FBQXpuQyxHQUFBMEUsSUFBQStpQyxFQUFBLGFBQ0FBLEVBQUFBLEVBQUFBLFlBR0EsT0FBQUEsSUFBQXRrQixRQU1BbmpCLEdBQUF5QixNQUFBdzRCLFdBQUEsY0FBQUQsVUFBQSxlQUFBLFNBQUF6M0IsRUFBQTRCLEdBQ0EsR0FBQW9mLEdBQUEsZ0JBQUFwZixDQUVBbkUsSUFBQTZJLEdBQUF0RyxHQUFBLFNBQUF1TCxHQUNBLE1BQUExRCxJQUFBcEwsS0FBQSxTQUFBbUIsRUFBQW9DLEVBQUF1TCxHQUdBLEdBQUFzNUIsRUFPQSxJQU5BcG5DLEdBQUFDLFNBQUFFLEdBQ0FpbkMsRUFBQWpuQyxFQUNBLElBQUFBLEVBQUFXLFdBQ0FzbUMsRUFBQWpuQyxFQUFBbWpCLGlCQUdBemdCLEtBQUFpTCxFQUNBLE1BQUFzNUIsR0FBQUEsRUFBQWpqQyxHQUFBaEUsRUFBQW9DLEVBR0E2a0MsR0FDQUEsRUFBQU8sU0FDQXBrQixFQUFBNmpCLEVBQUFHLFlBQUF6NUIsRUFDQXlWLEVBQUF6VixFQUFBczVCLEVBQUFDLGFBSUFsbkMsRUFBQW9DLEdBQUF1TCxHQUVBdkwsRUFBQXVMLEVBQUE1RSxVQUFBcEosV0FVQUUsR0FBQXlCLE1BQUEsTUFBQSxRQUFBLFNBQUFiLEVBQUF1RCxHQUNBbkUsR0FBQXlSLFNBQUF0TixHQUFBd0ksRUFBQXZCLEdBQUFxc0IsY0FDQSxTQUFBdDNCLEVBQUErTCxHQUNBLEdBQUFBLEVBSUEsTUFIQUEsR0FBQUQsRUFBQTlMLEVBQUFnRSxHQUdBc0ksR0FBQXhMLEtBQUFpTCxHQUNBbE0sR0FBQUcsR0FBQTIzQixXQUFBM3pCLEdBQUEsS0FDQStILE1BUUFsTSxHQUFBeUIsTUFBQW1tQyxPQUFBLFNBQUFDLE1BQUEsU0FBQSxTQUFBem5DLEVBQUFMLEdBQ0FDLEdBQUF5QixNQUFBODNCLFFBQUEsUUFBQW41QixFQUFBa0osUUFBQXZKLEVBQUErbkMsR0FBQSxRQUFBMW5DLEdBQ0EsU0FBQTJuQyxFQUFBQyxHQUdBaG9DLEdBQUE2SSxHQUFBbS9CLEdBQUEsU0FBQTFPLEVBQUFuM0IsR0FDQSxHQUFBd3JCLEdBQUF6a0IsVUFBQXBKLFNBQUFpb0MsR0FBQSxpQkFBQXpPLElBQ0EzckIsRUFBQW82QixLQUFBLElBQUF6TyxJQUFBLElBQUFuM0IsRUFBQSxTQUFBLFNBRUEsT0FBQWlJLElBQUFwTCxLQUFBLFNBQUFtQixFQUFBSixFQUFBb0MsR0FDQSxHQUFBL0MsRUFFQSxPQUFBWSxJQUFBQyxTQUFBRSxHQUdBLElBQUE2bkMsRUFBQWpuQyxRQUFBLFNBQ0FaLEVBQUEsUUFBQUMsR0FDQUQsRUFBQXZCLFNBQUF1a0IsZ0JBQUEsU0FBQS9pQixHQUlBLElBQUFELEVBQUFXLFVBQ0ExQixFQUFBZSxFQUFBZ2pCLGdCQUlBM1YsS0FBQUMsSUFDQXROLEVBQUFzRixLQUFBLFNBQUFyRixHQUFBaEIsRUFBQSxTQUFBZ0IsR0FDQUQsRUFBQXNGLEtBQUEsU0FBQXJGLEdBQUFoQixFQUFBLFNBQUFnQixHQUNBaEIsRUFBQSxTQUFBZ0IsU0FJQXlDLEtBQUFWLEVBR0FuQyxHQUFBMEUsSUFBQXZFLEVBQUFKLEVBQUE0TixHQUdBM04sR0FBQWlGLE1BQUE5RSxFQUFBSixFQUFBb0MsRUFBQXdMLElBQ0E1TixFQUFBNHRCLEVBQUEyTCxNQUFBejJCLEdBQUE4cUIsUUFNQTN0QixHQUFBNkksR0FBQXlCLFFBRUEyOUIsS0FBQSxTQUFBdC9CLEVBQUFyRixFQUFBdUYsR0FDQSxNQUFBN0osTUFBQTBKLEdBQUFDLEVBQUEsS0FBQXJGLEVBQUF1RixJQUVBcS9CLE9BQUEsU0FBQXYvQixFQUFBRSxHQUNBLE1BQUE3SixNQUFBaUssSUFBQU4sRUFBQSxLQUFBRSxJQUdBcy9CLFNBQUEsU0FBQXYvQixFQUFBRCxFQUFBckYsRUFBQXVGLEdBQ0EsTUFBQTdKLE1BQUEwSixHQUFBQyxFQUFBQyxFQUFBdEYsRUFBQXVGLElBRUF1L0IsV0FBQSxTQUFBeC9CLEVBQUFELEVBQUFFLEdBR0EsTUFBQSxLQUFBSyxVQUFBcEosT0FDQWQsS0FBQWlLLElBQUFMLEVBQUEsTUFDQTVKLEtBQUFpSyxJQUFBTixFQUFBQyxHQUFBLEtBQUFDLE1BSUE3SSxHQUFBcW9DLFVBQUEsU0FBQUMsR0FDQUEsRUFDQXRvQyxHQUFBdXRCLFlBRUF2dEIsR0FBQWlELE9BQUEsSUFHQWpELEdBQUF3UixRQUFBRCxNQUFBQyxRQUNBeFIsR0FBQXVvQyxVQUFBL2tDLEtBQUFDLE1BQ0F6RCxHQUFBRSxTQUFBQSxFQWtCQSxrQkFBQXNvQyxTQUFBQSxPQUFBQyxLQUNBRCxPQUFBLFlBQUEsV0FDQSxNQUFBeG9DLEtBT0EsSUFHQTBvQyxJQUFBM3BDLEVBQUFpQixPQUdBMm9DLEdBQUE1cEMsRUFBQTZwQyxDQXdCQSxPQXRCQTVvQyxJQUFBNm9DLFdBQUEsU0FBQWowQixHQVNBLE1BUkE3VixHQUFBNnBDLElBQUE1b0MsS0FDQWpCLEVBQUE2cEMsRUFBQUQsSUFHQS96QixHQUFBN1YsRUFBQWlCLFNBQUFBLEtBQ0FqQixFQUFBaUIsT0FBQTBvQyxJQUdBMW9DLElBTUFmLElBQ0FGLEVBQUFpQixPQUFBakIsRUFBQTZwQyxFQUFBNW9DLElBTUFBLEtDcGdVQSxTQUFBNG9DLEdBRUEsR0FBQUUsSUFHQUMsS0FBQSxhQUNBQyxjQUFBLEdBQ0FDLGNBQUEsRUFDQUMsa0JBQUEsRUFDQXZPLE1BQUEsSUFDQXRzQixPQUFBLEtBQ0E4NkIsWUFBQSxFQUNBQyxXQUFBLEVBQ0FDLGFBQUEsRUFDQUMsVUFBQSxFQUNBQyxRQUFBLEVBQ0FDLGFBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsb0JBQUEsSUFDQUMsT0FBQSxFQUNBQyxRQUFBLEVBQ0FDLGNBQUEsVUFDQUMsWUFBQSxFQUNBQyxZQUFBLEdBQ0FDLGFBQUEsYUFHQUMsY0FBQSxFQUNBQyxlQUFBLEdBQ0FDLGVBQUEsRUFDQUMsc0JBQUEsRUFDQUMsc0JBQUEsRUFHQUMsVUFBQSxFQUNBQyxZQUFBLEVBR0FDLGlCQUFBLEVBR0FDLE9BQUEsRUFDQUMsVUFBQSxPQUNBQyxvQkFBQSxNQUNBQyxjQUFBLEtBQ0FDLFdBQUEsS0FDQUMsWUFBQSxLQUdBQyxVQUFBLEVBQ0FDLFNBQUEsT0FDQUMsU0FBQSxPQUNBQyxhQUFBLEtBQ0FDLGFBQUEsS0FDQUMsY0FBQSxFQUNBQyxVQUFBLFFBQ0FDLFNBQUEsT0FDQUMscUJBQUEsRUFDQUMscUJBQUEsS0FHQUMsTUFBQSxFQUNBQyxNQUFBLElBQ0FDLFdBQUEsRUFDQUMsY0FBQSxPQUNBQyxpQkFBQSxFQUNBQyxXQUFBLEVBQ0FDLFVBQUEsRUFDQUMscUJBQUEsRUFHQUMsVUFBQSxFQUNBQyxVQUFBLEVBQ0FDLFdBQUEsRUFDQUMsV0FBQSxFQUNBQyxhQUFBLEVBR0FDLGFBQUEsV0FBQSxPQUFBLEdBQ0FDLGNBQUEsV0FBQSxPQUFBLEdBQ0FDLGFBQUEsV0FBQSxPQUFBLEdBQ0FDLFlBQUEsV0FBQSxPQUFBLEdBQ0FDLFlBQUEsV0FBQSxPQUFBLEdBQ0FDLGVBQUEsV0FBQSxPQUFBLEdBQ0FDLGFBQUEsV0FBQSxPQUFBLEdBR0FoRSxHQUFBLy9CLEdBQUFna0MsU0FBQSxTQUFBdHJDLEdBRUEsR0FBQSxJQUFBdkMsS0FBQWMsT0FDQSxNQUFBZCxLQUlBLElBQUFBLEtBQUFjLE9BQUEsRUFJQSxNQUhBZCxNQUFBeUMsS0FBQSxXQUNBbW5DLEVBQUE1cEMsTUFBQTZ0QyxTQUFBdHJDLEtBRUF2QyxJQUlBLElBQUE4dEMsTUFFQXJ4QixFQUFBemMsS0FFQSt0QyxFQUFBbkUsRUFBQTdwQyxRQUFBb04sUUFDQTZnQyxFQUFBcEUsRUFBQTdwQyxRQUFBd1EsUUFHQSxLQUFBcTVCLEVBQUFudEIsR0FBQW5ZLEtBQUEsWUFBQSxDQVdBLEdBQUFpTCxHQUFBLFdBRUFxNkIsRUFBQW50QixHQUFBblksS0FBQSxjQUVBd3BDLEVBQUF4TCxTQUFBc0gsRUFBQXQrQixVQUFBdytCLEVBQUF2bkMsR0FFQXVyQyxFQUFBeEwsU0FBQThLLFdBQUFsUCxTQUFBNFAsRUFBQXhMLFNBQUE4SyxZQUVBVSxFQUFBampCLFNBQUFwTyxFQUFBb08sU0FBQWlqQixFQUFBeEwsU0FBQTBILGVBRUE4RCxFQUFBampCLFNBQUEvcEIsT0FBQWd0QyxFQUFBeEwsU0FBQTJLLFlBQUFhLEVBQUF4TCxTQUFBMkssVUFBQWEsRUFBQWpqQixTQUFBL3BCLFFBQ0FndEMsRUFBQWpqQixTQUFBL3BCLE9BQUFndEMsRUFBQXhMLFNBQUE0SyxZQUFBWSxFQUFBeEwsU0FBQTRLLFVBQUFZLEVBQUFqakIsU0FBQS9wQixRQUVBZ3RDLEVBQUF4TCxTQUFBK0gsY0FBQXlELEVBQUF4TCxTQUFBOEgsV0FBQTU3QixLQUFBeS9CLE1BQUF6L0IsS0FBQTRLLFNBQUEwMEIsRUFBQWpqQixTQUFBL3BCLFNBRUFndEMsRUFBQXhNLFFBQUF6NkIsTUFBQWluQyxFQUFBeEwsU0FBQThILFlBRUEwRCxFQUFBSSxTQUFBSixFQUFBeEwsU0FBQTJLLFVBQUEsR0FBQWEsRUFBQXhMLFNBQUE0SyxVQUFBLEVBRUFZLEVBQUFJLFdBQUFKLEVBQUF4TCxTQUFBdUksY0FBQSxPQUdBaUQsRUFBQUssYUFBQUwsRUFBQXhMLFNBQUEySyxVQUFBYSxFQUFBeEwsU0FBQThLLFlBQUFVLEVBQUF4TCxTQUFBMkssVUFBQSxHQUFBYSxFQUFBeEwsU0FBQTZILFlBQ0EyRCxFQUFBTSxhQUFBTixFQUFBeEwsU0FBQTRLLFVBQUFZLEVBQUF4TCxTQUFBOEssWUFBQVUsRUFBQXhMLFNBQUE0SyxVQUFBLEdBQUFZLEVBQUF4TCxTQUFBNkgsWUFFQTJELEVBQUFPLFNBQUEsRUFFQVAsRUFBQS9CLFlBRUErQixFQUFBaCtCLFNBQUEsS0FFQWcrQixFQUFBUSxTQUFBLGFBQUFSLEVBQUF4TCxTQUFBeUgsS0FBQSxNQUFBLE9BRUErRCxFQUFBUyxTQUFBVCxFQUFBeEwsU0FBQXNJLFFBQUEsU0FBQWtELEVBQUF4TCxTQUFBeUgsTUFBQSxXQU1BLElBQUEsR0FKQW5aLEdBQUFoeEIsU0FBQVUsY0FBQSxPQUVBd1EsR0FBQSxvQkFBQSxpQkFBQSxlQUFBLGlCQUVBbFAsRUFBQSxFQUFBQSxFQUFBa1AsRUFBQWhRLE9BQUFjLElBQ0EsT0FBQWlDLEtBQUErc0IsRUFBQTNxQixNQUFBNkssRUFBQWxQLElBR0EsTUFGQWtzQyxHQUFBVSxVQUFBMTlCLEVBQUFsUCxHQUFBZ0QsUUFBQSxjQUFBLElBQUF2RCxjQUNBeXNDLEVBQUFRLFNBQUEsSUFBQVIsRUFBQVUsVUFBQSxjQUNBLENBR0EsUUFBQSxLQUdBLGFBQUFWLEVBQUF4TCxTQUFBeUgsT0FBQStELEVBQUF4TCxTQUFBNEssVUFBQVksRUFBQXhMLFNBQUEySyxXQUVBeHdCLEVBQUFuWSxLQUFBLFlBQUFtWSxFQUFBdUosS0FBQSxVQUNBdkosRUFBQW9PLFNBQUFpakIsRUFBQXhMLFNBQUEwSCxlQUFBdm5DLEtBQUEsV0FDQW1uQyxFQUFBNXBDLE1BQUFzRSxLQUFBLFlBQUFzbEMsRUFBQTVwQyxNQUFBZ21CLEtBQUEsWUFJQWdNLE1BTUFBLEVBQUEsV0FDQSxHQUFBeWMsR0FBQVgsRUFBQWpqQixTQUFBcmUsR0FBQXNoQyxFQUFBeEwsU0FBQThILFdBR0EzdEIsR0FBQXhVLEtBQUEsZUFBQTZsQyxFQUFBeEwsU0FBQTBJLGFBQUEsMkNBRUE4QyxFQUFBWSxTQUFBanlCLEVBQUFnTCxTQUdBcW1CLEVBQUF4TCxTQUFBZ0osV0FBQXdDLEVBQUF4TCxTQUFBaUksUUFDQXVELEVBQUFZLFNBQUExb0IsS0FBQSxZQUFBLFVBR0E4bkIsRUFBQWEsT0FBQS9FLEVBQUEsOEJBQ0FrRSxFQUFBWSxTQUFBM1gsUUFBQStXLEVBQUFhLFFBR0FseUIsRUFBQS9XLEtBQ0F5SCxNQUFBLGVBQUEyZ0MsRUFBQXhMLFNBQUF5SCxLQUFBLElBQUErRCxFQUFBampCLFNBQUEvcEIsT0FBQSxJQUFBLElBQUEsT0FDQWc0QixTQUFBLGFBR0FnVixFQUFBUyxVQUFBVCxFQUFBeEwsU0FBQWp6QixPQUNBb04sRUFBQS9XLElBQUEsSUFBQW9vQyxFQUFBVSxVQUFBLDhCQUFBVixFQUFBeEwsU0FBQWp6QixRQUVBeStCLEVBQUF4TCxTQUFBanpCLFNBQ0F5K0IsRUFBQXhMLFNBQUFqekIsT0FBQSxTQUdBeStCLEVBQUFZLFNBQUFocEMsS0FDQXlILE1BQUEsT0FDQThFLFNBQUEsU0FDQTZtQixTQUFBLGFBRUFnVixFQUFBWSxTQUFBam5CLFNBQUEvaEIsS0FDQTJILFNBQUF1aEMsTUFHQWQsRUFBQWpqQixTQUFBbmxCLEtBRUFvMEIsTUFBQSxlQUFBZ1UsRUFBQXhMLFNBQUF5SCxLQUFBLE9BQUEsT0FDQThFLFVBQUEsT0FDQS9WLFNBQUEsYUFHQWdWLEVBQUFqakIsU0FBQW5sQixJQUFBLFFBQUFvcEMsS0FFQSxlQUFBaEIsRUFBQXhMLFNBQUF5SCxNQUFBK0QsRUFBQXhMLFNBQUE2SCxZQUFBLEdBQUEyRCxFQUFBampCLFNBQUFubEIsSUFBQSxjQUFBb29DLEVBQUF4TCxTQUFBNkgsYUFDQSxhQUFBMkQsRUFBQXhMLFNBQUF5SCxNQUFBK0QsRUFBQXhMLFNBQUE2SCxZQUFBLEdBQUEyRCxFQUFBampCLFNBQUFubEIsSUFBQSxlQUFBb29DLEVBQUF4TCxTQUFBNkgsYUFFQSxTQUFBMkQsRUFBQXhMLFNBQUF5SCxPQUNBK0QsRUFBQWpqQixTQUFBbmxCLEtBQ0FvekIsU0FBQSxXQUNBYyxPQUFBLEVBQ0FyekIsUUFBQSxTQUdBdW5DLEVBQUFqakIsU0FBQXJlLEdBQUFzaEMsRUFBQXhMLFNBQUE4SCxZQUFBMWtDLEtBQUFrMEIsT0FBQWtVLEVBQUF4TCxTQUFBeUksWUFBQXhrQyxRQUFBLFdBR0F1bkMsRUFBQS9CLFNBQUF0dkIsR0FBQW10QixFQUFBLCtCQUVBa0UsRUFBQXhMLFNBQUFnSSxVQUFBeUUsSUFFQWpCLEVBQUF4TSxPQUFBem9CLEtBQUFpMUIsRUFBQXhMLFNBQUE4SCxhQUFBNEUsSUFBQSxFQUVBbEIsRUFBQXhMLFNBQUFxSSxPQUFBbHVCLEVBQUF3eUIsV0FDQSxRQUFBbkIsRUFBQXhMLFNBQUF1SSxlQUFBaUQsRUFBQXhMLFNBQUFpSSxVQUFBa0UsRUFBQVgsRUFBQWpqQixVQUVBaWpCLEVBQUF4TCxTQUFBaUksT0FXQXVELEVBQUF4TCxTQUFBbUosT0FBQSxHQVRBcUMsRUFBQXhMLFNBQUF5SixVQUFBbUQsSUFFQXBCLEVBQUF4TCxTQUFBbUssTUFBQXFCLEVBQUF4TCxTQUFBOEosY0FBQStDLElBRUFyQixFQUFBeEwsU0FBQW1KLE9BQUEyRCxLQUVBdEIsRUFBQXhMLFNBQUF5SixVQUFBK0IsRUFBQXhMLFNBQUE4SixjQUFBMEIsRUFBQXhMLFNBQUFtSixRQUFBcUMsRUFBQVksU0FBQXhYLE1BQUE0VyxFQUFBL0IsU0FBQXR2QixLQUtBNHlCLEVBQUFaLEVBQUF2b0MsSUFHQW1wQyxFQUFBLFNBQUF6bEMsRUFBQWtDLEdBQ0EsR0FBQXdqQyxHQUFBMWxDLEVBQUFtWCxLQUFBLDZCQUFBamdCLE9BQ0E0dUIsRUFBQSxDQUNBLElBQUEsSUFBQTRmLEVBRUEsV0FEQXhqQyxJQUdBbEMsR0FBQW1YLEtBQUEsNkJBQUF0ZSxLQUFBLFdBQ0FtbkMsRUFBQTVwQyxNQUFBOEosSUFBQSxhQUFBLGFBQ0E0bEIsSUFBQTRmLEdBQUF4akMsTUFDQXJKLEtBQUEsWUFDQXpDLEtBQUFpVSxVQUFBLElBQUFqVSxLQUFBNEssTUFBQWcvQixFQUFBNXBDLE1BQUEyekIsUUFBQSxhQVFBenRCLEVBQUEsV0FFQSxHQUFBNG5DLEVBQUF4TCxTQUFBMkgsY0FBQSxTQUFBNkQsRUFBQXhMLFNBQUF5SCxPQUFBK0QsRUFBQXhMLFNBQUFpSSxPQUFBLENBQ0EsR0FBQXptQyxHQUFBLGFBQUFncUMsRUFBQXhMLFNBQUF5SCxLQUFBK0QsRUFBQXhMLFNBQUEySyxVQUFBYSxFQUFBeEwsU0FBQTRLLFVBQ0FxQyxFQUFBekIsRUFBQWpqQixTQUFBL21CLE1BQUEsRUFBQUEsR0FBQTZJLE9BQUEsR0FBQTB4QixTQUFBLFlBQ0FtUixFQUFBMUIsRUFBQWpqQixTQUFBL21CLE9BQUFBLEdBQUE2SSxPQUFBLEdBQUEweEIsU0FBQSxXQUNBeVAsR0FBQXhMLFNBQUFpSixhQUNBZ0UsRUFBQXZwQixLQUFBLGVBQUEsR0FDQXdwQixFQUFBeHBCLEtBQUEsZUFBQSxJQUVBdkosRUFBQXFhLE9BQUF5WSxHQUFBeFksUUFBQXlZLEdBR0ExQixFQUFBYSxPQUFBN2hDLFNBRUEyaUMsSUFFQSxhQUFBM0IsRUFBQXhMLFNBQUF5SCxPQUFBK0QsRUFBQXhMLFNBQUFtSSxnQkFBQSxHQUVBcUQsRUFBQVksU0FBQW4rQixPQUFBbS9CLEtBRUFqekIsRUFBQWt6QixlQUVBN0IsRUFBQXhMLFNBQUFnTCxhQUFBenJDLEtBQUE0YSxFQUFBcXhCLEVBQUF4TSxPQUFBejZCLE9BRUFpbkMsRUFBQThCLGFBQUEsRUFFQTlCLEVBQUF4TCxTQUFBd0ksWUFBQWxCLEVBQUE3cEMsUUFBQWtwQyxLQUFBLFNBQUE0RyxHQUVBL0IsRUFBQXhMLFNBQUFtSyxNQUFBcUIsRUFBQXhMLFNBQUFxSyxZQUFBcUMsSUFBQSxHQUFBbEIsRUFBQXhMLFNBQUEwSyxzQkFBQThDLElBRUFoQyxFQUFBeEwsU0FBQWlJLFFBQUF3RixJQUVBakMsRUFBQXhMLFNBQUFtSixPQUFBdUUsRUFBQWxDLEVBQUF4TCxTQUFBOEgsWUFFQTBELEVBQUF4TCxTQUFBeUosVUFBQWtFLElBRUFuQyxFQUFBeEwsU0FBQTJJLGVBQUE2QyxFQUFBeEwsU0FBQWlJLFFBQUEyRixJQUVBcEMsRUFBQXhMLFNBQUFrSixrQkFBQXNDLEVBQUF4TCxTQUFBaUksUUFDQVgsRUFBQWhxQyxVQUFBdXdDLFFBQUFDLElBT0FWLEVBQUEsV0FDQSxHQUFBbi9CLEdBQUEsRUFFQXNhLEVBQUErZSxHQUVBLElBQUEsYUFBQWtFLEVBQUF4TCxTQUFBeUgsTUFBQStELEVBQUF4TCxTQUFBbUksZUFJQSxHQUFBcUQsRUFBQUksU0FHQSxDQUVBLEdBQUFtQyxHQUFBLElBQUF2QyxFQUFBeEwsU0FBQTZLLFdBQUFXLEVBQUF4TSxPQUFBejZCLE1BQUFpbkMsRUFBQXhNLE9BQUF6NkIsTUFBQXlwQyxHQUlBLEtBRkF6bEIsRUFBQWlqQixFQUFBampCLFNBQUFyZSxHQUFBNmpDLEdBRUF6dUMsRUFBQSxFQUFBQSxHQUFBa3NDLEVBQUF4TCxTQUFBNEssVUFBQSxFQUFBdHJDLElBR0FpcEIsRUFEQXdsQixFQUFBenVDLEdBQUFrc0MsRUFBQWpqQixTQUFBL3BCLE9BQ0ErcEIsRUFBQXpnQixJQUFBMGpDLEVBQUFqakIsU0FBQXJlLEdBQUE1SyxFQUFBLElBRUFpcEIsRUFBQXpnQixJQUFBMGpDLEVBQUFqakIsU0FBQXJlLEdBQUE2akMsRUFBQXp1QyxRQWJBaXBCLEdBQUFpakIsRUFBQWpqQixTQUFBcmUsR0FBQXNoQyxFQUFBeE0sT0FBQXo2QixXQUpBZ2tCLEdBQUFpakIsRUFBQWpqQixRQTZDQSxPQXRCQSxhQUFBaWpCLEVBQUF4TCxTQUFBeUgsTUFDQWxmLEVBQUFwb0IsS0FBQSxTQUFBb0UsR0FDQTBKLEdBQUFxNUIsRUFBQTVwQyxNQUFBdXdDLGdCQUdBekMsRUFBQXhMLFNBQUE2SCxZQUFBLElBQ0E1NUIsR0FBQXU5QixFQUFBeEwsU0FBQTZILGFBQUEyRCxFQUFBeEwsU0FBQTJLLFVBQUEsS0FJQTE4QixFQUFBL0IsS0FBQUMsSUFBQTdLLE1BQUE0SyxLQUFBcWMsRUFBQW5lLElBQUEsV0FDQSxNQUFBazlCLEdBQUE1cEMsTUFBQXV3QyxhQUFBLEtBQ0F4cEMsT0FHQSxlQUFBK21DLEVBQUFZLFNBQUFocEMsSUFBQSxjQUNBNkssR0FBQXBCLFdBQUEyK0IsRUFBQVksU0FBQWhwQyxJQUFBLGdCQUFBeUosV0FBQTIrQixFQUFBWSxTQUFBaHBDLElBQUEsbUJBQ0F5SixXQUFBMitCLEVBQUFZLFNBQUFocEMsSUFBQSxxQkFBQXlKLFdBQUEyK0IsRUFBQVksU0FBQWhwQyxJQUFBLHdCQUNBLGdCQUFBb29DLEVBQUFZLFNBQUFocEMsSUFBQSxnQkFDQTZLLEdBQUFwQixXQUFBMitCLEVBQUFZLFNBQUFocEMsSUFBQSxnQkFBQXlKLFdBQUEyK0IsRUFBQVksU0FBQWhwQyxJQUFBLG9CQUdBNkssR0FNQXErQixFQUFBLFdBQ0EsR0FBQXpoQyxHQUFBLE1BUUEsT0FQQTJnQyxHQUFBeEwsU0FBQThLLFdBQUEsSUFFQWpnQyxFQURBLGVBQUEyZ0MsRUFBQXhMLFNBQUF5SCxLQUNBK0QsRUFBQXhMLFNBQUE0SyxVQUFBWSxFQUFBeEwsU0FBQThLLFlBQUFVLEVBQUF4TCxTQUFBNEssVUFBQSxHQUFBWSxFQUFBeEwsU0FBQTZILFlBRUEyRCxFQUFBeEwsU0FBQThLLFlBR0FqZ0MsR0FNQTJoQyxFQUFBLFdBQ0EsR0FBQTBCLEdBQUExQyxFQUFBeEwsU0FBQThLLFdBQ0FxRCxFQUFBM0MsRUFBQVksU0FBQXZoQyxPQUVBLElBQUEsSUFBQTJnQyxFQUFBeEwsU0FBQThLLFlBQ0FVLEVBQUF4TCxTQUFBOEssV0FBQXFELElBQUEzQyxFQUFBSSxVQUNBLGFBQUFKLEVBQUF4TCxTQUFBeUgsS0FDQXlHLEVBQUFDLE1BRUEsSUFBQTNDLEVBQUF4TCxTQUFBNEssVUFBQSxHQUFBLGVBQUFZLEVBQUF4TCxTQUFBeUgsS0FBQSxDQUNBLEdBQUEwRyxFQUFBM0MsRUFBQU0sYUFDQSxNQUFBb0MsRUFDQUMsR0FBQTNDLEVBQUFLLGFBQ0FxQyxHQUFBQyxFQUFBM0MsRUFBQXhMLFNBQUE2SCxhQUFBMkQsRUFBQXhMLFNBQUEySyxVQUFBLElBQUFhLEVBQUF4TCxTQUFBMkssVUFDQWEsRUFBQXhMLFNBQUErSyxjQUNBbUQsRUFBQWhpQyxLQUFBeS9CLE9BQUF3QyxFQUFBM0MsRUFBQXhMLFNBQUE2SCxhQUFBMzdCLEtBQUFraUMsTUFBQUQsRUFBQTNDLEVBQUF4TCxTQUFBNkgsY0FBQXFHLEVBQUExQyxFQUFBeEwsU0FBQTZILGNBQUEyRCxFQUFBeEwsU0FBQTZILGNBR0EsTUFBQXFHLElBTUFHLEVBQUEsV0FDQSxHQUFBQyxHQUFBLEVBQ0FDLEVBQUEsSUFrQkEsT0FqQkEsZUFBQS9DLEVBQUF4TCxTQUFBeUgsTUFBQStELEVBQUF4TCxTQUFBOEssV0FBQSxFQUVBVSxFQUFBWSxTQUFBdmhDLFFBQUEyZ0MsRUFBQUssYUFDQXlDLEVBQUE5QyxFQUFBeEwsU0FBQTJLLFVBRUFhLEVBQUFZLFNBQUF2aEMsUUFBQTJnQyxFQUFBTSxhQUNBd0MsRUFBQTlDLEVBQUF4TCxTQUFBNEssV0FHQTJELEVBQUEvQyxFQUFBampCLFNBQUE3ZSxRQUFBbUIsUUFBQTJnQyxFQUFBeEwsU0FBQTZILFlBQ0F5RyxFQUFBcGlDLEtBQUF5L0IsT0FBQUgsRUFBQVksU0FBQXZoQyxRQUNBMmdDLEVBQUF4TCxTQUFBNkgsYUFBQTBHLElBQUEsR0FHQSxhQUFBL0MsRUFBQXhMLFNBQUF5SCxPQUNBNkcsRUFBQTlDLEVBQUF4TCxTQUFBMkssV0FFQTJELEdBTUE1QixFQUFBLFdBQ0EsR0FBQThCLEdBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLENBRUEsSUFBQWxELEVBQUF4TCxTQUFBNkssV0FBQSxFQUFBLENBQ0EsSUFBQVcsRUFBQXhMLFNBQUEySCxhQUVBLENBRUEsS0FBQThHLEVBQUFqRCxFQUFBampCLFNBQUEvcEIsVUFDQWd3QyxFQUNBQyxFQUFBQyxFQUFBTCxJQUNBSyxHQUFBbEQsRUFBQXhMLFNBQUE2SyxZQUFBd0QsSUFBQTdDLEVBQUF4TCxTQUFBNkssV0FBQXdELEdBRUEsT0FBQUssR0FSQUYsRUFBQXRpQyxLQUFBa2lDLEtBQUE1QyxFQUFBampCLFNBQUEvcEIsT0FBQXd2QyxTQVlBUSxHQUFBdGlDLEtBQUFraUMsS0FBQTVDLEVBQUFqakIsU0FBQS9wQixPQUFBNnZDLElBRUEsT0FBQUcsSUFNQVIsRUFBQSxXQUVBLE1BQUF4QyxHQUFBeEwsU0FBQTZLLFdBQUEsR0FBQVcsRUFBQXhMLFNBQUE2SyxZQUFBd0QsSUFDQTdDLEVBQUF4TCxTQUFBNkssV0FHQXdELEtBTUFsQixFQUFBLFdBQ0EsR0FBQTNXLEdBQUFqd0IsRUFBQW9vQyxDQUVBbkQsR0FBQWpqQixTQUFBL3BCLE9BQUFndEMsRUFBQXhMLFNBQUE0SyxXQUFBWSxFQUFBeE0sT0FBQXpvQixPQUFBaTFCLEVBQUF4TCxTQUFBMkgsYUFDQSxlQUFBNkQsRUFBQXhMLFNBQUF5SCxNQUVBbGhDLEVBQUFpbEMsRUFBQWpqQixTQUFBaFMsT0FDQWlnQixFQUFBandCLEVBQUFpd0IsV0FFQW9ZLElBQUFwWSxFQUFBdUIsTUFBQXlULEVBQUFZLFNBQUF2aEMsUUFBQXRFLEVBQUFzb0MsZUFBQSxRQUFBLElBQ0EsYUFBQXJELEVBQUF4TCxTQUFBeUgsT0FFQWtILEVBQUFuRCxFQUFBampCLFNBQUEvcEIsT0FBQWd0QyxFQUFBeEwsU0FBQTJLLFVBQ0FuVSxFQUFBZ1YsRUFBQWpqQixTQUFBcmUsR0FBQXlrQyxHQUFBblksV0FFQW9ZLEdBQUFwWSxFQUFBdlUsSUFBQSxRQUFBLEtBS0F1VSxFQUFBZ1YsRUFBQWpqQixTQUFBcmUsR0FBQXNoQyxFQUFBeE0sT0FBQXo2QixNQUFBeXBDLEtBQUF4WCxXQUVBZ1YsRUFBQXhNLE9BQUF6NkIsUUFBQW1vQyxJQUFBLElBQUFsQixFQUFBeE0sT0FBQXpvQixNQUFBLE9BRUFoVixLQUFBaTFCLElBQ0EsZUFBQWdWLEVBQUF4TCxTQUFBeUgsS0FBQW1ILEdBQUFwWSxFQUFBdUIsS0FBQSxRQUFBLEdBQ0EsYUFBQXlULEVBQUF4TCxTQUFBeUgsTUFBQW1ILEdBQUFwWSxFQUFBdlUsSUFBQSxRQUFBLE1BcUJBMnNCLEVBQUEsU0FBQS90QyxFQUFBcEMsRUFBQXFTLEVBQUFrMEIsR0FDQSxHQUFBOEosR0FBQUMsQ0FFQXZELEdBQUFTLFVBRUE4QyxFQUFBLGFBQUF2RCxFQUFBeEwsU0FBQXlILEtBQUEsa0JBQUE1bUMsRUFBQSxTQUFBLGVBQUFBLEVBQUEsWUFFQXNaLEVBQUEvVyxJQUFBLElBQUFvb0MsRUFBQVUsVUFBQSx1QkFBQXA3QixFQUFBLElBQUEsS0FDQSxVQUFBclMsR0FFQTBiLEVBQUEvVyxJQUFBb29DLEVBQUFRLFNBQUErQyxHQUNBLElBQUFqK0IsRUFFQXFKLEVBQUF3c0IsS0FBQSxtRUFBQSxTQUFBbGtDLEdBRUE2a0MsRUFBQTdrQyxFQUFBNFEsUUFBQXlVLEdBQUEzTixLQUVBQSxFQUFBeXNCLE9BQUE7aUdBQ0FvSSxPQUdBQSxLQUVBLFVBQUF2d0MsRUFDQTBiLEVBQUEvVyxJQUFBb29DLEVBQUFRLFNBQUErQyxHQUNBLFdBQUF0d0MsSUFFQTBiLEVBQUEvVyxJQUFBLElBQUFvb0MsRUFBQVUsVUFBQSw4QkFBQSxVQUNBL3hCLEVBQUEvVyxJQUFBb29DLEVBQUFRLFNBQUErQyxHQUNBLElBQUFqK0IsRUFDQXFKLEVBQUF3c0IsS0FBQSxtRUFBQSxTQUFBbGtDLEdBRUE2a0MsRUFBQTdrQyxFQUFBNFEsUUFBQXlVLEdBQUEzTixLQUVBQSxFQUFBeXNCLE9BQUEsb0VBRUFnSSxFQUFBNUosRUFBQWlLLFdBQUEsUUFBQSxHQUVBQyxRQUdBTixFQUFBNUosRUFBQWlLLFdBQUEsUUFBQSxHQUNBQyxRQUtBSixLQUNBQSxFQUFBdEQsRUFBQVEsVUFBQW5yQyxFQUNBLFVBQUFwQyxFQUNBMGIsRUFBQXVmLFFBQUFvVixFQUFBaCtCLEVBQUEwNkIsRUFBQXhMLFNBQUFqekIsT0FBQSxXQUNBaWlDLE1BRUEsVUFBQXZ3QyxFQUNBMGIsRUFBQS9XLElBQUFvb0MsRUFBQVEsU0FBQW5yQyxHQUNBLFdBQUFwQyxHQUNBMGIsRUFBQXVmLFFBQUFvVixFQUFBaCtCLEVBQUEsU0FBQSxXQUNBODlCLEVBQUE1SixFQUFBaUssV0FBQSxRQUFBLEdBRUFDLFFBU0FDLEVBQUEsV0FLQSxJQUFBLEdBSkFDLEdBQUEsR0FDQUMsRUFBQSxHQUNBYixFQUFBOUIsSUFFQXB0QyxFQUFBLEVBQUFBLEVBQUFrdkMsRUFBQWx2QyxJQUNBK3ZDLEVBQUEsR0FFQTdELEVBQUF4TCxTQUFBdUosWUFBQWpDLEVBQUFsb0MsV0FBQW9zQyxFQUFBeEwsU0FBQXVKLGFBQUFpQyxFQUFBeEwsU0FBQXdKLGFBQ0E2RixFQUFBN0QsRUFBQXhMLFNBQUF1SixXQUFBanFDLEdBQ0Frc0MsRUFBQThELFFBQUF2VCxTQUFBLHFCQUVBc1QsRUFBQS92QyxFQUFBLEVBQ0Frc0MsRUFBQThELFFBQUF2VCxTQUFBLHFCQUlBcVQsR0FBQSwyREFBQTl2QyxFQUFBLDJCQUFBK3ZDLEVBQUEsWUFHQTdELEdBQUE4RCxRQUFBbmxDLEtBQUFpbEMsSUFNQXRDLEVBQUEsV0FDQXRCLEVBQUF4TCxTQUFBd0osWUFhQWdDLEVBQUE4RCxRQUFBaEksRUFBQWtFLEVBQUF4TCxTQUFBd0osY0FYQWdDLEVBQUE4RCxRQUFBaEksRUFBQSw0QkFFQWtFLEVBQUF4TCxTQUFBc0osY0FDQWhDLEVBQUFrRSxFQUFBeEwsU0FBQXNKLGVBQUFuL0IsS0FBQXFoQyxFQUFBOEQsU0FHQTlELEVBQUEvQixTQUFBdHZCLEdBQUE0aEIsU0FBQSxnQkFBQXZILE9BQUFnWCxFQUFBOEQsU0FHQUgsS0FLQTNELEVBQUE4RCxRQUFBbG9DLEdBQUEsaUJBQUEsSUFBQW1vQyxJQU1BM0MsRUFBQSxXQUNBcEIsRUFBQS9CLFNBQUE5dEIsS0FBQTJyQixFQUFBLDhCQUFBa0UsRUFBQXhMLFNBQUEwSixTQUFBLFFBQ0E4QixFQUFBL0IsU0FBQS8wQixLQUFBNHlCLEVBQUEsOEJBQUFrRSxFQUFBeEwsU0FBQTJKLFNBQUEsUUFFQTZCLEVBQUEvQixTQUFBOXRCLEtBQUFnckIsS0FBQSxpQkFBQTZJLEdBQ0FoRSxFQUFBL0IsU0FBQS8wQixLQUFBaXlCLEtBQUEsaUJBQUE4SSxHQUVBakUsRUFBQXhMLFNBQUE0SixjQUNBdEMsRUFBQWtFLEVBQUF4TCxTQUFBNEosY0FBQXBWLE9BQUFnWCxFQUFBL0IsU0FBQTl0QixNQUdBNnZCLEVBQUF4TCxTQUFBNkosY0FDQXZDLEVBQUFrRSxFQUFBeEwsU0FBQTZKLGNBQUFyVixPQUFBZ1gsRUFBQS9CLFNBQUEvMEIsTUFHQTgyQixFQUFBeEwsU0FBQTRKLGNBQUE0QixFQUFBeEwsU0FBQTZKLGVBRUEyQixFQUFBL0IsU0FBQWlHLFlBQUFwSSxFQUFBLHlDQUVBa0UsRUFBQS9CLFNBQUFpRyxZQUFBbGIsT0FBQWdYLEVBQUEvQixTQUFBLzBCLE1BQUE4ZixPQUFBZ1gsRUFBQS9CLFNBQUE5dEIsTUFFQTZ2QixFQUFBL0IsU0FBQXR2QixHQUFBNGhCLFNBQUEsNkJBQUF2SCxPQUFBZ1gsRUFBQS9CLFNBQUFpRyxlQU9BN0MsRUFBQSxXQUNBckIsRUFBQS9CLFNBQUE3bEMsTUFBQTBqQyxFQUFBLGtFQUFBa0UsRUFBQXhMLFNBQUErSixVQUFBLGNBQ0F5QixFQUFBL0IsU0FBQW40QixLQUFBZzJCLEVBQUEsaUVBQUFrRSxFQUFBeEwsU0FBQWdLLFNBQUEsY0FFQXdCLEVBQUEvQixTQUFBa0csT0FBQXJJLEVBQUEsb0NBRUFrRSxFQUFBL0IsU0FBQWtHLE9BQUF2b0MsR0FBQSxRQUFBLFlBQUF3b0MsR0FDQXBFLEVBQUEvQixTQUFBa0csT0FBQXZvQyxHQUFBLFFBQUEsV0FBQXlvQyxHQUVBckUsRUFBQXhMLFNBQUFpSyxvQkFDQXVCLEVBQUEvQixTQUFBa0csT0FBQW5iLE9BQUFnWCxFQUFBL0IsU0FBQTdsQyxPQUdBNG5DLEVBQUEvQixTQUFBa0csT0FBQW5iLE9BQUFnWCxFQUFBL0IsU0FBQTdsQyxPQUFBNHdCLE9BQUFnWCxFQUFBL0IsU0FBQW40QixNQUdBazZCLEVBQUF4TCxTQUFBa0sscUJBQ0E1QyxFQUFBa0UsRUFBQXhMLFNBQUFrSyxzQkFBQS8vQixLQUFBcWhDLEVBQUEvQixTQUFBa0csUUFHQW5FLEVBQUEvQixTQUFBdHZCLEdBQUE0aEIsU0FBQSx3QkFBQXZILE9BQUFnWCxFQUFBL0IsU0FBQWtHLFFBR0FHLEVBQUF0RSxFQUFBeEwsU0FBQXFLLFVBQUEsT0FBQSxVQU1Bb0MsRUFBQSxXQUVBakIsRUFBQWpqQixTQUFBcG9CLEtBQUEsU0FBQW9FLEdBRUEsR0FBQXdyQyxHQUFBekksRUFBQTVwQyxNQUFBK2dCLEtBQUEsYUFBQWlGLEtBQUEsYUFFQW5pQixLQUFBd3VDLElBQUEsR0FBQUEsR0FBQXZ4QyxRQUNBOG9DLEVBQUE1cEMsTUFBQTgyQixPQUFBLGlDQUFBdWIsRUFBQSxvQkFXQVAsRUFBQSxTQUFBL3NDLEdBQ0FBLEVBQUErdEIsaUJBQ0FnYixFQUFBL0IsU0FBQXR2QixHQUFBcWlCLFNBQUEsY0FFQWdQLEVBQUF4TCxTQUFBbUssTUFBQXFCLEVBQUF4TCxTQUFBdUssaUJBQUFwd0IsRUFBQTYxQixXQUNBNzFCLEVBQUE4MUIsa0JBU0FSLEVBQUEsU0FBQWh0QyxHQUNBQSxFQUFBK3RCLGlCQUNBZ2IsRUFBQS9CLFNBQUF0dkIsR0FBQXFpQixTQUFBLGNBRUFnUCxFQUFBeEwsU0FBQW1LLE1BQUFxQixFQUFBeEwsU0FBQXVLLGlCQUFBcHdCLEVBQUE2MUIsV0FDQTcxQixFQUFBKzFCLGtCQVNBTixFQUFBLFNBQUFudEMsR0FDQTBYLEVBQUFnMkIsWUFDQTF0QyxFQUFBK3RCLGtCQVNBcWYsRUFBQSxTQUFBcHRDLEdBQ0EwWCxFQUFBNjFCLFdBQ0F2dEMsRUFBQSt0QixrQkFTQStlLEVBQUEsU0FBQTlzQyxHQUNBLEdBQUEydEMsR0FBQUMsQ0FDQTV0QyxHQUFBK3RCLGlCQUNBZ2IsRUFBQS9CLFNBQUF0dkIsR0FBQXFpQixTQUFBLGNBSUFnUCxFQUFBeEwsU0FBQW1LLE1BQUFxQixFQUFBeEwsU0FBQXVLLGlCQUFBcHdCLEVBQUE2MUIsV0FDQUksRUFBQTlJLEVBQUE3a0MsRUFBQTR0QixtQkFDQTl1QixLQUFBNnVDLEVBQUExc0IsS0FBQSxzQkFDQTJzQixFQUFBelUsU0FBQXdVLEVBQUExc0IsS0FBQSx3QkFFQThuQixFQUFBeE0sT0FBQXo2QixPQUFBNFYsRUFBQW0yQixVQUFBRCxLQVVBM0MsRUFBQSxTQUFBNkMsR0FFQSxHQUFBLzVCLEdBQUFnMUIsRUFBQWpqQixTQUFBL3BCLE1BQ0EsSUFBQSxVQUFBZ3RDLEVBQUF4TCxTQUFBb0osVUFLQSxNQUpBb0MsR0FBQXhMLFNBQUE0SyxVQUFBLElBQ0FwMEIsRUFBQXRLLEtBQUFraUMsS0FBQTVDLEVBQUFqakIsU0FBQS9wQixPQUFBZ3RDLEVBQUF4TCxTQUFBNEssZ0JBRUFZLEdBQUE4RCxRQUFBbmxDLEtBQUFvbUMsRUFBQSxFQUFBL0UsRUFBQXhMLFNBQUFxSixvQkFBQTd5QixFQUlBZzFCLEdBQUE4RCxRQUFBN3dCLEtBQUEsS0FBQTJkLFlBQUEsVUFFQW9QLEVBQUE4RCxRQUFBbnZDLEtBQUEsU0FBQWIsRUFBQTZhLEdBQUFtdEIsRUFBQW50QixHQUFBc0UsS0FBQSxLQUFBdlUsR0FBQXFtQyxHQUFBeFUsU0FBQSxhQU1BaVQsRUFBQSxXQUVBLEdBQUF4RCxFQUFBeEwsU0FBQTJILGFBQUEsQ0FDQSxHQUFBblIsR0FBQSxFQUVBLEtBQUFnVixFQUFBeE0sT0FBQXo2QixNQUVBaXlCLEVBQUFnVixFQUFBampCLFNBQUFyZSxHQUFBLEdBQUFzc0IsV0FFQWdWLEVBQUF4TSxPQUFBejZCLFFBQUFtb0MsSUFBQSxHQUFBbEIsRUFBQUksU0FDQXBWLEVBQUFnVixFQUFBampCLFNBQUFyZSxJQUFBd2lDLElBQUEsR0FBQXNCLEtBQUF4WCxXQUVBZ1YsRUFBQXhNLE9BQUF6NkIsUUFBQWluQyxFQUFBampCLFNBQUEvcEIsT0FBQSxJQUNBZzRCLEVBQUFnVixFQUFBampCLFNBQUFyZSxHQUFBc2hDLEVBQUFqakIsU0FBQS9wQixPQUFBLEdBQUFnNEIsWUFFQUEsSUFDQSxlQUFBZ1YsRUFBQXhMLFNBQUF5SCxLQUFBbUgsR0FBQXBZLEVBQUF1QixLQUFBLFFBQUEsR0FDQSxhQUFBeVQsRUFBQXhMLFNBQUF5SCxNQUFBbUgsR0FBQXBZLEVBQUF2VSxJQUFBLFFBQUEsSUFJQXVwQixFQUFBTyxTQUFBLEVBRUFQLEVBQUF4TCxTQUFBa0wsYUFBQTNyQyxLQUFBNGEsRUFBQXF4QixFQUFBampCLFNBQUFyZSxHQUFBc2hDLEVBQUF4TSxPQUFBejZCLE9BQUFpbkMsRUFBQWdGLFNBQUFoRixFQUFBeE0sT0FBQXo2QixRQVNBdXJDLEVBQUEsU0FBQS82QixHQUVBeTJCLEVBQUF4TCxTQUFBaUssb0JBQ0F1QixFQUFBL0IsU0FBQWtHLE9BQUF4bEMsS0FBQXFoQyxFQUFBL0IsU0FBQTEwQixLQUdBeTJCLEVBQUEvQixTQUFBa0csT0FBQWx4QixLQUFBLEtBQUEyZCxZQUFBLFVBQ0FvUCxFQUFBL0IsU0FBQWtHLE9BQUFseEIsS0FBQSxhQUFBMUosRUFBQSxLQUFBZ25CLFNBQUEsWUFPQTRSLEVBQUEsV0FDQSxJQUFBakIsS0FDQWxCLEVBQUEvQixTQUFBLzBCLEtBQUFxbkIsU0FBQSxZQUNBeVAsRUFBQS9CLFNBQUE5dEIsS0FBQW9nQixTQUFBLGNBQ0F5UCxFQUFBeEwsU0FBQTJILGNBQUE2RCxFQUFBeEwsU0FBQTRILG1CQUVBLElBQUE0RCxFQUFBeE0sT0FBQXo2QixPQUNBaW5DLEVBQUEvQixTQUFBLzBCLEtBQUFxbkIsU0FBQSxZQUNBeVAsRUFBQS9CLFNBQUE5dEIsS0FBQXlnQixZQUFBLGFBRUFvUCxFQUFBeE0sT0FBQXo2QixRQUFBbW9DLElBQUEsR0FDQWxCLEVBQUEvQixTQUFBOXRCLEtBQUFvZ0IsU0FBQSxZQUNBeVAsRUFBQS9CLFNBQUEvMEIsS0FBQTBuQixZQUFBLGNBR0FvUCxFQUFBL0IsU0FBQS8wQixLQUFBMG5CLFlBQUEsWUFDQW9QLEVBQUEvQixTQUFBOXRCLEtBQUF5Z0IsWUFBQSxlQUtBcVUsRUFBQSxXQUFBdDJCLEVBQUFnMkIsYUFDQU8sRUFBQSxXQUFBdjJCLEVBQUE2MUIsWUFJQXhDLEVBQUEsV0FFQSxHQUFBaEMsRUFBQXhMLFNBQUF5SyxVQUFBLEVBQ0EsQ0FBQW45QixXQUFBNk0sRUFBQWcyQixVQUFBM0UsRUFBQXhMLFNBQUF5SyxlQUdBdHdCLEdBQUFnMkIsWUFHQTdJLEVBQUE3cEMsUUFBQXNvQixNQUFBMHFCLEdBQUFuZixLQUFBb2YsRUFHQWxGLEdBQUF4TCxTQUFBd0ssV0FFQXJ3QixFQUFBa2pCLE1BQUEsV0FFQW1PLEVBQUFoK0IsV0FFQTJNLEVBQUE2MUIsVUFBQSxHQUVBeEUsRUFBQW1GLFlBQUEsSUFFQSxXQUVBbkYsRUFBQW1GLGFBRUF4MkIsRUFBQWcyQixXQUFBLEdBRUEzRSxFQUFBbUYsV0FBQSxTQVNBbEQsRUFBQSxXQUNBLEdBQ0FqWCxHQUFBb2EsRUFBQS92QyxFQUFBeWtCLEVBQUF1ckIsRUFBQUMsRUFBQUMsRUFBQUMsRUFEQUMsRUFBQSxDQUdBLFVBQUF6RixFQUFBeEwsU0FBQXNLLGNBQ0Fud0IsRUFBQXFhLE9BQUFnWCxFQUFBampCLFNBQUFsZSxRQUFBMHhCLFNBQUEsY0FHQTVoQixFQUFBc2EsUUFBQStXLEVBQUFqakIsU0FBQWxlLFFBQUEweEIsU0FBQSxhQUNBdkYsRUFBQWdWLEVBQUFqakIsU0FBQTdlLFFBQUE4c0IsV0FDQXlhLEVBQUEsZUFBQXpGLEVBQUF4TCxTQUFBeUgsTUFBQWpSLEVBQUF1QixNQUFBdkIsRUFBQXZVLEtBRUEyc0IsRUFBQXFDLEVBQUEsUUFBQSxHQUVBekYsRUFBQXhMLFNBQUFtSixPQUFBLEVBQ0FxQyxFQUFBeEwsU0FBQXlKLFVBQUEsRUFDQStCLEVBQUF4TCxTQUFBOEosY0FBQSxFQUVBMEIsRUFBQXhMLFNBQUFrSSxjQUNBc0QsRUFBQVMsVUFDQTNtQixFQUFBLGVBQUFrbUIsRUFBQXhMLFNBQUF5SCxLQUFBLEVBQUEsRUFDQStELEVBQUFZLFNBQUEvTyxNQUFBLFdBQ0F1VCxFQUFBejJCLEVBQUEvVyxJQUFBLElBQUFvb0MsRUFBQVUsVUFBQSxjQUNBcnJDLEVBQUFnTSxXQUFBK2pDLEVBQUEvN0IsTUFBQSxLQUFBeVEsSUFDQXNwQixFQUFBL3RDLEVBQUEsUUFBQSxJQUNBLFdBQ0Ftd0MsRUFBQSxFQUNBeEYsRUFBQWpqQixTQUFBcG9CLEtBQUEsU0FBQW9FLEdBQ0F5c0MsR0FBQSxlQUFBeEYsRUFBQXhMLFNBQUF5SCxLQUFBSCxFQUFBNXBDLE1BQUFteEMsWUFBQSxHQUFBdkgsRUFBQTVwQyxNQUFBdXdDLGFBQUEsS0FHQTRDLEVBQUFyRixFQUFBeEwsU0FBQTNHLE1BQUEyWCxFQUVBRixFQUFBLGVBQUF0RixFQUFBeEwsU0FBQXlILEtBQUEsT0FBQSxNQUVBc0osRUFBQUYsR0FBQUcsRUFBQTlrQyxLQUFBZ2xDLElBQUF0VixTQUFBLzZCLEtBQ0FxdUMsRUFBQTZCLE1BSUF2RixFQUFBWSxTQUFBL08sTUFBQSxXQUNBbGpCLEVBQUE3SSxRQUNBLFdBRUEwL0IsRUFBQSxFQUNBeEYsRUFBQWpqQixTQUFBcG9CLEtBQUEsU0FBQW9FLEdBQ0F5c0MsR0FBQSxlQUFBeEYsRUFBQXhMLFNBQUF5SCxLQUFBSCxFQUFBNXBDLE1BQUFteEMsWUFBQSxHQUFBdkgsRUFBQTVwQyxNQUFBdXdDLGFBQUEsS0FHQTRDLEVBQUFyRixFQUFBeEwsU0FBQTNHLE1BQUEyWCxFQUVBRixFQUFBLGVBQUF0RixFQUFBeEwsU0FBQXlILEtBQUEsT0FBQSxNQUVBc0osRUFBQUYsR0FBQUcsRUFBQTlrQyxLQUFBZ2xDLElBQUF0VixTQUFBemhCLEVBQUEvVyxJQUFBMHRDLE1BQ0E1QixFQUFBNkIsTUFLQTdCLEtBTUFBLEVBQUEsU0FBQWlDLEdBQ0EsR0FHQUMsR0FBQW5DLEVBQUFqSyxFQUhBM0wsRUFBQThYLEdBQUEzRixFQUFBeEwsU0FBQTNHLE1BQ0E3QyxHQUFBdUIsS0FBQSxFQUFBOVYsSUFBQSxHQUNBZ0YsR0FBQThRLEtBQUEsRUFBQTlWLElBQUEsRUFJQSxVQUFBdXBCLEVBQUF4TCxTQUFBc0ssY0FDQTlULEVBQUFyYyxFQUFBc0UsS0FBQSxhQUFBL1UsUUFBQThzQixXQUdBdlAsRUFBQXVrQixFQUFBampCLFNBQUE3ZSxRQUFBOHNCLFdBRUE0YSxFQUFBLGVBQUE1RixFQUFBeEwsU0FBQXlILE1BQUFqUixFQUFBdUIsTUFBQXZCLEVBQUF2VSxJQUNBZ3RCLEVBQUEsZUFBQXpELEVBQUF4TCxTQUFBeUgsTUFBQXhnQixFQUFBOFEsTUFBQTlRLEVBQUFoRixJQUNBK2lCLEdBQUFpSyxXQUFBQSxHQUNBTCxFQUFBd0MsRUFBQSxTQUFBL1gsRUFBQTJMLElBTUFxTSxFQUFBLFNBQUFsM0IsR0FDQSxHQUFBMnJCLEdBQUF3QixFQUFBN3BDLFFBQ0EydUMsR0FDQW5xQixJQUFBNmpCLEVBQUFwTixZQUNBWCxLQUFBK04sRUFBQW5OLGNBRUEyWSxFQUFBbjNCLEVBQUErcUIsUUFPQSxPQUxBa0gsR0FBQW1GLE1BQUFuRixFQUFBclUsS0FBQStOLEVBQUFqN0IsUUFDQXVoQyxFQUFBb0YsT0FBQXBGLEVBQUFucUIsSUFBQTZqQixFQUFBNzNCLFNBQ0FxakMsRUFBQUMsTUFBQUQsRUFBQXZaLEtBQUE1ZCxFQUFBMDBCLGFBQ0F5QyxFQUFBRSxPQUFBRixFQUFBcnZCLElBQUE5SCxFQUFBOHpCLGdCQUVBN0IsRUFBQW1GLE1BQUFELEVBQUF2WixNQUFBcVUsRUFBQXJVLEtBQUF1WixFQUFBQyxPQUFBbkYsRUFBQW9GLE9BQUFGLEVBQUFydkIsS0FBQW1xQixFQUFBbnFCLElBQUFxdkIsRUFBQUUsU0FNQTFELEVBQUEsU0FBQXJyQyxHQUNBLEdBQUFndkMsR0FBQW4wQyxTQUFBNEosY0FBQXdxQyxRQUFBM3lDLGFBS0EsSUFBQSxNQUhBLEdBQUFnaEIsUUFBQTB4QixHQUFBLE1BQ0EvdEMsS0FGQSxtQkFJQTJ0QyxFQUFBbDNCLEdBQUEsQ0FDQSxHQUFBLEtBQUExWCxFQUFBcXdCLFFBRUEsTUFEQTBjLEdBQUEvc0MsSUFDQSxDQUNBLElBQUEsS0FBQUEsRUFBQXF3QixRQUVBLE1BREEyYyxHQUFBaHRDLElBQ0EsSUFRQW1yQyxFQUFBLFdBRUFwQyxFQUFBbUcsT0FDQS90QyxPQUFBZ3VDLEVBQUEsRUFBQUMsRUFBQSxHQUNBaHVDLEtBQUErdEMsRUFBQSxFQUFBQyxFQUFBLElBRUFyRyxFQUFBWSxTQUFBekYsS0FBQSx1Q0FBQW1MLEdBSUF0RyxFQUFBWSxTQUFBaGxDLEdBQUEsUUFBQSxjQUFBLFNBQUEzRSxHQUNBK29DLEVBQUFZLFNBQUE1UCxTQUFBLG9CQUNBLzVCLEVBQUErdEIsaUJBQ0FnYixFQUFBWSxTQUFBaFEsWUFBQSxzQkFXQTBWLEVBQUEsU0FBQXJ2QyxHQUlBLEdBRkErb0MsRUFBQS9CLFNBQUF0dkIsR0FBQTRoQixTQUFBLFlBRUF5UCxFQUFBTyxRQUNBdHBDLEVBQUErdEIsaUJBQ0FnYixFQUFBL0IsU0FBQXR2QixHQUFBaWlCLFlBQUEsZ0JBQ0EsQ0FFQW9QLEVBQUFtRyxNQUFBSSxZQUFBNTNCLEVBQUFxYyxVQUNBLElBQUF2bkIsR0FBQXhNLEVBQUF3dUIsY0FDQStnQixNQUFBLEtBQUEvaUMsRUFBQWtqQixlQUFBbGpCLEVBQUFrakIsZ0JBQUFsakIsRUFFQXU4QixHQUFBbUcsTUFBQS90QyxNQUFBZ3VDLEVBQUFJLEVBQUEsR0FBQXhmLE1BQ0FnWixFQUFBbUcsTUFBQS90QyxNQUFBaXVDLEVBQUFHLEVBQUEsR0FBQXZmLE1BRUErWSxFQUFBWSxTQUFBM25DLElBQUEsR0FBQXd0QyxvQkFDQXpHLEVBQUFwWSxVQUFBbmtCLEVBQUFta0IsVUFDQW9ZLEVBQUFZLFNBQUEzbkMsSUFBQSxHQUFBd3RDLGtCQUFBekcsRUFBQXBZLFlBR0FvWSxFQUFBWSxTQUFBekYsS0FBQSxzQ0FBQXVMLEdBRUExRyxFQUFBWSxTQUFBekYsS0FBQSxpQ0FBQXdMLEdBQ0EzRyxFQUFBWSxTQUFBekYsS0FBQSxnQ0FBQXlMLEtBVUFBLEVBQUEsU0FBQTN2QyxHQUdBbXNDLEVBQUFwRCxFQUFBbUcsTUFBQUksWUFBQWhhLEtBQUEsUUFBQSxHQUdBeVQsRUFBQS9CLFNBQUF0dkIsR0FBQWlpQixZQUFBLFlBQ0FvUCxFQUFBWSxTQUFBeEYsT0FBQSxnQ0FBQXdMLEdBQ0E1RyxFQUFBWSxTQUFBeEYsT0FBQSxzQ0FBQXNMLEdBQ0ExRyxFQUFBWSxTQUFBeEYsT0FBQSxpQ0FBQXVMLEdBQ0EzRyxFQUFBWSxTQUFBM25DLElBQUEsR0FBQTR0Qyx1QkFDQTdHLEVBQUFZLFNBQUEzbkMsSUFBQSxHQUFBNHRDLHNCQUFBN0csRUFBQXBZLFlBVUE4ZSxFQUFBLFNBQUF6dkMsR0FDQSxHQUFBd00sR0FBQXhNLEVBQUF3dUIsY0FDQStnQixNQUFBLEtBQUEvaUMsRUFBQWtqQixlQUFBbGpCLEVBQUFrakIsZ0JBQUFsakIsR0FFQXFqQyxFQUFBcG1DLEtBQUFnbEMsSUFBQWMsRUFBQSxHQUFBeGYsTUFBQWdaLEVBQUFtRyxNQUFBL3RDLE1BQUFndUMsR0FDQVcsRUFBQXJtQyxLQUFBZ2xDLElBQUFjLEVBQUEsR0FBQXZmLE1BQUErWSxFQUFBbUcsTUFBQS90QyxNQUFBaXVDLEdBQ0FoeEMsRUFBQSxFQUNBMnhDLEVBQUEsQ0FHQSxHQUFBRixFQUFBQyxHQUFBL0csRUFBQXhMLFNBQUE4SSxxQkFDQXJtQyxFQUFBK3RCLGlCQUVBLEVBQUEraEIsRUFBQUQsR0FBQTlHLEVBQUF4TCxTQUFBK0ksc0JBQ0F0bUMsRUFBQSt0QixpQkFFQSxTQUFBZ2IsRUFBQXhMLFNBQUF5SCxNQUFBK0QsRUFBQXhMLFNBQUE2SSxnQkFFQSxlQUFBMkMsRUFBQXhMLFNBQUF5SCxNQUNBK0ssRUFBQVIsRUFBQSxHQUFBeGYsTUFBQWdaLEVBQUFtRyxNQUFBL3RDLE1BQUFndUMsRUFDQS93QyxFQUFBMnFDLEVBQUFtRyxNQUFBSSxZQUFBaGEsS0FBQXlhLElBR0FBLEVBQUFSLEVBQUEsR0FBQXZmLE1BQUErWSxFQUFBbUcsTUFBQS90QyxNQUFBaXVDLEVBQ0FoeEMsRUFBQTJxQyxFQUFBbUcsTUFBQUksWUFBQTl2QixJQUFBdXdCLEdBRUE1RCxFQUFBL3RDLEVBQUEsUUFBQSxLQVVBc3hDLEVBQUEsU0FBQTF2QyxHQUNBK29DLEVBQUFZLFNBQUF4RixPQUFBLHNDQUFBc0wsR0FFQTFHLEVBQUEvQixTQUFBdHZCLEdBQUFpaUIsWUFBQSxXQUNBLElBQUFudEIsR0FBQXhNLEVBQUF3dUIsY0FDQStnQixNQUFBLEtBQUEvaUMsRUFBQWtqQixlQUFBbGpCLEVBQUFrakIsZ0JBQUFsakIsR0FDQXBPLEVBQUEsRUFDQTR4QyxFQUFBLENBRUFqSCxHQUFBbUcsTUFBQTl0QyxJQUFBK3RDLEVBQUFJLEVBQUEsR0FBQXhmLE1BQ0FnWixFQUFBbUcsTUFBQTl0QyxJQUFBZ3VDLEVBQUFHLEVBQUEsR0FBQXZmLE1BRUEsU0FBQStZLEVBQUF4TCxTQUFBeUgsTUFDQWdMLEVBQUF2bUMsS0FBQWdsQyxJQUFBMUYsRUFBQW1HLE1BQUEvdEMsTUFBQWd1QyxFQUFBcEcsRUFBQW1HLE1BQUE5dEMsSUFBQSt0QyxLQUNBcEcsRUFBQXhMLFNBQUE0SSxpQkFDQTRDLEVBQUFtRyxNQUFBL3RDLE1BQUFndUMsRUFBQXBHLEVBQUFtRyxNQUFBOXRDLElBQUErdEMsRUFDQXozQixFQUFBODFCLGdCQUVBOTFCLEVBQUErMUIsZ0JBRUEvMUIsRUFBQTYxQixhQUtBLGVBQUF4RSxFQUFBeEwsU0FBQXlILE1BQ0FnTCxFQUFBakgsRUFBQW1HLE1BQUE5dEMsSUFBQSt0QyxFQUFBcEcsRUFBQW1HLE1BQUEvdEMsTUFBQWd1QyxFQUNBL3dDLEVBQUEycUMsRUFBQW1HLE1BQUFJLFlBQUFoYSxPQUVBMGEsRUFBQWpILEVBQUFtRyxNQUFBOXRDLElBQUFndUMsRUFBQXJHLEVBQUFtRyxNQUFBL3RDLE1BQUFpdUMsRUFDQWh4QyxFQUFBMnFDLEVBQUFtRyxNQUFBSSxZQUFBOXZCLE1BR0F1cEIsRUFBQXhMLFNBQUEySCxlQUFBLElBQUE2RCxFQUFBeE0sT0FBQXo2QixPQUFBa3VDLEVBQUEsR0FBQWpILEVBQUF4TSxPQUFBem9CLE1BQUFrOEIsRUFBQSxHQUNBN0QsRUFBQS90QyxFQUFBLFFBQUEsS0FHQXFMLEtBQUFnbEMsSUFBQXVCLElBQUFqSCxFQUFBeEwsU0FBQTRJLGdCQUNBNkosRUFBQSxFQUNBdDRCLEVBQUE4MUIsZ0JBRUE5MUIsRUFBQSsxQixnQkFFQS8xQixFQUFBNjFCLFlBR0FwQixFQUFBL3RDLEVBQUEsUUFBQSxNQUlBMnFDLEVBQUFZLFNBQUF4RixPQUFBLGlDQUFBdUwsR0FDQTNHLEVBQUFZLFNBQUEzbkMsSUFBQSxHQUFBNHRDLHVCQUNBN0csRUFBQVksU0FBQTNuQyxJQUFBLEdBQUE0dEMsc0JBQUE3RyxFQUFBcFksWUFPQW1hLEVBQUEsU0FBQTlxQyxHQUVBLEdBQUErb0MsRUFBQThCLFlBRUEsR0FBQTlCLEVBQUFPLFFBQ0F0dUMsT0FBQTZQLFdBQUFpZ0MsRUFBQSxRQUNBLENBRUEsR0FBQW1GLEdBQUFwTCxFQUFBN3BDLFFBQUFvTixRQUNBOG5DLEVBQUFyTCxFQUFBN3BDLFFBQUF3USxRQUlBdzlCLEtBQUFpSCxHQUFBaEgsSUFBQWlILElBRUFsSCxFQUFBaUgsRUFDQWhILEVBQUFpSCxFQUVBeDRCLEVBQUFrekIsZUFFQTdCLEVBQUF4TCxTQUFBcUwsZUFBQTlyQyxLQUFBNGEsRUFBQXF4QixFQUFBeE0sT0FBQXo2QixVQVdBcXVDLEVBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBekUsR0FFQTdDLEdBQUF4TCxTQUFBaUosYUFBQXVDLEVBQUF4TCxTQUFBaUksU0FFQXVELEVBQUFqakIsU0FBQTdFLEtBQUEsY0FBQSxRQUVBOG5CLEVBQUFqakIsU0FBQS9tQixNQUFBcXhDLEVBQUFBLEVBQUFDLEdBQUFwdkIsS0FBQSxjQUFBLFdBVUFxdkIsRUFBQSxTQUFBeEMsR0FDQSxNQUFBQSxHQUFBLEVBQ0EvRSxFQUFBeEwsU0FBQTJILGFBQ0ErRSxJQUFBLEVBR0FsQixFQUFBeE0sT0FBQXo2QixNQUdBZ3NDLEdBQUE3RCxJQUNBbEIsRUFBQXhMLFNBQUEySCxhQUNBLEVBR0E2RCxFQUFBeE0sT0FBQXo2QixNQUlBZ3NDLEVBK1NBLE9BNVJBcDJCLEdBQUFtMkIsVUFBQSxTQUFBQyxFQUFBeUMsR0FHQSxHQUlBckUsR0FBQXprQyxFQUFBckosRUFBQW95QyxFQUpBQyxHQUFBLEVBQ0FDLEVBQUEsRUFDQTNjLEdBQUF1QixLQUFBLEVBQUE5VixJQUFBLEdBQ0ExYixFQUFBLElBUUEsSUFMQWlsQyxFQUFBZ0YsU0FBQWhGLEVBQUF4TSxPQUFBejZCLE1BRUFpbkMsRUFBQXhNLE9BQUF6NkIsTUFBQXd1QyxFQUFBeEMsSUFHQS9FLEVBQUFPLFNBQUFQLEVBQUF4TSxPQUFBejZCLFFBQUFpbkMsRUFBQWdGLFNBQUEsQ0FPQSxHQUxBaEYsRUFBQU8sU0FBQSxNQUtBLE1BSEFtSCxFQUFBMUgsRUFBQXhMLFNBQUFpTCxjQUFBMXJDLEtBQUE0YSxFQUFBcXhCLEVBQUFqakIsU0FBQXJlLEdBQUFzaEMsRUFBQXhNLE9BQUF6NkIsT0FBQWluQyxFQUFBZ0YsU0FBQWhGLEVBQUF4TSxPQUFBejZCLFVBR0EydUMsRUFHQSxNQUZBMUgsR0FBQXhNLE9BQUF6NkIsTUFBQWluQyxFQUFBZ0YsY0FDQWhGLEVBQUFPLFNBQUEsRUFJQSxVQUFBaUgsRUFFQXhILEVBQUF4TCxTQUFBbUwsWUFBQTVyQyxLQUFBNGEsRUFBQXF4QixFQUFBampCLFNBQUFyZSxHQUFBc2hDLEVBQUF4TSxPQUFBejZCLE9BQUFpbkMsRUFBQWdGLFNBQUFoRixFQUFBeE0sT0FBQXo2QixTQUNBMnVDLEdBQUEsR0FFQSxTQUFBRixJQUVBeEgsRUFBQXhMLFNBQUFvTCxZQUFBN3JDLEtBQUE0YSxFQUFBcXhCLEVBQUFqakIsU0FBQXJlLEdBQUFzaEMsRUFBQXhNLE9BQUF6NkIsT0FBQWluQyxFQUFBZ0YsU0FBQWhGLEVBQUF4TSxPQUFBejZCLFNBQ0EydUMsR0FBQSxJQUtBMUgsRUFBQXhNLE9BQUF6b0IsS0FBQWkxQixFQUFBeE0sT0FBQXo2QixPQUFBbW9DLElBQUEsR0FFQWxCLEVBQUF4TCxTQUFBbUosT0FBQXFDLEVBQUF4TCxTQUFBd0osY0FBQWtFLEVBQUFsQyxFQUFBeE0sT0FBQXo2QixPQUVBaW5DLEVBQUF4TCxTQUFBeUosVUFBQWtFLElBRUEsU0FBQW5DLEVBQUF4TCxTQUFBeUgsTUFFQStELEVBQUF4TCxTQUFBbUksZ0JBQUFxRCxFQUFBWSxTQUFBbitCLFdBQUFtL0IsS0FDQTVCLEVBQUFZLFNBQUExUyxTQUFBenJCLE9BQUFtL0IsS0FBQTVCLEVBQUF4TCxTQUFBb0kscUJBR0FvRCxFQUFBampCLFNBQUEzb0IsT0FBQSxZQUFBeTZCLFFBQUFtUixFQUFBeEwsU0FBQTNHLE9BQUFqMkIsS0FBQWswQixPQUFBLElBRUFrVSxFQUFBampCLFNBQUFyZSxHQUFBc2hDLEVBQUF4TSxPQUFBejZCLE9BQUFuQixJQUFBLFNBQUFvb0MsRUFBQXhMLFNBQUF5SSxZQUFBLEdBQUFyTyxPQUFBb1IsRUFBQXhMLFNBQUEzRyxNQUFBLFdBQ0FpTyxFQUFBNXBDLE1BQUEwRixJQUFBLFNBQUFvb0MsRUFBQXhMLFNBQUF5SSxhQUNBdUcsUUFLQXhELEVBQUF4TCxTQUFBbUksZ0JBQUFxRCxFQUFBWSxTQUFBbitCLFdBQUFtL0IsS0FDQTVCLEVBQUFZLFNBQUExUyxTQUFBenJCLE9BQUFtL0IsS0FBQTVCLEVBQUF4TCxTQUFBb0ksc0JBR0FvRCxFQUFBeEwsU0FBQTJILGNBQUE2RCxFQUFBSSxVQUFBSixFQUFBeE0sT0FBQXpvQixLQUNBLGVBQUFpMUIsRUFBQXhMLFNBQUF5SCxNQUVBbGhDLEVBQUFpbEMsRUFBQWpqQixTQUFBcmUsR0FBQXNoQyxFQUFBampCLFNBQUEvcEIsT0FBQSxHQUNBZzRCLEVBQUFqd0IsRUFBQWl3QixXQUVBMmMsRUFBQTNILEVBQUFZLFNBQUF2aEMsUUFBQXRFLEVBQUFzb0MsZUFHQUYsRUFBQW5ELEVBQUFqakIsU0FBQS9wQixPQUFBZ3RDLEVBQUF4TCxTQUFBMkssVUFDQW5VLEVBQUFnVixFQUFBampCLFNBQUFyZSxHQUFBeWtDLEdBQUFuWSxZQUdBZ1YsRUFBQUksVUFBQUosRUFBQXhNLE9BQUF6b0IsTUFBQSxTQUFBeThCLEdBRUE5b0MsRUFBQSxJQUFBc2hDLEVBQUF4TCxTQUFBNkssV0FBQVcsRUFBQXhMLFNBQUE0SyxVQUFBb0QsS0FBQXRCLElBQUEsR0FBQXNCLEtBQUF4QyxFQUFBampCLFNBQUEvcEIsT0FBQWd0QyxFQUFBeEwsU0FBQTRLLFdBQ0Fya0MsRUFBQTRULEVBQUFvTyxTQUFBLGFBQUFyZSxHQUFBQSxHQUNBc3NCLEVBQUFqd0IsRUFBQWl3QixZQUVBLFNBQUF3YyxHQUFBLElBQUF4SCxFQUFBeE0sT0FBQXo2QixPQUVBaXlCLEVBQUFyYyxFQUFBc0UsS0FBQSxlQUFBdlUsR0FBQXNoQyxFQUFBeEwsU0FBQTRLLFdBQUFwVSxXQUNBZ1YsRUFBQXhNLE9BQUF6b0IsTUFBQSxHQUVBZzZCLEdBQUEsSUFFQTBDLEVBQUExQyxFQUFBM1UsU0FBQW9TLEtBQ0F4WCxFQUFBZ1YsRUFBQWpqQixTQUFBcmUsR0FBQStvQyxHQUFBemMsZ0JBT0EsS0FBQSxJQUNBMzFCLEVBQUEsZUFBQTJxQyxFQUFBeEwsU0FBQXlILE9BQUFqUixFQUFBdUIsS0FBQW9iLElBQUEzYyxFQUFBdlUsSUFFQTJzQixFQUFBL3RDLEVBQUEsUUFBQTJxQyxFQUFBeEwsU0FBQTNHLFFBRUFtUyxFQUFBTyxTQUFBLEdBRUFQLEVBQUF4TCxTQUFBaUosWUFBQTJKLEVBQUFwSCxFQUFBeE0sT0FBQXo2QixNQUFBeXBDLE9BTUE3ekIsRUFBQTgxQixjQUFBLFdBRUEsSUFBQXpFLEVBQUF4TCxTQUFBMkgsZUFBQTZELEVBQUF4TSxPQUFBem9CLE9BQ0EsR0FBQWkxQixFQUFBTyxRQUFBLENBQ0EsR0FBQXNFLEdBQUF6VSxTQUFBNFAsRUFBQXhNLE9BQUF6NkIsT0FBQSxDQUNBNFYsR0FBQW0yQixVQUFBRCxFQUFBLFVBTUFsMkIsRUFBQSsxQixjQUFBLFdBRUEsSUFBQTFFLEVBQUF4TCxTQUFBMkgsY0FBQSxJQUFBNkQsRUFBQXhNLE9BQUF6NkIsUUFDQSxHQUFBaW5DLEVBQUFPLFFBQUEsQ0FDQSxHQUFBc0UsR0FBQXpVLFNBQUE0UCxFQUFBeE0sT0FBQXo2QixPQUFBLENBQ0E0VixHQUFBbTJCLFVBQUFELEVBQUEsVUFTQWwyQixFQUFBZzJCLFVBQUEsU0FBQWlELEdBRUE1SCxFQUFBaCtCLFdBRUFnK0IsRUFBQWgrQixTQUFBNmxDLFlBQUEsV0FDQSxTQUFBN0gsRUFBQXhMLFNBQUFzSyxjQUNBbndCLEVBQUE4MUIsZ0JBRUE5MUIsRUFBQSsxQixpQkFFQTFFLEVBQUF4TCxTQUFBb0ssT0FFQW9CLEVBQUF4TCxTQUFBc0wsYUFBQS9yQyxLQUFBNGEsR0FBQSxHQUVBcXhCLEVBQUF4TCxTQUFBOEosZUFBQSxJQUFBc0osR0FBQXRELEVBQUEsVUFTQTMxQixFQUFBNjFCLFNBQUEsU0FBQW9ELEdBRUE1SCxFQUFBaCtCLFdBRUE4bEMsY0FBQTlILEVBQUFoK0IsVUFDQWcrQixFQUFBaCtCLFNBQUEsS0FFQWcrQixFQUFBeEwsU0FBQXNMLGFBQUEvckMsS0FBQTRhLEdBQUEsR0FFQXF4QixFQUFBeEwsU0FBQThKLGVBQUEsSUFBQXNKLEdBQUF0RCxFQUFBLFdBTUEzMUIsRUFBQW81QixnQkFBQSxXQUNBLE1BQUEvSCxHQUFBeE0sT0FBQXo2QixPQU1BNFYsRUFBQXE1Qix1QkFBQSxXQUNBLE1BQUFoSSxHQUFBampCLFNBQUFyZSxHQUFBc2hDLEVBQUF4TSxPQUFBejZCLFFBUUE0VixFQUFBczVCLGdCQUFBLFNBQUFsdkMsR0FDQSxNQUFBaW5DLEdBQUFqakIsU0FBQXJlLEdBQUEzRixJQU1BNFYsRUFBQXU1QixjQUFBLFdBQ0EsTUFBQWxJLEdBQUFqakIsU0FBQS9wQixRQU1BMmIsRUFBQXc1QixVQUFBLFdBQ0EsTUFBQW5JLEdBQUFPLFNBTUE1eEIsRUFBQWt6QixhQUFBLFdBRUE3QixFQUFBampCLFNBQUF6Z0IsSUFBQXFTLEVBQUFzRSxLQUFBLGNBQUFvd0IsV0FBQXJDLEtBRUFoQixFQUFBWSxTQUFBaHBDLElBQUEsU0FBQWdxQyxLQUVBNUIsRUFBQXhMLFNBQUFpSSxRQUFBa0YsSUFHQTNCLEVBQUF4TSxPQUFBem9CLE9BQUFpMUIsRUFBQXhNLE9BQUF6NkIsTUFBQW1vQyxJQUFBLEdBRUFsQixFQUFBeE0sT0FBQXo2QixPQUFBbW9DLE1BQUFsQixFQUFBeE0sT0FBQXpvQixNQUFBLEdBRUFpMUIsRUFBQXhMLFNBQUFtSixRQUFBcUMsRUFBQXhMLFNBQUF3SixjQUNBMkYsSUFDQXpCLEVBQUFsQyxFQUFBeE0sT0FBQXo2QixRQUVBaW5DLEVBQUF4TCxTQUFBaUosWUFBQTJKLEVBQUFwSCxFQUFBeE0sT0FBQXo2QixNQUFBeXBDLE1BTUE3ekIsRUFBQXk1QixjQUFBLFdBRUFwSSxFQUFBOEIsY0FDQTlCLEVBQUE4QixhQUFBLEVBQ0FoRyxFQUFBLFlBQUE1cEMsTUFBQThNLFNBQ0FnaEMsRUFBQWpqQixTQUFBcG9CLEtBQUEsZUFDQW9CLEtBQUErbEMsRUFBQTVwQyxNQUFBc0UsS0FBQSxhQUNBc2xDLEVBQUE1cEMsTUFBQWdtQixLQUFBLFFBQUE0akIsRUFBQTVwQyxNQUFBc0UsS0FBQSxjQUVBc2xDLEVBQUE1cEMsTUFBQXU5QixXQUFBLGVBR0ExNUIsS0FBQStsQyxFQUFBNXBDLE1BQUFzRSxLQUFBLGFBQ0F0RSxLQUFBZ21CLEtBQUEsUUFBQTRqQixFQUFBNXBDLE1BQUFzRSxLQUFBLGNBRUFzbEMsRUFBQTVwQyxNQUFBdTlCLFdBQUEsU0FFQXFNLEVBQUE1cEMsTUFBQStrQyxTQUFBQSxTQUNBK0ksRUFBQS9CLFNBQUF0dkIsSUFBQXF4QixFQUFBL0IsU0FBQXR2QixHQUFBM1AsU0FDQWdoQyxFQUFBL0IsU0FBQTl0QixNQUFBNnZCLEVBQUEvQixTQUFBOXRCLEtBQUFuUixTQUNBZ2hDLEVBQUEvQixTQUFBLzBCLE1BQUE4MkIsRUFBQS9CLFNBQUEvMEIsS0FBQWxLLFNBQ0FnaEMsRUFBQThELFNBQUE5RCxFQUFBeEwsU0FBQXlKLFdBQUErQixFQUFBeEwsU0FBQXdKLGFBQUFnQyxFQUFBOEQsUUFBQTlrQyxTQUNBODhCLEVBQUEsY0FBQTVwQyxNQUFBOE0sU0FDQWdoQyxFQUFBL0IsU0FBQWtHLFFBQUFuRSxFQUFBL0IsU0FBQWtHLE9BQUFubEMsU0FDQThvQyxjQUFBOUgsRUFBQWgrQixVQUNBZytCLEVBQUF4TCxTQUFBd0ksWUFBQWxCLEVBQUE3cEMsUUFBQW1wQyxPQUFBLFNBQUEyRyxHQUNBL0IsRUFBQXhMLFNBQUFrSixpQkFBQTVCLEVBQUFocUMsVUFBQXNwQyxPQUFBLFVBQUFrSCxHQUVBeEcsRUFBQTVwQyxNQUFBbXZCLFdBQUEsWUFFQXlhLEVBQUE3cEMsUUFBQWtLLElBQUEsT0FBQStvQyxHQUFBL29DLElBQUEsUUFBQThvQyxLQU1BdDJCLEVBQUEwNUIsYUFBQSxTQUFBN1QsT0FDQXorQixLQUFBeStCLElBQUEvL0IsRUFBQSsvQixHQUNBN2xCLEVBQUF5NUIsZ0JBQ0EzbUMsSUFFQXE2QixFQUFBbnRCLEdBQUFuWSxLQUFBLFdBQUF0RSxPQUdBdVAsSUFFQXE2QixFQUFBbnRCLEdBQUFuWSxLQUFBLFdBQUF0RSxNQUdBQSxRQUdBZ0IsUUNwa0RBLFNBQUFqQixFQUFBSCxFQUFBZ3FDLEVBQUEvbEMsR0FDQSxZQXc2RkEsU0FBQXV5QyxHQUFBcnhDLEdBQ0EsR0FBQXN4QyxHQUFBek0sRUFBQTdrQyxFQUFBNHRCLGVBQ0E1aEIsRUFBQWhNLEVBQUFULEtBQUFTLEVBQUFULEtBQUEvQixXQUNBWSxFQUFBa3pDLEVBQUFyd0IsS0FBQSxrQkFBQSxHQUNBbmYsRUFBQSxFQUNBeXZDLElBR0F2eEMsR0FBQWl2Qix1QkFJQWp2QixFQUFBK3RCLGlCQUdBM3ZCLEdBQ0FtekMsRUFBQXZsQyxFQUFBbkgsU0FBQWdnQyxFQUFBNzRCLEVBQUFuSCxVQUFBN0UsRUFBQVQsS0FBQVMsRUFBQVQsS0FBQWd5QyxTQUNBQSxFQUFBQSxFQUFBeDFDLE9BQUF3MUMsRUFBQXAwQyxPQUFBLG1CQUFBaUIsRUFBQSxNQUFBeW1DLEVBQUEsbUJBQUF6bUMsRUFBQSxPQUVBMEQsRUFBQXl2QyxFQUFBenZDLE1BQUF3dkMsSUFJQSxJQUNBeHZDLEVBQUEsSUFJQXl2QyxHQUFBRCxHQUdBek0sRUFBQTJNLFNBQUE1USxLQUFBMlEsRUFBQXZsQyxFQUFBbEssSUFsOEZBLEdBQUEraUMsRUFBQSxDQU9BLEdBQUFBLEVBQUEvL0IsR0FBQTBzQyxTQU1BLFlBSkEsV0FBQXgyQyxJQUNBbXVCLFFBQUFzb0IsSUFBQSxnQ0FTQSxJQUFBMU0sSUFHQTJNLE1BQUEsRUFHQW5jLFFBQUEsR0FBQSxHQUdBb2MsT0FBQSxHQUdBQyxVQUFBLEVBR0FDLFFBQUEsRUFHQUMsU0FBQSxFQUdBQyxTQUFBLEVBS0F6aEIsU0FDQSxZQUNBLGFBQ0EsU0FDQSxRQUdBLFNBSUEwaEIsU0FBQSxFQUtBQyxTQUFBLE9BR0FDLFNBQUEsRUFHQUMsT0FBQSxFQUVBN3RCLE9BS0E4dEIsUUFBQSxRQUlBMVUsTUFHQUgsVUFJQWgrQixNQUNBaXlDLFVBQUEsS0FNQWEsUUFHQUMsSUFBQSwrTkFLQUYsU0FBQSxFQUlBenhDLE9BR0FzZ0IsTUFDQXN4QixVQUFBLFNBTUFDLFlBQUEsUUFTQUMsZ0JBQUEsT0FHQUMsa0JBQUEsSUFJQUMsWUFBQSxPQWFBQyxpQkFBQSxPQUdBQyxtQkFBQSxJQUdBQyxXQUFBLEdBR0FDLFVBQUEsR0FHQUMsUUFDQSx3Y0FjQUMsV0FBQSx1Q0FHQUMsU0FBQSxvREFFQUMsUUFFQUMsU0FBQSx3T0FNQXRlLEtBQUEsdU5BTUF1ZSxNQUFBLGdMQVFBcEIsU0FBQSx1RkFHQXFCLFVBQUEsNk1BTUFDLFdBQUEsK01BUUFDLFNBQUEsT0FPQUMsV0FBQSxFQUdBQyxXQUFBLEVBR0FDLFdBQUEsRUFNQUMsWUFDQWhNLFdBQUEsR0FJQXNILE9BQ0EyRSxVQUFBLEVBQ0FDLFVBQUEsR0FLQTN3QixLQUFBLEtBYUE0d0IsU0FFQUMsV0FDQXBNLFdBQUEsRUFDQWhSLE1BQUEsS0FHQXFkLFFBQ0FyTSxXQUFBLEVBQ0FzTSxhQUFBLEVBQ0FWLFNBQUEsc0JBQ0FXLEtBQUEsS0FlQUMsT0FBQXZQLEVBQUFyd0IsS0FFQTYvQixXQUFBeFAsRUFBQXJ3QixLQUNBOC9CLFVBQUF6UCxFQUFBcndCLEtBRUErL0IsV0FBQTFQLEVBQUFyd0IsS0FDQWdnQyxVQUFBM1AsRUFBQXJ3QixLQUVBaWdDLFlBQUE1UCxFQUFBcndCLEtBQ0FrZ0MsV0FBQTdQLEVBQUFyd0IsS0FFQW1nQyxXQUFBOVAsRUFBQXJ3QixLQUNBb2dDLGFBQUEvUCxFQUFBcndCLEtBa0JBcWdDLGFBQUEsU0FBQTlpQyxFQUFBOU0sR0FDQSxNQUFBLFVBQUE4TSxFQUFBL1YsTUFBQSxRQUlBODRDLFdBQUEsUUFHQUMsYUFBQSxRQUdBQyxpQkFBQSxFQUNBQyxlQUFBLEVBQ0FDLGlCQUFBLEVBTUFDLFFBQ0E1ZixPQUFBLEVBRUFzZixhQUFBLFNBQUE5aUMsRUFBQTlNLEdBQ0EsTUFBQSxVQUFBOE0sRUFBQS9WLE1BQUEsa0JBRUE4NEMsV0FBQSxTQUFBL2lDLEVBQUE5TSxHQUNBLE1BQUEsVUFBQThNLEVBQUEvVixLQUFBLGlCQUFBLFNBRUFnNUMsZ0JBQUEsU0FBQWpqQyxFQUFBOU0sR0FDQSxNQUFBLFVBQUE4TSxFQUFBL1YsTUFBQSxRQUVBaTVDLGNBQUEsU0FBQWxqQyxFQUFBOU0sR0FDQSxNQUFBLFVBQUE4TSxFQUFBL1YsTUFBQSxTQVFBaW5CLEtBQUEsS0FDQW15QixNQUNBQyxJQUNBQyxNQUFBLFFBQ0FDLEtBQUEsT0FDQUMsS0FBQSxXQUNBQyxNQUFBLHdFQUNBQyxXQUFBLGtCQUNBQyxVQUFBLGtCQUNBQyxZQUFBLGNBQ0FDLE9BQUEsYUFDQUMsU0FBQSxXQUNBQyxNQUFBLFFBQ0FDLEtBQUEsUUFFQUMsSUFDQVgsTUFBQSxhQUNBQyxLQUFBLFNBQ0FDLEtBQUEsU0FDQUMsTUFBQSxxR0FDQUMsV0FBQSxtQkFDQUMsVUFBQSxtQkFDQUMsWUFBQSxXQUNBQyxPQUFBLGlCQUNBQyxTQUFBLGdCQUNBQyxNQUFBLFNBQ0FDLEtBQUEsYUFTQUUsRUFBQXJSLEVBQUE3cEMsR0FDQW03QyxFQUFBdFIsRUFBQWhxQyxHQUVBdTdDLEVBQUEsRUFNQUMsRUFBQSxTQUFBdjZDLEdBQ0EsTUFBQUEsSUFBQUEsRUFBQWlYLGdCQUFBalgsWUFBQStvQyxJQU9BeVIsRUFBQSxXQUNBLE1BQUF0N0MsR0FBQTRQLHVCQUNBNVAsRUFBQXU3Qyw2QkFDQXY3QyxFQUFBdzdDLDBCQUNBeDdDLEVBQUF5N0Msd0JBRUEsU0FBQTF2QyxHQUNBLE1BQUEvTCxHQUFBNlAsV0FBQTlELEVBQUEsSUFBQSxRQVFBMnZDLEVBQUEsV0FDQSxHQUFBcnFCLEdBQUEzVSxFQUFBN2MsRUFBQVUsY0FBQSxlQUVBbzdDLEdBQ0FDLFdBQUEsZ0JBQ0FDLFlBQUEsaUJBQ0FDLGNBQUEsZ0JBQ0FDLGlCQUFBLHNCQUdBLEtBQUExcUIsSUFBQXNxQixHQUNBLE9BdGJBLEtBc2JBai9CLEVBQUF4VyxNQUFBbXJCLEdBQ0EsTUFBQXNxQixHQUFBdHFCLEVBSUEsT0FBQSxtQkFRQTJxQixFQUFBLFNBQUFDLEdBQ0EsTUFBQUEsSUFBQUEsRUFBQWw3QyxRQUFBazdDLEVBQUEsR0FBQTlXLGNBT0ErVyxFQUFBLFNBQUEzeEMsRUFBQXlHLEVBQUFsSyxHQUNBLEdBQUEwRixHQUFBdk0sSUFFQXVNLEdBQUF3RSxLQUFBNjRCLEVBQUF0K0IsUUFBQSxHQUFBekUsTUFBQUEsR0FBQStpQyxFQUFBMk0sU0FBQXpNLFNBQUEvNEIsT0FFQTY0QixFQUFBMk0sU0FBQTJGLFdBQ0EzdkMsRUFBQXdFLEtBQUE2NEIsRUFBQXQrQixRQUFBLEtBQUFpQixFQUFBd0UsS0FBQXhFLEVBQUF3RSxLQUFBbXBDLFNBSUFucEMsR0FBQTY0QixFQUFBcDNCLFFBQUF6QixFQUFBc2tCLFdBQ0E5b0IsRUFBQXdFLEtBQUFza0IsUUFBQXRrQixFQUFBc2tCLFNBR0E5b0IsRUFBQTZPLEdBQUE3TyxFQUFBd0UsS0FBQXFLLE1BQUErL0IsRUFDQTV1QyxFQUFBNHZDLFNBRUE1dkMsRUFBQTZ2QyxVQUFBbGUsU0FBQTN4QixFQUFBd0UsS0FBQWxLLE1BQUEsS0FBQSxFQUNBMEYsRUFBQTh2QyxVQUFBLEtBRUE5dkMsRUFBQSt2QyxRQUFBLEtBQ0EvdkMsRUFBQWd3QyxRQUFBLEVBRUFod0MsRUFBQWl3QyxTQUFBLEtBR0Fqd0MsRUFBQWt3QyxZQUFBbnlDLEdBRUFpQyxFQUFBNHZDLE1BQUFyN0MsU0FLQXlMLEVBQUFtd0MsV0FBQTlTLEVBQUFocUMsRUFBQTRKLGVBQUFvcUIsT0FHQXJuQixFQUFBb3dDLFVBRUFwd0MsRUFBQWdELFFBR0FxNkIsR0FBQXQrQixPQUFBMndDLEVBQUEzc0MsV0FLQUMsS0FBQSxXQUNBLEdBSUFxdEMsR0FDQUMsRUFDQUMsRUFOQXZ3QyxFQUFBdk0sS0FDQSs4QyxFQUFBeHdDLEVBQUE0dkMsTUFBQTV2QyxFQUFBNnZDLFdBQ0FZLEVBQUFELEVBQUFoc0MsS0FDQWtzQyxFQUFBclQsRUFBQTJNLFNBQUEwRyxjQUtBMXdDLEdBQUF5dUIsVUFBQWtnQixFQUFBbGdCLFlBQ0F6dUIsRUFBQTB1QixXQUFBaWdCLEVBQUFqZ0IsYUFNQTJPLEVBQUEyTSxTQUFBMkcsZ0JBRUF0VCxFQUFBLFFBQUF2TCxTQUFBLG1CQUdBLG1CQUFBcDhCLEtBQUFrN0MsVUFBQUMsYUFBQXI5QyxFQUFBczlDLFNBTUEsVUFBQU4sRUFBQWg4QyxNQUNBNm9DLEVBQUEsUUFBQWxrQyxJQUFBLE9BQUEsRUFBQWtrQyxFQUFBLFFBQUE1TyxhQUFBcUQsU0FBQSxvQkFHQXVMLEVBQUEyTSxTQUFBMkYsVUFBQXQ4QyxFQUFBNkcsS0FBQTYyQyxhQUFBdjlDLEVBQUF3OUMsa0JBeGhCQSxLQTBoQkFOLElBQ0FMLEVBQUFoVCxFQUFBLDJEQUFBdlMsU0FBQSxRQUVBNGxCLEVBQUFyVCxFQUFBMk0sU0FBQTBHLGVBQUFMLEVBQUEsR0FBQTNYLFlBQUEyWCxFQUFBLEdBQUFZLFlBRUFaLEVBQUE5dkMsVUFHQTg4QixFQUFBLFFBQUE5UyxPQUFBLGlHQUFBbW1CLEVBQUEsaUJBQ0FyVCxFQUFBLFFBQUF2TCxTQUFBLDhCQVNBeWUsRUFBQSxHQUVBbFQsRUFBQW5uQyxLQUFBdTZDLEVBQUEzbkIsUUFBQSxTQUFBeHVCLEVBQUExRCxHQUNBMjVDLEdBQUFFLEVBQUE5RSxPQUFBLzBDLElBQUEsS0FLQTA1QyxFQUFBalQsRUFDQXI5QixFQUFBa3hDLFVBQUFseEMsRUFDQXl3QyxFQUFBakYsUUFDQW56QyxRQUFBLGNBQUFrNEMsR0FDQWw0QyxRQUFBLGFBQUFvNEMsRUFBQTlFLE9BQUFHLFVBQUEyRSxFQUFBOUUsT0FBQUksY0FHQXR5QixLQUFBLEtBQUEsc0JBQUF6WixFQUFBNk8sSUFDQWlqQixTQUFBLHNCQUNBQSxTQUFBMmUsRUFBQWxGLFdBQ0F4ekMsS0FBQSxXQUFBaUksR0FDQThxQixTQUFBMmxCLEVBQUF6RSxVQUdBaHNDLEVBQUFteEMsT0FDQTNsQixVQUFBOGtCLElBR0EsS0FBQSxRQUFBLFVBQUEsVUFBQSxRQUFBLFVBQUEsY0FBQWMsUUFBQSxTQUFBQyxHQUNBcnhDLEVBQUFteEMsTUFBQUUsR0FBQWYsRUFBQTk3QixLQUFBLGFBQUE2OEIsS0FHQXJ4QyxFQUFBb25CLFFBQUEsVUFHQXBuQixFQUFBc3hDLFdBR0F0eEMsRUFBQXV4QyxPQUFBdnhDLEVBQUE2dkMsWUFRQXFCLFVBQUEsU0FBQTU4QyxFQUFBazlDLEdBQ0EsR0FBQXhtQyxHQUFBMVcsRUFBQWtRLEtBQUFvcEMsS0FBQXQ1QyxFQUFBa1EsS0FBQWlYLEtBRUEsT0FBQSsxQixHQUFBbjVDLFFBQUEsaUJBQUEsU0FBQWxDLEVBQUE0bkIsR0FDQSxHQUFBbm5CLEdBQUFvVSxFQUFBK1MsRUFFQSxZQTlsQkEsS0E4bEJBbm5CLEVBQ0FULEVBR0FTLEtBUUFzNUMsWUFBQSxTQUFBbnlDLEdBQ0EsR0FBQWlDLEdBQUF2TSxLQUNBczJDLEVBQUExTSxFQUFBN3ZCLFVBQUF6UCxFQUVBcy9CLEdBQUFubkMsS0FBQTZ6QyxFQUFBLFNBQUExMEMsRUFBQWc4QyxHQUNBLEdBRUFJLEdBQ0FqOUMsRUFDQTZKLEVBQ0FxekMsRUFMQXA5QyxLQUNBa1EsSUFTQTY0QixHQUFBendCLGNBQUF5a0MsSUFLQS84QyxFQUFBKzhDLEVBQ0E3c0MsRUFBQTZzQyxFQUFBN3NDLE1BQUE2c0MsR0FFQSxXQUFBaFUsRUFBQTdvQyxLQUFBNjhDLElBQUFoVSxFQUFBZ1UsR0FBQTk4QyxRQUdBazlDLEVBQUFwVSxFQUFBZ1UsR0FFQTdzQyxFQUFBaXRDLEVBQUExNUMsT0FDQXlNLEVBQUE2NEIsRUFBQXQrQixVQUFBeUYsRUFBQUEsRUFBQXhPLGFBR0F3TyxFQUFBbXRDLE1BQUFGLEVBRUFuOUMsRUFBQStKLElBQUFtRyxFQUFBbkcsS0FBQW96QyxFQUFBaDRCLEtBQUEsUUFJQW5sQixFQUFBRSxNQUFBRixFQUFBK0osTUFDQS9KLEVBQUFFLEtBQUEsU0FDQUYsRUFBQStKLElBQUFnekMsSUFRQS84QyxHQUNBRSxLQUFBLE9BQ0E2SixJQUFBZ3pDLEVBQUEsSUFNQS84QyxFQUFBa1EsS0FBQTY0QixFQUFBdCtCLFFBQUEsS0FBQWlCLEVBQUF3RSxLQUFBQSxHQUdBNjRCLEVBQUFwM0IsUUFBQXpCLEVBQUFza0IsV0FDQXgwQixFQUFBa1EsS0FBQXNrQixRQUFBdGtCLEVBQUFza0IsU0FPQXQwQixFQUFBRixFQUFBRSxNQUFBRixFQUFBa1EsS0FBQWhRLEtBQ0E2SixFQUFBL0osRUFBQStKLEtBQUEsSUFFQTdKLEdBQUE2SixJQUNBQSxFQUFBbEksTUFBQSx3RkFDQTNCLEVBQUEsUUFFQTZKLEVBQUFsSSxNQUFBLHdCQUNBM0IsRUFBQSxNQUVBLE1BQUE2SixFQUFBdXpDLE9BQUEsS0FDQXA5QyxFQUFBLFdBSUFBLEVBQ0FGLEVBQUFFLEtBQUFBLEVBR0F3TCxFQUFBb25CLFFBQUEsa0JBQUE5eUIsR0FPQUEsRUFBQWdHLE1BQUEwRixFQUFBNHZDLE1BQUFyN0MsT0FHQUQsRUFBQWtRLEtBQUFtdEMsUUFBQXI5QyxFQUFBa1EsS0FBQW10QyxNQUFBcDlDLGNBQ0FELEdBQUFrUSxLQUFBbXRDLE9BR0FyOUMsRUFBQWtRLEtBQUFxdEMsUUFBQXY5QyxFQUFBa1EsS0FBQW10QyxRQUNBcjlDLEVBQUFrUSxLQUFBcXRDLE9BQUF2OUMsRUFBQWtRLEtBQUFtdEMsTUFBQW45QixLQUFBLGNBR0FsZ0IsRUFBQWtRLEtBQUFxdEMsU0FBQXY5QyxFQUFBa1EsS0FBQXF0QyxPQUFBdDlDLGNBQ0FELEdBQUFrUSxLQUFBcXRDLE9BSUEsYUFBQXhVLEVBQUE3b0MsS0FBQUYsRUFBQWtRLEtBQUEyZixXQUNBN3ZCLEVBQUFrUSxLQUFBMmYsUUFBQTd2QixFQUFBa1EsS0FBQTJmLFFBQUE5c0IsTUFBQWc2QyxHQUFBcnhDLEVBQUExTCxLQUdBLGFBQUErb0MsRUFBQTdvQyxLQUFBd0wsRUFBQXdFLEtBQUEyZixXQUNBN3ZCLEVBQUFrUSxLQUFBMmYsUUFBQW5rQixFQUFBd0UsS0FBQTJmLFFBQUE5c0IsTUFBQWc2QyxHQUFBcnhDLEVBQUExTCxLQUlBQSxFQUFBa1EsS0FBQTJmLGtCQUFBa1osS0FDQS9vQyxFQUFBa1EsS0FBQTJmLFlBanVCQSxLQWl1QkE3dkIsRUFBQWtRLEtBQUEyZixRQUFBLEdBQUE3dkIsRUFBQWtRLEtBQUEyZixRQUFBLElBS0EsU0FBQTN2QixJQUNBazlDLEVBQUFyekMsRUFBQXVNLE1BQUEsTUFBQSxHQUVBOG1DLEVBQUFuOUMsT0FBQSxJQUNBRCxFQUFBK0osSUFBQXF6QyxFQUFBM25DLFFBRUF6VixFQUFBa1EsS0FBQTdPLE9BQUErN0MsRUFBQTNuQyxVQUlBLFFBQUF6VixFQUFBa1EsS0FBQWltQyxXQUVBcE4sRUFBQXpnQyxRQUFBcEksR0FBQSxPQUFBLFNBQUEsVUFBQSxHQUNBRixFQUFBa1EsS0FBQStsQyxTQUFBLEVBQ0FqMkMsRUFBQWtRLEtBQUFpbUMsVUFBQSxHQUdBbjJDLEVBQUFrUSxLQUFBaW1DLFVBQUEsR0FNQSxRQUFBajJDLElBQ0FGLEVBQUFFLEtBQUEsU0FFQUYsRUFBQWtRLEtBQUFxbUMsT0FBQUQsU0FBQSxHQUlBdDJDLEVBQUFrUSxLQUFBbW1DLFFBRUFyMkMsRUFBQWtRLEtBQUE2NEIsRUFBQXQrQixRQUFBLEVBQUF6SyxFQUFBa1EsTUFFQThsQyxRQUFBLEVBQ0FDLFFBQUEsRUFFQUUsU0FBQSxFQUdBTCxTQUFBLEVBR0FvQyxVQUFBLEVBQ0FKLFdBQUEsRUFDQUssT0FBQSxFQUNBL0UsTUFBQSxFQUdBMkYsY0FBQSxFQUNBQyxZQUFBLEVBQ0FDLGNBQUEsRUFDQUMsaUJBQUEsRUFDQUMsZUFBQSxFQUNBQyxpQkFBQSxLQVFBMXRDLEVBQUE0dkMsTUFBQWx6QyxLQUFBcEksTUFlQXc5QyxVQUFBLFdBQ0EsR0FBQTl4QyxHQUFBdk0sSUFFQXVNLEdBQUEreEMsZUFHQS94QyxFQUFBbXhDLE1BQUEzbEIsVUFBQXJ1QixHQUFBLGlCQUFBLHdCQUFBLFNBQUEzRSxHQUNBQSxFQUFBZ3VCLGtCQUNBaHVCLEVBQUErdEIsaUJBRUF2bUIsRUFBQTZyQyxNQUFBcnpDLEtBRUEyRSxHQUFBLGlDQUFBLHVCQUFBLFNBQUEzRSxHQUNBQSxFQUFBZ3VCLGtCQUNBaHVCLEVBQUErdEIsaUJBRUF2bUIsRUFBQWd5QyxhQUVBNzBDLEdBQUEsaUNBQUEsdUJBQUEsU0FBQTNFLEdBQ0FBLEVBQUFndUIsa0JBQ0FodUIsRUFBQSt0QixpQkFFQXZtQixFQUFBMFIsU0FFQXZVLEdBQUEsV0FBQSx1QkFBQSxTQUFBM0UsR0FFQXdILEVBQUFBLEVBQUFpeUMsZUFBQSxnQkFBQSxrQkFLQXZELEVBQUF2eEMsR0FBQSxpQ0FBQSxTQUFBM0UsR0FFQUEsR0FBQUEsRUFBQXd1QixlQUFBLFdBQUF4dUIsRUFBQXd1QixjQUFBeHlCLEtBRUFzNkMsRUFBQSxXQUNBOXVDLEVBQUFreUMsWUFLQWx5QyxFQUFBbXhDLE1BQUFnQixNQUFBMXVCLE9BRUFwZ0IsV0FBQSxXQUNBckQsRUFBQW14QyxNQUFBZ0IsTUFBQS8zQyxPQUVBNEYsRUFBQWt5QyxVQUNBLFFBUUF2RCxFQUFBeHhDLEdBQUEsYUFBQSxTQUFBM0UsR0FDQSxHQUFBNDVDLEdBQUEvVSxFQUFBMk0sU0FBQTNNLEVBQUEyTSxTQUFBMkcsY0FBQSxJQUVBeUIsR0FBQUMsWUFBQUQsRUFBQTduQyxVQUFBNm5DLEVBQUE3bkMsUUFBQS9GLEtBQUEybkMsV0FBQTlPLEVBQUE3a0MsRUFBQTRRLFFBQUFtcEIsU0FBQSx1QkFBQThLLEVBQUE3a0MsRUFBQTRRLFFBQUF5VSxHQUFBeHFCLElBSUErK0MsR0FBQSxVQUFBL1UsRUFBQTdrQyxFQUFBNFEsUUFBQWpRLElBQUEsY0FBQWk1QyxFQUFBakIsTUFBQTNsQixVQUFBalEsSUFBQS9pQixFQUFBNFEsUUFBQTdVLFNBQ0FpRSxFQUFBZ3VCLGtCQUVBNHJCLEVBQUF0MkIsUUFHQTR5QixFQUFBamdCLFVBQUF6dUIsRUFBQXl1QixXQUFBQyxXQUFBMXVCLEVBQUEwdUIsZUFNQWlnQixFQUFBeHhDLEdBQUEsYUFBQSxTQUFBM0UsR0FDQSxHQUFBK1IsR0FBQXZLLEVBQUF1SyxRQUNBK25DLEVBQUE5NUMsRUFBQXF3QixTQUFBcndCLEVBQUFzTCxLQUVBLElBQUF5RyxHQUFBQSxFQUFBL0YsS0FBQTRsQyxXQUlBL00sRUFBQTdrQyxFQUFBNFEsUUFBQXlVLEdBQUEsV0FBQXdmLEVBQUE3a0MsRUFBQTRRLFFBQUF5VSxHQUFBLFlBS0EsTUFBQSxLQUFBeTBCLEdBQUEsS0FBQUEsR0FDQTk1QyxFQUFBK3RCLHFCQUVBdm1CLEdBQUE2ckMsTUFBQXJ6QyxJQU1BLEtBQUE4NUMsR0FBQSxLQUFBQSxHQUNBOTVDLEVBQUErdEIscUJBRUF2bUIsR0FBQWd5QyxZQU1BLEtBQUFNLEdBQUEsS0FBQUEsR0FDQTk1QyxFQUFBK3RCLHFCQUVBdm1CLEdBQUEwUixZQUtBMVIsR0FBQW9uQixRQUFBLGVBQUE1dUIsRUFBQTg1QyxLQUtBdHlDLEVBQUE0dkMsTUFBQTV2QyxFQUFBNnZDLFdBQUFyckMsS0FBQWdtQyxXQUNBeHFDLEVBQUF1eUMsbUJBQUEsRUFFQTVELEVBQUF4eEMsR0FBQSw2SEFBQSxTQUFBM0UsR0FDQXdILEVBQUF1eUMsbUJBQUEsRUFFQXZ5QyxFQUFBd3lDLFFBQ0F4eUMsRUFBQXl5QyxlQUdBenlDLEVBQUF3eUMsUUFBQSxJQUdBeHlDLEVBQUEweUMsYUFBQWwvQyxFQUFBNDFDLFlBQUEsYUFDQXBwQyxFQUFBdXlDLG9CQUVBdnlDLEVBQUE0dkMsTUFBQTV2QyxFQUFBNnZDLFdBQUFyckMsS0FBQWdtQyxXQUNBeHFDLEVBQUF3eUMsUUFBQSxFQUNBeHlDLEVBQUF1eUMsbUJBQUEsRUFFQXZ5QyxFQUFBMnlDLGlCQUdBLE9BU0FaLGFBQUEsV0FDQSxHQUFBL3hDLEdBQUF2TSxJQUVBaTdDLEdBQUFoeEMsSUFBQSxrQ0FDQWl4QyxFQUFBanhDLElBQUEsa0NBRUFqSyxLQUFBMDlDLE1BQUEzbEIsVUFBQTl0QixJQUFBLCtCQUVBc0MsRUFBQTB5QyxlQUNBbC9DLEVBQUE2MUMsY0FBQXJwQyxFQUFBMHlDLGNBRUExeUMsRUFBQTB5QyxhQUFBLE9BUUFWLFNBQUEsU0FBQW5yQyxHQUNBLE1BQUFwVCxNQUFBODlDLE9BQUE5OUMsS0FBQXU4QyxRQUFBLEVBQUFucEMsSUFPQTZLLEtBQUEsU0FBQTdLLEdBQ0EsTUFBQXBULE1BQUE4OUMsT0FBQTk5QyxLQUFBdThDLFFBQUEsRUFBQW5wQyxJQU9BMHFDLE9BQUEsU0FBQWhqQixFQUFBMW5CLEVBQUErckMsR0FDQSxHQUNBM0MsR0FDQS9GLEVBQ0EzL0IsRUFDQXluQyxFQUNBYSxFQUNBQyxFQUNBQyxFQVBBL3lDLEVBQUF2TSxLQVNBdS9DLEVBQUFoekMsRUFBQTR2QyxNQUFBcjdDLE1BRUEsTUFBQXlMLEVBQUFpekMsV0FBQWp6QyxFQUFBcXlDLFdBQUFyeUMsRUFBQWt6QyxhQUFBbHpDLEVBQUFpd0MsVUFBQSxDQU9BLEdBSEExaEIsRUFBQW9ELFNBQUFwRCxFQUFBLE1BQ0EyYixFQUFBbHFDLEVBQUF1SyxRQUFBdkssRUFBQXVLLFFBQUEvRixLQUFBMGxDLEtBQUFscUMsRUFBQXdFLEtBQUEwbEMsUUFFQTNiLEVBQUEsR0FBQUEsR0FBQXlrQixHQUNBLE9BQUEsQ0FLQSxJQUZBL0MsRUFBQWp3QyxFQUFBaXdDLFNBQUEsT0FBQWp3QyxFQUFBaXdDLFdBRUErQyxFQUFBLElBQUEvQyxHQUFBandDLEVBQUFpekMsV0FBQSxDQTRDQSxHQXhDQWpCLEVBQUFoeUMsRUFBQXVLLFFBRUF2SyxFQUFBOHZDLFVBQUE5dkMsRUFBQTZ2QyxVQUNBN3ZDLEVBQUErdkMsUUFBQS92QyxFQUFBZ3dDLFFBR0F6bEMsRUFBQXZLLEVBQUFtekMsWUFBQTVrQixHQUVBeWtCLEVBQUEsS0FDQTlJLEdBQUEzL0IsRUFBQWpRLE1BQUEsSUFDQTBGLEVBQUFtekMsWUFBQTVrQixFQUFBLElBR0EyYixHQUFBMy9CLEVBQUFqUSxNQUFBMDRDLEVBQUEsSUFDQWh6QyxFQUFBbXpDLFlBQUE1a0IsRUFBQSxJQUlBdnVCLEVBQUF1SyxRQUFBQSxFQUNBdkssRUFBQTZ2QyxVQUFBdGxDLEVBQUFqUSxNQUNBMEYsRUFBQWd3QyxRQUFBemxDLEVBQUFna0IsSUFFQXZ1QixFQUFBb25CLFFBQUEsYUFBQTZvQixHQUVBandDLEVBQUFvekMsaUJBRUFOLEVBQUF6VixFQUFBMk0sU0FBQXFKLGFBQUE5b0MsRUFBQStvQyxRQUVBL29DLEVBQUFncEMsU0FBQSxJQUFBVCxFQUFBaGxCLE1BQUEsSUFBQWdsQixFQUFBOTZCLE9BQUF6TixFQUFBK29DLE9BQUEvZ0IsU0FBQSxxQkFDQWhvQixFQUFBaXBDLG1CQXRpQ0EsR0F3aUNBblcsRUFBQXB3QixVQUFBcEcsR0FDQTBELEVBQUFpcEMsZUFBQTNzQyxFQUVBQSxFQUFBMEQsRUFBQS9GLEtBQUF5ckMsRUFBQSxvQkFBQSxzQkFHQXBwQyxFQUFBOHFCLFNBQUE5cUIsRUFBQSxJQUdBb3BDLEVBbUJBLE1BakJBMWxDLEdBQUEvRixLQUFBeW1DLGlCQUFBcGtDLEdBQ0E3RyxFQUFBbXhDLE1BQUEzbEIsVUFBQXJ5QixJQUFBLHNCQUFBME4sRUFBQSxNQUdBN0csRUFBQW14QyxNQUFBM2xCLFVBQUEyRyxZQUFBLHNCQUVBcWQsRUFBQXh2QyxFQUFBbXhDLE1BQUEzbEIsV0FFQXhyQixFQUFBbXhDLE1BQUEzbEIsVUFBQXNHLFNBQUEsb0JBR0F2bkIsRUFBQStvQyxPQUFBeGhCLFNBQUEsMkJBRUE5eEIsRUFBQXl6QyxVQUFBbHBDLE9BRUF2SyxHQUFBNHFDLFNBTUF2TixHQUFBbm5DLEtBQUE4SixFQUFBb3dDLE9BQUEsU0FBQTkxQyxFQUFBczRDLEdBQ0F2VixFQUFBMk0sU0FBQTNpQyxLQUFBdXJDLEVBQUFVLFVBSUEvb0MsRUFBQStvQyxPQUFBbmhCLFlBQUEsaURBQUFMLFNBQUEsMkJBR0F2bkIsRUFBQWdwQyxTQUNBVixFQUFBNXdDLEtBQUF5eEMsTUFBQW5wQyxFQUFBK29DLE9BQUExeUMsU0FFQXk4QixFQUFBbm5DLEtBQUE4SixFQUFBb3dDLE9BQUEsU0FBQTkxQyxFQUFBczRDLEdBQ0EsR0FBQXJrQixHQUFBcWtCLEVBQUFya0IsSUFBQWhrQixFQUFBZ2tCLEdBRUE4TyxHQUFBMk0sU0FBQXZhLFFBQUFtakIsRUFBQVUsUUFDQXQ3QixJQUFBLEVBQ0E4VixLQUFBUyxFQUFBc2tCLEVBQUF0a0IsRUFBQXFrQixFQUFBcHVDLEtBQUEybEMsUUFDQXRqQyxFQUFBLFdBRUErckMsRUFBQVUsT0FBQXRpQixXQUFBLFNBQUFtQixZQUFBLGlEQUVBeWdCLEVBQUFya0IsTUFBQXZ1QixFQUFBZ3dDLFVBQ0F6bEMsRUFBQWdwQyxTQUFBLEVBRUF2ekMsRUFBQTBILGlCQU1BMUgsRUFBQW14QyxNQUFBZ0IsTUFBQTd6QixXQUFBMFMsV0FBQSxTQU1Bem1CLEVBQUFvcEMsU0FDQTN6QyxFQUFBNHpDLGNBQUFycEMsR0FHQXZLLEVBQUF5ekMsVUFBQWxwQyxHQUdBdkssRUFBQTRxQyxVQUVBb0gsRUFBQXpqQixNQUFBaGtCLEVBQUFna0IsTUFPQXdrQixFQUFBLG9CQUFBZixFQUFBempCLElBQUFoa0IsRUFBQWdrQixJQUFBLE9BQUEsWUFFQXlqQixFQUFBc0IsT0FBQW5oQixZQUFBLGtHQUVBNmYsRUFBQTZCLFlBQUEsRUFFQWh0QyxJQUFBMEQsRUFBQWdwQyxTQUFBaHBDLEVBQUEvRixLQUFBNG1DLG9CQUlBN2dDLEVBQUFncEMsUUFDQXZCLEVBQUFzQixPQUFBeGhCLFNBQUFpaEIsSUFJQUEsRUFBQSxxQkFBQUEsRUFBQSxnQkFBQXhvQyxFQUFBL0YsS0FBQTRtQyxpQkFFQS9OLEVBQUEyTSxTQUFBdmEsUUFBQXVpQixFQUFBc0IsT0FBQVAsRUFBQWxzQyxFQUFBLFdBQ0FtckMsRUFBQXNCLE9BQUFuaEIsWUFBQTRnQixHQUFBL2hCLFdBQUEsaUJBWUFtaUIsWUFBQSxTQUFBNWtCLEdBRUEsR0FDQStrQixHQUNBaDVDLEVBRkEwRixFQUFBdk0sSUFtQkEsT0FmQTZHLEdBQUFpMEIsRUFBQXZ1QixFQUFBNHZDLE1BQUFyN0MsT0FDQStGLEVBQUFBLEVBQUEsRUFBQTBGLEVBQUE0dkMsTUFBQXI3QyxPQUFBK0YsRUFBQUEsR0FFQTBGLEVBQUFvd0MsT0FBQTdoQixJQUFBdnVCLEVBQUE0dkMsTUFBQXQxQyxLQUNBZzVDLEVBQUFqVyxFQUFBLHNDQUFBdlMsU0FBQTlxQixFQUFBbXhDLE1BQUFnQixPQUVBbnlDLEVBQUFvd0MsT0FBQTdoQixHQUFBOE8sRUFBQXQrQixRQUFBLEtBQUFpQixFQUFBNHZDLE1BQUF0MUMsSUFDQWkwQixJQUFBQSxFQUNBK2tCLE9BQUFBLEVBQ0FLLFVBQUEsSUFHQTN6QyxFQUFBOHpDLFlBQUE5ekMsRUFBQW93QyxPQUFBN2hCLEtBR0F2dUIsRUFBQW93QyxPQUFBN2hCLElBT0F3bEIsY0FBQSxTQUFBcE0sRUFBQUMsRUFBQS9nQyxHQUVBLEdBS0FtdEMsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFMQXAwQyxFQUFBdk0sS0FFQThXLEVBQUF2SyxFQUFBdUssUUFDQThwQyxFQUFBOXBDLEVBQUErcEMsU0FJQXpCLEVBQUFsaEIsU0FBQXBuQixFQUFBK29DLE9BQUExeUMsUUFBQSxJQUNBMnpDLEVBQUE1aUIsU0FBQXBuQixFQUFBK29DLE9BQUF0dkMsU0FBQSxJQUVBd3dDLEVBQUFqcUMsRUFBQTNKLE1BQ0E2ekMsRUFBQWxxQyxFQUFBdkcsTUFFQSxVQUFBdUcsRUFBQS9WLE1BQUErVixFQUFBbXFDLFdBQUFMLEdBQUFyMEMsRUFBQWt6QyxjQUlBN1YsRUFBQTJNLFNBQUEzaUMsS0FBQWd0QyxHQUVBcjBDLEVBQUFrekMsYUFBQSxFQUVBdkwsTUE3c0NBLEtBNnNDQUEsRUFBQSxHQUFBa0wsRUFBQWxMLEVBQ0FDLE1BOXNDQSxLQThzQ0FBLEVBQUEsR0FBQTJNLEVBQUEzTSxFQUVBb00sRUFBQTNXLEVBQUEyTSxTQUFBcUosYUFBQWdCLEdBRUFGLEVBQUFLLEVBQUFSLEVBQUFwekMsTUFDQXd6QyxFQUFBSyxFQUFBVCxFQUFBaHdDLE9BR0Fpd0MsRUFBQSxHQUFBcEIsRUFBQSxHQUFBMkIsRUFDQU4sRUFBQSxHQUFBSyxFQUFBLEdBQUFFLEVBR0FELEVBQUEzQixJQUNBb0IsRUFBQUQsRUFBQWxtQixLQUFBcW1CLEdBQUF4TSxFQUFBd00sRUFBQXhNLEdBRUFzTSxFQUFBLElBQ0FBLEVBQUEsR0FHQUEsRUFBQXBCLEVBQUEyQixJQUNBUCxFQUFBcEIsRUFBQTJCLElBSUFDLEVBQUFGLElBQ0FMLEVBQUFGLEVBQUFoOEIsSUFBQW84QixHQUFBeE0sRUFBQXdNLEVBQUF4TSxHQUVBc00sRUFBQSxJQUNBQSxFQUFBLEdBR0FBLEVBQUFLLEVBQUFFLElBQ0FQLEVBQUFLLEVBQUFFLElBSUF6MEMsRUFBQTIwQyxhQUFBSCxFQUFBQyxHQUVBcFgsRUFBQTJNLFNBQUF2YSxRQUFBNGtCLEdBQ0FyOEIsSUFBQWs4QixFQUNBcG1CLEtBQUFtbUIsRUFDQUUsT0FBQUEsRUFDQUMsT0FBQUEsR0FDQXZ0QyxHQUFBLElBQUEsV0FDQTdHLEVBQUFrekMsYUFBQSxJQUlBbHpDLEVBQUE0MEMsV0FBQTUwQyxFQUFBNDBDLFVBQUFDLFVBQ0E3MEMsRUFBQTQwQyxVQUFBdnRDLFNBUUF5dEMsV0FBQSxTQUFBanVDLEdBRUEsR0FJQWpOLEdBSkFvRyxFQUFBdk0sS0FFQThXLEVBQUF2SyxFQUFBdUssUUFDQThwQyxFQUFBOXBDLEVBQUErcEMsUUFHQSxVQUFBL3BDLEVBQUEvVixNQUFBK1YsRUFBQW1xQyxXQUFBTCxHQUFBcjBDLEVBQUFrekMsY0FJQTdWLEVBQUEyTSxTQUFBM2lDLEtBQUFndEMsR0FFQXIwQyxFQUFBa3pDLGFBQUEsRUFFQXQ1QyxFQUFBb0csRUFBQSswQyxVQUFBeHFDLEdBRUF2SyxFQUFBMjBDLGFBQUEvNkMsRUFBQWdILE1BQUFoSCxFQUFBb0ssUUFFQXE1QixFQUFBMk0sU0FBQXZhLFFBQUE0a0IsR0FDQXI4QixJQUFBcGUsRUFBQW9lLElBQ0E4VixLQUFBbDBCLEVBQUFrMEIsS0FDQXFtQixPQUFBdjZDLEVBQUFnSCxNQUFBeXpDLEVBQUF6ekMsUUFDQXd6QyxPQUFBeDZDLEVBQUFvSyxPQUFBcXdDLEVBQUFyd0MsVUFDQTZDLEdBQUEsSUFBQSxXQUNBN0csRUFBQWt6QyxhQUFBLE1BUUE2QixVQUFBLFNBQUFuQyxHQUNBLEdBUUFDLEdBQUEwQixFQUFBUyxFQUFBcDBDLEVBQUFvRCxFQVJBaEUsRUFBQXZNLEtBQ0E0Z0QsRUFBQXpCLEVBQUEwQixTQUVBVyxFQUFBckMsRUFBQWh5QyxNQUNBczBDLEVBQUF0QyxFQUFBNXVDLE9BRUErcEIsRUFBQTZrQixFQUFBcHVDLEtBQUF1cEIsTUFJQSxVQUFBc21CLElBQUFBLEVBQUE5L0MsU0FBQTBnRCxJQUFBQyxLQUtBLFdBQUE3WCxFQUFBN29DLEtBQUF1NUIsS0FDQUEsR0FBQUEsRUFBQUEsSUFHQSxHQUFBQSxFQUFBeDVCLFNBQ0F3NUIsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxLQUlBOGtCLEVBQUFsaEIsU0FBQTN4QixFQUFBbXhDLE1BQUFnQixNQUFBdnhDLFFBQUEsS0FBQW10QixFQUFBLEdBQUFBLEVBQUEsSUFDQXdtQixFQUFBNWlCLFNBQUEzeEIsRUFBQW14QyxNQUFBZ0IsTUFBQW51QyxTQUFBLEtBQUErcEIsRUFBQSxHQUFBQSxFQUFBLElBRUFpbkIsRUFBQS95QyxLQUFBa3pDLElBQUEsRUFBQXRDLEVBQUFvQyxFQUFBVixFQUFBVyxHQUVBdDBDLEVBQUFxQixLQUFBeS9CLE1BQUFzVCxFQUFBQyxHQUNBanhDLEVBQUEvQixLQUFBeS9CLE1BQUFzVCxFQUFBRSxJQUlBbDlCLElBQUEvVixLQUFBeS9CLE1BQUEsSUFBQTZTLEVBQUF2d0MsSUFBQStwQixFQUFBLEdBQ0FELEtBQUE3ckIsS0FBQXkvQixNQUFBLElBQUFtUixFQUFBanlDLElBQUFtdEIsRUFBQSxHQUNBbnRCLE1BQUFBLEVBQ0FvRCxPQUFBQSxLQVNBa3VDLE9BQUEsV0FFQSxHQUFBbHlDLEdBQUF2TSxJQUVBNHBDLEdBQUFubkMsS0FBQThKLEVBQUFvd0MsT0FBQSxTQUFBaDRDLEVBQUF3NkMsR0FDQTV5QyxFQUFBOHpDLFlBQUFsQixNQVNBa0IsWUFBQSxTQUFBbEIsR0FFQSxHQUFBNXlDLEdBQUF2TSxLQUNBNGdELEVBQUF6QixFQUFBMEIsUUFFQUQsS0FBQXpCLEVBQUFoeUMsT0FBQWd5QyxFQUFBNXVDLFVBQ0FoRSxFQUFBa3pDLGFBQUEsRUFFQTdWLEVBQUEyTSxTQUFBM2lDLEtBQUFndEMsR0FFQWhYLEVBQUEyTSxTQUFBb0wsYUFBQWYsRUFBQXIwQyxFQUFBKzBDLFVBQUFuQyxJQUVBQSxFQUFBcmtCLE1BQUF2dUIsRUFBQWd3QyxTQUNBaHdDLEVBQUEyMEMsZ0JBSUEvQixFQUFBVSxPQUFBbHNCLFFBQUEsV0FFQXBuQixFQUFBb25CLFFBQUEsV0FBQXdyQixJQU9BK0IsYUFBQSxTQUFBVSxFQUFBQyxHQUVBLEdBQ0FyRCxHQURBanlDLEVBQUF2TSxLQUdBNjhDLEVBQUF0d0MsRUFBQW14QyxNQUFBM2xCLFVBQUEyRyxZQUFBLGtGQUVBbnlCLEdBQUF1SyxVQUFBdkssRUFBQXF5QyxZQUlBcnlDLEVBQUF1MUMsY0FFQWpGLEVBQUF4ZSxTQUFBLHdCQUdBbWdCLE1BaDVDQSxLQSs0Q0FvRCxPQS80Q0EsS0ErNENBQyxFQUNBRCxFQUFBcjFDLEVBQUF1SyxRQUFBM0osT0FBQTAwQyxFQUFBdDFDLEVBQUF1SyxRQUFBdkcsT0FHQWhFLEVBQUFpeUMsZUFHQUEsRUFHQTNCLEVBQUF4ZSxTQUFBLHVCQUlBOXhCLEVBQUF1SyxRQUFBL0YsS0FBQWtqQyxNQUlBNEksRUFBQXhlLFNBQUEscUJBR0F3ZSxFQUFBeGUsU0FBQSx5QkFLQTl4QixFQUFBdUssUUFBQS9GLEtBQUFrakMsT0FDQTRJLEVBQUF4ZSxTQUFBLHVCQVNBeWpCLFdBQUEsV0FFQSxHQUdBQyxHQUhBeDFDLEVBQUF2TSxLQUVBOFcsRUFBQXZLLEVBQUF1SyxPQUdBLElBQUFBLElBQUF2SyxFQUFBcXlDLFVBUUEsU0FBQSxVQUFBOW5DLEVBQUEvVixNQUFBK1YsRUFBQW9wQyxXQUFBcHBDLEVBQUFtcUMsV0FDQSxTQUFBbnFDLEVBQUEvRixLQUFBNm9DLGNBQUFoUSxFQUFBbG9DLFdBQUFvVixFQUFBL0YsS0FBQTZvQyxlQUFBLFNBQUE5aUMsRUFBQS9GLEtBQUE2b0MsYUFBQTlpQyxNQUdBaXJDLEVBQUF4MUMsRUFBQSswQyxVQUFBeHFDLEdBRUFBLEVBQUEzSixNQUFBNDBDLEVBQUE1MEMsT0FBQTJKLEVBQUF2RyxPQUFBd3hDLEVBQUF4eEMsVUFjQWl1QyxhQUFBLFdBRUEsR0FBQWp5QyxHQUFBdk0sS0FFQThXLEVBQUF2SyxFQUFBdUssUUFDQThwQyxFQUFBOXBDLEVBQUErcEMsU0FFQW1CLEdBQUEsQ0FPQSxPQUxBcEIsS0FDQW9CLEVBQUFwWSxFQUFBMk0sU0FBQXFKLGFBQUFnQixHQUNBb0IsRUFBQUEsRUFBQTcwQyxNQUFBMkosRUFBQTNKLE9BQUE2MEMsRUFBQXp4QyxPQUFBdUcsRUFBQXZHLFFBR0F5eEMsR0FRQUMsT0FBQSxXQUVBLEdBQUExMUMsR0FBQXZNLEtBRUE4VyxFQUFBdkssRUFBQXVLLFFBQ0E4cEMsRUFBQTlwQyxFQUFBK3BDLFNBRUFtQixHQUFBLENBUUEsT0FOQXBCLEtBQ0FvQixFQUFBejFDLEVBQUErMEMsVUFBQXhxQyxHQUNBa3JDLEVBQUF4ekMsS0FBQWdsQyxJQUFBb04sRUFBQXp6QyxRQUFBNjBDLEVBQUE3MEMsT0FBQSxHQUFBcUIsS0FBQWdsQyxJQUFBb04sRUFBQXJ3QyxTQUFBeXhDLEVBQUF6eEMsUUFBQSxHQUlBeXhDLEdBUUFoQyxVQUFBLFNBQUFiLEdBRUEsR0FBQXArQyxHQUFBOCtDLEVBQ0FxQyxFQURBMzFDLEVBQUF2TSxJQUdBLEtBQUFtL0MsRUFBQWdELFlBSUFoRCxFQUFBZSxTQUFBLENBbUJBLE9BZkFmLEVBQUFnRCxXQUFBLEVBRUE1MUMsRUFBQW9uQixRQUFBLGFBQUF3ckIsR0FFQXArQyxFQUFBbytDLEVBQUFwK0MsS0FDQTgrQyxFQUFBVixFQUFBVSxPQUVBQSxFQUNBNTFDLElBQUEsV0FDQTBwQixRQUFBLFdBQ0EwSyxTQUFBLG9CQUFBdDlCLEdBQUEsWUFDQXM5QixTQUFBOGdCLEVBQUFwdUMsS0FBQThtQyxZQUlBOTJDLEdBRUEsSUFBQSxRQUVBd0wsRUFBQTYxQyxTQUFBakQsRUFFQSxNQUVBLEtBQUEsU0FFQTV5QyxFQUFBODFDLFVBQUFsRCxFQUVBLE1BRUEsS0FBQSxPQUVBNXlDLEVBQUErMUMsV0FBQW5ELEVBQUFBLEVBQUF2MEMsS0FBQXUwQyxFQUFBNzBDLFFBRUEsTUFFQSxLQUFBLFNBRUFzL0IsRUFBQXVWLEVBQUF2MEMsS0FBQTlKLE9BQ0F5TCxFQUFBKzFDLFdBQUFuRCxFQUFBdlYsRUFBQXVWLEVBQUF2MEMsTUFHQTJCLEVBQUFnMkMsU0FBQXBELEVBR0EsTUFFQSxLQUFBLE9BRUE1eUMsRUFBQWkyQyxZQUFBckQsR0FFQStDLEVBQUF0WSxFQUFBbkgsS0FBQW1ILEVBQUF0K0IsVUFBQTZ6QyxFQUFBcHVDLEtBQUEweEIsS0FBQUgsVUFDQWIsSUFBQTBkLEVBQUF2MEMsSUFDQWk0QixRQUFBLFNBQUF2K0IsRUFBQW0rQyxHQUVBLFlBQUFBLEdBQ0FsMkMsRUFBQSsxQyxXQUFBbkQsRUFBQTc2QyxJQUlBZ1QsTUFBQSxTQUFBcEMsRUFBQXV0QyxHQUVBdnRDLEdBQUEsVUFBQXV0QyxHQUNBbDJDLEVBQUFnMkMsU0FBQXBELE9BTUFVLEVBQUEvMUMsSUFBQSxVQUFBLFdBQ0FvNEMsRUFBQS9kLFNBR0EsTUFFQSxTQUVBNTNCLEVBQUFnMkMsU0FBQXBELEdBTUEsT0FBQSxJQVFBaUQsU0FBQSxTQUFBakQsR0FFQSxHQUdBdUQsR0FBQXI4QyxFQUFBczhDLEVBQUE1VSxFQUhBeGhDLEVBQUF2TSxLQUNBNGlELEVBQUF6RCxFQUFBcHVDLEtBQUE2eEMsUUFBQXpELEVBQUFwdUMsS0FBQXNZLE1BQUF1NUIsTUFPQSxJQUFBQSxFQUFBLENBQ0FELEVBQUE1aUQsRUFBQThpRCxrQkFBQSxFQUNBOVUsRUFBQWh1QyxFQUFBK2lELFdBQUFILEVBRUF0OEMsRUFBQXU4QyxFQUFBenJDLE1BQUEsS0FBQXpLLElBQUEsU0FBQStQLEdBQ0EsR0FBQXJWLEtBZ0JBLE9BZEFxVixHQUFBM0MsT0FBQTNDLE1BQUEsT0FBQXdtQyxRQUFBLFNBQUFsaEMsRUFBQTdhLEdBQ0EsR0FBQXVCLEdBQUErNkIsU0FBQXpoQixFQUFBc21DLFVBQUEsRUFBQXRtQyxFQUFBM2IsT0FBQSxHQUFBLEdBRUEsSUFBQSxJQUFBYyxFQUNBLE1BQUF3RixHQUFBcTZCLElBQUFobEIsQ0FHQXRaLEtBQ0FpRSxFQUFBakUsTUFBQUEsRUFDQWlFLEVBQUE0N0MsUUFBQXZtQyxFQUFBQSxFQUFBM2IsT0FBQSxNQUtBc0csSUFJQWYsRUFBQTBTLEtBQUEsU0FBQStELEVBQUFDLEdBQ0EsTUFBQUQsR0FBQTNaLE1BQUE0WixFQUFBNVosT0FJQSxLQUFBLEdBQUFnRixHQUFBLEVBQUFBLEVBQUE5QixFQUFBdkYsT0FBQXFILElBQUEsQ0FDQSxHQUFBc1UsR0FBQXBXLEVBQUE4QixFQUVBLElBQUEsTUFBQXNVLEVBQUF1bUMsU0FBQXZtQyxFQUFBdFosT0FBQTRxQyxHQUFBLE1BQUF0eEIsRUFBQXVtQyxTQUFBdm1DLEVBQUF0WixPQUFBdy9DLEVBQUEsQ0FDQUQsRUFBQWptQyxDQUNBLFNBS0FpbUMsR0FBQXI4QyxFQUFBdkYsU0FDQTRoRCxFQUFBcjhDLEVBQUFBLEVBQUF2RixPQUFBLElBR0E0aEQsSUFDQXZELEVBQUF2MEMsSUFBQTgzQyxFQUFBamhCLElBR0EwZCxFQUFBaHlDLE9BQUFneUMsRUFBQTV1QyxRQUFBLEtBQUFteUMsRUFBQU0sVUFDQTdELEVBQUE1dUMsT0FBQTR1QyxFQUFBaHlDLE1BQUFneUMsRUFBQTV1QyxPQUFBbXlDLEVBQUF2L0MsTUFDQWc4QyxFQUFBaHlDLE1BQUF1MUMsRUFBQXYvQyxRQU1BZzhDLEVBQUEwQixTQUFBalgsRUFBQSwyQ0FDQXZMLFNBQUEsc0JBQ0FoSCxTQUFBOG5CLEVBQUFVLFNBS0EsSUFBQVYsRUFBQXB1QyxLQUFBb21DLFNBQUFnSSxFQUFBcHVDLEtBQUE1RCxPQUFBZ3lDLEVBQUFwdUMsS0FBQVIsU0FBQTR1QyxFQUFBcHVDLEtBQUFreUMsT0FBQTlELEVBQUFwdUMsS0FBQXF0QyxTQUVBZSxFQUFBaHlDLE1BQUFneUMsRUFBQXB1QyxLQUFBNUQsTUFDQWd5QyxFQUFBNXVDLE9BQUE0dUMsRUFBQXB1QyxLQUFBUixPQUVBNHVDLEVBQUErRCxPQUFBdFosRUFBQSxXQUNBOS9CLElBQUEsUUFBQSxXQUVBOC9CLEVBQUE1cEMsTUFBQThNLFNBRUFxeUMsRUFBQStELE9BQUEsS0FFQTMyQyxFQUFBNDJDLFlBQUFoRSxLQUdBcjFDLElBQUEsT0FBQSxXQUVBeUMsRUFBQThzQyxVQUFBOEYsR0FFQTV5QyxFQUFBNDJDLFlBQUFoRSxLQUdBOWdCLFNBQUEsa0JBQ0FoSCxTQUFBOG5CLEVBQUEwQixVQUNBNzZCLEtBQUEsTUFBQW01QixFQUFBcHVDLEtBQUFreUMsT0FBQTlELEVBQUFwdUMsS0FBQXF0QyxPQUFBcDRCLEtBQUEsU0FJQXpaLEVBQUE0MkMsWUFBQWhFOzBIQVVBZ0UsWUFBQSxTQUFBaEUsR0FDQSxHQUFBNXlDLEdBQUF2TSxLQUNBb2pELEVBQUF4WixFQUFBLFVBRUF1VixHQUFBa0UsT0FBQUQsRUFDQXQ1QyxJQUFBLFFBQUEsV0FFQXlDLEVBQUFnMkMsU0FBQXBELEtBR0FyMUMsSUFBQSxPQUFBLFdBR0FvekIsYUFBQWlpQixFQUFBbUUsU0FFQW5FLEVBQUFtRSxRQUFBLEtBRUEvMkMsRUFBQXF5QyxZQUlBTyxFQUFBaHlDLE1BQUFuTixLQUFBdWpELGFBQ0FwRSxFQUFBNXVDLE9BQUF2USxLQUFBd2pELGNBRUFyRSxFQUFBcHVDLEtBQUFzWSxNQUFBdTVCLFFBQ0FRLEVBQUFwOUIsS0FBQSxRQUFBLFNBQUFBLEtBQUEsU0FBQW01QixFQUFBcHVDLEtBQUFzWSxNQUFBdTVCLFFBR0FyMkMsRUFBQWszQyxZQUFBdEUsR0FFQUEsRUFBQStELE9BRUEvRCxFQUFBbUUsUUFBQTF6QyxXQUFBLFdBQ0F1dkMsRUFBQW1FLFFBQUEsS0FFQW5FLEVBQUErRCxPQUFBbHpCLFFBRUF4aEIsS0FBQWt6QyxJQUFBLElBQUFsekMsS0FBQUMsSUFBQSxJQUFBMHdDLEVBQUE1dUMsT0FBQSxRQUdBaEUsRUFBQThzQyxVQUFBOEYsTUFJQTlnQixTQUFBLGtCQUNBclksS0FBQSxNQUFBbTVCLEVBQUF2MEMsS0FDQXlzQixTQUFBOG5CLEVBQUEwQixXQUVBdUMsRUFBQSxHQUFBbnZDLFVBQUEsWUFBQW12QyxFQUFBLEdBQUEzMEIsYUFBQTIwQixFQUFBLEdBQUFHLGNBQUFILEVBQUEsR0FBQUksY0FDQUosRUFBQXp2QixRQUFBLFFBRUF5dkIsRUFBQSxHQUFBOXJDLE1BQ0E4ckMsRUFBQXp2QixRQUFBLFNBSUF3ckIsRUFBQW1FLFFBQUExekMsV0FBQSxXQUNBd3pDLEVBQUEsR0FBQW52QyxVQUFBa3JDLEVBQUE4QixVQUNBMTBDLEVBQUFpMkMsWUFBQXJELElBR0EsTUFVQWtELFVBQUEsU0FBQWxELEdBQ0EsR0FHQXVFLEdBSEFuM0MsRUFBQXZNLEtBQ0ErUSxFQUFBb3VDLEVBQUFwdUMsS0FBQXFtQyxPQUNBeUksRUFBQVYsRUFBQVUsTUFHQVYsR0FBQTBCLFNBQUFqWCxFQUFBLGdDQUFBNzRCLEVBQUFvbUMsUUFBQSxzQkFBQSxJQUFBLFlBQ0F6eEMsSUFBQXFMLEVBQUFyTCxLQUNBMnhCLFNBQUF3b0IsR0FFQTZELEVBQUE5WixFQUFBNzRCLEVBQUFzbUMsSUFBQXp5QyxRQUFBLFlBQUEsR0FBQXlWLE9BQUFzcEMsWUFDQTM5QixLQUFBalYsRUFBQWlWLE1BQ0FxUixTQUFBOG5CLEVBQUEwQixVQUVBOXZDLEVBQUFvbUMsU0FFQTVxQyxFQUFBaTJDLFlBQUFyRCxHQUtBdUUsRUFBQWg2QyxHQUFBLG1CQUFBLFNBQUEzRSxHQUNBL0UsS0FBQXFaLFFBQUEsRUFFQThsQyxFQUFBVSxPQUFBbHNCLFFBQUEsV0FFQXBuQixFQUFBOHNDLFVBQUE4RixLQU1BVSxFQUFBbjJDLEdBQUEsYUFBQSxXQUNBLEdBR0FrNkMsR0FDQUMsRUFDQUMsRUFMQUMsRUFBQTVFLEVBQUEwQixTQUNBbUQsRUFBQWp6QyxFQUFBckwsSUFBQXlILE1BQ0E4MkMsRUFBQWx6QyxFQUFBckwsSUFBQTZLLE1BS0EsSUFBQSxJQUFBbXpDLEVBQUEsR0FBQXJxQyxRQUFBLENBT0EsSUFDQXdxQyxFQUFBSCxFQUFBcnRDLFdBQ0F5dEMsRUFBQUQsRUFBQTlpQyxLQUFBLFFBRUEsTUFBQW1qQyxJQUdBSixHQUFBQSxFQUFBaGpELGFBdDFEQSxLQXcxREFrakQsSUFDQUosRUFBQUYsRUFBQSxHQUFBUyxjQUFBdmtELFNBQUF1a0IsZ0JBQUF5L0IsWUFFQUksRUFBQXgxQyxLQUFBa2lDLEtBQUFvVCxFQUFBM1MsWUFBQSxJQUFBNFMsRUFBQTUyQyxRQUFBeTJDLElBQ0FJLEdBQUFELEVBQUE1UyxhQUFBNFMsRUFBQWpCLGtCQTUxREEsS0ErMURBbUIsSUFDQUEsRUFBQXoxQyxLQUFBa2lDLEtBQUFvVCxFQUFBdlQsYUFBQSxJQUNBMFQsR0FBQUYsRUFBQXhULGNBQUF3VCxFQUFBeEcsZUFJQXlHLEdBQ0FELEVBQUE1MkMsTUFBQTYyQyxHQUdBQyxHQUNBRixFQUFBeHpDLE9BQUEwekMsSUFJQUYsRUFBQXJsQixZQUFBLDBCQU1BMStCLEtBQUFxNUMsVUFBQThGLEdBSUF1RSxFQUFBMTlCLEtBQUEsTUFBQW01QixFQUFBdjBDLE1BRUEsSUFBQXUwQyxFQUFBcHVDLEtBQUFpbUMsVUFDQW1JLEVBQUEwQixTQUFBOXBCLFFBQUF4cUIsRUFBQWt4QyxVQUFBMEIsRUFBQUEsRUFBQXB1QyxLQUFBbW5DLE9BQUFsQixXQUlBNkksRUFBQS8xQyxJQUFBLFVBQUEsV0FHQSxJQUVBOC9CLEVBQUE1cEMsTUFBQStnQixLQUFBLFVBQUFpUCxPQUFBaEssS0FBQSxNQUFBLGlCQUVBLE1BQUFrK0IsSUFFQXRhLEVBQUE1cEMsTUFBQTRSLFFBRUF1dEMsRUFBQWUsVUFBQSxLQVVBb0MsV0FBQSxTQUFBbkQsRUFBQTcwQyxHQUVBLEdBQUFpQyxHQUFBdk0sSUFFQXVNLEdBQUFxeUMsWUFJQXJ5QyxFQUFBazNDLFlBQUF0RSxHQUVBQSxFQUFBVSxPQUFBanVDLFFBRUF3cEMsRUFBQTl3QyxJQUFBQSxFQUFBbWQsU0FBQTNtQixRQVFBd0osRUFBQW1kLE9BQUEsMkJBQUFrTSxRQUFBLFdBR0F3ckIsRUFBQWlGLGFBQUF4YSxFQUFBLGVBQUE1WixPQUFBdUgsWUFBQWp0QixHQUdBQSxFQUFBNUUsSUFBQSxVQUFBLGlCQUVBeTVDLEVBQUE4QixXQUdBLFdBQUFyWCxFQUFBN29DLEtBQUF1SixLQUNBQSxFQUFBcy9CLEVBQUEsU0FBQTlTLE9BQUE4UyxFQUFBOXZCLEtBQUF4UCxJQUFBK0wsV0FHQSxJQUFBL0wsRUFBQSxHQUFBeEksV0FDQXdJLEVBQUFzL0IsRUFBQSxTQUFBbjlCLEtBQUFuQyxLQUtBNjBDLEVBQUFwdUMsS0FBQTdPLFNBQ0FvSSxFQUFBcy9CLEVBQUEsU0FBQW45QixLQUFBbkMsR0FBQXlXLEtBQUFvK0IsRUFBQXB1QyxLQUFBN08sVUFLQWk5QyxFQUFBVSxPQUFBLzFDLElBQUEsVUFBQSxXQUdBcTFDLEVBQUFpRixlQUNBakYsRUFBQWlGLGFBQUFsdEIsTUFBQTVzQixFQUFBMGxCLFFBQUFsakIsU0FFQXF5QyxFQUFBaUYsYUFBQSxNQUlBakYsRUFBQWtGLFlBQ0FsRixFQUFBa0YsVUFBQXYzQyxTQUVBcXlDLEVBQUFrRixVQUFBLE1BSUFsRixFQUFBOEIsV0FDQXJYLEVBQUE1cEMsTUFBQTRSLFFBRUF1dEMsRUFBQWUsVUFBQSxLQUtBZixFQUFBMEIsU0FBQWpYLEVBQUF0L0IsR0FBQStzQixTQUFBOG5CLEVBQUFVLFFBRUE3L0MsS0FBQXE1QyxVQUFBOEYsS0FNQW9ELFNBQUEsU0FBQXBELEdBRUFBLEVBQUE4QixVQUFBLEVBRUE5QixFQUFBVSxPQUFBbmhCLFlBQUEsbUJBQUF5Z0IsRUFBQXArQyxNQUVBZixLQUFBc2lELFdBQUFuRCxFQUFBbi9DLEtBQUF5OUMsVUFBQTBCLEVBQUFBLEVBQUFwdUMsS0FBQWtuQyxZQVFBdUssWUFBQSxTQUFBckQsR0FFQSxHQUFBNXlDLEdBQUF2TSxNQUVBbS9DLEVBQUFBLEdBQUE1eUMsRUFBQXVLLFdBRUFxb0MsRUFBQW1GLFdBQ0FuRixFQUFBbUYsU0FBQTFhLEVBQUFyOUIsRUFBQXdFLEtBQUFpbkMsWUFBQTNnQixTQUFBOG5CLEVBQUFVLFVBUUE0RCxZQUFBLFNBQUF0RSxHQUVBLEdBQUE1eUMsR0FBQXZNLE1BRUFtL0MsRUFBQUEsR0FBQTV5QyxFQUFBdUssVUFFQXFvQyxFQUFBbUYsV0FDQW5GLEVBQUFtRixTQUFBeDNDLGVBRUFxeUMsR0FBQW1GLFdBU0FqTCxVQUFBLFNBQUE4RixHQUVBLEdBQUE1eUMsR0FBQXZNLElBRUF1TSxHQUFBcXlDLFlBSUFPLEVBQUFnRCxXQUFBLEVBQ0FoRCxFQUFBZSxVQUFBLEVBRUEzekMsRUFBQW9uQixRQUFBLFlBQUF3ckIsR0FFQTV5QyxFQUFBazNDLFlBQUF0RSxHQUVBQSxFQUFBcHVDLEtBQUFpbUMsV0FBQW1JLEVBQUFrRixZQUNBbEYsRUFBQWtGLFVBQUF6YSxFQUFBcjlCLEVBQUFreEMsVUFBQTBCLEVBQUFBLEVBQUFwdUMsS0FBQW1uQyxPQUFBbEIsV0FBQTNmLFNBQUE4bkIsRUFBQTBCLFNBQUEzK0MsT0FBQSxZQUFBOEosVUFHQW16QyxFQUFBcHVDLEtBQUFrbUMsU0FBQWtJLEVBQUEwQixXQUFBMUIsRUFBQThCLFdBR0E5QixFQUFBMEIsU0FBQW4zQyxHQUFBLGlCQUFBLFNBQUEzRSxHQUtBLE1BSkEsSUFBQUEsRUFBQTZqQixRQUNBN2pCLEVBQUErdEIsa0JBR0EsSUFLQSxVQUFBcXNCLEVBQUFwK0MsTUFDQTZvQyxFQUFBLDBDQUFBdlMsU0FBQThuQixFQUFBMEIsV0FLQXQwQyxFQUFBNHpDLGNBQUFoQixLQVVBZ0IsY0FBQSxTQUFBaEIsR0FFQSxHQUdBb0YsR0FBQUMsRUFBQXB4QyxFQUFBNUMsRUFBQXJLLEVBSEFvRyxFQUFBdk0sS0FDQTYvQyxFQUFBVixFQUFBVSxPQUVBMzVDLEdBQUEsQ0FtQkEsT0FqQkFxK0MsR0FBQXBGLEVBQUFwdUMsS0FBQXhFLEVBQUFpd0MsU0FBQSxrQkFBQSxvQkFDQXBwQyxFQUFBK3JDLEVBQUFwdUMsS0FBQXhFLEVBQUFpd0MsU0FBQSxvQkFBQSxzQkFFQXBwQyxFQUFBOHFCLGFBN2tFQSxLQTZrRUFpaEIsRUFBQVksZUFBQTNzQyxFQUFBK3JDLEVBQUFZLGVBQUEsS0FFQVosRUFBQVcsU0FBQVgsRUFBQXJrQixNQUFBdnVCLEVBQUFnd0MsU0FBQW5wQyxJQUNBbXhDLEdBQUEsR0FJQSxTQUFBQSxHQUFBcEYsRUFBQXJrQixNQUFBdnVCLEVBQUFnd0MsU0FBQW5wQyxHQUFBLFVBQUErckMsRUFBQXArQyxPQUFBbytDLEVBQUE4QixXQUFBLzZDLEVBQUFxRyxFQUFBazRDLFlBQUF0RixNQUNBb0YsRUFBQSxRQU1BLFNBQUFBLEdBQ0FwK0MsRUFBQW9HLEVBQUErMEMsVUFBQW5DLEdBRUFoNUMsRUFBQXU2QyxPQUFBdjZDLEVBQUFnSCxNQUFBakgsRUFBQWlILE1BQ0FoSCxFQUFBdzZDLE9BQUF4NkMsRUFBQW9LLE9BQUFySyxFQUFBcUssYUFFQXBLLEdBQUFnSCxZQUNBaEgsR0FBQW9LLE9BR0FDLEVBQUEydUMsRUFBQXB1QyxLQUFBMm1DLFlBRUEsUUFBQWxuQyxJQUNBQSxFQUFBaEMsS0FBQWdsQyxJQUFBMkwsRUFBQWh5QyxNQUFBZ3lDLEVBQUE1dUMsT0FBQXJLLEVBQUFpSCxNQUFBakgsRUFBQXFLLFFBQUEsSUFHQUMsSUFDQXRLLEVBQUFzSyxRQUFBLEdBQ0FySyxFQUFBcUssUUFBQSxHQUlBbzVCLEVBQUEyTSxTQUFBb0wsYUFBQXhDLEVBQUEwQixTQUFBbmlCLFlBQUEsc0JBQUF4NEIsR0FFQTYxQyxFQUFBb0QsRUFBQTBCLGNBR0FqWCxHQUFBMk0sU0FBQXZhLFFBQUFtakIsRUFBQTBCLFNBQUExNkMsRUFBQWlOLEVBQUEsV0FDQTdHLEVBQUEwSCxlQU1BMUgsRUFBQTh6QyxZQUFBbEIsR0FNQW9GLEdBWUEzYSxFQUFBMk0sU0FBQTNpQyxLQUFBaXNDLEdBRUEyRSxFQUFBLHNDQUFBckYsRUFBQXJrQixLQUFBdnVCLEVBQUErdkMsUUFBQSxPQUFBLFlBQUEsZ0JBQUFpSSxFQUVBMUUsRUFBQXRpQixXQUFBLFNBQUFtQixZQUFBLHlFQUFBTCxTQUFBbW1CLEdBRUFyRixFQUFBMEIsU0FBQW5pQixZQUFBLHNCQUdBcWQsRUFBQThELE9BRUFqVyxHQUFBMk0sU0FBQXZhLFFBQUE2akIsRUFBQSwwQkFBQXpzQyxFQUFBLFNBQUFyTyxHQUNBODZDLEVBQUFuaEIsWUFBQThsQixHQUFBam5CLFdBQUEsU0FFQTRoQixFQUFBcmtCLE1BQUF2dUIsRUFBQWd3QyxTQUNBaHdDLEVBQUEwSCxhQUdBLEtBN0JBOG5DLEVBQUE4RCxHQUVBVixFQUFBMEIsU0FBQW5pQixZQUFBLDJCQUVBeWdCLEVBQUFya0IsTUFBQXZ1QixFQUFBZ3dDLFNBQ0Fod0MsRUFBQTBILGVBZ0NBd3dDLFlBQUEsU0FBQXRGLEdBRUEsR0FrQ0F1RixHQWxDQW40QyxFQUFBdk0sS0FDQWdpRCxHQUFBLEVBK0JBNUQsRUFBQWUsRUFBQXB1QyxLQUFBcXRDLE9BQ0F1RyxFQUFBdkcsRUFBQUEsRUFBQTVXLFNBQUEsQ0FnQkEsT0FiQW1kLElBQUF2RyxFQUFBLEdBQUE5M0MsZ0JBQUExRyxHQWhDQSxTQUFBbzhDLEdBUUEsSUFQQSxHQUFBNEksR0FBQTVJLEVBQUEsR0FFQTZJLEVBQUFELEVBQUF4cUIsd0JBQ0EwcUIsS0FJQSxPQUFBRixFQUFBRyxlQUNBLFdBQUFuYixFQUFBZ2IsRUFBQUcsZUFBQXIvQyxJQUFBLGFBQUEsU0FBQWtrQyxFQUFBZ2IsRUFBQUcsZUFBQXIvQyxJQUFBLGFBQ0FvL0MsRUFBQTc3QyxLQUFBMjdDLEVBQUFHLGNBQUEzcUIseUJBR0F3cUIsRUFBQUEsRUFBQUcsYUFVQSxPQVBBRCxHQUFBRSxNQUFBLFNBQUFDLEdBQ0EsR0FBQUMsR0FBQTEyQyxLQUFBa3pDLElBQUFtRCxFQUFBaFIsTUFBQW9SLEVBQUFwUixPQUFBcmxDLEtBQUFDLElBQUFvMkMsRUFBQXhxQixLQUFBNHFCLEVBQUE1cUIsTUFDQThxQixFQUFBMzJDLEtBQUFrekMsSUFBQW1ELEVBQUEvUSxPQUFBbVIsRUFBQW5SLFFBQUF0bEMsS0FBQUMsSUFBQW8yQyxFQUFBdGdDLElBQUEwZ0MsRUFBQTFnQyxJQUVBLE9BQUEyZ0MsR0FBQSxHQUFBQyxFQUFBLEtBSUFOLEVBQUEvUSxPQUFBLEdBQUErUSxFQUFBaFIsTUFBQSxHQUNBZ1IsRUFBQXhxQixLQUFBdVAsRUFBQTdwQyxHQUFBb04sU0FBQTAzQyxFQUFBdGdDLElBQUFxbEIsRUFBQTdwQyxHQUFBd1EsVUFPQTZ0QyxLQUNBc0csRUFBQW40QyxFQUFBbXhDLE1BQUFnQixNQUFBbFgsU0FFQXdhLEdBQ0F6OUIsSUFBQW9nQyxFQUFBcGdDLElBQUFtZ0MsRUFBQW5nQyxJQUFBcFYsV0FBQWl2QyxFQUFBMTRDLElBQUEscUJBQUEsR0FDQTIwQixLQUFBc3FCLEVBQUF0cUIsS0FBQXFxQixFQUFBcnFCLEtBQUFsckIsV0FBQWl2QyxFQUFBMTRDLElBQUEsc0JBQUEsR0FDQXlILE1BQUFpeEMsRUFBQWp4QyxRQUNBb0QsT0FBQTZ0QyxFQUFBN3RDLFNBQ0Ftd0MsT0FBQSxFQUNBQyxPQUFBLElBSUFxQixHQVFBL3RDLFNBQUEsV0FFQSxHQUFBMUgsR0FBQXZNLEtBRUE4VyxFQUFBdkssRUFBQXVLLFFBQ0E2bEMsSUFFQTdsQyxHQUFBZ3BDLFVBQUFocEMsRUFBQW9wQyxVQUFBcHBDLEVBQUFzcEMsYUFJQXRwQyxFQUFBc3BDLFlBQUEsRUFFQXRwQyxFQUFBK29DLE9BQUF4MUIsV0FBQXNKLFFBQUEsV0FHQW9vQixFQUFBamxDLEVBQUErb0MsUUFFQS9vQyxFQUFBK29DLE9BQUF4aEIsU0FBQSw0QkFHQXVMLEVBQUFubkMsS0FBQThKLEVBQUFvd0MsT0FBQSxTQUFBaDRDLEVBQUF3NkMsR0FDQUEsRUFBQXJrQixLQUFBdnVCLEVBQUFnd0MsUUFBQSxHQUFBNEMsRUFBQXJrQixLQUFBdnVCLEVBQUFnd0MsUUFBQSxFQUNBSSxFQUFBd0MsRUFBQXJrQixLQUFBcWtCLEVBRUFBLElBRUF2VixFQUFBMk0sU0FBQTNpQyxLQUFBdXJDLEVBQUFVLFFBRUFWLEVBQUFVLE9BQUE1MUMsTUFBQTZDLFlBSUFQLEVBQUFvd0MsT0FBQUEsRUFFQXB3QyxFQUFBMjBDLGVBRUEzMEMsRUFBQW9uQixRQUFBLGNBR0FpVyxFQUFBaHFDLEVBQUE0SixlQUFBNGdCLEdBQUEsZUFBQXRULEVBQUEvRixLQUFBeW5DLFdBQUEsU0FBQTFoQyxFQUFBL1YsTUFBQSxXQUFBK1YsRUFBQS9WLE9BQ0F3TCxFQUFBOGIsVUFTQTh1QixRQUFBLFdBQ0EsR0FDQWw1QixHQUFBakgsRUFEQXpLLEVBQUF2TSxJQUdBdU0sR0FBQTR2QyxNQUFBcjdDLE9BQUEsSUFJQW1kLEVBQUExUixFQUFBb3dDLE9BQUFwd0MsRUFBQWd3QyxRQUFBLEdBQ0F2bEMsRUFBQXpLLEVBQUFvd0MsT0FBQXB3QyxFQUFBZ3dDLFFBQUEsR0FFQXQrQixHQUFBLFVBQUFBLEVBQUFsZCxNQUNBd0wsRUFBQXl6QyxVQUFBL2hDLEdBR0FqSCxHQUFBLFVBQUFBLEVBQUFqVyxNQUNBd0wsRUFBQXl6QyxVQUFBaHBDLEtBU0FxUixNQUFBLFdBQ0EsR0FDQTJ6QixHQURBbGxDLEVBQUE5VyxLQUFBOFcsT0FHQTlXLE1BQUE0K0MsWUFJQTluQyxHQUFBQSxFQUFBc3BDLGFBR0FwRSxFQUFBbGxDLEVBQUErb0MsT0FBQTkrQixLQUFBLDBDQUVBaTdCLEVBQUFsN0MsU0FDQWs3QyxFQUFBbGxDLEVBQUErb0MsT0FBQTkrQixLQUFBLDhCQUFBN2UsT0FBQSw0QkFJQTg1QyxFQUFBQSxHQUFBQSxFQUFBbDdDLE9BQUFrN0MsRUFBQWg4QyxLQUFBMDlDLE1BQUEzbEIsVUFFQWlrQixFQUFBM3pCLFVBUUF3MUIsU0FBQSxXQUNBLEdBQUF0eEMsR0FBQXZNLElBR0E0cEMsR0FBQSx1QkFBQW5uQyxLQUFBLFdBQ0EsR0FBQWs4QyxHQUFBL1UsRUFBQTVwQyxNQUFBc0UsS0FBQSxXQUdBcTZDLElBQUFBLEVBQUF2akMsS0FBQTdPLEVBQUE2TyxLQUFBdWpDLEVBQUFDLFlBQ0FELEVBQUFockIsUUFBQSxnQkFFQWdyQixFQUFBTCxlQUVBSyxFQUFBeUcsV0FBQSxLQUtBNzRDLEVBQUE2NEMsV0FBQSxHQUVBNzRDLEVBQUF1SyxTQUFBdkssRUFBQXd5QyxVQUNBeHlDLEVBQUFreUMsU0FFQWx5QyxFQUFBb3pDLGtCQUdBcHpDLEVBQUFvbkIsUUFBQSxjQUVBcG5CLEVBQUE4eEMsYUFRQWpHLE1BQUEsU0FBQXJ6QyxFQUFBc2dELEdBRUEsR0FHQWQsR0FBQW54QyxFQUNBd3RDLEVBQUFwd0MsRUFBQXRLLEVBQUFDLEVBSkFvRyxFQUFBdk0sS0FDQThXLEVBQUF2SyxFQUFBdUssUUFLQXJULEVBQUEsV0FDQThJLEVBQUErNEMsUUFBQXZnRCxHQUdBLFFBQUF3SCxFQUFBcXlDLFlBSUFyeUMsRUFBQXF5QyxXQUFBLEdBR0EsSUFBQXJ5QyxFQUFBb25CLFFBQUEsY0FBQTV1QixJQUNBd0gsRUFBQXF5QyxXQUFBLEVBRUF2RCxFQUFBLFdBQ0E5dUMsRUFBQWt5QyxZQUdBLElBS0FseUMsRUFBQSt4QyxlQUVBeG5DLEVBQUF3c0MsU0FDQXBtQixhQUFBcG1CLEVBQUF3c0MsU0FHQTFDLEVBQUE5cEMsRUFBQStwQyxTQUNBMEQsRUFBQXp0QyxFQUFBL0YsS0FBQXltQyxnQkFDQXBrQyxFQUFBdzJCLEVBQUFwd0IsVUFBQTZyQyxHQUFBQSxFQUFBZCxFQUFBenRDLEVBQUEvRixLQUFBMG1DLGtCQUFBLEVBR0EzZ0MsRUFBQStvQyxPQUFBNTFDLElBQUF3eEMsR0FBQS9jLFlBQUEsNEZBRUE1bkIsRUFBQStvQyxPQUFBeDFCLFdBQUFzSixRQUFBLFdBQUE3bUIsU0FHQXNHLEdBQ0E3RyxFQUFBbXhDLE1BQUEzbEIsVUFBQTJHLFlBQUEsb0JBQUFMLFNBQUEsdUJBSUE5eEIsRUFBQWszQyxZQUFBM3NDLEdBRUF2SyxFQUFBMnlDLGVBRUEzeUMsRUFBQTIwQyxlQUdBLFNBQUFxRCxJQUFBLElBQUF4L0MsR0FBQTY3QyxHQUFBeHRDLEdBQUEsVUFBQTBELEVBQUEvVixPQUFBK1YsRUFBQW1xQyxXQUFBOTZDLEVBQUFvRyxFQUFBazRDLFlBQUEzdEMsTUFDQXl0QyxFQUFBLFFBR0EsU0FBQUEsR0FDQTNhLEVBQUEyTSxTQUFBM2lDLEtBQUFndEMsR0FFQTE2QyxFQUFBMGpDLEVBQUEyTSxTQUFBcUosYUFBQWdCLEdBRUExNkMsRUFBQWlILE1BQUFqSCxFQUFBaUgsTUFBQWpILEVBQUF3NkMsT0FDQXg2QyxFQUFBcUssT0FBQXJLLEVBQUFxSyxPQUFBckssRUFBQXk2QyxPQUdBbndDLEVBQUFzRyxFQUFBL0YsS0FBQTJtQyxZQUVBLFFBQUFsbkMsSUFDQUEsRUFBQWhDLEtBQUFnbEMsSUFBQTE4QixFQUFBM0osTUFBQTJKLEVBQUF2RyxPQUFBcEssRUFBQWdILE1BQUFoSCxFQUFBb0ssUUFBQSxJQUdBQyxJQUNBckssRUFBQXFLLFFBQUEsR0FHQXRLLEVBQUF3NkMsT0FBQXg2QyxFQUFBaUgsTUFBQWhILEVBQUFnSCxNQUNBakgsRUFBQXk2QyxPQUFBejZDLEVBQUFxSyxPQUFBcEssRUFBQW9LLE9BRUFySyxFQUFBaUgsTUFBQWhILEVBQUFnSCxNQUNBakgsRUFBQXFLLE9BQUFwSyxFQUFBb0ssT0FFQXE1QixFQUFBMk0sU0FBQW9MLGFBQUE3cUMsRUFBQStwQyxTQUFBMzZDLEdBRUE2MUMsRUFBQWpsQyxFQUFBK3BDLFVBRUFqWCxFQUFBMk0sU0FBQXZhLFFBQUFsbEIsRUFBQStwQyxTQUFBMTZDLEVBQUFpTixFQUFBM1AsSUFFQSxJQUdBOGdELEdBQUFueEMsR0FHQSxJQUFBck8sRUFDQTZLLFdBQUFuTSxFQUFBMlAsR0FHQXcyQixFQUFBMk0sU0FBQXZhLFFBQUFsbEIsRUFBQStvQyxPQUFBbmhCLFlBQUEsMkJBQUEsMERBQUE2bEIsRUFBQW54QyxFQUFBM1AsR0FJQUEsS0FHQSxNQU9BNmhELFFBQUEsU0FBQXZnRCxHQUNBLEdBRUE0NUMsR0FDQW5YLEVBSEFqN0IsRUFBQXZNLEtBQ0E4akQsRUFBQWxhLEVBQUEsT0FJQXI5QixHQUFBdUssUUFBQStvQyxPQUFBbHNCLFFBQUEsV0FFQXBuQixFQUFBbXhDLE1BQUEzbEIsVUFBQW5tQixRQUFBOUUsU0FFQVAsRUFBQW9uQixRQUFBLGFBQUE1dUIsR0FHQXdILEVBQUFtd0MsWUFBQW53QyxFQUFBdUssUUFBQS9GLEtBQUEwbkMsV0FDQWxzQyxFQUFBbXdDLFdBQUFyMEIsUUFHQTliLEVBQUF1SyxRQUFBLEtBR0E2bkMsRUFBQS9VLEVBQUEyTSxTQUFBMkcsY0FFQXlCLEVBQ0FBLEVBQUFkLFlBSUE1QyxFQUFBamdCLFVBQUF6dUIsRUFBQXl1QixXQUFBQyxXQUFBMXVCLEVBQUEwdUIsWUFFQTZvQixFQUFBcGxCLFlBQUEsNENBRUFvbEIsRUFBQWhsQixTQUFBLHFCQUNBMEksRUFBQXRKLFNBQUF0K0IsRUFBQTZHLEtBQUFSLE1BQUFzZSxJQUFBLElBRUF1L0IsRUFBQXBsQixZQUFBLG1CQUFBaDVCLElBQUEsTUFBQSxJQUFBczFCLFdBQUEsRUFBQXdNLElBR0FvQyxFQUFBLDRCQUFBOThCLFdBVUE2bUIsUUFBQSxTQUFBdnlCLEVBQUErOUMsR0FDQSxHQUdBNkMsR0FIQW4yQyxFQUFBMEcsTUFBQWpELFVBQUF4TCxNQUFBakMsS0FBQXFJLFVBQUEsR0FDQXFDLEVBQUF2TSxLQUNBYSxFQUFBcytDLEdBQUFBLEVBQUFwdUMsS0FBQW91QyxFQUFBNXlDLEVBQUF1SyxPQWdCQSxJQWJBalcsRUFDQWdMLEVBQUFtSixRQUFBblUsR0FHQUEsRUFBQTBMLEVBR0FWLEVBQUFtSixRQUFBekksR0FFQXE5QixFQUFBbG9DLFdBQUFiLEVBQUFrUSxLQUFBM1AsTUFDQTRnRCxFQUFBbmhELEVBQUFrUSxLQUFBM1AsR0FBQXdDLE1BQUEvQyxFQUFBZ0wsS0FHQSxJQUFBbTJDLEVBQ0EsTUFBQUEsRUFHQSxnQkFBQTVnRCxHQUFBbUwsRUFBQW14QyxNQUlBbnhDLEVBQUFteEMsTUFBQTNsQixVQUFBcEUsUUFBQXZ5QixFQUFBLE1BQUF5SyxHQUhBcXZDLEVBQUF2bkIsUUFBQXZ5QixFQUFBLE1BQUF5SyxJQVlBOHpDLGVBQUEsU0FBQTRGLEdBRUEsR0FBQWg1QyxHQUFBdk0sS0FFQThXLEVBQUF2SyxFQUFBdUssUUFDQWpRLEVBQUFpUSxFQUFBalEsTUFDQTZwQixFQUFBNVosRUFBQS9GLEtBQUEyZixRQUNBbXNCLEVBQUF0d0MsRUFBQW14QyxNQUFBM2xCLFVBQ0F5dEIsRUFBQWo1QyxFQUFBbXhDLE1BQUFodEIsT0FHQTVaLEdBQUErb0MsT0FBQWxzQixRQUFBLFdBRUFwbkIsRUFBQWk1QyxTQUFBOTBCLEdBQUFBLEVBQUE1dkIsT0FBQTBrRCxFQUFBLzRDLEtBQUFpa0IsR0FBQSxLQUVBbmtCLEVBQUFrNUMsa0JBQUFsNUMsRUFBQXd5QyxRQUNBeHlDLEVBQUF5eUMsZUFJQW5DLEVBQUE5N0IsS0FBQSx5QkFBQXRVLEtBQUFGLEVBQUE0dkMsTUFBQXI3QyxRQUNBKzdDLEVBQUE5N0IsS0FBQSx5QkFBQXRVLEtBQUE1RixFQUFBLEdBRUFnMkMsRUFBQTk3QixLQUFBLHdCQUFBNWIsS0FBQSxZQUFBMlIsRUFBQS9GLEtBQUEwbEMsTUFBQTV2QyxHQUFBLEdBQ0FnMkMsRUFBQTk3QixLQUFBLHdCQUFBNWIsS0FBQSxZQUFBMlIsRUFBQS9GLEtBQUEwbEMsTUFBQTV2QyxHQUFBMEYsRUFBQTR2QyxNQUFBcjdDLE9BQUEsR0FFQSxVQUFBZ1csRUFBQS9WLEtBR0E4N0MsRUFBQTk3QixLQUFBLDRCQUFBaUYsS0FBQSxPQUFBbFAsRUFBQS9GLEtBQUFzWSxNQUFBemUsS0FBQWtNLEVBQUFsTSxLQUFBakUsT0FHQWsyQyxFQUFBOTdCLEtBQUEsaURBQUFpUCxRQU9Ba3ZCLGFBQUEsV0FFQWwvQyxLQUFBeWxELGtCQUFBLEVBRUF6bEQsS0FBQTA5QyxNQUFBM2xCLFVBQUEyRyxZQUFBLHdGQUlBc2dCLGFBQUEsV0FDQSxHQUFBenlDLEdBQUF2TSxLQUNBK1EsRUFBQXhFLEVBQUF1SyxRQUFBdkssRUFBQXVLLFFBQUEvRixLQUFBeEUsRUFBQXdFLEtBQ0E4ckMsRUFBQXR3QyxFQUFBbXhDLE1BQUEzbEIsU0FFQXhyQixHQUFBazVDLGtCQUFBLEVBQ0FsNUMsRUFBQXV5QyxtQkFBQSxFQUVBakMsRUFDQWxlLFlBQUEsMkJBQUE1dEIsRUFBQStsQyxVQUFBL2xDLEVBQUFza0IsVUFDQXNKLFlBQUEsMkJBQUE1dEIsRUFBQThsQyxTQUFBdHFDLEVBQUE0dkMsTUFBQXI3QyxPQUFBLElBQ0E2OUIsWUFBQSx1QkFBQTV0QixFQUFBNmxDLFFBQUFycUMsRUFBQTR2QyxNQUFBcjdDLE9BQUEsSUFDQTY5QixZQUFBLHNCQUFBNXRCLEVBQUFtbUMsT0FFQTNxQyxFQUFBaTVDLFNBQ0EzSSxFQUFBeGUsU0FBQSwwQkFHQXdlLEVBQUFuZSxZQUFBLDBCQVNBZ25CLGVBQUEsV0FDQTFsRCxLQUFBeWxELGlCQUNBemxELEtBQUFnL0MsZUFHQWgvQyxLQUFBay9DLGtCQVNBdFYsRUFBQTJNLFVBRUFvUCxRQUFBLFFBQ0E3YixTQUFBQSxFQWVBb1QsWUFBQSxTQUFBMEksR0FDQSxHQUFBakgsR0FBQS9VLEVBQUEsd0RBQUF0bEMsS0FBQSxZQUNBdUgsRUFBQTBHLE1BQUFqRCxVQUFBeEwsTUFBQWpDLEtBQUFxSSxVQUFBLEVBRUEsT0FBQXkwQyxhQUFBMUMsS0FFQSxXQUFBclMsRUFBQTdvQyxLQUFBNmtELEdBQ0FqSCxFQUFBaUgsR0FBQWhpRCxNQUFBKzZDLEVBQUE5eUMsR0FFQSxhQUFBKzlCLEVBQUE3b0MsS0FBQTZrRCxJQUNBQSxFQUFBaGlELE1BQUErNkMsRUFBQTl5QyxHQUdBOHlDLElBV0FoWixLQUFBLFNBQUEyUSxFQUFBdmxDLEVBQUFsSyxHQUNBLE1BQUEsSUFBQW8xQyxHQUFBM0YsRUFBQXZsQyxFQUFBbEssSUFPQXV4QyxNQUFBLFNBQUEvL0IsR0FDQSxHQUFBc21DLEdBQUEzK0MsS0FBQWs5QyxhQUVBeUIsS0FDQUEsRUFBQXZHLFNBSUEsSUFBQS8vQixHQUNBclksS0FBQW80QyxVQVNBeU4sUUFBQSxXQUVBN2xELEtBQUFvNEMsT0FBQSxHQUVBOEMsRUFBQWp4QyxJQUFBLG1CQVFBaXlDLGFBaHVGQSxLQWd1RkF0OEMsRUFBQWttRCxhQUFBLGlFQUFBN2pELEtBQUFrN0MsVUFBQUMsV0FNQTJJLE1BQUEsV0FDQSxHQUFBbjFCLEdBQUFoeEIsRUFBQVUsY0FBQSxNQUVBLE9BQUFQLEdBQUE2M0Isa0JBQUE3M0IsRUFBQTYzQixpQkFBQWhILEdBQUFyakIsaUJBQUEsZ0JBQUEzTixFQUFBb21ELGNBQUFwbUQsRUFBQW9tRCxhQUFBLE9BT0FwRyxhQUFBLFNBQUE1RCxHQUNBLEdBQUFpSyxFQUVBLEtBQUFqSyxJQUFBQSxFQUFBbDdDLE9BQ0EsT0FBQSxDQWFBLElBVkFtbEQsRUFBQWpLLEVBQUF4dkMsR0FBQSxHQUFBOUcsSUFBQSxhQUVBdWdELElBQUEsSUFBQUEsRUFBQWxrRCxRQUFBLFdBQ0Fra0QsRUFBQUEsRUFBQTl1QyxNQUFBLEtBQUEsR0FDQTh1QyxFQUFBQSxFQUFBOXVDLE1BQUEsS0FBQSxHQUNBOHVDLEVBQUFBLEVBQUE5dUMsTUFBQSxNQUVBOHVDLEtBR0FBLEVBQUFubEQsT0FJQW1sRCxFQURBQSxFQUFBbmxELE9BQUEsSUFDQW1sRCxFQUFBLElBQUFBLEVBQUEsSUFBQUEsRUFBQSxHQUFBQSxFQUFBLEtBR0FBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFHQUEsRUFBQUEsRUFBQXY1QyxJQUFBeUMsZ0JBRUEsQ0FDQTgyQyxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBRUEsSUFBQUMsR0FBQSxpQ0FDQUMsRUFBQUQsRUFBQWxnRCxLQUFBZzJDLEVBQUF4dkMsR0FBQSxHQUFBd1osS0FBQSxTQUVBbWdDLEtBQ0FGLEVBQUEsR0FBQTkyQyxXQUFBZzNDLEVBQUEsSUFDQUYsRUFBQSxHQUFBOTJDLFdBQUFnM0MsRUFBQSxLQUlBLE9BQ0E1aEMsSUFBQTBoQyxFQUFBLEdBQ0E1ckIsS0FBQTRyQixFQUFBLEdBQ0F2RixPQUFBdUYsRUFBQSxHQUNBdEYsT0FBQXNGLEVBQUEsR0FDQXoxQyxRQUFBckIsV0FBQTZzQyxFQUFBdDJDLElBQUEsWUFDQXlILE1BQUE2dUMsRUFBQTd1QyxRQUNBb0QsT0FBQXlyQyxFQUFBenJDLFdBVUFveEMsYUFBQSxTQUFBM0YsRUFBQWxyQyxHQUNBLEdBQUFpdEMsR0FBQSxHQUNBcjRDLElBRUEsSUFBQXMyQyxHQUFBbHJDLEVBbUNBLFdBajFGQSxLQWt6RkFBLEVBQUF1cEIsVUFsekZBLEtBa3pGQXZwQixFQUFBeVQsTUFDQXc1QixPQW56RkEsS0FtekZBanRDLEVBQUF1cEIsS0FBQTJoQixFQUFBbGpCLFdBQUF1QixLQUFBdnBCLEVBQUF1cEIsTUFBQSxZQW56RkEsS0FtekZBdnBCLEVBQUF5VCxJQUFBeTNCLEVBQUFsakIsV0FBQXZVLElBQUF6VCxFQUFBeVQsS0FBQSxLQUdBdzVCLEVBREEvOUMsS0FBQStsRCxNQUNBLGVBQUFoSSxFQUFBLFNBR0EsYUFBQUEsRUFBQSxTQXp6RkEsS0E2ekZBanRDLEVBQUE0dkMsWUE3ekZBLEtBNnpGQTV2QyxFQUFBNnZDLFNBQ0E1QyxHQUFBQSxFQUFBajlDLE9BQUFpOUMsRUFBQSxJQUFBLElBQUEsU0FBQWp0QyxFQUFBNHZDLE9BQUEsS0FBQTV2QyxFQUFBNnZDLE9BQUEsS0FHQTVDLEVBQUFqOUMsU0FDQTRFLEVBQUF3dEMsVUFBQTZLLE9BbDBGQSxLQXEwRkFqdEMsRUFBQU4sVUFDQTlLLEVBQUE4SyxRQUFBTSxFQUFBTixhQXQwRkEsS0F5MEZBTSxFQUFBM0QsUUFDQXpILEVBQUF5SCxNQUFBMkQsRUFBQTNELFdBMTBGQSxLQTYwRkEyRCxFQUFBUCxTQUNBN0ssRUFBQTZLLE9BQUFPLEVBQUFQLFFBR0F5ckMsRUFBQXQyQyxJQUFBQSxJQU9BczJCLFFBQUEsU0FBQWdnQixFQUFBamdCLEVBQUEzb0IsRUFBQXRILEVBQUFzNkMsR0FDQXhjLEVBQUFsb0MsV0FBQTBSLEtBQ0F0SCxFQUFBc0gsRUFDQUEsRUFBQSxNQUdBdzJCLEVBQUF6d0IsY0FBQTRpQixJQUNBaWdCLEVBQUF6ZSxXQUFBLFNBR0F5ZSxFQUFBdHlDLEdBQUEreEMsRUFBQSxTQUFBMTJDLEtBR0FBLElBQUFBLEVBQUF3dUIsZUFBQXlvQixFQUFBNXhCLEdBQUFybEIsRUFBQXd1QixjQUFBNWQsU0FBQSxXQUFBNVEsRUFBQXd1QixjQUFBOHlCLGdCQUlBemMsRUFBQTJNLFNBQUEzaUMsS0FBQW9vQyxHQUVBcFMsRUFBQXp3QixjQUFBNGlCLE9BMzJGQSxLQTYyRkFBLEVBQUEya0IsWUE3MkZBLEtBNjJGQTNrQixFQUFBNGtCLFNBQ0EzRSxFQUFBdDJDLElBQUEsc0JBQUEsSUFFQXEyQixFQUFBNXVCLE1BQUFxQixLQUFBeXhDLE1BQUFqRSxFQUFBN3VDLFFBQUE0dUIsRUFBQTJrQixRQUNBM2tCLEVBQUF4ckIsT0FBQS9CLEtBQUF5eEMsTUFBQWpFLEVBQUF6ckMsU0FBQXdyQixFQUFBNGtCLFFBRUE1a0IsRUFBQTJrQixPQUFBLEVBQ0Eza0IsRUFBQTRrQixPQUFBLEVBRUEvVyxFQUFBMk0sU0FBQW9MLGFBQUEzRixFQUFBamdCLEtBR0EsSUFBQXFxQixHQUNBcEssRUFBQXRkLFlBQUEzQyxHQUdBNk4sRUFBQWxvQyxXQUFBb0ssSUFDQUEsRUFBQS9HLE1BS0E2a0MsRUFBQXB3QixVQUFBcEcsSUFDQTRvQyxFQUFBdDJDLElBQUEsc0JBQUEwTixFQUFBLE1BR0F3MkIsRUFBQXp3QixjQUFBNGlCLEdBQ0E2TixFQUFBMk0sU0FBQW9MLGFBQUEzRixFQUFBamdCLEdBR0FpZ0IsRUFBQTNkLFNBQUF0QyxHQUdBQSxFQUFBMmtCLFFBQUExRSxFQUFBbGQsU0FBQSx3QkFDQWtkLEVBQUF2MEIsU0FBQTRXLFNBQUEsdUJBSUEyZCxFQUFBMTNDLEtBQUEsUUFBQXNMLFdBQUEsV0FDQW9zQyxFQUFBcm9CLFFBQUEsa0JBQ0F2Z0IsRUFBQSxNQUlBUSxLQUFBLFNBQUFvb0MsR0FDQTllLGFBQUE4ZSxFQUFBMTNDLEtBQUEsVUFFQTAzQyxFQUFBL3hDLElBQUEsaUJBQUF2RSxJQUFBLHNCQUFBLElBRUFzMkMsRUFBQWxkLFNBQUEsd0JBQ0FrZCxFQUFBdjBCLFNBQUFpWCxZQUFBLHlCQWdEQWtMLEVBQUEvL0IsR0FBQTBzQyxTQUFBLFNBQUFoMEMsR0FDQSxHQUFBcUgsRUFvQkEsT0FsQkFySCxHQUFBQSxNQUNBcUgsRUFBQXJILEVBQUFxSCxXQUFBLEVBRUFBLEVBRUFnZ0MsRUFBQSxRQUFBMy9CLElBQUEsaUJBQUFMLEdBQUFGLEdBQUEsaUJBQUFFLEdBQ0FySCxRQUFBQSxHQUNBNnpDLEdBSUFwMkMsS0FBQWlLLElBQUEsa0JBQUFQLEdBQUEsa0JBQ0E0c0MsTUFBQXQyQyxLQUNBdUMsUUFBQUEsR0FDQTZ6QyxHQUlBcDJDLE1BT0FrN0MsRUFBQXh4QyxHQUFBLGlCQUFBLGtCQUFBMHNDLEtBRUFyMkMsT0FBQUgsU0FBQUcsT0FBQWlCLFFBQUFBLFFBUUEsU0FBQTRvQyxHQUVBLFlBSUEsSUFBQTBjLEdBQUEsU0FBQTdrQixFQUFBdWdCLEVBQUExYSxHQUNBLEdBQUE3RixFQWtCQSxNQWRBNkYsR0FBQUEsR0FBQSxHQUVBLFdBQUFzQyxFQUFBN29DLEtBQUF1bUMsS0FDQUEsRUFBQXNDLEVBQUFwSixNQUFBOEcsR0FBQSxJQUdBc0MsRUFBQW5uQyxLQUFBdS9DLEVBQUEsU0FBQXI5QyxFQUFBeEIsR0FDQXMrQixFQUFBQSxFQUFBNzhCLFFBQUEsSUFBQUQsRUFBQXhCLEdBQUEsTUFHQW1rQyxFQUFBeG1DLFNBQ0EyZ0MsSUFBQUEsRUFBQTEvQixRQUFBLEtBQUEsRUFBQSxJQUFBLEtBQUF1bEMsR0FHQTdGLEdBS0FxSSxHQUNBeWMsU0FDQTFvQyxRQUFBLHdKQUNBeXBCLFFBQ0FrZixTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsR0FBQSxFQUNBQyxJQUFBLEVBQ0FDLEdBQUEsRUFDQUMsTUFBQSxjQUNBQyxZQUFBLEVBQ0FDLE1BQUEsR0FFQUMsV0FBQSxFQUNBam1ELEtBQUEsU0FDQTBnQyxJQUFBLDZCQUNBd2hCLE1BQUEseUNBR0FnRSxPQUNBcHBDLFFBQUEsb0NBQ0F5cEIsUUFDQWtmLFNBQUEsRUFDQUksR0FBQSxFQUNBTSxXQUFBLEVBQ0FDLFlBQUEsRUFDQUMsY0FBQSxFQUNBQyxXQUFBLEVBQ0FDLElBQUEsR0FFQU4sV0FBQSxFQUNBam1ELEtBQUEsU0FDQTBnQyxJQUFBLCtCQUdBOGxCLFVBQ0ExcEMsUUFBQSxvQ0FDQTljLEtBQUEsU0FDQTBnQyxJQUFBLHFDQUdBK2xCLGFBQ0EzcEMsUUFBQSxzQ0FDQXlwQixRQUNBbWdCLGdCQUFBLEVBQ0E5YSxVQUFBLEdBRUE1ckMsS0FBQSxTQUNBMGdDLElBQUEsd0NBR0FpbUIsTUFDQTdwQyxRQUFBLG1DQUNBOWMsS0FBQSxTQUNBMGdDLElBQUEsK0JBR0FrbUIsV0FDQTlwQyxRQUFBLHlEQUNBOWMsS0FBQSxRQUNBMGdDLElBQUEsMkJBT0FtbUIsWUFDQS9wQyxRQUFBLDRHQUNBOWMsS0FBQSxTQUNBMGdDLElBQUEsU0FBQXVnQixHQUNBLE1BQUEsaUJBQUFBLEVBQUEsR0FBQSxTQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQSxNQUFBeHpDLEtBQUF5L0IsTUFBQStULEVBQUEsTUFBQUEsRUFBQSxJQUFBQSxFQUFBLElBQUFwOUMsUUFBQSxNQUFBLEtBQUEsSUFBQW85QyxFQUFBLEtBQUEsWUFBQUEsRUFBQSxLQUFBQSxFQUFBLElBQUFqZ0QsUUFBQSxXQUFBLEVBQUEsVUFBQSxXQVFBOGxELGFBQ0FocUMsUUFBQSxvRUFDQTljLEtBQUEsU0FDQTBnQyxJQUFBLFNBQUF1Z0IsR0FDQSxNQUFBLGlCQUFBQSxFQUFBLEdBQUEsV0FBQUEsRUFBQSxHQUFBcDlDLFFBQUEsU0FBQSxNQUFBQSxRQUFBLFFBQUEsSUFBQSxrQkFLQWdsQyxHQUFBaHFDLFVBQUE4SixHQUFBLHFCQUFBLFNBQUEzRSxFQUFBNDVDLEVBQUFmLEdBRUEsR0FFQTlFLEdBQ0FtSyxFQUNBakIsRUFDQTFhLEVBQ0F3Z0IsRUFDQUMsRUFQQXRtQixFQUFBbWMsRUFBQWh6QyxLQUFBLEdBQ0E3SixHQUFBLENBU0ErM0MsR0FBQWxQLEVBQUF0K0IsUUFBQSxLQUFBdytCLEVBQUE4VCxFQUFBN3NDLEtBQUErbkMsT0FHQWxQLEVBQUFubkMsS0FBQXEyQyxFQUFBLFNBQUFrUCxFQUFBQyxHQUdBLEdBRkFqRyxFQUFBdmdCLEVBQUEvK0IsTUFBQXVsRCxFQUFBcHFDLFNBRUEsQ0FPQSxHQUhBOWMsRUFBQWtuRCxFQUFBbG5ELEtBQ0FnbkQsS0FFQUUsRUFBQWpCLFlBQUFoRixFQUFBaUcsRUFBQWpCLFlBQUEsQ0FDQWMsRUFBQTlGLEVBQUFpRyxFQUFBakIsWUFFQSxLQUFBYyxFQUFBLEtBQ0FBLEVBQUFBLEVBQUEvRSxVQUFBLElBR0ErRSxFQUFBQSxFQUFBM3dDLE1BQUEsSUFFQSxLQUFBLEdBQUF1RCxHQUFBLEVBQUFBLEVBQUFvdEMsRUFBQWhuRCxTQUFBNFosRUFBQSxDQUNBLEdBQUF5Z0IsR0FBQTJzQixFQUFBcHRDLEdBQUF2RCxNQUFBLElBQUEsRUFFQSxJQUFBZ2tCLEVBQUFyNkIsU0FDQWluRCxFQUFBNXNCLEVBQUEsSUFBQStzQixtQkFBQS9zQixFQUFBLEdBQUF2MkIsUUFBQSxNQUFBLFFBY0EsTUFUQTBpQyxHQUFBc0MsRUFBQXQrQixRQUFBLEtBQUEyOEMsRUFBQTNnQixPQUFBc1csRUFBQTdzQyxLQUFBaTNDLEdBQUFELEdBRUF0bUIsRUFBQSxhQUFBbUksRUFBQTdvQyxLQUFBa25ELEVBQUF4bUIsS0FBQXdtQixFQUFBeG1CLElBQUE1L0IsS0FBQTdCLEtBQUFnaUQsRUFBQTFhLEVBQUFzVyxHQUFBMEksRUFBQTJCLEVBQUF4bUIsSUFBQXVnQixFQUFBMWEsR0FDQTJiLEVBQUEsYUFBQXJaLEVBQUE3b0MsS0FBQWtuRCxFQUFBaEYsT0FBQWdGLEVBQUFoRixNQUFBcGhELEtBQUE3QixLQUFBZ2lELEVBQUExYSxFQUFBc1csR0FBQTBJLEVBQUEyQixFQUFBaEYsTUFBQWpCLEdBRUEsVUFBQWdHLElBQ0F2bUIsRUFBQUEsRUFBQTc4QixRQUFBLE9BQUEsT0FHQSxLQUtBN0QsR0FDQTY4QyxFQUFBaHpDLElBQUE2MkIsRUFDQW1jLEVBQUE3OEMsS0FBQUEsRUFFQTY4QyxFQUFBN3NDLEtBQUFreUMsT0FBQXJGLEVBQUE3c0MsS0FBQXF0QyxRQUFBUixFQUFBN3NDLEtBQUFxdEMsT0FBQXQ5QyxTQUNBODhDLEVBQUE3c0MsS0FBQWt5QyxNQUFBQSxHQUdBLFdBQUFsaUQsSUFDQTZvQyxFQUFBdCtCLFFBQUEsRUFBQXN5QyxFQUFBN3NDLE1BQ0FxbUMsUUFDQUQsU0FBQSxFQUNBbnhCLE1BQ0FzeEIsVUFBQSxTQUtBc0csRUFBQXVLLG9CQWpFQUMsR0FtRUF4SyxFQUFBN3NDLEtBQUE4bUMsWUFBQSwyQkFHQXBXLElBQ0FtYyxFQUFBNzhDLEtBQUE2OEMsRUFBQTdzQyxLQUFBd21DLGdCQUtBeDNDLE9BQUFpQixRQUFBQSxRQVFBLFNBQUFqQixFQUFBSCxFQUFBZ3FDLEdBQ0EsWUFFQSxJQUFBeVIsR0FBQSxXQUNBLE1BQUF0N0MsR0FBQTRQLHVCQUNBNVAsRUFBQXU3Qyw2QkFDQXY3QyxFQUFBdzdDLDBCQUNBeDdDLEVBQUF5N0Msd0JBRUEsU0FBQTF2QyxHQUNBLE1BQUEvTCxHQUFBNlAsV0FBQTlELEVBQUEsSUFBQSxRQUtBdThDLEVBQUEsV0FDQSxNQUFBdG9ELEdBQUF1b0Qsc0JBQ0F2b0QsRUFBQXdvRCw0QkFDQXhvRCxFQUFBeW9ELHlCQUNBem9ELEVBQUEwb0QsdUJBQ0EsU0FBQXJ0QyxHQUNBcmIsRUFBQW05QixhQUFBOWhCLE9BS0FzdEMsRUFBQSxTQUFBM2pELEdBQ0EsR0FBQTZOLEtBRUE3TixHQUFBQSxFQUFBd3VCLGVBQUF4dUIsR0FBQWhGLEVBQUFnRixFQUNBQSxFQUFBQSxFQUFBaXhCLFNBQUFqeEIsRUFBQWl4QixRQUFBbDFCLE9BQUFpRSxFQUFBaXhCLFFBQUFqeEIsRUFBQTB2QixnQkFBQTF2QixFQUFBMHZCLGVBQUEzekIsT0FBQWlFLEVBQUEwdkIsZ0JBQUExdkIsRUFFQSxLQUFBLEdBQUFKLEtBQUFJLEdBRUFBLEVBQUFKLEdBQUFtd0IsTUFDQWxpQixFQUFBM0osTUFBQWlyQyxFQUFBbnZDLEVBQUFKLEdBQUFtd0IsTUFBQXFmLEVBQUFwdkMsRUFBQUosR0FBQW93QixRQUVBaHdCLEVBQUFKLEdBQUEyd0IsU0FDQTFpQixFQUFBM0osTUFBQWlyQyxFQUFBbnZDLEVBQUFKLEdBQUEyd0IsUUFBQTZlLEVBQUFwdkMsRUFBQUosR0FBQTR3QixTQUlBLE9BQUEzaUIsSUFHQW1pQyxFQUFBLFNBQUE0VCxFQUFBQyxFQUFBeGhDLEdBQ0EsTUFBQXdoQyxJQUFBRCxFQUlBLE1BQUF2aEMsRUFDQXVoQyxFQUFBelUsRUFBQTBVLEVBQUExVSxFQUVBLE1BQUE5c0IsRUFDQXVoQyxFQUFBeFUsRUFBQXlVLEVBQUF6VSxFQUdBM2xDLEtBQUFxNkMsS0FBQXI2QyxLQUFBczZDLElBQUFILEVBQUF6VSxFQUFBMFUsRUFBQTFVLEVBQUEsR0FBQTFsQyxLQUFBczZDLElBQUFILEVBQUF4VSxFQUFBeVUsRUFBQXpVLEVBQUEsSUFWQSxHQWFBNFUsRUFBQSxTQUFBL00sR0FFQSxHQUFBQSxFQUFBNXhCLEdBQUEsc0VBQUF3ZixFQUFBbG9DLFdBQUFzNkMsRUFBQWoxQyxJQUFBLEdBQUFpaUQsVUFBQWhOLEVBQUExM0MsS0FBQSxjQUNBLE9BQUEsQ0FJQSxLQUFBLEdBQUExQyxHQUFBLEVBQUFxbkQsRUFBQWpOLEVBQUEsR0FBQTk1QixXQUFBb0ksRUFBQTIrQixFQUFBbm9ELE9BQUFjLEVBQUEwb0IsRUFBQTFvQixJQUNBLEdBQUEsbUJBQUFxbkQsRUFBQXJuRCxHQUFBVixTQUFBZ29ELE9BQUEsRUFBQSxJQUNBLE9BQUEsQ0FJQSxRQUFBLEdBR0FDLEVBQUEsU0FBQTFzQyxHQUNBLEdBQUF0SyxHQUFBcFMsRUFBQTYzQixpQkFBQW5iLEdBQUEsY0FDQXZLLEVBQUFuUyxFQUFBNjNCLGlCQUFBbmIsR0FBQSxjQUVBbThCLEdBQUEsV0FBQXptQyxHQUFBLFNBQUFBLElBQUFzSyxFQUFBNmdDLGFBQUE3Z0MsRUFBQTJzQyxhQUNBQyxHQUFBLFdBQUFuM0MsR0FBQSxTQUFBQSxJQUFBdUssRUFBQW1uQyxZQUFBbm5DLEVBQUErZ0MsV0FFQSxPQUFBNUUsSUFBQXlRLEdBR0FDLEVBQUEsU0FBQXROLEdBR0EsSUFGQSxHQUFBZ0csSUFBQSxJQUVBLENBR0EsR0FGQUEsRUFBQW1ILEVBQUFuTixFQUFBajFDLElBQUEsSUFHQSxLQUtBLElBRkFpMUMsRUFBQUEsRUFBQXYwQixVQUVBdTBCLEVBQUFsN0MsUUFBQWs3QyxFQUFBbGQsU0FBQSxtQkFBQWtkLEVBQUE1eEIsR0FBQSxRQUNBLE1BSUEsTUFBQTQzQixJQUlBdUgsRUFBQSxTQUFBNUssR0FDQSxHQUFBcHlDLEdBQUF2TSxJQUVBdU0sR0FBQW95QyxTQUFBQSxFQUVBcHlDLEVBQUFpOUMsSUFBQTdLLEVBQUFqQixNQUFBK0wsR0FDQWw5QyxFQUFBbTlDLE9BQUEvSyxFQUFBakIsTUFBQWdCLE1BQ0FueUMsRUFBQXN3QyxXQUFBOEIsRUFBQWpCLE1BQUEzbEIsVUFFQXhyQixFQUFBczVDLFVBRUF0NUMsRUFBQXN3QyxXQUFBbnpDLEdBQUEseUNBQUFrZ0MsRUFBQTcxQixNQUFBeEgsRUFBQSxpQkFHQWc5QyxHQUFBajZDLFVBQUF1MkMsUUFBQSxXQUNBN2xELEtBQUE2OEMsV0FBQTV5QyxJQUFBLGNBR0FzL0MsRUFBQWo2QyxVQUFBcTZDLGFBQUEsU0FBQTVrRCxHQUNBLEdBQUF3SCxHQUFBdk0sS0FFQXEyQyxFQUFBek0sRUFBQTdrQyxFQUFBNFEsUUFDQWdwQyxFQUFBcHlDLEVBQUFveUMsU0FDQTduQyxFQUFBNm5DLEVBQUE3bkMsUUFDQStwQyxFQUFBL3BDLEVBQUErcEMsU0FFQStJLEVBQUEsY0FBQTdrRCxFQUFBaEUsSUFRQSxJQUxBNm9ELEdBQ0FyOUMsRUFBQXN3QyxXQUFBNXlDLElBQUEsdUJBSUE2TSxHQUFBdkssRUFBQW95QyxTQUFBYyxhQUFBbHpDLEVBQUFveUMsU0FBQUMsVUFJQSxNQUhBNzVDLEdBQUFndUIsc0JBQ0FodUIsR0FBQSt0QixnQkFNQSxNQUFBL3RCLEVBQUF3dUIsZUFBQSxHQUFBeHVCLEVBQUF3dUIsY0FBQTNLLFNBS0F5dEIsRUFBQXYxQyxTQUFBaW9ELEVBQUExUyxLQUFBMFMsRUFBQTFTLEVBQUE1dUIsYUFLQTFpQixFQUFBd3VCLGNBQUErQixRQUFBK2dCLEVBQUEsR0FBQW1ILFlBQUFuSCxFQUFBN08sU0FBQW5OLFFBSUE5dEIsRUFBQXM5QyxZQUFBbkIsRUFBQTNqRCxHQUdBd0gsRUFBQXM5QyxlQUFBdDlDLEVBQUFzOUMsWUFBQS9vRCxPQUFBLEdBQUE2OUMsRUFBQWEsWUFBQSxDQWNBLEdBVkFqekMsRUFBQThwQyxRQUFBQSxFQUNBOXBDLEVBQUFzMEMsU0FBQUEsRUFDQXQwQyxFQUFBdTlDLFFBQUEsRUFDQXY5QyxFQUFBd0UsS0FBQStGLEVBQUEvRixLQUFBa2pDLE1BRUFySyxFQUFBaHFDLEdBQUFxSyxJQUFBLGFBRUEyL0IsRUFBQWhxQyxHQUFBOEosR0FBQWtnRCxFQUFBLHlDQUFBLHVDQUFBaGdCLEVBQUE3MUIsTUFBQXhILEVBQUEsZUFDQXE5QixFQUFBaHFDLEdBQUE4SixHQUFBa2dELEVBQUEscUJBQUEscUJBQUFoZ0IsRUFBQTcxQixNQUFBeEgsRUFBQSxpQkFFQUEsRUFBQXdFLE9BQUE0dEMsRUFBQXNELFdBQUE1TCxFQUFBanNCLEdBQUE3ZCxFQUFBbTlDLFVBQUFuOUMsRUFBQW05QyxPQUFBM29DLEtBQUFzMUIsR0FBQXYxQyxPQU9BLFlBSkF1MUMsRUFBQWpzQixHQUFBLFFBQ0FybEIsRUFBQSt0QixpQkFNQS90QixHQUFBZ3VCLGtCQUVBNlcsRUFBQTJNLFNBQUEyRixXQUFBb04sRUFBQS84QyxFQUFBOHBDLFVBQUFpVCxFQUFBLzhDLEVBQUE4cEMsUUFBQTV1QixZQUNBMWlCLEVBQUErdEIsaUJBR0F2bUIsRUFBQTZ5QyxZQUFBNXdDLEtBQUF5eEMsTUFBQW5wQyxFQUFBK29DLE9BQUEsR0FBQXJDLGFBQ0FqeEMsRUFBQXUwQyxhQUFBdHlDLEtBQUF5eEMsTUFBQW5wQyxFQUFBK29DLE9BQUEsR0FBQXVKLGNBRUE3OEMsRUFBQTRHLFdBQUEsR0FBQWtILE9BQUFzcEMsVUFDQXAzQyxFQUFBdzlDLFVBQUF4OUMsRUFBQXk5QyxVQUFBejlDLEVBQUF3b0MsU0FBQSxFQUVBeG9DLEVBQUEwOUMsV0FBQSxFQUNBMTlDLEVBQUEyOUMsV0FBQSxFQUNBMzlDLEVBQUE0OUMsV0FBQSxFQUVBNTlDLEVBQUE2OUMsZUFBQTc5QyxFQUFBODlDLGdCQUFBOWxDLElBQUEsRUFBQThWLEtBQUEsR0FDQTl0QixFQUFBKzlDLGdCQUFBMWdCLEVBQUEyTSxTQUFBcUosYUFBQXJ6QyxFQUFBczBDLFVBQ0F0MEMsRUFBQWcrQyxlQUFBLEtBRUEsSUFBQWgrQyxFQUFBczlDLFlBQUEvb0QsUUFBQXlMLEVBQUE0OUMsWUFDQTU5QyxFQUFBdTlDLFFBQUFuTCxFQUFBYSxVQUVBLFVBQUExb0MsRUFBQS9WLE9BQUF3TCxFQUFBKzlDLGdCQUFBbjlDLE1BQUFaLEVBQUE2eUMsWUFBQSxHQUFBN3lDLEVBQUErOUMsZ0JBQUEvNUMsT0FBQWhFLEVBQUF1MEMsYUFBQSxJQUVBbFgsRUFBQTJNLFNBQUEzaUMsS0FBQXJILEVBQUFzMEMsVUFFQXQwQyxFQUFBczBDLFNBQUFuN0MsSUFBQSxzQkFBQSxPQUVBNkcsRUFBQTA5QyxXQUFBLEdBSUExOUMsRUFBQTI5QyxXQUFBLEVBR0EzOUMsRUFBQXN3QyxXQUFBeGUsU0FBQSxrQ0FHQSxJQUFBOXhCLEVBQUFzOUMsWUFBQS9vRCxRQUFBNjlDLEVBQUFjLGFBQUEzb0MsRUFBQW1xQyxVQUFBLFVBQUFucUMsRUFBQS9WLE9BQUErVixFQUFBb3BDLFdBQUFwcEMsRUFBQW9zQyxTQUNBMzJDLEVBQUE0OUMsV0FBQSxFQUVBNTlDLEVBQUEyOUMsV0FBQSxFQUNBMzlDLEVBQUEwOUMsV0FBQSxFQUVBcmdCLEVBQUEyTSxTQUFBM2lDLEtBQUFySCxFQUFBczBDLFVBRUF0MEMsRUFBQXMwQyxTQUFBbjdDLElBQUEsc0JBQUEsT0FFQTZHLEVBQUFpK0Msa0JBQUEsSUFBQWorQyxFQUFBczlDLFlBQUEsR0FBQTNWLEVBQUEzbkMsRUFBQXM5QyxZQUFBLEdBQUEzVixHQUFBdEssRUFBQTdwQyxHQUFBazdCLGFBQ0ExdUIsRUFBQWsrQyxrQkFBQSxJQUFBbCtDLEVBQUFzOUMsWUFBQSxHQUFBMVYsRUFBQTVuQyxFQUFBczlDLFlBQUEsR0FBQTFWLEdBQUF2SyxFQUFBN3BDLEdBQUFpN0IsWUFFQXp1QixFQUFBbStDLGdDQUFBbitDLEVBQUFpK0Msa0JBQUFqK0MsRUFBQSs5QyxnQkFBQWp3QixNQUFBOXRCLEVBQUErOUMsZ0JBQUFuOUMsTUFDQVosRUFBQW8rQyxnQ0FBQXArQyxFQUFBaytDLGtCQUFBbCtDLEVBQUErOUMsZ0JBQUEvbEMsS0FBQWhZLEVBQUErOUMsZ0JBQUEvNUMsT0FFQWhFLEVBQUFxK0MsNEJBQUE3VixFQUFBeG9DLEVBQUFzOUMsWUFBQSxHQUFBdDlDLEVBQUFzOUMsWUFBQSxPQUtBTixFQUFBajZDLFVBQUF1N0MsWUFBQSxTQUFBOWxELEdBRUEsR0FBQXdILEdBQUF2TSxJQUlBLElBRkF1TSxFQUFBdStDLFVBQUFwQyxFQUFBM2pELEdBRUE2a0MsRUFBQTJNLFNBQUEyRixXQUFBb04sRUFBQS84QyxFQUFBOHBDLFVBQUFpVCxFQUFBLzhDLEVBQUE4cEMsUUFBQTV1QixXQUtBLE1BSkExaUIsR0FBQWd1Qix1QkFFQXhtQixFQUFBdTlDLFFBQUEsRUFLQSxLQUFBdjlDLEVBQUF3RSxNQUFBeEUsRUFBQW95QyxTQUFBc0QsV0FBQTExQyxFQUFBdStDLFdBQUF2K0MsRUFBQXUrQyxVQUFBaHFELFNBSUF5TCxFQUFBdzlDLFVBQUFoVixFQUFBeG9DLEVBQUF1K0MsVUFBQSxHQUFBditDLEVBQUFzOUMsWUFBQSxHQUFBLEtBQ0F0OUMsRUFBQXk5QyxVQUFBalYsRUFBQXhvQyxFQUFBdStDLFVBQUEsR0FBQXYrQyxFQUFBczlDLFlBQUEsR0FBQSxLQUVBdDlDLEVBQUF3b0MsU0FBQUEsRUFBQXhvQyxFQUFBdStDLFVBQUEsR0FBQXYrQyxFQUFBczlDLFlBQUEsSUFHQXQ5QyxFQUFBd29DLFNBQUEsR0FBQSxDQUVBLElBQUF4b0MsRUFBQThwQyxRQUFBanNCLEdBQUE3ZCxFQUFBbTlDLFVBQUFuOUMsRUFBQW05QyxPQUFBM29DLEtBQUF4VSxFQUFBOHBDLFNBQUF2MUMsT0FDQSxNQUdBaUUsR0FBQWd1QixrQkFDQWh1QixFQUFBK3RCLGlCQUVBdm1CLEVBQUEyOUMsVUFDQTM5QyxFQUFBdytDLFVBRUF4K0MsRUFBQTA5QyxVQUNBMTlDLEVBQUF5K0MsUUFFQXorQyxFQUFBNDlDLFdBQ0E1OUMsRUFBQTArQyxXQU9BMUIsRUFBQWo2QyxVQUFBeTdDLFFBQUEsV0FFQSxHQUlBRyxHQUpBMytDLEVBQUF2TSxLQUVBbXJELEVBQUE1K0MsRUFBQTI5QyxVQUNBN3ZCLEVBQUE5dEIsRUFBQTY5QyxlQUFBL3ZCLE1BQUEsR0FHQSxJQUFBOHdCLEVBRUEzOEMsS0FBQWdsQyxJQUFBam5DLEVBQUF3b0MsVUFBQSxLQUVBeG9DLEVBQUF1OUMsUUFBQSxFQUVBdjlDLEVBQUFveUMsU0FBQXhDLE1BQUFyN0MsT0FBQSxHQUFBeUwsRUFBQXdFLEtBQUE2bkMsU0FDQXJzQyxFQUFBMjlDLFVBQUEsSUFFQTM5QyxFQUFBb3lDLFNBQUFhLFlBQUEsSUFBQWp6QyxFQUFBd0UsS0FBQTZuQyxVQUFBLFNBQUFyc0MsRUFBQXdFLEtBQUE2bkMsVUFBQWhQLEVBQUE3cEMsR0FBQW9OLFFBQUEsSUFDQVosRUFBQTI5QyxVQUFBLEtBR0FnQixFQUFBMThDLEtBQUFnbEMsSUFBQSxJQUFBaGxDLEtBQUE0OEMsTUFBQTcrQyxFQUFBeTlDLFVBQUF6OUMsRUFBQXc5QyxXQUFBdjdDLEtBQUE4c0IsSUFFQS91QixFQUFBMjlDLFVBQUFnQixFQUFBLElBQUFBLEVBQUEsSUFBQSxJQUFBLEtBR0EzK0MsRUFBQW95QyxTQUFBYSxVQUFBanpDLEVBQUEyOUMsVUFHQTM5QyxFQUFBczlDLFlBQUF0OUMsRUFBQXUrQyxVQUVBbGhCLEVBQUFubkMsS0FBQThKLEVBQUFveUMsU0FBQWhDLE9BQUEsU0FBQTkxQyxFQUFBczRDLEdBQ0F2VixFQUFBMk0sU0FBQTNpQyxLQUFBdXJDLEVBQUFVLFFBRUFWLEVBQUFVLE9BQUFuNkMsSUFBQSxzQkFBQSxPQUVBeTVDLEVBQUFrTSxjQUFBLEVBRUFsTSxFQUFBcmtCLE1BQUF2dUIsRUFBQW95QyxTQUFBN25DLFFBQUFna0IsTUFDQXZ1QixFQUFBNjlDLGVBQUEvdkIsS0FBQXVQLEVBQUEyTSxTQUFBcUosYUFBQVQsRUFBQVUsUUFBQXhsQixRQU9BOXRCLEVBQUFveUMsU0FBQXdDLFdBQUE1MEMsRUFBQW95QyxTQUFBd0MsVUFBQUMsVUFDQTcwQyxFQUFBb3lDLFNBQUF3QyxVQUFBdnRDLFNBTUEsS0FBQXUzQyxJQUdBNStDLEVBQUF3OUMsVUFBQSxJQUFBeDlDLEVBQUFveUMsU0FBQXhDLE1BQUFyN0MsT0FBQSxHQUFBLElBQUF5TCxFQUFBb3lDLFNBQUE3bkMsUUFBQWpRLFFBQUEwRixFQUFBb3lDLFNBQUE3bkMsUUFBQS9GLEtBQUEwbEMsTUFDQXBjLEdBQUE3ckIsS0FBQXM2QyxJQUFBdjhDLEVBQUF3OUMsVUFBQSxJQUVBeDlDLEVBQUF3OUMsVUFBQSxJQUFBeDlDLEVBQUFveUMsU0FBQXhDLE1BQUFyN0MsT0FBQSxHQUFBeUwsRUFBQW95QyxTQUFBN25DLFFBQUFqUSxRQUFBMEYsRUFBQW95QyxTQUFBeEMsTUFBQXI3QyxPQUFBLElBQUF5TCxFQUFBb3lDLFNBQUE3bkMsUUFBQS9GLEtBQUEwbEMsTUFDQXBjLEdBQUE3ckIsS0FBQXM2QyxLQUFBdjhDLEVBQUF3OUMsVUFBQSxJQUdBMXZCLEdBQUE5dEIsRUFBQXc5QyxXQUtBeDlDLEVBQUE4OUMsZUFDQTlsQyxJQUFBLEtBQUE0bUMsRUFBQSxFQUFBNStDLEVBQUE2OUMsZUFBQTdsQyxJQUFBaFksRUFBQXk5QyxVQUNBM3ZCLEtBQUFBLEdBR0E5dEIsRUFBQSsrQyxZQUNBakQsRUFBQTk3QyxFQUFBKytDLFdBRUEvK0MsRUFBQSsrQyxVQUFBLE1BR0EvK0MsRUFBQSsrQyxVQUFBalEsRUFBQSxXQUVBOXVDLEVBQUE4OUMsZ0JBQ0F6Z0IsRUFBQW5uQyxLQUFBOEosRUFBQW95QyxTQUFBaEMsT0FBQSxTQUFBOTFDLEVBQUFzNEMsR0FDQSxHQUFBcmtCLEdBQUFxa0IsRUFBQXJrQixJQUFBdnVCLEVBQUFveUMsU0FBQXBDLE9BRUEzUyxHQUFBMk0sU0FBQW9MLGFBQUF4QyxFQUFBVSxRQUNBdDdCLElBQUFoWSxFQUFBODlDLGNBQUE5bEMsSUFDQThWLEtBQUE5dEIsRUFBQTg5QyxjQUFBaHdCLEtBQUFTLEVBQUF2dUIsRUFBQTZ5QyxZQUFBdGtCLEVBQUFxa0IsRUFBQXB1QyxLQUFBMmxDLFdBSUFucUMsRUFBQXN3QyxXQUFBeGUsU0FBQSw0QkFTQWtyQixFQUFBajZDLFVBQUEwN0MsTUFBQSxXQUVBLEdBRUFPLEdBQUFDLEVBQUFDLEVBRkFsL0MsRUFBQXZNLElBSUF1TSxHQUFBdTlDLFFBQUEsRUFHQXlCLEVBREFoL0MsRUFBQSs5QyxnQkFBQW45QyxNQUFBWixFQUFBNnlDLFlBQ0E3eUMsRUFBQSs5QyxnQkFBQWp3QixLQUFBOXRCLEVBQUF3OUMsVUFHQXg5QyxFQUFBKzlDLGdCQUFBandCLEtBR0FteEIsRUFBQWovQyxFQUFBKzlDLGdCQUFBL2xDLElBQUFoWSxFQUFBeTlDLFVBRUF5QixFQUFBbC9DLEVBQUFtL0MsY0FBQUgsRUFBQUMsRUFBQWovQyxFQUFBKzlDLGdCQUFBbjlDLE1BQUFaLEVBQUErOUMsZ0JBQUEvNUMsUUFFQWs3QyxFQUFBL0ssT0FBQW4wQyxFQUFBKzlDLGdCQUFBNUosT0FDQStLLEVBQUE5SyxPQUFBcDBDLEVBQUErOUMsZ0JBQUEzSixPQUVBcDBDLEVBQUFnK0MsZUFBQWtCLEVBRUFsL0MsRUFBQSsrQyxZQUNBakQsRUFBQTk3QyxFQUFBKytDLFdBRUEvK0MsRUFBQSsrQyxVQUFBLE1BR0EvK0MsRUFBQSsrQyxVQUFBalEsRUFBQSxXQUNBelIsRUFBQTJNLFNBQUFvTCxhQUFBcDFDLEVBQUFzMEMsU0FBQXQwQyxFQUFBZytDLG1CQUtBaEIsRUFBQWo2QyxVQUFBbzhDLGNBQUEsU0FBQUgsRUFBQUMsRUFBQUcsRUFBQUMsR0FFQSxHQUVBQyxHQUFBQyxFQUFBQyxFQUFBQyxFQUZBei9DLEVBQUF2TSxLQUlBby9DLEVBQUE3eUMsRUFBQTZ5QyxZQUNBMEIsRUFBQXYwQyxFQUFBdTBDLGFBRUFtTCxFQUFBMS9DLEVBQUErOUMsZ0JBQUFqd0IsS0FDQTZ4QixFQUFBMy9DLEVBQUErOUMsZ0JBQUEvbEMsSUFFQXdsQyxFQUFBeDlDLEVBQUF3OUMsVUFDQUMsRUFBQXo5QyxFQUFBeTlDLFNBc0NBLE9BbENBNkIsR0FBQXI5QyxLQUFBQyxJQUFBLEVBQUEsR0FBQTJ3QyxFQUFBLEdBQUF1TSxHQUNBRyxFQUFBdDlDLEtBQUFDLElBQUEsRUFBQSxHQUFBcXlDLEVBQUEsR0FBQThLLEdBRUFHLEVBQUF2OUMsS0FBQWt6QyxJQUFBdEMsRUFBQXVNLEVBQUEsR0FBQXZNLEVBQUEsR0FBQXVNLEdBQ0FLLEVBQUF4OUMsS0FBQWt6QyxJQUFBWixFQUFBOEssRUFBQSxHQUFBOUssRUFBQSxHQUFBOEssR0FFQUQsRUFBQXZNLElBR0EySyxFQUFBLEdBQUF3QixFQUFBTSxJQUNBTixFQUFBTSxFQUFBLEVBQUFyOUMsS0FBQXM2QyxLQUFBK0MsRUFBQUksRUFBQWxDLEVBQUEsS0FBQSxHQUlBQSxFQUFBLEdBQUF3QixFQUFBUSxJQUNBUixFQUFBUSxFQUFBLEVBQUF2OUMsS0FBQXM2QyxJQUFBaUQsRUFBQUUsRUFBQWxDLEVBQUEsS0FBQSxJQUtBNkIsRUFBQTlLLElBR0FrSixFQUFBLEdBQUF3QixFQUFBTSxJQUNBTixFQUFBTSxFQUFBLEVBQUF0OUMsS0FBQXM2QyxLQUFBZ0QsRUFBQUksRUFBQWxDLEVBQUEsS0FBQSxHQUlBQSxFQUFBLEdBQUF3QixFQUFBUSxJQUNBUixFQUFBUSxFQUFBLEVBQUF4OUMsS0FBQXM2QyxJQUFBa0QsRUFBQUUsRUFBQWxDLEVBQUEsS0FBQSxLQU1BemxDLElBQUFpbkMsRUFDQW54QixLQUFBa3hCLElBTUFoQyxFQUFBajZDLFVBQUE2OEMsY0FBQSxTQUFBWixFQUFBQyxFQUFBRyxFQUFBQyxHQUVBLEdBQUFyL0MsR0FBQXZNLEtBRUFvL0MsRUFBQTd5QyxFQUFBNnlDLFlBQ0EwQixFQUFBdjBDLEVBQUF1MEMsWUF3QkEsT0F0QkE2SyxHQUFBdk0sR0FDQW1NLEVBQUFBLEVBQUEsRUFBQSxFQUFBQSxFQUNBQSxFQUFBQSxFQUFBbk0sRUFBQXVNLEVBQUF2TSxFQUFBdU0sRUFBQUosR0FLQUEsRUFBQS84QyxLQUFBQyxJQUFBLEVBQUEyd0MsRUFBQSxFQUFBdU0sRUFBQSxHQUlBQyxFQUFBOUssR0FDQTBLLEVBQUFBLEVBQUEsRUFBQSxFQUFBQSxFQUNBQSxFQUFBQSxFQUFBMUssRUFBQThLLEVBQUE5SyxFQUFBOEssRUFBQUosR0FLQUEsRUFBQWg5QyxLQUFBQyxJQUFBLEVBQUFxeUMsRUFBQSxFQUFBOEssRUFBQSxJQUtBcm5DLElBQUFpbkMsRUFDQW54QixLQUFBa3hCLElBS0FoQyxFQUFBajZDLFVBQUEyN0MsT0FBQSxXQUVBLEdBQUExK0MsR0FBQXZNLEtBSUFvc0QsRUFBQTcvQyxFQUFBKzlDLGdCQUFBbjlDLE1BQ0FrL0MsRUFBQTkvQyxFQUFBKzlDLGdCQUFBLzVDLE9BRUEwN0MsRUFBQTEvQyxFQUFBKzlDLGdCQUFBandCLEtBQ0E2eEIsRUFBQTMvQyxFQUFBKzlDLGdCQUFBL2xDLElBRUErbkMsRUFBQXZYLEVBQUF4b0MsRUFBQXUrQyxVQUFBLEdBQUF2K0MsRUFBQXUrQyxVQUFBLElBRUF5QixFQUFBRCxFQUFBLy9DLEVBQUFxK0MsNEJBRUFlLEVBQUFuOUMsS0FBQXkvQixNQUFBbWUsRUFBQUcsR0FDQVgsRUFBQXA5QyxLQUFBeS9CLE1BQUFvZSxFQUFBRSxHQUdBQyxHQUFBSixFQUFBVCxHQUFBcC9DLEVBQUFtK0MsK0JBQ0ErQixHQUFBSixFQUFBVCxHQUFBci9DLEVBQUFvK0MsK0JBSUErQixHQUFBbmdELEVBQUF1K0MsVUFBQSxHQUFBNVcsRUFBQTNuQyxFQUFBdStDLFVBQUEsR0FBQTVXLEdBQUEsRUFBQXRLLEVBQUE3cEMsR0FBQWs3QixhQUNBMHhCLEdBQUFwZ0QsRUFBQXUrQyxVQUFBLEdBQUEzVyxFQUFBNW5DLEVBQUF1K0MsVUFBQSxHQUFBM1csR0FBQSxFQUFBdkssRUFBQTdwQyxHQUFBaTdCLFlBS0E0eEIsRUFBQUYsRUFBQW5nRCxFQUFBaStDLGtCQUNBcUMsRUFBQUYsRUFBQXBnRCxFQUFBaytDLGtCQUlBYyxFQUFBVSxHQUFBTyxFQUFBSSxHQUNBcEIsRUFBQVUsR0FBQU8sRUFBQUksR0FFQXBCLEdBQ0FsbkMsSUFBQWluQyxFQUNBbnhCLEtBQUFreEIsRUFDQTdLLE9BQUFuMEMsRUFBQSs5QyxnQkFBQTVKLE9BQUE2TCxFQUNBNUwsT0FBQXAwQyxFQUFBKzlDLGdCQUFBM0osT0FBQTRMLEVBR0FoZ0QsR0FBQXU5QyxRQUFBLEVBRUF2OUMsRUFBQW8vQyxTQUFBQSxFQUNBcC9DLEVBQUFxL0MsVUFBQUEsRUFFQXIvQyxFQUFBZytDLGVBQUFrQixFQUVBbC9DLEVBQUErK0MsWUFDQWpELEVBQUE5N0MsRUFBQSsrQyxXQUVBLytDLEVBQUErK0MsVUFBQSxNQUdBLytDLEVBQUErK0MsVUFBQWpRLEVBQUEsV0FDQXpSLEVBQUEyTSxTQUFBb0wsYUFBQXAxQyxFQUFBczBDLFNBQUF0MEMsRUFBQWcrQyxtQkFLQWhCLEVBQUFqNkMsVUFBQXc5QyxXQUFBLFNBQUEvbkQsR0FFQSxHQUFBd0gsR0FBQXZNLEtBQ0Erc0QsRUFBQXYrQyxLQUFBQyxLQUFBLEdBQUE0TCxPQUFBc3BDLFVBQUFwM0MsRUFBQTRHLFVBQUEsR0FFQWc0QyxFQUFBNStDLEVBQUEyOUMsVUFDQThDLEVBQUF6Z0QsRUFBQTA5QyxVQUNBZ0QsRUFBQTFnRCxFQUFBNDlDLFNBa0JBLElBaEJBNTlDLEVBQUEyZ0QsVUFBQXhFLEVBQUEzakQsR0FFQXdILEVBQUFzd0MsV0FBQW5lLFlBQUEsaUNBRUFrTCxFQUFBaHFDLEdBQUFxSyxJQUFBLGFBRUFzQyxFQUFBKytDLFlBQ0FqRCxFQUFBOTdDLEVBQUErK0MsV0FFQS8rQyxFQUFBKytDLFVBQUEsTUFHQS8rQyxFQUFBMjlDLFdBQUEsRUFDQTM5QyxFQUFBMDlDLFdBQUEsRUFDQTE5QyxFQUFBNDlDLFdBQUEsRUFFQTU5QyxFQUFBdTlDLE9BQ0EsTUFBQXY5QyxHQUFBNGdELE1BQUFwb0QsRUFHQXdILEdBQUFvdkIsTUFBQSxJQUdBcHZCLEVBQUE2Z0QsVUFBQTdnRCxFQUFBdzlDLFVBQUFnRCxFQUFBLEdBQ0F4Z0QsRUFBQThnRCxVQUFBOWdELEVBQUF5OUMsVUFBQStDLEVBQUEsR0FFQXhnRCxFQUFBK2dELE9BQUE5K0MsS0FBQUMsSUFBQSxHQUFBbEMsRUFBQW92QixNQUFBbnRCLEtBQUFrekMsSUFBQSxJQUFBbjFDLEVBQUFvdkIsTUFBQSxFQUFBbnRCLEtBQUFnbEMsSUFBQWpuQyxFQUFBNmdELFdBQUE3Z0QsRUFBQW92QixRQUVBcXhCLEVBQ0F6Z0QsRUFBQWdoRCxhQUVBTixFQUNBMWdELEVBQUFpaEQsYUFHQWpoRCxFQUFBa2hELFdBQUF0QyxJQU1BNUIsRUFBQWo2QyxVQUFBbStDLFdBQUEsU0FBQXRDLEdBRUEsR0FBQTUrQyxHQUFBdk0sS0FDQW9ILEdBQUEsQ0FFQW1GLEdBQUFveUMsU0FBQWEsV0FBQSxFQUNBanpDLEVBQUE4OUMsY0FBQSxLQUdBLEtBQUFjLEdBQUEzOEMsS0FBQWdsQyxJQUFBam5DLEVBQUF5OUMsV0FBQSxJQUdBcGdCLEVBQUEyTSxTQUFBdmEsUUFBQXp2QixFQUFBb3lDLFNBQUE3bkMsUUFBQStvQyxRQUNBdDdCLElBQUFoWSxFQUFBNjlDLGVBQUE3bEMsSUFBQWhZLEVBQUF5OUMsVUFBQSxJQUFBejlDLEVBQUE4Z0QsVUFDQTc4QyxRQUFBLEdBQ0EsS0FFQXBKLEVBQUFtRixFQUFBb3lDLFNBQUF2RyxPQUFBLEVBQUEsTUFFQSxLQUFBK1MsR0FBQTUrQyxFQUFBdzlDLFVBQUEsSUFBQXg5QyxFQUFBb3lDLFNBQUF4QyxNQUFBcjdDLE9BQUEsRUFDQXNHLEVBQUFtRixFQUFBb3lDLFNBQUFKLFNBQUFoeUMsRUFBQStnRCxRQUVBLEtBQUFuQyxHQUFBNStDLEVBQUF3OUMsV0FBQSxJQUFBeDlDLEVBQUFveUMsU0FBQXhDLE1BQUFyN0MsT0FBQSxJQUNBc0csRUFBQW1GLEVBQUFveUMsU0FBQTFnQyxLQUFBMVIsRUFBQStnRCxVQUdBLElBQUFsbUQsR0FBQSxLQUFBK2pELEdBQUEsS0FBQUEsR0FDQTUrQyxFQUFBb3lDLFNBQUFiLE9BQUF2eEMsRUFBQW95QyxTQUFBN25DLFFBQUFqUSxNQUFBLEtBR0EwRixFQUFBc3dDLFdBQUFuZSxZQUFBLHdCQU9BNnFCLEVBQUFqNkMsVUFBQWkrQyxXQUFBLFdBRUEsR0FDQWhDLEdBQUFDLEVBQUFDLEVBREFsL0MsRUFBQXZNLElBR0F1TSxHQUFBZytDLGtCQUlBLElBQUFoK0MsRUFBQXdFLEtBQUE4bkMsVUFDQTBTLEVBQUFoL0MsRUFBQWcrQyxlQUFBbHdCLEtBQ0FteEIsRUFBQWovQyxFQUFBZytDLGVBQUFobUMsTUFLQWduQyxFQUFBaC9DLEVBQUFnK0MsZUFBQWx3QixLQUFBOXRCLEVBQUE2Z0QsVUFBQTdnRCxFQUFBb3ZCLE1BQ0E2dkIsRUFBQWovQyxFQUFBZytDLGVBQUFobUMsSUFBQWhZLEVBQUE4Z0QsVUFBQTlnRCxFQUFBb3ZCLE9BR0E4dkIsRUFBQWwvQyxFQUFBNC9DLGNBQUFaLEVBQUFDLEVBQUFqL0MsRUFBQSs5QyxnQkFBQW45QyxNQUFBWixFQUFBKzlDLGdCQUFBLzVDLFFBRUFrN0MsRUFBQXQrQyxNQUFBWixFQUFBKzlDLGdCQUFBbjlDLE1BQ0FzK0MsRUFBQWw3QyxPQUFBaEUsRUFBQSs5QyxnQkFBQS81QyxPQUVBcTVCLEVBQUEyTSxTQUFBdmEsUUFBQXp2QixFQUFBczBDLFNBQUE0SyxFQUFBLE9BSUFsQyxFQUFBajZDLFVBQUFrK0MsV0FBQSxXQUVBLEdBSUFqQyxHQUFBQyxFQUFBQyxFQUFBbGlDLEVBSkFoZCxFQUFBdk0sS0FFQThXLEVBQUF2SyxFQUFBb3lDLFNBQUE3bkMsUUFJQTYwQyxFQUFBcC9DLEVBQUFvL0MsU0FDQUMsRUFBQXIvQyxFQUFBcS9DLFNBRUFyL0MsR0FBQWcrQyxpQkFJQWdCLEVBQUFoL0MsRUFBQWcrQyxlQUFBbHdCLEtBQ0FteEIsRUFBQWovQyxFQUFBZytDLGVBQUFobUMsSUFFQWdGLEdBQ0FoRixJQUFBaW5DLEVBQ0FueEIsS0FBQWt4QixFQUNBcCtDLE1BQUF3K0MsRUFDQXA3QyxPQUFBcTdDLEVBQ0FsTCxPQUFBLEVBQ0FDLE9BQUEsR0FJQS9XLEVBQUEyTSxTQUFBb0wsYUFBQXAxQyxFQUFBczBDLFNBQUF0M0IsR0FFQW9pQyxFQUFBcC9DLEVBQUE2eUMsYUFBQXdNLEVBQUFyL0MsRUFBQXUwQyxhQUNBdjBDLEVBQUFveUMsU0FBQTBDLFdBQUEsS0FFQXNLLEVBQUE3MEMsRUFBQTNKLE9BQUF5K0MsRUFBQTkwQyxFQUFBdkcsT0FDQWhFLEVBQUFveUMsU0FBQTJCLGNBQUEvekMsRUFBQWkrQyxrQkFBQWorQyxFQUFBaytDLGtCQUFBLE1BSUFnQixFQUFBbC9DLEVBQUE0L0MsY0FBQVosRUFBQUMsRUFBQUcsRUFBQUMsR0FHQWhpQixFQUFBMk0sU0FBQW9MLGFBQUFwMUMsRUFBQWpDLFFBQUFzL0IsRUFBQTJNLFNBQUFxSixhQUFBcnpDLEVBQUFzMEMsV0FFQWpYLEVBQUEyTSxTQUFBdmEsUUFBQXp2QixFQUFBczBDLFNBQUE0SyxFQUFBLFFBS0FsQyxFQUFBajZDLFVBQUE2OUMsTUFBQSxTQUFBcG9ELEdBQ0EsR0FXQTJvRCxHQVhBbmhELEVBQUF2TSxLQUNBcTJDLEVBQUF6TSxFQUFBN2tDLEVBQUE0USxRQUVBZ3BDLEVBQUFweUMsRUFBQW95QyxTQUNBN25DLEVBQUE2bkMsRUFBQTduQyxRQUVBbzJDLEVBQUFub0QsR0FBQTJqRCxFQUFBM2pELElBQUF3SCxFQUFBczlDLFlBRUE4RCxFQUFBVCxFQUFBLEdBQUFBLEVBQUEsR0FBQWhaLEVBQUEzbkMsRUFBQW05QyxPQUFBbGlCLFNBQUFuTixLQUFBLEVBQ0F1ekIsRUFBQVYsRUFBQSxHQUFBQSxFQUFBLEdBQUEvWSxFQUFBNW5DLEVBQUFtOUMsT0FBQWxpQixTQUFBampCLElBQUEsRUFJQThJLEVBQUEsU0FBQTlZLEdBRUEsR0FBQXM1QyxHQUFBLzJDLEVBQUEvRixLQUFBd0QsRUFNQSxJQUpBcTFCLEVBQUFsb0MsV0FBQW1zRCxLQUNBQSxFQUFBQSxFQUFBanFELE1BQUErNkMsR0FBQTduQyxFQUFBL1IsS0FHQThvRCxFQUlBLE9BQUFBLEdBRUEsSUFBQSxRQUVBbFAsRUFBQXZHLE1BQUE3ckMsRUFBQXVoRCxXQUVBLE1BRUEsS0FBQSxpQkFFQW5QLEVBQUErRyxnQkFBQSxFQUVBLE1BRUEsS0FBQSxPQUVBL0csRUFBQTFnQyxNQUVBLE1BRUEsS0FBQSxjQUVBMGdDLEVBQUF4QyxNQUFBcjdDLE9BQUEsRUFDQTY5QyxFQUFBMWdDLE9BR0EwZ0MsRUFBQXZHLE1BQUE3ckMsRUFBQXVoRCxXQUdBLE1BRUEsS0FBQSxPQUVBLFNBQUFoM0MsRUFBQS9WLE9BQUErVixFQUFBb3BDLFVBQUFwcEMsRUFBQW9zQyxVQUVBdkUsRUFBQXNELFNBQ0F0RCxFQUFBMEMsYUFFQTFDLEVBQUFILGVBQ0FHLEVBQUEyQixjQUFBcU4sRUFBQUMsR0FFQWpQLEVBQUF4QyxNQUFBcjdDLE9BQUEsR0FDQTY5QyxFQUFBdkcsTUFBQTdyQyxFQUFBdWhELGNBVUEsTUFBQS9vRCxFQUFBd3VCLGVBQUEsR0FBQXh1QixFQUFBd3VCLGNBQUEzSyxRQUtBKzFCLEVBQUFhLFdBS0FtTyxFQUFBdFgsRUFBQSxHQUFBbUgsWUFBQW5ILEVBQUE3TyxTQUFBbk4sTUFBQSxDQUtBLEdBQUFnYyxFQUFBanNCLEdBQUEsb0VBQ0FzakMsRUFBQSxjQUVBLElBQUFyWCxFQUFBanNCLEdBQUEsbUJBQ0FzakMsRUFBQSxZQUVBLENBQUEsSUFBQS9PLEVBQUE3bkMsUUFBQStwQyxXQUFBbEMsRUFBQTduQyxRQUFBK3BDLFNBQUEvNEIsSUFBQS9pQixFQUFBNFEsUUFBQTdVLE9BSUEsTUFIQTRzRCxHQUFBLFVBT0EsR0FBQW5oRCxFQUFBd2hELE9BQUEsQ0FPQSxHQUpBN3dCLGFBQUEzd0IsRUFBQXdoRCxRQUNBeGhELEVBQUF3aEQsT0FBQSxLQUdBdi9DLEtBQUFnbEMsSUFBQW1hLEVBQUFwaEQsRUFBQW9oRCxNQUFBLElBQUFuL0MsS0FBQWdsQyxJQUFBb2EsRUFBQXJoRCxFQUFBcWhELE1BQUEsSUFBQWpQLEVBQUFhLFVBQ0EsTUFBQXgvQyxLQUlBcXRCLEdBQUEsV0FBQXFnQyxPQU1BbmhELEdBQUFvaEQsS0FBQUEsRUFDQXBoRCxFQUFBcWhELEtBQUFBLEVBRUE5MkMsRUFBQS9GLEtBQUEsV0FBQTI4QyxJQUFBNTJDLEVBQUEvRixLQUFBLFdBQUEyOEMsS0FBQTUyQyxFQUFBL0YsS0FBQSxRQUFBMjhDLEdBQ0FuaEQsRUFBQXdoRCxPQUFBbitDLFdBQUEsV0FDQXJELEVBQUF3aEQsT0FBQSxLQUVBMWdDLEVBQUEsUUFBQXFnQyxJQUVBLEtBR0FyZ0MsRUFBQSxRQUFBcWdDLEVBS0EsT0FBQTF0RCxRQUdBNHBDLEVBQUFocUMsR0FBQThKLEdBQUEsZ0JBQUEsU0FBQTNFLEVBQUE0NUMsR0FDQUEsSUFBQUEsRUFBQTRLLFlBQ0E1SyxFQUFBNEssVUFBQSxHQUFBQSxHQUFBNUssTUFJQS9VLEVBQUFocUMsR0FBQThKLEdBQUEsaUJBQUEsU0FBQTNFLEVBQUE0NUMsR0FDQUEsR0FBQUEsRUFBQTRLLFdBQ0E1SyxFQUFBNEssVUFBQTFELGFBS0E5bEQsT0FBQUgsU0FBQUcsT0FBQWlCLFFBQUFBLFFBV0EsU0FBQXBCLEVBQUFncUMsR0FDQSxZQUVBQSxHQUFBdCtCLFFBQUEsRUFBQXMrQixFQUFBMk0sU0FBQXpNLFVBQ0FvTyxRQUNBYSxVQUNBLGlOQU9BQSxXQUNBcE0sV0FBQSxFQUNBaFIsTUFBQSxNQUlBLElBQUF3bEIsR0FBQSxTQUFBeEMsR0FDQTMrQyxLQUFBMitDLFNBQUFBLEVBQ0EzK0MsS0FBQXVQLE9BR0FxNkIsR0FBQXQrQixPQUFBNjFDLEVBQUE3eEMsV0FDQTRFLE1BQUEsS0FDQWt0QyxVQUFBLEVBQ0E0TSxRQUFBLEtBRUF6K0MsS0FBQSxXQUNBLEdBQUFoRCxHQUFBdk0sSUFFQXVNLEdBQUF5aEQsUUFBQXpoRCxFQUFBb3lDLFNBQUFqQixNQUFBNUcsUUFBQS8xQixLQUFBLHdCQUFBclgsR0FBQSxRQUFBLFdBQ0E2QyxFQUFBeUUsWUFHQXpFLEVBQUFveUMsU0FBQXhDLE1BQUFyN0MsT0FBQSxJQUFBeUwsRUFBQW95QyxTQUFBeEMsTUFBQTV2QyxFQUFBb3lDLFNBQUF2QyxXQUFBcnJDLEtBQUFnb0MsWUFDQXhzQyxFQUFBeWhELFFBQUFoK0IsUUFJQS9xQixJQUFBLFNBQUFzZ0QsR0FDQSxHQUFBaDVDLEdBQUF2TSxJQUdBdU0sR0FBQW95QyxVQUFBcHlDLEVBQUFveUMsU0FBQTduQyxXQUFBLElBQUF5dUMsR0FBQWg1QyxFQUFBb3lDLFNBQUE3bkMsUUFBQS9GLEtBQUEwbEMsTUFBQWxxQyxFQUFBb3lDLFNBQUF2QyxVQUFBN3ZDLEVBQUFveUMsU0FBQXhDLE1BQUFyN0MsT0FBQSxHQUNBeUwsRUFBQTJILE1BQUF0RSxXQUFBLFdBQ0FyRCxFQUFBNjBDLFVBQ0E3MEMsRUFBQW95QyxTQUFBYixRQUFBdnhDLEVBQUFveUMsU0FBQXZDLFVBQUEsR0FBQTd2QyxFQUFBb3lDLFNBQUF4QyxNQUFBcjdDLFNBR0F5TCxFQUFBb3lDLFNBQUE3bkMsUUFBQS9GLEtBQUFnb0MsVUFBQXBkLFFBR0FwdkIsRUFBQXFILE9BQ0FySCxFQUFBb3lDLFNBQUFHLG1CQUFBLEVBQ0F2eUMsRUFBQW95QyxTQUFBSyxpQkFJQWlQLE1BQUEsV0FDQSxHQUFBMWhELEdBQUF2TSxJQUVBazlCLGNBQUEzd0IsRUFBQTJILE9BRUEzSCxFQUFBMkgsTUFBQSxNQUdBaE8sTUFBQSxXQUNBLEdBQUFxRyxHQUFBdk0sS0FDQThXLEVBQUF2SyxFQUFBb3lDLFNBQUE3bkMsT0FFQUEsS0FDQXZLLEVBQUE2MEMsVUFBQSxFQUVBNzBDLEVBQUF5aEQsUUFDQWhvQyxLQUFBLFFBQUFsUCxFQUFBL0YsS0FBQW9wQyxLQUFBcmpDLEVBQUEvRixLQUFBaVgsTUFBQTB5QixXQUNBaGMsWUFBQSx5QkFDQUwsU0FBQSwwQkFFQTl4QixFQUFBdEgsS0FBQSxLQUlBMk8sS0FBQSxXQUNBLEdBQUFySCxHQUFBdk0sS0FDQThXLEVBQUF2SyxFQUFBb3lDLFNBQUE3bkMsT0FFQXZLLEdBQUEwaEQsUUFFQTFoRCxFQUFBeWhELFFBQ0Fob0MsS0FBQSxRQUFBbFAsRUFBQS9GLEtBQUFvcEMsS0FBQXJqQyxFQUFBL0YsS0FBQWlYLE1BQUF5eUIsWUFDQS9iLFlBQUEsMEJBQ0FMLFNBQUEseUJBRUE5eEIsRUFBQTYwQyxVQUFBLEdBR0Fwd0MsT0FBQSxXQUNBLEdBQUF6RSxHQUFBdk0sSUFFQXVNLEdBQUE2MEMsU0FDQTcwQyxFQUFBcUgsT0FHQXJILEVBQUFyRyxXQU1BMGpDLEVBQUFocUMsR0FBQThKLElBQ0F3a0QsWUFBQSxTQUFBbnBELEVBQUE0NUMsR0FDQUEsSUFBQUEsRUFBQXdDLFlBQ0F4QyxFQUFBd0MsVUFBQSxHQUFBQSxHQUFBeEMsS0FJQXdQLGdCQUFBLFNBQUFwcEQsRUFBQTQ1QyxFQUFBN25DLEVBQUEwbEMsR0FDQSxHQUFBMkUsR0FBQXhDLEdBQUFBLEVBQUF3QyxTQUVBM0UsR0FFQTJFLEdBQUFycUMsRUFBQS9GLEtBQUFnb0MsVUFBQXBNLFdBQ0F3VSxFQUFBajdDLFFBR0FpN0MsR0FBQUEsRUFBQUMsVUFDQUQsRUFBQThNLFNBSUFHLGVBQUEsU0FBQXJwRCxFQUFBNDVDLEVBQUE3bkMsR0FDQSxHQUFBcXFDLEdBQUF4QyxHQUFBQSxFQUFBd0MsU0FFQUEsSUFBQUEsRUFBQUMsVUFDQUQsRUFBQWw4QyxPQUlBb3BELGtCQUFBLFNBQUF0cEQsRUFBQTQ1QyxFQUFBN25DLEVBQUF3M0MsRUFBQXpQLEdBQ0EsR0FBQXNDLEdBQUF4QyxHQUFBQSxFQUFBd0MsV0FHQUEsSUFBQXJxQyxFQUFBL0YsS0FBQWdvQyxXQUFBLEtBQUE4RixHQUFBLEtBQUFBLEdBQUFqVixFQUFBaHFDLEVBQUE0SixlQUFBNGdCLEdBQUEsb0JBQ0Fra0MsRUFBQXg3QixpQkFFQXF1QixFQUFBbndDLFdBSUF1OUMsaUNBQUEsU0FBQXhwRCxFQUFBNDVDLEdBQ0EsR0FBQXdDLEdBQUF4QyxHQUFBQSxFQUFBd0MsU0FFQUEsSUFDQUEsRUFBQXZ0QyxVQU1BZzJCLEVBQUFocUMsR0FBQThKLEdBQUEsbUJBQUEsV0FDQSxHQUFBaTFDLEdBQUEvVSxFQUFBMk0sU0FBQTJHLGNBQ0FpRSxFQUFBeEMsR0FBQUEsRUFBQXdDLFNBRUFBLElBQUFBLEVBQUFDLFdBQ0F4aEQsRUFBQThQLE9BQ0F5eEMsRUFBQThNLFFBR0E5TSxFQUFBbDhDLFVBS0FyRixTQUFBRyxPQUFBaUIsUUFBQUEsUUFRQSxTQUFBcEIsRUFBQWdxQyxHQUNBLFlBR0EsSUFBQS8vQixHQUFBLFdBRUEsR0ErQ0FpRixHQUVBbE4sRUFBQXVHLEVBakRBcW1ELElBRUEsb0JBQ0EsaUJBQ0Esb0JBQ0Esb0JBQ0EsbUJBQ0Esb0JBSUEsMEJBQ0EsdUJBQ0EsMEJBQ0EsMEJBQ0EseUJBQ0EsMEJBS0EsMEJBQ0EseUJBQ0EsaUNBQ0EseUJBQ0EseUJBQ0EsMEJBSUEsdUJBQ0Esc0JBQ0EsdUJBQ0EsdUJBQ0Esc0JBQ0EsdUJBR0Esc0JBQ0EsbUJBQ0Esc0JBQ0Esc0JBQ0EscUJBQ0Esc0JBS0FwbkQsSUFHQSxLQUFBeEYsRUFBQSxFQUFBQSxFQUFBNHNELEVBQUExdEQsT0FBQWMsSUFHQSxJQUZBa04sRUFBQTAvQyxFQUFBNXNELEtBRUFrTixFQUFBLElBQUFsUCxHQUFBLENBQ0EsSUFBQXVJLEVBQUEsRUFBQUEsRUFBQTJHLEVBQUFoTyxPQUFBcUgsSUFDQWYsRUFBQW9uRCxFQUFBLEdBQUFybUQsSUFBQTJHLEVBQUEzRyxFQUdBLE9BQUFmLEdBSUEsT0FBQSxJQUlBLEtBQUF5QyxFQU1BLFlBSkErL0IsR0FBQUEsRUFBQTJNLFdBQ0EzTSxFQUFBMk0sU0FBQXpNLFNBQUFvTyxPQUFBUyxZQUFBLEdBTUEsSUFBQThWLElBRUFDLFFBQUEsU0FBQXZ0RCxHQUVBQSxFQUFBQSxHQUFBdkIsRUFBQXVrQixnQkFFQWhqQixFQUFBMEksRUFBQThrRCxtQkFBQXh0RCxFQUFBeXRELHVCQUdBQyxLQUFBLFdBRUFqdkQsRUFBQWlLLEVBQUFpbEQsbUJBR0E5OUMsT0FBQSxTQUFBN1AsR0FFQUEsRUFBQUEsR0FBQXZCLEVBQUF1a0IsZ0JBRUFua0IsS0FBQSt1RCxlQUNBL3VELEtBQUE2dUQsT0FHQTd1RCxLQUFBMHVELFFBQUF2dEQsSUFJQTR0RCxhQUFBLFdBRUEsTUFBQUMsU0FBQXB2RCxFQUFBaUssRUFBQW9sRCxxQkFHQXhtQyxRQUFBLFdBRUEsTUFBQXVtQyxTQUFBcHZELEVBQUFpSyxFQUFBcWxELHFCQUtBdGxCLEdBQUF0K0IsUUFBQSxFQUFBcytCLEVBQUEyTSxTQUFBek0sVUFDQW9PLFFBQ0FTLFdBQ0EsNE1BTUFBLFlBQ0FoTSxXQUFBLEtBSUEvQyxFQUFBaHFDLEdBQUE4SixJQUNBd2tELFlBQUEsU0FBQW5wRCxFQUFBNDVDLEdBQ0EsR0FBQTlCLEVBRUE4QixJQUFBQSxFQUFBeEMsTUFBQXdDLEVBQUF2QyxXQUFBcnJDLEtBQUE0bkMsWUFDQWtFLEVBQUE4QixFQUFBakIsTUFBQTNsQixVQUVBOGtCLEVBQUFuekMsR0FBQSxzQkFBQSw2QkFBQSxTQUFBM0UsR0FFQUEsRUFBQWd1QixrQkFDQWh1QixFQUFBK3RCLGlCQUVBMjdCLEVBQUF6OUMsT0FBQTZyQyxFQUFBLE1BSUE4QixFQUFBNXRDLEtBQUE0bkMsYUFBQSxJQUFBZ0csRUFBQTV0QyxLQUFBNG5DLFdBQUFoTSxXQUNBOGhCLEVBQUFDLFFBQUE3UixFQUFBLElBSUE4QixFQUFBOFAsV0FBQUEsR0FFQTlQLEdBQ0FBLEVBQUFqQixNQUFBNUcsUUFBQS8xQixLQUFBLDhCQUFBaVAsUUFLQXErQixrQkFBQSxTQUFBdHBELEVBQUE0NUMsRUFBQTduQyxFQUFBdzNDLEVBQUF6UCxHQUdBRixHQUFBQSxFQUFBOFAsWUFBQSxLQUFBNVAsSUFDQXlQLEVBQUF4N0IsaUJBRUE2ckIsRUFBQThQLFdBQUF6OUMsT0FBQTJ0QyxFQUFBakIsTUFBQTNsQixVQUFBLE1BS0FvM0IsaUJBQUEsU0FBQXhRLEdBQ0FBLEdBQUFBLEVBQUE4UCxZQUNBQSxFQUFBSSxVQUtBamxCLEVBQUFocUMsR0FBQThKLEdBQUFHLEVBQUF1bEQsaUJBQUEsV0FDQSxHQUFBTCxHQUFBTixFQUFBTSxlQUNBcFEsRUFBQS9VLEVBQUEyTSxTQUFBMkc7aURBRUF5QixLQUdBQSxFQUFBN25DLFNBQUEsVUFBQTZuQyxFQUFBN25DLFFBQUEvVixNQUFBNDlDLEVBQUFjLGNBQ0FkLEVBQUE3bkMsUUFBQStwQyxTQUFBbjdDLElBQUEsYUFBQSxRQUVBaTVDLEVBQUFjLGFBQUEsRUFFQWQsRUFBQUYsUUFBQSxHQUFBLEVBQUEsSUFHQUUsRUFBQWhyQixRQUFBLHFCQUFBbzdCLEdBRUFwUSxFQUFBakIsTUFBQTNsQixVQUFBNEcsWUFBQSx5QkFBQW93QixPQUtBbnZELFNBQUFHLE9BQUFpQixRQUFBQSxRQVFBLFNBQUFwQixFQUFBZ3FDLEdBQ0EsWUFHQUEsR0FBQTJNLFNBQUF6TSxTQUFBRixFQUFBdCtCLFFBQUEsR0FDQTRzQyxRQUNBYyxPQUNBLGdXQU1BQSxRQUNBck0sV0FBQSxFQUNBc00sYUFBQSxFQUNBVixTQUFBLHNCQUNBVyxLQUFBLE1BRUF0UCxFQUFBMk0sU0FBQXpNLFNBRUEsSUFBQXVsQixHQUFBLFNBQUExUSxHQUNBMytDLEtBQUF1UCxLQUFBb3ZDLEdBR0EvVSxHQUFBdCtCLE9BQUErakQsRUFBQS8vQyxXQUVBMCtDLFFBQUEsS0FDQXNCLE1BQUEsS0FDQUMsTUFBQSxLQUNBbkssV0FBQSxFQUNBaEUsVUFBQSxFQUVBN3hDLEtBQUEsU0FBQW92QyxHQUNBLEdBQUFweUMsR0FBQXZNLElBRUF1TSxHQUFBb3lDLFNBQUFBLEVBRUFBLEVBQUE2USxPQUFBampELENBR0EsSUFBQVAsR0FBQTJ5QyxFQUFBeEMsTUFBQSxHQUNBbGlDLEVBQUEwa0MsRUFBQXhDLE1BQUEsRUFFQTV2QyxHQUFBd0UsS0FBQTR0QyxFQUFBeEMsTUFBQXdDLEVBQUF2QyxXQUFBcnJDLEtBQUFpb0MsT0FFQXpzQyxFQUFBeWhELFFBQUFyUCxFQUFBakIsTUFBQTVHLFFBQUEvMUIsS0FBQSwwQkFFQXhVLEVBQUF3RSxNQUFBL0UsR0FBQWlPLElBQ0EsU0FBQWpPLEVBQUFqTCxNQUFBaUwsRUFBQStFLEtBQUFreUMsT0FBQWozQyxFQUFBK0UsS0FBQXF0QyxVQUNBLFNBQUFua0MsRUFBQWxaLE1BQUFrWixFQUFBbEosS0FBQWt5QyxPQUFBaHBDLEVBQUFsSixLQUFBcXRDLFNBR0E3eEMsRUFBQXloRCxRQUFBcm5ELE9BQUErQyxHQUFBLFFBQUEsV0FDQTZDLEVBQUF5RSxXQUdBekUsRUFBQTYwQyxVQUFBLEdBR0E3MEMsRUFBQXloRCxRQUFBaCtCLFFBSUF5L0IsT0FBQSxXQUNBLEdBR0EzdEMsR0FDQWxYLEVBSkEyQixFQUFBdk0sS0FDQTIrQyxFQUFBcHlDLEVBQUFveUMsU0FDQXBHLEVBQUFoc0MsRUFBQXdFLEtBQUF3bkMsUUFJQWhzQyxHQUFBK2lELE1BQUExbEIsRUFBQSwrQ0FBQXI5QixFQUFBd0UsS0FBQW1vQyxLQUFBLFlBQUE3aEIsU0FBQXNuQixFQUFBakIsTUFBQTNsQixVQUFBaFgsS0FBQXczQixHQUFBdHRCLFVBQUEvb0IsT0FBQXEyQyxJQUdBejJCLEVBQUEsT0FFQThuQixFQUFBbm5DLEtBQUFrOEMsRUFBQXhDLE1BQUEsU0FBQXY2QyxFQUFBZzhDLEdBQ0FoekMsRUFBQWd6QyxFQUFBN3NDLEtBQUFreUMsUUFBQXJGLEVBQUE3c0MsS0FBQXF0QyxPQUFBUixFQUFBN3NDLEtBQUFxdEMsT0FBQXA0QixLQUFBLE9BQUEsTUFFQXBiLEdBQUEsVUFBQWd6QyxFQUFBNzhDLE9BQ0E2SixFQUFBZ3pDLEVBQUFoekMsS0FHQUEsR0FBQUEsRUFBQTlKLFNBQ0FnaEIsR0FBQSxtQkFBQWxnQixFQUFBLGtFQUFBZ0osRUFBQSxlQUlBa1gsR0FBQSxRQUVBdlYsRUFBQWdqRCxNQUFBM2xCLEVBQUE5bkIsR0FBQXVWLFNBQUE5cUIsRUFBQStpRCxPQUFBNWxELEdBQUEsUUFBQSxLQUFBLFdBQ0FpMUMsRUFBQWIsT0FBQWxVLEVBQUE1cEMsTUFBQXNFLEtBQUEsWUFHQWlJLEVBQUFnakQsTUFBQXh1QyxLQUFBLE9BQUFpUCxPQUFBbG1CLElBQUEsT0FBQSxXQUNBLEdBR0FxRCxHQUNBb0QsRUFDQW0vQyxFQUNBQyxFQU5BQyxFQUFBaG1CLEVBQUE1cEMsTUFBQXluQixTQUFBaVgsWUFBQSwyQkFDQW14QixFQUFBRCxFQUFBemUsYUFDQTJlLEVBQUFGLEVBQUFyZixhQU1BcGpDLEdBQUFuTixLQUFBdWpELGNBQUF2akQsS0FBQW1OLE1BQ0FvRCxFQUFBdlEsS0FBQXdqRCxlQUFBeGpELEtBQUF1USxPQUdBbS9DLEVBQUF2aUQsRUFBQTBpRCxFQUNBRixFQUFBcC9DLEVBQUF1L0MsRUFFQUosR0FBQSxHQUFBQyxHQUFBLElBQ0FELEVBQUFDLEdBQ0F4aUQsR0FBQXdpRCxFQUNBcC9DLEVBQUF1L0MsSUFHQTNpRCxFQUFBMGlELEVBQ0F0L0MsR0FBQW0vQyxJQUlBOWxCLEVBQUE1cEMsTUFBQTBGLEtBQ0F5SCxNQUFBcUIsS0FBQXkvQixNQUFBOWdDLEdBQ0FvRCxPQUFBL0IsS0FBQXkvQixNQUFBMTlCLEdBQ0F3L0MsYUFBQXgvQyxFQUFBdS9DLEVBQUF0aEQsS0FBQXkvQixNQUFBLEdBQUE2aEIsRUFBQSxHQUFBdi9DLEdBQUEvQixLQUFBeS9CLE1BQUEsR0FBQTZoQixFQUFBLEdBQUF2L0MsR0FDQXkvQyxjQUFBeGhELEtBQUF5L0IsTUFBQSxHQUFBNGhCLEVBQUEsR0FBQTFpRCxLQUNBeEcsU0FHQWxFLEtBQUEsV0FDQXpDLEtBQUE0SyxJQUFBZy9CLEVBQUE1cEMsTUFBQXNFLEtBQUEsU0FHQSxNQUFBaUksRUFBQXdFLEtBQUFtb0MsTUFDQTNzQyxFQUFBZ2pELE1BQUFwaUQsTUFBQSt3QixTQUFBM3hCLEVBQUEraUQsTUFBQTVwRCxJQUFBLGtCQUFBaTVDLEVBQUF4QyxNQUFBcjdDLE9BQUF5TCxFQUFBZ2pELE1BQUExa0MsV0FBQXJlLEdBQUEsR0FBQTJrQyxZQUFBLEdBQUEsT0FJQTlvQixNQUFBLFNBQUFqVixHQUNBLEdBRUE2dkMsR0FDQTBCLEVBSEFwNEMsRUFBQXZNLEtBQ0F1dkQsRUFBQWhqRCxFQUFBZ2pELEtBSUFoakQsR0FBQW95QyxTQUFBN25DLFVBQ0Ftc0MsRUFBQXNNLEVBQUExa0MsV0FDQTZULFlBQUEsMEJBQ0F4OEIsT0FBQSxnQkFBQXFLLEVBQUFveUMsU0FBQTduQyxRQUFBalEsTUFBQSxNQUNBdzNCLFNBQUEsMEJBRUFzbUIsRUFBQTFCLEVBQUFucUIsV0FHQSxNQUFBdnNCLEVBQUF3RSxLQUFBbW9DLE9BQUF5TCxFQUFBcGdDLElBQUEsR0FBQW9nQyxFQUFBcGdDLElBQUFnckMsRUFBQWgvQyxTQUFBMHlDLEVBQUExUyxlQUNBZ2YsRUFBQTM3QyxPQUFBb29CLFNBQUFoQixVQUFBdTBCLEVBQUF2MEIsWUFBQTJwQixFQUFBcGdDLEtBQUFuUixHQUVBLE1BQUE3RyxFQUFBd0UsS0FBQW1vQyxPQUNBeUwsRUFBQXRxQixLQUFBazFCLEVBQUE5bkMsU0FBQXdULGNBQ0EwcEIsRUFBQXRxQixLQUFBazFCLEVBQUE5bkMsU0FBQXdULGNBQUFzMEIsRUFBQTluQyxTQUFBdGEsUUFBQTgxQyxFQUFBOVIsZ0JBR0FvZSxFQUFBOW5DLFNBQUE3VCxPQUFBb29CLFNBQUFmLFdBQUEwcEIsRUFBQXRxQixNQUFBam5CLEtBS0FxckMsT0FBQSxXQUNBeitDLEtBQUEyK0MsU0FBQWpCLE1BQUEzbEIsVUFBQTRHLFlBQUEsdUJBQUEzK0IsS0FBQW9sRCxXQUVBcGxELEtBQUFvbEQsV0FDQXBsRCxLQUFBc3ZELE9BQ0F0dkQsS0FBQXl2RCxTQUdBenZELEtBQUEyK0MsU0FBQWhyQixRQUFBLGdCQUVBM3pCLEtBQUFxb0IsTUFBQSxJQUVBcm9CLEtBQUFzdkQsT0FDQXR2RCxLQUFBMitDLFNBQUFockIsUUFBQSxnQkFJQTN6QixLQUFBMitDLFNBQUFGLFVBR0F6dUIsS0FBQSxXQUNBaHdCLEtBQUFvbEQsV0FBQSxFQUNBcGxELEtBQUF5K0MsVUFHQTkzQyxLQUFBLFdBQ0EzRyxLQUFBb2xELFdBQUEsRUFDQXBsRCxLQUFBeStDLFVBR0F6dEMsT0FBQSxXQUNBaFIsS0FBQW9sRCxXQUFBcGxELEtBQUFvbEQsVUFDQXBsRCxLQUFBeStDLFlBSUE3VSxFQUFBaHFDLEdBQUE4SixJQUVBd2tELFlBQUEsU0FBQW5wRCxFQUFBNDVDLEdBQ0EsR0FBQTZRLEVBRUE3USxLQUFBQSxFQUFBNlEsU0FDQUEsRUFBQSxHQUFBSCxHQUFBMVEsR0FFQTZRLEVBQUFwTyxXQUFBLElBQUFvTyxFQUFBeitDLEtBQUE0N0IsV0FDQTZpQixFQUFBN29ELFNBS0F3bkQsZ0JBQUEsU0FBQXBwRCxFQUFBNDVDLEVBQUFmLEVBQUFwQixHQUNBLEdBQUFnVCxHQUFBN1EsR0FBQUEsRUFBQTZRLE1BRUFBLElBQUFBLEVBQUFwSyxXQUNBb0ssRUFBQW5uQyxNQUFBbTBCLEVBQUEsRUFBQSxNQUlBNlIsa0JBQUEsU0FBQXRwRCxFQUFBNDVDLEVBQUE3bkMsRUFBQXczQyxFQUFBelAsR0FDQSxHQUFBMlEsR0FBQTdRLEdBQUFBLEVBQUE2USxNQUdBQSxJQUFBQSxFQUFBcE8sVUFBQSxLQUFBdkMsSUFDQXlQLEVBQUF4N0IsaUJBRUEwOEIsRUFBQXgrQyxXQUlBbStDLGlCQUFBLFNBQUFwcUQsRUFBQTQ1QyxHQUNBLEdBQUE2USxHQUFBN1EsR0FBQUEsRUFBQTZRLE1BRUFBLElBQUFBLEVBQUFwSyxZQUFBLElBQUFvSyxFQUFBeitDLEtBQUFrb0MsYUFDQXVXLEVBQUFGLE1BQUF0L0IsV0FNQXB3QixTQUFBRyxPQUFBaUIsUUFRQSxTQUFBcEIsRUFBQWdxQyxHQUNBLFlBa0NBLFNBQUFxbUIsR0FBQXAyQyxHQUNBLEdBQUFxMkMsSUFDQUMsSUFBQSxRQUNBQyxJQUFBLE9BQ0ExcEMsSUFBQSxPQUNBMnBDLElBQUEsU0FDQUMsSUFBQSxRQUNBQyxJQUFBLFNBQ0FDLElBQUEsU0FDQUMsSUFBQSxTQUdBLE9BQUE3c0MsUUFBQS9KLEdBQUFqVixRQUFBLGVBQUEsU0FBQW9SLEdBQ0EsTUFBQWs2QyxHQUFBbDZDLEtBN0NBNHpCLEVBQUF0K0IsUUFBQSxFQUFBcytCLEVBQUEyTSxTQUFBek0sVUFDQW9PLFFBQ0F3WSxNQUNBLGlPQU1BQSxPQUNBclosSUFDQSw2NURBc0NBek4sRUFBQWhxQyxHQUFBOEosR0FBQSxRQUFBLHdCQUFBLFdBQ0EsR0FDQSszQixHQUNBNFYsRUFGQXNaLEVBQUEvbUIsRUFBQTJNLFNBQUEyRyxhQUlBeVQsS0FDQWx2QixHQUFBLElBQUFrdkIsRUFBQTc1QyxRQUFBL0YsS0FBQW1YLEtBQUF5b0MsRUFBQTc1QyxRQUFBbE0sSUFBQTdLLE9BQUFvb0IsU0FDQWt2QixFQUFBc1osRUFBQTc1QyxRQUFBL0YsS0FBQTIvQyxNQUFBclosSUFDQXp5QyxRQUFBLGVBQUE4N0IsbUJBQUFlLElBQ0E3OEIsUUFBQSxtQkFBQXFyRCxFQUFBeHVCLElBQ0E3OEIsUUFBQSxpQkFBQStyRCxFQUFBbkwsU0FBQTlrQixtQkFBQWl3QixFQUFBbkwsU0FBQWpsRCxRQUFBLElBRUFxcEMsRUFBQTJNLFNBQUE1USxNQUNBLzZCLElBQUErbEQsRUFBQWxULFVBQUFrVCxFQUFBdFosR0FDQXQyQyxLQUFBLE9BQ0FnUSxNQUNBeW1DLGdCQUFBLE9BQ0FDLGtCQUFBLFdBT0E3M0MsU0FBQUcsT0FBQWlCLFFBQUFBLFFBUUEsU0FBQXBCLEVBQUFHLEVBQUE2cEMsR0FDQSxZQW9DQSxTQUFBZ25CLEtBQ0EsR0FBQTFvQyxHQUFBbm9CLEVBQUFvb0IsU0FBQUQsS0FBQWdoQyxPQUFBLEdBQ0FsSCxFQUFBOTVCLEVBQUEvUSxNQUFBLEtBQ0F0USxFQUFBbTdDLEVBQUFsaEQsT0FBQSxHQUFBLFdBQUFtQixLQUFBKy9DLEVBQUFBLEVBQUFsaEQsT0FBQSxJQUFBbzlCLFNBQUE4akIsRUFBQS9nQyxLQUFBLEdBQUEsS0FBQSxFQUFBLEVBQ0E0dkMsRUFBQTdPLEVBQUE1dEMsS0FBQSxJQU9BLE9BSkF2TixHQUFBLElBQ0FBLEVBQUEsSUFJQXFoQixLQUFBQSxFQUNBcmhCLE1BQUFBLEVBQ0FncUQsUUFBQUEsR0FLQSxRQUFBQyxHQUFBcnZCLEdBQ0EsR0FBQXVhLEVBRUEsTUFBQXZhLEVBQUFvdkIsVUFHQTdVLEVBQUFwUyxFQUFBLG1CQUFBQSxFQUFBM2YsZUFBQXdYLEVBQUFvdkIsU0FBQSxNQUFBcmtELEdBQUFpMUIsRUFBQTU2QixNQUFBLEdBRUFtMUMsRUFBQWw3QyxTQUVBazdDLEVBQUFwUyxFQUFBLElBQUFBLEVBQUEzZixlQUFBd1gsRUFBQW92QixXQUdBN1UsRUFBQWw3QyxTQUNBaXdELEdBQUEsRUFFQS9VLEVBQUFyb0IsUUFBQSxXQU9BLFFBQUFxOUIsR0FBQXJTLEdBQ0EsR0FBQTV0QyxFQUVBLFNBQUE0dEMsSUFJQTV0QyxFQUFBNHRDLEVBQUE3bkMsUUFBQTZuQyxFQUFBN25DLFFBQUEvRixLQUFBNHRDLEVBQUE1dEMsS0FFQUEsRUFBQW1YLE9BQUFuWCxFQUFBbXRDLE1BQUFudEMsRUFBQW10QyxNQUFBNTVDLEtBQUEsWUFBQSxLQXBGQXNsQyxFQUFBM2YsaUJBQ0EyZixFQUFBM2YsZUFBQSxTQUFBOUQsR0FpQkEsT0FBQUEsRUFBQSxJQUFBdmhCLFFBaEJBLCtDQUNBLFNBQUFrZixFQUFBQyxHQUNBLE1BQUFBLEdBRUEsT0FBQUQsRUFDQSxJQUlBQSxFQUFBaGdCLE1BQUEsR0FBQSxHQUFBLEtBQUFnZ0IsRUFBQUUsV0FBQUYsRUFBQWhqQixPQUFBLEdBQUE4VyxTQUFBLElBQUEsSUFJQSxLQUFBa00sS0FRQSxJQUFBaXRDLElBQUEsRUFJQUUsRUFBQSxLQUdBQyxFQUFBLElBMERBdG5CLEdBQUEsWUFHQSxJQUFBQSxFQUFBMk0sU0FBQXpNLFNBQUE1aEIsT0FLQTBoQixFQUFBaHFDLEdBQUE4SixJQUNBd2tELFlBQUEsU0FBQW5wRCxFQUFBNDVDLEdBQ0EsR0FBQWxkLEdBQUFvdkIsR0FFQSxJQUFBbFMsRUFBQXhDLE1BQUF3QyxFQUFBdkMsV0FBQXJyQyxLQUFBbVgsT0FJQXVaLEVBQUFtdkIsS0FDQUMsRUFBQUcsRUFBQXJTLEtBR0FsZCxFQUFBb3ZCLFNBQUFBLEdBQUFwdkIsRUFBQW92QixVQUNBbFMsRUFBQXZDLFVBQUEzYSxFQUFBNTZCLE1BQUEsS0FJQXNuRCxnQkFBQSxTQUFBcHBELEVBQUE0NUMsRUFBQTduQyxHQUNBLEdBQUErNUMsRUFFQS81QyxLQUFBLElBQUFBLEVBQUEvRixLQUFBbVgsT0FJQTJvQyxFQUFBRyxFQUFBclMsS0FHQSxLQUFBa1MsSUFFQTl3RCxFQUFBb29CLFNBQUFELEtBQUFubUIsUUFBQTh1RCxHQUFBLElBQ0FsUyxFQUFBNXRDLEtBQUFvZ0QsU0FBQXB4RCxFQUFBb29CLFNBQUFELE1BR0Erb0MsRUFBQUosR0FBQWxTLEVBQUF4QyxNQUFBcjdDLE9BQUEsRUFBQSxLQUFBZ1csRUFBQWpRLE1BQUEsR0FBQSxJQUVBLGdCQUFBOUcsR0FBQXF4RCxTQUNBRixHQUNBaDBCLGFBQUFnMEIsR0FHQUEsRUFBQXRoRCxXQUFBLFdBQ0E3UCxFQUFBcXhELFFBQUFMLEVBQUEsWUFBQSxtQkFBQW54RCxFQUFBeXlDLE1BQUF0eUMsRUFBQW9vQixTQUFBa3BDLFNBQUF0eEQsRUFBQW9vQixTQUFBbXBDLE9BQUEsSUFBQUwsR0FFQUMsRUFBQSxLQUVBSCxHQUFBLEdBRUEsTUFHQWh4RCxFQUFBb29CLFNBQUFELEtBQUErb0MsSUFPQTlCLGlCQUFBLFNBQUFwcUQsRUFBQTQ1QyxFQUFBN25DLEdBQ0EsR0FBQSs1QyxHQUFBTSxDQUVBRCxJQUNBaDBCLGFBQUFnMEIsSUFHQSxJQUFBcDZDLEVBQUEvRixLQUFBbVgsT0FJQTJvQyxFQUFBRyxFQUFBclMsR0FDQXdTLEVBQUF4UyxHQUFBQSxFQUFBNXRDLEtBQUFvZ0QsU0FBQXhTLEVBQUE1dEMsS0FBQW9nRCxTQUFBLEdBR0FOLEdBQUEsS0FBQUEsSUFFQSxnQkFBQU8sU0FDQXJ4RCxFQUFBcXhELFFBQUFHLGdCQUFBM3hELEVBQUF5eUMsTUFBQXR5QyxFQUFBb29CLFNBQUFrcEMsU0FBQXR4RCxFQUFBb29CLFNBQUFtcEMsT0FBQUgsSUFHQXB4RCxFQUFBb29CLFNBQUFELEtBQUFpcEMsRUFHQXZuQixFQUFBN3BDLEdBQUFpN0IsVUFBQTJqQixFQUFBM2pCLFdBQUFDLFdBQUEwakIsRUFBQTFqQixjQUlBZzJCLEVBQUEsU0FLQXJuQixFQUFBN3BDLEdBQUEySixHQUFBLGdCQUFBLFdBQ0EsR0FBQSszQixHQUFBbXZCLEdBRUFobkIsR0FBQTJNLFNBQUEyRyxlQUNBK1QsR0FBQUEsSUFBQXh2QixFQUFBb3ZCLFFBQUEsSUFBQXB2QixFQUFBNTZCLE9BQUEsSUFBQTQ2QixFQUFBNTZCLE9BQUFvcUQsR0FBQXh2QixFQUFBb3ZCLFVBQ0FJLEVBQUEsS0FFQXJuQixFQUFBMk0sU0FBQTZCLFNBR0EsS0FBQTNXLEVBQUFvdkIsU0FDQUMsRUFBQXJ2QixLQUtBN3hCLFdBQUEsV0FDQWtoRCxFQUFBRixNQUNBLFFBR0FoeEQsU0FBQUcsT0FBQUEsT0FBQWlCLFFBQUFBLFFDdmhLQSxTQUFBd3dELEdBQ0EsUUFBQUMsR0FBQUMsR0FDQSxHQUFBQyxFQUFBRCxHQUFBLE1BQUFDLEdBQUFELEdBQUEveEQsT0FDQSxJQUFBRCxHQUFBaXlELEVBQUFELElBQ0E5dkQsRUFBQTh2RCxFQUNBL3BELEdBQUEsRUFDQWhJLFdBRUEsT0FBQTZ4RCxHQUFBRSxHQUFBN3ZELEtBQUFuQyxFQUFBQyxRQUFBRCxFQUFBQSxFQUFBQyxRQUFBOHhELEdBQ0EveEQsRUFBQWlJLEdBQUEsRUFBQWpJLEVBQUFDLFFBRUEsR0FBQWd5RCxLQUNBRixHQUFBLzJDLEVBQUE4MkMsRUFBQUMsRUFBQUcsRUFBQUQsRUFBQUYsRUFBQXBNLEVBQUEsU0FBQTFsRCxFQUFBeUIsRUFBQXU4QixHQUNBOHpCLEVBQUFJLEVBQUFseUQsRUFBQXlCLElBQUFxVyxPQUFBd1gsZUFBQXR2QixFQUFBeUIsR0FDQTh0QixjQUFBLEVBQ0FvRSxZQUFBLEVBQ0F2c0IsSUFBQTQyQixLQUVBOHpCLEVBQUFubkMsRUFBQSxTQUFBNXFCLEdBQ0EsR0FBQWkrQixHQUFBaitCLEdBQUFBLEVBQUFveUQsV0FBQSxXQUNBLE1BQUFweUQsR0FBQXF5RCxTQUNBLFdBQ0EsTUFBQXJ5RCxHQUVBLE9BQUEreEQsR0FBQXBNLEVBQUExbkIsRUFBQSxJQUFBQSxHQUFBQSxHQUNBOHpCLEVBQUFJLEVBQUEsU0FBQXJ2RCxFQUFBNHdDLEdBQ0EsTUFBQTM3QixRQUFBbkksVUFBQXdJLGVBQUFqVyxLQUFBVyxFQUFBNHdDLElBQ0FxZSxFQUFBdDJCLEVBQUEsR0FBQXMyQixFQUFBQSxFQUFBejdDLEVBQUEsS0FDQSxTQUFBdFcsRUFBQUMsRUFBQTh4RCxHQUNBLFlBQ0EsSUFBQU8sR0FBQUMsRUFBQUMsQ0FDQSxtQkFBQTUzQyxTQUFBQSxPQUFBQyxTQUNBLFNBQUE5YSxHQUNBd3lELEdBQUFSLEVBQUEsUUFBQSxNQUFBUyxFQUFBLG1CQUFBRixFQUFBdnlELEdBQUF1eUQsRUFBQXB1RCxNQUFBakUsRUFBQXN5RCxHQUFBRCxLQUFBdHlELEVBQUFDLFFBQUF1eUQsSUFDQSxTQUFBdG9CLEdBQ0EsTUFBQUEsTUFFQSxTQUFBbHFDLEVBQUFDLEVBQUE4eEQsR0FDQSxZQUNBLElBQUFPLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUEsa0JBQUE3M0MsU0FBQSxnQkFBQUEsUUFBQUMsU0FBQSxTQUFBMVosR0FDQSxhQUFBQSxJQUNBLFNBQUFBLEdBQ0EsTUFBQUEsSUFBQSxrQkFBQXlaLFNBQUF6WixFQUFBMlgsY0FBQThCLFFBQUF6WixJQUFBeVosT0FBQWhMLFVBQUEsZUFBQXpPLEtBRUEsU0FBQXBCLEdBQ0F3eUQsR0FBQVIsRUFBQSxHQUFBQSxFQUFBLElBQUFBLEVBQUEsU0FDQSxNQUFBUyxFQUFBLG1CQUFBRixFQUFBdnlELEdBQUF1eUQsRUFBQXB1RCxNQUFBakUsRUFBQXN5RCxHQUFBRCxLQUFBdHlELEVBQUFDLFFBQUF1eUQsSUFDQSxTQUFBdG9CLEVBQUE3cEMsRUFBQUgsRUFBQWlFLEdBQ0EsUUFBQXV1RCxHQUFBQyxFQUFBOXZELEVBQUErdkQsR0FDQSxLQUFBdHlELGVBQUFveUQsSUFBQSxNQUFBLElBQUFBLEdBQUFDLEVBQUE5dkQsRUFBQSt2RCxFQUNBdHlELE1BQUF5YyxHQUFBNVksRUFBQTdELEtBQUFrTCxVQUFBbEwsS0FBQXV5RCxRQUFBMXVELEVBQUE3RCxLQUFBd3lELGNBQUEsR0FDQSxJQUFBRixJQUFBMW9CLEVBQUF6d0IsY0FBQWs1QyxHQUFBOXZELEVBQUE4dkQsR0FBQTl2RCxFQUFBQSxPQUFBOHZELE1BQUFBLEVBQ0FyeUQsS0FBQStRLEtBQUE2NEIsRUFBQXQrQixRQUFBLEtBQUF0TCxLQUFBOHBDLFNBQUF2bkMsR0FBQXZDLEtBQUF5eUQsYUFBQWx3RCxHQUFBQSxFQUFBbXdELGNBQUE3dUQsRUFDQTdELEtBQUEyeUQsWUFBQXB3RCxNQUFBdkMsS0FBQTR5RCxNQUFBNXlELEtBQUErUSxLQUFBOGhELGFBQUFDLEVBQUE5eUQsS0FBQStRLEtBQUFzaEQsTUFBQTl2RCxFQUFBdkMsS0FBQStRLE9BRUEsUUFBQStoRCxHQUFBQyxFQUFBeHdELEVBQUF3TyxHQUNBLEdBQUFpaUQsR0FBQVosRUFBQTlpRCxVQUFBMmpELFFBQUFGLEVBQ0EsT0FBQUMsSUFBQUEsRUFBQVgsT0FBQVMsRUFBQUUsRUFBQVgsTUFBQXh1RCxFQUFBa04sR0FDQTY0QixFQUFBdCtCLFFBQUEsRUFBQXlGLEVBQUFpaUQsR0FBQXBwQixFQUFBdCtCLFFBQUEsRUFBQXlGLEVBQUF4TyxJQUFBLElBQUEsT0FBQXdPLEVBQUFtaUQsT0FBQW5pRCxFQUFBbWlELEtBQUFILElBQ0EsR0FFQSxRQUFBSSxHQUFBcGlELEVBQUFxaUQsR0FDQSxRQUFBQyxHQUFBSCxFQUFBSSxFQUFBdmlELEdBQ0EsR0FBQXdpRCxJQUFBLENBQ0EsSUFBQSxPQUFBTCxHQUFBLEtBQUFBLEtBQUFLLEVBQUEsT0FBQXhpRCxFQUFBeWlELE9BQUFOLEdBQUFBLEVBQUFuaUQsRUFBQXlpRCxPQUFBNXVELFFBQUEsaUJBQUEsT0FBQTJ1RCxHQUFBLEVBQ0FMLEVBQUEsT0FBQSxJQUFBQSxFQUFBcHlELFNBQUEsSUFBQWlRLEVBQUEwaUQsUUFBQSxJQUFBMWlELEVBQUEyaUQsU0FBQTNpRCxFQUFBNGlELFlBQUEsSUFDQTVpRCxFQUFBMmlELE9BQUEsR0FBQSxNQUFBM2lELEVBQUEyaUQsUUFBQSxNQUFBM2lELEVBQUEyaUQsT0FBQSxDQUNBLEdBQUFFLEdBQUEsTUFBQTdpRCxFQUFBMmlELE9BQUEsRUFBQSxNQUFBM2lELEVBQUEyaUQsT0FBQSxFQUFBM2lELEVBQUEyaUQsTUFDQVIsR0FBQW5pRCxFQUFBOGlELFlBQUEzdEQsTUFBQWd0RCxFQUFBbmlELEVBQUE4aUQsWUFBQTF0RCxJQUFBNEssRUFBQStpRCxpQkFBQTV0RCxNQUFBMHRELEVBQUEsSUFBQTdpRCxFQUFBMmlELE9BQUEzaUQsRUFBQStpRCxpQkFBQTN0RCxJQUVBLEdBQUE0dEQsR0FBQUMsRUFBQVQsRUFBQSxTQUFBeGlELEVBQUF5aUQsTUFBQXppRCxFQUFBOGhELGFBQUFLLEVBQUEvN0MsTUFBQSxJQUFBcVUsVUFBQXBYLEtBQUEsSUFBQTgrQyxDQUNBLE9BQUFkLEdBQUE5aUQsVUFBQTJrRCxXQUFBRCxLQUFBbndELElBQUEsSUFBQXV2RCxHQUFBVyxHQUNBYixLQUFBQSxFQUNBZ0IsVUFBQTlCLEVBQUE5aUQsVUFBQTZrRCxZQUFBakIsRUFBQUssRUFBQXhpRCxHQUNBcWpELGtCQUNBQyxRQUFBeHdELEVBQ0F5d0QsT0FBQXp3RCxFQUNBMHdELFNBQ0FqQixTQUFBQSxFQUNBa0IsV0FBQTN3RCxJQUNBLElBQUF1dkQsSUFBQWhCLEVBQUE5aUQsVUFBQTJrRCxXQUFBRCxHQUFBRCxFQUNBQSxFQUFBbnFCLEVBQUF0K0IsUUFBQSxLQUFBOG1ELEVBQUE5aUQsVUFBQTJrRCxXQUFBRCxNQUFBRCxFQUFBbnFCLEVBQUF0K0IsUUFBQSxLQUFBOG1ELEVBQUE5aUQsVUFBQTJrRCxXQUFBRCxJQUNBRCxFQUVBLEdBQUFucUIsRUFBQWxvQyxXQUFBcVAsRUFBQW1pRCxRQUFBbmlELEVBQUFtaUQsS0FBQW5pRCxFQUFBbWlELEtBQUFuaUQsSUFBQTY0QixFQUFBcDNCLFFBQUF6QixFQUFBbWlELE1BQUEsQ0FDQSxHQUFBbmlELEVBQUFtaUQsS0FBQXB5RCxPQUFBLEVBQUEsQ0FDQWlRLEVBQUEwakQsV0FBQSxPQUFBMWpELEVBQUEwakQsWUFBQTFqRCxFQUFBMGpELFVBQ0EsSUFBQUMsR0FBQTNqRCxFQUFBOGlELFlBQUEzdEQsS0FDQSxPQUFBMGpDLEdBQUFubkMsS0FBQXNPLEVBQUE4aEQsYUFBQTloRCxFQUFBbWlELEtBQUExbkMsVUFBQXphLEVBQUFtaUQsS0FBQSxTQUFBeUIsRUFBQUMsR0FDQUYsRUFBQTV6RCxPQUFBLElBQUE0ekQsR0FBQTNqRCxFQUFBOGlELFlBQUExdEQsSUFBQTRLLEVBQUE4akQsaUJBQUE5akQsRUFBQThpRCxZQUFBM3RELE9BQ0EwdUQsRUFBQTFCLE9BQUFydkQsR0FBQStsQyxFQUFBbG9DLFdBQUFrekQsRUFBQTFCLE1BQUF3QixHQUFBRSxFQUFBRixHQUFBRSxFQUFBMUIsT0FDQXdCLEdBQUEzakQsRUFBQThpRCxZQUFBMXRELElBQUFrdEQsRUFBQXFCLEVBQUEzakQsRUFBQW1pRCxLQUFBbmlELEdBRUFBLEVBQUFtaUQsS0FBQW5pRCxFQUFBbWlELEtBQUFqeUMsTUFFQSxNQUFBbFEsR0FBQW1pRCxNQUFBbmlELEVBQUFtaUQsS0FBQUEsT0FBQXJ2RCxJQUFBK2xDLEVBQUFsb0MsV0FBQXFQLEVBQUFtaUQsS0FBQUEsTUFBQUcsRUFBQXRpRCxFQUFBbWlELEtBQUFBLEtBQUFuaUQsRUFBQW1pRCxLQUFBbmlELEdBQUFzaUQsRUFBQXRpRCxFQUFBbWlELEtBQUFuaUQsRUFBQW1pRCxLQUFBbmlELEdBRUEsUUFBQStqRCxHQUFBQyxFQUFBeEMsRUFBQXhoRCxHQUNBLFFBQUFpa0QsR0FBQUMsRUFBQUMsRUFBQUMsR0FDQUQsRUFBQUEsR0FBQSxDQUNBLElBQUFFLEdBQUFuekQsRUFBQW96RCxFQUFBQyxLQUFBeDZCLEVBQUEsRUFBQXk2QixFQUFBQyxHQUNBLEtBQ0EsSUFBQVAsR0FBQVEsSUFBQXJCLGVBQUF0NUIsSUFBQTc0QixHQUFBb3pELEVBQUFJLElBQUFyQixlQUFBdDVCLElBQUFwNEIsTUFDQTB5RCxFQUFBQyxFQUFBSyxRQUFBNXhELFFBQUF3eEQsRUFBQXJzRCxNQUFBLElBQUFrc0QsRUFBQUUsRUFBQXJ3QyxPQUFBLElBQUFtd0MsRUFBQWx6RCxFQUFBMHpELFVBQUFDLEVBQUE5NkIsRUFBQTc0QixNQUFBQSxHQUFBb3pELEVBQUFRLEVBQUEvNkIsRUFBQXM2QixFQUFBdDZCLEVBQUEsSUFBQXA0QixNQUNBMHlELEVBQUFDLEVBQUFLLFFBQUE1eEQsVUFBQSxJQUFBaU4sRUFBQStrRCxZQUFBaDdCLEVBQUF5NkIsR0FBQSxnQkFBQXhrRCxHQUFBK2tELFlBQUE1N0IsU0FBQW5wQixFQUFBK2tELGFBQUEva0QsRUFBQStrRCxXQUFBaDdCLElBQUF3NkIsRUFBQXJzRCxNQUFBLElBQUFrc0QsRUFBQWx6RCxFQUFBMHpELFVBQUFDLEVBQUE5NkIsRUFBQTc0QixLQUNBNjRCLFdBQ0FpN0IsSUFBQWx5RCxHQUFBaTNCLEVBQUFpN0IsS0FBQSxPQUFBOXpELEVBQUE0SCxJQUFBLEtBQUE1SCxFQUFBK3pELE1BQUFkLEVBQUFwNkIsRUFDQSxPQUFBLEtBQUF3NkIsRUFBQUEsRUFBQXgwRCxPQUFBLElBQUF3MEQsRUFBQXIwQyxNQUFBdzBDLElBQUFqQixXQUFBMTVCLEVBQUEsRUFDQXc2QixFQUVBLFFBQUFHLEtBQ0EsTUFBQWxELEdBRUEsUUFBQTBELEdBQUFDLEdBQ0EsR0FBQTNELEdBQUFrRCxHQUNBbEQsR0FBQStCLE9BQUF6d0QsR0FBQSxJQUFBcXlELElBQUEzRCxFQUFBNkIsa0JBQUE3QixFQUFBcDNCLEVBQUEsR0FFQSxRQUFBcTZCLEdBQUFXLEVBQUFDLEVBQUFoQyxHQUNBLEdBQUFuOUIsSUFBQSxFQUFBQyxHQUFBLEVBQUFtL0IsRUFBQWpDLEdBQUFxQixJQUFBckIsY0FDQStCLEtBQUF0eUQsSUFBQXN5RCxHQUFBLEVBQ0EsS0FBQSxHQUFBRyxLQUFBRCxHQUFBLENBQ0EsR0FBQUUsR0FBQXI0QixTQUFBbzRCLEVBQ0FELEdBQUFFLEtBQUFILElBQUEsSUFBQUMsRUFBQUUsR0FBQUMsa0JBQUFELEdBQUFKLElBQUFsL0IsRUFBQXMvQixHQUNBQSxHQUFBSixJQUFBai9CLEVBQUFxL0IsSUFFQSxPQUFBLElBQUF0L0IsR0FBQWsvQixFQUFBbC9CLEVBQUEsR0FBQUMsRUFBQWkvQixFQUFBbC9CLEVBQUFDLEVBRUEsUUFBQXUvQixHQUFBdndELEVBQUFDLEVBQUF1d0QsRUFBQU4sR0FDQSxHQUFBeDBELEdBQUErMEQsRUFBQXp3RCxFQUFBMHdELEVBQUFodEIsRUFBQXQrQixRQUFBLEtBQUFtcUQsSUFBQXJCLGdCQUFBeUMsR0FBQSxDQUNBLEtBQUFwQixJQUFBdDZCLEVBQUFqMUIsRUFBQXRFLEVBQUF1RSxFQUFBLEVBQUF2RSxHQUFBKzBELEVBQUEvMEQsSUFBQTZ6RCxJQUFBckIsZUFBQXh5RCxLQUFBaUMsS0FBQSxJQUFBNnlELEtBQUFqQixJQUFBckIsZUFBQXh5RCxHQUFBYyxNQUFBbzBELGFBQUEsU0FBQWg4QixHQUNBLEdBQUFpOEIsR0FBQXRCLElBQUFyQixlQUFBdDVCLEVBQ0EsSUFBQWk4QixJQUFBbHpELEdBQUEsT0FBQWt6RCxFQUFBcjBELE1BQUFtSCxHQUFBLENBQ0EsR0FBQW10RCxHQUFBdkIsSUFBQXJCLGVBQUF0NUIsRUFBQSxHQUFBbThCLEVBQUF4QixJQUFBckIsZUFBQXQ1QixFQUFBLEVBQ0EsT0FBQWs4QixLQUFBbnpELEdBQUFvekQsSUFBQXB6RCxFQUVBLE9BQUEsR0FDQWpDLEtBQUEsSUFBQW1QLEVBQUFtbUQsaUJBQUF6QixJQUFBN3pELEVBQUE0ekQsSUFBQVksRUFBQXJsRCxXQUFBMGtELEtBQUFyQixlQUFBeHlELEdBQ0EsS0FBQXEwRCxHQUFBLEdBQUFyMEQsRUFBQSswRCxFQUFBLEVBQUEvMEQsR0FBQTR6RCxLQUFBLENBQ0EsS0FBQUMsSUFBQXJCLGVBQUF1QyxLQUFBOXlELEdBQUE4eUQsR0FDQSxJQUFBLzBELEVBQUErMEQsSUFBQS8wRCxFQUFBKzBELEVBQUEsR0FBQWxCLElBQUFyQixlQUFBeHlELEtBQUFpQyxHQUFBc3pELEVBQUF2MUQsR0FBQUEsUUFBQSxDQUNBLEdBQUF3dkIsR0FBQXlrQyxFQUFBajBELElBQ0EsSUFBQWkxRCxHQUFBRCxFQUFBRCxJQUFBQyxFQUFBRCxHQUFBajBELE1BQUFzekQsTUFBQTVrQyxFQUFBMXVCLE1BQUFzekQsS0FBQVAsSUFBQXJCLGVBQUF1QyxHQUFBL3NCLEVBQUF0K0IsUUFBQSxLQUFBc3JELEVBQUFELElBQ0FsQixJQUFBckIsZUFBQXVDLEdBQUEzeEMsTUFBQW9NLEVBQUFwTSxZQUFBeXdDLEtBQUFyQixlQUFBeHlELEdBQ0FBLEtBQUF3MUQsRUFBQVQsRUFBQXZsQyxFQUFBMXVCLE1BQUFzekQsTUFBQSxJQUFBcUIsRUFBQVYsRUFBQXZsQyxFQUFBcE0sT0FBQTR3QyxFQUFBaDBELElBQUEsV0FBQTZ6RCxLQUFBckIsZUFBQXh5RCxHQUNBQSxJQUFBaTFELEdBQUEsR0FBQU0sRUFBQXYxRCxLQUFBQSxJQUFBKzBELEtBQUFBLEtBR0FWLEdBQUEsR0FFQSxRQUFBcUIsR0FBQS9DLEVBQUFnRCxHQUNBLElBQUEsR0FBQWxDLEdBQUFtQyxFQUFBakQsRUFBQWdCLEVBQUFDLElBQUFpQyxFQUFBaEMsSUFBQXJCLGVBQUFtQixJQUFBbUMsRUFBQSxHQUFBLEdBQUFDLEVBQUFGLEVBQUFHLGNBQUEvekQsRUFBQTR6RCxFQUFBL0IsUUFBQStCLEVBQUFHLGFBQUFoZ0QsV0FBQVQsTUFBQSxRQUFBdzlDLEVBQUEsRUFBQUEsRUFBQTZDLEVBQUExMkQsWUFBQXUwRCxFQUFBbUMsRUFBQTdDLElBQUFqeUQsUUFBQXFPLEVBQUEwaUQsU0FBQSxJQUFBNEIsRUFBQTN5RCxNQUFBbTFELHNCQUFBLElBQUF4QyxFQUFBM3lELE1BQUFvMEQsY0FBQSxJQUFBekIsRUFBQTN5RCxNQUFBbzFELGtCQUFBLElBQUF6QyxFQUFBM3lELE1BQUFtMUQsc0JBQUFKLEVBQUFHLGNBQUEvekQsR0FBQTR6RCxFQUFBRyxjQUFBdkMsRUFBQXVDLGFBQUF2QyxFQUFBSyxRQUFBK0IsRUFBQUcsZUFBQS96RCxHQUFBazBELEVBQUExQyxFQUFBSyxRQUFBK0IsRUFBQUcsYUFBQWhnRCxXQUFBVCxNQUFBLEtBQUF3Z0QsT0FBQSxJQUFBSixJQUFBLE9BQUFsQyxFQUFBM3lELE1BQUFtSCxJQUFBLGNBQUE1SCxLQUFBb3pELEVBQUEzeUQsTUFBQXN6RCxPQUFBckIsS0FDQSxNQUFBVSxHQUVBLFFBQUFRLEdBQUEvNkIsRUFBQXM2QixFQUFBNEMsR0FDQSxNQUFBdkMsS0FBQXJCLGVBQUF0NUIsSUFBQXc4QixFQUFBSSxFQUFBNThCLEVBQUFzNkIsRUFBQUEsRUFBQXR4RCxRQUFBc3hELEVBQUE0QyxJQUVBLFFBQUFDLEdBQUFuOUIsR0FDQSxNQUFBMjZCLEtBQUFyQixlQUFBdDVCLEdBQUEyNkIsSUFBQXJCLGVBQUF0NUIsR0FBQTQ4QixFQUFBNThCLEdBQUEsR0FFQSxRQUFBczhCLEdBQUF0OEIsRUFBQWs3QixHQUNBLElBQUEsR0FBQWtDLElBQUEsRUFBQTNELEVBQUFtRCxFQUFBNThCLEdBQUFxOUIsRUFBQSxFQUFBQSxFQUFBNUQsRUFBQXp6RCxPQUFBcTNELElBQUEsR0FBQTVELEVBQUE0RCxHQUFBejFELE9BQUE2eEQsRUFBQTRELEdBQUF6MUQsTUFBQXN6RCxNQUFBQSxFQUFBLENBQ0FrQyxHQUFBLENBQ0EsT0FFQSxNQUFBQSxHQUVBLFFBQUFSLEdBQUE1OEIsRUFBQXM2QixFQUFBNEMsR0FDQSxRQUFBSSxHQUFBbEUsRUFBQW1FLEVBQUFDLEVBQUFDLEdBQ0EsUUFBQUMsR0FBQTkxRCxFQUFBNDFELEVBQUFDLEdBQ0EsUUFBQUUsR0FBQUMsRUFBQUMsR0FDQSxHQUFBQyxHQUFBLElBQUFodkIsRUFBQXpnQyxRQUFBdXZELEVBQUFDLEVBQUFwcUQsUUFDQSxPQUFBcXFELElBQUFodkIsRUFBQW5uQyxLQUFBazJELEVBQUFwcUQsUUFBQSxTQUFBb21ELEVBQUFqeUQsR0FDQSxJQUFBLElBQUFBLEVBQUFtMkQsZUFBQUQsRUFBQUgsRUFBQUMsRUFBQUMsRUFBQXBxRCxRQUFBb21ELEVBQUEsS0FBQSxPQUFBLElBQ0FpRSxFQUVBLFFBQUFFLEdBQUFoK0IsRUFBQWkrQixFQUFBQyxHQUNBLEdBQUFDLEdBQUFDLENBQ0EsSUFBQXpELElBQUFyQixlQUFBdDVCLEVBQUEsSUFBQWsrQixHQUFBdkQsSUFBQWxCLE1BQUF6NUIsR0FBQSxJQUFBLEdBQUFxK0IsR0FBQTFELElBQUFyQixlQUFBdDVCLEVBQUEsR0FBQTQ2QixRQUFBMEQsRUFBQTNELElBQUFsQixNQUFBejVCLEdBQUEsR0FBQTQ2QixRQUFBOXpELEVBQUEsRUFBQUEsRUFBQW8zRCxFQUFBcDNELElBQUEsR0FBQXUzRCxFQUFBdjNELEtBQUF3M0QsRUFBQXgzRCxHQUFBLE1BQUF1M0QsR0FBQXIxRCxNQUFBazFELEVBQUEsRUFDQSxRQUFBdkQsSUFBQWxCLE1BQUF6NUIsSUFBQTI2QixJQUFBckIsZUFBQXQ1QixLQUFBOE8sRUFBQW5uQyxLQUFBZ3pELElBQUFsQixNQUFBejVCLEtBQUEyNkIsSUFBQXJCLGVBQUF0NUIsSUFBQSxTQUFBNjVCLEVBQUEwRSxHQUNBLEdBQUF6QixHQUFBb0IsSUFBQW4xRCxFQUFBbTFELEVBQUFLLEVBQUF6QixZQUFBMEIsRUFBQUQsRUFBQTNELFFBQUFrQyxLQUFBL3pELEVBQUF3MUQsRUFBQTNELFFBQUFrQyxHQUFBaGdELFdBQUE3VixRQUFBZzNELElBQUEsR0FDQUcsSUFBQXIxRCxHQUFBeTFELEVBQUFKLEtBQUEsSUFBQUksSUFBQUwsRUFBQUksRUFDQUgsRUFBQUksS0FDQUwsRUFBQUEsRUFBQXZELFFBQUE1eEQsT0FBQWsxRCxJQUFBbjFELEVBQUFtMUQsRUFBQUMsRUFBQXJCLGFBQUEsR0FBQW9CLElBQUFuMUQsRUFBQWkxRCxFQUFBaCtCLEVBQUFpK0IsR0FBQWwxRCxFQUVBLEdBQUF3eEQsRUFBQSxJQUFBLEtBQUEsc0pBQUFJLElBQUF2QyxJQUNBLElBQUFtQyxJQUFBdjZCLEdBQUFwNEIsRUFBQTZMLFVBQUExSyxFQUFBLE1BQUEwSyxHQUFBdEYsTUFDQXZHLE1BQUFBLEVBQ0FnekQsUUFBQTRDLEVBQUE5c0MsVUFDQSt0QyxHQUFBQyxLQUNBLENBQ0EsSUFBQTkyRCxFQUFBNkwsVUFBQTFLLEdBQ0EsR0FBQW5CLEVBQUErMkQsU0FBQWxCLElBQUE3MUQsR0FDQSxHQUFBQSxFQUFBODFELEVBQUF0RSxFQUFBM2xELFFBQUFxN0IsRUFBQXpnQyxRQUFBekcsRUFBQXd4RCxFQUFBM2xELFNBQUEsR0FBQStwRCxHQUFBLE9BQUEsTUFDQSxJQUFBNTFELEVBQUFnM0QsV0FBQSxDQUNBLEdBQUFDLEdBQUFqM0QsQ0FDQSxJQUFBQSxFQUFBMDFELEVBQUExMUQsRUFBQTIxRCxFQUFBQyxFQUFBQyxHQUFBLENBQ0EsR0FBQUcsRUFBQW5xRCxFQUFBQSxFQUFBek4sT0FBQSxHQUFBNEIsT0FBQSsxRCxFQUFBQyxFQUFBaUIsR0FBQSxPQUFBLENBQ0FDLElBQUEsRUFBQXZFLEVBQUF2NkIsT0FFQSxJQUFBcDRCLEVBQUFtM0QsYUFBQSxDQUNBLEdBQUFDLEdBQUFDLEVBQUFyM0QsRUFBQXMzRCxLQUFBQyxFQUFBMXJELEVBQUF6SyxRQUFBbzJELEVBQUE1QixFQUFBeDNELE9BQUFxNUQsRUFBQTlCLEVBQUF2M0QsT0FBQSxFQUFBdTNELEVBQUEvaEQsU0FBQSxDQUNBLEtBQUEsSUFBQTZqRCxHQUFBLGdCQUFBQSxHQUFBLENBQ0EsR0FBQUMsR0FBQS9hLEVBQUFnVyxFQUFBZ0YsRUFBQWhDLEVBQUF2MEQsUUFBQXcyRCxJQUNBLElBQUEsZ0JBQUFILEdBQUFHLEVBQUFILEVBQUFoakQsTUFBQSxTQUFBLEtBQUFpakQsRUFBQSxFQUFBQSxFQUFBTCxFQUFBeHJELFFBQUF6TixPQUFBczVELElBQUFFLEVBQUFyeEQsS0FBQW14RCxFQUNBLEtBQUEsR0FBQXpGLEdBQUEsRUFBQUEsRUFBQTJGLEVBQUF4NUQsT0FBQTZ6RCxJQUFBLENBQ0EsR0FBQXlGLEVBQUFsOEIsU0FBQW84QixFQUFBM0YsSUFBQXBtRCxLQUFBOHBELEVBQUFTLEVBQUF6RCxFQUFBK0UsRUFBQUYsSUFBQUcsRUFBQXYyRCxTQUNBLEtBQUFwQixFQUFBODFELEVBQUF1QixFQUFBeHJELFFBQUE2ckQsSUFBQWxHLEVBQUEzbEQsUUFBQTZyRCxJQUFBQSxHQUFBcnVELE9BQUF1c0QsR0FBQUMsSUFBQTcxRCxJQUFBQSxJQUFBbUIsR0FBQXkyRCxFQUFBQSxFQUFBeDVELE9BQUEsR0FBQWk1RCxFQUFBeHJELFFBQUF6TixPQUFBLENBQ0EsR0FBQXk1RCxHQUFBM3dCLEVBQUF6Z0MsUUFBQXpHLEVBQUF3eEQsRUFBQTNsRCxTQUFBLENBQ0EybEQsR0FBQTNsRCxRQUFBek4sT0FBQXk1RCxJQUFBNzNELEVBQUE4MUQsRUFBQXRFLEVBQUEzbEQsUUFBQWdzRCxJQUFBQSxHQUFBeHVELE9BQUF1c0QsRUFBQXgwRCxNQUFBLEVBQUF3MEQsRUFBQXgzRCxTQUFBeTNELE1BQUErQixFQUFBcnhELEtBQUFzeEQsRUFBQTNpRCxZQUNBZ3lCLEVBQUFubkMsS0FBQThMLEVBQUEsU0FBQW9tRCxFQUFBMEUsR0FDQUEsRUFBQXpCLFlBQUFVLEVBQUF4M0QsT0FBQSxLQUdBZzVELEVBQUF2ckQsRUFBQXpLLFFBQUF1eEQsRUFBQWhXLEVBQUE5d0MsSUFDQSxLQUFBLEdBQUFpc0QsR0FBQSxFQUFBQSxFQUFBVixFQUFBaDVELE9BQUEwNUQsSUFBQSxDQUNBLEdBQUFDLEdBQUFYLEVBQUFVLEdBQUFFLEdBQUEsQ0FDQUQsR0FBQTdDLFlBQUE2QyxFQUFBN0MsYUFBQXNDLENBQ0EsS0FBQSxHQUFBUyxHQUFBLEVBQUFBLEVBQUFYLEVBQUFsNUQsT0FBQTY1RCxJQUFBLENBQ0EsR0FBQUMsR0FBQVosRUFBQVcsRUFDQSxJQUFBLGdCQUFBUixLQUFBLElBQUF2d0IsRUFBQXpnQyxRQUFBc3hELEVBQUEvRSxRQUFBK0UsRUFBQTdDLGFBQUFoZ0QsV0FBQTBpRCxHQUFBLENBQ0EsR0FBQSxTQUFBenFDLEVBQUFsYSxHQUNBLE1BQUFrYSxHQUFBbnRCLE1BQUFpekQsWUFBQWhnRCxFQUFBalQsTUFBQWl6RCxXQUFBOWxDLEVBQUFudEIsTUFBQXN6RCxNQUFBcmdELEVBQUFqVCxNQUFBaXpELFdBQUE5bEMsRUFBQW50QixNQUFBaXpELFlBQUFoZ0QsRUFBQWpULE1BQUFzekQsS0FDQXlFLEVBQUFHLEdBQUEsQ0FDQUYsR0FBQSxFQUFBRCxFQUFBN0MsY0FBQWdELEVBQUFoRCxjQUFBLElBQUFnRCxFQUFBbEYsUUFBQWtGLEVBQUFoRCxhQUFBaGdELFdBQUE3VixRQUFBMDRELEVBQUEvRSxRQUFBK0UsRUFBQTdDLGdCQUFBZ0QsRUFBQWxGLFFBQUFrRixFQUFBaEQsYUFBQWdELEVBQUFsRixRQUFBa0YsRUFBQWhELGFBQUEsSUFBQTZDLEVBQUEvRSxRQUFBK0UsRUFBQTdDLGFBQ0FnRCxFQUFBaEQsWUFBQTZDLEVBQUE3QyxhQUFBNkMsRUFBQS8zRCxNQUFBaXpELFlBQUFpRixFQUFBbDRELE1BQUFzekQsTUFBQXlFLEVBQUEvRSxRQUFBK0UsRUFBQTdDLGFBQUFnRCxFQUFBbEYsUUFBQWtGLEVBQUFoRCxhQUNBb0MsRUFBQWhoRCxPQUFBZ2hELEVBQUFqNEQsUUFBQTY0RCxHQUFBLEVBQUFILEdBQ0EsT0FFQSxHQUFBQSxFQUFBLzNELE1BQUFzekQsTUFBQTRFLEVBQUFsNEQsTUFBQXN6RCxJQUFBLENBQ0EwRSxHQUFBLENBQ0EsT0FFQSxHQUFBLFNBQUE3cUMsRUFBQWxhLEdBQ0EsTUFBQSxRQUFBa2EsRUFBQW50QixNQUFBbUgsSUFBQSxPQUFBOEwsRUFBQWpULE1BQUFtSCxJQUFBOEwsRUFBQWpULE1BQUFtSCxHQUFBNUgsS0FBQTR0QixFQUFBbnRCLE1BQUFzekQsSUFBQVAsSUFBQTM2QixHQUFBLEVBQUEvcEIsR0FBQSxJQUNBMHBELEVBQUFHLElBQUEsU0FBQS9xQyxFQUFBbGEsR0FDQSxNQUFBLFFBQUFrYSxFQUFBbnRCLE1BQUFtSCxJQUFBLE9BQUE4TCxFQUFBalQsTUFBQW1ILElBQUE4TCxFQUFBalQsTUFBQW1ILEdBQUE1SCxLQUFBNHRCLEVBQUFudEIsTUFBQXN6RCxJQUFBcHhELFFBQUEsVUFBQSxJQUFBNndELElBQUEzNkIsR0FBQSxFQUFBL3BCLEdBQUEsSUFDQTBwRCxFQUFBRyxHQUFBLENBQ0FILEVBQUE3QyxjQUFBZ0QsRUFBQWhELGNBQUEsSUFBQTZDLEVBQUEvRSxRQUFBK0UsRUFBQTdDLGFBQUFoZ0QsV0FBQTdWLFFBQUE2NEQsRUFBQWxGLFFBQUFrRixFQUFBaEQsYUFBQWhnRCxXQUFBVCxNQUFBLElBQUEsTUFBQXNqRCxFQUFBSSxHQUFBSixFQUFBSSxJQUFBSixFQUFBL0UsUUFBQStFLEVBQUE3QyxhQUFBaGdELFlBQ0EsSUFBQTZpRCxFQUFBSSxHQUFBOTRELFFBQUEwNEQsRUFBQS9FLFFBQUErRSxFQUFBN0MsYUFBQWhnRCxXQUFBVCxNQUFBLElBQUEsTUFBQXNqRCxFQUFBSSxHQUFBSixFQUFBSSxHQUFBLElBQUFKLEVBQUEvRSxRQUFBa0YsRUFBQWhELGFBQUFoZ0QsV0FBQVQsTUFBQSxJQUFBLElBQ0F1akQsR0FBQSxFQUFBRCxFQUFBL0UsUUFBQStFLEVBQUE3QyxhQUFBZ0QsRUFBQWxGLFFBQUFrRixFQUFBaEQsYUFBQWhnRCxXQUFBVCxNQUFBLElBQUEsR0FBQSxJQUFBc2pELEVBQUEvRSxRQUFBK0UsRUFBQTdDLGFBQ0FvQyxFQUFBaGhELE9BQUFnaEQsRUFBQWo0RCxRQUFBNjRELEdBQUEsRUFBQUgsR0FDQSxTQUlBQyxHQUFBVixFQUFBL3dELEtBQUF3eEQsSUFHQSxnQkFBQU4sS0FBQUgsRUFBQXB3QixFQUFBbDlCLElBQUFzdEQsRUFBQSxTQUFBWCxFQUFBMUUsR0FDQSxHQUFBejZCLFNBQUF5NkIsR0FBQSxDQUNBLEdBQUFpRCxHQUFBeUIsRUFBQXpCLFlBQUFrRCxFQUFBekIsRUFBQTNELFFBQUFrQyxHQUFBaGdELFdBQUFULE1BQUEsSUFDQWtpRCxHQUFBM0QsUUFBQWtDLEdBQUEvekQsRUFBQXcxRCxFQUFBekIsWUFBQS96RCxDQUNBLEtBQUEsR0FBQWszRCxHQUFBLEVBQUFBLEVBQUFELEVBQUFoNkQsT0FBQWk2RCxLQUFBLElBQUFueEIsRUFBQXpnQyxRQUFBMnhELEVBQUFDLEdBQUFULEtBQUFqQixFQUFBM0QsUUFBQWtDLEtBQUEvekQsR0FBQXcxRCxFQUFBM0QsUUFBQWtDLElBQUEsSUFDQXlCLEVBQUEzRCxRQUFBa0MsSUFBQWtELEVBQUFDLElBQUExQixFQUFBM0QsUUFBQWtDLEdBQUExNUIsU0FBQTQ4QixFQUFBQyxJQUNBMUIsRUFBQXpCLFlBQUFBLEVBQ0EsSUFBQXlCLEVBQUEzRCxRQUFBa0MsS0FBQS96RCxFQUFBLE1BQUF3MUQsT0FFQTlxRCxFQUFBMHJELEVBQUFsdUQsT0FBQWl1RCxHQUFBM0UsRUFBQXY2QixFQUFBOCtCLEVBQUFyckQsRUFBQXpOLE9BQUEsRUFDQTRCLEVBQUFzM0QsRUFBQWw1RCxPQUFBLEVBQUF1M0QsRUFBQWdDLEVBQUF2MkQsWUFDQXBCLEdBQUE4MUQsRUFBQXVCLEVBQUF4ckQsUUFBQTRyRCxJQUFBakcsRUFBQTNsRCxRQUFBNHJELElBQUFBLEdBQUFwdUQsT0FBQXVzRCxHQUFBQyxFQUNBLElBQUE3MUQsRUFBQSxPQUFBLE1BQ0EsSUFBQUEsRUFBQW0yRCxjQUFBTixJQUFBckUsRUFBQTNsRCxRQUFBcTdCLEVBQUF6Z0MsUUFBQXpHLEVBQUF3eEQsRUFBQTNsRCxTQUFBLEdBQUEsSUFBQSxHQUFBeXNELEdBQUF0NEQsRUFBQXU0RCxFQUFBNUMsRUFBQXYzRCxPQUFBLEVBQUF1M0QsRUFBQS9oRCxRQUFBLEVBQUEya0QsR0FBQXhoRCxNQUFBdWhELEVBQUFFLFdBQUF6c0QsS0FBQXdzRCxFQUFBLEVBQUFELEVBQUFFLFdBQUF6c0QsTUFBQTRtRCxHQUFBdjZCLEVBQUFtZ0MsSUFBQSxDQUNBLEdBQUF0QyxHQUFBekUsRUFBQTNsRCxRQUFBcTdCLEVBQUF6Z0MsUUFBQTZ4RCxFQUFBOUcsRUFBQTNsRCxTQUFBLEVBQ0EsSUFBQTdMLEVBQUE4MUQsRUFBQUcsR0FBQXNDLEdBQUFsdkQsT0FBQXVzRCxHQUFBSyxHQUFBLENBQ0EsR0FBQUQsRUFBQW5xRCxFQUFBQSxFQUFBek4sT0FBQSxHQUFBNEIsTUFBQWcyRCxFQUFBYixtQkFBQW9ELEVBQUFELEVBQUFFLFdBQUF4WixJQUFBLEVBQ0ErVyxFQUFBQyxFQUFBQyxHQUFBLENBQ0EsR0FBQXNDLEVBQUFELEVBQUFFLFdBQUF4WixJQUFBLEVBQUEsQ0FDQWtZLEdBQUEsRUFBQXZFLEVBQUF2NkIsQ0FDQSxPQUVBLE9BQUEsRUFFQSxPQUFBLE9BRUEsSUFBQXA0QixFQUFBMDFELEVBQUExMUQsRUFBQTIxRCxFQUFBQyxFQUFBQyxHQUFBLE9BQUEsTUFDQWxELEtBRUEsSUFBQSxHQUFBOEMsR0FBQUUsRUFBQXYzRCxPQUFBLEVBQUF1M0QsRUFBQS9oRCxRQUFBLEVBQUE2aEQsRUFBQWpFLEVBQUEzbEQsUUFBQXpOLE9BQUFxM0QsSUFBQSxJQUFBLElBQUFqRSxFQUFBM2xELFFBQUE0cEQsR0FBQVUsYUFBQSxDQUNBLEdBQUFuMkQsR0FBQTgxRCxFQUFBdEUsRUFBQTNsRCxRQUFBNHBELElBQUFBLEdBQUFwc0QsT0FBQXVzRCxHQUFBQyxFQUNBLElBQUE3MUQsR0FBQTJ5RCxJQUFBdjZCLEVBQUEsTUFBQXA0QixFQUNBLElBQUEyeUQsRUFBQXY2QixFQUFBLE9BR0EsUUFBQXFnQyxHQUFBNUcsR0FDQSxHQUFBeGpELEVBQUEwakQsWUFBQTM1QixFQUFBLEdBQUF5NUIsRUFBQXp6RCxPQUFBLEdBQUEsS0FBQXl6RCxFQUFBQSxFQUFBenpELE9BQUEsR0FBQTRCLE1BQUFzekQsSUFBQSxFQUFBLEtBQUEsSUFBQXpCLEVBQUEsR0FBQTd4RCxNQUFBbzBELGNBQUEsSUFBQXZDLEVBQUEsR0FBQTd4RCxNQUFBbTFELG9CQUFBLE9BQUF0RCxFQUFBLEdBQUE3eEQsTUFBQW1ILEtBQUEsY0FBQTVILEtBQUFzeUQsRUFBQSxHQUFBN3hELE1BQUFzekQsS0FBQSxDQUNBLEdBQUFQLElBQUFyQixlQUFBdDVCLEVBQUEsS0FBQWozQixFQUFBLE9BQUF5ekQsRUFBQS9DLEdBQ0EsSUFBQWtCLElBQUFyQixlQUFBdDVCLEVBQUEsR0FBQTg4QixjQUFBckQsRUFBQSxHQUFBcUQsWUFBQSxPQUFBTixFQUFBL0MsR0FDQSxJQUFBa0IsSUFBQXJCLGVBQUF0NUIsRUFBQSxHQUFBLE9BQUF3OEIsRUFBQS9DLElBRUEsTUFBQUEsR0FFQSxHQUFBbUUsR0FBQTBDLEVBQUEzRixJQUFBdkIsVUFBQW1CLEVBQUFELEVBQUE0QyxFQUFBLEVBQUFLLEVBQUFqRCxFQUFBQSxFQUFBdHhELFNBQUEsR0FBQXlLLEtBQUFxckQsR0FBQSxFQUFBSixFQUFBcEUsRUFBQUEsRUFBQWhoRCxLQUFBLElBQUEsRUFDQSxJQUFBMG1CLEdBQUEsRUFBQSxDQUNBLEdBQUFzNkIsSUFBQXZ4RCxFQUFBLENBQ0EsSUFBQSxHQUFBNUIsR0FBQW81RCxFQUFBdmdDLEVBQUEsR0FBQTc0QixFQUFBd3pELElBQUFyQixlQUFBaUgsSUFBQTVGLElBQUFsQixNQUFBOEcsTUFBQXgzRCxHQUFBdzNELEdBQUEsR0FBQUEsR0FDQXA1RCxLQUFBNEIsR0FBQXczRCxHQUFBLElBQUFoRCxFQUFBLFNBQUE5RCxHQUNBLEdBQUFtQixLQUNBLE9BQUE5ckIsR0FBQXAzQixRQUFBK2hELEtBQUFBLEdBQUFBLElBQUFBLEVBQUF6ekQsT0FBQSxJQUFBeXpELEVBQUEsR0FBQXFELGNBQUEvekQsRUFBQSxLQUFBNnhELEVBQUE0QixFQUFBL0MsRUFBQXp3RCxTQUFBNHhELFFBQUE1eEQsU0FBQWhELFNBQUE0MEQsRUFBQW5CLEVBQUEsR0FBQW1CLFFBQUE1eEQsU0FBQThsQyxFQUFBbm5DLEtBQUE4eEQsRUFBQSxTQUFBSSxFQUFBMkcsR0FDQSxHQUFBLEtBQUFBLEVBQUF0RixJQUFBLEdBQUEsSUFBQU4sRUFBQTUwRCxPQUFBNDBELEVBQUE0RixFQUFBNUYsUUFBQTV4RCxZQUFBLEtBQUEsR0FBQWxDLEdBQUEsRUFBQUEsRUFBQTh6RCxFQUFBNTBELE9BQUFjLElBQUEwNUQsRUFBQTVGLFFBQUE5ekQsS0FBQSxJQUFBOHpELEVBQUE5ekQsR0FBQWdXLFdBQUE3VixRQUFBdTVELEVBQUE1RixRQUFBOXpELE1BQUE4ekQsRUFBQTl6RCxJQUFBLElBQUEwNUQsRUFBQTVGLFFBQUE5ekQsT0FDQTh6RCxHQUNBenpELEdBQUF1M0QsRUFBQW5CLEVBQUFqa0QsS0FBQSxJQUFBaWhELEVBQUFnRyxHQUVBLEdBQUE1RixJQUFBbEIsTUFBQXo1QixJQUFBMjZCLElBQUFsQixNQUFBejVCLEdBQUEsR0FBQXkrQixLQUFBQyxFQUFBLE1BQUEyQixHQUFBMUYsSUFBQWxCLE1BQUF6NUIsR0FDQSxLQUFBLEdBQUF5Z0MsR0FBQWxELEVBQUEvaEQsUUFBQWlsRCxFQUFBSCxFQUFBdDZELFVBQUFzM0QsRUFBQWdELEVBQUFHLEdBQUFsRCxHQUFBa0QsS0FBQWxHLElBQUF2NkIsR0FBQXU2QixFQUFBdjZCLEdBQUF5Z0MsTUFFQSxPQUFBLElBQUFodEQsRUFBQXpOLFFBQUE4NEQsSUFBQXJyRCxFQUFBdEYsTUFDQXZHLE9BQ0FtSCxHQUFBLEtBQ0EyeEQsWUFBQSxFQUNBMUUsYUFBQSxFQUNBMkUsT0FBQSxLQUNBekYsSUFBQSxHQUNBckMsWUFBQSxJQUVBK0IsV0FDQTZELEdBQUFDLElBQ0FwRSxJQUFBdnhELEdBQUE0eEQsSUFBQWxCLE1BQUF6NUIsR0FBQXFnQyxFQUFBdnhCLEVBQUF0K0IsUUFBQSxLQUFBaUQsS0FBQWtuRCxJQUFBbEIsTUFBQXo1QixHQUFBOE8sRUFBQXQrQixRQUFBLEtBQUFpRCxHQUNBNHNELEVBQUExRixJQUFBbEIsTUFBQXo1QixLQUVBLFFBQUE0Z0MsS0FDQSxNQUFBakcsS0FBQXBCLFVBQUF4d0QsSUFBQTR4RCxJQUFBcEIsUUFBQVcsR0FBQSxFQUFBLEdBQ0FTLElBQUFuQixTQUFBendELElBQUE0eEQsSUFBQW5CLE9BQUFtQixJQUFBcEIsUUFBQXZ3RCxVQUNBMnhELElBQUFwQixRQUVBLFFBQUFzSCxHQUFBQyxHQUNBLE1BQUFuRyxLQUFBbkIsU0FBQXp3RCxJQUFBLElBQUErM0QsSUFBQW5HLElBQUFuQixPQUFBVSxHQUFBLEVBQUFRLEtBQUEsSUFDQUMsSUFBQW5CLE9BRUEsUUFBQXVILEdBQUEzMUQsRUFBQUMsRUFBQW11RCxHQUNBLEdBQUExeUQsR0FBQXU1QixDQUNBLEtBQUEsSUFBQWoxQixFQUFBK3ZELElBQUEvdkQsRUFBQSxFQUFBQyxFQUFBbXVELEVBQUF4ekQsV0FBQSxLQUFBYyxFQUFBc0UsRUFBQXRFLEVBQUF1RSxFQUFBdkUsVUFBQTZ6RCxLQUFBckIsZUFBQXh5RCxFQUNBLEtBQUF1NUIsRUFBQWoxQixFQUFBdEUsRUFBQXNFLEVBQUF0RSxFQUFBdUUsRUFBQXZFLElBQUEsR0FBQXEwRCxHQUFBLEdBQUEzQixFQUFBMXlELEtBQUFtUCxFQUFBK3FELDBCQUFBLENBQ0EsR0FBQUMsR0FBQTFFLEVBQUFsOEIsRUFBQW01QixFQUFBMXlELElBQUEsR0FBQSxJQUNBLElBQUFtNkQsSUFBQTlGLEdBQUEsR0FBQTk2QixFQUFBNGdDLEVBQUFDLFFBQUFuNEQsRUFBQWs0RCxFQUFBQyxNQUFBRCxFQUFBamhDLElBQUEsSUFHQSxRQUFBMmdDLEdBQUF0NkQsRUFBQWMsRUFBQTY0QixHQUNBLE9BQUEvcEIsRUFBQTBxRCxRQUFBeDVELEVBQUF3NUQsUUFDQSxJQUFBLFFBQ0F0NkQsRUFBQUEsRUFBQThNLGFBQ0EsTUFFQSxLQUFBLFFBQ0E5TSxFQUFBQSxFQUFBRSxhQUNBLE1BRUEsS0FBQSxRQUNBLEdBQUE0NkQsR0FBQXhHLElBQUFyQixlQUFBdDVCLEVBQUEsRUFDQTM1QixHQUFBLElBQUEyNUIsR0FBQW1oQyxHQUFBQSxFQUFBajNDLFFBQUFwQixPQUFBQyxhQUFBdXVDLEVBQUFoOUIsUUFBQThtQyxPQUFBLzZELEVBQUE4TSxjQUFBOU0sRUFBQUUsYUFDQSxNQUVBLFNBQ0EsR0FBQXVvQyxFQUFBbG9DLFdBQUFxUCxFQUFBMHFELFFBQUEsQ0FDQSxHQUFBNXZELEdBQUEwRyxNQUFBakQsVUFBQXhMLE1BQUFqQyxLQUFBcUksVUFDQTJCLEdBQUE1QyxLQUFBd3NELElBQUFyQixnQkFBQWp6RCxFQUFBNFAsRUFBQTBxRCxPQUFBNzNELE1BQUE1RCxLQUFBNkwsSUFHQSxNQUFBMUssR0FFQSxRQUFBNDJELEdBQUFvRSxFQUFBQyxFQUFBdkIsR0FDQSxJQUFBLEdBQUF3QixHQUFBQyxFQUFBdnJELEVBQUEwaUQsT0FBQTJJLEVBQUFBLEVBQUF0NEQsTUFBQSxFQUFBLEdBQUF5NEQsR0FBQSxFQUFBQyxFQUFBM0IsSUFBQWgzRCxFQUFBZzNELEVBQUExakQsTUFBQSxRQUFBdlYsRUFBQSxFQUFBQSxFQUFBNDZELEVBQUExN0QsT0FBQWMsS0FBQSxLQUFBeTZELEVBQUFGLEVBQUFwNkQsUUFBQXk2RCxFQUFBNTZELE1BQUF1NkQsRUFBQW5qRCxPQUFBcWpELEVBQUEsRUFDQSxLQUFBLEdBQUF0QixHQUFBLEVBQUFBLEVBQUFvQixFQUFBcjdELE9BQUFpNkQsSUFBQSxJQUFBLElBQUFueEIsRUFBQXpnQyxRQUFBZ3pELEVBQUFwQixHQUFBdUIsR0FBQSxDQUNBQyxHQUFBLENBQ0EsT0FFQSxNQUFBQSxHQUVBLFFBQUFsRixHQUFBdjhCLEVBQUE4MkIsRUFBQXdFLEVBQUFxRyxFQUFBQyxFQUFBQyxHQUNBLFFBQUFDLEdBQUFDLEdBQ0EsR0FBQS8wRCxHQUFBOHFELEVBQUFpSyxFQUFBQyxNQUFBRCxFQUFBMTJELElBQUEsR0FBQTAyRCxFQUFBQyxNQUFBRCxFQUFBMTJELEtBQUEsRUFBQTAyRCxFQUFBMTJELElBQUEwMkQsRUFBQUMsTUFBQSxHQUFBRCxFQUFBMTJELElBQUEwMkQsRUFBQUMsT0FBQSxDQUNBLE9BQUFoMUQsSUFBQSxJQUFBKzBELEVBQUFDLE9BQUFELEVBQUExMkQsTUFBQXN2RCxJQUFBakIsV0FBQSxPQUFBMXNELEVBRUEsUUFBQWkxRCxHQUFBamtDLEVBQUE4NEIsRUFBQXdFLEdBQ0EsR0FBQTRHLElBQUEsQ0FDQSxPQUFBcHpCLEdBQUFubkMsS0FBQWkxRCxFQUFBNStCLEdBQUEsU0FBQTY3QixFQUFBMkcsR0FDQSxJQUFBLEdBQUFyNUQsR0FBQXE1RCxFQUFBNTRELE1BQUF1NkQsRUFBQXJMLEVBQUEsRUFBQSxFQUFBc0wsRUFBQSxHQUFBdDdELEVBQUFLLEVBQUF1NUQsWUFBQTU1RCxFQUFBcTdELEVBQUFyN0QsSUFBQXM3RCxHQUFBQyxFQUFBcmtDLEdBQUFsM0IsRUFBQSxHQUNBLElBQUFnd0QsSUFBQXNMLEdBQUF0TCxHQUFBK0osR0FBQSxJQUFBLEtBQUFxQixFQUFBLE1BQUEvNkQsRUFBQTRILEdBQUE1SCxFQUFBNEgsR0FBQTVILEtBQUFpN0QsRUFBQXpILElBQUEzOEIsRUFBQXM5QixFQUFBcmxELEVBQUE2ckQsRUFBQTloQyxLQUFBODJCLElBQUEzdkQsRUFBQSt6RCxLQUFBcEUsSUFBQTdnRCxFQUFBK3FELDRCQUFBLEtBQUE3NUQsRUFBQSt6RCxNQUNBcEUsRUFBQWdFLEVBQUE5OEIsRUFBQTcyQixHQUFBLElBQUFBLEVBQUErekQsSUFDQWw3QixJQUFBaEMsSUFDQSxDQUNBLEdBQUEzM0IsR0FBQTY3RCxFQUFBcEwsSUFBQS90RCxFQUFBbTVELEVBQUFwTCxFQUFBQSxDQUNBendELEdBQUFBLElBQUE0UCxFQUFBK3FELDJCQUFBLE9BQUE3NUQsRUFBQTRILEdBQUErckQsRUFBQTk4QixFQUFBNzJCLEdBQUEsSUFBQUEsRUFBQSt6RCxJQUFBNzBELENBQ0EsSUFBQWk4RCxHQUFBdGtDLEVBQUF1a0MsRUFBQTFCLEdBQ0EsSUFBQXFCLEVBQUFsd0QsU0FBQWpKLElBQUErbEMsRUFBQXAzQixRQUFBd3FELEVBQUFsd0QsVUFBQWt3RCxFQUFBbHdELFFBQUFrd0QsRUFBQWx3RCxTQUNBODhCLEVBQUFubkMsS0FBQXU2RCxFQUFBbHdELE9BQUFpTSxLQUFBLFNBQUErRCxFQUFBQyxHQUNBLE1BQUFBLEdBQUFELElBQ0EsU0FBQTYzQyxFQUFBMEUsR0FDQTVDLEVBQUE0QyxFQUFBQSxFQUFBLEdBQUEsTUFDQTJELEVBQUF0bEMsU0FBQTd6QixJQUFBK2xDLEVBQUFwM0IsUUFBQXdxRCxFQUFBdGxDLFVBQUFzbEMsRUFBQXRsQyxRQUFBc2xDLEVBQUF0bEMsU0FDQWtTLEVBQUFubkMsS0FBQXU2RCxFQUFBdGxDLE9BQUEzZSxLQUFBLFNBQUErRCxFQUFBQyxHQUNBLE1BQUFELEdBQUFDLElBQ0EsU0FBQTQzQyxFQUFBMEUsR0FDQWhDLEVBQUFnQyxFQUFBditCLElBQUF1K0IsRUFBQXpILEdBQUEsRUFBQTZLLE1BQ0FPLEVBQUFuQixrQkFBQSxDQUNBLEdBQUF5QixHQUFBTixFQUFBbkIsaUJBQ0EsSUFBQUEsR0FBQSxJQUFBeUIsRUFBQUEsRUFBQUEsRUFBQXAzRCxNQUFBbzNELEVBQUFuM0QsSUFBQWszRCxHQUNBTCxFQUFBbGlDLE1BQUFqM0IsR0FBQW01RCxFQUFBcEwsSUFBQS90RCxFQUFBLE1BQUFtNUQsR0FBQWxpQyxJQUFBMDZCLEtBQ0EsQ0FDQSxLQUFBNEgsRUFBQUosRUFBQWxpQyxNQUFBajNCLEVBQUFtNUQsRUFBQWxpQyxJQUFBaEMsS0FBQUEsRUFBQSxNQUFBa2tDLEdBQUFwekIsRUFBQXQrQixPQUFBMHhELEVBQUEzRixFQUFBK0YsRUFBQWo4RCxHQUFBLEVBQUFzN0QsS0FDQSxNQUNBLEtBQUEsSUFBQU8sR0FBQUEsRUFBQWxpQyxNQUFBajNCLEdBQUFtNUQsRUFBQWxpQyxNQUFBaEMsSUFBQXNrQyxFQUFBSixFQUFBbGlDLElBQ0ErZ0MsRUFBQS9pQyxFQUFBc2tDLEVBQUF6QixJQUFBNzNELFNBQUFzNUQsSUFBQXRrQyxHQUFBLE1BQUFra0MsR0FBQXB6QixFQUFBdCtCLE9BQUEweEQsRUFBQTNGLEVBQUErRixFQUFBajhELEdBQUEsS0FDQSxDQUNBLFNBQUEsSUFBQTY3RCxHQUFBQSxFQUFBbGlDLE1BQUFqM0IsR0FBQW01RCxFQUFBcEwsSUFBQS90RCxLQUFBOHdELEVBQUEsR0FBQXNCLEdBQUEsR0FDQXNILEVBQUFILEVBQUF4ekIsRUFBQXQrQixVQUFBZ3dELEdBQ0F0MkMsTUFBQXkyQyxFQUFBdDZELEVBQUFjLEVBQUFtN0QsS0FDQVgsRUFBQUcsRUFBQTloQyxNQUFBa2lDLEdBQUEsSUFBQSxNQUVBQSxFQUVBLFFBQUFPLEdBQUF6aUMsRUFBQTBpQyxFQUFBZixFQUFBRyxHQUNBLEdBQUFBLEdBQUE3ckQsRUFBQTBzRCxZQUFBaEksSUFBQXJCLGVBQUF0NUIsS0FBQWozQixHQUFBNDRELElBQUE1NEQsRUFBQSxDQUNBLEdBQUFqQyxHQUFBZzFELEVBQUFodEIsRUFBQXQrQixRQUFBLEtBQUFtcUQsSUFBQXJCLGdCQUFBbUIsRUFBQUMsRUFBQTN4RCxHQUFBLEVBQ0EsS0FBQWpDLEVBQUFrNUIsRUFBQWw1QixHQUFBMnpELEVBQUEzekQsVUFBQTZ6RCxLQUFBckIsZUFBQXh5RCxFQUNBNnpELEtBQUFyQixlQUFBdDVCLEdBQUE4TyxFQUFBdCtCLFFBQUEsS0FBQWt5RCxFQUNBLElBQUFyMUQsR0FBQSt2RCxHQUFBLEVBQUF3RixFQUFBakksSUFBQXJCLGVBQUF5QyxHQUFBLEVBQUE4RyxFQUFBbEksSUFBQWpCLFVBQ0EsS0FBQTV5RCxFQUFBdUcsRUFBQTJ5QixFQUFBbDVCLEdBQUEyekQsRUFBQTN6RCxJQUFBLENBQ0EsR0FBQXd2QixHQUFBd2xDLEVBQUFoMUQsRUFDQSxJQUFBd3ZCLElBQUF2dEIsRUFBQSxJQUFBLEdBQUFrekQsR0FBQTV1RCxFQUFBNHVELEVBQUF0QixJQUFBakIsYUFBQSxPQUFBcGpDLEVBQUExdUIsTUFBQW1ILElBQUE2ekQsRUFBQTk3RCxNQUFBLElBQUE4N0QsRUFBQTk3RCxHQUFBYyxNQUFBbTFELHFCQUFBLElBQUE2RixFQUFBOTdELEdBQUFjLE1BQUFvMEQsY0FBQSxNQUFBMWxDLEVBQUExdUIsTUFBQW1ILEtBQUEsQ0FDQSxHQUFBa3RELEtBQUEsSUFBQUYsR0FBQUQsRUFBQUcsSUFBQUgsRUFBQUcsR0FBQXIwRCxNQUFBc3pELE1BQUE1a0MsRUFBQTF1QixNQUFBc3pELElBQUFQLElBQUFyQixlQUFBMkMsR0FBQW50QixFQUFBdCtCLFFBQUEsS0FBQXNyRCxFQUFBRyxJQUNBdEIsSUFBQXJCLGVBQUEyQyxHQUFBL3hDLE1BQUFvTSxFQUFBcE0sTUFBQTQ0QyxFQUFBN0csR0FDQTV1RCxFQUFBNHVELEVBQUFtQixHQUFBLE1BQUEsSUFBQWQsRUFBQUwsRUFBQTNsQyxFQUFBMXVCLE1BQUFzekQsS0FBQSxDQUNBLEdBQUFwakQsR0FBQXlrRCxFQUFBTixFQUFBM2xDLEVBQUFwTSxPQUFBLEdBQUEsRUFDQWt6QyxJQUFBLElBQUF0bEQsRUFBQXpLLEVBQUF5SyxFQUFBb3BELE9BQUFwcEQsRUFBQThrQixPQUFBODlCLElBQUF1QixFQUNBRixHQUFBLE1BQ0EsTUFBQXFCLEdBQUEsSUFBQTltQyxFQUFBb2xDLGlCQUFBTyxHQUFBdEIsSUFBQWpCLFdBQUEsRUFBQSxLQUNBLElBQUFpQixJQUFBakIsV0FBQW1KLElBQUFsSSxJQUFBakIsV0FBQW1KLEdBQ0F6RixFQUFBLE1BRUEsSUFBQUEsRUFBQSxNQUVBLElBQUFBLEVBQUEsTUFBQXpDLEtBQUFyQixlQUFBeHFCLEVBQUF0K0IsUUFBQSxLQUFBc3JELEdBQ0FYLEdBQUEsSUFBQSxNQUNBUixLQUFBckIsZUFBQXQ1QixHQUFBOE8sRUFBQXQrQixRQUFBLEtBQUFreUQsRUFDQSxPQUFBdkgsSUFBQSxJQUFBLEVBRUEsUUFBQTJILEdBQUFDLEdBQ0EsSUFBQSxHQUFBQyxHQUFBRCxFQUFBLEVBQUFDLEdBQUEsSUFBQXJJLElBQUFyQixlQUFBMEosR0FBQUEsS0FDQSxHQUFBQyxHQUFBQyxDQUNBLEtBQUFGLElBQUFBLEVBQUFELEVBQUFDLElBQUFySSxJQUFBckIsZUFBQTBKLEtBQUFqNkQsS0FBQSxJQUFBa04sRUFBQStrRCxZQUFBL2tELEVBQUEra0QsV0FBQWdJLEtBQUEsTUFBQUUsRUFBQXRHLEVBQUFvRyxFQUFBakksRUFBQWlJLEVBQUEsR0FBQXBJLFFBQUFvSSxFQUFBLEdBQUFoNkQsU0FBQWs2RCxFQUFBbDlELE9BQUEsR0FBQTRCLE1BQUFzekQsS0FBQWdJLEVBQUEvOEMsT0FDQTg4QyxFQUFBekcsRUFBQTBHLE1BQUFELEVBQUFyN0QsTUFBQXN6RCxNQUFBamxELEVBQUFrdEQsNkJBQUE5RyxFQUFBMkcsR0FBQSxJQUFBbDBCLEVBQUF6Z0MsUUFBQTRILEVBQUFtdEQsV0FBQXZDLEtBQUFtQyxHQUFBQyxFQUFBcjdELE1BQUFtSCxJQUFBazBELEVBQUFyN0QsTUFBQW1ILEdBQUE1SCxLQUFBMnpELEVBQUFrSSxHQUFBckksSUFBQXFJLEdBQUEsRUFBQS9zRCxNQUFBLEtBQUE2QixFQUFBbXFELEVBQUFlLEVBQUFsSSxFQUFBa0ksRUFBQUMsRUFBQXI3RCxPQUFBLEtBQUEsTUFBQXE3RCxFQUFBcjdELE1BQUFtSCxHQUFBazBELEVBQUFyN0QsTUFBQXN6RCxJQUFBLEtBQUFKLEVBQUFrSSxHQUFBbEksRUFBQWtJLEdBQUFuQyxJQUFBbUMsS0FBQSxNQUFBckksSUFBQXJCLGVBQUF4aEQsRUFBQWtvQixLQUFBZ2pDLEdBQUF0SCxnQkFBQSxJQUVBSixHQUFBLElBQUFBLENBQ0EsSUFBQXlILEdBQUEvaUMsQ0FDQUEsR0FBQWdpQyxRQUFBajVELElBQUFnNkQsRUFBQWpMLElBQUFnSyxFQUFBOWhDLEdBQUFBLEVBQUEzMEIsSUFBQTIwQixFQUFBZ2lDLE1BQ0EsSUFBQWxxRCxJQUFBLEVBQUFna0QsRUFBQWh0QixFQUFBdCtCLFFBQUEsS0FBQW1xRCxJQUFBckIsZUFDQSxJQUFBeHFCLEVBQUFsb0MsV0FBQXFQLEVBQUFvdEQsaUJBQUEvSCxJQUFBLElBQUFxRyxJQUFBLElBQUFFLElBQUEvcEQsRUFBQTdCLEVBQUFvdEQsY0FBQXhDLElBQUFrQyxFQUFBak0sRUFBQWdMLEVBQUE5aEMsR0FBQS9wQixLQUNBLElBQUE2QixFQUFBLENBQ0EsR0FBQWdyRCxFQUFBQyxHQUFBakIsRUFBQTloQyxLQUFBc2pDLEVBQUF2NkQsRUFBQXV1RCxFQUFBaDlCLFFBQUFpcEMsT0FBQXZqQyxHQUFBLEdBQUEsR0FDQStpQyxFQUFBcEksSUFBQXQ2QixHQUFBMGlDLEVBQUFwSSxJQUFBakIsYUFBQXVCLElBQUFseUQsR0FBQWc2RCxFQUFBOUgsS0FBQW5qRCxFQUFBbXFELEVBQUFjLEVBQUFqTSxFQUFBd0UsS0FDQUEsSUFBQSxJQUFBcUcsS0FBQSxJQUFBN3BELElBQUEsSUFBQStwRCxHQUFBLENBQ0EsR0FBQTJCLEdBQUE3SSxJQUFBckIsZUFBQXlKLEVBQ0EsS0FBQVMsR0FBQSxPQUFBQSxFQUFBNTdELE1BQUFtSCxJQUFBeTBELEVBQUE1N0QsTUFBQXN6RCxNQUFBcEUsR0FBQUEsSUFBQTdnRCxFQUFBK3FELDJCQUNBLElBQUEvcUQsRUFBQTBzRCxZQUFBaEksSUFBQXJCLGVBQUFtSyxFQUFBVixNQUFBaDZELEtBQUFzekQsRUFBQTBHLEdBQUEsR0FBQSxJQUFBLEdBQUFXLEdBQUFYLEVBQUEsRUFBQVksRUFBQUYsRUFBQVYsR0FBQVcsR0FBQUMsRUFBQUQsSUFBQSxJQUFBLEtBQUE1ckQsRUFBQW1xRCxFQUFBeUIsRUFBQTVNLEVBQUF3RSxJQUFBLEVBQ0EsU0FBQS9oQixFQUFBb1gsR0FDQSxHQUFBaVQsR0FBQWpKLElBQUFyQixlQUFBM0ksRUFDQSxJQUFBaVQsRUFBQSxJQUFBLEdBQUFDLEdBQUFELEVBQUFoSixRQUFBa0osRUFBQUQsRUFBQTc5RCxPQUFBKzlELEVBQUF4cUIsRUFBQXdxQixFQUFBcFQsRUFBQW9ULElBQUEsR0FBQXBKLElBQUFyQixlQUFBeUssS0FBQWg3RCxJQUFBc3pELEVBQUEwSCxHQUFBLEdBQUEsQ0FDQSxHQUFBdEssR0FBQW1ELEVBQUFtSCxHQUFBLzZELFFBQUFtMUQsRUFBQTNCLEVBQUEvQyxHQUFBLEdBQUF1SyxHQUFBLENBQ0EsTUFBQXZLLEVBQUFBLEVBQUF6ekQsT0FBQSxHQUFBNEIsTUFBQXN6RCxLQUFBekIsRUFBQXR6QyxNQUFBMm9CLEVBQUFubkMsS0FBQTh4RCxFQUFBLFNBQUFJLEVBQUEyRyxHQUNBLElBQUEsR0FBQTE1RCxHQUFBLEVBQUFBLEVBQUFnOUQsRUFBQWg5RCxJQUFBLENBQ0EsR0FBQTA1RCxFQUFBNUYsUUFBQTl6RCxLQUFBaUMsSUFBQWswRCxFQUFBdUQsRUFBQTVGLFFBQUE5ekQsR0FBQWdXLFdBQUFULE1BQUEsS0FBQXduRCxFQUFBLzhELEdBQUFnVyxXQUFBVCxNQUFBLEtBQUFta0QsRUFBQVQsSUFBQSxDQUNBLEdBQUFrRSxHQUFBSixFQUFBLzhELEdBQUFvOUQsRUFBQS9GLEVBQUF2RCxRQUFBOXpELEdBQUFxOUQsRUFBQTNELEVBQUE1RixRQUFBOXpELEVBQ0FtOUQsR0FBQUMsRUFBQXh3RCxLQUFBZ2xDLElBQUF1ckIsRUFBQUUsS0FBQWhHLEVBQUFxQyxFQUNBLE9BRUF3RCxFQUFBbDlELElBQUFrOUQsRUFBQWw5RCxFQUFBcTNELEVBQUFxQyxPQUVBckMsRUFBQXJ2QixFQUFBdCtCLFVBQUEydEQsR0FDQWowQyxNQUFBNHdDLEVBQUFpSixFQUFBNUYsRUFBQXYyRCxPQUFBLElBQUF1MkQsRUFBQXYyRCxNQUFBc3pELE9BQ0FRLGdCQUFBLEVBQUErRyxFQUFBc0IsRUFBQTVGLEdBQUEsR0FBQXhELElBQUFyQixlQUFBM0ksR0FBQTVuRCxFQUNBazVELEVBQUF0UixFQUFBaVQsRUFBQTE1QyxPQUFBLEtBRUE2NEMsRUFBQWpyRCxFQUFBa29CLE1BQUFqM0IsRUFBQStPLEVBQUFrb0IsSUFBQTBqQyxHQUFBWCxFQUFBVyxDQUNBLFlBRUE1ckQsSUFDQW9wRCxNQUFBdUMsRUFBQVYsS0FHQSxJQUFBanJELEdBQUE3QixFQUFBMGpELGFBQUEyQixJQUFBLElBQUFzRyxJQUFBOXBELEVBQUEsU0FBQWtvQixFQUFBODJCLEVBQUF3RSxHQUNBLEdBQUE4SSxHQUFBdEgsRUFBQXVILEVBQUFDLEVBQUF4OUQsRUFBQXk5RCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBNTFCLEVBQUF0K0IsUUFBQSxLQUFBbXFELElBQUFyQixnQkFBQXFMLEdBQUEsRUFBQUMsRUFBQWxLLEdBQ0EsS0FBQTRKLEVBQUEzSixJQUFBckIsZUFBQXNMLEdBQUFBLEdBQUEsRUFBQUEsSUFBQSxJQUFBUCxFQUFBMUosSUFBQXJCLGVBQUFzTCxLQUFBUCxFQUFBdkgsY0FBQS96RCxFQUFBLENBQ0EsR0FBQXE3RCxFQUFBUSxFQUFBOUgsRUFBQW5DLElBQUFyQixlQUFBOEssR0FBQXRILFlBQ0F3SCxFQUFBMUosUUFBQXlKLEVBQUF2SCxlQUFBdUgsRUFBQXpKLFFBQUF5SixFQUFBdkgsYUFBQSxLQUNBd0gsR0FBQUQsRUFFQSxHQUFBdkgsSUFBQS96RCxFQUFBLENBQ0EwN0QsRUFBQXJoQyxTQUFBZ2hDLEVBQ0EsSUFBQVMsR0FBQVAsRUFBQTFKLFFBQUEwSixFQUFBeEgsYUFBQUEsS0FBQS96RCxFQUFBdTdELEVBQUExSixRQUFBMEosRUFBQXhILGFBQUFBLEdBQUEwSCxFQUFBLEVBQ0FLLEdBQUE3K0QsT0FBQSxJQUFBNitELEVBQUFBLEVBQUF4b0QsTUFBQSxLQUFBLEdBQ0EsSUFBQXlvRCxHQUFBbkssSUFBQXJCLGVBQUFtTCxHQUFBampCLEVBQUFtWixJQUFBckIsZUFBQW1MLEVBQUEsRUFDQTMxQixHQUFBbm5DLEtBQUFpMUQsRUFBQTZILEVBQUFqakIsRUFBQUEsRUFBQW9aLFFBQUE3eEQsRUFBQTA3RCxFQUFBLEdBQUEsU0FBQTVLLEVBQUExeUQsR0FDQXE5RCxFQUFBcjlELEVBQUF5ekQsUUFBQWtDLEdBQUEzMUQsRUFBQXl6RCxRQUFBa0MsR0FBQWhnRCxXQUFBVCxNQUFBLE9BQ0EsS0FBQSxHQUFBMG9ELEdBQUEsRUFBQUEsRUFBQVAsRUFBQXgrRCxPQUFBKytELElBQUEsQ0FDQSxHQUFBQyxNQUFBQyxFQUFBLEVBQUFDLEVBQUEsRUFBQUMsR0FBQSxDQUNBLElBQUFOLEVBQUFMLEVBQUFPLEtBQUE1OUQsRUFBQTQ0RCxLQUFBaDNELElBQUEsSUFBQStsQyxFQUFBemdDLFFBQUFtMkQsRUFBQU8sR0FBQTU5RCxFQUFBNDRELEdBQUExakQsTUFBQSxRQUFBLElBQUF5eUIsRUFBQXpnQyxRQUFBdzJELEVBQUEvbkQsV0FBQTBuRCxJQUFBLENBQ0E3SixJQUFBckIsZUFBQW1MLEdBQUEzMUIsRUFBQXQrQixRQUFBLEtBQUFySixFQUNBLElBQUFpK0QsR0FBQXpLLElBQUFyQixlQUFBbUwsR0FBQTdKLE9BQ0EsS0FBQUQsSUFBQXJCLGVBQUFtTCxHQUFBN0osUUFBQWtDLEdBQUExNUIsU0FBQW9oQyxFQUFBTyxJQUNBLE1BQUE1OUQsRUFBQVMsTUFBQW1ILElBQUErMUQsRUFBQTU2QyxRQUFBL2lCLEVBQUFTLE1BQUFzekQsTUFBQWlLLEdBQUEsR0FDQSxJQUFBTCxFQUFBcEosZ0JBQUFzSixFQUFBNzJELEtBQUEyMkQsRUFBQTU2QyxRQUNBZzdDLElBQUF2SyxJQUFBckIsZUFBQW1MLEdBQUEvSSxnQkFBQSxjQUFBdjBELEtBQUFBLEVBQUFTLE1BQUFzekQsS0FDQVAsSUFBQXJCLGVBQUFtTCxHQUFBdjZDLE1BQUEvaUIsRUFBQVMsTUFBQXN6RCxLQUFBUCxJQUFBckIsZUFBQW1MLEdBQUF2NkMsTUFBQTQ2QyxFQUFBNTZDLE1BQ0FwakIsRUFBQTI5RCxFQUFBLEVBQUEzOUQsRUFBQTR6RCxFQUFBM3hELEdBQUEsR0FBQSxFQUFBakMsS0FBQXk5RCxFQUFBNUosSUFBQXJCLGVBQUF4eUQsTUFBQSxJQUFBeTlELEVBQUE3SSxnQkFBQSxjQUFBdjBELEtBQUFvOUQsRUFBQXI2QyxPQUFBODZDLEVBQUE3MkQsS0FBQW8yRCxFQUFBcjZDLE9BQUFwakIsRUFBQWs1QixHQUFBaWxDLFVBQ0F0SyxLQUFBckIsZUFBQXh5RCxFQUNBLEtBQUFxK0QsR0FBQUgsRUFBQSxLQUFBNzlELEVBQUFTLE1BQUFzekQsS0FBQThKLEVBQUF4cEQsUUFDQTIvQyxHQUFBLEdBQUF3SixHQUFBLEVBQUFLLEVBQUFoL0QsT0FBQSxHQUFBLENBQ0EsR0FBQWtrQixHQUFBODZDLEVBQUF4cEQsT0FDQSxJQUFBME8sSUFBQWpVLEVBQUErcUQsNkJBQUEyRCxFQUFBcEksRUFBQTdCLEVBQUEzeEQsR0FBQSxHQUFBLEVBQUFtaEIsR0FBQSxFQUFBeTNDLEdBQUEsSUFBQSxNQUVBLEdBQUFnRCxFQUFBLENBQ0FoSyxJQUFBckIsZUFBQW1MLEdBQUE3SixRQUFBd0ssQ0FDQSxJQUFBQyxHQUFBM0ssRUFBQTE2QixHQUFBLENBQ0EsS0FBQWw1QixFQUFBMjlELEVBQUEsRUFBQTM5RCxFQUFBNHpELElBQUEsRUFBQTV6RCxNQUFBeTlELEVBQUE1SixJQUFBckIsZUFBQXh5RCxNQUFBaUMsR0FBQSxNQUFBdzdELEVBQUEzOEQsTUFBQW1ILEtBQUFqSSxFQUFBazVCLEdBQUFrbEMsRUFBQUQsSUFBQUMsR0FDQVAsR0FBQXBJLEdBQUF2OEIsR0FBQWtsQyxFQUFBRCxHQUFBSSxFQUFBQSxFQUFBcmxDLEVBQUE4MkIsRUFBQXdFLEVBQUFxRyxHQUFBLEdBRUEsR0FBQWdELEVBQUEsT0FBQSxDQUNBeEosS0FBQVIsSUFBQXJCLGVBQUF4cUIsRUFBQXQrQixRQUFBLEtBQUFrMEQsT0FLQSxNQUFBQyxJQUNBNUIsRUFBQWpNLEVBQUF3RSxLQUFBLElBQUF4akQsSUFBQUEsR0FDQWtvQixJQUFBK2lDLElBR0EsR0FBQWowQixFQUFBbG9DLFdBQUFxUCxFQUFBcXZELGtCQUFBLElBQUF4dEQsSUFBQXdqRCxJQUFBLElBQUFxRyxJQUFBLElBQUFFLEVBQUEsQ0FDQSxHQUFBMEQsR0FBQXR2RCxFQUFBcXZELGVBQUF6RSxHQUFBLEdBQUEvb0QsRUFBQTdCLEVBQ0EsSUFBQXN2RCxFQUFBeEUsbUJBQUF3RSxFQUFBL0wsT0FBQSxDQUNBLEdBQUFnSixHQUFBK0MsRUFBQXhFLGlCQUNBQSxJQUFBLElBQUF5QixFQUFBQSxFQUFBQSxFQUFBcDNELE1BQUFvM0QsRUFBQW4zRCxJQUFBazZELEVBQUEvTCxRQUVBMWhELEdBQUEsSUFBQXl0RCxFQUFBenRELEVBQUF5dEQsRUFFQSxNQUFBenRELElBQUFBLEVBQUFrb0IsTUFBQWozQixJQUFBK08sRUFBQWtvQixJQUFBK2lDLElBQUEsSUFBQWpyRCxJQUFBLElBQUErcEQsSUFBQTFHLEdBQUEsR0FDQVIsSUFBQXJCLGVBQUF4cUIsRUFBQXQrQixRQUFBLEtBQUFzckQsSUFBQWhrRCxFQUVBLFFBQUF1a0QsR0FBQXI4QixFQUFBczdCLEdBQ0EsR0FBQW4wRCxHQUFBNHpELEVBQUEvNkIsR0FBQXA0QixLQUNBLElBQUEsS0FBQVQsRUFBQSt6RCxNQUFBL3pELEVBQUFnMkQsRUFBQW45QixHQUFBcDRCLE9BQUEsTUFBQVQsRUFBQTRILEdBQUEsTUFBQTVILEdBQUE0SCxFQUNBLEtBQUEsSUFBQXVzRCxHQUFBdDdCLEdBQUEsRUFBQSxDQUNBLEdBQUF5NUIsR0FBQW1ELEVBQUE1OEIsRUFDQSxPQUFBeTVCLEdBQUF6ekQsT0FBQSxHQUFBLEtBQUF5ekQsRUFBQUEsRUFBQXp6RCxPQUFBLEdBQUE0QixNQUFBc3pELElBQUEsRUFBQSxHQUVBLE9BQUEsRUFFQSxRQUFBdUksR0FBQXpqQyxFQUFBd2xDLEdBQ0EsR0FBQUMsR0FBQTlLLElBQUFqQixVQUNBLElBQUExNUIsR0FBQXlsQyxFQUFBLE1BQUFBLEVBQ0EsSUFBQXpuQyxHQUFBZ0MsQ0FDQSxLQUFBNDhCLEVBQUE2SSxFQUFBLEdBQUF6L0QsT0FBQSxJQUFBazBELEdBQUEsRUFBQXVMLEVBQUEsR0FBQSxHQUFBQSxFQUFBOUssSUFBQWpCLGNBQUExN0IsRUFBQXluQyxLQUFBLElBQUFELEtBQUEsSUFBQXJJLEVBQUFuL0IsR0FBQXAyQixNQUFBbzFELGlCQUFBWCxFQUFBcitCLE1BQUEsSUFBQXduQyxJQUFBbkosRUFBQXIrQixNQUNBLE1BQUFBLEdBRUEsUUFBQTBuQyxHQUFBMWxDLEVBQUF3bEMsR0FDQSxHQUFBL0wsR0FBQXo3QixFQUFBZ0MsQ0FDQSxJQUFBaEMsR0FBQSxFQUFBLE1BQUEsRUFDQSxRQUFBQSxFQUFBLEtBQUEsSUFBQXduQyxJQUFBLElBQUFySSxFQUFBbi9CLEdBQUFwMkIsTUFBQW8xRCxpQkFBQSxJQUFBd0ksSUFBQW5KLEVBQUFyK0IsTUFBQXk3QixFQUFBbUQsRUFBQTUrQixJQUFBaDRCLE9BQUEsR0FBQSxJQUFBeXpELEVBQUF6ekQsUUFBQSxLQUFBeXpELEVBQUEsR0FBQTd4RCxNQUFBc3pELFFBQ0EsTUFBQWw5QixHQUVBLFFBQUFxa0MsR0FBQXJrQyxHQUNBLE1BQUEyOEIsS0FBQXJCLGVBQUF0N0IsS0FBQWoxQixFQUFBK3hELEVBQUE5OEIsR0FBQTI4QixJQUFBckIsZUFBQXQ3QixHQUFBOVQsTUFFQSxRQUFBeTdDLEdBQUF6N0MsRUFBQXN2QyxFQUFBb00sRUFBQTEyRCxFQUFBMjJELEdBQ0EsR0FBQTMyRCxHQUFBNC9CLEVBQUFsb0MsV0FBQXFQLEVBQUE2dkQsZUFBQSxDQUNBLEdBQUFodUQsR0FBQTdCLEVBQUE2dkQsY0FBQS8rRCxLQUFBZy9ELEVBQUE3MkQsRUFBQXNxRCxFQUFBb00sRUFBQTN2RCxFQUNBLElBQUE2QixFQUFBLENBQ0EsR0FBQUEsRUFBQWlwRCxrQkFBQSxDQUNBLEdBQUF5QixHQUFBMXFELEVBQUFpcEQsaUJBQ0FBLElBQUEsSUFBQXlCLEVBQUFBLEVBQUFBLEVBQUFwM0QsTUFBQW8zRCxFQUFBbjNELElBQUF5TSxFQUFBMGhELFFBQUFBLEdBQ0FBLEVBQUFxSCxHQUFBLEdBRUErRSxJQUFBNzhELElBQUE2OEQsRUFBQTl0RCxFQUFBb3BELFFBQUFuNEQsRUFBQStPLEVBQUFvcEQsTUFBQTBFLElBR0ExN0MsSUFBQW5oQixJQUFBbWhCLEVBQUE2N0MsVUFBQUMsVUFBQXhNLEVBQUFsZ0QsS0FBQSxLQUFBc3NELElBQUE3OEQsR0FBQW1HLElBQUFuRyxHQUFBLFNBQUFtRyxFQUFBakosS0FBQWdnRSxFQUFBLzdDLEVBQUEwN0MsRUFBQSxJQUFBcE0sRUFBQXh6RCxRQUFBa2dFLEdBQUFoM0QsR0FBQSxVQUFBQSxFQUFBakosS0FBQTZPLFdBQUEsV0FDQW9zRCxFQUFBaDNDLEVBQUEwN0MsSUFDQSxHQUFBMUUsRUFBQWgzQyxFQUFBMDdDLElBQUEsSUFBQUMsSUFBQU0sR0FBQSxFQUNBcjNCLEVBQUE1a0IsR0FBQTJPLFFBQUEsV0FFQSxRQUFBaWlDLEdBQUE5NkIsRUFBQTc0QixFQUFBaS9ELEdBQ0EsSUFBQWovRCxFQUFBQSxHQUFBZzJELEVBQUFuOUIsR0FBQXA0QixPQUFBaXhELGNBQUE5dkQsSUFBQSxJQUFBcTlELEVBQUEsTUFBQXQzQixHQUFBbG9DLFdBQUFPLEVBQUEweEQsYUFBQTF4RCxFQUFBMHhELFlBQUE1aUQsR0FBQTlPLEVBQUEweEQsV0FDQSxJQUFBLE9BQUExeEQsRUFBQTRILEdBQUEsQ0FDQSxHQUFBaXhCLEdBQUEsR0FBQTI2QixJQUFBckIsZUFBQXQ1QixLQUFBajNCLEVBQUEsQ0FDQSxHQUFBczlELEdBQUE1TSxFQUFBbUQsRUFBQTU4QixHQUFBc21DLElBQ0EsSUFBQTdNLEVBQUF6ekQsT0FBQSxHQUFBLEtBQUF5ekQsRUFBQUEsRUFBQXp6RCxPQUFBLEdBQUE0QixNQUFBc3pELElBQUEsRUFBQSxHQUFBLElBQUEsR0FBQXAwRCxHQUFBLEVBQUFBLEVBQUEyeUQsRUFBQXp6RCxPQUFBYyxJQUFBLElBQUEsSUFBQTJ5RCxFQUFBM3lELEdBQUFjLE1BQUFvMEQsY0FBQSxJQUFBdkMsRUFBQTN5RCxHQUFBYyxNQUFBbTFELHFCQUFBLE9BQUF0RCxFQUFBM3lELEdBQUFjLE1BQUFtSCxJQUFBczNELElBQUF0OUQsSUFBQSxJQUFBMHdELEVBQUEzeUQsR0FBQWMsTUFBQW1ILEdBQUE1SCxLQUFBay9ELEVBQUF6K0QsTUFBQXN6RCxJQUFBUCxJQUFBMzZCLEdBQUEsRUFBQS9wQixNQUFBcXdELEVBQUFuNEQsS0FBQXNyRCxFQUFBM3lELElBQ0EsT0FBQTJ5RCxFQUFBM3lELEdBQUFjLE1BQUFtSCxLQUFBczNELEVBQUE1TSxFQUFBM3lELElBQUF3L0QsRUFBQXRnRSxPQUFBLEdBQUEsY0FBQW1CLEtBQUFtL0QsRUFBQSxHQUFBMStELE1BQUFzekQsTUFBQSxNQUFBamxELEdBQUE0aUQsWUFBQXhWLE9BQUFyakIsRUFBQS9wQixFQUFBNGlELFlBQUE3eUQsUUFFQSxNQUFBbUIsR0FBQSt6RCxJQUVBLE1BQUFqbEQsR0FBQTRpRCxZQUFBeFYsT0FBQXJqQixFQUFBL3BCLEVBQUE0aUQsWUFBQTd5RCxRQUVBLFFBQUF1Z0UsR0FBQXI4QyxFQUFBczhDLEVBQUFsTCxFQUFBbUwsRUFBQUMsR0FDQSxRQUFBQyxHQUFBOU0sRUFBQStNLEdBQ0EsT0FBQSxJQUFBaEcsSUFBQTUzRCxNQUFBNndELEVBQUE0SixFQUFBNUosSUFBQXZnRCxLQUFBLElBQUFyUyxRQUFBMi9ELEtBQUF2SyxFQUFBeEMsSUFBQXNELEVBQUF0RCxHQUFBanlELE1BQUFpekQsWUFBQStMLEVBQUF2akIsT0FBQXVqQixFQUFBNWdFLE9BQUEsR0FFQSxHQUFBNmdFLEdBQUFKLEVBQUF6OUQsUUFBQTQ5RCxFQUFBLEdBQUFFLEdBQUEsRUFBQWh2RCxFQUFBL08sQ0FDQSxJQUFBb3lELElBQUFHLElBQUEsSUFBQXJsRCxFQUFBOHdELFdBQUFELEVBQUFyRCxFQUFBcUQsT0FBQSxDQUNBLEdBQUFFLEdBQUFwRyxJQUFBNTNELE1BQUEsRUFBQXk2RCxHQUFBLElBQUFucUQsS0FBQSxJQUFBN0YsRUFBQW96RCxFQUFBdnRELEtBQUEsSUFBQTFSLE1BQUEsR0FBQTJmLFFBQUEsSUFBQSt2QyxFQUFBMlAsWUFBQUQsR0FBQSxLQUNBdnpELElBQUFBLEVBQUF6TixPQUFBLElBQUE2Z0UsRUFBQTNvRCxPQUFBLEVBQUF6SyxFQUFBek4sT0FBQWdoRSxFQUFBaGhFLFFBQ0E4Z0UsRUFBQXJELEVBQUFxRCxJQUVBLElBQUEsSUFBQUEsR0FBQW5NLElBQUF0NkIsRUFBQW9qQyxFQUFBcUQsR0FBQUEsRUFBQSxHQUFBbk0sSUFBQXQ2QixFQUFBeW1DLEVBQ0FoNEIsRUFBQW5uQyxLQUFBay9ELEVBQUEsU0FBQWhOLEVBQUF4L0IsR0FDQSxHQUFBQSxJQUFBdHhCLEVBQUEsR0FBQTR4RCxJQUFBckIsZUFBQU8sS0FBQTl3RCxHQUFBODlELEVBQUFoTixLQUFBaUIsRUFBQWpCLElBQUF3QyxFQUFBeEMsR0FBQSxLQUFBLElBQUEwQyxFQUFBMUMsRUFBQWdOLEVBQUFoTixJQUFBLEVBQUE5d0QsRUFBQUEsR0FBQSxHQUFBNHhELElBQUF0NkIsUUFBQSxDQUNBLEdBQUFtekIsR0FBQSxHQUFBMWtCLEdBQUF2VyxNQUFBLFlBQ0FpN0IsR0FBQWorQyxNQUFBOGtCLEVBQUFuUixXQUFBLEdBQUEwOUMsR0FBQXZzQyxDQUNBLElBQUFvZ0MsR0FBQUMsRUFBQTN4RCxHQUFBLEdBQUE0ekQsRUFBQWhDLElBQUFyQixlQUFBbUIsR0FBQXlNLEVBQUFuTSxFQUFBTixFQUFBLEVBQUFrQyxFQUFBQSxFQUFBL0IsUUFBQTV4RCxRQUFBRCxFQUFBMHhELEVBQ0EsS0FBQWtNLEVBQUFHLEVBQUFGLElBQUF0TCxHQUFBcmxELEVBQUE4d0QsV0FBQSxDQUNBLEdBQUEvbUMsR0FBQXM3QixFQUFBekIsRUFBQSxNQUFBcU4sRUFBQXQvRCxNQUFBbUgsSUFBQW00RCxFQUFBdC9ELE1BQUFvMEQsYUFBQXZCLEVBQUEsRUFBQUUsSUFBQXQ2QixFQUFBbzZCLEVBQUEsRUFBQUUsSUFBQXQ2QixDQUNBdm9CLEdBQUFxdkQsR0FBQUMsY0FBQXJnRSxLQUFBbWpCLEVBQUFzcEMsR0FBQSxHQUFBLEVBQUE4SCxFQUFBdDdCLEdBQ0E4bUMsRUFBQTltQyxFQUFBLEVBQUE0bUMsRUFBQSxPQUNBOXVELEdBQUFxdkQsR0FBQUMsY0FBQXJnRSxLQUFBbWpCLEVBQUFzcEMsR0FBQSxHQUFBLEdBQUEsRUFBQWlILEVBQUEsRUFDQSxLQUFBLElBQUEzaUQsSUFBQXdqRCxHQUFBeHNCLEVBQUFsb0MsV0FBQXFQLEVBQUE2dkQsZUFBQSxDQUNBLEdBQUF1QixHQUFBdnZELENBQ0EsSUFBQUEsRUFBQTdCLEVBQUE2dkQsY0FBQS8rRCxLQUFBZy9ELEVBQUF2UyxFQUFBcU4sSUFBQS9vRCxFQUFBd3ZELGdCQUFBcnhELElBQ0E2QixFQUFBZzNCLEVBQUF0K0IsT0FBQTYyRCxFQUFBdnZELEtBQUFBLEVBQUFpcEQsa0JBQUEsQ0FDQSxHQUFBeUIsR0FBQTFxRCxFQUFBaXBELGlCQUNBQSxJQUFBLElBQUF5QixFQUFBQSxFQUFBQSxFQUFBcDNELE1BQUFvM0QsRUFBQW4zRCxJQUFBeU0sRUFBQTBoRCxRQUNBMkIsR0FBQSxHQUFBcmpELEVBQUFvcEQsUUFBQXZHLElBQUF0NkIsRUFBQXZvQixFQUFBb3BELE1BQUFwcEQsRUFBQXd2RCxnQkFBQXh2RCxFQUFBb3BELFlBSUFzRixFQUFBLENBQ0EsR0FBQVosR0FBQTc4RCxDQUNBakUsR0FBQTRKLGdCQUFBd2IsR0FBQXBTLElBQUE4dEQsRUFBQTN2RCxFQUFBOGhELGFBQUEyTixFQUFBNXRELEVBQUF3dkQsaUJBQUF4dkQsRUFBQXd2RCxpQkFDQTNCLEVBQUF6N0MsRUFBQTIyQyxJQUFBK0UsRUFBQWMsR0FBQSxHQUFBNTNCLEdBQUF2VyxNQUFBLFlBQUFtdUMsR0FBQSxVQUFBQSxFQUFBemdFLE9BR0EsUUFBQXNoRSxHQUFBcjlDLEdBQ0EsR0FBQUEsRUFBQSxDQUNBLEdBQUFBLEVBQUE2N0MsWUFBQWg5RCxFQUFBLE1BQUFtaEIsR0FBQTdoQixLQUNBNmhCLEdBQUE2N0MsV0FBQTc3QyxFQUFBNjdDLFVBQUFyTyxjQUFBeVAsR0FBQUssY0FBQXpnRSxLQUFBbWpCLEdBRUEsR0FBQXU5QyxNQUFBN0UsRUFBQWpJLElBQUFyQixjQUNBLEtBQUEsR0FBQTBKLEtBQUFKLEdBQUFBLEVBQUFJLEdBQUFwN0QsT0FBQSxNQUFBZzdELEVBQUFJLEdBQUFwN0QsTUFBQW1ILElBQUEwNEQsRUFBQXQ1RCxLQUFBeTBELEVBQUFJLEdBQUE5NEMsTUFDQSxJQUFBdzlDLEdBQUEsSUFBQUQsRUFBQXpoRSxPQUFBLElBQUE4eEQsRUFBQTJQLEVBQUEvMkMsVUFBQSsyQyxHQUFBbnVELEtBQUEsR0FDQSxJQUFBdzFCLEVBQUFsb0MsV0FBQXFQLEVBQUEweEQsVUFBQSxDQUNBLEdBQUFDLElBQUE5UCxFQUFBK0ksSUFBQTczRCxRQUFBMG5CLFVBQUFtd0MsS0FBQXZuRCxLQUFBLEdBQ0FvdUQsR0FBQXp4RCxFQUFBMHhELFNBQUE1Z0UsS0FBQWcvRCxFQUFBNkIsRUFBQUYsRUFBQXp4RCxHQUVBLE1BQUF5eEQsR0FFQSxRQUFBeEcsR0FBQWgzQyxFQUFBODNDLEVBQUEzMkQsRUFBQXc4RCxHQUNBLFFBQUFDLEdBQUE5bkMsR0FDQSxPQUFBLElBQUE2bkMsSUFBQS9QLEdBQUEsZ0JBQUE5M0IsSUFBQS9wQixFQUFBMGlELFFBQUEsS0FBQTFpRCxFQUFBNGlELGNBQUE3NEIsRUFBQTZnQyxJQUFBdm5ELEtBQUEsSUFBQXRULE9BQUFnNkIsR0FDQUEsRUFFQSxHQUFBK25DLEVBQ0EsSUFBQS9GLElBQUFqNUQsRUFBQSxNQUFBbWhCLEdBQUE4OUMsbUJBQUFoRyxFQUFBOTNDLEVBQUErOUMsZUFDQTU4RCxFQUFBNmUsRUFBQWcrQyxjQUFBampFLEVBQUFrakUsY0FBQUosRUFBQTlpRSxFQUFBa2pFLGVBQUFDLFdBQUEsSUFBQUMsd0JBQUF6aUUsYUFBQXNrQixHQUFBNjlDLEVBQUFNLDBCQUFBbitDLElBQUE4M0MsRUFBQStGLEVBQUFPLFlBQ0FqOUQsRUFBQTA4RCxFQUFBUSxXQUFBempFLEVBQUFrSSxXQUFBbEksRUFBQWtJLFVBQUF3N0QsY0FBQW45RCxHQUFBMjJELEVBQUEsR0FBQStGLEVBQUFqakUsRUFBQWtJLFVBQUF3N0QsZUFBQUMsWUFBQUMsVUFBQSxhQUFBeCtDLEVBQUE2N0MsVUFBQTRDLFlBQUEzaUUsU0FBQStoRSxFQUFBdGlFLEtBQUFPLFNBRUFnOEQsTUFBQThGLEVBQUE5RixHQUNBMzJELElBQUF5OEQsRUFBQXo4RCxHQUVBLElBQUEyMkQsRUFBQUEsUUFBQWo1RCxJQUFBc0MsRUFBQTIyRCxFQUFBMzJELElBQUEyMkQsRUFBQUEsRUFBQUEsT0FBQSxnQkFBQUEsR0FBQSxDQUNBQSxFQUFBOEYsRUFBQTlGLEdBQUEzMkQsRUFBQSxpQkFBQUEsRUFBQXk4RCxFQUFBejhELElBQUFBLEVBQUEyMkQsQ0FDQSxJQUFBNEcsR0FBQXhsQyxXQUFBbFosRUFBQTFlLGNBQUFnZSxhQUFBdmtCLEdBQUE2M0Isa0JBQUE1UyxFQUFBMWUsY0FBQWdlLGFBQUF2a0IsR0FBQTYzQixpQkFBQTVTLEVBQUEsTUFBQUEsRUFBQTIrQyxjQUFBQyxVQUFBejlELENBQ0EsSUFBQTZlLEVBQUFpVyxXQUFBeW9DLEVBQUExK0MsRUFBQTQrQixZQUFBOGYsRUFBQSxFQUFBeHBCLElBQUEsSUFBQW5wQyxFQUFBMHNELFlBQUFYLElBQUEzMkQsR0FBQUEsSUFDQTZlLEVBQUE4OUMsa0JBQUE5OUMsRUFBQSs5QyxlQUFBakcsRUFBQTkzQyxFQUFBZytDLGFBQUE3OEQsTUFBQSxJQUFBcEcsRUFBQWtqRSxhQUFBLENBQ0EsR0FBQUosRUFBQWpqRSxFQUFBMGpFLGNBQUF0K0MsRUFBQWpjLGFBQUFsRixHQUFBLE9BQUFtaEIsRUFBQWpjLFdBQUEsQ0FDQSxHQUFBODZELEdBQUFqa0UsRUFBQXNKLGVBQUEsR0FDQThiLEdBQUF2a0IsWUFBQW9qRSxHQUVBaEIsRUFBQWlCLFNBQUE5K0MsRUFBQWpjLFdBQUErekQsRUFBQTkzQyxFQUFBNjdDLFVBQUE0QyxZQUFBM2lFLE9BQUFnOEQsRUFBQTkzQyxFQUFBNjdDLFVBQUE0QyxZQUFBM2lFLFFBQ0EraEUsRUFBQWtCLE9BQUEvK0MsRUFBQWpjLFdBQUE1QyxFQUFBNmUsRUFBQTY3QyxVQUFBNEMsWUFBQTNpRSxPQUFBcUYsRUFBQTZlLEVBQUE2N0MsVUFBQTRDLFlBQUEzaUUsUUFDQStoRSxFQUFBbUIsVUFBQSxFQUNBLElBQUE3OUMsR0FBQXBtQixFQUFBa2pFLGNBQ0E5OEMsR0FBQTg5QyxrQkFBQTk5QyxFQUFBKzlDLFNBQUFyQixPQUNBNzlDLEdBQUFtL0MsbUJBQUF0QixFQUFBNzlDLEVBQUFtL0MsbUJBQUFILFVBQUEsR0FDQW5CLEVBQUF1QixRQUFBLFlBQUFqK0QsR0FBQTA4RCxFQUFBVyxVQUFBLFlBQUExRyxHQUFBK0YsRUFBQTVtRCxTQUNBOGtELEdBQUEvN0MsR0FDQTgzQyxNQUFBQSxFQUNBMzJELElBQUFBLEtBSUEsUUFBQWsrRCxHQUFBQyxHQUNBLEdBQUF4cEMsR0FBQXU2QixFQUFBZixFQUFBcUgsSUFBQTRJLEVBQUFqUSxFQUFBeHpELE9BQUF5MEQsRUFBQUMsSUFBQWdQLEtBQUEvTSxFQUFBaEMsSUFBQXJCLGVBQUFtQixHQUFBSCxFQUFBcUMsSUFBQTV6RCxFQUFBNHpELEVBQUEvQixRQUFBNXhELFFBQUFELENBQ0EsS0FBQWkzQixFQUFBeTZCLEVBQUEsRUFBQXo2QixFQUFBdzVCLEVBQUF4ekQsT0FBQWc2QixJQUFBczZCLEdBQUFDLEVBQUFRLEVBQUEvNkIsRUFBQXM2QixFQUFBdDZCLEVBQUEsSUFBQTQ2QixRQUFBNXhELFFBQ0EwZ0UsRUFBQTFwQyxHQUFBOE8sRUFBQXQrQixRQUFBLEtBQUErcEQsRUFDQSxJQUFBb1AsR0FBQWhOLEdBQUFBLEVBQUFHLGNBQUEvekQsRUFBQTR6RCxFQUFBL0IsUUFBQStCLEVBQUFHLGFBQUEvekQsQ0FDQSxLQUFBaTNCLEVBQUF5cEMsRUFBQSxFQUFBenBDLEVBQUF5NkIsS0FBQUYsRUFBQW1QLEVBQUExcEMsSUFBQXA0QixNQUFBbzBELGFBQUF6QixFQUFBM3lELE1BQUFtMUQsb0JBQUF4QyxFQUFBM3lELE1BQUFvMUQsZ0JBQUEyTSxJQUFBQSxJQUFBRCxFQUFBMXBDLEdBQUE0NkIsUUFBQStCLEVBQUFHLGNBQUEsTUFBQXZDLEVBQUEzeUQsTUFBQW1ILElBQUEsT0FBQXdyRCxFQUFBM3lELE1BQUFtSCxJQUFBd3JELEVBQUFLLFFBQUErQixFQUFBRyxjQUFBRyxFQUFBMUMsRUFBQUssUUFBQStCLEVBQUFHLGFBQUFoZ0QsV0FBQVQsTUFBQSxLQUFBc3RELEVBQUE3c0QsV0FBQVQsTUFBQSxPQUFBLEtBQUF1Z0QsRUFBQTU4QixHQUFBLEdBQUFrN0IsT0FBQTFCLEVBQUF4NUIsS0FBQTg2QixFQUFBOTZCLEVBQUF1NkIsRUFBQTN5RCxPQUFBbzRCLElBQUF5cEMsR0FDQSxPQUFBRCxJQUNBMzhELEVBQUE0OEQsRUFDQXZPLElBQUF3TyxFQUFBRCxHQUFBQyxFQUFBRCxHQUFBN2hFLE1BQUFtQixHQUNBMGdFLEVBRUEsUUFBQUcsR0FBQXBRLEdBQ0EsSUFBQSxHQUFBK0ssR0FBQXNGLEVBQUFOLElBQUFFLEVBQUFqUSxFQUFBeHpELE9BQUE4akUsRUFBQW5QLElBQUFyQixlQUFBb0IsS0FBQW1QLEVBQUFKLElBQUFwTixFQUFBd04sR0FBQSxLQUFBdEYsRUFBQXVGLElBQUEvZ0UsRUFBQWd5RCxFQUFBOE8sRUFBQUMsRUFBQWxQLFFBQUE1eEQsTUFBQSxJQUFBOGdFLEdBQUEzTSxFQUFBME0sTUFBQSxJQUFBdEYsRUFBQTM4RCxNQUFBbzBELGVBQUEsSUFBQXVJLEVBQUEzOEQsTUFBQW0xRCxxQkFBQSxJQUFBd0gsRUFBQTM4RCxNQUFBbzFELGdCQUFBNk0sRUFBQSxJQUFBSixHQUFBLE1BQUFLLElBQUEvZ0UsRUFBQWd5RCxFQUFBOE8sRUFBQSxFQUFBQyxFQUFBbFAsUUFBQTV4RCxNQUFBLElBQUE4Z0UsR0FBQTNNLEVBQUEwTSxFQUFBLElBQUFqaUUsTUFBQXN6RCxNQUFBMk8sR0FDQSxPQUFBdEYsRUFBQTVKLElBQUFyQixlQUFBdVEsRUFBQSxLQUFBdEYsR0FBQUEsRUFBQTM4RCxNQUFBbzBELGFBQUF1SSxFQUFBcjZDLFFBQUFqVSxFQUFBK3FELDJCQUFBNkksR0FDQSxPQUFBclEsR0FBQXQ3QyxPQUFBMnJELEdBQUFyUSxFQUVBLFFBQUFsVSxHQUFBa1UsR0FDQSxHQUFBMXFCLEVBQUFsb0MsV0FBQXFQLEVBQUFxdkMsWUFBQSxNQUFBcnZDLEdBQUFxdkMsV0FBQWtVLEVBQUF2akQ7c0RBQ0EsSUFBQSxNQUFBQSxFQUFBMmlELE9BQUEsTUFBQTd2RCxFQUNBLElBQUFvUSxJQUFBLEVBQUE0d0QsRUFBQVIsR0FBQSxHQUFBUyxFQUFBdEUsRUFBQXFFLEVBQUFsOUQsRUFDQSxJQUFBazlELEVBQUE3TyxNQUFBbnlELEdBQUFnaEUsRUFBQTdPLElBQUE4QixnQkFBQStNLEVBQUE3TyxJQUFBYyxhQUFBK04sRUFBQTdPLElBQUE2QixtQkFBQSxDQUNBNWpELEdBQUEsQ0FDQSxLQUFBLEdBQUFyUyxHQUFBLEVBQUFBLEdBQUFrakUsRUFBQWxqRSxJQUFBLENBQ0EsR0FBQUssR0FBQTR6RCxFQUFBajBELEdBQUFjLEtBQ0EsSUFBQSxPQUFBVCxFQUFBNEgsSUFBQTRyRCxJQUFBckIsZUFBQXh5RCxLQUFBaUMsSUFBQSxJQUFBNUIsRUFBQTYwRCxjQUFBLElBQUE3MEQsRUFBQTQxRCxvQkFBQSxPQUFBNTFELEVBQUE0SCxJQUFBeXFELEVBQUExeUQsS0FBQWcwRCxFQUFBaDBELEVBQUFLLEdBQUEsQ0FDQWdTLEdBQUEsQ0FDQSxTQUlBLE1BQUFBLEdBRUEsUUFBQW1xRCxHQUFBcDVDLEVBQUErL0MsRUFBQWpxQyxFQUFBczdCLEVBQUE0TyxHQUNBLElBQUFqMEQsRUFBQThoRCxjQUFBRCxLQUFBbVMsSUFBQTNTLEVBQUFoOUIsUUFBQTZ2QyxVQUFBRixFQUFBM1MsRUFBQWg5QixRQUFBaXBDLE9BQUEwRyxJQUFBM1MsRUFBQWg5QixRQUFBaXBDLFNBQUEwRyxFQUFBM1MsRUFBQWg5QixRQUFBNnZDLFdBQ0FyUyxHQUFBLENBQ0EsR0FBQXNTLEdBQUFwcUMsRUFBQTMwQixHQUNBMjBCLEdBQUEzMEIsSUFBQTIwQixFQUFBZ2lDLE1BQUFoaUMsRUFBQWdpQyxNQUFBb0ksRUFFQUgsSUFBQTNTLEVBQUFoOUIsUUFBQTZ2QyxZQUFBbnFDLEVBQUEzMEIsSUFBQTIwQixFQUFBZ2lDLE1BQUEsSUFBQSxJQUFBL3JELEVBQUEwc0QsYUFBQTNpQyxFQUFBZ2lDLE1BQUEwRCxFQUFBMWxDLEVBQUFnaUMsT0FDQXJILElBQUFyQixlQUFBdDVCLEVBQUFnaUMsU0FBQWo1RCxHQUFBNHhELElBQUFyQixlQUFBdDVCLEVBQUFnaUMsT0FBQTkzQyxRQUFBalUsRUFBQW8wRCxnQkFBQXJxQyxFQUFBZ2lDLFNBQUFpSSxJQUFBM1MsRUFBQWg5QixRQUFBaXBDLFFBQUF2akMsRUFBQWdpQyxRQUFBaGlDLEVBQUEzMEIsTUFBQTIwQixFQUFBMzBCLElBQUFneEQsRUFBQXI4QixFQUFBMzBCLEtBQUEsSUFBQXN2RCxJQUFBckIsZUFBQXQ1QixFQUFBMzBCLE1BQUFzdkQsSUFBQXJCLGVBQUF0NUIsRUFBQTMwQixLQUFBNmUsUUFBQWpVLEVBQUFtdEQsV0FBQXBqQyxFQUFBMzBCLElBQUEsRUFBQW80RCxFQUFBempDLEVBQUEzMEIsS0FBQSxFQUNBc3ZELElBQUFyQixlQUFBdDVCLEVBQUFnaUMsU0FBQWo1RCxHQUFBNHhELElBQUFyQixlQUFBdDVCLEVBQUFnaUMsT0FBQTkzQyxRQUFBalUsRUFBQW8wRCxnQkFBQXJxQyxFQUFBMzBCLE9BQ0Fzd0QsRUFBQTM3QixFQUFBZ2lDLE1BQUFoaUMsRUFBQTMwQixLQUFBLEVBQUFpd0QsSUFBQSxJQUFBQSxHQUFBLFdBQ0EsR0FBQXJsRCxFQUFBMGpELFdBQUEsQ0FDQSxJQUFBLEdBQUFxTCxNQUFBWixFQUFBMUosR0FBQSxHQUFBLEdBQUFvQixFQUFBaHRCLEVBQUF0K0IsUUFBQSxLQUFBbXFELElBQUFyQixnQkFBQWdMLEVBQUEzSixJQUFBckIsZUFBQThLLEdBQUFBLEdBQUEsRUFBQUEsSUFBQSxDQUNBLEdBQUFDLEdBQUExSixJQUFBckIsZUFBQThLLEVBQ0EsSUFBQUMsRUFBQSxDQUNBLElBQUEsSUFBQUEsRUFBQTNJLGdCQUFBLGNBQUF2MEQsS0FBQWs5RCxFQUFBbjZDLFFBQUE4NkMsRUFBQTcyRCxLQUFBazJELEVBQUFuNkMsYUFDQXl3QyxLQUFBckIsZUFBQThLLEdBQUFDLEVBQUF2SCxjQUFBL3pELEdBQUFzN0QsRUFBQXpKLFFBQUF5SixFQUFBdkgsZUFBQXdILEVBQUExSixRQUFBeUosRUFBQXZILGFBQUEsS0FDQXdILEdBQUFELEdBR0EsR0FBQUQsR0FBQSxFQUFBLElBQUF6SixJQUFBdDZCLEVBQUFvakMsRUFBQS9JLEdBQUEsR0FBQSxJQUFBc0ssRUFBQWgvRCxPQUFBLEdBQUEsQ0FDQSxHQUFBd3RELEdBQUEsR0FBQTFrQixHQUFBdlcsTUFBQSxXQUNBaTdCLEdBQUFqK0MsTUFBQXl2RCxFQUFBNytDLE1BQUErQyxXQUFBLEdBQUFpK0MsR0FBQUMsY0FBQXJnRSxLQUFBbWpCLEVBQUFzcEMsR0FBQSxHQUFBLEdBQUEsRUFBQW1ILElBQUF0NkIsT0FDQXM2QixLQUFBckIsZUFBQXhxQixFQUFBdCtCLFFBQUEsS0FBQXNyRCxNQUdBLElBQUFyQixHQUFBQyxFQUFBMTZCLEVBQUFnaUMsT0FBQSxFQUNBLElBQUF2SCxFQUFBejZCLEVBQUFnaUMsTUFBQXJILElBQUF0NkIsRUFBQW9qQyxFQUFBaEosT0FBQSxLQUFBLElBQUFhLElBQUFYLElBQUF0NkIsRUFBQUwsRUFBQWdpQyxPQUNBLElBQUFrSSxHQUFBLEtBQUF2UCxJQUFBdDZCLEVBQUFvNkIsR0FBQUUsSUFBQXJCLGVBQUFxQixJQUFBdDZCLEtBQUF0M0IsR0FBQTR4RCxJQUFBdDZCLElBRUEsUUFBQWlxQyxHQUFBcGdELEdBQ0EsUUFBQXFnRCxHQUFBQyxHQUNBLEdBQUE1RSxHQUFBMzdELEVBQUFuRixFQUFBVSxjQUFBLE9BQ0EsS0FBQSxHQUFBMkYsS0FBQXMvRCxHQUFBOXJELE1BQUF4VCxLQUFBLElBQUFBLEVBQUFsRSxRQUFBLFVBQUFnRCxFQUFBa0IsTUFBQUEsR0FBQXMvRCxFQUFBdC9ELEdBQ0FsQixHQUFBa0IsTUFBQXUvRCxjQUFBRCxFQUFBQyxjQUFBemdFLEVBQUFrQixNQUFBZ3pCLGNBQUFzc0MsRUFBQXRzQyxjQUNBbDBCLEVBQUFrQixNQUFBNnlCLFNBQUEsV0FBQS96QixFQUFBa0IsTUFBQXNLLE9BQUEsT0FBQXhMLEVBQUFrQixNQUFBa0gsTUFBQSxPQUNBcEksRUFBQWtCLE1BQUE4eUIsV0FBQSxTQUFBaDBCLEVBQUFrQixNQUFBdy9ELFdBQUEsU0FBQTdsRSxFQUFBNkcsS0FBQWhHLFlBQUFzRSxFQUNBLElBQUEyZ0UsR0FBQUMsRUFBQTNnRCxFQUFBNjdDLFVBQUE0QyxZQUFBbUMsRUFBQSxDQUNBLEtBQUFsRixFQUFBLEVBQUFnRixFQUFBQyxFQUFBN2tFLE9BQUE0L0QsR0FBQWdGLEVBQUFoRixJQUFBLENBQ0EsR0FBQTM3RCxFQUFBNEQsV0FBQWc5RCxFQUFBeG5CLE9BQUF1aUIsSUFBQSxJQUFBMzdELEVBQUFrZ0MsYUFBQXFnQyxFQUFBLENBQ0EsR0FBQU8sR0FBQVAsRUFBQU0sRUFBQUUsRUFBQS9nRSxFQUFBa2dDLFlBQUFxZ0MsQ0FDQXZnRSxHQUFBNEQsVUFBQWc5RCxFQUFBeG5CLE9BQUF1aUIsR0FBQUEsR0FBQW1GLEdBQUE5Z0UsRUFBQWtnQyxZQUFBLEdBQUE2Z0MsRUFBQXBGLEVBQUEsRUFBQUEsQ0FDQSxPQUVBa0YsRUFBQTdnRSxFQUFBa2dDLFlBRUEsTUFBQXJsQyxHQUFBNkcsS0FBQTlGLFlBQUFvRSxHQUFBMjdELEVBRUEsR0FBQTZFLElBQUF2Z0QsRUFBQTFlLGNBQUFnZSxhQUFBdmtCLEdBQUE2M0IsaUJBQUE1UyxFQUFBLE1BQUErZ0QsRUFBQW5tRSxFQUFBVSxjQUFBLE1BQ0F5bEUsR0FBQTkvRCxNQUFBa0gsTUFBQW80RCxFQUFBcDRELE1BQUE0NEQsRUFBQTkvRCxNQUFBKy9ELFVBQUFULEVBQUFTLFdBQ0FDLEVBQUFybUUsRUFBQVUsY0FBQSxRQUFBb2tCLFVBQUEsZUFBQU0sRUFBQXRrQixXQUFBczJCLGFBQUFpdkMsRUFBQWpoRCxHQUNBQSxFQUFBdGtCLFdBQUFDLFlBQUFxa0IsR0FBQWloRCxFQUFBeGxFLFlBQUFzbEUsR0FBQUUsRUFBQXhsRSxZQUFBdWtCLEdBQ0FBLEVBQUEvZSxNQUFBbzBCLEtBQUEwckMsRUFBQUcsV0FBQSxLQUFBdDhCLEVBQUE1a0IsR0FBQXRiLEdBQUEsUUFBQSxTQUFBM0UsR0FDQSxNQUFBaTNELEdBQUFoM0MsRUFBQXFnRCxFQUFBdGdFLEVBQUF1d0IsVUFBQTJzQyxHQUFBa0UsV0FBQXRrRSxLQUFBbWpCLEdBQUFqZ0IsTUFDQTZrQyxFQUFBNWtCLEdBQUF0YixHQUFBLFVBQUEsU0FBQTNFLEdBQ0FBLEVBQUFpd0IsV0FBQSxJQUFBamtCLEVBQUEwc0QsWUFBQTd0RCxXQUFBLFdBQ0FteEQsRUFBQS83QyxJQUNBLEtBR0EsUUFBQSs3QyxHQUFBLzdDLEVBQUEwN0MsRUFBQXpTLEdBQ0EsUUFBQW1ZLEtBQ0FDLEdBQUEsT0FBQXBrRSxFQUFBNEgsSUFBQXdyRCxFQUFBcndDLFFBQUFuaEIsRUFBQXdpRSxJQUFBLE9BQUFwa0UsRUFBQTRILElBQUF3ckQsRUFBQXJ3QyxRQUFBbmhCLEdBQUEsS0FBQTVCLEVBQUErekQsT0FBQXFRLEdBQUEsRUFDQS9RLEdBQUEsWUFBQStRLEdBQUEsRUFBQS9RLEdBQUEsNEJBRUEsUUFBQWdSLEdBQUEvZ0IsSUFDQSxJQUFBQSxHQUFBenFCLElBQUE0bEMsRUFBQTVELE9BQUFsOUQsRUFBQTRKLGdCQUFBd2IsSUFBQXN3QyxHQUFBLDZGQUVBLEdBQUFyekQsR0FBQW96RCxFQUFBRCxFQUFBRSxFQUFBLEdBQUErUSxHQUFBLEVBQUF2ckMsRUFBQSxDQUNBLElBQUFtckMsSUFBQXBpRSxFQUFBLENBQ0EsR0FBQXl3RCxHQUFBcUgsR0FDQSxJQUFBK0UsSUFBQTc4RCxFQUFBNjhELEVBQUExRSxFQUFBaDNDLEdBQUEwN0MsRUFBQTVELFFBQUFqNUQsSUFBQTY4RCxHQUNBNUQsTUFBQTRELEVBQ0F2NkQsSUFBQXU2RCxLQUNBLElBQUF6UyxFQUFBLENBQ0EsR0FBQXNILEdBQUFDLEdBQ0EsSUFDQThRLElBQUE3USxJQUFBckIsZUFBQXQ1QixJQUFBdTZCLEVBQUFJLElBQUFyQixlQUFBdDVCLEdBQ0E3NEIsRUFBQW96RCxFQUFBM3lELE1BQUEweUQsRUFBQUMsRUFBQUssUUFBQTV4RCxRQUFBc2lFLElBQUE5USxHQUFBaEIsRUFBQXg1QixLQUFBdTZCLEVBQUFRLEVBQUEvNkIsRUFBQXM2QixFQUFBdDZCLEVBQUEsR0FDQTc0QixFQUFBb3pELEVBQUEzeUQsTUFBQTB5RCxFQUFBQyxFQUFBSyxRQUFBNXhELFVBQUEsSUFBQWlOLEVBQUEra0QsWUFBQWg3QixFQUFBeTZCLEdBQUEsZ0JBQUF4a0QsR0FBQStrRCxZQUFBNTdCLFNBQUFucEIsRUFBQStrRCxhQUFBL2tELEVBQUEra0QsV0FBQWg3QixLQUFBc3JDLElBQ0E5USxHQUFBTSxFQUFBOTZCLEVBQUE3NEIsS0FBQTY0QixXQUNBaTdCLElBQUFseUQsR0FBQWkzQixFQUFBaTdCLEtBQUEsT0FBQTl6RCxFQUFBNEgsSUFBQSxLQUFBNUgsRUFBQSt6RCxNQUFBVCxFQUFBejZCLEdBQUF1ckMsSUFDQSxJQUFBL1EsRUFBQXZ6RCxRQUFBLGFBQUF1a0UsR0FBQSxHQUFBRCxHQUFBRCxJQUVBLEdBQUFMLEdBQUFFLEVBQUE1K0QscUJBQUEsT0FBQSxFQUNBMCtELEdBQUFwOUQsVUFBQTJzRCxFQUFBdHdDLEVBQUE2N0MsVUFBQTBGLGtCQUFBdmhELEVBQUErZ0QsSUFHQXhULEVBQUFBLEdBQUF2eUQsS0FBQXV5RCxRQUFBeGhELEVBQUFBLEdBQUEvUSxLQUFBK1EsSUFDQSxJQUFBeTFELEdBQUF4cUIsRUFBQStaLEVBQUFrUSxFQUFBcEYsRUFBQTdnRSxLQUFBeWMsRUFBQXpjLEtBQUF5YyxHQUFBbTJDLEVBQUE1eUQsS0FBQTR5RCxNQUFBNlQsR0FBQSxFQUFBeEYsR0FBQSxFQUFBeUYsSUFBQSxFQUFBQyxJQUFBLEVBQUFDLElBQ0FsOUQsR0FBQSxTQUFBc2IsRUFBQTZoRCxFQUFBQyxHQUNBLEdBQUFDLEdBQUEsU0FBQWhpRSxHQUNBLEdBQUEvRSxLQUFBNmdFLFlBQUFoOUQsR0FBQSxTQUFBN0QsS0FBQWtCLFNBQUEsQ0FDQSxHQUFBOGxFLEdBQUFwOUIsRUFBQXRsQyxLQUFBdEUsS0FBQSxrQkFDQWduRSxHQUFBLEdBQUE1VSxHQUFBNFUsR0FBQTlULEtBQUFsekQsTUFBQTRtRSxHQUFBMzhELElBQUFqSyxVQUNBLENBQ0EsR0FBQSxhQUFBK0UsRUFBQWhFLE1BQUEsU0FBQWYsS0FBQWtCLFlBQUFsQixLQUFBb2QsVUFBQXBkLEtBQUFpbkUsWUFBQSxZQUFBbGlFLEVBQUFoRSxNQUFBZ0UsRUFBQTJ2QixTQUFBLEtBQUEzdkIsRUFBQXF3QixVQUFBLElBQUFya0IsRUFBQW0yRCxZQUFBbmlFLEVBQUFxd0IsVUFBQWc5QixFQUFBaDlCLFFBQUEreEMsTUFBQSxDQUNBLE9BQUFwaUUsRUFBQWhFLE1BQ0EsSUFBQSxRQUNBLElBQUEsSUFBQWtnRSxFQUFBLE1BQUFBLElBQUEsRUFBQWw4RCxFQUFBK3RCLGdCQUNBLE1BRUEsS0FBQSxVQUNBMnpDLEdBQUEsRUFBQXhGLEdBQUEsQ0FDQSxNQUVBLEtBQUEsV0FDQSxJQUFBLElBQUF3RixFQUFBLE1BQUExaEUsR0FBQSt0QixnQkFDQTJ6QyxJQUFBLENBQ0EsTUFFQSxLQUFBLFFBQ0EsR0FBQVcsR0FBQUMsRUFBQSxDQUNBLEdBQUFwNkMsR0FBQWp0QixLQUFBNkwsRUFBQTNCLFNBQ0EsT0FBQTBGLFlBQUEsV0FDQWszRCxFQUFBbGpFLE1BQUFxcEIsRUFBQXBoQixJQUNBLElBQUEsR0FHQSxHQUFBeTdELEdBQUFSLEVBQUFsakUsTUFBQTVELEtBQUFrSyxVQUNBLFFBQUEsSUFBQW85RCxJQUFBdmlFLEVBQUErdEIsaUJBQUEvdEIsRUFBQWd1QixtQkFBQXUwQyxFQUVBdmlFLEVBQUErdEIsa0JBR0E5TixHQUFBNjdDLFVBQUEzMUQsT0FBQTI3RCxHQUFBN2hELEVBQUE2N0MsVUFBQTMxRCxPQUFBMjdELE9BQUE3aEQsRUFBQTY3QyxVQUFBMzFELE9BQUEyN0QsR0FBQTU5RCxLQUFBODlELElBQ0EsSUFBQW45QixFQUFBemdDLFFBQUEwOUQsR0FBQSxTQUFBLFVBQUEsT0FBQTdoRCxFQUFBdWlELE1BQUEzOUIsRUFBQTVrQixFQUFBdWlELE1BQUE3OUQsR0FBQW05RCxFQUFBRSxHQUFBbjlCLEVBQUE1a0IsR0FBQXRiLEdBQUFtOUQsRUFBQUUsSUFFQTk4RCxJQUFBLFNBQUErYSxFQUFBaGIsR0FDQSxHQUFBZ2IsRUFBQTY3QyxXQUFBNzdDLEVBQUE2N0MsVUFBQTMxRCxPQUFBLENBQ0EsR0FBQUEsRUFDQWxCLElBQUFrQixNQUFBbEIsR0FBQWdiLEVBQUE2N0MsVUFBQTMxRCxPQUFBbEIsR0FBQWtCLEVBQUE4WixFQUFBNjdDLFVBQUEzMUQsT0FDQTArQixFQUFBbm5DLEtBQUF5SSxFQUFBLFNBQUEyN0QsRUFBQVcsR0FDQSxLQUFBQSxFQUFBMW1FLE9BQUEsR0FBQSxDQUNBLEdBQUFpbUUsR0FBQVMsRUFBQXZtRCxPQUNBLElBQUEyb0IsRUFBQXpnQyxRQUFBMDlELEdBQUEsU0FBQSxVQUFBLE9BQUE3aEQsRUFBQXVpRCxNQUFBMzlCLEVBQUE1a0IsRUFBQXVpRCxNQUFBdDlELElBQUE0OEQsRUFBQUUsR0FBQW45QixFQUFBNWtCLEdBQUEvYSxJQUFBNDhELEVBQUFFLFNBRUEvaEQsR0FBQTY3QyxVQUFBMzFELE9BQUEyN0QsUUFJQTVFLElBQ0F3RixhQUFBLFNBQUExaUUsR0FDQSxHQUFBaWdCLEdBQUFobEIsS0FBQTBuRSxFQUFBOTlCLEVBQUE1a0IsR0FBQSsvQyxFQUFBaGdFLEVBQUFxd0IsUUFBQTBGLEVBQUFraEMsRUFBQWgzQyxFQUNBLElBQUErL0MsSUFBQTNTLEVBQUFoOUIsUUFBQTZ2QyxXQUFBRixJQUFBM1MsRUFBQWg5QixRQUFBaXBDLFFBQUFnSixHQUFBdEMsSUFBQTNTLEVBQUFoOUIsUUFBQXV5QyxrQkFBQTVpRSxFQUFBMnZCLFNBQUFxd0MsSUFBQTNTLEVBQUFoOUIsUUFBQXd5QyxJQUFBLFNBQUFmLEdBQ0EsR0FBQXBxRCxHQUFBN2MsRUFBQVUsY0FBQSxTQUFBdW5FLEVBQUEsU0FBQXByRCxFQUNBLE9BQUFvckQsS0FBQXByRCxFQUFBZCxhQURBLFFBQ0EsV0FBQWtzRCxFQUFBLGtCQUFBcHJELEdBQUEsT0FDQUEsRUFBQSxLQUFBb3JELEtBQ0E5aUUsRUFBQSt0QixpQkFBQXNyQyxFQUFBcDVDLEVBQUErL0MsRUFBQWpxQyxHQUFBMmxDLEVBQUF6N0MsRUFBQTIyQyxHQUFBLEdBQUFsRyxJQUFBdDZCLEVBQUFwMkIsRUFBQWlnQixFQUFBNjdDLFVBQUE0QyxjQUFBOUgsSUFBQXZuRCxLQUFBLEtBQ0E0USxFQUFBNjdDLFVBQUE0QyxjQUFBL0gsSUFBQXRuRCxLQUFBLElBQUFzekQsRUFBQS96QyxRQUFBLFlBQUEsSUFBQXlzQixFQUFBdWIsTUFBQStMLEVBQUEvekMsUUFBQSxnQkFBQSxJQUFBb3hDLElBQUEzUyxFQUFBaDlCLFFBQUEweUMsS0FBQS9DLElBQUEzUyxFQUFBaDlCLFFBQUEyeUMsVUFBQSxDQUNBaGpFLEVBQUErdEIsZ0JBQ0EsSUFBQTR0QyxHQUFBbkMsRUFBQS9JLElBQ0F6a0QsR0FBQTBzRCxZQUFBaUQsSUFBQWpMLElBQUFqQixZQUFBenZELEVBQUFpd0IsVUFBQTByQyxJQUNBMUUsRUFBQWgzQyxFQUFBamdCLEVBQUFpd0IsU0FBQThGLEVBQUFnaUMsTUFBQTRELEVBQUFBLEdBQUEsT0FDQXFFLEtBQUEzUyxFQUFBaDlCLFFBQUE0eUMsT0FBQWpqRSxFQUFBaXdCLFVBQUErdkMsSUFBQTNTLEVBQUFoOUIsUUFBQTZ5QyxTQUFBbGpFLEVBQUErdEIsaUJBQ0FrcEMsRUFBQWgzQyxFQUFBLEVBQUFqZ0IsRUFBQWl3QixTQUFBOEYsRUFBQWdpQyxNQUFBLEdBQUEsS0FBQS9yRCxFQUFBbTNELGNBQUFuRCxJQUFBM1MsRUFBQWg5QixRQUFBK3lDLFFBQUEsS0FBQXBELEdBQUFoZ0UsRUFBQTJ2QixXQUFBLElBQUEzdkIsRUFBQXV2QixRQUFBK3NDLEVBQUFyOEMsR0FBQSxHQUFBLEVBQUF3aEQsRUFBQXJ2RCxNQUFBLEtBQ0F1d0QsRUFBQS96QyxRQUFBLFVBQUFveEMsSUFBQTNTLEVBQUFoOUIsUUFBQWd6QyxRQUFBcmpFLEVBQUFpd0IsVUFBQWp3QixFQUFBMnZCLFNBQUEsSUFBQTNqQixFQUFBbTJELFlBQUFuQyxJQUFBM1MsRUFBQWg5QixRQUFBK3hDLE1BQUEsSUFBQXBpRSxFQUFBaXdCLFVBQUEsT0FBQWlqQyxFQUFBbjlCLEVBQUFnaUMsT0FBQXA2RCxNQUFBbUgsS0FBQWl4QixFQUFBZ2lDLE1BQUF5QixFQUFBempDLEVBQUFnaUMsUUFDQWhpQyxFQUFBMzBCLElBQUFxNkQsRUFBQTFsQyxFQUFBZ2lDLE9BQUEsR0FBQWhpQyxFQUFBZ2lDLE1BQUEwRCxFQUFBMWxDLEVBQUEzMEIsS0FBQSxLQUFBMjBCLEVBQUFnaUMsTUFBQXlCLEVBQUF6akMsRUFBQWdpQyxPQUFBLEdBQ0FoaUMsRUFBQTMwQixJQUFBbzRELEVBQUF6akMsRUFBQWdpQyxPQUFBLEdBQUFoaUMsRUFBQTMwQixJQUFBc3ZELElBQUFqQixZQUFBMTVCLEVBQUEzMEIsT0FDQTIwQixFQUFBZ2lDLE1BQUFySCxJQUFBakIsYUFBQXp2RCxFQUFBK3RCLGlCQUFBa3BDLEVBQUFoM0MsRUFBQThWLEVBQUFnaUMsTUFBQWhpQyxFQUFBMzBCLE9BQUFwQixFQUFBaXdCLFdBQUEsSUFBQWprQixFQUFBMHNELGFBQUFzSCxJQUFBM1MsRUFBQWg5QixRQUFBaXpDLE1BQUF6NEQsV0FBQSxXQUNBLEdBQUE4d0QsR0FBQTFFLEVBQUFoM0MsRUFDQWczQyxHQUFBaDNDLEVBQUEwN0MsRUFBQTVELFFBQ0EsR0FBQWlJLElBQUEzUyxFQUFBaDlCLFFBQUFrekMsTUFBQTE0RCxXQUFBLFdBQ0EsR0FBQTh3RCxHQUFBMUUsRUFBQWgzQyxFQUNBZzNDLEdBQUFoM0MsRUFBQTR0QyxFQUFBOE4sRUFBQTVELE1BQUEsRUFBQTRELEVBQUE1RCxNQUFBLElBQ0EsS0FBQS9yRCxFQUFBMHNELFlBQUExc0QsRUFBQTBzRCxXQUFBekIsRUFBQWgzQyxFQUFBalUsRUFBQTBzRCxZQUFBM2lDLEVBQUFnaUMsUUFBQXJILElBQUFqQixXQUFBMTVCLEVBQUFnaUMsTUFBQWhpQyxFQUFBZ2lDLE1BQUEsR0FDQS9yRCxHQUFBdzNELFVBQUExbUUsS0FBQTdCLEtBQUErRSxFQUFBNDJELElBQUFLLEVBQUFoM0MsR0FBQTgzQyxNQUFBL3JELEdBQUEyMUQsSUFBQSxJQUFBOThCLEVBQUF6Z0MsUUFBQTQ3RCxFQUFBaDBELEVBQUF5M0QsYUFFQXRHLGNBQUEsU0FBQW45RCxFQUFBMGpFLEVBQUFuSCxFQUFBbEwsRUFBQXpCLEdBQ0EsR0FBQTN2QyxHQUFBaGxCLEtBQUEwbkUsRUFBQTk5QixFQUFBNWtCLEdBQUErL0MsRUFBQWhnRSxFQUFBc0wsT0FBQXRMLEVBQUFvd0IsVUFBQXB3QixFQUFBcXdCLE9BQ0EsT0FBQSxJQUFBcXpDLEdBQUExakUsRUFBQTJ2QixTQUFBM3ZCLEVBQUF1dkIsVUFBQXZ2QixFQUFBMnZCLFNBQUEzdkIsRUFBQTh2QixTQUFBNnhDLElBQUEsTUFBQTNCLEtBQUEzUyxFQUFBaDlCLFFBQUFzekMsT0FBQWxDLElBQUE3SyxJQUFBdm5ELEtBQUEsTUFBQW95RCxFQUFBN0ssSUFBQXZuRCxLQUFBLElBQ0F4RSxXQUFBLFdBQ0E4M0QsRUFBQS96QyxRQUFBLFdBQ0EsS0FBQSxDQUNBLElBQUFveEMsRUFBQSxDQUNBLEtBQUFBLElBQUEsSUFBQWhnRSxFQUFBaXdCLFVBQUEsS0FBQWprQixFQUFBbXRELGFBQUE2RyxFQUFBaDBELEVBQUFtdEQsV0FBQWw2QyxXQUFBLEdBQ0EsSUFBQW8rQyxHQUFBdG5DLEVBQUEydEMsR0FDQTNMLE1BQUFuSSxFQUNBeHVELElBQUF3dUQsR0FDQXFILEVBQUFoM0MsR0FBQTRzQyxFQUFBaHVDLE9BQUFDLGFBQUFraEQsRUFDQXRQLEtBQUFrVCxnQkFBQSxDQUNBLElBQUE1TSxHQUFBMUUsRUFBQXY4QixFQUFBODJCLEVBQUF3RSxFQUNBLEtBQUEsSUFBQTJGLElBQUE5RixHQUFBLEdBQUFtTSxFQUFBckcsRUFBQUMsUUFBQW40RCxFQUFBazRELEVBQUFDLE1BQUF5TSxFQUFBMU0sRUFBQWpoQyxJQUFBLEVBQUF5akMsRUFBQXhDLEVBQUFqaEMsS0FDQTI2QixJQUFBdDZCLEVBQUFpbkMsSUFBQSxJQUFBZCxJQUFBMXhELFdBQUEsV0FDQW1CLEVBQUE2M0QsZ0JBQUEvbUUsS0FBQW1qQixFQUFBKy9DLEVBQUFoSixFQUFBaHJELElBQ0EsR0FBQTBrRCxJQUFBa1QsaUJBQUEsSUFBQTVNLEdBQUEsQ0FDQSxHQUFBekgsR0FBQXFILEdBQ0E4RSxHQUFBejdDLEVBQUFzdkMsRUFBQXZqRCxFQUFBOGhELGNBQUFrSixFQUFBQyxRQUFBbjRELEVBQUEyOEQsRUFBQTRCLEdBQUFBLEVBQUFyOUQsR0FBQSxJQUFBMGpFLElBQ0EsSUFBQUEsR0FBQTc0RCxXQUFBLFlBQ0EsSUFBQXd3QyxFQUFBa1UsSUFBQW9ULEVBQUEvekMsUUFBQSxhQUNBLEdBRUEsR0FBQTV1QixFQUFBK3RCLGlCQUFBMjFDLEVBQUEsT0FBQSxJQUFBMU0sSUFBQUEsRUFBQXFHLGdCQUFBQSxHQUNBckcsSUFHQThNLFdBQUEsU0FBQTlqRSxHQUNBLEdBQUErakUsR0FBQTlqRCxFQUFBaGxCLEtBQUErbUUsRUFBQWhpRSxFQUFBd3VCLGVBQUF4dUIsRUFBQTJpRSxFQUFBOTlCLEVBQUE1a0IsR0FBQTI4QyxFQUFBMzhDLEVBQUE2N0MsVUFBQTRDLFdBQUEsR0FBQS9DLEVBQUExRSxFQUFBaDNDLEVBQ0E0dEMsS0FBQWtXLEVBQUFwSSxFQUFBdjZELElBQUF1NkQsRUFBQXY2RCxJQUFBdTZELEVBQUE1RCxNQUFBNEQsRUFBQTVELE1BQUFnTSxFQUNBLElBQUFDLEdBQUFwSCxFQUFBelksT0FBQSxFQUFBd1gsRUFBQTVELE9BQUFrTSxFQUFBckgsRUFBQXpZLE9BQUF3WCxFQUFBdjZELElBQUF3N0QsRUFBQTdnRSxPQUNBLElBQUFpb0UsS0FBQW5XLEVBQUE4SSxJQUFBbHdDLFVBQUFrd0MsS0FBQTUzRCxNQUFBLEVBQUE0OEQsRUFBQTVELE9BQUExb0QsS0FBQSxNQUFBMjBELEVBQUEsSUFDQUMsS0FBQXBXLEVBQUE4SSxJQUFBbHdDLFVBQUFrd0MsS0FBQTUzRCxNQUFBNDhELEVBQUF2NkQsS0FBQWlPLEtBQUEsTUFBQTQwRCxFQUFBLElBQ0FwVyxJQUFBa1csRUFBQUMsRUFBQUEsRUFBQUMsRUFBQUEsRUFBQUYsR0FDQS9vRSxFQUFBa3BFLGVBQUFscEUsRUFBQWtwRSxjQUFBNWtFLFFBQUFzOUQsRUFBQW9ILEVBQUFocEUsRUFBQWtwRSxjQUFBNWtFLFFBQUEsUUFBQTJrRSxNQUFBLENBQ0EsSUFBQWpDLEVBQUFrQyxnQkFBQWxDLEVBQUFrQyxjQUFBNWtFLFFBQUEsT0FBQSxDQUNBczlELEdBQUFvSCxFQUFBaEMsRUFBQWtDLGNBQUE1a0UsUUFBQSxjQUFBMmtFLEVBRUEsR0FBQUUsR0FBQXZILENBQ0EsSUFBQS8zQixFQUFBbG9DLFdBQUFxUCxFQUFBbzRELGVBQUEsQ0FDQSxJQUFBLEtBQUFELEVBQUFuNEQsRUFBQW80RCxjQUFBdG5FLEtBQUFnL0QsRUFBQWMsRUFBQTV3RCxJQUFBLE1BQUFoTSxHQUFBK3RCLGdCQUNBbzJDLEtBQUFBLEVBQUF2SCxHQUVBLE1BQUFOLEdBQUFyOEMsR0FBQSxHQUFBLEVBQUE0dEMsRUFBQXNXLEVBQUEveEQsTUFBQSxJQUFBcVUsVUFBQTA5QyxFQUFBdHhELFdBQUFULE1BQUEsS0FDQXNwRCxFQUFBejdDLEVBQUEyMkMsSUFBQTRDLEVBQUEvSSxLQUFBendELEVBQUF5aEUsSUFBQTdLLElBQUF2bkQsS0FBQSxNQUNBLElBQUFnc0MsRUFBQXViLE1BQUErTCxFQUFBL3pDLFFBQUEsWUFBQTV1QixFQUFBK3RCLGtCQUVBczJDLG1CQUFBLFNBQUFya0UsR0FDQSxHQUFBaWdCLEdBQUFobEIsS0FBQTJoRSxFQUFBMzhDLEVBQUE2N0MsVUFBQTRDLFdBQ0EsSUFBQTlILElBQUF2bkQsS0FBQSxNQUFBdXRELEVBQUEsQ0FDQSxHQUFBakIsR0FBQTFFLEVBQUFoM0MsRUFDQSxLQUFBLElBQUEsU0FBQUEsRUFBQTI4QyxFQUFBakIsR0FDQSxHQUFBLE1BQUFpQixFQUFBeGpCLE9BQUF1aUIsRUFBQTVELE1BQUEsSUFBQSxLQUFBL3JELEVBQUFtdEQsY0FBQXlELEVBQUFBLEVBQUF4cUQsTUFBQSxLQUFBdXBELEVBQUE1RCxNQUFBLEdBQUEvckQsRUFBQW10RCxXQUFBL2YsT0FBQSxHQUNBd2pCLEVBQUFBLEVBQUF2dEQsS0FBQSxLQUFBdXRELEVBQUF4akIsT0FBQXVpQixFQUFBNUQsTUFBQSxLQUFBL3JELEVBQUFtdEQsWUFBQXlELEVBQUE3Z0UsT0FBQTY2RCxJQUFBNzZELE9BQUEsQ0FDQSxHQUFBd3RELEdBQUEsR0FBQTFrQixHQUFBdlcsTUFBQSxXQUNBLE9BQUFpN0IsR0FBQWorQyxNQUFBVSxFQUFBbXRELFdBQUFsNkMsV0FBQSxHQUFBaStDLEdBQUFDLGNBQUFyZ0UsS0FBQW1qQixFQUFBc3BDLEdBQUEsR0FBQSxHQUFBLEVBQUFvUyxFQUFBNUQsTUFBQSxJQUNBLElBRUE5M0MsRUFBQTI4QyxFQUFBakIsR0FBQSxPQUFBLENBQ0EsSUFBQWlCLEVBQUFBLEVBQUEvOEQsUUFBQSxHQUFBeWQsUUFBQSxJQUFBK3ZDLEVBQUEyUCxZQUFBckcsSUFBQXRuRCxLQUFBLEtBQUEsTUFBQSxLQUNBLElBQUEsU0FBQTRRLEVBQUEyOEMsRUFBQWpCLEdBQ0EsR0FBQTBHLEVBQUEsQ0FDQSxHQUFBaUMsR0FBQTFILEVBQUEvOEQsUUFBQSsyRCxJQUFBdm5ELEtBQUEsSUFBQSxHQUNBLElBQUEsSUFBQWkxRCxFQUFBdm9FLE9BQUEsQ0FDQSxHQUFBd3RELEdBQUEsR0FBQTFrQixHQUFBdlcsTUFBQSxXQUNBLE9BQUFpN0IsR0FBQWorQyxNQUFBZzVELEVBQUFybEQsV0FBQSxHQUFBaStDLEdBQUFDLGNBQUFyZ0UsS0FBQW1qQixFQUFBc3BDLEdBQUEsR0FBQSxHQUFBLEVBQUFtSCxJQUFBckIsZUFBQXNNLEVBQUE1RCxNQUFBLEdBQUE0RCxFQUFBNUQsTUFBQTRELEVBQUE1RCxNQUFBLElBQ0EsS0FHQTkzQyxFQUFBMjhDLEVBQUFqQixHQUFBLE9BQUEsQ0FDQUEsR0FBQTVELE1BQUE2RSxFQUFBN2dFLFNBQUFrN0QsRUFBQWgzQyxFQUFBMjhDLEVBQUE3Z0UsUUFBQTQvRCxFQUFBMUUsRUFBQWgzQyxHQUNBLElBQUFzdkMsR0FBQXFILElBQUF2bkQsS0FBQSxJQUFBazFELEVBQUEzSCxFQUFBelksT0FBQSxFQUFBd1gsRUFBQTVELE9BQUF5TSxFQUFBNUgsRUFBQXpZLE9BQUF3WCxFQUFBNUQsT0FBQTBNLEVBQUFsVixFQUFBcEwsT0FBQSxFQUFBd1gsRUFBQTVELE9BQUEyTSxFQUFBblYsRUFBQXBMLE9BQUF3WCxFQUFBNUQsT0FBQWgxRCxFQUFBNDRELEVBQUFnSixFQUFBLEdBQUFDLEdBQUEsQ0FDQSxJQUFBTCxJQUFBRSxFQUFBLENBQ0ExaEUsRUFBQWcxRCxNQUFBLENBQ0EsS0FBQSxHQUFBOE0sSUFBQUQsRUFBQUwsRUFBQXhvRSxRQUFBMG9FLEVBQUExb0UsUUFBQXdvRSxFQUFBeG9FLE9BQUEwb0UsRUFBQTFvRSxPQUFBYyxFQUFBLEVBQUEwbkUsRUFBQW5yQixPQUFBdjhDLEtBQUE0bkUsRUFBQXJyQixPQUFBdjhDLElBQUFBLEVBQUFnb0UsRUFBQWhvRSxJQUFBa0csRUFBQWcxRCxPQUNBNk0sS0FBQUQsR0FBQUosRUFBQXhsRSxNQUFBZ0UsRUFBQWcxRCxNQUFBaDFELEVBQUEzQixNQUVBb2pFLElBQUFFLElBQUFGLEVBQUF6b0UsT0FBQTJvRSxFQUFBM29FLE9BQUE2b0UsSUFBQTdoRSxFQUFBM0IsSUFBQTJCLEVBQUFnMUQsT0FBQXlNLEVBQUF6b0UsT0FBQTJvRSxFQUFBM29FLE9BQUFnSCxFQUFBM0IsS0FBQXNqRSxFQUFBM29FLE9BQUF5b0UsRUFBQXpvRSxPQUFBeW9FLEVBQUFwckIsT0FBQSxLQUFBc3JCLEVBQUF0ckIsT0FBQSxJQUFBcjJDLEVBQUEzQixPQUNBczZELEVBQUF6N0MsRUFBQTIyQyxJQUFBN3pELEdBQUE0aEUsRUFBQTVvRSxPQUFBLEVBQUE4b0MsRUFBQW5uQyxLQUFBaW5FLEVBQUF2eUQsTUFBQSxJQUFBLFNBQUF3OUMsRUFBQWtWLEdBQ0EsR0FBQXZiLEdBQUEsR0FBQTFrQixHQUFBdlcsTUFBQSxXQUNBaTdCLEdBQUFqK0MsTUFBQXc1RCxFQUFBN2xELFdBQUEsR0FBQTBpRCxJQUFBLEVBQUF6RSxHQUFBQyxjQUFBcmdFLEtBQUFtakIsRUFBQXNwQyxNQUNBeG1ELEVBQUFnMUQsUUFBQWgxRCxFQUFBM0IsSUFBQSxHQUFBNjFELEVBQUFoM0MsRUFBQXc3QyxFQUFBMTRELEVBQUFnMUQsTUFBQSxHQUFBaDFELEVBQUEzQixLQUNBcEIsRUFBQXF3QixRQUFBZzlCLEVBQUFoOUIsUUFBQWlwQyxPQUFBNEQsR0FBQXdGLGFBQUE1bEUsS0FBQW1qQixFQUFBamdCLElBQ0FBLEVBQUErdEIsbUJBR0F3dkMsY0FBQSxTQUFBdjlELEdBQ0EvRSxLQUFBNmdFLFVBQUFyTyxjQUFBLENBQ0EsSUFBQXh0QyxHQUFBaGxCLEtBQUFtRCxFQUFBNmhCLEVBQUE2N0MsVUFBQTRDLFdBQUEsRUFDQTc1QixHQUFBbG9DLFdBQUFxUCxFQUFBKzRELGdCQUFBM21FLEVBQUE0TixFQUFBKzRELGFBQUFqb0UsS0FBQWcvRCxFQUFBMTlELEVBQUE0TixJQUFBNU4sR0FDQUEsRUFBQUEsRUFBQWdVLE1BQUEsSUFBQWtxRCxFQUFBcjhDLEdBQUEsR0FBQSxFQUFBNHRDLEVBQUF6dkQsRUFBQXFvQixVQUFBcm9CLEdBQ0FxakUsRUFBQTdLLElBQUF2bkQsS0FBQSxLQUFBckQsRUFBQWc1RCxzQkFBQWg1RCxFQUFBaTVELGtCQUFBaGxELEVBQUE2N0MsVUFBQTRDLGNBQUEvSCxJQUFBdG5ELEtBQUEsS0FBQTRRLEVBQUE2N0MsVUFBQUMsVUFBQSxLQUVBbUosV0FBQSxTQUFBbGxFLEdBQ0EsR0FBQWlnQixHQUFBaGxCLEtBQUFrcUUsRUFBQWxsRCxFQUFBNjdDLFVBQUE0QyxXQUNBMXlELEdBQUFvNUQsbUJBQUFwNUQsRUFBQXE1RCxpQkFBQXI1RCxFQUFBcTVELGlCQUFBLEtBQUFGLEtBQUFsbEQsRUFBQTY3QyxVQUFBNEMsY0FBQTlILElBQUF2bkQsS0FBQSxJQUFBcXNELEVBQUF6N0MsRUFBQTIyQyxJQUFBNEMsRUFBQS9JLE9BQUEsSUFBQW1SLElBQUEzSyxFQUFBaDNDLEVBQUF1NUMsRUFBQS9JLFFBQ0EsSUFBQXprRCxFQUFBczVELHFCQUFBLElBQUExRCxJQUFBLEtBQUF1RCxJQUFBekosRUFBQXo3QyxFQUFBMjJDLElBQUFLLEVBQUFoM0MsSUFDQWk5QyxHQUFBa0UsV0FBQXZpRSxNQUFBb2hCLEdBQUFqZ0IsR0FBQSxLQUFBeWhFLEVBQUE3SyxJQUFBdm5ELEtBQUEsS0FFQWsyRCxnQkFBQSxTQUFBdmxFLEdBQ0EsR0FBQWlnQixHQUFBaGxCLElBQ0EsSUFBQTJtRSxJQUFBLEVBQUE1MUQsRUFBQWc1RCxzQkFBQW5xRSxFQUFBNEosZ0JBQUF3YixFQUFBLENBQ0EsR0FBQXN2QyxHQUFBcUgsSUFBQTczRCxRQUFBb21FLEVBQUFsbEQsRUFBQTY3QyxVQUFBNEMsV0FDQXlHLEtBQUFsbEQsRUFBQWxnQixhQUFBLGdCQUFBLEtBQUFvbEUsS0FBQSxJQUFBMVUsS0FBQTBVLElBQUF4TyxJQUFBdG5ELEtBQUEsSUFBQWtnRCxLQUFBb1EsRUFBQXBRLEdBQ0FtTSxFQUFBejdDLEVBQUFzdkMsTUFHQTZSLFdBQUEsU0FBQXBoRSxFQUFBd2xFLEdBQ0EsUUFBQUMsR0FBQUMsR0FDQSxHQUFBLEtBQUExNUQsRUFBQW10RCxXQUFBLENBQ0EsR0FBQVIsR0FBQWpJLElBQUFyQixjQUNBLElBQUFzSixFQUFBK00sS0FBQTVtRSxHQUFBNjVELEVBQUErTSxHQUFBemxELFFBQUE0d0MsRUFBQTZVLEdBQUEsQ0FDQSxHQUFBQSxFQUFBbE0sR0FBQSxHQUFBLE9BQUEsQ0FDQSxJQUFBbU0sR0FBQTlnQyxFQUFBemdDLFFBQUE0SCxFQUFBbXRELFdBQUF2QyxJQUNBLEtBQUEsSUFBQStPLEVBQUEsQ0FDQSxJQUFBLEdBQUFoTSxLQUFBaEIsR0FBQSxHQUFBZ04sRUFBQWhNLEdBQUFoQixFQUFBZ0IsR0FBQTE1QyxRQUFBNHdDLEVBQUE4SSxHQUFBLE9BQUEsQ0FDQSxRQUFBLElBSUEsT0FBQSxFQUVBLEdBQUExNUMsR0FBQWhsQixJQUNBNFAsWUFBQSxXQUNBLEdBQUFoUSxFQUFBNEosZ0JBQUF3YixFQUFBLENBQ0EsR0FBQTJsRCxHQUFBM08sRUFBQWgzQyxFQUNBLElBQUF1bEQsSUFBQTNYLEVBQUErWCxFQUFBeGtFLElBQUF3a0UsRUFBQTdOLE1BQUE2TixFQUFBN04sTUFBQTZOLEVBQUF4a0UsS0FDQXdrRSxFQUFBN04sUUFBQTZOLEVBQUF4a0UsSUFBQSxPQUFBNEssRUFBQTY1RCxzQkFDQSxJQUFBLE9BQ0EsS0FFQSxLQUFBLGFBQ0EsR0FBQUosRUFBQUcsRUFBQTdOLE9BQUEsQ0FDQSxHQUFBNE4sR0FBQS9PLElBQUF2bkQsS0FBQSxJQUFBclMsUUFBQWdQLEVBQUFtdEQsV0FDQWxDLEdBQUFoM0MsRUFBQWpVLEVBQUE4aEQsYUFBQTBMLEVBQUFtTSxHQUFBQSxFQUNBLE9BR0EsUUFDQSxHQUFBRyxHQUFBRixFQUFBN04sTUFBQWdPLEVBQUF0VixFQUFBcVYsR0FBQSxHQUFBRSxFQUFBeE0sRUFBQXVNLEVBQ0EsSUFBQUQsRUFBQUUsRUFBQS9PLEVBQUFoM0MsRUFBQW15QyxFQUFBMFQsR0FBQSxJQUFBMVQsRUFBQTBULEVBQUEsR0FBQSxHQUFBQSxFQUFBdE0sRUFBQXNNLFFBQUEsQ0FDQSxHQUFBdFYsR0FBQUUsSUFBQXJCLGVBQUEwVyxHQUFBRSxFQUFBblYsRUFBQWtWLEVBQUF4VixFQUFBQSxFQUFBN3lELE1BQUFnekQsUUFBQTd4RCxFQUFBMHhELEdBQUE1QixFQUFBaUMsRUFBQW1WLEVBQUFDLEVBQUF0b0UsTUFDQSxJQUFBLEtBQUFpeEQsR0FBQWdJLElBQUFvUCxLQUFBcFgsSUFBQSxJQUFBcVgsRUFBQXRvRSxNQUFBbTFELHFCQUFBLElBQUFtVCxFQUFBdG9FLE1BQUFvMUQsaUJBQUFYLEVBQUE0VCxHQUFBLElBQUFDLEVBQUF0b0UsTUFBQXN6RCxNQUFBckMsRUFBQSxDQUNBLEdBQUFsSSxHQUFBOFMsRUFBQXdNLElBQ0FGLEdBQUFwZixHQUFBb2YsSUFBQUUsS0FBQUEsRUFBQXRmLEdBRUF1USxFQUFBaDNDLEVBQUErbEQsT0FJQSxJQUVBRSxjQUFBLFNBQUFsbUUsR0FDQSxHQUFBaWdCLEdBQUFobEIsSUFDQTRQLFlBQUEsV0FDQW9zRCxFQUFBaDNDLEVBQUEsRUFBQXU1QyxFQUFBL0ksT0FDQSxJQUVBMFYsU0FBQSxTQUFBbm1FLEdBQ0EsR0FBQWlnQixHQUFBaGxCLEtBQUEwbkUsRUFBQTk5QixFQUFBNWtCLEdBQUE4VixFQUFBa2hDLEVBQUFoM0MsR0FBQStoRCxFQUFBaGlFLEVBQUF3dUIsZUFBQXh1QixFQUFBa2tFLEVBQUFscEUsRUFBQWtwRSxlQUFBbEMsRUFBQWtDLGNBQUFrQyxFQUFBdlksRUFBQStJLElBQUE3M0QsTUFBQWczQixFQUFBMzBCLElBQUEyMEIsRUFBQWdpQyxPQUFBbkIsSUFBQTczRCxNQUFBZzNCLEVBQUFnaUMsTUFBQWhpQyxFQUFBMzBCLElBQ0E4aUUsR0FBQW1DLFFBQUEsT0FBQXhZLEVBQUF1WSxFQUFBMy9DLFVBQUFwWCxLQUFBLElBQUErMkQsRUFBQS8yRCxLQUFBLEtBQ0F4VSxFQUFBeXJFLGFBQUF6ckUsRUFBQXlyRSxZQUFBLFFBQUFqTixFQUFBcDVDLEVBQUFvdEMsRUFBQWg5QixRQUFBaXBDLE9BQUF2akMsR0FDQTJsQyxFQUFBejdDLEVBQUEyMkMsSUFBQWxHLElBQUF0NkIsRUFBQXAyQixFQUFBeWhFLElBQUE3SyxJQUFBdm5ELEtBQUEsS0FDQTRRLEVBQUE2N0MsVUFBQTRDLGNBQUEvSCxJQUFBdG5ELEtBQUEsS0FBQXN6RCxFQUFBL3pDLFFBQUEsWUFFQTIzQyxVQUFBLFNBQUF2bUUsR0FDQSxHQUFBMmlFLEdBQUE5OUIsRUFBQTVwQyxNQUFBZ2xCLEVBQUFobEIsSUFDQSxJQUFBZ2xCLEVBQUE2N0MsVUFBQSxDQUNBLEdBQUFxSixHQUFBbGxELEVBQUE2N0MsVUFBQTRDLFlBQUFuUCxFQUFBcUgsSUFBQTczRCxPQUNBLE1BQUFvbUUsSUFBQW41RCxFQUFBZzVELHdCQUFBLElBQUF2VSxLQUFBMFUsSUFBQXhPLElBQUF0bkQsS0FBQSxJQUFBa2dELEtBQUFvUSxFQUFBcFEsS0FDQSxJQUFBbFUsRUFBQWtVLEtBQUExa0QsV0FBQSxXQUNBODNELEVBQUEvekMsUUFBQSxlQUNBLEdBQUE1aUIsRUFBQWk1RCxrQkFBQS9ULElBQUEzQixFQUFBdmpELEVBQUFnNUQsd0JBQUFyTyxJQUFBNTNELFVBQ0EyOEQsRUFBQXo3QyxFQUFBc3ZDLEVBQUF6d0QsRUFBQWtCLElBQUF5aEUsSUFBQTdLLElBQUF2bkQsS0FBQSxNQUFBb3lELEVBQUFsUyxFQUFBbGdELEtBQUEsSUFDQXN6RCxFQUFBL3pDLFFBQUEsYUFHQTQzQyxnQkFBQSxTQUFBeG1FLEdBQ0EsR0FBQWlnQixHQUFBaGxCLElBQ0EybUUsS0FBQSxFQUFBL21FLEVBQUE0SixnQkFBQXdiLEdBQUFqVSxFQUFBcTVELGlCQUFBcGxELEVBQUE2N0MsVUFBQTRDLGNBQUE5SCxJQUFBdm5ELEtBQUEsS0FBQXFzRCxFQUFBejdDLEVBQUEyMkMsTUFFQTZQLFlBQUEsU0FBQXptRSxHQUNBeWhFLElBQUE3SyxJQUFBdm5ELEtBQUEsS0FBQTRuQyxFQUFBcm9CLFFBQUEsVUFBQTVpQixFQUFBZzVELHVCQUFBLElBQUF2VSxLQUFBLzRDLEVBQUFva0QsVUFBQTRDLFdBQUFobkQsRUFBQW9rRCxVQUFBNEMsY0FBQS9ILElBQUF0bkQsS0FBQSxLQUFBcUksRUFBQW9rRCxVQUFBQyxVQUFBLElBQ0EvdkQsRUFBQTA2RCxxQkFBQWh2RCxFQUFBb2tELFVBQUFDLFVBQUFya0QsRUFBQW9rRCxVQUFBd0IsaUJBQUEsR0FDQXp5RCxXQUFBLFdBQ0E2d0QsRUFBQWhrRCxFQUFBay9DLE1BQ0EsS0FFQStQLFdBQUEsU0FBQTNtRSxHQUNBMFgsRUFBQW9rRCxVQUFBck8sY0FBQSxFQUFBNWlELFdBQUEsV0FDQW9zQyxFQUFBcm9CLFFBQUEsYUFDQSxJQUdBeStCLEdBQUE5aUQsVUFBQWkzRCxrQkFBQSxTQUFBdmhELEVBQUErZ0QsR0FDQS9nRCxFQUFBL2UsTUFBQW8wQixLQUFBMHJDLEVBQUFHLFdBQUEsS0FFQSxJQUFBeUYsR0FDQSxJQUFBNVcsSUFBQWx4RCxFQUFBLE9BQUFreEQsRUFBQWxILFFBQ0EsSUFBQSxhQUNBLE1BQUFweEMsR0FBQXM0QyxFQUFBdDRDLEdBQUEyakMsRUFBQXViLElBRUEsS0FBQSxnQkFDQSxNQUFBbC9DLEtBQUE1WSxHQUFBa3hELEVBQUE1eEQsUUFBQVUsSUFBQThuRSxHQUFBNVcsRUFBQTV4RCxNQUNBd29FLElBQUEvaEMsRUFBQWxvQyxXQUFBcVAsRUFBQSs0RCxjQUFBLzRELEVBQUErNEQsYUFBQWpvRSxLQUFBZy9ELEVBQUE4SyxHQUFBNTZELElBQUE0NkQsR0FBQUEsSUFBQXgwRCxNQUFBLElBQ0FrcUQsRUFBQXg5RCxHQUFBLEdBQUEsRUFBQSt1RCxFQUFBK1ksR0FBQW5nRCxVQUFBbWdELElBQUEvaEMsRUFBQWxvQyxXQUFBcVAsRUFBQTZ2RCxnQkFBQTd2RCxFQUFBNnZELGNBQUEvK0QsS0FBQWcvRCxFQUFBaDlELEVBQUE4M0QsSUFBQSxFQUFBNXFELElBQ0FzeEQsRUFBQTVsRCxFQUVBLEtBQUEsUUFDQSxTQUFBdGIsR0FDQXlsRSxHQUFBMzhELElBQUE5SSxFQUNBLElBQUEwbUUsR0FBQSxTQUFBN2lELEVBQUFqVSxHQUNBLEdBQUE2NkQsR0FBQTVtRCxFQUFBbGdCLGFBQUEsUUFBQStpRSxFQUFBLFVBQUE3aUQsRUFBQWd2QixVQUFBLElBQUFwSyxFQUFBemdDLFFBQUF5aUUsRUFBQTc2RCxFQUFBODZELG9CQUFBN21ELEVBQUE4bUQsbUJBQUEsYUFBQTltRCxFQUFBZ3ZCLE9BQ0EsS0FBQTZ6QixFQUFBLEdBQUEsVUFBQTdpRCxFQUFBZ3ZCLFFBQUEsQ0FDQSxHQUFBdjNCLEdBQUE3YyxFQUFBVSxjQUFBLFFBQ0FtYyxHQUFBZCxhQUFBLE9BQUFpd0QsR0FBQS9ELEVBQUEsU0FBQXByRCxFQUFBMWIsS0FBQTBiLEVBQUEsU0FDQW9yRCxHQUFBLFNBQ0EsUUFBQSxJQUFBQSxFQUFBLFNBQUFrRSxHQUNBLFFBQUFwdUMsS0FDQSxNQUFBMzlCLE1BQUE2Z0UsVUFBQTdnRSxLQUFBNmdFLFVBQUE5dkQsS0FBQTh3RCxXQUFBN2hFLEtBQUE2Z0UsVUFBQXdCLGlCQUFBLElBQUE3TSxNQUFBLElBQUF6a0QsRUFBQWk3RCxTQUFBcHNFLEVBQUE0SixnQkFBQXhKLE1BQUErUSxFQUFBZzVELHNCQUFBblgsRUFBQThSLEVBQUEvSSxJQUFBNzNELFNBQUEwbkIsVUFBQWs1QyxFQUFBL0ksSUFBQTczRCxVQUFBc1EsS0FBQSxJQUFBNjNELEVBQUFwcUUsS0FBQTdCLE1BQUEsR0FBQWlzRSxFQUFBcHFFLEtBQUE3QixNQUVBLFFBQUF3dkIsR0FBQXJzQixHQUNBK29FLEVBQUFycUUsS0FBQTdCLEtBQUFtRCxHQUFBbkQsS0FBQTZnRSxXQUFBajNCLEVBQUE1cEMsTUFBQTJ6QixRQUFBLFlBRUEsR0FBQXM0QyxHQUFBQyxDQUNBLEtBQUFILEVBQUFsTCxVQUFBc0wsV0FBQSxDQUNBLElBQUEsSUFBQXA3RCxFQUFBcTdELGdCQUFBLENBQ0EsR0FBQTMwRCxPQUFBNDBELHlCQUFBLENBQ0Esa0JBQUE1MEQsUUFBQUMsaUJBQUFELE9BQUFDLGVBQUEsV0FBQXk2QyxFQUFBLE9BQUFtYSxXQUFBLFNBQUE5cEUsR0FDQSxNQUFBQSxHQUFBOHBFLFdBQ0EsU0FBQTlwRSxHQUNBLE1BQUFBLEdBQUFnVyxZQUFBbEosV0FFQSxJQUFBaTlELEdBQUE5MEQsT0FBQUMsZUFBQUQsT0FBQTQwRCx5QkFBQTUwRCxPQUFBQyxlQUFBcTBELEdBQUEsU0FBQWxvRSxDQUNBMG9FLElBQUFBLEVBQUF4bEUsS0FBQXdsRSxFQUFBdG5FLEtBQUFnbkUsRUFBQU0sRUFBQXhsRSxJQUNBbWxFLEVBQUFLLEVBQUF0bkUsSUFBQXdTLE9BQUF3WCxlQUFBODhDLEVBQUEsU0FDQWhsRSxJQUFBNDJCLEVBQ0ExNEIsSUFBQXVxQixFQUNBTixjQUFBLEtBQ0EsVUFBQTY4QyxFQUFBLzNCLFVBQUFpNEIsRUFBQSxXQUNBLE1BQUFqc0UsTUFBQWdKLGFBQ0FrakUsRUFBQSxTQUFBL29FLEdBQ0FuRCxLQUFBZ0osWUFBQTdGLEdBQ0FzVSxPQUFBd1gsZUFBQTg4QyxFQUFBLFNBQ0FobEUsSUFBQTQyQixFQUNBMTRCLElBQUF1cUIsRUFDQU4sY0FBQSxTQUVBdHZCLEdBQUE0c0Usa0JBQUFULEVBQUFTLGlCQUFBLFdBQUFQLEVBQUFGLEVBQUFTLGlCQUFBLFNBQ0FOLEVBQUFILEVBQUFVLGlCQUFBLFNBQUFWLEVBQUFXLGlCQUFBLFFBQUEvdUMsR0FDQW91QyxFQUFBWSxpQkFBQSxRQUFBbjlDLEdBQ0F1OEMsR0FBQWxMLFVBQUFzTCxXQUFBRixFQUFBRixFQUFBbEwsVUFBQStMLFdBQUFWLEVBRUFILEVBQUFsTCxVQUFBNEMsVUFBQSxTQUFBb0osR0FDQSxNQUFBamEsS0FBQSxJQUFBaWEsRUFBQVosRUFBQXBxRSxLQUFBN0IsS0FBQXljLElBQUF0RixNQUFBLElBQUFxVSxVQUFBcFgsS0FBQSxJQUFBNjNELEVBQUFwcUUsS0FBQTdCLEtBQUF5YyxLQUNBc3ZELEVBQUFsTCxVQUFBQyxVQUFBLFNBQUEzOUQsRUFBQTBwRSxHQUNBWCxFQUFBcnFFLEtBQUE3QixLQUFBeWMsR0FBQSxPQUFBdFosR0FBQUEsSUFBQVUsRUFBQSxJQUFBLElBQUFncEUsR0FBQWphLEVBQUF6dkQsRUFBQWdVLE1BQUEsSUFBQXFVLFVBQUFwWCxLQUFBLElBQUFqUixJQUNBOG9FLElBQUFwb0UsSUFBQW9vRSxFQUFBLFdBQ0EsTUFBQWpzRSxNQUFBbUQsT0FDQStvRSxFQUFBLFNBQUEvb0UsR0FDQW5ELEtBQUFtRCxNQUFBQSxHQUNBLFNBQUFwQyxHQUNBLEdBQUE2b0MsRUFBQTVLLFdBQUE0SyxFQUFBNUssU0FBQWorQixLQUFBOEMsSUFBQSxJQUFBK2xDLEVBQUE1SyxTQUFBaitCLEdBQUErckUsZ0JBQUEsQ0FDQSxHQUFBQyxHQUFBbmpDLEVBQUE1SyxTQUFBaitCLElBQUE2b0MsRUFBQTVLLFNBQUFqK0IsR0FBQWdHLElBQUE2aUMsRUFBQTVLLFNBQUFqK0IsR0FBQWdHLElBQUEsU0FBQTVGLEdBQ0EsTUFBQUEsR0FBQWdDLE9BQ0E2cEUsRUFBQXBqQyxFQUFBNUssU0FBQWorQixJQUFBNm9DLEVBQUE1SyxTQUFBaitCLEdBQUFrRSxJQUFBMmtDLEVBQUE1SyxTQUFBaitCLEdBQUFrRSxJQUFBLFNBQUE5RCxFQUFBZ0MsR0FDQSxNQUFBaEMsR0FBQWdDLE1BQUFBLEVBQUFoQyxFQUVBeW9DLEdBQUE1SyxTQUFBaitCLElBQ0FnRyxJQUFBLFNBQUE1RixHQUNBLEdBQUFBLEVBQUEwL0QsVUFBQSxDQUNBLEdBQUExL0QsRUFBQTAvRCxVQUFBOXZELEtBQUE4d0QsV0FBQSxNQUFBMWdFLEdBQUEwL0QsVUFBQXdCLGVBQ0EsSUFBQXp2RCxHQUFBbTZELEVBQUE1ckUsRUFDQSxRQUFBLElBQUFxMEQsRUFBQTN4RCxFQUFBQSxFQUFBMUMsRUFBQTAvRCxVQUFBdE8sUUFBQTZCLGtCQUFBLElBQUFyakQsRUFBQWk3RCxTQUFBcDVELEVBQUEsR0FFQSxNQUFBbTZELEdBQUE1ckUsSUFFQThELElBQUEsU0FBQTlELEVBQUFnQyxHQUNBLEdBQUF5UCxHQUFBcTZELEVBQUFyakMsRUFBQXpvQyxFQUNBLE9BQUF5UixHQUFBbzZELEVBQUE3ckUsRUFBQWdDLEdBQUFoQyxFQUFBMC9ELFdBQUFvTSxFQUFBdDVDLFFBQUEsWUFDQS9nQixHQUVBazZELGdCQUFBLEtBR0FmLEVBQUFockUsTUFBQSxTQUFBZ3JFLEdBQ0FuRixHQUFBbDlELEdBQUFxaUUsRUFBQSxhQUFBLFNBQUEvaEUsR0FDQSxHQUFBMDlELEdBQUE5OUIsRUFBQTVwQyxLQUNBQSxNQUFBNmdFLFVBQUE0QyxjQUFBOUgsSUFBQXZuRCxLQUFBLEtBQUFzekQsRUFBQS96QyxRQUFBLGVBRUFvNEMsTUFFQS9tRCxHQUFBQSxFQUFBNjdDLFVBQUFoOUQsRUFBQWdrRSxHQUNBMW1FLEVBQUE0UCxFQUNBLEtBQUEsSUFBQTgyRCxJQUFBcHJELEVBQUF0YixFQUFBNjZDLEVBQUFwUyxFQUFBbnRCLElBQUEsS0FBQXM1QyxFQUFBdDVDLElBQUE1WSxFQUFBNFksRUFBQXM1QyxVQUFBbHlELEtBQUFreUQsRUFBQWx5RCxJQUNBLElBQUFrTixFQUFBazFELFdBQUFiLEVBQUEzb0QsR0FBQXVrRCxJQUFBdmtELEVBQUEzRSxlQUFBLGVBQUEyRSxFQUFBeXdELFVBQUFuOEQsRUFBQW04RCxVQUNBendELEVBQUFkLGFBQUEsWUFBQTVLLEVBQUFtOEQsWUFBQSxTQUFBbjhELEVBQUFvOEQsZUFBQSxJQUFBcDhELEVBQUFrMUQsV0FBQWIsRUFBQTNvRCxHQUNBQSxFQUFBMWIsS0FBQSxjQUFBLElBQUE4bUUsSUFBQWpCLEdBQUFsOUQsR0FBQStTLEVBQUEsU0FBQXdsRCxHQUFBdUosYUFDQTVFLEdBQUFsOUQsR0FBQStTLEVBQUEsUUFBQXdsRCxHQUFBeUosWUFBQTlFLEdBQUFsOUQsR0FBQStTLEVBQUEsYUFBQXdsRCxHQUFBc0osaUJBQ0EzRSxHQUFBbDlELEdBQUErUyxFQUFBLE9BQUF3bEQsR0FBQXFKLFdBQUExRSxHQUFBbDlELEdBQUErUyxFQUFBLFFBQUF3bEQsR0FBQWdJLFlBQ0FyRCxHQUFBbDlELEdBQUErUyxFQUFBLGFBQUF3bEQsR0FBQXFJLGtCQUFBLElBQUF2NUQsRUFBQWsxRCxXQUFBVyxHQUFBbDlELEdBQUErUyxFQUFBLFFBQUF3bEQsR0FBQWtFLFlBQ0FTLEdBQUFsOUQsR0FBQStTLEVBQUEsV0FBQXdsRCxHQUFBZ0osZUFBQXJFLEdBQUFsOUQsR0FBQStTLEVBQUEsUUFBQXdsRCxHQUFBNEcsWUFDQWpDLEdBQUFsOUQsR0FBQStTLEVBQUEsV0FBQXdsRCxHQUFBNEcsWUFBQWpDLEdBQUFsOUQsR0FBQStTLEVBQUEsT0FBQXdsRCxHQUFBNEcsWUFDQWpDLEdBQUFsOUQsR0FBQStTLEVBQUEsTUFBQXdsRCxHQUFBaUosVUFBQXRFLEdBQUFsOUQsR0FBQStTLEVBQUEsV0FBQTFMLEVBQUFxOEQsWUFDQXhHLEdBQUFsOUQsR0FBQStTLEVBQUEsYUFBQTFMLEVBQUFzOEQsY0FBQXpHLEdBQUFsOUQsR0FBQStTLEVBQUEsVUFBQTFMLEVBQUF1OEQsV0FDQXRNLElBQUEsSUFBQWp3RCxFQUFBdzhELGVBQUE5d0QsRUFBQS9SLGdCQUFBLGNBQUFrOEQsR0FBQWw5RCxHQUFBK1MsRUFBQSxVQUFBd2xELEdBQUF3RixjQUNBYixHQUFBbDlELEdBQUErUyxFQUFBLFdBQUF3bEQsR0FBQUMsZ0JBQUEwRSxHQUFBbDlELEdBQUErUyxFQUFBLG1CQUFBbXRCLEVBQUFyd0IsTUFDQXF0RCxHQUFBbDlELEdBQUErUyxFQUFBLG9CQUFBbXRCLEVBQUFyd0IsTUFBQXF0RCxHQUFBbDlELEdBQUErUyxFQUFBLGlCQUFBbXRCLEVBQUFyd0IsTUFDQXF0RCxHQUFBbDlELEdBQUErUyxFQUFBLFFBQUFtdEIsRUFBQXJ3QixNQUFBcXRELEdBQUFsOUQsR0FBQStTLEVBQUEsUUFBQXdsRCxHQUFBbUgsb0JBQ0F4QyxHQUFBbDlELEdBQUErUyxFQUFBLGNBQUFtdEIsRUFBQXJ3QixPQUFBcXRELEdBQUFsOUQsR0FBQStTLEVBQUEsV0FBQXdsRCxHQUFBSyxlQUNBa0UsRUFBQTlLLElBQUF0bkQsS0FBQSxJQUFBLEtBQUFxSSxFQUFBb2tELFVBQUE0QyxXQUFBLEtBQUEsSUFBQTF5RCxFQUFBZzVELHNCQUFBbnFFLEVBQUE0SixnQkFBQWlULEdBQUEsQ0FDQSxHQUFBK3dELEdBQUE1akMsRUFBQWxvQyxXQUFBcVAsRUFBQSs0RCxjQUFBLzRELEVBQUErNEQsYUFBQWpvRSxLQUFBZy9ELEVBQUFwa0QsRUFBQW9rRCxVQUFBNEMsV0FBQSxHQUFBMXlELElBQUEwTCxFQUFBb2tELFVBQUE0QyxXQUFBLEdBQUFobkQsRUFBQW9rRCxVQUFBNEMsV0FBQSxFQUNBLE1BQUErSixHQUFBbk0sRUFBQTVrRCxHQUFBLEdBQUEsRUFBQW0yQyxFQUFBNGEsRUFBQXIyRCxNQUFBLElBQUFxVSxVQUFBZ2lELEVBQUFyMkQsTUFBQSxJQUNBLElBQUFtOUMsR0FBQXFILElBQUE3M0QsT0FDQTBpRSxHQUFBbFMsRUFBQWxnRCxLQUFBLEtBQUEsSUFBQWdzQyxFQUFBa1UsSUFBQXZqRCxFQUFBaTVELGlCQUFBL1QsSUFDQWxsRCxFQUFBZzVELHNCQUFBbnFFLEVBQUE0SixnQkFBQWlULEtBQUEsSUFBQSs0QyxJQUFBbEIsS0FBQW9RLEVBQUFwUSxJQUNBbU0sRUFBQWhrRCxFQUFBNjNDLEdBQUExMEQsRUFBQTRKLGdCQUFBaVQsR0FBQXUvQyxFQUFBdi9DLEVBQUE4aEQsRUFBQS9JLFFBRUEvNEMsRUFDQSxNQUVBLEtBQUEsU0FDQSxNQUFBa3ZELEtBQUEvaEMsRUFBQWxvQyxXQUFBcVAsRUFBQSs0RCxjQUFBLzRELEVBQUErNEQsYUFBQWpvRSxLQUFBZy9ELEVBQUE5TCxFQUFBNXhELE1BQUE0TixJQUFBZ2tELEVBQUE1eEQsTUFBQTR4RCxFQUFBNXhELE9BQUFnVSxNQUFBLElBQ0FrcUQsRUFBQXg5RCxHQUFBLEdBQUEsRUFBQSt1RCxFQUFBK1ksR0FBQW5nRCxVQUFBbWdELElBQUE1VyxFQUFBekIsVUFDQW53RCxNQUFBeXZELEVBQUErSSxJQUFBNzNELFFBQUEwbkIsVUFBQXBYLEtBQUEsSUFBQXVuRCxJQUFBdm5ELEtBQUEsSUFDQWsvQyxTQUFBd0IsRUFBQWp6RCxLQUFBN0IsTUFDQTZ0RCxPQUFBLGVBQ0EwRSxFQUFBeGhELElBQ0E2aEQsRUFBQStJLElBQUE3M0QsUUFBQTBuQixVQUFBcFgsS0FBQSxJQUFBdW5ELElBQUF2bkQsS0FBQSxHQUVBLEtBQUEsVUFDQTJnRCxFQUFBNXhELE9BQUF3b0UsR0FBQTVXLEVBQUE1eEQsTUFBQWdVLE1BQUEsSUFBQWtxRCxFQUFBeDlELEdBQUEsR0FBQSxFQUFBK3VELEVBQUErWSxHQUFBbmdELFVBQUFtZ0QsS0FBQTVXLEVBQUE1eEQsTUFBQXc0RCxJQUFBdm5ELEtBQUEsR0FDQSxLQUFBLEdBQUFrZ0QsSUFBQXFILElBQUFnSixHQUFBTixJQUFBb0osR0FBQW5aLEdBQUF4ekQsT0FBQSxFQUFBMnNFLEdBQUE5SSxLQUFBeE4sRUFBQXNXLElBQUFBLE1BQ0EsTUFBQW5aLElBQUF0N0MsT0FBQTJyRCxHQUFBOEksR0FBQSxFQUFBOUksSUFBQXZrQixFQUFBa1UsS0FBQVMsRUFBQTV4RCxRQUFBdzRELElBQUF2bkQsS0FBQSxHQUVBLEtBQUEsZUFDQSxNQUFBc25ELEtBQUF0bkQsS0FBQSxHQUVBLEtBQUEsU0FXQSxNQVZBcUksSUFBQUEsRUFBQW9rRCxZQUNBN2tCLEVBQUFwUyxFQUFBbnRCLEdBQUFBLEVBQUFva0QsVUFBQUMsVUFBQS92RCxFQUFBOHdELFdBQUFRLEVBQUE1bEQsR0FBQUEsRUFBQW9rRCxVQUFBNEMsV0FBQSxJQUNBbUQsR0FBQTM4RCxJQUFBd1MsR0FDQWhGLE9BQUE0MEQsMEJBQUE1MEQsT0FBQUMsZUFBQUQsT0FBQTQwRCx5QkFBQTUwRCxPQUFBQyxlQUFBK0UsR0FBQSxVQUFBQSxFQUFBb2tELFVBQUFzTCxZQUFBMTBELE9BQUF3WCxlQUFBeFMsRUFBQSxTQUNBMVYsSUFBQTBWLEVBQUFva0QsVUFBQXNMLFdBQ0FsbkUsSUFBQXdYLEVBQUFva0QsVUFBQStMLFdBQ0ExOUMsY0FBQSxJQUNBdHZCLEVBQUE0c0Usa0JBQUEvdkQsRUFBQSt2RCxpQkFBQSxVQUFBL3ZELEVBQUFva0QsVUFBQXNMLGFBQUExdkQsRUFBQWl3RCxpQkFBQSxRQUFBandELEVBQUFva0QsVUFBQXNMLFlBQ0ExdkQsRUFBQWt3RCxpQkFBQSxRQUFBbHdELEVBQUFva0QsVUFBQStMLGFBQUFud0QsRUFBQW9rRCxVQUFBaDlELEdBRUE0WSxDQUVBLEtBQUEsY0FDQSxHQUFBbXRCLEVBQUFwM0IsUUFBQSsvQyxFQUFBZSxVQUFBLENBQ0EsR0FBQW9hLElBQUExWSxHQUFBLEVBQUEsR0FBQSxHQUFBNWdELEtBQUEsR0FDQSxPQUFBdzFCLEdBQUFubkMsS0FBQTh2RCxFQUFBZSxTQUFBLFNBQUFxQixFQUFBZ1osR0FDQSxHQUFBQSxFQUFBemEsT0FBQXdhLEdBQUEsTUFBQUEsSUFBQUMsR0FBQSxJQUNBRCxHQUVBLE1BQUFuYixHQUFBZSxVQUdBLEdBQUFzYSxHQUFBendCLFVBQUFDLFVBQUFsRCxFQUFBLFVBQUFqNEMsS0FBQTJyRSxHQUFBeEcsRUFBQSxZQUFBbmxFLEtBQUEyckUsR0FBQXZHLEVBQUEsVUFBQXBsRSxLQUFBMnJFLEtBQUF4RyxFQUFBcEcsRUFBQSxXQUFBLytELEtBQUEyckUsS0FBQXhHLENBQ0EsT0FBQWhWLEdBQUE5aUQsV0FDQXUrRCxjQUFBLGlCQUNBL2pDLFVBQ0E2cEIsWUFBQSxJQUNBbWEsZ0JBQ0E1bkUsTUFBQSxJQUNBQyxJQUFBLEtBRUEydEQsa0JBQ0E1dEQsTUFBQSxJQUNBQyxJQUFBLEtBRUEwdEQsYUFDQTN0RCxNQUFBLElBQ0FDLElBQUEsS0FFQTB1RCxpQkFBQSxJQUNBa1osV0FBQSxLQUNBN2EsS0FBQSxLQUNBTSxNQUFBLEtBQ0E0WixXQUFBeGpDLEVBQUFyd0IsS0FDQTh6RCxhQUFBempDLEVBQUFyd0IsS0FDQSt6RCxVQUFBMWpDLEVBQUFyd0IsS0FDQW02QyxPQUFBLEVBQ0FELFFBQUEsRUFDQW9PLFlBQUEsRUFDQTRKLG9CQUFBLEVBQ0ExQixzQkFBQSxFQUNBdE0sWUFBQSxFQUNBdU0saUJBQUEsRUFDQTNYLE1BQUEsS0FDQWtXLFVBQUEzK0IsRUFBQXJ3QixLQUNBdXdELGFBQUEsS0FDQVgsY0FBQSxTQUFBNkUsRUFBQWo5RCxHQUNBLE1BQUE2NEIsR0FBQWxvQyxXQUFBcVAsRUFBQSs0RCxjQUFBLzRELEVBQUErNEQsYUFBQWpvRSxLQUFBN0IsS0FBQWd1RSxFQUFBajlELEdBQUFpOUQsR0FFQXBOLGNBQUEsS0FDQTZCLFNBQUEsS0FDQTBILGlCQUFBLEVBQ0FDLGlCQUFBLEVBQ0F4QixnQkFBQWgvQixFQUFBcndCLEtBQ0F1aUQsMEJBQUEsSUFDQWpKLGNBQUEsRUFDQW9iLFlBQUEsRUFDQS9GLGNBQUEsRUFDQWhLLFdBQUEsR0FDQUQsMkJBQUFwNkQsRUFDQXNoRSxlQUFBLEdBQ0ExUSxXQUFBLEtBQ0E0VixvQkFBQSxFQUNBbkQsWUFBQSxFQUNBMkUsbUJBQUEsT0FBQSxNQUFBLFlBQ0FyRCxZQUFBLEVBQUEsRUFBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsRUFBQSxLQUNBcG9CLFdBQUEsS0FDQThXLGlCQUFBdHRCLEVBQUFyd0IsS0FDQTRrRCxjQUFBLEtBQ0FpQyxlQUFBLEtBQ0E4Tix1QkFBQXJxRSxFQUNBaXlELFlBQUEsRUFDQWtXLFVBQUEsRUFDQXVCLGdCQUFBLEVBQ0FuQixpQkFBQSxFQUNBeEIscUJBQUEsTUFDQW5QLE9BQUEsS0FDQXlSLFVBQUEsV0FDQWpILFdBQUEsRUFDQWtILGFBQUEsRUFDQWdCLHNCQUFBLEdBRUF6YixhQUNBMGIsR0FDQUMsVUFBQSxXQUNBN1MsWUFBQSxFQUNBOFMsaUJBQUEsS0FFQXh4RCxHQUNBdXhELFVBQUEsb0JBQ0E3UyxZQUFBLEVBQ0E4UyxpQkFBQSxLQUVBOXlDLEtBQ0E2eUMsVUFBQSwwQkFDQTdTLFlBQUEsSUFHQXZJLFdBQ0FnQixjQUNBZixLQUFBLFNBQUF6ckQsR0FDQSxRQUFBOG1FLEdBQUF4QyxFQUFBaDdELEVBQUE0aEQsRUFBQWtiLEdBQ0EsSUFBQSxJQUFBOThELEVBQUFvOUQscUJBQUEsQ0FDQSxHQUFBbCtDLEdBQUF1K0MsRUFBQUMsRUFBQXR6QyxFQUFBdXpDLEVBQUEsU0FBQXorQyxFQUFBdytDLEdBQ0EsUUFBQUEsRUFBQUEsSUFBQTVxRSxFQUFBNHFFLEVBQUExQyxFQUFBam5FLGFBQUErb0UsRUFBQSxJQUFBNTlDLE1BQUEsZ0JBQUF3K0MsS0FBQSxJQUFBeCtDLEVBQUFsdUIsUUFBQSxNQUFBMHNFLEVBQUExdUUsRUFBQTB1RSxHQUFBLFVBQUFBLEVBQUFBLEdBQUEsRUFBQSxTQUFBQSxJQUFBQSxHQUFBLElBQ0E5YixFQUFBMWlDLEdBQUF3K0MsSUFDQUUsRUFBQTVDLEVBQUFqbkUsYUFBQStvRSxFQUNBLElBQUFjLEdBQUEsS0FBQUEsSUFBQUEsRUFBQUEsRUFBQS9wRSxRQUFBLEdBQUF5ZCxRQUFBLElBQUEsS0FBQSxLQUNBbXNELEVBQUFocUUsS0FBQUMsTUFBQSxJQUFBa3FFLEVBQUEsTUFBQUgsRUFBQSxDQUNBQyxFQUFBNXFFLENBQ0EsS0FBQXMzQixJQUFBcXpDLEdBQUEsR0FBQSxVQUFBcnpDLEVBQUE5NUIsY0FBQSxDQUNBb3RFLEVBQUFELEVBQUFyekMsRUFDQSxRQUdBdXpDLEVBQUEsUUFBQUQsR0FBQTliLEVBQUFOLE9BQUFTLEVBQUFILEVBQUFOLE1BQUFNLEVBQUE1aEQsRUFDQSxLQUFBa2YsSUFBQWxmLEdBQUEsQ0FDQSxHQUFBeTlELEVBQUEsQ0FDQUMsRUFBQTVxRSxDQUNBLEtBQUFzM0IsSUFBQXF6QyxHQUFBLEdBQUFyekMsRUFBQTk1QixnQkFBQTR1QixFQUFBNXVCLGNBQUEsQ0FDQW90RSxFQUFBRCxFQUFBcnpDLEVBQ0EsUUFHQXV6QyxFQUFBeitDLEVBQUF3K0MsSUFHQSxNQUFBN2tDLEdBQUF0K0IsUUFBQSxFQUFBeUYsRUFBQTRoRCxJQUFBLFFBQUFvWixFQUFBMXBFLEtBQUEwTyxFQUFBazlELGNBQUFsQyxFQUFBOWxFLE1BQUErL0QsVUFBQSxVQUNBLFFBQUErRixFQUFBMXBFLEtBQUEwTyxFQUFBOGhELGdCQUFBa1osRUFBQTFwRSxJQUFBLE1BQUEwcEUsRUFBQXJoRSxnQkFBQSxPQUNBcUcsRUFBQTZoRCxPQUFBLEdBQUE3aEQsRUFFQSxHQUFBa2MsR0FBQWp0QixJQUNBLE9BQUEsZ0JBQUF5SCxLQUFBQSxFQUFBN0gsRUFBQXViLGVBQUExVCxJQUFBN0gsRUFBQTBILGlCQUFBRyxJQUNBQSxFQUFBQSxFQUFBdkcsVUFBQXVHLEdBQUFBLEVBQUFtaUMsRUFBQW5uQyxLQUFBZ0YsRUFBQSxTQUFBa3RELEVBQUFsNEMsR0FDQSxHQUFBbXlELEdBQUFobEMsRUFBQXQrQixRQUFBLEtBQUEyaEIsRUFBQWxjLEtBQ0F3OUQsR0FBQTl4RCxFQUFBbXlELEVBQUFobEMsRUFBQXQrQixRQUFBLEtBQUEyaEIsRUFBQTBsQyxhQUFBMWxDLEVBQUE0Z0QsY0FDQSxJQUFBdGIsR0FBQVksRUFBQXliLEVBQUEzaEQsRUFBQXdsQyxhQUNBRixLQUFBMXVELElBQUE0WSxFQUFBb2tELFlBQUFoOUQsSUFBQTRZLEVBQUFva0QsVUFBQTl2RCxLQUFBOHdELFlBQUEsRUFDQXBsRCxFQUFBb2tELFVBQUEvekQsVUFBQTJQLEVBQUFva0QsVUFBQSxHQUFBek8sR0FBQXZ1RCxFQUFBQSxHQUFBLEdBQ0E0WSxFQUFBb2tELFVBQUE5dkQsS0FBQTY5RCxFQUFBbnlELEVBQUFva0QsVUFBQXBPLGFBQUF4bEMsRUFBQXdsQyxhQUFBaDJDLEVBQUFva0QsVUFBQWxPLFlBQUEvb0IsRUFBQXQrQixRQUFBLEtBQUEyaEIsRUFBQTBsQyxhQUNBbDJDLEVBQUFva0QsVUFBQWpPLE1BQUFnYyxFQUFBaGMsT0FBQWdjLEVBQUEvYixhQUFBcDJDLEVBQUFva0QsVUFBQXBrRCxHQUFBQSxFQUNBQSxFQUFBb2tELFVBQUF0TyxRQUFBQSxFQUFBM29CLEVBQUF0bEMsS0FBQW1ZLEVBQUEsa0JBQUFteUQsR0FBQTlaLEVBQUFqekQsS0FBQTRhLEVBQUFva0QsV0FDQWhULE9BQUEsWUFFQXBtRCxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQW81RCxXQUFBN2dFLEtBQUFBLE1BRUFpd0IsT0FBQSxTQUFBMXRCLEVBQUFzc0UsR0FDQSxNQUFBLGdCQUFBdHNFLEdBQUF2QyxLQUFBK1EsS0FBQXhPLEdBQUEsZ0JBQUEsS0FBQUEsRUFBQSxZQUFBNHZELEVBQUE1dkQsS0FBQXFuQyxFQUFBdCtCLE9BQUF0TCxLQUFBMnlELFlBQUFwd0QsR0FDQXZDLEtBQUF5YyxLQUFBLElBQUFveUQsR0FBQTd1RSxLQUFBa3pELEtBQUFsekQsS0FBQXljLElBQUF6YyxVQUFBLElBRUFxaUUsY0FBQSxTQUFBbC9ELEdBQ0EsTUFBQW5ELE1BQUF1eUQsUUFBQXZ5RCxLQUFBdXlELFNBQUFZLEVBQUFuekQsS0FBQStRLEtBQUEvUSxLQUFBeXlELGNBQ0FxQyxFQUFBanpELEtBQUE3QixNQUNBNnRELE9BQUEsZ0JBQ0ExcUQsTUFBQUEsS0FHQTJKLE9BQUEsV0FDQSxNQUFBZ29ELEdBQUFqekQsS0FBQTdCLE1BQ0E2dEQsT0FBQSxZQUdBaWhCLGFBQUEsV0FDQSxNQUFBOXVFLE1BQUF1eUQsUUFBQXZ5RCxLQUFBdXlELFNBQUFZLEVBQUFuekQsS0FBQStRLEtBQUEvUSxLQUFBeXlELGNBQ0FxQyxFQUFBanpELEtBQUE3QixNQUNBNnRELE9BQUEsa0JBR0FraEIsZUFBQSxXQUNBLE9BQUEvdUUsS0FBQStRLEtBQUE4d0QsWUFFQXpoQixXQUFBLFdBQ0EsTUFBQXBnRCxNQUFBdXlELFFBQUF2eUQsS0FBQXV5RCxTQUFBWSxFQUFBbnpELEtBQUErUSxLQUFBL1EsS0FBQXl5RCxjQUNBcUMsRUFBQWp6RCxLQUFBN0IsTUFDQTZ0RCxPQUFBLGdCQUdBbWhCLFlBQUEsV0FDQSxNQUFBaHZFLE1BQUF1eUQsUUFBQXZ5RCxLQUFBdXlELFNBQUFZLEVBQUFuekQsS0FBQStRLEtBQUEvUSxLQUFBeXlELGNBQ0FxQyxFQUFBanpELEtBQUE3QixNQUNBNnRELE9BQUEsaUJBR0F3SixRQUFBLFNBQUFsMEQsR0FDQSxNQUFBbkQsTUFBQXV5RCxRQUFBdnlELEtBQUF1eUQsU0FBQVksRUFBQW56RCxLQUFBK1EsS0FBQS9RLEtBQUF5eUQsY0FDQXFDLEVBQUFqekQsS0FBQTdCLE1BQ0E2dEQsT0FBQSxVQUNBMXFELE1BQUFBLEtBR0FtakQsT0FBQSxTQUFBbmpELEVBQUFtd0QsR0FDQSxNQUFBdHpELE1BQUF1eUQsUUFBQXZ5RCxLQUFBdXlELFNBQUFZLEVBQUFuekQsS0FBQStRLEtBQUEvUSxLQUFBeXlELGNBQ0FxQyxFQUFBanpELEtBQUE3QixNQUNBNnRELE9BQUEsU0FDQTFxRCxNQUFBQSxFQUNBbXdELFNBQUFBLEtBR0FhLFlBQUEsU0FBQWpCLEVBQUFLLEVBQUF4aUQsR0FDQSxRQUFBaytELEdBQUF4VixFQUFBQyxFQUFBYixFQUFBZ0IsR0FDQTc1RCxLQUFBdU8sV0FBQXZPLEtBQUFrdkUsVUFBQXpWLElBQUEsRUFBQXo1RCxLQUFBbXZFLGlCQUFBLEVBQUFudkUsS0FBQXk1RCxRQUFBQSxJQUFBLEVBQ0F6NUQsS0FBQTA1RCxXQUFBQSxJQUFBLEVBQUExNUQsS0FBQTY0RCxhQUFBQSxJQUFBLEVBQUE3NEQsS0FBQTY1RCxhQUFBQSxJQUFBLEVBQ0E3NUQsS0FBQWs3RCxZQUNBeFosSUFBQSxFQUNBanpDLElBQUEsR0FHQSxRQUFBMmdFLEdBQUFDLEVBQUF6cUIsRUFBQTlyQixHQUNBQSxFQUFBQSxJQUFBajFCLEVBQUFpMUIsRUFBQXUyQyxFQUFBOWdFLFFBQUF6TixNQUNBLElBQUFrMkQsR0FBQXFZLEVBQUE5Z0UsUUFBQXVxQixFQUFBLEVBQ0EsSUFBQXk2QixFQUFBLElBQUEzTyxFQUFBN2lELFFBQUEsTUFBQTBoQixHQUFBLGdCQUFBeGhCLEtBQUEyaUQsSUFBQSxNQUFBQSxFQUFBeXFCLEVBQUE5Z0UsUUFBQXlLLE9BQUE4ZixJQUFBLEdBQ0FqdkIsR0FBQSxHQUFBd1ksUUFBQXVpQyxFQUFBN3pDLEVBQUEwcUQsT0FBQSxJQUFBLElBQ0FELFlBQUEsRUFDQTFFLFlBQUF1WSxFQUFBM1YsV0FDQTVCLGVBQUFkLElBQUFuekQsR0FBQW16RCxFQUFBaEIsTUFBQXBSLEVBQ0E2VyxPQUFBLEtBQ0F6RixJQUFBcFIsRUFDQStPLFlBQUE5dkQsRUFDQTh4RCxVQUFBL1EsS0FDQW5oQyxJQUFBbWhDLEVBQUFBLEVBQUFBLEVBQUE5akQsT0FBQSxJQUFBOG9DLEVBQUFubkMsS0FBQW1pRCxFQUFBenRDLE1BQUEsSUFBQSxTQUFBdzlDLEVBQUEwRSxHQUNBckMsRUFBQXFZLEVBQUE5Z0UsUUFBQXVxQixFQUFBLEdBQUF1MkMsRUFBQTlnRSxRQUFBeUssT0FBQThmLElBQUEsR0FDQWp2QixHQUFBLEtBQ0EyeEQsWUFBQSxFQUNBMUUsWUFBQXVZLEVBQUEzVixXQUNBNUIsZUFBQWQsSUFBQW56RCxHQUFBbXpELEVBQUFoQixNQUFBcUQsR0FBQSxPQUFBckMsRUFBQW50RCxHQUNBNHhELE9BQUEsS0FDQXpGLElBQUFqbEQsRUFBQW05RCx3QkFBQTdVLEVBQ0ExRixZQUFBNWlELEVBQUFtOUQseUJBQUFycUUsRUFBQXcxRCxFQUFBeDFELEVBQ0E4eEQsVUFBQTBELE9BRUE1MUMsR0FBQSxNQUFBLENBQ0EsR0FBQTZyRCxJQUFBditELEVBQUEyaEQsWUFBQTNoRCxFQUFBMmhELFlBQUE5TixHQUFBL2dELElBQUF1dUQsRUFBQTlpRCxVQUFBb2pELFlBQUE5TixFQUNBLElBQUEwcUIsSUFBQTdyRCxFQUFBLENBQ0EsSUFBQSxHQUFBOHJELEdBQUFELEVBQUFFLGFBQUFDLEVBQUFGLEVBQUFBLEVBQUF6dUUsT0FBQSxFQUFBYyxFQUFBLEVBQUFBLEVBQUEwdEUsRUFBQTlULFlBQUE1NUQsSUFBQSxDQUNBLEdBQUE0dEUsR0FBQUMsR0FBQTd0RSxFQUFBMnRFLEVBQUEzdEUsRUFBQSxNQUFBeXNFLEVBQUFtQixFQUFBbkIsVUFBQTdTLEVBQUFnVSxFQUFBaFUsV0FDQTZULEdBQUE5Z0UsUUFBQXlLLE9BQUE4ZixJQUFBLEdBQ0FqdkIsR0FBQXdrRSxFQUFBLGdCQUFBQSxHQUFBLEdBQUFoc0QsUUFBQWdzRCxFQUFBdDlELEVBQUEwcUQsT0FBQSxJQUFBLElBQUEsR0FBQSxZQUNBejdELEtBQUFpQyxLQUFBb3NFLEdBQ0EsR0FBQWhzRCxRQUFBLEtBQ0FtNUMsWUFBQUEsR0FBQSxFQUNBMUUsWUFBQXVZLEVBQUEzVixXQUNBNUIsZUFBQWQsSUFBQW56RCxHQUFBbXpELEVBQUFoQixPQUFBc1osRUFBQWhCLGtCQUFBMXBCLEdBQ0E2VyxPQUFBNlQsRUFBQTdULE9BQ0F6RixJQUFBc1osRUFBQWhCLGtCQUFBMXBCLEVBQ0ErTyxZQUFBMmIsRUFBQTNiLFlBQ0FnQyxVQUFBL1EsSUFDQW9TLEVBQUFxWSxFQUFBOWdFLFFBQUF1cUIsRUFBQSxHQUVBdTJDLEVBQUE5Z0UsUUFBQXlLLE9BQUE4ZixJQUFBLEdBQ0FqdkIsR0FBQXlsRSxFQUFBakIsVUFBQSxnQkFBQWlCLEdBQUFqQixVQUFBLEdBQUFoc0QsUUFBQWl0RCxFQUFBakIsVUFBQXQ5RCxFQUFBMHFELE9BQUEsSUFBQSxJQUFBLEdBQUEsWUFDQXo3RCxLQUFBaUMsS0FBQXF0RSxFQUFBakIsV0FDQSxHQUFBaHNELFFBQUEsS0FDQW01QyxZQUFBOFQsRUFBQTlULFlBQ0ExRSxZQUFBdVksRUFBQTNWLFdBQ0E1QixlQUFBZCxJQUFBbnpELEdBQUFtekQsRUFBQWhCLE9BQUFzWixFQUFBaEIsa0JBQUExcEIsR0FDQTZXLE9BQUE2VCxFQUFBN1QsT0FDQXpGLElBQUFzWixFQUFBaEIsa0JBQUExcEIsRUFDQStPLFlBQUEyYixFQUFBM2IsWUFDQWdDLFVBQUEvUSxRQUVBeXFCLEdBQUE5Z0UsUUFBQXlLLE9BQUE4ZixJQUFBLEdBQ0FqdkIsR0FBQSxLQUNBMnhELFlBQUEsRUFDQTFFLFlBQUF1WSxFQUFBM1YsV0FDQTVCLGVBQUFkLElBQUFuekQsR0FBQW16RCxFQUFBaEIsTUFBQXBSLEdBQUEsT0FBQW9TLEVBQUFudEQsR0FDQTR4RCxPQUFBLEtBQ0F6RixJQUFBamxELEVBQUFtOUQsd0JBQUF0cEIsRUFDQStPLFlBQUE1aUQsRUFBQW05RCx5QkFBQXJxRSxFQUFBK2dELEVBQUEvZ0QsRUFDQTh4RCxVQUFBL1EsSUFDQW5oQyxHQUFBLEdBR0EsUUFBQWlzRCxHQUFBeGIsR0FDQUEsR0FBQUEsRUFBQTNsRCxTQUFBcTdCLEVBQUFubkMsS0FBQXl4RCxFQUFBM2xELFFBQUEsU0FBQW9tRCxFQUFBOXFDLEdBQ0EsR0FBQThsRCxHQUFBemIsRUFBQTNsRCxRQUFBb21ELEVBQUEsSUFDQWdiLElBQUE5ckUsR0FBQThyRSxFQUFBcGhFLFVBQUExSyxJQUFBLElBQUE4ckUsRUFBQTlXLGVBQUFodkMsR0FBQUEsRUFBQTR2QyxVQUFBNXZDLEVBQUE0dkMsU0FBQSxFQUNBbEcsSUFBQTZiLEVBQUF2bEQsRUFBQTlZLEVBQUE4aUQsWUFBQTN0RCxNQUFBLElBQUEsSUFBQTJqQixFQUFBcWxELFdBQUFFLEVBQUF2bEQsRUFBQTlZLEVBQUE4aUQsWUFBQTF0RCxPQUNBdXBFLEVBQUE3bEQsS0FHQSxRQUFBK2xELEtBQ0EsR0FBQUMsRUFBQS91RSxPQUFBLEdBQ0EsR0FBQWd2RSxFQUFBRCxFQUFBQSxFQUFBL3VFLE9BQUEsR0FBQXN1RSxFQUFBVSxFQUFBcDFELEdBQ0FvMUQsRUFBQWpXLGFBQUEsQ0FDQWtXLEVBQUFGLEVBQUE1dUQsS0FDQSxLQUFBLEdBQUE0K0MsR0FBQSxFQUFBQSxFQUFBa1EsRUFBQXhoRSxRQUFBek4sT0FBQSsrRCxJQUFBa1EsRUFBQXhoRSxRQUFBc3hELEdBQUFwRyxTQUFBLENBQ0FvVyxHQUFBL3VFLE9BQUEsR0FBQWd2RSxFQUFBRCxFQUFBQSxFQUFBL3VFLE9BQUEsSUFBQXlOLFFBQUF0RixLQUFBOG1FLEdBQUFDLEVBQUF6aEUsUUFBQXRGLEtBQUE4bUUsUUFFQVgsR0FBQVksRUFBQXQxRCxHQUVBLFFBQUF1MUQsR0FBQS9iLEdBQ0FBLEVBQUEzbEQsUUFBQTJsRCxFQUFBM2xELFFBQUFpZCxTQUNBLEtBQUEsR0FBQTlvQixLQUFBd3hELEdBQUEzbEQsUUFBQSxHQUFBMmxELEVBQUEzbEQsUUFBQXVKLGVBQUFwVixHQUFBLENBQ0EsR0FBQXd0RSxHQUFBaHlDLFNBQUF4N0IsRUFDQSxJQUFBd3hELEVBQUEzbEQsUUFBQTdMLEdBQUFtMkQsY0FBQTNFLEVBQUEzbEQsUUFBQTJoRSxFQUFBLElBQUFoYyxFQUFBM2xELFFBQUEyaEUsRUFBQSxHQUFBelcsUUFBQSxDQUNBLEdBQUF1QixHQUFBOUcsRUFBQTNsRCxRQUFBN0wsRUFDQXd4RCxHQUFBM2xELFFBQUF5SyxPQUFBdFcsRUFBQSxHQUFBd3hELEVBQUEzbEQsUUFBQXlLLE9BQUFrM0QsRUFBQSxFQUFBLEVBQUFsVixHQUVBOUcsRUFBQTNsRCxRQUFBN0wsR0FBQTZMLFVBQUExSyxFQUFBcXdELEVBQUEzbEQsUUFBQTdMLEdBQUF1dEUsRUFBQS9iLEVBQUEzbEQsUUFBQTdMLElBQUF3eEQsRUFBQTNsRCxRQUFBN0wsR0FBQSxTQUFBeXRFLEdBQ0EsTUFBQUEsS0FBQXAvRCxFQUFBKzhELGVBQUE1bkUsTUFBQWlxRSxFQUFBcC9ELEVBQUErOEQsZUFBQTNuRSxJQUFBZ3FFLElBQUFwL0QsRUFBQSs4RCxlQUFBM25FLElBQUFncUUsRUFBQXAvRCxFQUFBKzhELGVBQUE1bkUsTUFBQWlxRSxJQUFBcC9ELEVBQUE4aUQsWUFBQTN0RCxNQUFBaXFFLEVBQUFwL0QsRUFBQThpRCxZQUFBMXRELElBQUFncUUsSUFBQXAvRCxFQUFBOGlELFlBQUExdEQsTUFBQWdxRSxFQUFBcC9ELEVBQUE4aUQsWUFBQTN0RCxPQUNBaXFFLEdBQ0FqYyxFQUFBM2xELFFBQUE3TCxJQUVBLE1BQUF3eEQsR0FFQSxHQUFBeHhELEdBQUFnWSxFQUFBMDFELEVBQUFOLEVBQUFDLEVBQUFNLEVBQUFDLEVBQUFDLEVBQUEsaUVBQUFDLEVBQUEsa05BQUEvc0QsR0FBQSxFQUFBdXNELEVBQUEsR0FBQWYsR0FBQVksS0FBQXpVLElBQ0EsS0FBQTdILElBQUF4aUQsRUFBQSs4RCxlQUFBNW5FLE1BQUFyQyxFQUFBa04sRUFBQSs4RCxlQUFBM25FLElBQUF0QyxHQUFBbkIsRUFBQTZ3RCxFQUFBaWQsRUFBQXhxRSxLQUFBa3RELEdBQUFxZCxFQUFBdnFFLEtBQUFrdEQsSUFBQSxDQUNBLEdBQUF4NEMsRUFBQWhZLEVBQUEsR0FBQTZ3RCxFQUFBLE9BQUE3NEMsRUFBQXlqQyxPQUFBLElBQ0EsSUFBQSxJQUNBempDLEVBQUEsT0FDQSxNQUVBLEtBQUEsSUFDQSxJQUFBLElBQ0FBLEVBQUEsSUFBQUEsRUFBQSxJQUVBLEdBQUErSSxFQUFBbXNELFFBQUEsUUFBQWwxRCxFQUFBeWpDLE9BQUEsSUFDQSxJQUFBcHRDLEdBQUFnOUQsV0FDQXRxRCxHQUFBLEVBQUE4dkMsR0FBQXFjLEdBQ0EsTUFFQSxLQUFBNytELEdBQUErOEQsZUFBQTNuRSxJQUNBLElBQUE0SyxHQUFBOGlELFlBQUExdEQsSUFDQSxHQUFBaXFFLEVBQUFQLEVBQUE1dUQsTUFBQW12RCxFQUFBbEIsV0FBQSxFQUFBa0IsSUFBQXZzRSxFQUFBLEdBQUFnc0UsRUFBQS91RSxPQUFBLEdBQ0EsSUFBQWd2RSxFQUFBRCxFQUFBQSxFQUFBL3VFLE9BQUEsSUFBQXlOLFFBQUF0RixLQUFBbW5FLEdBQ0FOLEVBQUFqVyxhQUFBLENBQ0FrVyxFQUFBRixFQUFBNXVELEtBQ0EsS0FBQSxHQUFBNCtDLEdBQUEsRUFBQUEsRUFBQWtRLEVBQUF4aEUsUUFBQXpOLE9BQUErK0QsSUFBQWtRLEVBQUF4aEUsUUFBQXN4RCxHQUFBcEcsU0FBQSxFQUNBc1csRUFBQXhoRSxRQUFBc3hELEdBQUFzUCxpQkFBQSxDQUNBVSxHQUFBL3VFLE9BQUEsR0FBQWd2RSxFQUFBRCxFQUFBQSxFQUFBL3VFLE9BQUEsSUFBQXlOLFFBQUF0RixLQUFBOG1FLEdBQUFDLEVBQUF6aEUsUUFBQXRGLEtBQUE4bUUsUUFFQUMsR0FBQXpoRSxRQUFBdEYsS0FBQW1uRSxPQUFBUixJQUNBLE1BRUEsS0FBQTcrRCxHQUFBKzhELGVBQUE1bkUsTUFDQTJwRSxFQUFBNW1FLEtBQUEsR0FBQWdtRSxJQUFBLEdBQUEsR0FDQSxNQUVBLEtBQUFsK0QsR0FBQThpRCxZQUFBM3RELE1BQ0EycEUsRUFBQTVtRSxLQUFBLEdBQUFnbUUsSUFBQSxHQUNBLE1BRUEsS0FBQWwrRCxHQUFBK2lELGlCQUFBNXRELE1BQ0EsR0FBQWcxRCxHQUFBLEdBQUErVCxJQUFBLEdBQUEsR0FBQSxHQUFBd0IsR0FBQS8xRCxFQUFBQSxFQUFBOVYsUUFBQSxRQUFBLEtBQUF1UyxNQUFBLEtBQUF1NUQsRUFBQWozRCxNQUFBZzNELEVBQUEsSUFBQUEsRUFBQSxHQUFBdnlDLFNBQUF1eUMsRUFBQSxJQUFBRSxFQUFBLElBQUFGLEVBQUEzdkUsT0FBQTR2RSxFQUFBajNELE1BQUFnM0QsRUFBQSxJQUFBQSxFQUFBLEdBQUF2eUMsU0FBQXV5QyxFQUFBLEdBQ0EsSUFBQSxNQUFBRSxHQUFBLE1BQUFBLElBQUFELEVBQUEsTUFBQUMsRUFBQSxFQUFBLEdBQUF6VixFQUFBQSxZQUNBeFosSUFBQWd2QixFQUNBamlFLElBQUFraUUsR0FDQWQsRUFBQS91RSxPQUFBLEVBQUEsQ0FDQSxHQUFBeU4sR0FBQXNoRSxFQUFBQSxFQUFBL3VFLE9BQUEsR0FBQXlOLFNBQ0E3TCxFQUFBNkwsRUFBQTBTLE9BQUF3NEMsV0FBQTZXLEVBQUEsR0FBQXJCLElBQUEsSUFBQTFnRSxRQUFBdEYsS0FBQXZHLEdBQ0FBLEVBQUE0dEUsR0FBQS9oRSxFQUFBdEYsS0FBQXZHLEdBQUE2TCxFQUFBdEYsS0FBQWl5RCxRQUNBeDRELEVBQUFzdEUsRUFBQXpoRSxRQUFBMFMsT0FBQXc0QyxVQUFBbEcsR0FBQSxPQUFBN3dELEVBQUFtSCxJQUFBLE1BQUFuSCxFQUFBc3pELE1BQUF0ekQsRUFBQW1ILEdBQUEsR0FBQXdZLFFBQUEzZixFQUFBc3pELElBQUFqbEQsRUFBQTBxRCxPQUFBLElBQUEsTUFDQTZVLEVBQUEsR0FBQXJCLElBQUEsSUFBQTFnRSxRQUFBdEYsS0FBQXZHLEdBQUFBLEVBQUE0dEUsR0FBQU4sRUFBQXpoRSxRQUFBdEYsS0FBQXZHLEdBQ0FzdEUsRUFBQXpoRSxRQUFBdEYsS0FBQWl5RCxFQUNBLE1BRUEsS0FBQW5xRCxHQUFBOGpELGlCQUNBLEdBQUFnYixFQUFBL3VFLE9BQUEsRUFBQSxDQUNBLEdBQUE4dkUsSUFBQWQsRUFBQUQsRUFBQUEsRUFBQS91RSxPQUFBLElBQUF5TixRQUFBdWhFLEVBQUF2aEUsUUFBQXpOLE9BQUEsRUFDQXV2RSxHQUFBUCxFQUFBWixZQUFBMEIsRUFBQXJpRSxVQUFBMUssSUFBQSxJQUFBK3NFLEVBQUFuWCxVQUFBLElBQUFtWCxFQUFBL1csY0FBQWdXLEVBQUE1dUQsTUFBQTZ1RCxFQUFBdmhFLFFBQUEwUyxVQUNBb3ZELEdBQUFMLEVBQUF6aEUsUUFBQTBTLEtBQ0EsSUFBQW92RCxFQUFBeFcsYUFBQWdXLEVBQUE1bUUsS0FBQW9uRSxPQUFBLElBQUFBLEVBQUFsQixpQkFBQVksRUFBQUYsRUFBQTV1RCxNQUNBb3ZELEVBQUFsQixpQkFBQSxHQUFBWSxFQUFBLEdBQUFkLElBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQWMsRUFBQXhoRSxRQUFBdEYsS0FBQW9uRSxHQUNBUixFQUFBNW1FLEtBQUE4bUUsR0FBQU0sRUFBQW5CLFVBQUEsQ0FDQW1CLEVBQUFuQixXQUFBLENBQ0EsSUFBQUMsR0FBQSxHQUFBRixJQUFBLEVBQ0FFLEdBQUFBLGlCQUFBLEVBQUFVLEVBQUE1bUUsS0FBQWttRSxHQUVBLEtBRUEsU0FDQVMsS0FHQSxLQUFBQyxFQUFBL3VFLE9BQUEsR0FBQXN2RSxFQUFBUCxFQUFBNXVELE1BQUErdUQsRUFBQXpoRSxRQUFBdEYsS0FBQW1uRSxFQUNBLE9BQUFKLEdBQUF6aEUsUUFBQXpOLE9BQUEsSUFBQTR1RSxFQUFBTSxHQUFBNVUsRUFBQW55RCxLQUFBK21FLEtBQ0FqL0QsRUFBQThoRCxjQUFBOWhELEVBQUE2aEQsUUFBQXFkLEVBQUE3VSxFQUFBLElBQUFBLElBRUFoSixFQUFBeWUsZUFBQSxTQUFBdHVFLEdBQ0FxbkMsRUFBQXQrQixRQUFBLEVBQUE4bUQsRUFBQTlpRCxVQUFBdzZCLFNBQUF2bkMsSUFDQTZ2RCxFQUFBMGUsa0JBQUEsU0FBQUMsR0FDQW5uQyxFQUFBdCtCLFFBQUEsRUFBQThtRCxFQUFBOWlELFVBQUFvakQsWUFBQXFlLElBQ0EzZSxFQUFBNGUsY0FBQSxTQUFBM2UsR0FDQXpvQixFQUFBdCtCLFFBQUEsRUFBQThtRCxFQUFBOWlELFVBQUEyakQsUUFBQVosSUFDQUQsRUFBQTlMLE9BQUEsU0FBQW5qRCxFQUFBWixFQUFBK3dELEdBQ0EsTUFBQWxCLEdBQUE3dkQsR0FBQStqRCxPQUFBbmpELEVBQUFtd0QsSUFDQWxCLEVBQUE2ZSxPQUFBLFNBQUE5dEUsRUFBQVosR0FDQSxNQUFBNnZELEdBQUE3dkQsR0FBQTgvRCxjQUFBbC9ELElBQ0FpdkQsRUFBQWlGLFFBQUEsU0FBQWwwRCxFQUFBWixHQUNBLE1BQUE2dkQsR0FBQTd2RCxHQUFBODBELFFBQUFsMEQsSUFDQWl2RCxFQUFBdGxELE9BQUEsU0FBQXJGLEdBQ0FtaUMsRUFBQW5uQyxLQUFBZ0YsRUFBQSxTQUFBa3RELEVBQUFsNEMsR0FDQUEsRUFBQW9rRCxXQUFBcGtELEVBQUFva0QsVUFBQS96RCxZQUVBc2xELEVBQUEyUCxZQUFBLFNBQUFoa0IsR0FDQSxHQUFBbXpCLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxJQUFBLElBQ0EsT0FBQW56QixHQUFBbjVDLFFBQUEsR0FBQXlkLFFBQUEsTUFBQTZ1RCxFQUFBOThELEtBQUEsT0FBQSxJQUFBLE9BQUEsU0FDQWcrQyxFQUFBaDlCLFNBQ0ErN0MsSUFBQSxHQUNBbE0sVUFBQSxFQUNBMEMsaUJBQUEsSUFDQXlKLFVBQUEsR0FDQUMsTUFBQSxJQUNBQyxRQUFBLEdBQ0FDLGFBQUEsR0FDQUMsY0FBQSxHQUNBQyxRQUFBLEdBQ0FwVCxPQUFBLEdBQ0FxVCxLQUFBLEdBQ0E1SixJQUFBLEdBQ0FZLE1BQUEsR0FDQVAsT0FBQSxHQUNBSCxLQUFBLEdBQ0FJLE9BQUEsR0FDQUUsS0FBQSxHQUNBcUosS0FBQSxHQUNBQyxXQUFBLElBQ0FDLGVBQUEsSUFDQUMsY0FBQSxJQUNBQyxhQUFBLElBQ0FDLGdCQUFBLElBQ0FDLGdCQUFBLElBQ0FsSyxVQUFBLEdBQ0FFLFFBQUEsR0FDQWlLLE9BQUEsSUFDQTdKLE1BQUEsR0FDQThKLE1BQUEsR0FDQWpXLE1BQUEsR0FDQWlMLElBQUEsRUFDQWlMLEdBQUEsR0FDQUMsUUFBQSxHQUNBekssRUFBQSxJQUNBeFYsS0FFQSxTQUFBMXlELEVBQUFDLEdBQ0FELEVBQUFDLFFBQUFxQixRQUNBLFNBQUF0QixFQUFBQyxFQUFBOHhELEdBQ0EsWUFDQSxTQUFBNmdCLEdBQUF6eEUsR0FDQSxNQUFBQSxJQUFBQSxFQUFBaXhELFdBQUFqeEQsR0FDQWt4RCxRQUFBbHhELEdBR0E0d0QsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQUNBQSxFQUFBLElBQUFBLEVBQUEsR0FDQSxJQUFBOGdCLEdBQUFELEVBQUE3Z0IsRUFBQSxJQUFBK2dCLEVBQUFGLEVBQUE3Z0IsRUFBQSxJQUFBZ2hCLEVBQUFILEVBQUE3Z0IsRUFBQSxHQUNBK2dCLEdBQUF6Z0IsVUFBQTBnQixFQUFBMWdCLFNBQUFOLEVBQUEsSUFBQTF4RCxPQUFBcXlELFVBQUFtZ0IsRUFBQXhnQixTQUNBLFNBQUFyeUQsRUFBQUMsRUFBQTh4RCxHQUNBLEdBQUFubkQsR0FBQW1uRCxFQUFBLEVBQ0EsaUJBQUFubkQsS0FBQUEsSUFBQTVLLEVBQUFrQyxFQUFBMEksRUFBQSxLQUNBLElBQUEvSCxJQUNBbXdFLEtBQUEsRUFFQW53RSxHQUFBMndDLGNBQUEsR0FDQXVlLEVBQUEsR0FBQW5uRCxFQUFBL0gsR0FDQStILEVBQUFxb0UsU0FBQWp6RSxFQUFBQyxRQUFBMkssRUFBQXFvRSxTQUNBLFNBQUFqekUsRUFBQUMsRUFBQTh4RCxJQUNBL3hELEVBQUFDLFFBQUE4eEQsRUFBQSxPQUFBLEtBQUF4b0QsTUFBQXZKLEVBQUFrQyxFQUFBLDhjQUFBLE1BQ0EsU0FBQWxDLEVBQUFDLEdBQ0EsUUFBQWl6RSxHQUFBaDFCLEVBQUFpMUIsR0FDQSxHQUFBdm9FLEdBQUFzekMsRUFBQSxJQUFBLEdBQUFrMUIsRUFBQWwxQixFQUFBLEVBQ0EsS0FBQWsxQixFQUFBLE1BQUF4b0UsRUFDQSxJQUFBdW9FLEdBQUEsa0JBQUFFLE1BQUEsQ0FDQSxHQUFBQyxHQUFBQyxFQUFBSCxFQUdBLFFBQUF4b0UsR0FBQXlCLE9BSEErbUUsRUFBQUksUUFBQXhtRSxJQUFBLFNBQUFtakIsR0FDQSxNQUFBLGlCQUFBaWpELEVBQUFLLFdBQUF0akQsRUFBQSxTQUVBOWpCLFFBQUFpbkUsSUFBQTUrRCxLQUFBLE1BRUEsT0FBQTlKLEdBQUE4SixLQUFBLE1BRUEsUUFBQTYrRCxHQUFBRyxHQUNBLE1BQUEsbUVBQUFMLEtBQUFNLFNBQUEzeUMsbUJBQUFsOEIsS0FBQTh1RSxVQUFBRixNQUFBLE1BRUExekUsRUFBQUMsUUFBQSxTQUFBa3pFLEdBQ0EsR0FBQS93RCxLQUNBLE9BQUFBLEdBQUFsSyxTQUFBLFdBQ0EsTUFBQTVYLE1BQUEwTSxJQUFBLFNBQUFreEMsR0FDQSxHQUFBdHpDLEdBQUFzb0UsRUFBQWgxQixFQUFBaTFCLEVBQ0EsT0FBQWoxQixHQUFBLEdBQUEsVUFBQUEsRUFBQSxHQUFBLElBQUF0ekMsRUFBQSxJQUFBQSxJQUNBOEosS0FBQSxLQUNBME4sRUFBQWxnQixFQUFBLFNBQUE0dkQsRUFBQStoQixHQUNBLGdCQUFBL2hCLEtBQUFBLElBQUEsS0FBQUEsRUFBQSxLQUNBLEtBQUEsR0FBQWdpQixNQUFBNXhFLEVBQUEsRUFBQUEsRUFBQTVCLEtBQUFjLE9BQUFjLElBQUEsQ0FDQSxHQUFBd1osR0FBQXBiLEtBQUE0QixHQUFBLEVBQ0EsaUJBQUF3WixLQUFBbzRELEVBQUFwNEQsSUFBQSxHQUVBLElBQUF4WixFQUFBLEVBQUFBLEVBQUE0dkQsRUFBQTF3RCxPQUFBYyxJQUFBLENBQ0EsR0FBQWc4QyxHQUFBNFQsRUFBQTV2RCxFQUNBLGlCQUFBZzhDLEdBQUEsSUFBQTQxQixFQUFBNTFCLEVBQUEsTUFBQTIxQixJQUFBMzFCLEVBQUEsR0FBQUEsRUFBQSxHQUFBMjFCLEVBQUFBLElBQUEzMUIsRUFBQSxHQUFBLElBQUFBLEVBQUEsR0FBQSxVQUFBMjFCLEVBQUEsS0FDQXp4RCxFQUFBN1ksS0FBQTIwQyxNQUVBOTdCLElBRUEsU0FBQXBpQixFQUFBQyxFQUFBOHhELEdBQ0EsUUFBQWdpQixHQUFBNWtFLEVBQUF0TSxHQUNBLElBQUEsR0FBQVgsR0FBQSxFQUFBQSxFQUFBaU4sRUFBQS9OLE9BQUFjLElBQUEsQ0FDQSxHQUFBZzhDLEdBQUEvdUMsRUFBQWpOLEdBQUE4eEUsRUFBQUMsRUFBQS8xQixFQUFBeGlDLEdBQ0EsSUFBQXM0RCxFQUFBLENBRUEsSUFEQUEsRUFBQUUsT0FDQXpyRSxFQUFBLEVBQUFBLEVBQUF1ckUsRUFBQS80QyxNQUFBNzVCLE9BQUFxSCxJQUFBdXJFLEVBQUEvNEMsTUFBQXh5QixHQUFBeTFDLEVBQUFqakIsTUFBQXh5QixHQUNBLE1BQUFBLEVBQUF5MUMsRUFBQWpqQixNQUFBNzVCLE9BQUFxSCxJQUFBdXJFLEVBQUEvNEMsTUFBQTF4QixLQUFBNHFFLEVBQUFqMkIsRUFBQWpqQixNQUFBeHlCLEdBQUE1RixRQUNBLENBQ0EsSUFBQSxHQUFBbzRCLE1BQUF4eUIsRUFBQSxFQUFBQSxFQUFBeTFDLEVBQUFqakIsTUFBQTc1QixPQUFBcUgsSUFBQXd5QixFQUFBMXhCLEtBQUE0cUUsRUFBQWoyQixFQUFBampCLE1BQUF4eUIsR0FBQTVGLEdBQ0FveEUsR0FBQS8xQixFQUFBeGlDLEtBQ0FBLEdBQUF3aUMsRUFBQXhpQyxHQUNBdzRELEtBQUEsRUFDQWo1QyxNQUFBQSxLQUtBLFFBQUFtNUMsR0FBQWh5RCxFQUFBdmYsR0FDQSxJQUFBLEdBQUFzTSxNQUFBa2xFLEtBQUFueUUsRUFBQSxFQUFBQSxFQUFBa2dCLEVBQUFoaEIsT0FBQWMsSUFBQSxDQUNBLEdBQUFnOEMsR0FBQTk3QixFQUFBbGdCLEdBQUF3WixFQUFBN1ksRUFBQXdiLEtBQUE2L0IsRUFBQSxHQUFBcjdDLEVBQUF3YixLQUFBNi9CLEVBQUEsR0FBQW8yQixHQUNBdHVFLElBQUFrNEMsRUFBQSxHQUNBOUUsTUFBQThFLEVBQUEsR0FDQXcxQixVQUFBeDFCLEVBQUEsR0FFQW0yQixHQUFBMzRELEdBQUEyNEQsRUFBQTM0RCxHQUFBdWYsTUFBQTF4QixLQUFBK3FFLEdBQUFubEUsRUFBQTVGLEtBQUE4cUUsRUFBQTM0RCxJQUNBQSxHQUFBQSxFQUNBdWYsT0FBQXE1QyxLQUdBLE1BQUFubEUsR0FFQSxRQUFBb2xFLEdBQUExeEUsRUFBQTBELEdBQ0EsR0FBQTBQLEdBQUF1K0QsRUFBQTN4RSxFQUFBNHhFLFdBQ0EsS0FBQXgrRCxFQUFBLEtBQUEsSUFBQTdWLE9BQUEsOEdBQ0EsSUFBQXMwRSxHQUFBQyxFQUFBQSxFQUFBdnpFLE9BQUEsRUFDQSxJQUFBLFFBQUF5QixFQUFBK3hFLFNBQUFGLEVBQUFBLEVBQUFsM0QsWUFBQXZILEVBQUFxaEIsYUFBQS93QixFQUFBbXVFLEVBQUFsM0QsYUFBQXZILEVBQUFsVixZQUFBd0YsR0FBQTBQLEVBQUFxaEIsYUFBQS93QixFQUFBMFAsRUFBQTVNLFlBQ0FzckUsRUFBQXByRSxLQUFBaEQsT0FBQSxJQUFBLFdBQUExRCxFQUFBK3hFLFNBQUEzK0QsRUFBQWxWLFlBQUF3RixPQUFBLENBQ0EsR0FBQSxnQkFBQTFELEdBQUEreEUsV0FBQS94RSxFQUFBK3hFLFNBQUFyOUMsT0FBQSxLQUFBLElBQUFuM0IsT0FBQSw2TEFDQSxJQUFBb2QsR0FBQWczRCxFQUFBM3hFLEVBQUE0eEUsV0FBQSxJQUFBNXhFLEVBQUEreEUsU0FBQXI5QyxPQUNBdGhCLEdBQUFxaEIsYUFBQS93QixFQUFBaVgsSUFHQSxRQUFBcTNELEdBQUF0dUUsR0FDQSxHQUFBLE9BQUFBLEVBQUF2RixXQUFBLE9BQUEsQ0FDQXVGLEdBQUF2RixXQUFBQyxZQUFBc0YsRUFDQSxJQUFBMmhCLEdBQUF5c0QsRUFBQXR5RSxRQUFBa0UsRUFDQTJoQixJQUFBLEdBQUF5c0QsRUFBQXI3RCxPQUFBNE8sRUFBQSxHQUVBLFFBQUE0c0QsR0FBQWp5RSxHQUNBLEdBQUEwRCxHQUFBckcsU0FBQVUsY0FBQSxRQUNBLE9BQUFpQyxHQUFBK04sTUFBQXZQLEtBQUEsV0FBQTB6RSxFQUFBeHVFLEVBQUExRCxFQUFBK04sT0FBQTJqRSxFQUFBMXhFLEVBQUEwRCxHQUNBQSxFQUVBLFFBQUF5dUUsR0FBQW55RSxHQUNBLEdBQUFveUUsR0FBQS8wRSxTQUFBVSxjQUFBLE9BQ0EsT0FBQWlDLEdBQUErTixNQUFBdlAsS0FBQSxXQUFBd0IsRUFBQStOLE1BQUFxMkMsSUFBQSxhQUFBOHRCLEVBQUFFLEVBQUFweUUsRUFBQStOLE9BQ0EyakUsRUFBQTF4RSxFQUFBb3lFLEdBQUFBLEVBRUEsUUFBQUYsR0FBQWg0RCxFQUFBbk0sR0FDQW1ILE9BQUEyRSxLQUFBOUwsR0FBQXF0QyxRQUFBLFNBQUFoNUMsR0FDQThYLEVBQUFkLGFBQUFoWCxFQUFBMkwsRUFBQTNMLE1BR0EsUUFBQWt2RSxHQUFBaHpFLEVBQUEwQixHQUNBLEdBQUEwRCxHQUFBdzRDLEVBQUEzeEMsRUFBQThGLENBQ0EsSUFBQXJRLEVBQUEyd0MsV0FBQXJ5QyxFQUFBNkUsSUFBQSxDQUNBLEtBQUFrTixFQUFBclEsRUFBQTJ3QyxVQUFBcnlDLEVBQUE2RSxNQUFBLE1BQUEsYUFDQTdFLEdBQUE2RSxJQUFBa04sRUFFQSxHQUFBclEsRUFBQXF5RSxVQUFBLENBQ0EsR0FBQUMsR0FBQUMsR0FDQTd1RSxHQUFBMnVFLElBQUFBLEVBQUFKLEVBQUFqeUUsSUFBQWs4QyxFQUFBczJCLEVBQUE5ckMsS0FBQSxLQUFBaGpDLEVBQUE0dUUsR0FBQSxHQUNBL25FLEVBQUFpb0UsRUFBQTlyQyxLQUFBLEtBQUFoakMsRUFBQTR1RSxHQUFBLE9BQ0FoMEUsR0FBQXV5RSxXQUFBLGtCQUFBNEIsTUFBQSxrQkFBQUEsS0FBQUMsaUJBQUEsa0JBQUFELEtBQUFFLGlCQUFBLGtCQUFBQyxPQUFBLGtCQUFBcEMsT0FBQTlzRSxFQUFBeXVFLEVBQUFueUU7b0xBQ0FrOEMsRUFBQTIyQixFQUFBbnNDLEtBQUEsS0FBQWhqQyxFQUFBMUQsR0FBQXVLLEVBQUEsV0FDQXluRSxFQUFBdHVFLEdBQUFBLEVBQUFzaUIsTUFBQXlzRCxJQUFBRSxnQkFBQWp2RSxFQUFBc2lCLFNBQ0F0aUIsRUFBQXV1RSxFQUFBanlFLEdBQUFrOEMsRUFBQTQyQixFQUFBcHNDLEtBQUEsS0FBQWhqQyxHQUNBNkcsRUFBQSxXQUNBeW5FLEVBQUF0dUUsSUFFQSxPQUFBdzRDLEdBQUE1OUMsR0FBQSxTQUFBeTBFLEdBQ0EsR0FBQUEsRUFBQSxDQUNBLEdBQUFBLEVBQUE1dkUsTUFBQTdFLEVBQUE2RSxLQUFBNHZFLEVBQUF4OEIsUUFBQWo0QyxFQUFBaTRDLE9BQUF3OEIsRUFBQWxDLFlBQUF2eUUsRUFBQXV5RSxVQUFBLE1BQ0EzMEIsR0FBQTU5QyxFQUFBeTBFLE9BQ0F4b0UsTUFHQSxRQUFBaW9FLEdBQUE5dUUsRUFBQVksRUFBQWlHLEVBQUFqTSxHQUNBLEdBQUE2RSxHQUFBb0gsRUFBQSxHQUFBak0sRUFBQTZFLEdBQ0EsSUFBQU8sRUFBQXN2RSxXQUFBdHZFLEVBQUFzdkUsV0FBQXo5QyxRQUFBMDlDLEVBQUEzdUUsRUFBQW5CLE9BQUEsQ0FDQSxHQUFBK3ZFLEdBQUE3MUUsU0FBQXNKLGVBQUF4RCxHQUFBb0QsRUFBQTdDLEVBQUE2QyxVQUNBQSxHQUFBakMsSUFBQVosRUFBQXRGLFlBQUFtSSxFQUFBakMsSUFBQWlDLEVBQUFoSSxPQUFBbUYsRUFBQSt3QixhQUFBeStDLEVBQUEzc0UsRUFBQWpDLElBQUFaLEVBQUF4RixZQUFBZzFFLElBR0EsUUFBQUosR0FBQXB2RSxFQUFBcEYsR0FDQSxHQUFBNkUsR0FBQTdFLEVBQUE2RSxJQUFBb3pDLEVBQUFqNEMsRUFBQWk0QyxLQUNBLElBQUFBLEdBQUE3eUMsRUFBQTBWLGFBQUEsUUFBQW05QixHQUFBN3lDLEVBQUFzdkUsV0FBQXR2RSxFQUFBc3ZFLFdBQUF6OUMsUUFBQXB5QixNQUFBLENBQ0EsS0FBQU8sRUFBQThDLFlBQUE5QyxFQUFBdEYsWUFBQXNGLEVBQUE4QyxXQUNBOUMsR0FBQXhGLFlBQUFiLFNBQUFzSixlQUFBeEQsS0FHQSxRQUFBMHZFLEdBQUFULEVBQUFweUUsRUFBQTFCLEdBQ0EsR0FBQTZFLEdBQUE3RSxFQUFBNkUsSUFBQTB0RSxFQUFBdnlFLEVBQUF1eUUsVUFBQXNDLE1BQUEsS0FBQW56RSxFQUFBb3pFLHVCQUFBdkMsR0FDQTd3RSxFQUFBb3pFLHVCQUFBRCxLQUFBaHdFLEVBQUFrd0UsRUFBQWx3RSxJQUFBMHRFLElBQUExdEUsR0FBQSx1REFBQXF0RSxLQUFBTSxTQUFBM3lDLG1CQUFBbDhCLEtBQUE4dUUsVUFBQUYsTUFBQSxNQUNBLElBQUF5QyxHQUFBLEdBQUFWLE9BQUF6dkUsSUFDQTNFLEtBQUEsYUFDQSswRSxFQUFBbkIsRUFBQXBzRCxJQUNBb3NELEdBQUFwc0QsS0FBQXlzRCxJQUFBQyxnQkFBQVksR0FBQUMsR0FBQWQsSUFBQUUsZ0JBQUFZLEdBRUEsR0FBQW5DLE1BQUFvQyxFQUFBLFNBQUFsc0UsR0FDQSxHQUFBbXNFLEVBQ0EsT0FBQSxZQUNBLFdBQUEsS0FBQUEsSUFBQUEsRUFBQW5zRSxFQUFBakcsTUFBQTVELEtBQUFrSyxZQUFBOHJFLElBRUEsV0FDQSxNQUFBajJFLFNBQUFILFVBQUFBLFNBQUF5WSxNQUFBdFksT0FBQWsyRSxPQUNBL0IsRUFBQSxTQUFBcnFFLEdBQ0EsR0FBQW1zRSxLQUNBLE9BQUEsVUFBQXBzRSxHQUNBLE9BQUEsS0FBQW9zRSxFQUFBcHNFLEdBQUEsQ0FDQSxHQUFBc3NFLEdBQUFyc0UsRUFBQWhJLEtBQUE3QixLQUFBNEosRUFDQSxJQUFBc3NFLFlBQUFuMkUsUUFBQW8yRSxrQkFBQSxJQUNBRCxFQUFBQSxFQUFBM3FELGdCQUFBL3FCLEtBQ0EsTUFBQXVFLEdBQ0FteEUsRUFBQSxLQUVBRixFQUFBcHNFLEdBQUFzc0UsRUFFQSxNQUFBRixHQUFBcHNFLEtBRUEsU0FBQStMLEdBQ0EsTUFBQS9WLFVBQUF3MkUsY0FBQXpnRSxLQUNBaS9ELEVBQUEsS0FBQUUsRUFBQSxFQUFBVCxLQUFBdUIsRUFBQW5rQixFQUFBLEVBQ0EveEQsR0FBQUMsUUFBQSxTQUFBbWlCLEVBQUF2ZixHQUNBLEdBQUEsbUJBQUE4ekUsUUFBQUEsT0FBQSxnQkFBQXoyRSxVQUFBLEtBQUEsSUFBQUUsT0FBQSxpRUFDQXlDLEVBQUFBLE9BQUErTixNQUFBLGdCQUFBL04sR0FBQStOLE1BQUEvTixFQUFBK04sU0FDQS9OLEVBQUFxeUUsWUFBQXJ5RSxFQUFBcXlFLFVBQUFtQixLQUFBeHpFLEVBQUE0eEUsYUFBQTV4RSxFQUFBNHhFLFdBQUEsUUFDQTV4RSxFQUFBK3hFLFdBQUEveEUsRUFBQSt4RSxTQUFBLFNBQ0EsSUFBQXpsRSxHQUFBaWxFLEVBQUFoeUQsRUFBQXZmLEVBQ0EsT0FBQWt4RSxHQUFBNWtFLEVBQUF0TSxHQUFBLFNBQUErekUsR0FDQSxJQUFBLEdBQUFDLE1BQUEzMEUsRUFBQSxFQUFBQSxFQUFBaU4sRUFBQS9OLE9BQUFjLElBQUEsQ0FDQSxHQUFBZzhDLEdBQUEvdUMsRUFBQWpOLElBQ0E4eEUsRUFBQUMsRUFBQS8xQixFQUFBeGlDLEtBQUF3NEQsT0FBQTJDLEVBQUF0dEUsS0FBQXlxRSxHQUdBLElBREE0QyxHQUFBN0MsRUFBQUssRUFBQXdDLEVBQUEvekUsR0FBQUEsR0FDQVgsRUFBQSxFQUFBQSxFQUFBMjBFLEVBQUF6MUUsT0FBQWMsSUFBQSxDQUNBLEdBQUE4eEUsR0FBQTZDLEVBQUEzMEUsRUFDQSxJQUFBLElBQUE4eEUsRUFBQUUsS0FBQSxDQUNBLElBQUEsR0FBQXpyRSxHQUFBLEVBQUFBLEVBQUF1ckUsRUFBQS80QyxNQUFBNzVCLE9BQUFxSCxJQUFBdXJFLEVBQUEvNEMsTUFBQXh5QixXQUNBd3JFLEdBQUFELEVBQUF0NEQsT0FLQSxJQUFBbzZELEdBQUEsV0FDQSxHQUFBZ0IsS0FDQSxPQUFBLFVBQUEzdkUsRUFBQTR2RSxHQUNBLE1BQUFELEdBQUEzdkUsR0FBQTR2RSxFQUFBRCxFQUFBdDBFLE9BQUE4c0QsU0FBQTU2QyxLQUFBLFdBR0EsU0FBQTFVLEVBQUFDLEdBQ0FELEVBQUFDLFFBQUEsU0FBQStGLEdBQ0EsR0FBQXlpQixHQUFBLG1CQUFBcG9CLFNBQUFBLE9BQUFvb0IsUUFDQSxLQUFBQSxFQUFBLEtBQUEsSUFBQXJvQixPQUFBLG1DQUNBLEtBQUE0RixHQUFBLGdCQUFBQSxHQUFBLE1BQUFBLEVBQ0EsSUFBQWd4RSxHQUFBdnVELEVBQUF3WixTQUFBLEtBQUF4WixFQUFBbWMsS0FBQXF5QyxFQUFBRCxFQUFBdnVELEVBQUFrcEMsU0FBQXpzRCxRQUFBLFlBQUEsSUFDQSxPQUFBYyxHQUFBZCxRQUFBLHNEQUFBLFNBQUFneUUsRUFBQUMsR0FDQSxHQUFBQyxHQUFBRCxFQUFBLzhELE9BQUFsVixRQUFBLFdBQUEsU0FBQWl0RCxFQUFBa2xCLEdBQ0EsTUFBQUEsS0FDQW55RSxRQUFBLFdBQUEsU0FBQWl0RCxFQUFBa2xCLEdBQ0EsTUFBQUEsSUFFQSxJQUFBLCtDQUFBOTBFLEtBQUE2MEUsR0FBQSxNQUFBRixFQUNBLElBQUFJLEVBQ0EsT0FBQUEsR0FBQSxJQUFBRixFQUFBLzBFLFFBQUEsTUFBQSswRSxFQUFBLElBQUFBLEVBQUEvMEUsUUFBQSxLQUFBMjBFLEVBQUFJLEVBQUFILEVBQUFHLEVBQUFseUUsUUFBQSxRQUFBLElBQ0EsT0FBQUosS0FBQTh1RSxVQUFBMEQsR0FBQSxRQUdBLFNBQUF0M0UsRUFBQUMsRUFBQTh4RCxHQUNBLFlBQ0EsSUFBQU8sR0FBQUMsRUFBQUMsQ0FDQSxtQkFBQTUzQyxTQUFBQSxPQUFBQyxTQUNBLFNBQUE5YSxHQUNBd3lELEdBQUFSLEVBQUEsR0FBQUEsRUFBQSxRQUNBLE1BQUFTLEVBQUEsbUJBQUFGLEVBQUF2eUQsR0FBQXV5RCxFQUFBcHVELE1BQUFqRSxFQUFBc3lELEdBQUFELEtBQUF0eUQsRUFBQUMsUUFBQXV5RCxJQUNBLFNBQUF0b0IsRUFBQXdvQixHQUNBLFFBQUE2a0IsR0FBQUMsR0FDQSxNQUFBejlELE9BQUF5OUQsSUFBQSxLQUFBLEdBQUE3OEQsTUFBQTY4RCxFQUFBLEVBQUEsR0FBQUMsVUFFQSxNQUFBL2tCLEdBQUE0ZSxlQUNBb0csY0FDQWxrQixLQUFBLFFBQ0FTLFlBQUEsYUFDQUgsT0FDQTZqQixRQUFBLEdBQUFoMUQsUUFBQSxTQUNBaTFELEtBQUEsR0FBQWoxRCxRQUFBLDBCQUNBazFELFFBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBcmxCLEVBQUEyUCxZQUFBbGdFLEtBQUE3QixLQUFBdzNFLEVBQ0EsT0FBQSxJQUFBbjFELFFBQUEsNEJBQUFvMUQsRUFBQSxVQUVBQyxLQUFBLFNBQUFGLEdBQ0EsR0FBQUMsR0FBQXJsQixFQUFBMlAsWUFBQWxnRSxLQUFBN0IsS0FBQXczRSxFQUNBLE9BQUEsSUFBQW4xRCxRQUFBLHNCQUFBbzFELEVBQUEsdUJBQUFBLEVBQUEsd0JBQUFBLEVBQUEsdUJBR0FFLFFBQUEsU0FDQUgsVUFBQSxJQUNBSSxXQUNBQyxRQUFBLEtBQ0FDLFFBQUEsTUFFQUMsY0FBQSxTQUFBN2EsRUFBQTJhLEVBQUFDLEdBQ0EsR0FBQXIrRCxNQUFBeWpELEdBQUEsT0FBQSxDQUNBLElBQUE4YSxHQUFBOTVDLFNBQUFnL0IsRUFBQW54RCxPQUFBOHJFLEVBQUFqZ0UsV0FBQTlULE1BQUFvNUQsRUFBQXA4RCxVQUFBbTNFLEVBQUEvNUMsU0FBQWcvQixFQUFBbnhELE9BQUErckUsRUFBQWxnRSxXQUFBOVQsTUFBQW81RCxFQUFBcDhELFNBQ0EsUUFBQTJZLE1BQUF1K0QsSUFBQUgsR0FBQUcsR0FBQUEsR0FBQUYsSUFBQXIrRCxNQUFBdytELElBQUFKLEdBQUFJLEdBQUFBLEdBQUFILEdBRUFJLGtCQUFBLFNBQUFMLEVBQUFDLEVBQUFLLEdBQ0EsR0FBQUMsSUFBQSxHQUFBLzlELE9BQUFnK0QsYUFDQSxJQUFBUixFQUFBTyxFQUFBLE1BQUFQLEVBQ0EsSUFBQUMsRUFBQU0sRUFBQSxDQUNBLElBQUEsR0FBQUUsR0FBQVIsRUFBQWxnRSxXQUFBOVQsTUFBQSxFQUFBLEdBQUF5MEUsRUFBQVQsRUFBQWxnRSxXQUFBOVQsTUFBQSxFQUFBLEdBQUFnMEUsRUFBQVEsRUFBQUgsR0FBQUcsR0FDQSxJQUFBRSxHQUFBRixFQUFBQyxDQUNBLE9BQUFWLEdBQUFXLEVBQUFYLEVBQUFXLEVBRUEsR0FBQVgsR0FBQU8sR0FBQUEsR0FBQU4sRUFBQSxDQUNBLElBQUEsR0FBQVcsR0FBQUwsRUFBQXhnRSxXQUFBOVQsTUFBQSxFQUFBLEdBQUFnMEUsRUFBQVcsRUFBQU4sR0FBQU0sR0FDQSxJQUFBQyxHQUFBRCxFQUFBTixDQUNBLE9BQUFPLEdBQUFiLEVBQUFBLEVBQUFhLEVBRUEsTUFBQU4sSUFFQTdQLFVBQUEsU0FBQXhqRSxFQUFBdXZELEVBQUFvTSxFQUFBM3ZELEdBQ0EsR0FBQTIyRCxHQUFBOTlCLEVBQUE1cEMsS0FDQSxJQUFBK0UsRUFBQTJ2QixTQUFBM3ZCLEVBQUFxd0IsVUFBQWc5QixFQUFBaDlCLFFBQUFpekMsTUFBQSxDQUNBLEdBQUFzUSxHQUFBLEdBQUF0K0QsS0FDQXF0RCxHQUFBNTRELElBQUE2cEUsRUFBQXhCLFVBQUF2L0QsWUFBQStnRSxFQUFBQyxXQUFBLEdBQUFoaEUsV0FBQStnRSxFQUFBTixjQUFBemdFLFlBQ0E4dkQsRUFBQS96QyxRQUFBLGNBR0FrbEQsY0FBQSxTQUFBM2xCLEVBQUFvQixFQUFBdmpELEdBQ0EsSUFBQSxHQUFBN0ssR0FBQSxFQUFBcEYsRUFBQSxFQUFBYyxFQUFBLEVBQUFBLEVBQUFzeEQsRUFBQXB5RCxRQUFBLE1BQUFveUQsRUFBQS9VLE9BQUF2OEMsR0FBQUEsSUFBQSxDQUNBLEdBQUFtdkUsR0FBQWhnRSxFQUFBMmhELFlBQUFRLEVBQUEvVSxPQUFBdjhDLEdBQ0FtdkUsSUFBQTdxRSxHQUFBcEYsRUFBQUEsRUFBQWl3RSxFQUFBdlYsYUFBQTE2RCxJQUVBLE1BQUF3ekQsR0FBQWxnRCxLQUFBLElBQUE4MEMsT0FBQWhqRCxFQUFBcEYsSUFFQXMvRCxlQUFBLFNBQUE5TCxFQUFBd2tCLEVBQUEvbkUsR0FDQSxHQUFBZ29FLEdBQUE3QixFQUFBOEIsRUFBQTFrQixFQUFBbGdELEtBQUEsR0FDQSxPQUFBLEtBQUFyRCxFQUFBbWlELEtBQUFueEQsUUFBQSxNQUFBbTFFLEVBQUE4QixFQUFBOXZCLE9BQUEsRUFBQSxHQUFBNnZCLEVBQUFDLEVBQUFqMkIsVUFBQSxFQUFBLE1BQUFtMEIsRUFBQThCLEVBQUFqMkIsVUFBQSxFQUFBLElBQ0FnMkIsRUFBQUMsRUFBQTl2QixPQUFBLEVBQUEsSUFBQTR2QixJQUFBQyxJQUFBaG9FLEVBQUE0bUUsU0FBQVYsRUFBQUMsS0FFQXhrQixhQUNBdW1CLEdBQ0E1SyxVQUFBLFNBQUFuUixFQUFBM0ssRUFBQXozQixFQUFBczdCLEVBQUFybEQsR0FDQSxHQUFBc21ELEdBQUF0bUQsRUFBQXlpRCxNQUFBOGpCLEtBQUFyMUUsS0FBQWk3RCxFQUNBLE9BQUE5RyxJQUFBaUIsR0FBQTZGLEVBQUEvZSxPQUFBLEtBQUFwdEMsRUFBQXltRSxZQUFBLElBQUEsTUFBQXoxRSxRQUFBbTdELEVBQUEvZSxPQUFBLE9BQUFrWixFQUFBdG1ELEVBQUF5aUQsTUFBQThqQixLQUFBcjFFLEtBQUEsSUFBQWk3RCxFQUFBL2UsT0FBQSxLQUFBa1osR0FBQTlFLEVBQUErQixPQUFBeDVCLEVBQUEsR0FBQSxLQUVBK2dDLG1CQUNBMzFELE1BQUE0MEIsRUFBQSxFQUNBMzBCLElBQUEyMEIsR0FFQUEsSUFBQUEsRUFDQTgyQixFQUFBc0wsRUFBQS9lLE9BQUEsTUFHQXFkLFlBQUEsRUFDQWdVLGVBQ0FuQixVQUFBLFNBQUFuUixFQUFBM0ssRUFBQXozQixFQUFBczdCLEVBQUFybEQsR0FDQSxHQUFBbW9FLEdBQUFoYyxDQUNBempELE9BQUE4NEMsRUFBQStCLE9BQUF4NUIsRUFBQSxNQUFBbytDLEdBQUEzbUIsRUFBQStCLE9BQUF4NUIsRUFBQSxHQUNBLElBQUF1OEIsR0FBQSxJQUFBNmhCLEVBQUFwNEUsT0FBQWlRLEVBQUF5aUQsTUFBQTZqQixRQUFBcDFFLEtBQUFpM0UsR0FBQW5vRSxFQUFBeWlELE1BQUE4akIsS0FBQXIxRSxLQUFBaTNFLEVBQ0EsSUFBQTdoQixHQUFBOUUsRUFBQTZCLGVBQUF0NUIsS0FBQS9wQixFQUFBeWlELE1BQUFra0IsS0FBQTNtRSxFQUFBeW1FLFdBQUF2MUUsS0FBQWk3RCxFQUFBM0ssRUFBQTZCLGVBQUF0NUIsR0FBQTlWLFNBQUF1dEMsRUFBQTZCLGVBQUF0NUIsR0FBQTlWLE1BQUEsTUFBQWs0QyxFQUFBLElBQUEsT0FDQTlHLElBQUFpQixFQUFBLENBQ0EsR0FBQUEsRUFBQXRtRCxFQUFBeWlELE1BQUE4akIsS0FBQXIxRSxLQUFBaTdELEVBQUEsS0FBQSxNQUFBM0ssR0FBQStCLE9BQUF4NUIsR0FBQW9pQyxFQUNBM0ssRUFBQStCLFNBQUF4NUIsR0FBQSxLQUNBQSxJQUFBQSxFQUNBODJCLEVBQUEsSUFFQSxJQUFBeUYsRUFBQXRtRCxFQUFBeWlELE1BQUE4akIsS0FBQXIxRSxLQUFBLElBQUFpN0QsR0FBQSxNQUFBM0ssR0FBQStCLE9BQUF4NUIsR0FBQSxJQUNBQSxLQUNBQSxJQUFBQSxHQUdBLE1BQUF1OEIsSUFFQW1FLFlBQUEsS0FHQTJkLEdBQ0E5SyxVQUFBLFNBQUFuUixFQUFBM0ssRUFBQXozQixFQUFBczdCLEVBQUFybEQsR0FDQSxHQUFBcW9FLEdBQUFyb0UsRUFBQThuRSxjQUFBdG1CLEVBQUFXLEtBQUFYLEVBQUErQixPQUFBdmpELElBQ0EsSUFBQXFvRSxFQUFBcjNFLFFBQUFnUCxFQUFBNGlELFlBQUEsTUFBQXlsQixFQUFBLEtBQUFyb0UsRUFBQXltRSxVQUNBLElBQUFuZ0IsR0FBQXRtRCxFQUFBeWlELE1BQUFra0IsS0FBQTNtRSxFQUFBeW1FLFdBQUF2MUUsS0FBQW0zRSxFQUFBbGMsRUFDQSxPQUFBOUcsSUFBQWlCLEdBQUE2RixFQUFBL2UsT0FBQSxLQUFBcHRDLEVBQUF5bUUsWUFBQSxJQUFBLE1BQUF6MUUsUUFBQW03RCxFQUFBL2UsT0FBQSxPQUFBa1osRUFBQXRtRCxFQUFBeWlELE1BQUFra0IsS0FBQTNtRSxFQUFBeW1FLFdBQUF2MUUsS0FBQW0zRSxFQUFBLElBQUFsYyxFQUFBL2UsT0FBQSxLQUFBa1osR0FBQTlFLEVBQUErQixPQUFBeDVCLEVBQUEsR0FBQSxLQUVBK2dDLG1CQUNBMzFELE1BQUE0MEIsRUFBQSxFQUNBMzBCLElBQUEyMEIsR0FFQUEsSUFBQUEsRUFDQTgyQixFQUFBc0wsRUFBQS9lLE9BQUEsTUFHQXFkLFlBQUEsRUFDQWdVLGVBQ0FuQixVQUFBLFNBQUFuUixFQUFBM0ssRUFBQXozQixFQUFBczdCLEVBQUFybEQsR0FDQTBJLE1BQUE4NEMsRUFBQStCLE9BQUF4NUIsRUFBQSxNQUFBb2lDLEdBQUEzSyxFQUFBK0IsT0FBQXg1QixFQUFBLEdBQ0EsSUFBQXMrQyxHQUFBcm9FLEVBQUE4bkUsY0FBQXRtQixFQUFBVyxLQUFBWCxFQUFBK0IsT0FBQXZqRCxJQUNBLElBQUFxb0UsRUFBQXIzRSxRQUFBZ1AsRUFBQTRpRCxZQUFBLE1BQUF5bEIsRUFBQSxLQUFBcm9FLEVBQUF5bUUsVUFDQSxJQUFBbmdCLEdBQUEsSUFBQTZGLEVBQUFwOEQsT0FBQWlRLEVBQUF5aUQsTUFBQStqQixRQUFBeG1FLEVBQUF5bUUsV0FBQXYxRSxLQUFBbTNFLEVBQUFsYyxHQUFBbnNELEVBQUF5aUQsTUFBQWtrQixLQUFBM21FLEVBQUF5bUUsV0FBQXYxRSxLQUFBbTNFLEVBQUFsYyxFQUNBLE9BQUE3RixJQUFBOUUsRUFBQTZCLGVBQUF0NUIsS0FBQS9wQixFQUFBeWlELE1BQUFra0IsS0FBQTNtRSxFQUFBeW1FLFdBQUF2MUUsS0FBQWk3RCxFQUFBM0ssRUFBQTZCLGVBQUF0NUIsR0FBQTlWLFNBQUF1dEMsRUFBQTZCLGVBQUF0NUIsR0FBQTlWLE1BQUEsTUFBQWs0QyxFQUFBLElBQUEsTUFDQTlHLEdBQUFpQixLQUFBQSxFQUFBdG1ELEVBQUF5aUQsTUFBQWtrQixLQUFBM21FLEVBQUF5bUUsV0FBQXYxRSxLQUFBbTNFLEVBQUEsSUFBQWxjLElBQUE3RixHQUFBOUUsRUFBQStCLE9BQUF4NUIsR0FBQSxJQUNBQSxLQUNBQSxJQUFBQSxLQUdBMGdDLFlBQUEsS0FHQXJuQixHQUNBazZCLFVBQUEsU0FBQW5SLEVBQUEzSyxFQUFBejNCLEVBQUFzN0IsRUFBQXJsRCxHQUNBLE1BQUFBLEdBQUFnbkUsY0FBQTdhLEVBQUFuc0QsRUFBQTZtRSxVQUFBQyxRQUFBOW1FLEVBQUE2bUUsVUFBQUUsVUFFQXRjLFlBQUEsRUFDQWdVLGVBQ0FuQixVQUFBLFNBQUFuUixFQUFBM0ssRUFBQXozQixFQUFBczdCLEVBQUFybEQsR0FDQSxHQUFBc21ELEdBQUF0bUQsRUFBQWduRSxjQUFBN2EsRUFBQW5zRCxFQUFBNm1FLFVBQUFDLFFBQUE5bUUsRUFBQTZtRSxVQUFBRSxRQUNBLEtBQUExaEIsSUFBQWlCLEVBQUEsQ0FDQSxHQUFBZ2lCLEdBQUF0b0UsRUFBQW1uRSxrQkFBQW5uRSxFQUFBNm1FLFVBQUFDLFFBQUE5bUUsRUFBQTZtRSxVQUFBRSxRQUFBNWEsRUFBQSxLQUFBdGxELFdBQUE5VCxNQUFBLEVBQUEsRUFDQSxJQUFBdXpELEVBQUF0bUQsRUFBQWduRSxjQUFBc0IsRUFBQW5jLEVBQUFuc0QsRUFBQTZtRSxVQUFBQyxRQUFBOW1FLEVBQUE2bUUsVUFBQUUsU0FBQSxNQUFBdmxCLEdBQUErQixPQUFBeDVCLEtBQUF1K0MsRUFBQWw3QixPQUFBLElBRUFyakIsSUFBQUEsRUFFQSxJQUFBdStDLEVBQUF0b0UsRUFBQW1uRSxrQkFBQW5uRSxFQUFBNm1FLFVBQUFDLFFBQUE5bUUsRUFBQTZtRSxVQUFBRSxRQUFBNWEsRUFBQSxLQUFBdGxELFdBQUE5VCxNQUFBLEVBQUEsR0FDQXV6RCxFQUFBdG1ELEVBQUFnbkUsY0FBQXNCLEVBQUFuYyxFQUFBbnNELEVBQUE2bUUsVUFBQUMsUUFBQTltRSxFQUFBNm1FLFVBQUFFLFNBQUEsTUFBQXZsQixHQUFBK0IsT0FBQXg1QixLQUFBdStDLEVBQUFsN0IsT0FBQSxHQUNBb1UsRUFBQStCLE9BQUF4NUIsS0FBQXUrQyxFQUFBbDdCLE9BQUEsSUFDQXJqQixJQUFBQSxHQUdBLE1BQUF1OEIsSUFFQW1FLFlBQUEsSUFFQTZTLFVBQUEsU0FBQW5SLEVBQUEzSyxFQUFBejNCLEVBQUFzN0IsRUFBQXJsRCxHQUNBLEdBQUFzbUQsR0FBQXRtRCxFQUFBZ25FLGNBQUE3YSxFQUFBbnNELEVBQUE2bUUsVUFBQUMsUUFBQTltRSxFQUFBNm1FLFVBQUFFLFFBQ0EsS0FBQTFoQixJQUFBaUIsRUFBQSxDQUNBLEdBQUFnaUIsR0FBQXRvRSxFQUFBbW5FLGtCQUFBbm5FLEVBQUE2bUUsVUFBQUMsUUFBQTltRSxFQUFBNm1FLFVBQUFFLFFBQUE1YSxHQUFBdGxELFdBQUE5VCxNQUFBLEVBQUEsRUFDQSxJQUFBdXpELEVBQUF0bUQsRUFBQWduRSxjQUFBN2EsRUFBQSxHQUFBbWMsRUFBQSxHQUFBbmMsRUFBQSxHQUFBbnNELEVBQUE2bUUsVUFBQUMsUUFBQTltRSxFQUFBNm1FLFVBQUFFLFNBQUEsTUFBQXZsQixHQUFBK0IsT0FBQXg1QixLQUFBdStDLEVBQUFsN0IsT0FBQSxJQUVBcmpCLElBQUFBLEVBRUEsSUFBQXUrQyxFQUFBdG9FLEVBQUFtbkUsa0JBQUFubkUsRUFBQTZtRSxVQUFBQyxRQUFBOW1FLEVBQUE2bUUsVUFBQUUsUUFBQTVhLEdBQUF0bEQsV0FBQTlULE1BQUEsRUFBQSxHQUNBdXpELEVBQUF0bUQsRUFBQWduRSxjQUFBc0IsRUFBQW5jLEVBQUFuc0QsRUFBQTZtRSxVQUFBQyxRQUFBOW1FLEVBQUE2bUUsVUFBQUUsU0FBQSxNQUFBdmxCLEdBQUErQixPQUFBeDVCLEVBQUEsR0FBQXUrQyxFQUFBbDdCLE9BQUEsR0FDQW9VLEVBQUErQixPQUFBeDVCLEtBQUF1K0MsRUFBQWw3QixPQUFBLEdBQUFvVSxFQUFBK0IsT0FBQXg1QixLQUFBb2lDLEVBQUEvZSxPQUFBLElBRUEwZCxtQkFDQTMxRCxNQUFBNDBCLEVBQUEsRUFDQTMwQixJQUFBMjBCLEdBRUFBLElBQUFBLEdBR0EsTUFBQXU4QixJQUVBbUUsWUFBQSxJQUVBNlMsVUFBQSxTQUFBblIsRUFBQTNLLEVBQUF6M0IsRUFBQXM3QixFQUFBcmxELEdBQ0EsTUFBQUEsR0FBQWduRSxjQUFBN2EsRUFBQW5zRCxFQUFBNm1FLFVBQUFDLFFBQUE5bUUsRUFBQTZtRSxVQUFBRSxVQUVBdGMsWUFBQSxNQUlBaUMsWUFBQSxFQUNBb0UsWUFBQSxHQUVBeVgsY0FDQTNsQixZQUFBLGFBQ0F0QixNQUFBLGFBQ0FtQixPQUNBK2pCLFFBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBcmxCLEVBQUEyUCxZQUFBbGdFLEtBQUE3QixLQUFBdzNFLEVBQ0EsT0FBQSxJQUFBbjFELFFBQUEsb0JBQUFvMUQsRUFBQSxhQUFBQSxFQUFBLFdBRUFDLEtBQUEsU0FBQUYsR0FDQSxHQUFBQyxHQUFBcmxCLEVBQUEyUCxZQUFBbGdFLEtBQUE3QixLQUFBdzNFLEVBQ0EsT0FBQSxJQUFBbjFELFFBQUEsbUJBQUFvMUQsRUFBQSx3Q0FBQUEsRUFBQSx3QkFBQUEsRUFBQSxRQUVBSixRQUFBLEdBQUFoMUQsUUFBQSxRQUNBaTFELEtBQUEsR0FBQWoxRCxRQUFBLGtCQUVBczFELFFBQUEsU0FDQXBQLFVBQUEsU0FBQXhqRSxFQUFBdXZELEVBQUFvTSxFQUFBM3ZELEdBQ0EsR0FBQTIyRCxHQUFBOTlCLEVBQUE1cEMsS0FDQSxJQUFBK0UsRUFBQTJ2QixTQUFBM3ZCLEVBQUFxd0IsVUFBQWc5QixFQUFBaDlCLFFBQUFpekMsTUFBQSxDQUNBLEdBQUFzUSxHQUFBLEdBQUF0K0QsS0FDQXF0RCxHQUFBNTRELEtBQUE2cEUsRUFBQUMsV0FBQSxHQUFBaGhFLFdBQUErZ0UsRUFBQXhCLFVBQUF2L0QsV0FBQStnRSxFQUFBTixjQUFBemdFLFlBQ0E4dkQsRUFBQS96QyxRQUFBLGVBSUE0bEQsY0FDQXJtQixLQUFBLFFBQ0FTLFlBQUEsYUFDQXRCLE1BQUEsYUFDQXNsQixRQUFBLFNBQ0FwUCxVQUFBLFNBQUF4akUsRUFBQXV2RCxFQUFBb00sRUFBQTN2RCxHQUNBLEdBQUEyMkQsR0FBQTk5QixFQUFBNXBDLEtBQ0EsSUFBQStFLEVBQUEydkIsU0FBQTN2QixFQUFBcXdCLFVBQUFnOUIsRUFBQWg5QixRQUFBaXpDLE1BQUEsQ0FDQSxHQUFBc1EsR0FBQSxHQUFBdCtELEtBQ0FxdEQsR0FBQTU0RCxJQUFBNnBFLEVBQUFOLGNBQUF6Z0UsWUFBQStnRSxFQUFBQyxXQUFBLEdBQUFoaEUsV0FBQStnRSxFQUFBeEIsVUFBQXYvRCxZQUNBOHZELEVBQUEvekMsUUFBQSxlQUlBNmxELGNBQ0F0bUIsS0FBQSxRQUNBUyxZQUFBLGFBQ0Fna0IsUUFBQSxTQUNBSCxVQUFBLElBQ0FubEIsTUFBQSxjQUVBb25CLGNBQ0F2bUIsS0FBQSxRQUNBUyxZQUFBLGFBQ0Fna0IsUUFBQSxTQUNBSCxVQUFBLElBQ0FubEIsTUFBQSxjQUVBcW5CLGNBQ0F4bUIsS0FBQSxRQUNBUyxZQUFBLGFBQ0Fna0IsUUFBQSxTQUNBSCxVQUFBLElBQ0FubEIsTUFBQSxjQUVBc25CLGNBQ0F6bUIsS0FBQSxRQUNBUyxZQUFBLGFBQ0Fna0IsUUFBQSxTQUNBSCxVQUFBLElBQ0FubEIsTUFBQSxjQUVBdW5CLGNBQ0ExbUIsS0FBQSxRQUNBUyxZQUFBLGFBQ0Fna0IsUUFBQSxTQUNBSCxVQUFBLElBQ0FubEIsTUFBQSxjQUVBd25CLGNBQ0EzbUIsS0FBQSxRQUNBUyxZQUFBLGFBQ0Fna0IsUUFBQSxTQUNBSCxVQUFBLElBQ0FubEIsTUFBQSxjQUVBeW5CLFVBQ0E1bUIsS0FBQSxZQUNBUyxZQUFBLG1CQUNBdEIsTUFBQSxhQUNBbUIsT0FDQXVtQixPQUFBLEdBQUExM0QsUUFBQSxTQUNBMjNELE1BQUEsR0FBQTMzRCxRQUFBLGlCQUNBNDNELElBQUEsR0FBQTUzRCxRQUFBLG9CQUNBNjNELEtBQUEsR0FBQTczRCxRQUFBLG1CQUNBODNELE1BQUEsR0FBQTkzRCxRQUFBLFNBQ0ErM0QsR0FBQSxHQUFBLzNELFFBQUEsZUFFQWc0RCxjQUFBLElBQ0FDLFdBQUEsS0FDQTVuQixhQUNBNm5CLEdBQ0FsTSxVQUFBLFNBQUFuUixFQUFBM0ssRUFBQXozQixFQUFBczdCLEVBQUFybEQsR0FDQSxHQUFBLE9BQUFBLEVBQUF1cEUsWUFBQSxLQUFBcDhDLFNBQUFnL0IsRUFBQSxJQUFBLE1BQUEzSyxHQUFBK0IsT0FBQXg1QixFQUFBLEdBQUEsSUFDQXkzQixFQUFBK0IsT0FBQXg1QixHQUFBLEtBQ0ErZ0MsbUJBQ0EzMUQsTUFBQTQwQixFQUFBLEVBQ0EzMEIsSUFBQTIwQixHQUVBODJCLEVBQUEsSUFFQSxJQUFBeUYsR0FBQXRtRCxFQUFBeWlELE1BQUF5bUIsSUFBQWg0RSxLQUFBaTdELEVBQ0EsS0FBQTlHLElBQUFpQixJQUFBNkYsRUFBQS9lLE9BQUEsS0FBQXB0QyxFQUFBc3BFLGdCQUFBLElBQUEsTUFBQXQ0RSxRQUFBbTdELEVBQUEvZSxPQUFBLE9BQUFrWixFQUFBdG1ELEVBQUF5aUQsTUFBQXltQixJQUFBaDRFLEtBQUEsSUFBQWk3RCxFQUFBL2UsT0FBQSxLQUFBLE1BQUFvVSxHQUFBK0IsT0FBQXg1QixFQUFBLEdBQUEsSUFDQXkzQixFQUFBK0IsT0FBQXg1QixHQUFBb2lDLEVBQUEvZSxPQUFBLEdBQUFyakIsS0FDQStnQyxtQkFDQTMxRCxNQUFBNDBCLEVBQUEsRUFDQTMwQixJQUFBMjBCLEdBRUFBLElBQUFBLEVBQ0E4MkIsRUFBQTdnRCxFQUFBc3BFLGNBRUEsSUFBQWhqQixHQUFBLE9BQUF0bUQsRUFBQXVwRSxZQUFBdnBFLEVBQUF5aUQsTUFBQXdtQixNQUFBLzNFLEtBQUFpN0QsR0FBQSxDQUNBLEdBQUFsMUQsR0FBQWsyQixTQUFBZy9CLEVBQUEsR0FDQSxPQUFBLE1BQUFsMUQsR0FBQXVxRCxFQUFBK0IsT0FBQXg1QixFQUFBLEdBQUEsSUFBQXkzQixFQUFBK0IsT0FBQXg1QixFQUFBLEdBQUEsTUFBQXkzQixFQUFBK0IsT0FBQXg1QixFQUFBLEdBQUEsSUFDQXkzQixFQUFBK0IsT0FBQXg1QixFQUFBLEdBQUEsTUFBQTl5QixHQUFBLElBQUEsSUFBQXVxRCxFQUFBK0IsT0FBQXg1QixHQUFBOXlCLEVBQUE0UCxXQUNBMjZDLEVBQUErQixPQUFBeDVCLEVBQUEsR0FBQSxNQUFBeTNCLEVBQUErQixPQUFBeDVCLEdBQUE5eUIsRUFBQTRQLFdBQUF1bUMsT0FBQSxHQUNBb1UsRUFBQStCLE9BQUF4NUIsRUFBQSxHQUFBOXlCLEVBQUE0UCxXQUFBdW1DLE9BQUEsS0FDQTBkLG1CQUNBMzFELE1BQUE0MEIsRUFBQSxFQUNBMzBCLElBQUEyMEIsRUFBQSxHQUVBODJCLEVBQUFXLEVBQUErQixPQUFBeDVCLElBR0EsTUFBQXU4QixJQUVBbUUsWUFBQSxFQUNBZ1UsZUFDQW5CLFVBQUEsU0FBQW5SLEVBQUEzSyxFQUFBejNCLEVBQUFzN0IsRUFBQXJsRCxHQUNBLEdBQUFzbUQsR0FBQXRtRCxFQUFBeWlELE1BQUF1bUIsT0FBQTkzRSxLQUFBaTdELEVBQ0EsT0FBQTlHLElBQUFpQixLQUFBQSxFQUFBdG1ELEVBQUF5aUQsTUFBQXltQixJQUFBaDRFLEtBQUEsSUFBQWk3RCxJQUFBN0YsR0FBQTlFLEVBQUErQixPQUFBeDVCLEdBQUEsSUFDQUEsS0FDQUEsSUFBQUEsS0FHQTBnQyxZQUFBLEtBR0F4bEQsR0FDQXE0RCxVQUFBLGFBQ0E3UyxZQUFBLEVBQ0FnVSxlQUNBbkIsVUFBQSxTQUFBblIsRUFBQTNLLEVBQUF6M0IsRUFBQXM3QixFQUFBcmxELEdBQ0EsR0FBQXNtRCxHQUFBdG1ELEVBQUF5aUQsTUFBQTJtQixNQUFBbDRFLEtBQUFpN0QsRUFDQSxPQUFBOUcsSUFBQWlCLEtBQUFBLEVBQUF0bUQsRUFBQXlpRCxNQUFBNG1CLEdBQUFuNEUsS0FBQSxJQUFBaTdELElBQUE3RixHQUFBOUUsRUFBQStCLE9BQUF4NUIsR0FBQSxJQUNBQSxLQUNBQSxJQUFBQSxLQUdBMGdDLFlBQUEsS0FHQXBxQyxHQUNBaTlDLFVBQUEsU0FBQW5SLEVBQUEzSyxFQUFBejNCLEVBQUFzN0IsRUFBQXJsRCxHQUNBLE1BQUFBLEdBQUF5aUQsTUFBQTBtQixLQUFBajRFLEtBQUFpN0QsRUFBQSxNQUVBekIsT0FBQSxRQUNBRCxZQUFBLElBR0FpQyxZQUFBLEVBQ0FvRSxZQUFBLEdBRUEyWSxZQUNBdG5CLEtBQUEsaUJBQ0FTLFlBQUEsc0JBQ0F0QixNQUFBLFdBQ0Fpb0IsV0FBQSxNQUVBRyx1QkFDQXZuQixLQUFBLGlCQUNBUyxZQUFBLHNCQUNBdEIsTUFBQSxhQUNBbUIsT0FDQStqQixRQUFBLFNBQUFDLEdBQ0EsR0FBQUMsR0FBQXJsQixFQUFBMlAsWUFBQWxnRSxLQUFBN0IsS0FBQXczRSxFQUNBLE9BQUEsSUFBQW4xRCxRQUFBLG9CQUFBbzFELEVBQUEsYUFBQUEsRUFBQSxXQUVBQyxLQUFBLFNBQUFGLEdBQ0EsR0FBQUMsR0FBQXJsQixFQUFBMlAsWUFBQWxnRSxLQUFBN0IsS0FBQXczRSxFQUNBLE9BQUEsSUFBQW4xRCxRQUFBLG1CQUFBbzFELEVBQUEsd0NBQUFBLEVBQUEsd0JBQUFBLEVBQUEsUUFFQUosUUFBQSxHQUFBaDFELFFBQUEsUUFDQWkxRCxLQUFBLEdBQUFqMUQsUUFBQSxrQkFFQXMxRCxRQUFBLFNBQ0FwUCxVQUFBLFNBQUF4akUsRUFBQXV2RCxFQUFBb00sRUFBQTN2RCxHQUNBLEdBQUEyMkQsR0FBQTk5QixFQUFBNXBDLEtBQ0EsSUFBQStFLEVBQUEydkIsU0FBQTN2QixFQUFBcXdCLFVBQUFnOUIsRUFBQWg5QixRQUFBaXpDLE1BQUEsQ0FDQSxHQUFBc1EsR0FBQSxHQUFBdCtELEtBQ0FxdEQsR0FBQTU0RCxLQUFBNnBFLEVBQUFDLFdBQUEsR0FBQWhoRSxXQUFBK2dFLEVBQUF4QixVQUFBdi9ELFdBQUErZ0UsRUFBQU4sY0FBQXpnRSxZQUNBOHZELEVBQUEvekMsUUFBQSxlQUlBK21ELFdBQ0F4bkIsS0FBQSxXQUNBUyxZQUFBLFdBQ0F0QixNQUFBLFdBQ0Fpb0IsV0FBQSxNQUVBSyxTQUNBem5CLEtBQUEsV0FDQVMsWUFBQSxXQUNBdEIsTUFBQSxXQUNBaW9CLFdBQUEsTUFFQU0sWUFDQTFuQixLQUFBLFFBQ0FTLFlBQUEsV0FDQXRCLE1BQUEsV0FDQXdQLFlBQUEsR0FFQWdaLFNBQ0EzbkIsS0FBQSxNQUNBUyxZQUFBLFFBQ0F0QixNQUFBLFdBQ0F3UCxZQUFBLEdBRUFpWixNQUNBem9CLE1BQUEsY0FFQTBvQixXQUNBN25CLEtBQUEsTUFDQVMsWUFBQSxVQUNBZ2tCLFFBQUEsV0FDQUgsVUFBQSxJQUNBbmxCLE1BQUEsY0FFQTJvQixRQUNBeG5CLE9BQ0ErakIsUUFBQSxTQUFBQyxHQUNBLEdBQUFDLEdBQUFybEIsRUFBQTJQLFlBQUFsZ0UsS0FBQTdCLEtBQUF3M0UsRUFDQSxPQUFBLElBQUFuMUQsUUFBQSxtQkFBQW8xRCxFQUFBLFdBRUFDLEtBQUEsU0FBQUYsR0FDQSxHQUFBQyxHQUFBcmxCLEVBQUEyUCxZQUFBbGdFLEtBQUE3QixLQUFBdzNFLEVBQ0EsT0FBQSxJQUFBbjFELFFBQUEsbUJBQUFvMUQsRUFBQSx1Q0FBQUEsRUFBQSxnQkFBQUEsRUFBQSxRQUVBSixRQUFBLEdBQUFoMUQsUUFBQSxRQUNBaTFELEtBQUEsR0FBQWoxRCxRQUFBLGtCQUVBdTFELFdBQ0FDLFFBQUEsS0FDQUMsUUFBQSxNQUVBNWtCLEtBQUEsUUFDQXlrQixRQUFBLFNBQ0Foa0IsWUFBQSxhQUNBdEIsTUFBQSxhQUNBMlgsaUJBQUEsR0FFQWlSLHVCQUNBL25CLEtBQUEsY0FDQVMsWUFBQSxzQkFDQXRCLE1BQUEsV0FDQW1sQixVQUFBLElBQ0FHLFFBQUEsU0FDQW5rQixPQUNBK2pCLFFBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBcmxCLEVBQUEyUCxZQUFBbGdFLEtBQUE3QixLQUFBdzNFLEVBQ0EsT0FBQSxJQUFBbjFELFFBQUEsb0JBQUFvMUQsRUFBQSxhQUFBQSxFQUFBLFdBRUFDLEtBQUEsU0FBQUYsR0FDQSxHQUFBQyxHQUFBcmxCLEVBQUEyUCxZQUFBbGdFLEtBQUE3QixLQUFBdzNFLEVBQ0EsT0FBQSxJQUFBbjFELFFBQUEsbUJBQUFvMUQsRUFBQSx3Q0FBQUEsRUFBQSx3QkFBQUEsRUFBQSxRQUVBSixRQUFBLEdBQUFoMUQsUUFBQSxRQUNBaTFELEtBQUEsR0FBQWoxRCxRQUFBLGtCQUVBa21ELFVBQUEsU0FBQXhqRSxFQUFBdXZELEVBQUFvTSxFQUFBM3ZELFFBRUFxaEQsS0FFQSxTQUFBMXlELEVBQUFDLEVBQUE4eEQsR0FDQSxZQUNBLElBQUFTLEVBQ0EsbUJBQUE1M0MsU0FBQUEsT0FBQUMsYUFDQSxNQUFBMjNDLEVBQUEsV0FDQSxNQUFBbnlELFNBQ0E4QixLQUFBbEMsRUFBQTh4RCxFQUFBOXhELEVBQUFELE1BQUFBLEVBQUFDLFFBQUF1eUQsSUFDQSxTQUFBeHlELEVBQUFDLEVBQUE4eEQsR0FDQSxZQUNBLElBQUFTLEVBQ0EsbUJBQUE1M0MsU0FBQUEsT0FBQUMsYUFDQSxNQUFBMjNDLEVBQUEsV0FDQSxNQUFBdHlELFdBQ0FpQyxLQUFBbEMsRUFBQTh4RCxFQUFBOXhELEVBQUFELE1BQUFBLEVBQUFDLFFBQUF1eUQsSUFDQSxTQUFBeHlELEVBQUFDLEVBQUE4eEQsR0FDQSxZQUNBLElBQUFPLEdBQUFDLEVBQUFDLENBQ0EsbUJBQUE1M0MsU0FBQUEsT0FBQUMsU0FDQSxTQUFBOWEsR0FDQXd5RCxHQUFBUixFQUFBLEdBQUFBLEVBQUEsUUFDQSxNQUFBUyxFQUFBLG1CQUFBRixFQUFBdnlELEdBQUF1eUQsRUFBQXB1RCxNQUFBakUsRUFBQXN5RCxHQUFBRCxLQUFBdHlELEVBQUFDLFFBQUF1eUQsSUFDQSxTQUFBdG9CLEVBQUF3b0IsR0FDQSxNQUFBQSxHQUFBMGUsbUJBQ0FvSyxHQUNBN00sVUFBQSxvQkFDQTdTLFlBQUEsRUFDQUMsT0FBQSxTQUVBdEwsS0FDQWtlLFVBQUEsdUJBQ0E3UyxZQUFBLEVBQ0FDLE9BQUEsU0FFQTBmLEtBQ0E5TSxVQUFBLGNBQ0E3UyxZQUFBLEVBQ0FDLE9BQUEsV0FFQXJKLEVBQUE0ZSxlQUNBdnZDLEtBQ0FpeEIsYUFDQTl3RCxHQUNBeXNFLFVBQUEsSUFDQTdTLFlBQUEsSUFHQXRJLEtBQUEsc0RBQ0F1SyxZQUFBLEVBQ0FvRSxZQUFBLEVBQ0FxTCxVQUFBLE9BRUFrTyxJQUNBbG9CLEtBQUEsa0NBQ0FSLGFBQ0E5d0QsR0FDQXlzRSxVQUFBLFNBQUFuUixFQUFBM0ssRUFBQXozQixFQUFBczdCLEVBQUFybEQsR0FDQSxNQUFBK3BCLEdBQUEsR0FBQSxHQUFBLE1BQUF5M0IsRUFBQStCLE9BQUF4NUIsRUFBQSxJQUFBb2lDLEVBQUEzSyxFQUFBK0IsT0FBQXg1QixFQUFBLEdBQUFvaUMsRUFDQUEsRUFBQXBpQyxFQUFBLEdBQUEsR0FBQSxNQUFBeTNCLEVBQUErQixPQUFBeDVCLEVBQUEsR0FBQXkzQixFQUFBK0IsT0FBQXg1QixFQUFBLEdBQUFvaUMsRUFBQSxJQUFBQSxHQUFBQSxFQUFBLEtBQUFBLEVBQ0EsR0FBQTc2QyxRQUFBLHNDQUFBcGdCLEtBQUFpN0QsSUFFQTFCLFlBQUEsSUFHQWlILFNBQUEsU0FBQTRZLEVBQUE3WSxFQUFBenhELEdBQ0EsTUFBQXNxRSxJQUVBbk8sVUFBQSxXQUVBb08sT0FDQXBvQixLQUFBLDRFQUNBTyxRQUFBLEVBQ0EwVixjQUFBLFNBQUE2RSxFQUFBajlELEdBQ0EsT0FBQWk5RCxFQUFBQSxFQUFBM3NFLGVBQUF1RCxRQUFBLFVBQUEsS0FFQTh0RCxhQUNBbDNCLEtBQ0E2eUMsVUFBQSxpQ0FDQTdTLFlBQUEsRUFDQUMsT0FBQSxTQUVBOGYsS0FDQWxOLFVBQUEsZUFDQTdTLFlBQUEsRUFDQUMsT0FBQSxVQUdBZ0gsU0FBQSxTQUFBNFksRUFBQTdZLEVBQUF6eEQsR0FDQSxNQUFBc3FFLElBRUFuTyxVQUFBLFNBRUFzTyxLQUNBdG9CLEtBQUEscUJBRUF1b0IsS0FDQXZvQixLQUFBLFlBQ0FSLGFBQ0FncEIsR0FDQXJOLFVBQUEsNEJBQ0E3UyxZQUFBLEVBQ0FDLE9BQUEsVUFHQXVPLGlCQUFBLEVBQ0FuSSxZQUFBLEtBRUF6UCxLQUVBLFNBQUExeUQsRUFBQUMsRUFBQTh4RCxHQUNBLFlBQ0EsSUFBQU8sR0FBQUMsRUFBQUMsQ0FDQSxtQkFBQTUzQyxTQUFBQSxPQUFBQyxTQUNBLFNBQUE5YSxHQUNBd3lELEdBQUFSLEVBQUEsR0FBQUEsRUFBQSxRQUNBLE1BQUFTLEVBQUEsbUJBQUFGLEVBQUF2eUQsR0FBQXV5RCxFQUFBcHVELE1BQUFqRSxFQUFBc3lELEdBQUFELEtBQUF0eUQsRUFBQUMsUUFBQXV5RCxJQUNBLFNBQUF0b0IsRUFBQXdvQixFQUFBdnVELEdBQ0EsUUFBQTgzRSxHQUFBQyxFQUFBN3FFLEdBQ0EsSUFBQSxHQUFBOHFFLEdBQUEsR0FBQWo2RSxFQUFBLEVBQUFBLEVBQUFnNkUsRUFBQTk2RSxPQUFBYyxJQUFBd3dELEVBQUE5aUQsVUFBQW9qRCxZQUFBa3BCLEVBQUF6OUIsT0FBQXY4QyxLQUFBbVAsRUFBQTJoRCxZQUFBa3BCLEVBQUF6OUIsT0FBQXY4QyxLQUFBbVAsRUFBQSs4RCxlQUFBNW5FLFFBQUEwMUUsRUFBQXo5QixPQUFBdjhDLElBQUFtUCxFQUFBKzhELGVBQUEzbkUsTUFBQXkxRSxFQUFBejlCLE9BQUF2OEMsSUFBQW1QLEVBQUEraUQsaUJBQUE1dEQsUUFBQTAxRSxFQUFBejlCLE9BQUF2OEMsSUFBQW1QLEVBQUEraUQsaUJBQUEzdEQsTUFBQXkxRSxFQUFBejlCLE9BQUF2OEMsSUFBQW1QLEVBQUE4aUQsWUFBQTN0RCxRQUFBMDFFLEVBQUF6OUIsT0FBQXY4QyxJQUFBbVAsRUFBQThpRCxZQUFBMXRELE1BQUF5MUUsRUFBQXo5QixPQUFBdjhDLElBQUFtUCxFQUFBOGpELG1CQUFBK21CLEVBQUF6OUIsT0FBQXY4QyxHQUFBaTZFLEdBQUEsS0FBQUQsRUFBQXo5QixPQUFBdjhDLEdBQUFpNkUsR0FBQUQsRUFBQXo5QixPQUFBdjhDLEVBQ0EsT0FBQWk2RSxHQUVBLE1BQUF6cEIsR0FBQTRlLGVBQ0E4SyxTQUNBNW9CLEtBQUEsU0FBQW5pRCxHQUNBLEdBQUEsSUFBQUEsRUFBQTJpRCxRQUFBajZDLE1BQUExSSxFQUFBZ3JFLGlCQUFBaHJFLEVBQUFnckUsY0FBQWhyRSxFQUFBMmlELFFBQ0EzaUQsRUFBQTJpRCxPQUFBLEVBQUEzaUQsRUFBQW8wRCxpQkFBQXAwRCxFQUFBbXRELGFBQUEsTUFBQW50RCxFQUFBbXRELFdBQUFudEQsRUFBQW8wRCxlQUFBLElBQUEsTUFBQXAwRCxFQUFBbXRELFdBQUFudEQsRUFBQW8wRCxlQUFBLElBQUFwMEQsRUFBQW8wRCxlQUFBLElBQ0EsTUFBQXAwRCxFQUFBbzBELGlCQUFBcDBELEVBQUErcUQsMEJBQUFqNEQsR0FBQWtOLEVBQUFpckUsVUFBQWpyRSxFQUFBaXJFLFdBQUEsS0FBQWpyRSxFQUFBbzBELGVBQ0FwMEQsRUFBQWlyRSxZQUFBLGdCQUFBanJFLEdBQUFrckUsV0FBQS9oRCxTQUFBbnBCLEVBQUFrckUsYUFBQWxyRSxFQUFBa3JFLFVBQUEvOUMsU0FBQW50QixFQUFBa3JFLFlBQ0EvaEQsU0FBQW5wQixFQUFBZ3JFLGdCQUFBLENBQ0EsR0FBQUcsR0FBQTF0RSxLQUFBeS9CLE1BQUFsOUIsRUFBQWdyRSxjQUFBaHJFLEVBQUFrckUsV0FBQUUsRUFBQXByRSxFQUFBZ3JFLGNBQUFockUsRUFBQWtyRSxTQUNBbHJFLEdBQUFnckUsY0FBQTc5QyxTQUFBbnRCLEVBQUFnckUsZ0JBQUEsSUFBQUksRUFBQUQsRUFBQSxFQUFBQSxHQUNBbnJFLEVBQUFnckUsY0FBQSxJQUFBaHJFLEVBQUFnckUsY0FBQSxLQUVBaHJFLEVBQUE0aUQsWUFBQTd5RCxPQUFBLElBQUFpUSxFQUFBNGlELFlBQUE1aUQsRUFBQTRpRCxZQUFBeFYsT0FBQSxJQUNBLGVBQUFwdEMsRUFBQTY1RCxzQkFBQSxLQUFBNzVELEVBQUE0aUQsY0FBQSxJQUFBNWlELEVBQUFxckUsa0JBQUFyckUsRUFBQTY1RCxxQkFBQSxPQUNBNzVELEVBQUEyaEQsWUFBQSxLQUFBM2hELEVBQUEyaEQsWUFBQSxLQUFBM2hELEVBQUEyaEQsWUFBQSxLQUFBNGIsaUJBQUEsS0FDQSxJQUFBdjlELEVBQUE4aEQsZUFBQTloRCxFQUFBNjVELHFCQUFBLGVBQUE3NUQsRUFBQTY1RCxxQkFBQSxNQUFBNzVELEVBQUE2NUQscUJBQ0E3NUQsRUFBQXNyRSxnQkFBQSxFQUFBNWlFLE1BQUExSSxFQUFBdXJFLFVBQUF2ckUsRUFBQXVyRSxPQUFBLEdBQUF2ckUsRUFBQXdyRSxnQkFBQSxFQUNBLElBQUFycEIsR0FBQSxLQUNBLElBQUFBLEdBQUF5b0IsRUFBQTVxRSxFQUFBd0QsT0FBQXhELElBQUEsSUFBQUEsRUFBQXFyRSxnQkFBQWxwQixHQUFBLE9BQUFuaUQsRUFBQWdyRSxjQUFBLElBQUE3b0IsR0FBQSxLQUFBbmlELEVBQUFnckUsY0FBQSxJQUNBaHJFLEVBQUF1ckUsU0FBQXo0RSxFQUFBLENBQ0FrTixFQUFBa3RELDJCQUFBbHRELEVBQUF3ckUsZUFBQSxJQUFBeHJFLEVBQUFtdEQsVUFDQSxJQUFBc2UsR0FBQXpyRSxFQUFBdXJFLE9BQUExa0UsV0FBQVQsTUFBQSxJQUNBK2lCLFVBQUFzaUQsRUFBQSxJQUFBQSxFQUFBLElBQUF0aUQsU0FBQXNpRCxFQUFBLEtBQUF0cEIsR0FBQW5pRCxFQUFBa3RELDJCQUFBLEtBQUFsdEQsRUFBQXVyRSxPQUFBLEtBQUE3aUUsTUFBQTFJLEVBQUF1ckUsU0FBQXArQyxTQUFBbnRCLEVBQUF1ckUsUUFBQSxLQUFBdnJFLEVBQUFzckUsZUFBQW5wQixHQUFBLElBQUFuaUQsRUFBQWt0RCwyQkFBQSxPQUFBbHRELEVBQUF1ckUsT0FBQSxLQUFBcHBCLEdBQUFuaUQsRUFBQWt0RCwyQkFBQSxLQUFBbHRELEVBQUF1ckUsT0FBQSxLQUVBLE1BQUFwcEIsSUFBQXlvQixFQUFBNXFFLEVBQUEwcEIsT0FBQTFwQixHQUFBbWlELEdBQUEsTUFBQW5pRCxFQUFBMGlELFFBQUEsRUFBQVAsR0FFQVMsWUFBQSxHQUNBRixRQUFBLEVBQ0E2b0IsT0FBQSxJQUNBRCxnQkFBQSxFQUNBSSxxQkFBQSxFQUNBdmUsV0FBQSxJQUNBME0scUJBQUEsYUFDQXFSLFVBQUEsRUFDQTlXLGVBQUEsR0FDQTZXLFdBQUEsRUFDQVUsWUFBQSxFQUNBQyxnQkFDQUMsTUFBQSxJQUNBQyxLQUFBLElBRUFkLGNBQUEsSUFDQUssaUJBQUEsRUFDQTduRSxPQUFBLEdBQ0FrbUIsT0FBQSxHQUNBd3pDLFlBQUEsRUFDQXNPLGdCQUFBLEVBQ0E3NkIsSUFBQSxLQUNBanpDLElBQUEsS0FDQXNzQixLQUFBLEVBQ0EwaUMsWUFBQSxFQUNBb0UsWUFBQSxFQUNBaWIsZ0JBQUEsRUFDQTVQLFVBQUEsVUFDQS9PLGNBQUEsU0FBQTdKLEVBQUF4NUIsRUFBQTgyQixFQUFBZ0wsRUFBQTdyRCxHQUNBLEdBQUEsTUFBQTZnRCxHQUFBQSxJQUFBN2dELEVBQUE0ckUsZUFBQUMsTUFBQSxPQUFBLElBQUE3ckUsRUFBQTJyRSxhQUFBM3JFLEVBQUFnc0UsV0FBQWhzRSxFQUFBZ3NFLGFBQUFsNUUsSUFBQWtOLEVBQUFnc0UsV0FDQSxLQUFBem9CLEVBQUFsZ0QsS0FBQSxNQUNBNG5ELE1BQUFsaEMsRUFDQWtpRCxRQUFBLEdBRUEsS0FBQSxJQUFBcGdCLEdBQUFoTCxJQUFBN2dELEVBQUFtdEQsWUFBQW50RCxFQUFBdXJFLFNBQUF6NEUsSUFBQTRWLE1BQUExSSxFQUFBdXJFLFNBQUFwK0MsU0FBQW50QixFQUFBdXJFLFFBQUEsR0FBQSxDQUNBLEdBQUE1UixHQUFBOWdDLEVBQUF6Z0MsUUFBQTRILEVBQUFtdEQsV0FBQTVKLEVBQ0EsS0FBQSxJQUFBb1csRUFBQSxPQUFBLElBQUEzNUQsRUFBQThoRCxhQUFBLzNCLElBQUE0dkMsR0FDQTFPLE1BQUEwTyxFQUFBLEdBR0EsT0FBQSxHQUVBdEssZUFBQSxTQUFBOUwsRUFBQXdrQixFQUFBL25FLEdBQ0EsR0FBQTBwQixHQUFBMXBCLEVBQUEwcEIsT0FBQXRqQixNQUFBLElBQUE1QyxFQUFBeEQsRUFBQXdELE9BQUE0QyxNQUFBLEdBQ0EsSUFBQTJoRSxFQUFBaCtDLE1BQUFqM0IsR0FBQWkxRSxFQUFBOWMsUUFBQW40RCxJQUFBLElBQUFpMUUsRUFBQWtFLE9BQUEsTUFBQWxFLEVBQ0EsSUFBQXBZLEdBQUFvWSxFQUFBOWMsUUFBQW40RCxFQUFBaTFFLEVBQUE5YyxNQUFBOGMsRUFBQWgrQyxJQUFBdWdELEVBQUEvbUIsRUFBQXh3RCxPQUNBaU4sR0FBQThoRCxlQUFBNk4sRUFBQTJhLEVBQUF2NkUsT0FBQTQvRCxFQUFBLEVBQUEyYSxFQUFBQSxFQUFBN3ZELFVBQ0EsSUFBQXl4RCxHQUFBNUIsRUFBQTNhLEVBQ0EsSUFBQXVjLElBQUFsc0UsRUFBQW8wRCxpQkFBQThYLEVBQUE1QixFQUFBM2EsR0FBQSxJQUNBQSxJQUFBMmEsRUFBQXY2RSxPQUFBaVEsRUFBQTBwQixPQUFBMzVCLE9BQUEsR0FBQW04RSxJQUFBbHNFLEVBQUFtdEQsV0FBQSxNQUFBNGEsRUFDQW1FLEtBQUFwNUUsR0FBQW81RSxJQUFBbHNFLEVBQUFtdEQsWUFBQStlLElBQUFsc0UsRUFBQTRyRSxlQUFBQyxPQUFBSyxJQUFBbHNFLEVBQUE0ckUsZUFBQUUsT0FBQXhCLEVBQUEzYSxHQUFBLElBQ0EzdkQsRUFBQXdELE9BQUF6VCxPQUFBLEdBQUE0L0QsS0FBQSxJQUFBM3ZELEVBQUFnc0UsV0FBQSxFQUFBLElBQUFyYyxFQUFBM3ZELEVBQUF3RCxPQUFBelQsT0FBQSxJQUFBLElBQUFpUSxFQUFBZ3NFLFdBQUEsRUFBQSxHQUFBeG9FLEVBQUFtc0QsSUFBQSxJQUFBM3ZELEVBQUFnc0UsV0FBQSxFQUFBLElBQUEsSUFBQWhzRSxFQUFBMHBCLE9BQUEzNUIsT0FBQSxHQUFBNC9ELEdBQUEyYSxFQUFBdjZFLE9BQUFpUSxFQUFBMHBCLE9BQUEzNUIsU0FBQSxJQUFBaVEsRUFBQWdzRSxXQUFBLEVBQUEsS0FBQXRpRCxFQUFBaW1DLEdBQUEyYSxFQUFBdjZFLE9BQUFpUSxFQUFBMHBCLE9BQUEzNUIsU0FBQSxJQUFBaVEsRUFBQWdzRSxXQUFBLEVBQUEsS0FBQSxNQUNBeG9FLEVBQUFBLEVBQUFILEtBQUEsSUFBQXFtQixFQUFBQSxFQUFBcm1CLEtBQUEsR0FDQSxJQUFBOG9FLEdBQUE3QixFQUFBam5FLEtBQUEsSUFBQXhQLFFBQUEyUCxFQUFBLEdBQ0EsSUFBQTJvRSxFQUFBQSxFQUFBdDRFLFFBQUE2MUIsRUFBQSxJQUFBeWlELEVBQUFBLEVBQUF0NEUsUUFBQSxHQUFBeWQsUUFBQSt2QyxFQUFBMlAsWUFBQWh4RCxFQUFBbzBELGdCQUFBLEtBQUEsSUFDQStYLEVBQUFBLEVBQUF0NEUsUUFBQSxHQUFBeWQsUUFBQSxLQUFBK3ZDLEVBQUEyUCxZQUFBaHhELEVBQUE0ckUsZUFBQUMsT0FBQSxJQUFBLEtBQUEsSUFDQU0sRUFBQUEsRUFBQXQ0RSxRQUFBLEdBQUF5ZCxRQUFBK3ZDLEVBQUEyUCxZQUFBaHhELEVBQUE0ckUsZUFBQUUsTUFBQSxLQUFBLElBQ0FwakUsTUFBQTFJLEVBQUE0aUQsZUFBQXVwQixFQUFBQSxFQUFBdDRFLFFBQUEsR0FBQXlkLFFBQUErdkMsRUFBQTJQLFlBQUFoeEQsRUFBQTRpRCxhQUFBLEtBQUEsS0FDQXVwQixFQUFBcDhFLE9BQUEsR0FBQSxJQUFBbzhFLEVBQUFuN0UsUUFBQWdQLEVBQUFtdEQsY0FBQSxNQUFBK2UsSUFBQUMsRUFBQUEsRUFBQXQ0RSxRQUFBLE9BQUEsS0FDQXM0RSxFQUFBQSxFQUFBdDRFLFFBQUEsTUFBQSxLQUFBczRFLEVBQUEvK0IsT0FBQSxLQUFBcHRDLEVBQUFtdEQsWUFBQSxLQUFBbnRELEVBQUFtdEQsYUFBQSxJQUFBbnRELEVBQUE4aEQsZUFBQXFxQixFQUFBLElBQUFBLEdBQ0EsS0FBQUEsRUFBQSxDQUNBLEdBQUFBLEVBQUFBLEVBQUEvbEUsTUFBQSxNQUFBcEcsRUFBQXNyRSxnQkFBQXRyRSxFQUFBMHJFLHFCQUFBLFNBQUEzRCxFQUFBOXVFLFFBQUFrd0IsU0FBQW5wQixFQUFBdXJFLFFBQUEsQ0FDQSxHQUFBYSxHQUFBdnpDLEVBQUF6Z0MsUUFBQTRILEVBQUFtdEQsV0FBQWdmLEdBQUFFLEVBQUF4ekMsRUFBQXpnQyxRQUFBNEgsRUFBQW10RCxXQUFBbWQsSUFDQSxJQUFBOEIsSUFBQUQsRUFBQWowRSxLQUFBOEgsRUFBQW10RCxZQUFBaWYsRUFBQUQsRUFBQXA4RSxPQUFBLEVBQ0EsS0FBQSxHQUFBYyxHQUFBLEVBQUFBLEdBQUFtUCxFQUFBdXJFLE9BQUExNkUsSUFBQW1QLEVBQUFzckUsa0JBQUF0ckUsRUFBQTByRSxxQkFBQSxTQUFBM0QsRUFBQTl1RSxRQUFBa3pFLEVBQUFDLEVBQUF2N0UsS0FBQWlDLEdBQUFxNUUsRUFBQUMsRUFBQXY3RSxLQUFBbVAsRUFBQTRpRCxZQUFBeFYsT0FBQSxJQUFBLElBQUFpL0IsR0FBQS9CLEVBQUErQixFQUFBeDdFLEtBQUFpQyxJQUFBcTVFLEVBQUFDLEVBQUF2N0UsR0FBQXM3RSxFQUFBQyxFQUFBdjdFLElBQUF5NUUsRUFBQStCLEVBQUF4N0UsSUFBQXM3RSxFQUFBQyxFQUFBdjdFLEdBQUFrM0UsRUFBQW5sQixhQUFBNWlELEVBQUE0aUQsWUFBQXhWLE9BQUEsR0FFQSxJQUFBLElBQUFwdEMsRUFBQWlyRSxXQUFBLEtBQUFqckUsRUFBQW8wRCxnQkFBQThYLElBQUFsc0UsRUFBQW10RCxZQUFBNGEsRUFBQWgrQyxNQUFBajNCLElBQUFpMUUsRUFBQWtFLE9BQUFFLEVBQUFBLEVBQUE5b0UsS0FBQSxRQUFBLENBQ0EsR0FBQWlwRSxHQUFBSCxFQUFBQSxFQUFBcDhFLE9BQUEsS0FBQWlRLEVBQUFtdEQsWUFBQTRhLEVBQUFsbkIsSUFBQTdnRCxFQUFBbXRELFVBQ0FnZixHQUFBOXFCLEVBQUEsU0FBQWtDLEVBQUF2akQsR0FDQSxHQUFBdXNFLEdBQUEsRUFDQSxJQUFBQSxHQUFBLElBQUF2c0UsRUFBQW8wRCxlQUFBLEtBQUFwMEQsRUFBQWtyRSxVQUFBLFFBQUEsS0FBQWxyRSxFQUFBbXRELFdBQUEsQ0FDQSxHQUFBcWYsR0FBQWpwQixFQUFBbGdELEtBQUEsSUFBQStDLE1BQUFwRyxFQUFBbXRELFdBQ0FxZixHQUFBLEtBQUFELEdBQUF2c0UsRUFBQW10RCxXQUFBLEtBQUFxZixFQUFBLEdBQUE3NkUsTUFBQSxjQUFBLEdBQUE1QixPQUFBLEtBRUEsTUFBQXc4RSxJQUNBSixFQUFBbnNFLElBQ0E4aEQsY0FBQSxFQUNBaUQsWUFBQSxFQUNBcEQsYUFDQWwzQixLQUNBNnlDLFVBQUEsU0FDQTdTLFlBQUEsTUFHQWxWLE9BQUE0MkIsRUFBQTlvRSxLQUFBLEtBQUFpcEUsSUFBQUgsR0FBQW5zRSxFQUFBbXRELFlBQ0FnZixFQUFBLytCLE9BQUEsS0FBQXB0QyxFQUFBbzBELGdCQUFBK1gsRUFBQWgwQixPQUFBLElBR0EsR0FBQW40QyxFQUFBZ3NFLFlBQUEsU0FBQWpFLEVBQUE5dUUsUUFBQStHLEVBQUFnc0UsV0FBQSxNQUFBRyxHQUNBQSxFQUFBM29FLEVBQUEyb0UsRUFBQUEsR0FBQXppRCxFQUFBMXBCLEVBQUFnc0UsYUFBQUcsRUFBQW5zRSxFQUFBNHJFLGVBQUFDLE1BQUFNLEVBQ0FBLEdBQUFuc0UsRUFBQTRyRSxlQUFBRSxNQUFBSyxFQUFBQSxFQUFBL2xFLE1BQUEsSUFDQThsRSxJQUFBcDVFLEVBQUEsR0FBQW81RSxJQUFBbHNFLEVBQUFtdEQsWUFBQStlLElBQUFsc0UsRUFBQTRyRSxlQUFBQyxPQUFBSyxJQUFBbHNFLEVBQUE0ckUsZUFBQUUsTUFBQW5jLEVBQUE5MkIsRUFBQXpnQyxRQUFBLElBQUErekUsS0FBQSxFQUFBQSxFQUFBeGMsR0FBQXVjLEVBQUF2YyxFQUFBb1ksRUFBQTljLE9BQUEsTUFBQSxJQUFBaWhCLElBQUFsc0UsRUFBQW10RCxZQUFBK2UsSUFBQWxzRSxFQUFBNHJFLGVBQUFDLE9BQUFLLElBQUFsc0UsRUFBQTRyRSxlQUFBRSxLQUFBLENBQ0EsR0FBQVcsR0FBQTV6QyxFQUFBemdDLFFBQUE4ekUsRUFBQUMsSUFDQSxJQUFBTSxJQUFBOWMsRUFBQThjLEdBRUF6c0UsRUFBQThoRCxlQUFBNk4sRUFBQXdjLEVBQUFwOEUsT0FBQTQvRCxFQUFBLEVBQUF3YyxFQUFBQSxFQUFBMXhELFVBQ0EsSUFBQXd4QyxJQUNBaEIsTUFBQWloQixJQUFBcDVFLEdBQUFpMUUsRUFBQWgrQyxNQUFBajNCLEVBQUE2OEQsR0FBQTN2RCxFQUFBOGhELGNBQUEsRUFBQSxHQUFBNk4sRUFDQXBNLE9BQUE0b0IsRUFDQXJoQixrQkFBQWlkLEVBQUFrRSxRQUFBMW9CLEVBQUFsZ0QsS0FBQSxNQUFBOG9FLEVBQUE5b0UsS0FBQSxJQUVBLE9BQUE0b0QsR0FBQW5CLGtCQUFBbUIsRUFBQThiLEdBRUFsWSxjQUFBLFNBQUE3N0QsRUFBQXV2RCxFQUFBb00sRUFBQTN2RCxHQUNBLEdBQUFoTSxFQUFBLE9BQUFBLEVBQUFoRSxNQUNBLElBQUEsVUFDQSxNQUFBZ1EsR0FBQXF2RCxlQUFBOUwsR0FDQTBILE1BQUEwRSxFQUNBc2MsUUFBQSxHQUNBanNFLEVBRUEsS0FBQSxPQUNBLElBQUEsV0FDQSxHQUFBMHNFLEVBQ0EsSUFBQSxTQUFBMXNFLEdBQ0FBLEVBQUEyc0UscUJBQUE3NUUsSUFBQSxPQUFBa04sRUFBQTJ3QyxNQUFBM3dDLEVBQUEyd0MsSUFBQTN3QyxFQUFBMndDLElBQUE5cEMsV0FBQWhULFFBQUEsR0FBQXlkLFFBQUErdkMsRUFBQTJQLFlBQUFoeEQsRUFBQW8wRCxnQkFBQSxLQUFBLElBQ0EsTUFBQXAwRCxFQUFBbXRELGFBQUFudEQsRUFBQTJ3QyxJQUFBM3dDLEVBQUEyd0MsSUFBQTk4QyxRQUFBbU0sRUFBQW10RCxXQUFBLE1BQ0FudEQsRUFBQTJ3QyxJQUFBeG5CLFNBQUFucEIsRUFBQTJ3QyxLQUFBdnlDLFdBQUE0QixFQUFBMndDLEtBQUFpOEIsSUFBQWxrRSxNQUFBMUksRUFBQTJ3QyxPQUFBM3dDLEVBQUEyd0MsSUFBQWs4QixPQUFBQyxZQUNBLE9BQUE5c0UsRUFBQXRDLE1BQUFzQyxFQUFBdEMsSUFBQXNDLEVBQUF0QyxJQUFBbUosV0FBQWhULFFBQUEsR0FBQXlkLFFBQUErdkMsRUFBQTJQLFlBQUFoeEQsRUFBQW8wRCxnQkFBQSxLQUFBLElBQ0EsTUFBQXAwRCxFQUFBbXRELGFBQUFudEQsRUFBQXRDLElBQUFzQyxFQUFBdEMsSUFBQTdKLFFBQUFtTSxFQUFBbXRELFdBQUEsTUFDQW50RCxFQUFBdEMsSUFBQXlyQixTQUFBbnBCLEVBQUF0QyxLQUFBVSxXQUFBNEIsRUFBQXRDLEtBQUFrdkUsSUFBQWxrRSxNQUFBMUksRUFBQXRDLE9BQUFzQyxFQUFBdEMsSUFBQW12RSxPQUFBRSxZQUNBL3NFLEVBQUEyc0UsbUJBQUEsU0FDQTNzRSxHQUFBLE9BQUFBLEVBQUEyd0MsS0FBQSxPQUFBM3dDLEVBQUF0QyxJQUFBLENBQ0EsR0FBQWd2RSxFQUFBMXNFLEVBQUEweEQsU0FBQW5PLEVBQUFsZ0QsS0FBQSxJQUFBdlEsRUFBQStsQyxFQUFBdCtCLFVBQUF5RixHQUNBK3JFLGdCQUFBLEtBQ0EsT0FBQS9yRSxFQUFBMndDLEtBQUErN0IsRUFBQTFzRSxFQUFBMndDLElBQUEsTUFBQTN3QyxHQUFBZ3NFLFdBQUFoc0UsRUFBQTJ3QyxJQUFBLEVBQ0Ezd0MsRUFBQXF2RCxlQUFBcnZELEVBQUEyd0MsSUFBQTlwQyxXQUFBaFQsUUFBQSxJQUFBbU0sRUFBQW10RCxZQUFBL21ELE1BQUEsS0FDQTZrRCxNQUFBMEUsRUFDQXNjLFFBQUEsRUFDQXJwQixZQUFBLEtBQ0E1aUQsRUFDQSxJQUFBLE9BQUFBLEVBQUF0QyxLQUFBZ3ZFLEVBQUExc0UsRUFBQXRDLElBQUEsTUFBQXNDLEdBQUFnc0UsV0FBQWhzRSxFQUFBdEMsSUFBQSxFQUNBc0MsRUFBQXF2RCxlQUFBcnZELEVBQUF0QyxJQUFBbUosV0FBQWhULFFBQUEsSUFBQW1NLEVBQUFtdEQsWUFBQS9tRCxNQUFBLEtBQ0E2a0QsTUFBQTBFLEVBQ0FzYyxRQUFBLEVBQ0FycEIsWUFBQSxLQUNBNWlELEdBRUEsTUFBQUEsR0FBQXF2RCxlQUFBOUwsR0FDQTBILE1BQUEwRSxFQUNBL00sWUFBQSxJQUNBM3BELE1BQUEsUUFDQStHLEVBRUEsS0FBQSxZQUNBLE9BQ0FpckQsTUFBQTBFLEtBSUFsTixPQUNBdXFCLFlBQUEsU0FBQWh0RSxFQUFBaXRFLEdBQ0EsTUFBQUEsR0FBQSxHQUFBMzdELFFBQUEsSUFBQSt2QyxFQUFBMlAsWUFBQWh4RCxFQUFBNHJFLGVBQUFDLE9BQUEsT0FBQSxHQUFBdjZELFFBQUEsSUFBQSt2QyxFQUFBMlAsWUFBQWh4RCxFQUFBNHJFLGVBQUFDLE9BQUEsWUFFQXFCLGFBQUEsU0FBQWx0RSxHQUNBLE1BQUEsSUFBQXNSLFFBQUEsT0FBQSt2QyxFQUFBMlAsWUFBQWh4RCxFQUFBbzBELGdCQUFBL1MsRUFBQTJQLFlBQUFoeEQsRUFBQTRpRCxZQUFBeFYsT0FBQSxJQUFBLFFBR0F1VSxhQUNBN3JDLEtBQ0F3bkQsVUFBQSxTQUFBblIsRUFBQTNLLEVBQUF6M0IsRUFBQXM3QixFQUFBcmxELEVBQUE2ckQsR0FDQSxHQUFBdkYsR0FBQWpCLEVBQUEsR0FBQS96QyxRQUFBLE9BQUErdkMsRUFBQTJQLFlBQUFoeEQsRUFBQW8wRCxnQkFBQSxLQUFBbGpFLEtBQUFpN0QsR0FBQSxHQUFBNzZDLFFBQUEsU0FBQXBnQixLQUFBaTdELEVBQ0EsS0FBQSxJQUFBN0YsR0FDQSxJQUFBLElBQUF0bUQsRUFBQThoRCxjQUFBTixFQUFBNkIsZUFBQXQ1QixLQUFBajNCLEdBQUEsTUFBQTB1RCxFQUFBNkIsZUFBQXQ1QixHQUFBcDRCLE1BQUFzekQsTUFBQTRHLEVBQUEsQ0FDQSxHQUFBc2dCLEdBQUEzcUIsRUFBQStCLE9BQUFsZ0QsS0FBQSxJQUFBOHBFLEdBQUFoQixHQUFBQSxFQUFBQSxFQUFBdDRFLFFBQUEsR0FBQXlkLFFBQUEsS0FBQSt2QyxFQUFBMlAsWUFBQWh4RCxFQUFBNHJFLGVBQUFDLE9BQUEsSUFBQSxLQUFBLEtBQUFoNEUsUUFBQSxHQUFBeWQsUUFBQSt2QyxFQUFBMlAsWUFBQWh4RCxFQUFBNHJFLGVBQUFFLE1BQUEsS0FBQSxLQUFBMWxFLE1BQUFwRyxFQUFBbXRELFdBQ0FnZ0IsR0FBQXA5RSxPQUFBLElBQUFvOUUsRUFBQSxHQUFBQSxFQUFBLEdBQUF0NUUsUUFBQSxLQUFBbU0sRUFBQTRpRCxZQUFBeFYsT0FBQSxLQUNBLE1BQUErL0IsRUFBQSxLQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQXQ1RSxRQUFBLEtBQUFtTSxFQUFBNGlELFlBQUF4VixPQUFBLEtBQ0ErK0IsRUFBQWdCLEVBQUEsR0FBQW50RSxFQUFBbXRELFdBQUFnZ0IsRUFBQSxJQUFBLEVBQ0EsSUFBQUMsR0FBQTVyQixFQUFBOEIsUUFBQWpnRCxLQUFBLEdBQ0EsS0FBQThvRSxJQUFBbnNFLEVBQUFtdEQsYUFBQWdmLEVBQUFpQixHQUFBLE9BQUFqQixFQUFBeDZFLE1BQUEwdkQsRUFBQTJQLFlBQUFvYyxHQUFBLE1BQUFBLEVBQUFBLEVBQUFyNkUsTUFBQSxFQUNBdXpELElBQUE2bEIsR0FBQUEsRUFBQUEsRUFBQXQ0RSxRQUFBdTVFLEVBQUEsS0FBQWhuRSxNQUFBLEtBQUEyakIsS0FBQWozQixHQUNBaTNCLElBQUFBLEVBQ0FodUIsT0FBQWd1QixJQUVBQSxJQUFBQSxRQUdBczdCLElBQUE4RyxJQUFBbnNELEVBQUFtdEQsWUFBQTNMLEVBQUE2QixlQUFBdDVCLEVBQUEsS0FBQWozQixJQUFBMHVELEVBQUErQixPQUFBeDVCLEdBQUEsSUFDQXU4QixHQUNBdjhCLElBQUFBLEVBQUEsR0FFQSxPQUFBdThCLElBRUFtRSxZQUFBLEdBRUE1MEMsS0FDQXluRCxVQUFBLFNBQUFuUixFQUFBM0ssRUFBQXozQixFQUFBczdCLEVBQUFybEQsR0FDQSxNQUFBQSxHQUFBMnJFLGFBQUEsTUFBQXhmLEdBQUFBLElBQUFuc0QsRUFBQTRyRSxlQUFBQyxRQUVBcGhCLFlBQUEsRUFDQTdILFlBQUEsSUFFQTRuQixLQUNBbE4sVUFBQSxTQUFBblIsRUFBQTNLLEVBQUF6M0IsRUFBQXM3QixFQUFBcmxELEdBQ0EsTUFBQUEsR0FBQTJyRSxZQUFBeGYsSUFBQW5zRCxFQUFBNHJFLGVBQUFFLE1BRUFyaEIsWUFBQSxFQUNBN0gsWUFBQSxJQUVBeXFCLEtBQ0EvUCxVQUFBLFNBQUFuUixFQUFBM0ssRUFBQXozQixFQUFBczdCLEVBQUFybEQsR0FDQSxHQUFBc3RFLEdBQUEsSUFBQWpzQixFQUFBMlAsWUFBQWh4RCxFQUFBbXRELFlBQUEsSUFBQTdHLEVBQUEsR0FBQWgxQyxRQUFBZzhELEdBQUFwOEUsS0FBQWk3RCxFQUNBLE9BQUE3RixJQUFBOUUsRUFBQTZCLGVBQUF0NUIsSUFBQXkzQixFQUFBNkIsZUFBQXQ1QixHQUFBcDRCLE1BQUFpeEQsY0FBQTVpRCxFQUFBbXRELGFBQUE3RyxHQUNBMkUsTUFBQWxoQyxFQUFBLElBQ0F1OEIsR0FFQW1FLFlBQUEsRUFDQTdILFlBQUEsU0FBQTVpRCxHQUNBLE1BQUFBLEdBQUFtdEQsY0FJQXVFLFNBQUEsU0FBQTRZLEVBQUE3WSxFQUFBenhELEdBQ0EsR0FBQSxLQUFBeXhELElBQUEsSUFBQXp4RCxFQUFBaTdELFNBQUEsTUFBQXhKLEVBQ0EsSUFBQTBhLEdBQUE3QixFQUFBejJFLFFBQUFtTSxFQUFBd0QsT0FBQSxHQUNBLE9BQUEyb0UsR0FBQUEsRUFBQXQ0RSxRQUFBbU0sRUFBQTBwQixPQUFBLElBQUF5aUQsRUFBQUEsRUFBQXQ0RSxRQUFBLEdBQUF5ZCxRQUFBK3ZDLEVBQUEyUCxZQUFBaHhELEVBQUFvMEQsZ0JBQUEsS0FBQSxJQUNBLEtBQUFwMEQsRUFBQTRpRCxZQUFBeFYsT0FBQSxLQUFBKytCLEVBQUFBLEVBQUF0NEUsUUFBQSxHQUFBeWQsUUFBQXRSLEVBQUE0aUQsWUFBQXhWLE9BQUEsR0FBQSxLQUFBLE1BQ0FwdEMsRUFBQStyRSxnQkFBQSxLQUFBL3JFLEVBQUFtdEQsYUFBQSxJQUFBZ2YsRUFBQW43RSxRQUFBZ1AsRUFBQW10RCxjQUFBZ2YsRUFBQUEsRUFBQXQ0RSxRQUFBd3RELEVBQUEyUCxZQUFBbGdFLEtBQUE3QixLQUFBK1EsRUFBQW10RCxZQUFBLE1BQ0FnZixFQUFBQSxFQUFBdDRFLFFBQUEsR0FBQXlkLFFBQUEsSUFBQSt2QyxFQUFBMlAsWUFBQWh4RCxFQUFBNHJFLGVBQUFDLFFBQUEsS0FDQU0sRUFBQUEsRUFBQXQ0RSxRQUFBLEdBQUF5ZCxRQUFBK3ZDLEVBQUEyUCxZQUFBaHhELEVBQUE0ckUsZUFBQUUsTUFBQSxLQUFBLElBQ0FlLE9BQUFWLElBQUFBLEdBRUE5OEIsV0FBQSxTQUFBa1UsRUFBQXZqRCxHQUNBLEdBQUFzcUUsR0FBQS9tQixFQUFBbGdELEtBQUEsR0FDQSxJQUFBa2dELEVBQUF4d0QsUUFBQXNRLEtBQUEsTUFBQWluRSxFQUFBLE9BQUEsQ0FDQSxJQUFBNkIsR0FBQTdCLEVBQUF6MkUsUUFBQW1NLEVBQUF3RCxPQUFBLEdBQ0EsT0FBQTJvRSxHQUFBQSxFQUFBdDRFLFFBQUFtTSxFQUFBMHBCLE9BQUEsSUFBQXlpRCxFQUFBQSxFQUFBdDRFLFFBQUEsR0FBQXlkLFFBQUErdkMsRUFBQTJQLFlBQUFoeEQsRUFBQW8wRCxnQkFBQSxLQUFBLElBQ0EsTUFBQXAwRCxFQUFBbXRELGFBQUFnZixFQUFBQSxFQUFBdDRFLFFBQUF3dEQsRUFBQTJQLFlBQUFoeEQsRUFBQW10RCxZQUFBLE1BQ0Foa0MsU0FBQWdqRCxJQUVBcFQsYUFBQSxTQUFBMEQsRUFBQXo4RCxHQUNBLEdBQUFBLEVBQUFnc0UsV0FBQWw1RSxFQUFBMnBFLEVBQUFBLEVBQUE1MUQsV0FBQXVtQyxPQUFBcXZCLEVBQUExc0UsT0FBQSxLQUFBaVEsRUFBQW10RCxXQUFBc1AsRUFBQTUxRCxXQUFBc3hDLE9BQUEsRUFBQXNrQixFQUFBMXNFLE9BQUEsR0FBQTBzRSxFQUFBNTFELFdBQ0EsS0FBQTdHLEVBQUFtdEQsWUFBQWhrQyxTQUFBc3pDLEdBQUEsQ0FDQSxHQUFBOFEsR0FBQTlRLEVBQUFyMkQsTUFBQSxLQUFBOGtFLEVBQUEsS0FBQWxyRSxFQUFBbzBELGVBQUFqbkMsU0FBQW50QixFQUFBa3JFLFdBQUEsQ0FDQSxLQUFBcUMsRUFBQXg5RSxTQUFBdzlFLEVBQUEsR0FBQXg5RSxPQUFBbTdFLEdBQUFxQyxFQUFBLEdBQUF4OUUsT0FBQW03RSxHQUFBcUMsRUFBQSxHQUFBeDlFLFFBQUFtN0UsR0FBQXFDLEVBQUEsR0FBQXg5RSxPQUFBbTdFLEtBQUF6TyxFQUFBQSxFQUFBNW9FLFFBQUEsSUFBQW1NLEVBQUFtdEQsYUFFQSxHQUFBcWdCLEdBQUEvUSxFQUFBOXFFLE1BQUEsTUFBQTg3RSxFQUFBaFIsRUFBQTlxRSxNQUFBLE1BQ0EsSUFBQThxRSxFQUFBZ1IsR0FBQUQsRUFBQUMsRUFBQTE5RSxPQUFBeTlFLEVBQUF6OUUsUUFBQTBzRSxFQUFBQSxFQUFBNW9FLFFBQUEsTUFBQSxLQUFBQSxRQUFBLElBQUFtTSxFQUFBbXRELFlBQUFxZ0IsRUFBQXo5RSxPQUFBMDlFLEVBQUExOUUsUUFBQTBzRSxFQUFBQSxFQUFBNW9FLFFBQUEsS0FBQSxLQUFBQSxRQUFBLElBQUFtTSxFQUFBbXRELFlBQUFzUCxFQUFBenJFLFFBQUEsS0FBQXlyRSxFQUFBenJFLFFBQUEsS0FBQXlyRSxFQUFBNW9FLFFBQUEsTUFBQSxJQUFBNG9FLEVBQUE1b0UsUUFBQSxLQUFBLElBQUE0b0UsRUFBQTVvRSxRQUFBLEdBQUF5ZCxRQUFBK3ZDLEVBQUEyUCxZQUFBaHhELEVBQUFvMEQsZ0JBQUEsS0FBQSxJQUNBLElBQUFwMEQsRUFBQXVyRSxVQUFBLElBQUE5TyxFQUFBenJFLFFBQUEsS0FBQXlyRSxFQUFBQSxFQUFBenFCLFVBQUEsRUFBQXlxQixFQUFBenJFLFFBQUEsT0FBQSxJQUFBeXJFLEVBQUF6ckUsUUFBQSxPQUFBeXJFLEVBQUFBLEVBQUF6cUIsVUFBQSxFQUFBeXFCLEVBQUF6ckUsUUFBQSxRQUNBLEtBQUFnUCxFQUFBbXRELFlBQUFoa0MsU0FBQW5wQixFQUFBdXJFLFVBQUEsSUFBQTlPLEVBQUF6ckUsUUFBQWdQLEVBQUFtdEQsWUFBQSxDQUNBLEdBQUF1Z0IsR0FBQWpSLEVBQUFyMkQsTUFBQXBHLEVBQUFtdEQsWUFBQSxHQUFBeDdELE1BQUEsR0FBQTJmLFFBQUEsU0FBQSxFQUNBLElBQUE2YixTQUFBbnRCLEVBQUF1ckUsUUFBQW1DLEVBQUE3bUUsV0FBQTlXLE9BQUEsQ0FDQSxHQUFBNDlFLEdBQUFsd0UsS0FBQXM2QyxJQUFBLEdBQUE1cUIsU0FBQW50QixFQUFBdXJFLFFBQ0E5TyxHQUFBQSxFQUFBNW9FLFFBQUF3dEQsRUFBQTJQLFlBQUFoeEQsRUFBQW10RCxZQUFBLEtBQ0FzUCxHQUFBQSxFQUFBaC9ELEtBQUF5eEMsTUFBQTl3QyxXQUFBcStELEdBQUFrUixHQUFBQSxHQUFBOW1FLFdBQUFoVCxRQUFBLElBQUFtTSxFQUFBbXRELGFBR0EsTUFBQXNQLElBRUF0VyxpQkFBQSxTQUFBM0UsRUFBQXo1QixFQUFBeThCLEVBQUFhLEVBQUFybEQsR0FDQSxHQUFBMnRELEdBQUFuTSxFQUFBNkIsZUFBQXQ3QixHQUFBNmxELEVBQUFqZ0IsRUFBQTE1QyxRQUFBalUsRUFBQW10RCxZQUFBLE9BQUEzTCxFQUFBNkIsZUFBQXQ3QixHQUFBcDJCLE1BQUFtSCxLQUFBLElBQUFrSCxFQUFBd3JFLGdCQUFBN2QsRUFBQTE1QyxRQUFBalUsRUFBQW10RCxZQUFBM0wsRUFBQTZCLGVBQUF0N0IsRUFBQSxJQUFBLE9BQUF5NUIsRUFBQTZCLGVBQUF0N0IsRUFBQSxHQUFBcDJCLE1BQUFtSCxJQUFBcXdCLFNBQUF3a0MsRUFBQTE1QyxRQUFBOFQsSUFBQXk4QixHQUFBbUosRUFBQTE1QyxRQUFBalUsRUFBQW8wRCxnQkFBQXpHLEVBQUExNUMsUUFBQWpVLEVBQUE0ckUsZUFBQUMsT0FBQWxlLEVBQUExNUMsUUFBQWpVLEVBQUE0ckUsZUFBQUUsSUFDQSxRQUFBOEIsR0FBQSxNQUFBamdCLEVBQUFoOEQsTUFBQWl6RCxXQUFBLE1BQUErSSxFQUFBaDhELE1BQUFpekQsWUFBQTVrRCxFQUFBZ3NFLFlBQUEsR0FDQTRCLEdBRUFwVyxVQUFBLFNBQUF4akUsRUFBQXV2RCxFQUFBb00sRUFBQTN2RCxHQUNBLEdBQUEyMkQsR0FBQTk5QixFQUFBNXBDLEtBQ0EsSUFBQStFLEVBQUEydkIsUUFBQSxPQUFBM3ZCLEVBQUFxd0IsU0FDQSxJQUFBZzlCLEdBQUFoOUIsUUFBQWc5QyxHQUNBMUssRUFBQTU0RCxJQUFBSyxXQUFBblAsS0FBQTZnRSxVQUFBd0IsaUJBQUFua0MsU0FBQW50QixFQUFBZ3FCLE9BQUEyc0MsRUFBQS96QyxRQUFBLFdBQ0EsTUFFQSxLQUFBeStCLEdBQUFoOUIsUUFBQXM4QyxLQUNBaEssRUFBQTU0RCxJQUFBSyxXQUFBblAsS0FBQTZnRSxVQUFBd0IsaUJBQUFua0MsU0FBQW50QixFQUFBZ3FCLE9BQUEyc0MsRUFBQS96QyxRQUFBLGVBSUFpckQsVUFDQXJxRSxPQUFBLEtBQ0E0d0QsZUFBQSxJQUNBOVMsTUFBQSxVQUNBc0IsWUFBQSxJQUNBcW9CLFdBQUEsRUFDQU0sT0FBQSxFQUNBRCxnQkFBQSxFQUNBdFMsc0JBQUEsR0FFQThVLFNBQ0F4c0IsTUFBQSxXQUVBeXNCLFNBQ0F6c0IsTUFBQSxVQUNBaXFCLE9BQUEsRUFDQXBlLFdBQUEsSUFFQTZnQixZQUNBMXNCLE1BQUEsVUFDQWlxQixPQUFBLEVBQ0FELGdCQUFBLEVBQ0FuZSxXQUFBLElBQ0F2SyxZQUFBLElBQ0Fxb0IsV0FBQSxFQUNBdDZCLElBQUEsRUFDQWp6QyxJQUFBLElBQ0Fnc0IsT0FBQSxLQUNBaWlELFlBQUEsS0FFQXRxQixLQUVBLFNBQUExeUQsRUFBQUMsRUFBQTh4RCxHQUNBLFlBQ0EsSUFBQU8sR0FBQUMsRUFBQUMsQ0FDQSxtQkFBQTUzQyxTQUFBQSxPQUFBQyxTQUNBLFNBQUE5YSxHQUNBd3lELEdBQUFSLEVBQUEsR0FBQUEsRUFBQSxRQUNBLE1BQUFTLEVBQUEsbUJBQUFGLEVBQUF2eUQsR0FBQXV5RCxFQUFBcHVELE1BQUFqRSxFQUFBc3lELEdBQUFELEtBQUF0eUQsRUFBQUMsUUFBQXV5RCxJQUNBLFNBQUF0b0IsRUFBQXdvQixHQUNBLFFBQUE0c0IsR0FBQWxpRSxFQUFBQyxHQUNBLEdBQUFraUUsSUFBQW5pRSxFQUFBbzJDLE1BQUFwMkMsR0FBQWxZLFFBQUEsS0FBQSxLQUFBQSxRQUFBLEtBQUEsS0FBQUEsUUFBQSxXQUFBLElBQUFzNkUsR0FBQW5pRSxFQUFBbTJDLE1BQUFuMkMsR0FBQW5ZLFFBQUEsS0FBQSxLQUFBQSxRQUFBLEtBQUEsS0FBQUEsUUFBQSxXQUFBLElBQUF1NkUsR0FBQXJpRSxFQUFBbzJDLE1BQUFwMkMsR0FBQTNGLE1BQUEsS0FBQSxHQUFBaW9FLEdBQUFyaUUsRUFBQW0yQyxNQUFBbjJDLEdBQUE1RixNQUFBLEtBQUEsRUFDQSxPQUFBLEtBQUFpb0UsRUFBQXI5RSxRQUFBbzlFLElBQUEsRUFBQSxJQUFBQSxFQUFBcDlFLFFBQUFxOUUsR0FBQSxFQUFBSCxFQUFBSSxjQUFBSCxHQUVBLEdBQUFJLEdBQUFsdEIsRUFBQTlpRCxVQUFBNmtELFdBQ0EsT0FBQS9CLEdBQUE5aUQsVUFBQTZrRCxZQUFBLFNBQUFqQixFQUFBSyxFQUFBeGlELEdBQ0EsUUFBQXd1RSxHQUFBQyxFQUFBQyxFQUFBQyxHQUNBRCxFQUFBQSxHQUFBLEdBQUFDLEVBQUFBLEdBQUFDLEVBQ0EsS0FBQUYsSUFBQUMsRUFBQUQsTUFDQSxLQUFBLEdBQUFHLEdBQUEsR0FBQUMsRUFBQUgsRUFBQUQsSUFBQUMsRUFBQTk5RSxFQUFBNDlFLEVBQUExK0UsT0FBQSxFQUFBYyxHQUFBLEVBQUFBLElBQUFpK0UsRUFBQUQsR0FBQTFzQixFQUFBc3NCLEVBQUE1OUUsR0FBQXN4RCxNQUFBc3NCLEVBQUE1OUUsSUFBQXNuRCxPQUFBLEVBQUEsSUFBQTIyQixFQUFBRCxPQUNBQyxFQUFBRCxHQUFBNXFFLFFBQUFrK0MsRUFBQWhLLE9BQUEsSUFBQXMyQixFQUFBeG1FLE9BQUFwWCxFQUFBLEVBQ0EsS0FBQSxHQUFBK3lELEtBQUFrckIsR0FBQUEsRUFBQWxyQixHQUFBN3pELE9BQUEsS0FBQXkrRSxFQUFBTSxFQUFBbHJCLEdBQUE3d0QsUUFBQTZ3RCxFQUFBa3JCLEdBRUEsUUFBQUMsR0FBQUQsR0FDQSxHQUFBM3NCLEdBQUEsR0FBQTZzQixJQUNBLEtBQUEsR0FBQXByQixLQUFBa3JCLEdBQUFqMkMsRUFBQXAzQixRQUFBcXRFLEVBQUFsckIsSUFBQSxJQUFBa3JCLEVBQUFsckIsR0FBQTd6RCxPQUFBaS9FLEVBQUE5MkUsS0FBQTByRCxFQUFBa3JCLEVBQUFsckIsSUFBQW9yQixFQUFBOTJFLEtBQUEwckQsRUFBQTVqRCxFQUFBOGlELFlBQUEzdEQsTUFBQTI1RSxFQUFBbHJCLEdBQUF2Z0QsS0FBQXJELEVBQUE4aUQsWUFBQTF0RCxJQUFBNEssRUFBQThqRCxpQkFBQTlqRCxFQUFBOGlELFlBQUEzdEQsT0FBQTZLLEVBQUE4aUQsWUFBQTF0RCxLQUFBNDVFLEVBQUE5MkUsS0FBQTByRCxFQUFBbXJCLEVBQUFELEVBQUFsckIsSUFDQSxPQUFBLEtBQUFvckIsRUFBQWovRSxPQUFBb3lELEdBQUE2c0IsRUFBQSxHQUFBN3NCLEdBQUFuaUQsRUFBQThpRCxZQUFBM3RELE1BQUE2NUUsRUFBQTNyRSxLQUFBckQsRUFBQThpRCxZQUFBMXRELElBQUE0SyxFQUFBOGpELGlCQUFBOWpELEVBQUE4aUQsWUFBQTN0RCxPQUFBNkssRUFBQThpRCxZQUFBMXRELElBQ0Erc0QsRUFFQSxHQUFBeXNCLEtBQ0EsT0FBQTV1RSxHQUFBaXZFLGFBQUFqdkUsRUFBQWl2RSxZQUFBanZFLEVBQUFpdkUsV0FBQWwvRSxPQUFBLE1BQUF5K0UsR0FBQXJzQixFQUFBQSxFQUFBaEssT0FBQSxFQUFBZ0ssRUFBQXB5RCxPQUFBLElBQUFxVyxNQUFBcEcsRUFBQThpRCxZQUFBMXRELElBQUE0SyxFQUFBOGpELGlCQUFBOWpELEVBQUE4aUQsWUFBQTN0RCxRQUNBZ3RELEVBQUE0c0IsRUFBQUgsSUFBQXpzQixFQUFBQSxFQUFBdHVELFFBQUEsS0FBQSxRQUFBMDZFLEVBQUF6OUUsS0FBQTdCLEtBQUFrekQsRUFBQUssRUFBQXhpRCxJQUNBcWhELEVBQUE0ZSxlQUNBaVAsZUFDQXBzQixhQUNBM3RELE1BQUEsSUFDQUMsSUFBQSxLQUVBKzVFLFlBQUEsR0FDQUYsY0FDQTlzQixLQUFBLFNBQUFuaUQsR0FDQSxNQUFBQSxHQUFBMmhELGFBQ0F5b0IsSUFBQS9vQixFQUFBOWlELFVBQUFvakQsWUFBQSxJQUNBM2hELEVBQUFpdkUsV0FBQWpuRSxLQUFBaW1FLElBRUF2cUIsWUFBQSxFQUNBcVYsYUFBQSxTQUFBM21FLEVBQUE0TixHQUNBLEdBQUFvdkUsR0FBQWg5RSxFQUFBeUIsUUFBQSxVQUFBLElBQUFBLFFBQUEsUUFBQSxHQUNBLFFBQUF1N0UsRUFBQXArRSxRQUFBZ1AsRUFBQW12RSxhQUFBLElBQUEsSUFBQUMsRUFBQXArRSxRQUFBZ1AsRUFBQW12RSxnQkFBQUMsRUFBQSxJQUFBcHZFLEVBQUFtdkUsWUFBQUMsR0FDQUEsR0FFQTFkLFNBQUEsU0FBQTRZLEVBQUE3WSxFQUFBenhELEdBQ0EsTUFBQXNxRSxHQUFBejJFLFFBQUEsVUFBQSxLQUVBc29FLFVBQUEsU0FFQTlhLEtBRUEsU0FBQTF5RCxFQUFBQyxFQUFBOHhELEdBQ0EsWUFDQSxJQUFBTyxHQUFBQyxFQUFBQyxDQUNBLG1CQUFBNTNDLFNBQUFBLE9BQUFDLFNBQ0EsU0FBQTlhLEdBQ0F3eUQsR0FBQVIsRUFBQSxHQUFBQSxFQUFBLFFBQ0EsTUFBQVMsRUFBQSxtQkFBQUYsRUFBQXZ5RCxHQUFBdXlELEVBQUFwdUQsTUFBQWpFLEVBQUFzeUQsR0FBQUQsS0FBQXR5RCxFQUFBQyxRQUFBdXlELElBQ0EsU0FBQXRvQixFQUFBd29CLEdBQ0EsTUFBQUEsR0FBQTRlLGVBQ0FvUCxPQUNBbHRCLEtBQUEsSUFDQU8sUUFBQSxFQUNBQyxPQUFBLElBQ0FGLE1BQUEsS0FDQTZzQixZQUFBLEtBQ0E5UCxVQUFBLGtOQUNBK1AsaUJBQUEsYUFDQWxnQyxXQUFBLFNBQUFrVSxFQUFBdmpELEdBQ0EsTUFBQSxJQUFBc1IsUUFBQXRSLEVBQUF5aUQsTUFBQXppRCxFQUFBMHFELE9BQUEsSUFBQSxJQUFBeDVELEtBQUFxeUQsRUFBQWxnRCxLQUFBLE1BRUFzK0MsYUFDQTZ0QixHQUNBbFMsVUFBQSxTQUFBblIsRUFBQTNLLEVBQUF6M0IsRUFBQXM3QixFQUFBcmxELEdBQ0EsUUFBQXl2RSxHQUFBL21CLEVBQUFaLEdBQ0E3NEQsS0FBQXVPLFdBQUF2TyxLQUFBeTVELFFBQUFBLElBQUEsRUFBQXo1RCxLQUFBNjRELGFBQUFBLElBQUEsRUFDQTc0RCxLQUFBazdELFlBQ0F4WixJQUFBLEVBQ0FqekMsSUFBQSxHQUNBek8sS0FBQXlnRixpQkFBQSxHQUVBLFFBQUFDLEdBQUE3MkQsRUFBQTgyRCxHQUNBLEdBQUFDLElBQUEsQ0FDQUQsS0FBQUUsR0FBQSxJQUFBQyxJQUNBLEtBQUEsR0FBQWpoQixHQUFBLEVBQUFBLEVBQUFoMkMsRUFBQXRiLFFBQUF6TixPQUFBKytELElBQUEsQ0FDQSxHQUFBa2hCLEdBQUFsM0QsRUFBQXRiLFFBQUFzeEQsRUFDQSxLQUFBLElBQUFraEIsRUFBQXRuQixRQUFBbW5CLEVBQUFGLEVBQUFLLEdBQUEsT0FBQSxLQUFBLElBQUFBLEVBQUFsb0IsYUFBQSxDQUNBLEdBQUFtb0IsR0FBQXAzQyxFQUFBemdDLFFBQUE0M0UsRUFBQWwzRCxFQUFBdGIsU0FBQTB5RSxFQUFBcDNELEVBQUF0YixRQUFBeXlFLEVBQUEsR0FBQUUsRUFBQUwsQ0FDQSxJQUFBcG5FLE1BQUFzbkUsRUFBQTdsQixXQUFBenNELEtBQUEsQ0FDQSxLQUFBc3lFLEVBQUFOLGNBQUFNLEVBQUFOLGVBQUFJLEdBQUFFLEVBQUFOLGFBQUEzL0UsT0FBQSsvRSxFQUFBLy9FLFVBQUE4L0UsRUFBQUYsRUFBQU8sR0FBQSxPQUNBTCxFQUFBQSxHQUFBRixFQUFBTyxHQUFBLE1BQUFGLEVBQUFOLGFBQUFJLEdBQ0FBLEVBQUFLLEVBQUFILEVBQUE3bEIsV0FBQXpzRCxRQUNBLENBQ0EsSUFBQSxHQUFBN00sR0FBQSxFQUFBdS9FLEVBQUFKLEVBQUE3bEIsV0FBQXpzRCxJQUFBLEVBQUE3TSxFQUFBdS9FLEtBQUFQLEVBQUFGLEVBQUFPLEdBQUEsSUFBQXIvRSxLQUNBaS9FLEVBQUFLLEVBQUEsSUFBQUgsRUFBQTdsQixXQUFBeFosSUFBQSxJQUFBcS9CLEVBQUE3bEIsV0FBQXpzRCxJQUFBLFNBRUEsUUFBQSxLQUFBc3lFLEVBQUF4eUUsUUFBQSxJQUFBLEdBQUF3MkQsR0FBQSxFQUFBQSxFQUFBZ2MsRUFBQWpnRixVQUFBOC9FLEVBQUFGLEVBQUFLLEVBQUFoYyxHQUFBNGIsSUFBQTViLFNBQUEsQ0FDQSxHQUFBcWMsRUFDQSxJQUFBLEtBQUFMLEVBQUE1aUMsT0FBQSxHQUFBLENBRUEsSUFEQWlqQyxFQUFBUCxFQUFBTyxHQUFBTCxFQUNBNTRFLEVBQUEsRUFBQUEsRUFBQTI0RSxFQUFBMzRFLElBQUFpNUUsR0FBQSxHQUNBUixJQUFBUyxFQUFBLEdBQUFoL0QsUUFBQSxLQUFBKytELEVBQUEsS0FBQXJ3RSxFQUFBMHFELE9BQUEsSUFBQSxLQUFBeDVELEtBQUErMkUsT0FDQSxLQUFBLEdBQUFyeEUsR0FBQSxFQUFBMjVFLEVBQUFQLEVBQUFqZ0YsT0FBQTZHLEVBQUEyNUUsRUFBQTM1RSxJQUFBLEdBQUEsT0FBQW81RSxFQUFBNWlDLE9BQUF4MkMsR0FBQSxDQUNBeTVFLEVBQUFQLEVBQUFPLEdBQUFBLEdBQUFMLEVBQUE3M0IsT0FBQSxFQUFBdmhELEVBQUEsSUFBQS9DLFFBQUEsTUFBQSxHQUNBLEtBQUEsR0FBQXVELEdBQUEsRUFBQUEsRUFBQTI0RSxFQUFBMzRFLElBQUFpNUUsR0FBQSxHQUNBLElBQUFDLEdBQUEsR0FBQWgvRCxRQUFBLEtBQUErK0QsRUFBQSxLQUFBcndFLEVBQUEwcUQsT0FBQSxJQUFBLEdBQ0EsSUFBQW1sQixFQUFBUyxFQUFBcC9FLEtBQUErMkUsR0FBQSxNQUVBNkgsR0FBQUUsRUFFQSxHQUFBSCxFQUFBLE1BRUEsTUFBQUQsS0FBQUUsR0FBQSxJQUFBQyxLQUFBRixFQUVBLEdBQUE1SCxHQUFBMUksRUFBQWlSLEVBQUFodkIsRUFBQStCLE9BQUF4d0QsUUFBQSs4RSxFQUFBLEdBQUF4cEIsR0FBQSxFQUFBeXBCLEVBQUEsQ0FDQSxRQUFBL3ZFLEVBQUFzdkUsYUFBQSxXQUNBLEdBQUEzOUUsR0FBQWdZLEVBQUFzMUQsRUFBQSxHQUFBd1EsR0FBQWdCLElBQ0EsS0FBQXp3RSxFQUFBc3ZFLGVBQUEzOUUsRUFBQXFPLEVBQUF3L0QsVUFBQXZxRSxLQUFBK0ssRUFBQXlpRCxRQUFBLFFBQUE5NEMsRUFBQWhZLEVBQUEsSUFBQXk3QyxPQUFBLElBQ0EsSUFBQSxJQUNBcWpDLEVBQUF2NEUsS0FBQSxHQUFBdTNFLElBQUEsR0FDQSxNQUVBLEtBQUEsSUFDQWxRLEVBQUFrUixFQUFBdmdFLE1BQUF1Z0UsRUFBQTFnRixPQUFBLEVBQUEwZ0YsRUFBQUEsRUFBQTFnRixPQUFBLEdBQUF5TixRQUFBdEYsS0FBQXFuRSxHQUFBTixFQUFBemhFLFFBQUF0RixLQUFBcW5FLEVBQ0EsTUFFQSxLQUFBLElBQ0EsSUFBQSxJQUNBLElBQUEsSUFDQSxHQUFBbVIsR0FBQSxHQUFBakIsSUFBQSxHQUFBLEdBQUEvUCxHQUFBLzFELEVBQUFBLEVBQUE5VixRQUFBLFFBQUEsS0FBQXVTLE1BQUEsS0FBQXU1RCxFQUFBajNELE1BQUFnM0QsRUFBQSxJQUFBQSxFQUFBLEdBQUF2eUMsU0FBQXV5QyxFQUFBLElBQUFFLEVBQUEsSUFBQUYsRUFBQTN2RSxPQUFBNHZFLEVBQUFqM0QsTUFBQWczRCxFQUFBLElBQUFBLEVBQUEsR0FBQXZ5QyxTQUFBdXlDLEVBQUEsR0FDQSxJQUFBZ1IsRUFBQXZtQixZQUNBeFosSUFBQWd2QixFQUNBamlFLElBQUFraUUsR0FDQTZRLEVBQUExZ0YsT0FBQSxFQUFBLENBQ0EsR0FBQXlOLEdBQUFpekUsRUFBQUEsRUFBQTFnRixPQUFBLEdBQUF5TixTQUNBN0wsRUFBQTZMLEVBQUEwUyxPQUFBdzRDLFdBQUE2VyxFQUFBLEdBQUFrUSxJQUFBLElBQUFqeUUsUUFBQXRGLEtBQUF2RyxHQUNBQSxFQUFBNHRFLEdBQUEvaEUsRUFBQXRGLEtBQUF2RyxHQUFBNkwsRUFBQXRGLEtBQUF3NEUsUUFDQS8rRSxFQUFBc3RFLEVBQUF6aEUsUUFBQTBTLE9BQUF3NEMsV0FBQTZXLEVBQUEsR0FBQWtRLElBQUEsSUFBQWp5RSxRQUFBdEYsS0FBQXZHLEdBQ0FBLEVBQUE0dEUsR0FBQU4sRUFBQXpoRSxRQUFBdEYsS0FBQXZHLEdBQUFzdEUsRUFBQXpoRSxRQUFBdEYsS0FBQXc0RSxFQUNBLE1BRUEsU0FDQUQsRUFBQTFnRixPQUFBLEVBQUEwZ0YsRUFBQUEsRUFBQTFnRixPQUFBLEdBQUF5TixRQUFBdEYsS0FBQXlSLEdBQUFzMUQsRUFBQXpoRSxRQUFBdEYsS0FBQXlSLEdBRUFzMUQsRUFBQXpoRSxRQUFBek4sT0FBQSxHQUFBaVEsRUFBQXN2RSxZQUFBcDNFLEtBQUErbUUsTUFDQXVSLEVBQUF2b0UsT0FBQThoQixFQUFBLEVBQUFvaUMsR0FBQThiLEVBQUF1SSxFQUFBbnRFLEtBQUEsR0FDQSxLQUFBLEdBQUF4UyxHQUFBLEVBQUFBLEVBQUFtUCxFQUFBc3ZFLFlBQUF2L0UsT0FBQWMsSUFBQSxDQUNBLEdBQUE4L0UsR0FBQTN3RSxFQUFBc3ZFLFlBQUF6K0UsRUFDQSxJQUFBeTFELEVBQUFxcEIsRUFBQWdCLEVBQUFBLEVBQUFqb0IsU0FBQSxNQUVBLE1BQUFwQyxJQUVBbUUsWUFBQSxPQUlBcEosS0FFQSxTQUFBMXlELEVBQUFDLEVBQUE4eEQsR0FDQSxZQUNBLElBQUFPLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUEsa0JBQUE3M0MsU0FBQSxnQkFBQUEsUUFBQUMsU0FBQSxTQUFBMVosR0FDQSxhQUFBQSxJQUNBLFNBQUFBLEdBQ0EsTUFBQUEsSUFBQSxrQkFBQXlaLFNBQUF6WixFQUFBMlgsY0FBQThCLFFBQUF6WixJQUFBeVosT0FBQWhMLFVBQUEsZUFBQXpPLEtBRUEsU0FBQXBCLEdBQ0F3eUQsR0FBQVIsRUFBQSxHQUFBQSxFQUFBLFFBQ0EsTUFBQVMsRUFBQSxtQkFBQUYsRUFBQXZ5RCxHQUFBdXlELEVBQUFwdUQsTUFBQWpFLEVBQUFzeUQsR0FBQUQsS0FBQXR5RCxFQUFBQyxRQUFBdXlELElBQ0EsU0FBQXRvQixFQUFBd29CLEdBQ0EsV0FBQSxLQUFBeG9CLEVBQUEvL0IsR0FBQWczRCxZQUFBajNCLEVBQUEvL0IsR0FBQWczRCxVQUFBLFNBQUFoM0QsRUFBQXRILEdBQ0EsR0FBQW8vRSxHQUFBMzhELEVBQUFobEIsS0FBQSxFQUNBLFFBQUEsS0FBQXVDLElBQUFBLE1BQUEsZ0JBQUFzSCxHQUFBLE9BQUFBLEdBQ0EsSUFBQSxnQkFDQSxNQUFBbWIsSUFBQUEsRUFBQTY3QyxVQUFBNzdDLEVBQUE2N0MsVUFBQXdCLGdCQUFBejRCLEVBQUE1a0IsR0FBQWxXLEtBRUEsS0FBQSxTQUNBLE1BQUE5TyxNQUFBeUMsS0FBQSxXQUNBekMsS0FBQTZnRSxXQUFBN2dFLEtBQUE2Z0UsVUFBQS96RCxVQUdBLEtBQUEsZUFDQSxNQUFBa1ksSUFBQUEsRUFBQTY3QyxVQUFBNzdDLEVBQUE2N0MsVUFBQWlPLGVBQUEsRUFFQSxLQUFBLGlCQUNBLFNBQUE5cEQsSUFBQUEsRUFBQTY3QyxZQUFBNzdDLEVBQUE2N0MsVUFBQWtPLGdCQUVBLEtBQUEsYUFDQSxPQUFBL3BELElBQUFBLEVBQUE2N0MsV0FBQTc3QyxFQUFBNjdDLFVBQUF6Z0I7Z0RBRUEsS0FBQSxjQUNBLE1BQUFwN0IsSUFBQUEsRUFBQTY3QyxVQUFBNzdDLEVBQUE2N0MsVUFBQW1PLGtCQUFBLEVBRUEsS0FBQSxXQUNBcGxDLEVBQUE1a0IsR0FBQWxXLElBQUF2TSxHQUFBeWlCLE9BQUEsS0FBQUEsRUFBQTY3QyxXQUFBajNCLEVBQUE1a0IsR0FBQTBhLGVBQUEsV0FDQSxNQUVBLEtBQUEsU0FDQSxHQUFBLGdCQUFBbjlCLEdBQUEsTUFBQXZDLE1BQUF5QyxLQUFBLFdBQ0EsT0FBQSxLQUFBekMsS0FBQTZnRSxVQUFBLE1BQUE3Z0UsTUFBQTZnRSxVQUFBNXdDLE9BQUExdEIsSUFFQSxJQUFBeWlCLE9BQUEsS0FBQUEsRUFBQTY3QyxVQUFBLE1BQUE3N0MsR0FBQTY3QyxVQUFBNXdDLE9BQUExdEIsRUFDQSxNQUVBLFNBQ0EsTUFBQUEsR0FBQTh2RCxNQUFBeG9ELEVBQUE4M0UsRUFBQSxHQUFBdnZCLEdBQUE3dkQsR0FBQXZDLEtBQUF5QyxLQUFBLFdBQ0FrL0UsRUFBQXp1QixLQUFBbHpELFlBRUEsQ0FDQSxHQUFBLGVBQUEsS0FBQTZKLEVBQUEsWUFBQXNvRCxFQUFBdG9ELElBQUEsTUFBQTgzRSxHQUFBLEdBQUF2dkIsR0FBQXZvRCxPQUNBLEtBQUFBLEVBQUFxcEQsVUFBQSxLQUFBcnBELEVBQUF3b0QsTUFBQXJ5RCxLQUFBeUMsS0FBQSxXQUNBLE9BQUEsS0FBQXpDLEtBQUE2Z0UsVUFBQSxNQUFBN2dFLE1BQUE2Z0UsVUFBQTV3QyxPQUFBcG1CLEVBQ0E4M0UsR0FBQXp1QixLQUFBbHpELFFBQ0FBLEtBQUF5QyxLQUFBLFdBQ0FrL0UsRUFBQXp1QixLQUFBbHpELE9BRUEsUUFBQSxLQUFBNkosRUFBQSxNQUFBN0osTUFBQXlDLEtBQUEsWUFDQWsvRSxFQUFBLEdBQUF2dkIsR0FBQTd2RCxJQUFBMndELEtBQUFsekQsV0FHQTRwQyxFQUFBLy9CLEdBQUFnM0QsZUMzK0ZBLFNBQUFyaEUsRUFBQUMsR0FDQSxnQkFBQUUsVUFBQSxtQkFBQUQsUUFBQUEsT0FBQUMsUUFBQUYsSUFDQSxrQkFBQStwQyxTQUFBQSxPQUFBQyxJQUFBRCxPQUFBL3BDLEdBQ0FELEVBQUFvaUYsVUFBQW5pRixLQUNBTyxLQUFBLFdBQUEsWUE0QkEsU0FBQTZoRixHQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE9BQUEsSUFBQUEsRUFDQSxHQUFBM25FLE1BQUF5bkUsRUFBQW4rQixXQUFBcytCLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxHQUFBNW5FLE1BQUEwbkUsRUFBQXArQixXQUFBcytCLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FFQUgsRUFBQW4rQixVQUFBbytCLEVBQUFwK0IsVUF5SUEsUUFBQXUrQixHQUFBcnRFLEVBQUEyWixFQUFBMnpELE9BQ0EsS0FBQUEsSUFBQUEsR0FBQSxFQUNBLElBQUFsbEQsRUFDQSxPQUFBLFlBQ0EsR0FBQS8xQixHQUFBbEgsS0FBQTZMLEVBQUEzQixTQUNBLFFBQUEreUIsR0FBQUMsYUFBQUQsR0FDQUEsRUFBQWw5QixPQUFBNlAsV0FBQSxXQUNBcXRCLEVBQUEsS0FDQWtsRCxHQUNBdHRFLEVBQUFqUixNQUFBc0QsRUFBQTJFLElBQ0EyaUIsR0FDQTJ6RCxJQUFBbGxELEdBQ0Fwb0IsRUFBQWpSLE1BQUFzRCxFQUFBMkUsSUFNQSxRQUFBdTJFLEdBQUFyOUUsR0FFQSxPQURBQSxFQUFBczlFLGFBQUF0OUUsRUFBQXU5RSxTQUNBLEVBQUEsR0FBQSxFQUdBLFFBQUEzakQsR0FBQXg5QixFQUFBdWpCLEVBQUF4QixHQUNBLElBQUEsSUFBQUEsRUFDQSxNQUFBL2hCLEdBQUFvaEYsVUFBQW40RSxJQUFBc2EsRUFDQXZqQixHQUFBb2hGLFVBQUF6MUUsT0FBQTRYLEdBRUEsUUFBQXBrQixHQUFBNkcsRUFBQXVkLEVBQUFwYSxHQUNBLEdBQUF2RixHQUFBaEYsT0FBQUgsU0FBQVUsY0FBQTZHLEVBTUEsT0FMQXVkLEdBQUFBLEdBQUEsR0FDQXBhLEVBQUFBLEdBQUEsR0FDQXZGLEVBQUEyZixVQUFBQSxNQUNBN2dCLEtBQUF5RyxJQUNBdkYsRUFBQWlFLFlBQUFzQixHQUNBdkYsRUFFQSxRQUFBeTlFLEdBQUF0MkUsR0FDQSxLQUFBQSxFQUFBbkQsWUFDQW1ELEVBQUF2TCxZQUFBdUwsRUFBQW5ELFlBRUEsUUFBQTA1RSxHQUFBdjJFLEVBQUF3MkUsR0FDQSxNQUFBQSxHQUFBeDJFLEdBQ0FBLEVBQ0FBLEVBQUF4TCxXQUNBK2hGLEVBQUF2MkUsRUFBQXhMLFdBQUFnaUYsT0FEQSxHQUlBLFFBQUFDLEdBQUFDLEdBQ0EsR0FBQUMsR0FBQXZpRixFQUFBLE1BQUEsbUJBQUF3aUYsRUFBQXhpRixFQUFBLFFBQUEsWUFBQXNpRixHQUFBRyxFQUFBemlGLEVBQUEsT0FBQSxXQUFBMGlGLEVBQUExaUYsRUFBQSxPQUFBLFlBTUEsT0FMQXdpRixHQUFBL2hGLEtBQUEsT0FDQStoRixFQUFBNzdELFFBQUEsT0FDQTQ3RCxFQUFBcGlGLFlBQUFxaUYsR0FDQUQsRUFBQXBpRixZQUFBc2lGLEdBQ0FGLEVBQUFwaUYsWUFBQXVpRixHQUNBSCxFQXNKQSxRQUFBSSxHQUFBcitCLEVBQUFzK0IsR0FxQkEsUUFBQUMsS0FDQTUyRSxHQUFBNjJFLE9BQ0FDLGVBQUEsU0FBQUMsRUFBQUMsR0FHQSxXQUZBLEtBQUFELElBQUFBLEVBQUEvMkUsR0FBQWkzRSxrQkFDQSxLQUFBRCxJQUFBQSxFQUFBaDNFLEdBQUFrM0UsYUFDQSxJQUFBSCxJQUFBQyxFQUFBLEdBQUEsR0FBQUEsRUFBQSxLQUFBLEdBQUFBLEVBQUEsS0FBQSxHQUNBLEdBQ0FoM0UsR0FBQW0zRSxLQUFBQyxZQUFBTCxLQWlDQSxRQUFBTSxHQUFBLzVFLEdBQ0EsTUFBQUEsR0FBQW8vQixLQUFBMThCLElBRUEsUUFBQXMzRSxHQUFBOStFLEdBQ0EsR0FBQXdILEdBQUF1M0UsT0FBQUMsWUFBQSxJQUFBeDNFLEdBQUF5M0UsY0FBQWxqRixPQUFBLENBQ0EsR0FBQW1qRixHQUFBMTNFLEdBQUF1M0UsT0FBQUcsT0FDQTEzRSxJQUFBMjNFLFNBQUEsR0FBQTdwRSxPQUFBNG5FLFNBQUFnQyxFQUFBQSxFQUFBRSxXQUFBNTNFLEdBQUF1M0UsT0FBQU0sWUFBQUgsRUFBQUEsRUFBQUksYUFBQTkzRSxHQUFBdTNFLE9BQUFRLGNBQUFMLEdBQUExM0UsR0FBQXUzRSxPQUFBUyxjQUVBTixFQUFBTyxhQURBajRFLEdBQUF1M0UsT0FBQVcsaUJBQ0EsR0FDQUMsSUFDQUMsS0FFQUMsR0FBQTcvRSxHQUNBLElBQUF3SCxHQUFBeTNFLGNBQUFsakYsVUFFQXlMLEdBQUFzNEUsZ0JBQ0EsVUFBQTkvRSxFQUFBaEUsTUFDQWdFLEVBQUE0USxPQUFBeFMsTUFBQXJDLFFBQUEsR0FDQTRqRixJQUNBQyxNQUdBLzBFLFdBQUEsV0FDQTgwRSxJQUNBQyxNQUNBLE1BR0EsUUFBQUcsR0FBQUMsRUFBQUMsR0FDQSxNQUFBRCxHQUFBLEdBQUEsR0FBQUUsRUFBQSxPQUFBRCxHQUVBLFFBQUFFLEdBQUFILEdBQ0EsT0FBQUEsRUFBQSxJQUNBLElBQUEsR0FDQSxJQUFBLElBQ0EsTUFBQSxHQUNBLFNBQ0EsTUFBQUEsR0FBQSxJQUdBLFFBQUFMLEtBQ0EsT0FBQTdnRixLQUFBMEksR0FBQTQ0RSxpQkFBQXRoRixLQUFBMEksR0FBQTY0RSxjQUFBLENBRUEsR0FBQUMsSUFBQW5uRCxTQUFBM3hCLEdBQUE0NEUsWUFBQWhpRixNQUFBVyxPQUFBLEdBQUEsS0FBQSxHQUFBLEdBQUF3aEYsR0FBQXBuRCxTQUFBM3hCLEdBQUE2NEUsY0FBQWppRixNQUFBLEtBQUEsR0FBQSxHQUFBb2lGLE1BQUExaEYsS0FBQTBJLEdBQUFpNUUsZUFDQXRuRCxTQUFBM3hCLEdBQUFpNUUsY0FBQXJpRixNQUFBLEtBQUEsR0FBQSxHQUNBLE1BQ0FVLEtBQUEwSSxHQUFBeTRFLE9BQ0FLLEVBQUFQLEVBQUFPLEVBQUE5NEUsR0FBQXk0RSxLQUFBaDhFLGNBQ0F1RCxHQUFBdTNFLE9BQUFHLFNBQ0ExM0UsR0FBQXM0RSxnQkFDQXQ0RSxHQUFBazVFLHVCQUNBLElBQUE1RCxFQUFBdDFFLEdBQUFrNUUsc0JBQUFsNUUsR0FBQXUzRSxPQUFBRyxXQUNBb0IsRUFBQTcyRSxLQUFBQyxJQUFBNDJFLEVBQUE5NEUsR0FBQXUzRSxPQUFBRyxRQUFBRSxlQUNBNTNFLEdBQUF1M0UsT0FBQUcsUUFBQUUsYUFDQW1CLEVBQUE5MkUsS0FBQUMsSUFBQTYyRSxFQUFBLzRFLEdBQUF1M0UsT0FBQUcsUUFBQUksZUFFQTkzRSxHQUFBdTNFLE9BQUE0QixTQUNBbjVFLEdBQUFvNUUsZ0JBQ0FwNUUsR0FBQWs1RSx1QkFDQSxJQUFBNUQsRUFBQXQxRSxHQUFBazVFLHNCQUFBbDVFLEdBQUF1M0UsT0FBQTRCLFdBQ0FMLEVBQUE3MkUsS0FBQWt6QyxJQUFBMmpDLEVBQUE5NEUsR0FBQXUzRSxPQUFBNEIsUUFBQXZCLGVBQ0E1M0UsR0FBQXUzRSxPQUFBNEIsUUFBQXZCLGFBQ0FtQixFQUFBOTJFLEtBQUFrekMsSUFBQTRqQyxFQUFBLzRFLEdBQUF1M0UsT0FBQTRCLFFBQUFyQixlQUVBcEMsRUFBQW9ELEVBQUFDLEVBQUFDLElBRUEsUUFBQUssR0FBQUMsR0FDQSxHQUFBL0ssR0FBQStLLEdBQUF0NUUsR0FBQWs1RSxxQkFDQTNLLElBQ0FtSCxFQUFBbkgsRUFBQXFKLFdBQUFySixFQUFBdUosYUFBQXZKLEVBQUEwSixjQUVBLFFBQUF2QyxHQUFBb0QsRUFBQUMsRUFBQUMsT0FDQTFoRixLQUFBMEksR0FBQWs1RSx1QkFDQWw1RSxHQUFBazVFLHNCQUFBeEQsU0FBQW9ELEVBQUEsR0FBQUMsRUFBQUMsR0FBQSxFQUFBLEdBRUFoNUUsR0FBQTQ0RSxhQUFBNTRFLEdBQUE2NEUsZ0JBQUE3NEUsR0FBQTJ2QyxXQUVBM3ZDLEdBQUE0NEUsWUFBQWhpRixNQUFBMmlGLEVBQUF2NUUsR0FBQXUzRSxPQUFBaUMsVUFFQVYsR0FEQSxHQUFBQSxHQUFBLEdBQUEsR0FBQUosRUFBQUksRUFBQSxJQUFBLElBRUE5NEUsR0FBQTY0RSxjQUFBamlGLE1BQUEyaUYsRUFBQVIsT0FDQXpoRixLQUFBMEksR0FBQXk0RSxPQUNBejRFLEdBQUF5NEUsS0FBQWg4RSxZQUFBcThFLEdBQUEsR0FBQSxLQUFBLFVBQ0F4aEYsS0FBQTBJLEdBQUFpNUUsZ0JBQ0FqNUUsR0FBQWk1RSxjQUFBcmlGLE1BQUEyaUYsRUFBQVAsS0FFQSxRQUFBUyxHQUFBaDhFLEdBQ0EsR0FBQWt0RSxHQUFBaDVDLFNBQUFsMEIsRUFBQTJMLE9BQUF4UyxRQUFBNkcsRUFBQWk4RSxPQUFBLEVBQ0EsS0FBQS9PLEVBQUF0L0QsV0FBQTlXLFFBQUEsVUFBQWtKLEVBQUFyRixNQUNBNEgsR0FBQTI1RSxtQkFBQXR5RCxPQUNBLFFBQUEzeEIsS0FBQWkxRSxFQUFBdC9ELGFBQ0F1dUUsR0FBQWpQLElBR0EsUUFBQWp1QyxHQUFBMmIsRUFBQTU2QyxFQUFBMlMsR0FDQSxNQUFBM1MsYUFBQXVJLE9BQ0F2SSxFQUFBMnpDLFFBQUEsU0FBQW9wQixHQUFBLE1BQUE5OUIsR0FBQTJiLEVBQUFtaUIsRUFBQXBxRCxLQUNBaW9DLFlBQUFyeUMsT0FDQXF5QyxFQUFBakgsUUFBQSxTQUFBbGhDLEdBQUEsTUFBQXdzQixHQUFBeHNCLEVBQUF6UyxFQUFBMlMsTUFDQWlvQyxFQUFBcGdDLGlCQUFBeGEsRUFBQTJTLE9BQ0FwUSxJQUFBNjVFLFVBQUFuOUUsTUFBQTI3QyxRQUFBQSxFQUFBNTZDLE1BQUFBLEVBQUEyUyxRQUFBQSxLQUVBLFFBQUEwcEUsR0FBQTFwRSxHQUNBLE1BQUEsVUFBQTZwQixHQUNBLElBQUFBLEVBQUFuMkIsT0FBQXNNLEVBQUE2cEIsSUFHQSxRQUFBOC9DLEtBQ0FDLEdBQUEsWUFFQSxRQUFBQyxLQVFBLEdBUEFqNkUsR0FBQXUzRSxPQUFBNzdFLE9BQ0EsT0FBQSxRQUFBLFNBQUEsU0FBQTAxQyxRQUFBLFNBQUFuWCxHQUNBajBCLE1BQUFqRCxVQUFBcXVDLFFBQUE5N0MsS0FBQTBLLEdBQUFxNEMsUUFBQXQ5QyxpQkFBQSxTQUFBay9CLEVBQUEsS0FBQSxTQUFBL3BCLEdBQ0EsTUFBQXdzQixHQUFBeHNCLEVBQUEsUUFBQWxRLEdBQUFpNkIsUUFJQWo2QixHQUFBMnZDLFNBRUEsV0FEQXVxQyxLQUdBLElBQUFDLEdBQUF4RSxFQUFBeUUsR0FBQSxHQThCQSxJQTdCQXA2RSxHQUFBcTZFLGlCQUFBMUUsRUFBQW9FLEVBQUEsS0FDQSxVQUFBLzVFLEdBQUF1M0UsT0FBQS81QyxNQUFBeDlCLEdBQUFzNkUsZUFDQTU5QyxFQUFBMThCLEdBQUFzNkUsY0FBQSxZQUFBLFNBQUE5aEYsR0FDQSxNQUFBK2hGLElBQUEvaEYsRUFBQTRRLFVBRUFzekIsRUFBQWxwQyxPQUFBSCxTQUFBNkcsS0FBQSxVQUFBOGhFLElBQ0FoOEQsR0FBQXUzRSxPQUFBaUQsUUFDQTk5QyxFQUFBMThCLEdBQUF5NkUsT0FBQSxVQUFBemUsSUFDQWg4RCxHQUFBdTNFLE9BQUFtRCxRQUFBMTZFLEdBQUF1M0UsT0FBQWlELFFBQ0E5OUMsRUFBQWxwQyxPQUFBLFNBQUEybUYsT0FDQTdpRixLQUFBOUQsT0FBQTRwRCxjQUNBMWdCLEVBQUFscEMsT0FBQUgsU0FBQTZHLEtBQUEsYUFBQXlnRixHQUNBaitDLEVBQUFscEMsT0FBQUgsU0FBQTZHLEtBQUEsWUFBQTQvRSxFQUFBYSxJQUNBaitDLEVBQUExOEIsR0FBQXk2RSxPQUFBLE9BQUFFLElBQ0EsSUFBQTM2RSxHQUFBdTNFLE9BQUFxRCxhQUNBbCtDLEVBQUExOEIsR0FBQXk2RSxPQUFBLFFBQUF6NkUsR0FBQW81QixNQUNBc0QsRUFBQTE4QixHQUFBeTZFLE9BQUEsWUFBQVgsRUFBQTk1RSxHQUFBbzVCLFlBRUE5aEMsS0FBQTBJLEdBQUFzNkUsZ0JBQ0F0NkUsR0FBQTY2RSxTQUFBNWlFLGlCQUFBLFFBQUEsU0FBQXpmLEdBQUEsTUFBQUEsR0FBQSt0QixtQkFDQW1XLEVBQUExOEIsR0FBQTY2RSxTQUFBLFFBQUFsRixFQUFBbUYsR0FBQSxLQUNBcCtDLEVBQUExOEIsR0FBQTY2RSxTQUFBLFlBQUFmLEVBQUFpQixLQUNBcitDLEVBQUExOEIsR0FBQTY2RSxVQUFBLFFBQUEsYUFBQXBCLEdBQ0EvOEMsRUFBQTE4QixHQUFBczZFLGNBQUEsWUFBQVIsRUFBQWtCLEtBQ0FoN0UsR0FBQXUzRSxPQUFBOW5ELFVBQ0FpTixFQUFBMThCLEdBQUFzNkUsZUFBQSxxQkFBQSxnQkFBQVcsR0FDQXYrQyxFQUFBMThCLEdBQUE2NkUsVUFBQSxxQkFBQSxnQkFBQUssU0FHQTVqRixLQUFBMEksR0FBQW03RSxtQkFDQTdqRixLQUFBMEksR0FBQTY0RSxtQkFDQXZoRixLQUFBMEksR0FBQTQ0RSxZQUFBLENBQ0EsR0FBQXdDLEdBQUEsU0FBQTVpRixHQUNBLE1BQUFBLEdBQUE0USxPQUFBc0csU0FFQWd0QixHQUFBMThCLEdBQUFtN0UsZUFBQSxRQUFBLFFBQUEsYUFBQTdELEdBQ0E1NkMsRUFBQTE4QixHQUFBbTdFLGNBQUEsWUFBQXJCLEVBQUF1QixJQUNBMytDLEVBQUExOEIsR0FBQW03RSxlQUFBLFFBQUEsYUFBQW43RSxHQUFBcTZFLGtCQUNBMzlDLEVBQUExOEIsR0FBQW03RSxjQUFBLFFBQUFwQixHQUNBcjlDLEdBQUExOEIsR0FBQTQ0RSxZQUFBNTRFLEdBQUE2NEUsZ0JBQUEsUUFBQSxTQUFBdUMsT0FDQTlqRixLQUFBMEksR0FBQWk1RSxlQUNBdjhDLEVBQUExOEIsR0FBQWk1RSxjQUFBLFFBQUEsV0FBQSxNQUFBajVFLElBQUFpNUUsZUFBQWo1RSxHQUFBaTVFLGNBQUF2cEUsZUFDQXBZLEtBQUEwSSxHQUFBeTRFLE1BQ0EvN0MsRUFBQTE4QixHQUFBeTRFLEtBQUEsWUFBQXFCLEVBQUEsU0FBQXRoRixHQUNBOCtFLEVBQUE5K0UsR0FDQXVoRixRQUtBLFFBQUF1QixLQUNBdDdFLEdBQUF1N0UsZUFBQW5xQyxRQUFBLFNBQUFnVCxHQUFBLE1BQUFBLE9BQ0Fwa0QsR0FBQXU3RSxrQkFFQSxRQUFBTixHQUFBemlGLEdBQ0EsR0FBQXdILEdBQUFzNkUsZUFBQXQ2RSxHQUFBczZFLGNBQUEvOUUsV0FBQWhJLE9BQUEsRUFDQSxPQUFBaUUsRUFBQWdqRixlQUNBLElBQUEsY0FDQXg3RSxHQUFBczZFLGNBQUFoK0UsV0FDQTBELEdBQUFzNkUsY0FBQWgrRSxVQUFBMDVFLFVBQUF6MUUsT0FBQSxnQkFDQVAsR0FBQXM2RSxjQUFBbG1GLFlBQUE0TCxHQUFBczZFLGNBQ0E5OUUsWUFDQXdELEdBQUF5N0UsS0FBQXo3RSxHQUFBczZFLGNBQUE5OUUsV0FDQTgrRSxHQUNBLE1BQ0EsS0FBQSxlQUNBdDdFLEdBQUFzNkUsY0FBQTk5RSxZQUNBd0QsR0FBQXM2RSxjQUFBOTlFLFdBQUF3NUUsVUFBQXoxRSxPQUFBLGlCQUNBUCxHQUFBczZFLGNBQUFsbUYsWUFBQTRMLEdBQUFzNkUsY0FDQWgrRSxXQUNBMEQsR0FBQXk3RSxLQUFBejdFLEdBQUFzNkUsY0FBQTk5RSxXQUNBOCtFLEtBT0EsUUFBQUosR0FBQTFpRixHQUNBLE9BQUFBLEVBQUFnakYsZUFDQSxJQUFBLGlCQUNBLElBQUEsa0JBQ0F4N0UsR0FBQTA3RSx1QkFBQTFGLFVBQUF6MUUsT0FBQSxnQkFDQVAsR0FBQTA3RSx1QkFBQTFGLFVBQUF6MUUsT0FBQSxnQkFFQSxLQURBLEdBQUFvN0UsR0FBQTM3RSxHQUFBMDdFLHVCQUNBQyxFQUFBaHJFLGFBQ0EsT0FBQWpiLEtBQUFpbUYsRUFBQWhyRSxZQUFBd0gsWUFDQW5ZLEdBQUE2NkUsU0FBQXptRixZQUFBdW5GLEVBQUFockUsWUFDQSxNQUFBZ3JFLEVBQUFDLGlCQUNBLE9BQUFsbUYsS0FBQWltRixFQUFBQyxnQkFBQXpqRSxZQUNBblksR0FBQTY2RSxTQUFBem1GLFlBQUF1bkYsRUFBQUMsZ0JBQ0E1N0UsSUFBQTY3RSxnQkFBQXZrRixJQUlBLFFBQUF3a0YsR0FBQUMsR0FDQSxHQUFBeHFDLE9BQUFqNkMsS0FBQXlrRixFQUNBQyxHQUFBRCxHQUNBLzdFLEdBQUFrNUUsd0JBQ0FsNUUsR0FBQXUzRSxPQUFBRyxTQUFBMTNFLEdBQUF1M0UsT0FBQUcsUUFBQTEzRSxHQUFBMkQsSUFDQTNELEdBQUF1M0UsT0FBQUcsUUFDQTEzRSxHQUFBdTNFLE9BQUE0QixTQUFBbjVFLEdBQUF1M0UsT0FBQTRCLFFBQUFuNUUsR0FBQTJELElBQ0EzRCxHQUFBdTNFLE9BQUE0QixRQUNBbjVFLEdBQUEyRCxJQUNBLFNBQ0FyTSxLQUFBaTZDLElBQ0F2eEMsR0FBQWszRSxZQUFBM2xDLEVBQUF1NkIsY0FDQTlyRSxHQUFBaTNFLGFBQUExbEMsRUFBQTg2QixZQUdBLE1BQUE3ekUsR0FDQUEsRUFBQXFwQixRQUFBLDBCQUFBMHZCLEVBQ0F2eEMsR0FBQXUzRSxPQUFBMEUsYUFBQXpqRixHQUVBd0gsR0FBQWs4RSxTQUVBLFFBQUFiLEdBQUE3aUYsSUFDQUEsRUFBQTRRLE9BQUErTyxVQUFBM2lCLFFBQUEsVUFDQTJtRixFQUFBM2pGLEVBQUFBLEVBQUE0USxPQUFBNHNFLFVBQUFyNkUsU0FBQSxXQUFBLEdBQUEsR0FFQSxRQUFBd2dGLEdBQUEzakYsRUFBQWtoRixFQUFBMEMsR0FDQSxHQUFBaHpFLEdBQUE1USxHQUFBQSxFQUFBNFEsT0FDQXFQLEVBQUEyakUsR0FDQWh6RSxHQUFBQSxFQUFBalYsWUFBQWlWLEVBQUFqVixXQUFBcUksV0FDQWlCLEVBQUE0K0UsR0FBQSxZQUNBNStFLEdBQUFpOEUsTUFBQUEsRUFDQWpoRSxHQUFBQSxFQUFBNmpFLGNBQUE3K0UsR0FFQSxRQUFBOCtFLEtBQ0EsR0FBQTFnRixHQUFBckksT0FBQUgsU0FBQXlJLHdCQUdBLElBRkFrRSxHQUFBdzhFLGtCQUFBem9GLEVBQUEsTUFBQSxzQkFDQWlNLEdBQUF3OEUsa0JBQUF2Z0UsVUFBQSxHQUNBamMsR0FBQXUzRSxPQUFBQyxXQUFBLENBR0EsR0FGQTM3RSxFQUFBM0gsWUFBQXVvRixLQUNBejhFLEdBQUEwOEUsZUFBQTNvRixFQUFBLE1BQUEsNEJBQ0FpTSxHQUFBdTNFLE9BQUFvRixZQUFBLENBQ0EsR0FBQUMsR0FBQUMsSUFBQUMsRUFBQUYsRUFBQUUsWUFBQUgsRUFBQUMsRUFBQUQsV0FDQTM4RSxJQUFBMDhFLGVBQUF4b0YsWUFBQTRvRixHQUNBOThFLEdBQUEyOEUsWUFBQUEsRUFDQTM4RSxHQUFBODhFLFlBQUFBLEVBRUE5OEUsR0FBQSs4RSxXQUFBaHBGLEVBQUEsTUFBQSx3QkFDQWlNLEdBQUErOEUsV0FBQTdvRixZQUFBOG9GLEtBQ0FoOUUsR0FBQXM2RSxnQkFDQXQ2RSxHQUFBczZFLGNBQUF2bUYsRUFBQSxNQUFBLGtCQUNBaU0sR0FBQXM2RSxjQUFBcitELFVBQUEsR0FFQWdoRSxJQUNBajlFLEdBQUErOEUsV0FBQTdvRixZQUFBOEwsR0FBQXM2RSxlQUNBdDZFLEdBQUEwOEUsZUFBQXhvRixZQUFBOEwsR0FBQSs4RSxZQUNBbGhGLEVBQUEzSCxZQUFBOEwsR0FBQTA4RSxnQkFFQTE4RSxHQUFBdTNFLE9BQUEyRixZQUNBcmhGLEVBQUEzSCxZQUFBaXBGLEtBRUEvcUQsRUFBQXB5QixHQUFBdzhFLGtCQUFBLFlBQUEsVUFBQXg4RSxHQUFBdTNFLE9BQUEvNUMsTUFDQXBMLEVBQUFweUIsR0FBQXc4RSxrQkFBQSxVQUFBeDhFLEdBQUF1M0UsT0FBQTluRCxTQUNBenZCLEdBQUF3OEUsa0JBQUF0b0YsWUFBQTJILEVBQ0EsSUFBQXVoRixPQUFBOWxGLEtBQUEwSSxHQUFBdTNFLE9BQUF6c0QsVUFBQTlxQixHQUFBdTNFLE9BQUF6c0QsU0FBQXYxQixRQUNBLEtBQUF5SyxHQUFBdTNFLE9BQUFtRCxRQUFBMTZFLEdBQUF1M0UsT0FBQWlELFVBQ0F4NkUsR0FBQXc4RSxrQkFBQXhHLFVBQUFuNEUsSUFBQW1DLEdBQUF1M0UsT0FBQW1ELE9BQUEsU0FBQSxVQUNBMTZFLEdBQUF1M0UsT0FBQW1ELFVBQ0EwQyxHQUFBcDlFLEdBQUFxNEMsUUFBQWxrRCxXQUNBNkwsR0FBQXE0QyxRQUFBbGtELFdBQUFzMkIsYUFBQXpxQixHQUFBdzhFLGtCQUFBeDhFLEdBQUF5NkUsT0FBQTlwRSxpQkFDQXJaLEtBQUEwSSxHQUFBdTNFLE9BQUF6c0QsVUFDQTlxQixHQUFBdTNFLE9BQUF6c0QsU0FBQTUyQixZQUFBOEwsR0FBQXc4RSxvQkFFQXg4RSxHQUFBdTNFLE9BQUFpRCxRQUFBLENBQ0EsR0FBQWxFLEdBQUF2aUYsRUFBQSxNQUFBLG9CQUNBaU0sSUFBQXE0QyxRQUFBbGtELFlBQ0E2TCxHQUFBcTRDLFFBQUFsa0QsV0FBQXMyQixhQUFBNnJELEVBQUF0MkUsR0FBQXE0QyxTQUNBaStCLEVBQUFwaUYsWUFBQThMLEdBQUFxNEMsU0FDQXI0QyxHQUFBcTlFLFVBQ0EvRyxFQUFBcGlGLFlBQUE4TCxHQUFBcTlFLFVBQ0EvRyxFQUFBcGlGLFlBQUE4TCxHQUFBdzhFLG1CQUdBeDhFLEdBQUF1M0UsT0FBQWlELFFBQUF4NkUsR0FBQXUzRSxPQUFBbUQsYUFDQXBqRixLQUFBMEksR0FBQXUzRSxPQUFBenNELFNBQ0E5cUIsR0FBQXUzRSxPQUFBenNELFNBQ0F0M0IsT0FBQUgsU0FBQTZHLE1BQUFoRyxZQUFBOEwsR0FBQXc4RSxtQkFFQSxRQUFBYyxHQUFBbmxFLEVBQUFvMkQsRUFBQWdQLEVBQUFsb0YsR0FDQSxHQUFBbW9GLEdBQUFDLEdBQUFsUCxHQUFBLEdBQUFtUCxFQUFBM3BGLEVBQUEsT0FBQSxpQkFBQW9rQixFQUFBbzJELEVBQUEzRCxVQUFBdi9ELFdBbURBLE9BbERBcXlFLEdBQUFwRSxRQUFBL0ssRUFDQW1QLEVBQUFDLEdBQUF0b0YsRUFDQXFvRixFQUFBdHVFLGFBQUEsYUFBQXBQLEdBQUE0OUUsV0FBQXJQLEVBQUF2dUUsR0FBQXUzRSxPQUFBc0csaUJBQ0EsSUFBQXZJLEVBQUEvRyxFQUFBdnVFLEdBQUEyRCxPQUNBM0QsR0FBQTg5RSxjQUFBSixFQUNBQSxFQUFBMUgsVUFBQW40RSxJQUFBLFVBRUEyL0UsR0FDQUUsRUFBQXpoRSxVQUFBLEVBQ0E4aEUsR0FBQXhQLEtBQ0FtUCxFQUFBMUgsVUFBQW40RSxJQUFBLFlBQ0FtQyxHQUFBZytFLGlCQUFBTixFQUNBLFVBQUExOUUsR0FBQXUzRSxPQUFBLzVDLE9BQ0FwTCxFQUFBc3JELEVBQUEsYUFBQTE5RSxHQUFBeTNFLGNBQUEsSUFDQSxJQUFBbkMsRUFBQS9HLEVBQUF2dUUsR0FBQXkzRSxjQUFBLEtBQ0FybEQsRUFBQXNyRCxFQUFBLFdBQUExOUUsR0FBQXkzRSxjQUFBLElBQ0EsSUFBQW5DLEVBQUEvRyxFQUFBdnVFLEdBQUF5M0UsY0FBQSxTQUtBaUcsRUFBQTFILFVBQUFuNEUsSUFBQSxZQUNBbUMsR0FBQXkzRSxjQUFBLElBQ0F6M0UsR0FBQWkrRSxjQUNBMVAsRUFBQXZ1RSxHQUFBaStFLGNBQ0ExUCxFQUFBdnVFLEdBQUF5M0UsY0FBQSxHQUNBejNFLEdBQUFpK0UsYUFBQTFQLEVBQ0F2dUUsR0FBQXkzRSxjQUFBLElBQ0F6M0UsR0FBQWsrRSxjQUNBM1AsRUFBQXZ1RSxHQUFBaytFLGNBQ0EzUCxFQUFBdnVFLEdBQUF5M0UsY0FBQSxLQUNBejNFLEdBQUFrK0UsYUFBQTNQLElBRUEsVUFBQXZ1RSxHQUFBdTNFLE9BQUEvNUMsT0FDQTJnRCxHQUFBNVAsS0FBQXdQLEdBQUF4UCxJQUNBbVAsRUFBQTFILFVBQUFuNEUsSUFBQSxXQUNBLElBQUFtQyxHQUFBeTNFLGNBQUFsakYsWUFDQStDLEtBQUEwSSxHQUFBaStFLGtCQUNBM21GLEtBQUEwSSxHQUFBaytFLGVBQ0EzUCxFQUFBdnVFLEdBQUFpK0UsY0FBQTFQLEVBQUF2dUUsR0FBQWsrRSxlQUNBUixFQUFBMUgsVUFBQW40RSxJQUFBLGVBRUFtQyxHQUFBMjhFLGFBQ0EsaUJBQUF4a0UsR0FDQW9sRSxFQUFBLEdBQUEsR0FDQXY5RSxHQUFBMjhFLFlBQUF5QixtQkFBQSxZQUFBLHdDQUNBcCtFLEdBQUF1M0UsT0FBQThHLFFBQUE5UCxHQUNBLFdBRUF5TCxHQUFBLGNBQUEwRCxHQUNBQSxFQUVBLFFBQUFZLEdBQUF4NkMsRUFBQTdJLEdBQ0EsR0FBQXNqRCxHQUFBejZDLEVBQUE3SSxHQUFBLEVBQUF1akQsTUFBQWxuRixLQUFBd3NDLEVBQ0E5akMsR0FBQXk3RSxLQUFBbC9FLFdBQUFnaUYsR0FDQXYrRSxHQUFBZytFLGtCQUNBaCtFLEdBQUE4OUUsZUFDQTk5RSxHQUFBeTdFLEtBQUFsL0UsV0FBQSxHQUNBdWYsRUFBQSxXQUNBMGlFLEVBQUFBLEdBQUF4K0UsR0FBQXk3RSxLQUFBbC9FLFdBQUFnaUYsR0FDQUMsRUFBQTFpRSxRQUNBLFVBQUE5YixHQUFBdTNFLE9BQUEvNUMsTUFDQSs4QyxHQUFBaUUsR0FFQSxRQUFBbG5GLEtBQUFrbkYsR0FBQSxJQUFBdmpELEVBU0EsTUFSQUEsR0FBQSxHQUNBajdCLEdBQUF5K0UsWUFBQSxHQUFBLE1BQUFubkYsSUFBQSxHQUNBaW5GLEdBQUEsSUFFQXRqRCxFQUFBLElBQ0FqN0IsR0FBQXkrRSxhQUFBLEdBQUEsTUFBQW5uRixJQUFBLEdBQ0FpbkYsR0FBQSxJQUVBRyxFQUFBNWlFLEVBRUFBLEtBRUEsUUFBQTRpRSxHQUFBcGhGLElBQ0EsSUFBQTBDLEdBQUF1M0UsT0FBQTluRCxRQUFBenZCLEdBQUF1N0UsZUFBQTcrRSxLQUFBWSxHQUFBQSxJQUVBLFFBQUEyL0UsR0FBQXZELEdBQ0EsT0FBQXBpRixLQUFBMEksR0FBQXM2RSxjQUFBLENBR0EsR0FBQXFFLElBQUEsR0FBQTd3RSxNQUFBOU4sR0FBQWszRSxZQUFBbDNFLEdBQUFpM0UsYUFBQSxHQUFBMkgsU0FDQTUrRSxHQUFBbTNFLEtBQUEwSCxlQUNBLEdBQ0EsRUFBQUMsRUFBQSxVQUFBOStFLEdBQUF1M0UsT0FBQS81QyxLQUNBdWhELEVBQUEvK0UsR0FBQTYyRSxNQUFBQyxnQkFBQTkyRSxHQUFBaTNFLGFBQUEsRUFBQSxJQUFBLElBQ0FHLEVBQUFwM0UsR0FBQTYyRSxNQUFBQyxpQkFBQTJFLEVBQUFqb0YsT0FBQUgsU0FBQXlJLHlCQUNBeWhGLEVBQUF3QixFQUFBLEVBQUFKLEVBQUFLLEVBQUEsQ0FPQSxLQU5BaC9FLEdBQUEyOEUsYUFBQTM4RSxHQUFBMjhFLFlBQUFuZ0YsYUFDQXdELEdBQUEyOEUsWUFBQWxnRixZQUFBLElBQ0FxaUYsSUFDQTkrRSxHQUFBaStFLGFBQUEsR0FBQW53RSxNQUFBOU4sR0FBQWszRSxZQUFBbDNFLEdBQUFpM0UsYUFBQSxFQUFBc0csR0FDQXY5RSxHQUFBaytFLGFBQUEsR0FBQXB3RSxNQUFBOU4sR0FBQWszRSxZQUFBbDNFLEdBQUFpM0UsYUFBQSxHQUFBLEdBQUEwSCxHQUFBdkgsSUFFQW1HLEdBQUF3QixFQUFBeEIsSUFBQXlCLElBQ0F2RCxFQUFBdm5GLFlBQUFvcEYsRUFBQSxlQUFBLEdBQUF4dkUsTUFBQTlOLEdBQUFrM0UsWUFBQWwzRSxHQUFBaTNFLGFBQUEsRUFBQXNHLEdBQUFBLEVBQUF5QixHQUVBLEtBQUF6QixFQUFBLEVBQUFBLEdBQUFuRyxFQUFBbUcsSUFBQXlCLElBQ0F2RCxFQUFBdm5GLFlBQUFvcEYsRUFBQSxHQUFBLEdBQUF4dkUsTUFBQTlOLEdBQUFrM0UsWUFBQWwzRSxHQUFBaTNFLGFBQUFzRyxHQUFBQSxFQUFBeUIsR0FFQSxLQUFBLEdBQUFDLEdBQUE3SCxFQUFBLEVBQUE2SCxHQUFBLEdBQUFOLEVBQUFNLElBQUFELElBQ0F2RCxFQUFBdm5GLFlBQUFvcEYsRUFBQSxlQUFBLEdBQUF4dkUsTUFBQTlOLEdBQUFrM0UsWUFBQWwzRSxHQUFBaTNFLGFBQUEsRUFBQWdJLEVBQUE3SCxHQUFBNkgsRUFBQUQsR0FFQUYsSUFBQSxJQUFBOStFLEdBQUF5M0UsY0FBQWxqRixRQUFBa25GLEVBQUFsL0UsV0FBQSxJQUNBeUQsR0FBQWsvRSxvQkFDQWwvRSxHQUFBay9FLHVCQUNBbC9FLEdBQUFpK0UsY0FDQWorRSxHQUFBaStFLGFBQUF4QyxFQUFBbC9FLFdBQUEsR0FBQSs4RSxRQUNBdDVFLEdBQUFtL0Usb0JBQ0FuL0UsR0FBQW0vRSx1QkFDQW4vRSxHQUFBaytFLGNBQ0FsK0UsR0FBQWsrRSxhQUNBLEdBQUFwd0UsTUFBQTlOLEdBQUFrM0UsWUFBQWwzRSxHQUFBaTNFLGFBQUEsRUFBQSxJQUdBbUksSUFDQSxJQUFBQyxHQUFBdHJGLEVBQUEsTUFBQSxlQUVBLElBREFzckYsRUFBQW5yRixZQUFBdW5GLEdBQ0F6N0UsR0FBQXUzRSxPQUFBOW5ELGFBQUFuNEIsS0FBQW9pRixFQUdBLEtBQUExNUUsR0FBQXM2RSxjQUFBLzlFLFdBQUFoSSxPQUFBLEdBQ0F5TCxHQUFBczZFLGNBQUFsbUYsWUFBQTRMLEdBQUFzNkUsY0FBQTk5RSxnQkFIQXk1RSxHQUFBajJFLEdBQUFzNkUsY0FLQVosSUFBQUEsR0FBQSxFQUNBMTVFLEdBQUFzNkUsY0FBQXBtRixZQUFBbXJGLEdBRUFyL0UsR0FBQXM2RSxjQUFBN3ZELGFBQUE0MEQsRUFBQXIvRSxHQUFBczZFLGNBQUE5OUUsWUFDQXdELEdBQUF5N0UsS0FBQXo3RSxHQUFBczZFLGNBQUEvOUUsV0FBQSxJQUVBLFFBQUFrZ0YsS0FDQSxHQUFBNkMsR0FBQTlyRixPQUFBSCxTQUFBeUksd0JBQ0FrRSxJQUFBNjZFLFNBQUE5bUYsRUFBQSxNQUFBLG1CQUNBaU0sR0FBQXUvRSxhQUFBeHJGLEVBQUEsT0FBQSx3QkFDQWlNLEdBQUF1L0UsYUFBQW5qRixVQUFBNEQsR0FBQXUzRSxPQUFBaUksVUFDQXgvRSxHQUFBeS9FLG9CQUFBMXJGLEVBQUEsT0FBQSxhQUNBaU0sR0FBQXkvRSxvQkFBQTM1QyxNQUFBOWxDLEdBQUFtM0UsS0FBQXVJLFdBQ0EsSUFBQUMsR0FBQXZKLEVBQUEsV0F5Q0EsT0F4Q0FwMkUsSUFBQTI1RSxtQkFBQWdHLEVBQUFwakYsV0FBQSxHQUNBeUQsR0FBQTI1RSxtQkFBQTd6QyxNQUFBOWxDLEdBQUFtM0UsS0FBQXVJLFlBQ0ExL0UsR0FBQXUzRSxPQUFBRyxVQUNBMTNFLEdBQUEyNUUsbUJBQUF4a0MsSUFBQW4xQyxHQUFBdTNFLE9BQUFHLFFBQ0E1TCxjQUNBemdFLFlBQ0FyTCxHQUFBdTNFLE9BQUE0QixVQUNBbjVFLEdBQUEyNUUsbUJBQUF6M0UsSUFBQWxDLEdBQUF1M0UsT0FBQTRCLFFBQ0FyTixjQUNBemdFLFdBQ0FyTCxHQUFBMjVFLG1CQUFBOW9FLFdBQ0E3USxHQUFBdTNFLE9BQUFHLFNBQ0ExM0UsR0FBQXUzRSxPQUFBRyxRQUFBNUwsZ0JBQUE5ckUsR0FBQXUzRSxPQUFBNEIsUUFBQXJOLGVBRUE5ckUsR0FBQTQvRSxhQUFBN3JGLEVBQUEsT0FBQSx3QkFDQWlNLEdBQUE0L0UsYUFBQXhqRixVQUFBNEQsR0FBQXUzRSxPQUFBc0ksVUFDQTcvRSxHQUFBMDdFLHVCQUFBM25GLEVBQUEsTUFBQSwyQkFDQWlNLEdBQUEwN0UsdUJBQUF4bkYsWUFBQThMLEdBQUF5L0UscUJBQ0F6L0UsR0FBQTA3RSx1QkFBQXhuRixZQUFBeXJGLEdBQ0FMLEVBQUFwckYsWUFBQThMLEdBQUF1L0UsY0FDQUQsRUFBQXByRixZQUFBOEwsR0FBQTA3RSx3QkFDQTRELEVBQUFwckYsWUFBQThMLEdBQUE0L0UsY0FDQTUvRSxHQUFBNjZFLFNBQUEzbUYsWUFBQW9yRixHQUNBcDBFLE9BQUF3WCxlQUFBMWlCLEdBQUEsdUJBQ0F4RixJQUFBLFdBQUEsTUFBQXdGLElBQUE4L0Usc0JBQ0FwbkYsSUFBQSxTQUFBaWUsR0FDQTNXLEdBQUE4L0UsdUJBQUFucEUsSUFDQTNXLEdBQUF1L0UsYUFBQTdsRixNQUFBTSxRQUFBMmMsRUFBQSxPQUFBLFNBQ0EzVyxHQUFBOC9FLHFCQUFBbnBFLEtBR0F6TCxPQUFBd1gsZUFBQTFpQixHQUFBLHVCQUNBeEYsSUFBQSxXQUFBLE1BQUF3RixJQUFBKy9FLHNCQUNBcm5GLElBQUEsU0FBQWllLEdBQ0EzVyxHQUFBKy9FLHVCQUFBcHBFLElBQ0EzVyxHQUFBNC9FLGFBQUFsbUYsTUFBQU0sUUFBQTJjLEVBQUEsT0FBQSxTQUNBM1csR0FBQSsvRSxxQkFBQXBwRSxLQUdBeW9FLEtBQ0FwL0UsR0FBQTY2RSxTQUVBLFFBQUFzQyxLQUNBbjlFLEdBQUF3OEUsa0JBQUF4RyxVQUFBbjRFLElBQUEsV0FDQW1DLEdBQUF1M0UsT0FBQUMsWUFDQXgzRSxHQUFBdzhFLGtCQUFBeEcsVUFBQW40RSxJQUFBLGNBQ0FtQyxHQUFBbTdFLGNBQUFwbkYsRUFBQSxNQUFBLGtCQUNBaU0sR0FBQW03RSxjQUFBbC9ELFVBQUEsQ0FDQSxJQUFBZ3ZELEdBQUFsM0UsRUFBQSxPQUFBLDJCQUFBLEtBQ0Fpc0YsRUFBQTVKLEVBQUEsaUJBQ0FwMkUsSUFBQTQ0RSxZQUFBb0gsRUFBQXpqRixXQUFBLEVBQ0EsSUFBQTBqRixHQUFBN0osRUFBQSxtQkF1QkEsSUF0QkFwMkUsR0FBQTY0RSxjQUFBb0gsRUFBQTFqRixXQUFBLEdBQ0F5RCxHQUFBNDRFLFlBQUEzOEQsU0FBQWpjLEdBQUE2NEUsY0FBQTU4RCxVQUFBLEVBQ0FqYyxHQUFBNDRFLFlBQUFoaUYsTUFBQTJpRixFQUFBdjVFLEdBQUFrNUUsc0JBQ0FsNUUsR0FBQWs1RSxzQkFBQXRCLFdBQ0E1M0UsR0FBQXUzRSxPQUFBaUMsVUFDQXg1RSxHQUFBdTNFLE9BQUFNLFlBQ0FjLEVBQUEzNEUsR0FBQXUzRSxPQUFBTSxjQUNBNzNFLEdBQUE2NEUsY0FBQWppRixNQUFBMmlGLEVBQUF2NUUsR0FBQWs1RSxzQkFDQWw1RSxHQUFBazVFLHNCQUFBcEIsYUFDQTkzRSxHQUFBdTNFLE9BQUFRLGVBQ0EvM0UsR0FBQTQ0RSxZQUFBcHFELEtBQUF4dUIsR0FBQXUzRSxPQUFBMkksY0FBQTcwRSxXQUNBckwsR0FBQTY0RSxjQUFBcnFELEtBQUF4dUIsR0FBQXUzRSxPQUFBNEksZ0JBQUE5MEUsV0FDQXJMLEdBQUE0NEUsWUFBQXpqQyxJQUFBbjFDLEdBQUF1M0UsT0FBQWlDLFVBQUEsSUFBQSxJQUNBeDVFLEdBQUE0NEUsWUFBQTEyRSxJQUFBbEMsR0FBQXUzRSxPQUFBaUMsVUFBQSxLQUFBLEtBQ0F4NUUsR0FBQTY0RSxjQUFBMWpDLElBQUEsSUFDQW4xQyxHQUFBNjRFLGNBQUEzMkUsSUFBQSxLQUNBbEMsR0FBQTQ0RSxZQUFBOXlDLE1BQUE5bEMsR0FBQTY0RSxjQUFBL3lDLE1BQUE5bEMsR0FBQW0zRSxLQUFBdUksWUFDQTEvRSxHQUFBbTdFLGNBQUFqbkYsWUFBQThyRixHQUNBaGdGLEdBQUFtN0UsY0FBQWpuRixZQUFBKzJFLEdBQ0FqckUsR0FBQW03RSxjQUFBam5GLFlBQUErckYsR0FDQWpnRixHQUFBdTNFLE9BQUFpQyxXQUNBeDVFLEdBQUFtN0UsY0FBQW5GLFVBQUFuNEUsSUFBQSxZQUNBbUMsR0FBQXUzRSxPQUFBUyxjQUFBLENBQ0FoNEUsR0FBQW03RSxjQUFBbkYsVUFBQW40RSxJQUFBLGFBQ0EsSUFBQXVpRixHQUFBaEssRUFBQSxtQkFDQXAyRSxJQUFBaTVFLGNBQUFtSCxFQUFBN2pGLFdBQUEsR0FDQXlELEdBQUFpNUUsY0FBQXJpRixNQUFBMmlGLEVBQUF2NUUsR0FBQWs1RSxzQkFDQWw1RSxHQUFBazVFLHNCQUFBakIsYUFDQWo0RSxHQUFBdTNFLE9BQUFXLGdCQUNBbDRFLEdBQUFpNUUsY0FBQXpxRCxLQUFBeHVCLEdBQUE2NEUsY0FBQXJxRCxLQUNBeHVCLEdBQUFpNUUsY0FBQTlqQyxJQUFBbjFDLEdBQUE2NEUsY0FBQTFqQyxJQUNBbjFDLEdBQUFpNUUsY0FBQS8yRSxJQUFBbEMsR0FBQTY0RSxjQUFBMzJFLElBQ0FsQyxHQUFBbTdFLGNBQUFqbkYsWUFBQUgsRUFBQSxPQUFBLDJCQUFBLE1BQ0FpTSxHQUFBbTdFLGNBQUFqbkYsWUFBQWtzRixHQVVBLE1BUkFwZ0YsSUFBQXUzRSxPQUFBaUMsWUFDQXg1RSxHQUFBeTRFLEtBQUExa0YsRUFBQSxPQUFBLGtCQUFBaU0sR0FBQW0zRSxLQUFBc0IsS0FBQUMsR0FBQTE0RSxHQUFBazVFLHNCQUNBbDVFLEdBQUE0NEUsWUFBQWhpRixNQUNBb0osR0FBQXUzRSxPQUFBTSxhQUFBLE1BQ0E3M0UsR0FBQXk0RSxLQUFBM3lDLE1BQUE5bEMsR0FBQW0zRSxLQUFBa0osWUFDQXJnRixHQUFBeTRFLEtBQUF4OEQsVUFBQSxFQUNBamMsR0FBQW03RSxjQUFBam5GLFlBQUE4TCxHQUFBeTRFLE9BRUF6NEUsR0FBQW03RSxjQUVBLFFBQUE2QixLQUNBaDlFLEdBQUFzZ0YsbUJBQ0F0Z0YsR0FBQXNnRixpQkFBQXZzRixFQUFBLE1BQUEsc0JBQ0EsSUFBQThxRixHQUFBNytFLEdBQUFtM0UsS0FBQTBILGVBQ0EwQixFQUFBdmdGLEdBQUFtM0UsS0FBQW9KLFNBQUFDLFVBQUFqcEYsT0FLQSxPQUpBc25GLEdBQUEsR0FBQUEsRUFBQTBCLEVBQUFoc0YsU0FDQWdzRixFQUFBQSxFQUFBOXpFLE9BQUFveUUsRUFBQTBCLEVBQUFoc0YsUUFBQWlMLE9BQUErZ0YsRUFBQTl6RSxPQUFBLEVBQUFveUUsS0FFQTcrRSxHQUFBc2dGLGlCQUFBbGtGLFVBQUEsK0NBQUFta0YsRUFBQTE0RSxLQUFBLHlDQUFBLHNCQUNBN0gsR0FBQXNnRixpQkFFQSxRQUFBekQsS0FDQTc4RSxHQUFBdzhFLGtCQUFBeEcsVUFBQW40RSxJQUFBLFdBQ0EsSUFBQWkvRSxHQUFBL29GLEVBQUEsTUFBQSx3QkFDQStvRixHQUFBNW9GLFlBQUFILEVBQUEsT0FBQSxvQkFBQWlNLEdBQUFtM0UsS0FBQXNKLGtCQUNBLElBQUE5RCxHQUFBNW9GLEVBQUEsTUFBQSxrQkFFQSxPQURBK29GLEdBQUE1b0YsWUFBQXlvRixJQUVBRyxZQUFBQSxFQUNBSCxZQUFBQSxHQUdBLFFBQUE4QixHQUFBN25GLEVBQUE4cEYsRUFBQWp4RCxFQUFBa3hELE9BQ0EsS0FBQUQsSUFBQUEsR0FBQSxPQUNBLEtBQUFqeEQsSUFBQUEsRUFBQXp2QixHQUFBdTNFLE9BQUE5bkQsYUFDQSxLQUFBa3hELElBQUFBLEdBQUEsRUFDQSxJQUFBakgsR0FBQWdILEVBQUE5cEYsRUFBQUEsRUFBQW9KLEdBQUFpM0UsWUFDQSxNQUFBeUMsRUFBQSxHQUFBMTVFLEdBQUFrL0UscUJBQ0F4RixFQUFBLEdBQUExNUUsR0FBQW0vRSxxQkFEQSxDQVVBLEdBUEFuL0UsR0FBQWkzRSxjQUFBeUMsR0FDQTE1RSxHQUFBaTNFLGFBQUEsR0FBQWozRSxHQUFBaTNFLGFBQUEsTUFDQWozRSxHQUFBazNFLGFBQUFsM0UsR0FBQWkzRSxhQUFBLEdBQUEsR0FBQSxFQUNBajNFLEdBQUFpM0UsY0FBQWozRSxHQUFBaTNFLGFBQUEsSUFBQSxHQUNBK0MsR0FBQSxpQkFFQWlELEVBQUF4dEQsRUFBQWlxRCxNQUFBcGlGLEtBQ0FtNEIsRUFFQSxNQURBdXFELElBQUEsaUJBQ0FvRixJQUVBLElBQUF6RCxHQUFBMzdFLEdBQUEwN0Usc0JBQ0EsSUFBQWhDLEVBQUEsRUFDQSxLQUFBaUMsRUFBQWhyRSxhQUNBLE9BQUFqYixLQUFBaW1GLEVBQUFockUsWUFBQXdILFlBQ0FuWSxHQUFBNjZFLFNBQUF6bUYsWUFBQXVuRixFQUFBaHJFLGlCQUVBLElBQUErb0UsRUFBQSxFQUNBLEtBQUFpQyxFQUFBQyxpQkFDQSxPQUFBbG1GLEtBQUFpbUYsRUFBQUMsZ0JBQUF6akUsWUFDQW5ZLEdBQUE2NkUsU0FBQXptRixZQUFBdW5GLEVBQUFDLGdCQUVBNTdFLElBQUE2N0UsWUFBQTc3RSxHQUFBMDdFLHVCQUNBMTdFLEdBQUEwN0UsdUJBQUExN0UsR0FBQTY2RSxTQUFBcHdELGFBQUF6cUIsR0FBQTY3RSxZQUFBdjNELFdBQUEsR0FBQW8xRCxFQUFBLEVBQUExNUUsR0FBQTY3RSxZQUFBbHJFLFlBQUEzUSxHQUFBNjdFLFlBQ0EsSUFBQXZCLEdBQUF0NkUsR0FBQXM2RSxhQXVCQSxJQXRCQUEsRUFBQTk5RSxZQUFBODlFLEVBQUFoK0UsWUFDQW85RSxFQUFBLEdBQ0FZLEVBQUE5OUUsV0FBQXc1RSxVQUFBbjRFLElBQUEsYUFDQXk4RSxFQUFBaCtFLFVBQUEwNUUsVUFBQW40RSxJQUFBLGdCQUNBbUMsR0FBQTY3RSxZQUFBN0YsVUFBQW40RSxJQUFBLGFBQ0FtQyxHQUFBMDdFLHVCQUFBMUYsVUFBQW40RSxJQUFBLGlCQUVBNjdFLEVBQUEsSUFDQVksRUFBQTk5RSxXQUFBdzVFLFVBQUFuNEUsSUFBQSxpQkFDQXk4RSxFQUFBaCtFLFVBQUEwNUUsVUFBQW40RSxJQUFBLGNBQ0FtQyxHQUFBNjdFLFlBQUE3RixVQUFBbjRFLElBQUEsY0FDQW1DLEdBQUEwN0UsdUJBQUExRixVQUFBbjRFLElBQUEsbUJBR0FtQyxHQUFBeS9FLG9CQUFBei9FLEdBQUEwN0UsdUJBQ0FsL0UsV0FDQXdELEdBQUEyNUUsbUJBQUEzNUUsR0FBQTA3RSx1QkFBQXAvRSxVQUNBQyxXQUFBLEdBQ0E2aUYsS0FDQXAvRSxHQUFBNjdFLFlBQUFyL0UsYUFDQXdELEdBQUE2N0UsWUFBQXIvRSxXQUFBQyxZQUFBbWtGLEVBQUE1Z0YsR0FBQWkzRSxhQUFBeUMsRUFBQTE1RSxHQUFBdTNFLE9BQUFzSixzQkFBQTdnRixHQUFBbTNFLE9BQ0F1SCxFQUFBLFdBQUEsTUFBQTFFLElBQUEsbUJBQ0EyRyxHQUNBdHRGLFNBQUE0SixlQUNBNUosU0FBQTRKLGNBQUEwZ0YsR0FBQSxDQUNBLEdBQUFtRCxHQUFBenRGLFNBQUE0SixjQUFBMGdGLEVBQ0FlLEdBQUEsV0FDQUosRUFBQXdDLEVBQUEsT0FJQSxRQUFBcC9CLEdBQUFxL0IsT0FDQSxLQUFBQSxJQUFBQSxHQUFBLEdBQ0EvZ0YsR0FBQXlZLE1BQUE3aEIsTUFBQSxHQUNBb0osR0FBQXE5RSxXQUNBcjlFLEdBQUFxOUUsU0FBQXptRixNQUFBLElBQ0FvSixHQUFBZ2hGLGNBQ0FoaEYsR0FBQWdoRixZQUFBcHFGLE1BQUEsSUFDQW9KLEdBQUF5M0UsaUJBQ0F6M0UsR0FBQWs1RSwwQkFBQTVoRixHQUNBMEksR0FBQWloRixlQUFBLEVBQ0FqaEYsR0FBQWs4RSxTQUNBNkUsR0FDQS9HLEdBQUEsWUFFQSxRQUFBbnVDLEtBQ0E3ckMsR0FBQWtoRixRQUFBLEVBQ0FsaEYsR0FBQTJ2QyxXQUNBM3ZDLEdBQUF3OEUsa0JBQUF4RyxVQUFBejFFLE9BQUEsUUFDQVAsR0FBQXk2RSxPQUFBekUsVUFBQXoxRSxPQUFBLFdBRUF5NUUsR0FBQSxXQUVBLFFBQUExZ0MsU0FDQWhpRCxLQUFBMEksR0FBQXUzRSxRQUNBeUMsR0FBQSxZQUNBLEtBQUEsR0FBQTNrRixHQUFBMkssR0FBQTY1RSxVQUFBdGxGLE9BQUFjLEtBQUEsQ0FDQSxHQUFBMjRFLEdBQUFodUUsR0FBQTY1RSxVQUFBeGtGLEVBQ0EyNEUsR0FBQTMxQixRQUFBNWdELG9CQUFBdTJFLEVBQUF2d0UsTUFBQXV3RSxFQUFBNTlELFNBRUFwUSxHQUFBNjVFLGFBQ0E3NUUsR0FBQWdoRixhQUNBaGhGLEdBQUFnaEYsWUFBQTdzRixZQUNBNkwsR0FBQWdoRixZQUFBN3NGLFdBQUFDLFlBQUE0TCxHQUFBZ2hGLGFBQ0FoaEYsR0FBQWdoRixnQkFBQTFwRixJQUVBMEksR0FBQXc4RSxtQkFBQXg4RSxHQUFBdzhFLGtCQUFBcm9GLFlBQ0E2TCxHQUFBdzhFLGtCQUFBcm9GLFdBQUFDLFlBQUE0TCxHQUFBdzhFLG1CQUNBeDhFLEdBQUFxOUUsV0FDQXI5RSxHQUFBeVksTUFBQWprQixLQUFBLE9BQ0F3TCxHQUFBcTlFLFNBQUFscEYsWUFDQTZMLEdBQUFxOUUsU0FBQWxwRixXQUFBQyxZQUFBNEwsR0FBQXE5RSxnQkFDQXI5RSxJQUFBcTlFLFVBRUFyOUUsR0FBQXlZLFFBQ0F6WSxHQUFBeVksTUFBQWprQixLQUFBd0wsR0FBQXlZLE1BQUEwb0UsTUFDQW5oRixHQUFBeVksTUFBQXU5RCxVQUFBejFFLE9BQUEsbUJBQ0FQLEdBQUF5WSxNQUFBdGEsZ0JBQUEsWUFDQTZCLEdBQUF5WSxNQUFBN2hCLE1BQUEsS0FHQSxpQkFDQSx3QkFDQSxzQkFDQSxzQkFDQSx1QkFDQSx1QkFDQSxXQUNBLFNBQ0EsbUJBQ0EsaUJBQ0EsaUJBQ0EsT0FDQSxnQkFDQSxTQUNBLG1CQUNBLGlCQUNBLGFBQ0EsV0FDQSxnQkFDQSxvQkFDQSxtQkFDQSxlQUNBLGVBQ0Esc0JBQ0EscUJBQ0EseUJBQ0EsbUJBQ0EsVUFDQXc2QyxRQUFBLFNBQUFvbkIsR0FDQSxVQUNBeDRELElBQUF3NEQsR0FFQSxNQUFBbmlFLE9BR0EsUUFBQStxRixHQUFBeHNGLEdBQ0EsU0FBQW9MLEdBQUF1M0UsT0FBQXpzRCxXQUFBOXFCLEdBQUF1M0UsT0FBQXpzRCxTQUFBbnZCLFNBQUEvRyxLQUVBb0wsR0FBQXc4RSxrQkFBQTdnRixTQUFBL0csR0FFQSxRQUFBK2xGLEdBQUFuaUYsR0FDQSxHQUFBd0gsR0FBQWtoRixTQUFBbGhGLEdBQUF1M0UsT0FBQW1ELE9BQUEsQ0FDQSxHQUFBMkcsR0FBQUQsRUFBQTVvRixFQUFBNFEsUUFDQWs0RSxFQUFBOW9GLEVBQUE0USxTQUFBcEosR0FBQXlZLE9BQ0FqZ0IsRUFBQTRRLFNBQUFwSixHQUFBcTlFLFVBQ0FyOUUsR0FBQXE0QyxRQUFBMThDLFNBQUFuRCxFQUFBNFEsU0FDQTVRLEVBQUErb0YsTUFDQS9vRixFQUFBK29GLEtBQUEvckYsV0FDQWdELEVBQUErb0YsS0FBQS9yRixRQUFBd0ssR0FBQXlZLFNBQ0FqZ0IsRUFBQStvRixLQUFBL3JGLFFBQUF3SyxHQUFBcTlFLFlBQ0EsU0FBQTdrRixFQUFBaEUsS0FDQThzRixHQUNBOW9GLEVBQUFtdkIsZ0JBQ0F5NUQsRUFBQTVvRixFQUFBbXZCLGdCQUNBMjVELElBQUFELEtBRUEsSUFBQXJoRixHQUFBdTNFLE9BQUFpSyxxQkFBQWhzRixRQUFBZ0QsRUFBQTRRLFVBQ0FwSixHQUFBNnJDLFFBQ0EsVUFBQTdyQyxHQUFBdTNFLE9BQUEvNUMsTUFBQSxJQUFBeDlCLEdBQUF5M0UsY0FBQWxqRixTQUNBeUwsR0FBQTBoRCxPQUFBLEdBQ0ExaEQsR0FBQWs4RSxZQUtBLFFBQUF0QyxJQUFBNkgsR0FDQSxNQUFBQSxHQUNBemhGLEdBQUEyNUUsbUJBQUF4a0MsS0FDQXNzQyxFQUFBOXZELFNBQUEzeEIsR0FBQTI1RSxtQkFBQXhrQyxNQUNBbjFDLEdBQUEyNUUsbUJBQUF6M0UsS0FDQXUvRSxFQUFBOXZELFNBQUEzeEIsR0FBQTI1RSxtQkFBQXozRSxNQUpBLENBTUEsR0FBQXcvRSxHQUFBRCxFQUFBRSxFQUFBM2hGLEdBQUFrM0UsY0FBQXdLLENBQ0ExaEYsSUFBQWszRSxZQUFBd0ssR0FBQTFoRixHQUFBazNFLFlBQ0FsM0UsR0FBQXUzRSxPQUFBNEIsU0FDQW41RSxHQUFBazNFLGNBQUFsM0UsR0FBQXUzRSxPQUFBNEIsUUFBQXJOLGNBQ0E5ckUsR0FBQWkzRSxhQUFBaDFFLEtBQUFrekMsSUFBQW4xQyxHQUFBdTNFLE9BQUE0QixRQUFBOU0sV0FBQXJzRSxHQUFBaTNFLGNBRUFqM0UsR0FBQXUzRSxPQUFBRyxTQUNBMTNFLEdBQUFrM0UsY0FBQWwzRSxHQUFBdTNFLE9BQUFHLFFBQUE1TCxnQkFDQTlyRSxHQUFBaTNFLGFBQUFoMUUsS0FBQUMsSUFBQWxDLEdBQUF1M0UsT0FBQUcsUUFBQXJMLFdBQUFyc0UsR0FBQWkzRSxlQUVBMEssSUFDQTNoRixHQUFBazhFLFNBQ0FsQyxHQUFBLGtCQUdBLFFBQUF5RCxJQUFBbFAsRUFBQWtILE9BQ0EsS0FBQUEsSUFBQUEsR0FBQSxFQUNBLElBQUFtTSxHQUFBNWhGLEdBQUFnOEUsVUFBQXpOLE1BQUFqM0UsR0FBQW0rRSxFQUNBLElBQUF6MUUsR0FBQXUzRSxPQUFBRyxTQUNBa0ssR0FDQXRNLEVBQUFzTSxFQUFBNWhGLEdBQUF1M0UsT0FBQUcsWUFBQXBnRixLQUFBbStFLEVBQUFBLEdBQUF6MUUsR0FBQXM0RSxnQkFBQSxHQUNBdDRFLEdBQUF1M0UsT0FBQTRCLFNBQ0F5SSxHQUNBdE0sRUFBQXNNLEVBQUE1aEYsR0FBQXUzRSxPQUFBNEIsWUFBQTdoRixLQUFBbStFLEVBQUFBLEdBQUF6MUUsR0FBQW81RSxnQkFBQSxFQUNBLE9BQUEsQ0FDQSxLQUFBcDVFLEdBQUF1M0UsT0FBQXNLLE9BQUF0dEYsU0FBQXlMLEdBQUF1M0UsT0FBQTczRCxRQUFBbnJCLE9BQ0EsT0FBQSxDQUNBLFFBQUErQyxLQUFBc3FGLEVBQ0EsT0FBQSxDQUVBLEtBQUEsR0FEQWpyRSxHQUFBM1csR0FBQXUzRSxPQUFBc0ssT0FBQXR0RixPQUFBLEVBQUF1dEYsRUFBQW5yRSxFQUFBM1csR0FBQXUzRSxPQUFBc0ssT0FBQTdoRixHQUFBdTNFLE9BQUE3M0QsUUFDQXJxQixFQUFBLEVBQUF5akQsTUFBQSxHQUFBempELEVBQUF5c0YsRUFBQXZ0RixPQUFBYyxJQUFBLENBRUEsR0FBQSxtQkFEQXlqRCxFQUFBZ3BDLEVBQUF6c0YsS0FFQXlqRCxFQUFBOG9DLEdBQ0EsTUFBQWpyRSxFQUNBLElBQUFtaUMsWUFBQWhyQyxXQUNBeFcsS0FBQXNxRixHQUNBOW9DLEVBQUExQixZQUFBd3FDLEVBQUF4cUMsVUFDQSxNQUFBemdDLEVBQ0EsSUFBQSxnQkFBQW1pQyxRQUFBeGhELEtBQUFzcUYsRUFBQSxDQUNBLEdBQUE5bUQsR0FBQTk2QixHQUFBZzhFLFVBQUFsakMsTUFBQXhoRCxJQUFBLEVBQ0EsT0FBQXdqQyxJQUFBQSxFQUFBc2MsWUFBQXdxQyxFQUFBeHFDLFVBQ0F6Z0MsR0FDQUEsRUFFQSxHQUFBLGdCQUFBbWlDLFFBQ0F4aEQsS0FBQXNxRixHQUNBOW9DLEVBQUFpcEMsTUFDQWpwQyxFQUFBdHBCLElBQ0FveUQsRUFBQXhxQyxXQUFBMEIsRUFBQWlwQyxLQUFBM3FDLFdBQ0F3cUMsRUFBQXhxQyxXQUFBMEIsRUFBQXRwQixHQUFBNG5CLFVBQ0EsTUFBQXpnQyxHQUVBLE9BQUFBLEVBRUEsUUFBQXFsRCxJQUFBeGpFLEdBQ0EsR0FBQThvRixHQUFBOW9GLEVBQUE0USxTQUFBcEosR0FBQXk2RSxPQUNBdUgsRUFBQVosRUFBQTVvRixFQUFBNFEsUUFDQTY0RSxFQUFBamlGLEdBQUF1M0UsT0FBQTBLLFdBQ0FDLEVBQUFsaUYsR0FBQWtoRixVQUFBZSxJQUFBWCxHQUNBYSxFQUFBbmlGLEdBQUF1M0UsT0FBQW1ELFFBQUE0RyxJQUFBVyxDQUNBLElBQUEsVUFBQXpwRixFQUFBSixLQUFBa3BGLEVBQUEsQ0FDQSxHQUFBVyxFQUlBLE1BSEFqaUYsSUFBQTIzRSxRQUFBMzNFLEdBQUF5NkUsT0FBQTdqRixPQUFBLEVBQUE0QixFQUFBNFEsU0FBQXBKLEdBQUFxOUUsU0FDQXI5RSxHQUFBdTNFLE9BQUE2SyxVQUNBcGlGLEdBQUF1M0UsT0FBQThLLFlBQ0E3cEYsRUFBQTRRLE9BQUFpZSxNQUdBcm5CLElBQUFvNUIsV0FFQSxJQUFBNG9ELEdBQUFFLEdBQUFDLEVBQUEsQ0FDQSxHQUFBRyxLQUFBdGlGLEdBQUFtN0UsZUFDQW43RSxHQUFBbTdFLGNBQUF4L0UsU0FBQW5ELEVBQUE0USxPQUNBLFFBQUE1USxFQUFBSixLQUNBLElBQUEsUUFDQWtxRixFQUNBbEssS0FFQTRDLEdBQUF4aUYsRUFDQSxNQUNBLEtBQUEsU0FDQUEsRUFBQSt0QixpQkFDQXZtQixHQUFBNnJDLE9BQ0EsTUFDQSxLQUFBLFlBQ0EsSUFBQSxTQUNBeTFDLElBQUF0aEYsR0FBQXUzRSxPQUFBMEssWUFDQWppRixHQUFBMGhELE9BQ0EsTUFDQSxLQUFBLFlBQ0EsSUFBQSxhQUNBLEdBQUE0Z0MsRUFVQXRpRixHQUFBNDRFLGFBQ0E1NEUsR0FBQTQ0RSxZQUFBOThELFlBVEEsSUFEQXRqQixFQUFBK3RCLGlCQUNBdm1CLEdBQUFzNkUsY0FBQSxDQUNBLEdBQUFpSSxHQUFBLGVBQUEvcEYsRUFBQUosSUFBQSxHQUFBLENBQ0FJLEdBQUEydkIsUUFHQXMyRCxFQUFBOEQsR0FBQSxNQUFBanJGLElBQUEsR0FGQWduRixFQUFBOWxGLEVBQUE0USxPQUFBdTBFLEdBQUE0RSxHQU9BLEtBQ0EsS0FBQSxVQUNBLElBQUEsWUFDQS9wRixFQUFBK3RCLGdCQUNBLElBQUFtekQsR0FBQSxjQUFBbGhGLEVBQUFKLElBQUEsR0FBQSxDQUNBNEgsSUFBQXM2RSxtQkFBQWhqRixLQUFBa0IsRUFBQTRRLE9BQUF1MEUsR0FDQW5sRixFQUFBMnZCLFNBQ0F5eEQsR0FBQTU1RSxHQUFBazNFLFlBQUF3QyxHQUNBNEUsRUFBQTlsRixFQUFBNFEsT0FBQXUwRSxHQUFBLElBRUEyRSxHQUNBaEUsRUFBQTlsRixFQUFBNFEsT0FBQXUwRSxHQUFBLEVBQUFqRSxHQUVBMTVFLEdBQUF1M0UsT0FBQTJGLGNBQ0FvRixHQUFBdGlGLEdBQUE0NEUsYUFDQTU0RSxHQUFBNDRFLFlBQUE5OEQsUUFDQXc3RCxFQUFBOStFLEdBQ0F3SCxHQUFBcTZFLG1CQUVBLE1BQ0EsS0FBQSxNQUNBN2hGLEVBQUE0USxTQUFBcEosR0FBQTQ0RSxhQUNBcGdGLEVBQUErdEIsaUJBQ0F2bUIsR0FBQTY0RSxjQUFBbnBFLFVBRUFsWCxFQUFBNFEsU0FBQXBKLEdBQUE2NEUsZ0JBQ0E3NEUsR0FBQWk1RSxlQUFBajVFLEdBQUF5NEUsT0FDQWpnRixFQUFBK3RCLHFCQUNBanZCLEtBQUEwSSxHQUFBaTVFLGNBQ0FqNUUsR0FBQWk1RSxjQUFBbjlELFlBQ0F4a0IsS0FBQTBJLEdBQUF5NEUsTUFDQXo0RSxHQUFBeTRFLEtBQUEzOEQsU0FFQXRqQixFQUFBNFEsU0FBQXBKLEdBQUFpNUUsZUFBQWo1RSxHQUFBeTRFLE9BQ0FqZ0YsRUFBQSt0QixpQkFDQXZtQixHQUFBeTRFLEtBQUEzOEQsUUFFQSxNQUNBLEtBQUEsUUFDQXhrQixLQUFBMEksR0FBQXk0RSxNQUFBamdGLEVBQUE0USxTQUFBcEosR0FBQXk0RSxPQUNBejRFLEdBQUF5NEUsS0FBQWg4RSxZQUFBLEtBQ0EwN0UsSUFDQUMsS0FFQSxNQUNBLEtBQUEsUUFDQTlnRixLQUFBMEksR0FBQXk0RSxNQUFBamdGLEVBQUE0USxTQUFBcEosR0FBQXk0RSxPQUNBejRFLEdBQUF5NEUsS0FBQWg4RSxZQUFBLEtBQ0EwN0UsSUFDQUMsTUFNQTRCLEdBQUEsWUFBQXhoRixJQUdBLFFBQUEraEYsSUFBQTNsRixHQUNBLEdBQUEsSUFBQW9MLEdBQUF5M0UsY0FBQWxqRixRQUNBSyxFQUFBb2hGLFVBQUFyNkUsU0FBQSxzQkFDQXJFLEtBQUEwSSxHQUFBaStFLGtCQUNBM21GLEtBQUEwSSxHQUFBaytFLGFBSEEsQ0FNQSxJQUFBLEdBREFzRSxHQUFBNXRGLEVBQUEwa0YsUUFBQW1KLEVBQUF6aUYsR0FBQWc4RSxVQUFBaDhFLEdBQUF5M0UsY0FBQSxPQUFBbmdGLElBQUEsR0FBQW9yRixFQUFBemdGLEtBQUFrekMsSUFBQXF0QyxFQUFBcHJDLFVBQUFwM0MsR0FBQXkzRSxjQUFBLEdBQUFyZ0MsV0FBQXVyQyxFQUFBMWdGLEtBQUFDLElBQUFzZ0YsRUFBQXByQyxVQUFBcDNDLEdBQUF5M0UsY0FBQSxHQUFBcmdDLFdBQUF3ckMsR0FBQSxFQUNBLzlELEVBQUE2OUQsRUFBQTc5RCxFQUFBODlELEVBQUE5OUQsR0FBQWhlLEVBQUFnOEUsSUFDQSxJQUFBcEYsR0FBQSxHQUFBM3ZFLE1BQUErVyxJQUFBLENBQ0ErOUQsR0FBQSxDQUNBLE9BNEJBLElBQUEsR0FBQXZ0RixHQUFBLEVBQUFrNUUsRUFBQXZ1RSxHQUFBeTdFLEtBQUFsL0UsV0FBQWxILEdBQUFpa0YsUUFBQWprRixFQUFBLEdBQUFBLElBQUFrNUUsRUFDQXZ1RSxHQUFBeTdFLEtBQUFsL0UsV0FBQWxILElBQ0EySyxHQUFBeTdFLEtBQUFsL0UsV0FBQWxILEdBQUFpa0YsU0EzQkEsU0FBQWprRixFQUFBazVFLEdBQ0EsR0FBQXVVLEdBQUF2VSxFQUFBbjNCLFVBQ0EyckMsRUFBQUQsRUFBQTlpRixHQUFBaStFLGFBQUE3bUMsV0FDQTByQyxFQUFBOWlGLEdBQUFrK0UsYUFBQTltQyxVQUFBNHJDLEVBQUFoakYsR0FBQXk3RSxLQUFBbC9FLFdBQUFsSCxFQUNBLElBQUEwdEYsRUFLQSxNQUpBQyxHQUFBaE4sVUFBQW40RSxJQUFBLGVBQ0EsVUFBQSxhQUFBLFlBQUF1ekMsUUFBQSxTQUFBaVUsR0FDQTI5QixFQUFBaE4sVUFBQXoxRSxPQUFBOGtELEtBRUEsVUFFQSxJQUFBdTlCLElBQUFHLEVBQ0EsTUFBQSxZQUNBLGFBQUEsVUFBQSxXQUFBLGNBQUEzeEMsUUFBQSxTQUFBaVUsR0FDQTI5QixFQUFBaE4sVUFBQXoxRSxPQUFBOGtELElBRUEsSUFBQTQ0QixHQUFBaDhFLEtBQUFDLElBQUFsQyxHQUFBaStFLGFBQUE3bUMsVUFBQXNyQyxHQUFBeEUsRUFBQWo4RSxLQUFBa3pDLElBQUFuMUMsR0FBQWsrRSxhQUFBOW1DLFVBQUF1ckMsRUFDQS90RixHQUFBb2hGLFVBQUFuNEUsSUFBQTJrRixFQUFBeGlGLEdBQUF5M0UsY0FBQSxHQUFBLGFBQUEsWUFDQWdMLEVBQUFELEdBQUFNLElBQUFMLEVBQUFyckMsVUFDQTRyQyxFQUFBaE4sVUFBQW40RSxJQUFBLGNBQ0E0a0YsRUFBQUQsR0FBQU0sSUFBQUwsRUFBQXJyQyxXQUNBNHJDLEVBQUFoTixVQUFBbjRFLElBQUEsWUFDQWlsRixHQUFBN0UsR0FBQTZFLEdBQUE1RSxHQUNBOEUsRUFBQWhOLFVBQUFuNEUsSUFBQSxZQUtBeEksRUFBQWs1RSxJQUdBLFFBQUE2TCxPQUNBcDZFLEdBQUFraEYsUUFBQWxoRixHQUFBdTNFLE9BQUFpRCxRQUFBeDZFLEdBQUF1M0UsT0FBQW1ELFFBQ0F1SSxLQUVBLFFBQUE3cEQsSUFBQTVnQyxFQUFBMHFGLEdBRUEsT0FEQSxLQUFBQSxJQUFBQSxFQUFBbGpGLEdBQUF5NkUsUUFDQXo2RSxHQUFBMnZDLFNBU0EsTUFSQW4zQyxLQUNBQSxFQUFBK3RCLGlCQUNBL3RCLEVBQUE0USxRQUFBNVEsRUFBQTRRLE9BQUFpZSxRQUVBaGtCLFdBQUEsZUFDQS9MLEtBQUEwSSxHQUFBZ2hGLGFBQUFoaEYsR0FBQWdoRixZQUFBMTVELFNBQ0EsT0FDQTB5RCxJQUFBLFNBR0EsS0FBQWg2RSxHQUFBeTZFLE9BQUE1cEUsV0FBQTdRLEdBQUF1M0UsT0FBQW1ELE9BQUEsQ0FFQSxHQUFBeUksR0FBQW5qRixHQUFBa2hGLE1BQ0FsaEYsSUFBQWtoRixRQUFBLEVBQ0ErQixHQUFBQyxHQUNBbGpGLEdBQUF3OEUsa0JBQUF4RyxVQUFBbjRFLElBQUEsUUFDQW1DLEdBQUF5NkUsT0FBQXpFLFVBQUFuNEUsSUFBQSxXQUNBc2xGLEdBQUFuSixHQUFBLFdBRUEsUUFBQW9KLElBQUE1dUYsR0FDQSxNQUFBLFVBQUErNUUsR0FDQSxHQUFBK0ssR0FBQXQ1RSxHQUFBdTNFLE9BQUEsSUFBQS9pRixFQUFBLFFBQUF3TCxHQUFBZzhFLFVBQUF6TixHQUNBOFUsRUFBQXJqRixHQUFBdTNFLE9BQUEsS0FBQSxRQUFBL2lGLEVBQUEsTUFBQSxPQUFBLFlBQ0E4QyxLQUFBZ2lGLElBQ0F0NUUsR0FBQSxRQUFBeEwsRUFBQSxpQkFBQSxrQkFDQThrRixFQUFBMUIsV0FBQSxHQUNBMEIsRUFBQXhCLGFBQUEsR0FDQXdCLEVBQUFyQixhQUFBLEdBRUFqNEUsR0FBQXkzRSxnQkFDQXozRSxHQUFBeTNFLGNBQUF6M0UsR0FBQXkzRSxjQUFBOWhGLE9BQUEsU0FBQW1qRCxHQUFBLE1BQUEya0MsSUFBQTNrQyxLQUNBOTRDLEdBQUF5M0UsY0FBQWxqRixRQUFBLFFBQUFDLEdBQ0E2a0YsRUFBQUMsR0FDQWxCLE1BRUFwNEUsR0FBQXM2RSxnQkFDQTRCLFNBQ0E1a0YsS0FBQWdpRixFQUNBdDVFLEdBQUEyNUUsbUJBQUFubEYsR0FBQThrRixFQUFBeE4sY0FBQXpnRSxXQUVBckwsR0FBQTI1RSxtQkFBQXg3RSxnQkFBQTNKLEdBQ0F3TCxHQUFBMjVFLG1CQUFBOW9FLFdBQ0F3eUUsT0FDQS9yRixLQUFBZ2lGLEdBQ0ErSixFQUFBdlgsZ0JBQUF3TixFQUFBeE4sZ0JBSUEsUUFBQXdYLE1BQ0EsR0FBQUMsSUFDQSxPQUNBLGNBQ0EsYUFDQSxhQUNBLFlBQ0EsYUFDQSxhQUNBLFdBQ0Esd0JBQ0EsU0FDQSxTQUNBLGdCQUNBLGlCQUVBNytFLEdBQ0EsV0FDQSxVQUNBLGNBQ0EsWUFDQSxZQUNBLGdCQUNBLFNBQ0EsZ0JBQ0EsVUFDQSxnQkFDQSxlQUVBMUUsSUFBQXUzRSxPQUFBaU0sS0FBQW5PLEVBQUFvTyxjQUNBLElBQUFDLEdBQUFGLEtBQUE3TSxFQUFBMStFLEtBQUFDLE1BQUFELEtBQUE4dUUsVUFBQTF1QixFQUFBc3JDLGVBQ0FDLElBQ0ExNEUsUUFBQXdYLGVBQUExaUIsR0FBQXUzRSxPQUFBLFVBQ0EvOEUsSUFBQSxXQUFBLE1BQUF3RixJQUFBdTNFLE9BQUFzTSxhQUNBbnJGLElBQUEsU0FBQW9yRixHQUNBOWpGLEdBQUF1M0UsT0FBQXNNLFFBQUFFLEdBQUFELE1BR0E1NEUsT0FBQXdYLGVBQUExaUIsR0FBQXUzRSxPQUFBLFdBQ0EvOEUsSUFBQSxXQUFBLE1BQUF3RixJQUFBdTNFLE9BQUF5TSxjQUNBdHJGLElBQUEsU0FBQW9yRixHQUNBOWpGLEdBQUF1M0UsT0FBQXlNLFNBQUFELEdBQUFELE9BR0FKLEVBQUFyQixZQUFBcUIsRUFBQXhHLGFBQ0EwRyxFQUFBdkIsV0FBQXFCLEVBQUFsTSxXQUNBLE9BQUFrTSxFQUFBMUwsY0FBQSxLQUFBLElBQ0EzQyxFQUFBb08sY0FBQXBCLFdBQ0EsUUFDQXFCLEVBQUExTCxjQUFBLEtBQUEsS0FFQTBMLEVBQUFyRyxVQUFBcUcsRUFBQXhHLGFBQUF3RyxFQUFBdEIsWUFDQXdCLEVBQUF4QixVQUFBc0IsRUFBQWxNLFdBQ0EsT0FBQWtNLEVBQUExTCxjQUFBLE9BQUEsTUFDQTNDLEVBQUFvTyxjQUFBckIsVUFDQSxRQUFBc0IsRUFBQTFMLGNBQUEsS0FBQSxJQUFBLE1BRUE5c0UsT0FBQXdYLGVBQUExaUIsR0FBQXUzRSxPQUFBLFdBQ0EvOEUsSUFBQSxXQUFBLE1BQUF3RixJQUFBdTNFLE9BQUEwTSxVQUNBdnJGLElBQUEwcUYsR0FBQSxTQUVBbDRFLE9BQUF3WCxlQUFBMWlCLEdBQUF1M0UsT0FBQSxXQUNBLzhFLElBQUEsV0FBQSxNQUFBd0YsSUFBQXUzRSxPQUFBMk0sVUFDQXhyRixJQUFBMHFGLEdBQUEsU0FFQWw0RSxPQUFBaTVFLE9BQUFua0YsR0FBQXUzRSxPQUFBcU0sRUFBQUYsRUFDQSxLQUFBLEdBQUFydUYsR0FBQSxFQUFBQSxFQUFBa3VGLEVBQUFodkYsT0FBQWMsSUFDQTJLLEdBQUF1M0UsT0FBQWdNLEVBQUFsdUYsS0FDQSxJQUFBMkssR0FBQXUzRSxPQUFBZ00sRUFBQWx1RixLQUNBLFNBQUEySyxHQUFBdTNFLE9BQUFnTSxFQUFBbHVGLEdBQ0EsS0FBQSxHQUFBQSxHQUFBcVAsRUFBQW5RLE9BQUFjLFNBQ0FpQyxLQUFBMEksR0FBQXUzRSxPQUFBN3lFLEVBQUFyUCxNQUNBMkssR0FBQXUzRSxPQUFBN3lFLEVBQUFyUCxJQUFBK3VGLEVBQUFwa0YsR0FBQXUzRSxPQUFBN3lFLEVBQUFyUCxTQUFBOEssSUFBQWszRSxHQUdBLEtBQUEsR0FBQWhpRixHQUFBLEVBQUFBLEVBQUEySyxHQUFBdTNFLE9BQUE4TSxRQUFBOXZGLE9BQUFjLElBQUEsQ0FDQSxHQUFBaXZGLEdBQUF0a0YsR0FBQXUzRSxPQUFBOE0sUUFBQWh2RixHQUFBMkssT0FDQSxLQUFBLEdBQUE1SCxLQUFBa3NGLElBQ0E1L0UsRUFBQWxQLFFBQUE0QyxHQUNBNEgsR0FBQXUzRSxPQUFBbi9FLEdBQUFnc0YsRUFBQUUsRUFBQWxzRixJQUNBK0gsSUFBQWszRSxHQUNBNzNFLE9BQUFRLEdBQUF1M0UsT0FBQW4vRSxRQUVBLEtBQUFzckYsRUFBQXRyRixLQUNBNEgsR0FBQXUzRSxPQUFBbi9FLEdBQUFrc0YsRUFBQWxzRixJQUdBNEgsR0FBQTJ2QyxVQUNBM3ZDLEdBQUF1M0UsT0FBQWdOLGdCQUNBdmtGLEdBQUF1M0UsT0FBQW1ELFFBQ0EsV0FBQTE2RSxHQUFBdTNFLE9BQUEvNUMsT0FDQXg5QixHQUFBdTNFLE9BQUE3M0QsUUFBQW5yQixTQUNBeUwsR0FBQXUzRSxPQUFBc0ssT0FBQXR0RixTQUNBeUwsR0FBQXUzRSxPQUFBb0YsYUFDQSxpRUFBQWpuRixLQUFBazdDLFVBQUFDLFdBQ0FtcEMsR0FBQSxpQkFFQSxRQUFBd0ssTUFDQSxnQkFBQXhrRixJQUFBdTNFLE9BQUFrTixZQUNBLEtBQUFwUCxFQUFBcVAsTUFBQTFrRixHQUFBdTNFLE9BQUFrTixTQUNBemtGLEdBQUF1M0UsT0FBQTBFLGFBQUEsR0FBQTFvRixPQUFBLDZCQUFBeU0sR0FBQXUzRSxPQUFBa04sU0FDQXprRixHQUFBbTNFLEtBQUFxTSxLQUFBbk8sRUFBQXFQLE1BQUFsL0IsUUFBQSxnQkFBQXhsRCxJQUFBdTNFLE9BQUFrTixPQUNBemtGLEdBQUF1M0UsT0FBQWtOLE9BQ0EsWUFBQXprRixHQUFBdTNFLE9BQUFrTixPQUNBcFAsRUFBQXFQLE1BQUExa0YsR0FBQXUzRSxPQUFBa04sWUFDQW50RixJQUVBLFFBQUEyckYsSUFBQUMsR0FFQSxPQURBLEtBQUFBLElBQUFBLEVBQUFsakYsR0FBQTJrRixzQkFDQXJ0RixLQUFBMEksR0FBQXc4RSxrQkFBQSxDQUVBLEdBQUFvSSxHQUFBNWtGLEdBQUF3OEUsa0JBQUE3akQsYUFBQWtzRCxFQUFBN2tGLEdBQUF3OEUsa0JBQUE5akQsWUFBQW9zRCxFQUFBOWtGLEdBQUF1M0UsT0FBQWhyRCxTQUFBdzRELEVBQUE3QixFQUFBcjFELHdCQUFBbTNELEVBQUF4eEYsT0FBQXc5QyxZQUFBK3pDLEVBQUF4OUMsT0FBQTA5QyxFQUFBLFVBQUFILEdBQ0EsVUFBQUEsR0FDQUUsRUFBQUosR0FDQUcsRUFBQS9zRSxJQUFBNHNFLEVBQ0E1c0UsRUFBQXhrQixPQUFBc29DLFlBQ0FpcEQsRUFBQS9zRSxLQUNBaXRFLEdBQUFMLEVBQUEsRUFBQTFCLEVBQUF2cUQsYUFBQSxFQUdBLElBRkF2RyxFQUFBcHlCLEdBQUF3OEUsa0JBQUEsWUFBQXlJLEdBQ0E3eUQsRUFBQXB5QixHQUFBdzhFLGtCQUFBLGNBQUF5SSxJQUNBamxGLEdBQUF1M0UsT0FBQW1ELE9BQUEsQ0FFQSxHQUFBNXNELEdBQUF0NkIsT0FBQXdvQyxZQUFBK29ELEVBQUFqM0QsS0FDQXdaLEVBQUE5ekMsT0FBQUgsU0FBQTZHLEtBQUF3K0IsWUFBQXFzRCxFQUFBejlDLE1BQ0E0OUMsRUFBQXAzRCxFQUFBKzJELEVBQUFyeEYsT0FBQUgsU0FBQTZHLEtBQUF3K0IsV0FDQXRHLEdBQUFweUIsR0FBQXc4RSxrQkFBQSxZQUFBMEksR0FDQWxsRixHQUFBdTNFLE9BQUFpRCxTQUVBeDZFLEdBQUF3OEUsa0JBQUE5aUYsTUFBQXNlLElBQUFBLEVBQUEsS0FDQWt0RSxHQUtBbGxGLEdBQUF3OEUsa0JBQUE5aUYsTUFBQW8wQixLQUFBLE9BQ0E5dEIsR0FBQXc4RSxrQkFBQTlpRixNQUFBNHRDLE1BQUFBLEVBQUEsT0FMQXRuQyxHQUFBdzhFLGtCQUFBOWlGLE1BQUFvMEIsS0FBQUEsRUFBQSxLQUNBOXRCLEdBQUF3OEUsa0JBQUE5aUYsTUFBQTR0QyxNQUFBLFdBT0EsUUFBQTQwQyxNQUNBbDhFLEdBQUF1M0UsT0FBQUMsWUFBQXgzRSxHQUFBMnZDLFdBRUFxdEMsSUFDQW9DLEtBQ0FuQyxLQUVBLFFBQUFqQyxJQUFBeGlGLEdBQ0FBLEVBQUErdEIsaUJBQ0EvdEIsRUFBQWd1QixpQkFDQSxJQUFBMitELEdBQUEsU0FBQUMsR0FDQSxNQUFBQSxHQUFBcFAsV0FDQW9QLEVBQUFwUCxVQUFBcjZFLFNBQUEsbUJBQ0F5cEYsRUFBQXBQLFVBQUFyNkUsU0FBQSxjQUNBeXBGLEVBQUFwUCxVQUFBcjZFLFNBQUEsZUFFQWtwQixFQUFBcXhELEVBQUExOUUsRUFBQTRRLE9BQUErN0UsRUFDQSxRQUFBN3RGLEtBQUF1dEIsRUFBQSxDQUVBLEdBQUF6YixHQUFBeWIsRUFDQXdnRSxFQUFBcmxGLEdBQUFrNUUsc0JBQUEsR0FBQXByRSxNQUFBMUUsRUFBQWt3RSxRQUFBbGlDLFdBQ0FrdUMsRUFBQUQsRUFBQWhaLGFBQUFyc0UsR0FBQWkzRSxjQUNBLFVBQUFqM0UsR0FBQXUzRSxPQUFBLzVDLElBRUEsSUFEQXg5QixHQUFBZytFLGlCQUFBNTBFLEVBQ0EsV0FBQXBKLEdBQUF1M0UsT0FBQS81QyxLQUNBeDlCLEdBQUF5M0UsZUFBQTROLE9BQ0EsSUFBQSxhQUFBcmxGLEdBQUF1M0UsT0FBQS81QyxLQUFBLENBQ0EsR0FBQXJoQixHQUFBNGhFLEdBQUFzSCxFQUNBbHBFLEdBQ0FuYyxHQUFBeTNFLGNBQUFockUsT0FBQWtsQixTQUFBeFYsR0FBQSxHQUVBbmMsR0FBQXkzRSxjQUFBLzZFLEtBQUEyb0YsT0FFQSxVQUFBcmxGLEdBQUF1M0UsT0FBQS81QyxPQUNBLElBQUF4OUIsR0FBQXkzRSxjQUFBbGpGLFFBQ0F5TCxHQUFBMGhELFFBQ0ExaEQsR0FBQXkzRSxjQUFBLzZFLEtBQUEyb0YsR0FDQSxJQUFBL1AsRUFBQStQLEVBQUFybEYsR0FBQXkzRSxjQUFBLElBQUEsSUFDQXozRSxHQUFBeTNFLGNBQUFqckUsS0FBQSxTQUFBK0QsRUFBQUMsR0FBQSxNQUFBRCxHQUFBNm1DLFVBQUE1bUMsRUFBQTRtQyxZQUdBLElBREErZ0MsSUFDQW1OLEVBQUEsQ0FDQSxHQUFBM0QsR0FBQTNoRixHQUFBazNFLGNBQUFtTyxFQUFBdlosYUFDQTlyRSxJQUFBazNFLFlBQUFtTyxFQUFBdlosY0FDQTlyRSxHQUFBaTNFLGFBQUFvTyxFQUFBaFosV0FDQXNWLEdBQ0EzSCxHQUFBLGdCQUNBQSxHQUFBLGlCQW1DQSxHQWpDQWlELElBQ0FqOUUsR0FBQXUzRSxPQUFBRyxTQUNBMTNFLEdBQUFzNEUsZ0JBQ0F0NEUsR0FBQXUzRSxPQUFBMkYsWUFDQSxJQUFBNUgsRUFBQStQLEVBQUFybEYsR0FBQXUzRSxPQUFBRyxVQUNBMkIsRUFBQXI1RSxHQUFBdTNFLE9BQUFHLFNBQ0FVLEtBQ0FwNEUsR0FBQXUzRSxPQUFBMkYsWUFDQTc1RSxXQUFBLFdBQUEsTUFBQXJELElBQUFpaEYsZUFBQSxHQUFBLElBQ0EsVUFBQWpoRixHQUFBdTNFLE9BQUEvNUMsT0FDQSxJQUFBeDlCLEdBQUF5M0UsY0FBQWxqRixRQUNBZ21GLEdBQUFueEUsR0FDQXBKLEdBQUFrL0Usb0JBQ0FsL0UsR0FBQWsvRSx5QkFDQTVuRixLQUFBMEksR0FBQWkrRSxjQUNBaitFLEdBQUFpK0UsYUFDQWorRSxHQUFBeTdFLEtBQUFsL0UsV0FBQSxHQUFBKzhFLFFBQ0F0NUUsR0FBQW0vRSxvQkFDQW4vRSxHQUFBbS9FLHlCQUNBN25GLEtBQUEwSSxHQUFBaytFLGNBQ0FsK0UsR0FBQWsrRSxhQUNBLEdBQUFwd0UsTUFBQTlOLEdBQUFrM0UsWUFBQWwzRSxHQUFBaTNFLGFBQUEsRUFBQSxJQUdBbUksTUFFQXBGLEdBQUEsWUFDQXNMLEVBR0E1RyxFQUFBLFdBQUEsTUFBQTErRSxJQUFBZytFLGtCQUFBaCtFLEdBQUFnK0UsaUJBQUFsaUUsVUFGQXdpRSxFQUFBbDFFLEVBQUF1MEUsR0FBQSxPQUdBcm1GLEtBQUEwSSxHQUFBNDRFLGFBQ0F2MUUsV0FBQSxXQUFBLFdBQUEvTCxLQUFBMEksR0FBQTQ0RSxhQUFBNTRFLEdBQUE0NEUsWUFBQWxwRSxVQUFBLEtBQ0ExUCxHQUFBdTNFLE9BQUFnTyxjQUFBLENBQ0EsR0FBQUMsR0FBQSxXQUFBeGxGLEdBQUF1M0UsT0FBQS81QyxPQUFBeDlCLEdBQUF1M0UsT0FBQTJGLFdBQ0E1bUIsRUFBQSxVQUFBdDJELEdBQUF1M0UsT0FBQS81QyxNQUNBLElBQUF4OUIsR0FBQXkzRSxjQUFBbGpGLFNBQ0F5TCxHQUFBdTNFLE9BQUEyRixZQUNBc0ksR0FBQWx2QixJQUNBdDJELEdBQUE2ckMsVUFHQSxRQUFBbnpDLElBQUFnckIsRUFBQTlzQixHQUNBLE9BQUE4c0IsR0FBQSxnQkFBQUEsR0FDQXhZLE9BQUFpNUUsT0FBQW5rRixHQUFBdTNFLE9BQUE3ekQsR0FFQTFqQixHQUFBdTNFLE9BQUE3ekQsR0FBQTlzQixFQUNBb0osR0FBQWs4RSxTQUNBSixJQUVBLFFBQUEySixJQUFBQyxFQUFBM3JDLEdBQ0EsR0FBQStwQyxLQUNBLElBQUE0QixZQUFBMS9FLE9BQ0E4OUUsRUFBQTRCLEVBQUF2bEYsSUFBQSxTQUFBMjRDLEdBQUEsTUFBQTk0QyxJQUFBZzhFLFVBQUFsakMsRUFBQWlCLFNBQ0EsSUFBQTJyQyxZQUFBNTNFLE9BQUEsZ0JBQUE0M0UsR0FDQTVCLEdBQUE5akYsR0FBQWc4RSxVQUFBMEosRUFBQTNyQyxRQUNBLElBQUEsZ0JBQUEyckMsR0FDQSxPQUFBMWxGLEdBQUF1M0UsT0FBQS81QyxNQUNBLElBQUEsU0FDQXNtRCxHQUFBOWpGLEdBQUFnOEUsVUFBQTBKLEVBQUEzckMsR0FDQSxNQUNBLEtBQUEsV0FDQStwQyxFQUFBNEIsRUFDQTk2RSxNQUFBNUssR0FBQXUzRSxPQUFBb08sYUFDQXhsRixJQUFBLFNBQUFvdUUsR0FBQSxNQUFBdnVFLElBQUFnOEUsVUFBQXpOLEVBQUF4MEIsSUFDQSxNQUNBLEtBQUEsUUFDQStwQyxFQUFBNEIsRUFDQTk2RSxNQUFBNUssR0FBQW0zRSxLQUFBeU8sZ0JBQ0F6bEYsSUFBQSxTQUFBb3VFLEdBQUEsTUFBQXZ1RSxJQUFBZzhFLFVBQUF6TixFQUFBeDBCLFNBT0EvNUMsSUFBQXUzRSxPQUFBMEUsYUFBQSxHQUFBMW9GLE9BQUEsMEJBQUEwRSxLQUFBOHVFLFVBQUEyZSxJQUNBMWxGLElBQUF5M0UsY0FBQXFNLEVBQUFudUYsT0FBQSxTQUFBbWpELEdBQUEsTUFBQUEsYUFBQWhyQyxPQUFBMnZFLEdBQUEza0MsR0FBQSxLQUNBOTRDLEdBQUF5M0UsY0FBQWpyRSxLQUFBLFNBQUErRCxFQUFBQyxHQUFBLE1BQUFELEdBQUE2bUMsVUFBQTVtQyxFQUFBNG1DLFlBRUEsUUFBQXVnQyxJQUFBcEosRUFBQXdMLEVBQUFoZ0MsR0FFQSxPQURBLEtBQUFnZ0MsSUFBQUEsR0FBQSxHQUNBLElBQUF4TCxJQUFBQSxFQUNBLE1BQUF2dUUsSUFBQTBoRCxNQUFBcTRCLEVBQ0EwTCxJQUFBbFgsRUFBQXgwQixHQUNBLzVDLEdBQUFpaEYsY0FBQWpoRixHQUFBeTNFLGNBQUFsakYsT0FBQSxFQUNBeUwsR0FBQWs1RSxzQkFBQWw1RSxHQUFBeTNFLGNBQUEsR0FDQXozRSxHQUFBazhFLFNBQ0FKLElBQ0F6QyxJQUNBakIsR0FBQTJCLEdBQ0FBLEdBQ0FDLEdBQUEsWUFFQSxRQUFBK0osSUFBQS80RSxHQUNBLE1BQUFBLEdBQ0E3SyxJQUFBLFNBQUEwbEYsR0FDQSxNQUFBLGdCQUFBQSxJQUNBLGdCQUFBQSxJQUNBQSxZQUFBLzNFLE1BQ0E5TixHQUFBZzhFLFVBQUE2SixNQUFBdnVGLElBQUEsR0FFQXV1RixHQUNBLGdCQUFBQSxJQUNBQSxFQUFBOUQsTUFDQThELEVBQUFyMkQsSUFFQXV5RCxLQUFBL2hGLEdBQUFnOEUsVUFBQTZKLEVBQUE5RCxTQUFBenFGLElBQ0FrNEIsR0FBQXh2QixHQUFBZzhFLFVBQUE2SixFQUFBcjJELE9BQUFsNEIsS0FFQXV1RixJQUVBbHdGLE9BQUEsU0FBQWd5QyxHQUFBLE1BQUFBLEtBRUEsUUFBQW0rQyxNQUNBOWxGLEdBQUF5M0UsaUJBQ0F6M0UsR0FBQTJELElBQUEsR0FBQW1LLEtBQ0EsSUFBQWk0RSxHQUFBL2xGLEdBQUF1M0UsT0FBQXlPLGFBQUFobUYsR0FBQXlZLE1BQUE3aEIsS0FDQW12RixJQUNBTixHQUFBTSxFQUFBL2xGLEdBQUF1M0UsT0FBQThLLFdBQ0EsSUFBQUksR0FBQXppRixHQUFBeTNFLGNBQUFsakYsT0FDQXlMLEdBQUF5M0UsY0FBQSxHQUNBejNFLEdBQUF1M0UsT0FBQUcsU0FDQTEzRSxHQUFBdTNFLE9BQUFHLFFBQUF0Z0MsVUFBQXAzQyxHQUFBMkQsSUFBQXl6QyxVQUNBcDNDLEdBQUF1M0UsT0FBQUcsUUFDQTEzRSxHQUFBdTNFLE9BQUE0QixTQUNBbjVFLEdBQUF1M0UsT0FBQTRCLFFBQUEvaEMsVUFBQXAzQyxHQUFBMkQsSUFBQXl6QyxVQUNBcDNDLEdBQUF1M0UsT0FBQTRCLFFBQ0FuNUUsR0FBQTJELEdBQ0EzRCxJQUFBazNFLFlBQUF1TCxFQUFBM1csY0FDQTlyRSxHQUFBaTNFLGFBQUF3TCxFQUFBcFcsV0FDQXJzRSxHQUFBeTNFLGNBQUFsakYsU0FDQXlMLEdBQUFrNUUsc0JBQUFsNUUsR0FBQXkzRSxjQUFBLElBQ0F6M0UsR0FBQXM0RSxpQkFDQXQ0RSxHQUFBdTNFLE9BQUFHLFVBQ0ExM0UsR0FBQXUzRSxPQUFBRyxRQUFBRSxXQUFBLEdBQ0E1M0UsR0FBQXUzRSxPQUFBRyxRQUFBSSxhQUFBLEdBQ0E5M0UsR0FBQXUzRSxPQUFBRyxRQUFBTyxhQUFBLEdBQ0FqNEUsR0FBQW81RSxpQkFDQXA1RSxHQUFBdTNFLE9BQUE0QixVQUNBbjVFLEdBQUF1M0UsT0FBQTRCLFFBQUF2QixXQUFBLEdBQ0E1M0UsR0FBQXUzRSxPQUFBNEIsUUFBQXJCLGFBQUEsR0FDQTkzRSxHQUFBdTNFLE9BQUE0QixRQUFBbEIsYUFBQTs0SUFDQS9zRSxPQUFBd1gsZUFBQTFpQixHQUFBLGlCQUNBeEYsSUFBQSxXQUFBLE1BQUF3RixJQUFBaW1GLGdCQUNBdnRGLElBQUEsU0FBQWllLEdBQ0EzVyxHQUFBaW1GLGVBQUF0dkUsRUFDQTNXLEdBQUF3OEUsbUJBQ0FwcUQsRUFBQXB5QixHQUFBdzhFLGtCQUFBLGdCQUFBN2xFLEdBQ0Fzc0UsUUFJQSxRQUFBckYsSUFBQXRFLEVBQUE0TSxHQUNBLFdBQUE1dUYsS0FBQTBJLEdBQUF1M0UsWUFBQWpnRixLQUFBMEksR0FBQXUzRSxPQUFBcUcsV0FDQTU5RSxHQUFBdTNFLE9BQUFxRyxXQUFBdEUsRUFBQTRNLEdBQ0FBLEVBQ0F0N0UsTUFBQSxJQUNBekssSUFBQSxTQUFBa2xELEVBQUFod0QsRUFBQTJWLEdBQ0EsTUFBQW03RSxHQUFBOWdDLElBQUEsT0FBQXI2QyxFQUFBM1YsRUFBQSxHQUNBOHdGLEVBQUE5Z0MsR0FBQWkwQixFQUFBdDVFLEdBQUFtM0UsS0FBQW4zRSxHQUFBdTNFLFFBQ0EsT0FBQWx5QixFQUFBQSxFQUFBLEtBRUF4OUMsS0FBQSxJQUVBLFFBQUFtMEUsSUFBQXpOLEVBQUE2WCxFQUFBM1EsR0FDQSxHQUFBLElBQUFsSCxHQUFBQSxFQUFBLENBRUEsR0FBQThYLEdBQ0FDLEVBQUEvWCxDQUNBLElBQUFBLFlBQUF6Z0UsTUFDQXU0RSxFQUFBLEdBQUF2NEUsTUFBQXlnRSxFQUFBbjNCLGVBQ0EsSUFBQSxnQkFBQW0zQixRQUNBajNFLEtBQUFpM0UsRUFBQWdZLFFBQ0FGLEVBQUEsR0FBQXY0RSxNQUFBeWdFLE9BQ0EsSUFBQSxnQkFBQUEsR0FBQSxDQUNBLEdBQUF4MEIsR0FBQXFzQyxJQUFBcG1GLEdBQUF1M0UsUUFBQWxDLEVBQUFvTyxlQUFBcEIsV0FDQW1FLEVBQUFudkUsT0FBQWszRCxHQUFBaGhFLE1BQ0EsSUFBQSxVQUFBaTVFLEVBQ0FILEVBQUEsR0FBQXY0RSxNQUNBMm5FLEdBQUEsTUFFQSxJQUFBLEtBQUEvL0UsS0FBQTh3RixJQUNBLE9BQUE5d0YsS0FBQTh3RixHQUNBSCxFQUFBLEdBQUF2NEUsTUFBQXlnRSxPQUNBLElBQUF2dUUsR0FBQXUzRSxRQUFBdjNFLEdBQUF1M0UsT0FBQXlFLFVBQ0FxSyxFQUFBcm1GLEdBQUF1M0UsT0FBQXlFLFVBQUF6TixFQUFBeDBCLE9BQ0EsQ0FDQXNzQyxFQUNBcm1GLEdBQUF1M0UsUUFBQXYzRSxHQUFBdTNFLE9BQUFDLFdBRUEsR0FBQTFwRSxPQUFBLEdBQUFBLE9BQUE0bkUsU0FBQSxFQUFBLEVBQUEsRUFBQSxJQURBLEdBQUE1bkUsT0FBQSxHQUFBQSxPQUFBZytELGNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBR0EsS0FBQSxHQURBeHdELE9BQUEsR0FBQW1yRSxLQUNBcHhGLEVBQUEsRUFBQXF4RixFQUFBLEVBQUFDLEVBQUEsR0FBQXR4RixFQUFBMGtELEVBQUF4bEQsT0FBQWMsSUFBQSxDQUNBLEdBQUFpb0IsR0FBQXk4QixFQUFBMWtELEdBQ0F1eEYsRUFBQSxPQUFBdHBFLEVBQ0FwRyxFQUFBLE9BQUE2aUMsRUFBQTFrRCxFQUFBLElBQUF1eEYsQ0FDQSxJQUFBQyxFQUFBdnBFLEtBQUFwRyxFQUFBLENBQ0F5dkUsR0FBQUUsRUFBQXZwRSxFQUNBLElBQUFubkIsR0FBQSxHQUFBMmYsUUFBQTZ3RSxHQUFBbHRGLEtBQUE4MEUsRUFDQXA0RSxLQUFBbWxCLEdBQUEsSUFDQW1yRSxFQUFBLE1BQUFucEUsRUFBQSxPQUFBLFlBQ0FoZ0IsR0FBQXdwRixFQUFBeHBFLEdBQ0EvYSxJQUFBcE0sSUFBQXV3RixTQUlBRSxLQUNBRCxHQUFBLElBQ0FGLEdBQUFyMUMsUUFBQSxTQUFBd3JDLEdBQ0EsR0FBQXQvRSxHQUFBcy9FLEVBQUF0L0UsR0FBQWlGLEVBQUFxNkUsRUFBQXI2RSxHQUNBLE9BQUE4akYsR0FDQS9vRixFQUFBK29GLEVBQUE5akYsRUFBQXZDLEdBQUFtM0UsT0FBQWtQLElBR0FBLEVBQUEvcUUsRUFBQStxRSxNQUFBL3VGLElBR0EsTUFBQSt1RixhQUFBdjRFLFFBSUEsSUFBQTJuRSxHQUNBNFEsRUFBQTNRLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQTJRLE9BTEFybUYsSUFBQXUzRSxPQUFBMEUsYUFBQSxHQUFBMW9GLE9BQUEsMEJBQUEreUYsS0FPQSxRQUFBUyxNQUlBLEdBSEEvbUYsR0FBQXlZLE1BQUF6WSxHQUFBdTNFLE9BQUE3N0UsS0FDQTI4QyxFQUFBd3hCLGNBQUEsZ0JBQ0F4eEIsR0FDQXI0QyxHQUFBeVksTUFFQSxXQURBelksSUFBQXUzRSxPQUFBMEUsYUFBQSxHQUFBMW9GLE9BQUEsbUNBR0F5TSxJQUFBeVksTUFBQTBvRSxNQUFBbmhGLEdBQUF5WSxNQUFBamtCLEtBQ0F3TCxHQUFBeVksTUFBQWprQixLQUFBLE9BQ0F3TCxHQUFBeVksTUFBQXU5RCxVQUFBbjRFLElBQUEsbUJBQ0FtQyxHQUFBeTZFLE9BQUF6NkUsR0FBQXlZLE1BQ0F6WSxHQUFBdTNFLE9BQUE4RixXQUNBcjlFLEdBQUFxOUUsU0FBQXRwRixFQUFBaU0sR0FBQXlZLE1BQUE5akIsU0FBQXFMLEdBQUF5WSxNQUFBTixVQUFBLElBQUFuWSxHQUFBdTNFLE9BQUF5UCxlQUNBaG5GLEdBQUF5NkUsT0FBQXo2RSxHQUFBcTlFLFNBQ0FyOUUsR0FBQXE5RSxTQUFBajJCLFlBQUFwbkQsR0FBQXlZLE1BQUEydUMsWUFDQXBuRCxHQUFBcTlFLFNBQUF4c0UsU0FBQTdRLEdBQUF5WSxNQUFBNUgsU0FDQTdRLEdBQUFxOUUsU0FBQTRKLFNBQUFqbkYsR0FBQXlZLE1BQUF3dUUsU0FDQWpuRixHQUFBcTlFLFNBQUE3b0YsS0FBQSxPQUNBd0wsR0FBQXlZLE1BQUFqa0IsS0FBQSxVQUNBd0wsR0FBQXUzRSxPQUFBaUQsUUFBQXg2RSxHQUFBeVksTUFBQXRrQixZQUNBNkwsR0FBQXlZLE1BQUF0a0IsV0FBQXMyQixhQUFBenFCLEdBQUFxOUUsU0FBQXI5RSxHQUFBeVksTUFBQTlILGNBRUEzUSxHQUFBdTNFLE9BQUEwSyxZQUNBamlGLEdBQUF5NkUsT0FBQXJyRSxhQUFBLFdBQUEsWUFDQXBQLEdBQUEya0YsaUJBQUEza0YsR0FBQXUzRSxPQUFBMkwsaUJBQUFsakYsR0FBQXk2RSxPQUVBLFFBQUFQLE1BQ0EsR0FBQWdOLEdBQUFsbkYsR0FBQXUzRSxPQUFBMkYsV0FDQWw5RSxHQUFBdTNFLE9BQUFDLFdBQUEsT0FBQSxpQkFDQSxNQUNBeDNFLElBQUFnaEYsWUFBQWp0RixFQUFBLFFBQUFpTSxHQUFBeVksTUFBQU4sVUFBQSxxQkFDQW5ZLEdBQUFnaEYsWUFBQXh5RCxLQUFBeHVCLEdBQUF5WSxNQUFBbGdCLGFBQUEsU0FBQSxNQUNBeUgsR0FBQWdoRixZQUFBL2tFLFNBQUEsRUFDQWpjLEdBQUFnaEYsWUFBQXhzRixLQUFBMHlGLEVBQ0FsbkYsR0FBQWdoRixZQUFBbndFLFNBQUE3USxHQUFBeVksTUFBQTVILFNBQ0E3USxHQUFBZ2hGLFlBQUE1NUIsWUFBQXBuRCxHQUFBeVksTUFBQTJ1QyxZQUNBcG5ELEdBQUFtbkYsZ0JBQ0EsbUJBQUFELEVBQ0EsZ0JBQ0EsU0FBQUEsRUFBQSxRQUFBLFFBQ0FsbkYsR0FBQXkzRSxjQUFBbGpGLFNBQ0F5TCxHQUFBZ2hGLFlBQUE3aEYsYUFBQWEsR0FBQWdoRixZQUFBcHFGLE1BQUFvSixHQUFBNDlFLFdBQUE1OUUsR0FBQXkzRSxjQUFBLEdBQUF6M0UsR0FBQW1uRixrQkFFQW5uRixHQUFBdTNFLE9BQUFHLFVBQ0ExM0UsR0FBQWdoRixZQUFBN3JDLElBQUFuMUMsR0FBQTQ5RSxXQUFBNTlFLEdBQUF1M0UsT0FBQUcsUUFBQSxVQUNBMTNFLEdBQUF1M0UsT0FBQTRCLFVBQ0FuNUUsR0FBQWdoRixZQUFBOStFLElBQUFsQyxHQUFBNDlFLFdBQUE1OUUsR0FBQXUzRSxPQUFBNEIsUUFBQSxVQUNBbjVFLEdBQUF5WSxNQUFBamtCLEtBQUEsYUFDQThDLEtBQUEwSSxHQUFBcTlFLFdBQ0FyOUUsR0FBQXE5RSxTQUFBN29GLEtBQUEsU0FDQSxLQUNBd0wsR0FBQXlZLE1BQUF0a0IsWUFDQTZMLEdBQUF5WSxNQUFBdGtCLFdBQUFzMkIsYUFBQXpxQixHQUFBZ2hGLFlBQUFoaEYsR0FBQXlZLE1BQUE5SCxhQUVBLE1BQUFpc0UsSUFDQWxnRCxFQUFBMThCLEdBQUFnaEYsWUFBQSxTQUFBLFNBQUF4b0YsR0FDQXdILEdBQUEyM0UsUUFBQW4vRSxFQUFBNFEsT0FBQXhTLE9BQUEsRUFBQW9KLEdBQUFtbkYsaUJBQ0FuTixHQUFBLFlBQ0FBLEdBQUEsYUFHQSxRQUFBdjFFLE1BQ0EsR0FBQXpFLEdBQUFraEYsT0FDQSxNQUFBbGhGLElBQUE2ckMsT0FDQTdyQyxJQUFBbzVCLE9BRUEsUUFBQTRnRCxJQUFBdjhFLEVBQUExRixHQUNBLEdBQUEyTSxHQUFBMUUsR0FBQXUzRSxPQUFBOTVFLEVBQ0EsUUFBQW5HLEtBQUFvTixHQUFBQSxFQUFBblEsT0FBQSxFQUNBLElBQUEsR0FBQWMsR0FBQSxFQUFBcVAsRUFBQXJQLElBQUFBLEVBQUFxUCxFQUFBblEsT0FBQWMsSUFDQXFQLEVBQUFyUCxHQUFBMkssR0FBQXkzRSxjQUFBejNFLEdBQUF5WSxNQUFBN2hCLE1BQUFvSixHQUFBakksRUFFQSxjQUFBMEYsSUFDQXVDLEdBQUF5WSxNQUFBNmpFLGNBQUFELEdBQUEsV0FDQXI4RSxHQUFBeVksTUFBQTZqRSxjQUFBRCxHQUFBLFdBR0EsUUFBQUEsSUFBQXhuRixHQUNBLEdBQUEyRCxHQUFBbkYsU0FBQWdwRixZQUFBLFFBRUEsT0FEQTdqRixHQUFBNHVGLFVBQUF2eUYsR0FBQSxHQUFBLEdBQ0EyRCxFQUVBLFFBQUF1bEYsSUFBQXhQLEdBQ0EsSUFBQSxHQUFBbDVFLEdBQUEsRUFBQUEsRUFBQTJLLEdBQUF5M0UsY0FBQWxqRixPQUFBYyxJQUNBLEdBQUEsSUFBQWlnRixFQUFBdDFFLEdBQUF5M0UsY0FBQXBpRixHQUFBazVFLEdBQ0EsTUFBQSxHQUFBbDVFLENBRUEsUUFBQSxFQUVBLFFBQUE4b0YsSUFBQTVQLEdBQ0EsUUFBQSxVQUFBdnVFLEdBQUF1M0UsT0FBQS81QyxNQUFBeDlCLEdBQUF5M0UsY0FBQWxqRixPQUFBLEtBRUErZ0YsRUFBQS9HLEVBQUF2dUUsR0FBQXkzRSxjQUFBLEtBQUEsR0FDQW5DLEVBQUEvRyxFQUFBdnVFLEdBQUF5M0UsY0FBQSxLQUFBLEdBRUEsUUFBQTJILE1BQ0FwL0UsR0FBQXUzRSxPQUFBQyxZQUFBeDNFLEdBQUEydkMsV0FBQTN2QyxHQUFBNjZFLFdBRUE3NkUsR0FBQXkvRSxvQkFBQWhqRixZQUNBbWtGLEVBQUE1Z0YsR0FBQWkzRSxhQUFBajNFLEdBQUF1M0UsT0FBQXNKLHNCQUFBN2dGLEdBQUFtM0UsTUFBQSxJQUNBbjNFLEdBQUEyNUUsbUJBQUEvaUYsTUFBQW9KLEdBQUFrM0UsWUFBQTdyRSxXQUNBckwsR0FBQWsvRSx3QkFDQTVuRixLQUFBMEksR0FBQXUzRSxPQUFBRyxVQUNBMTNFLEdBQUFrM0UsY0FBQWwzRSxHQUFBdTNFLE9BQUFHLFFBQUE1TCxjQUNBOXJFLEdBQUFpM0UsY0FBQWozRSxHQUFBdTNFLE9BQUFHLFFBQUFyTCxXQUNBcnNFLEdBQUFrM0UsWUFBQWwzRSxHQUFBdTNFLE9BQUFHLFFBQUE1TCxlQUNBOXJFLEdBQUFtL0Usd0JBQ0E3bkYsS0FBQTBJLEdBQUF1M0UsT0FBQTRCLFVBQ0FuNUUsR0FBQWszRSxjQUFBbDNFLEdBQUF1M0UsT0FBQTRCLFFBQUFyTixjQUNBOXJFLEdBQUFpM0UsYUFBQSxFQUFBajNFLEdBQUF1M0UsT0FBQTRCLFFBQUE5TSxXQUNBcnNFLEdBQUFrM0UsWUFBQWwzRSxHQUFBdTNFLE9BQUE0QixRQUFBck4sZ0JBRUEsUUFBQXNNLElBQUEyQixHQUVBLE9BREEsS0FBQUEsSUFBQUEsR0FBQSxJQUNBLzVFLEdBQUF5M0UsY0FBQWxqRixPQUNBLE1BQUF5TCxJQUFBMGhELE1BQUFxNEIsT0FDQXppRixLQUFBMEksR0FBQWdoRixhQUFBaGhGLEdBQUFtbkYsa0JBQ0FubkYsR0FBQWdoRixZQUFBcHFGLFVBQ0FVLEtBQUEwSSxHQUFBazVFLHNCQUNBbDVFLEdBQUE0OUUsV0FBQTU5RSxHQUFBazVFLHNCQUFBbDVFLEdBQUFtbkYsaUJBQ0EsR0FFQSxJQUFBRSxHQUFBLFVBQUFybkYsR0FBQXUzRSxPQUFBLzVDLEtBQ0F4OUIsR0FBQXUzRSxPQUFBb08sWUFDQTNsRixHQUFBbTNFLEtBQUF5TyxjQUNBNWxGLElBQUF5WSxNQUFBN2hCLE1BQUFvSixHQUFBeTNFLGNBQ0F0M0UsSUFBQSxTQUFBbW5GLEdBQUEsTUFBQXRuRixJQUFBNDlFLFdBQUEwSixFQUFBdG5GLEdBQUF1M0UsT0FBQThLLGNBQ0F4NkUsS0FBQXcvRSxPQUNBL3ZGLEtBQUEwSSxHQUFBcTlFLFdBQ0FyOUUsR0FBQXE5RSxTQUFBem1GLE1BQUFvSixHQUFBeTNFLGNBQ0F0M0UsSUFBQSxTQUFBbW5GLEdBQUEsTUFBQXRuRixJQUFBNDlFLFdBQUEwSixFQUFBdG5GLEdBQUF1M0UsT0FBQTZLLGFBQ0F2NkUsS0FBQXcvRSxLQUVBLElBQUF0TixHQUNBQyxHQUFBLGlCQUVBLFFBQUFjLElBQUF0aUYsR0FDQUEsRUFBQSt0QixnQkFDQSxJQUFBZ2hFLEdBQUF2bkYsR0FBQTI1RSxtQkFBQXhsRixZQUNBNkwsR0FBQTI1RSxtQkFBQXhsRixXQUFBd0gsU0FBQW5ELEVBQUE0USxPQUNBLElBQUE1USxFQUFBNFEsU0FBQXBKLEdBQUF5L0UscUJBQUE4SCxFQUFBLENBQ0EsR0FBQTdOLEdBQUE3RCxFQUFBcjlFLEVBQ0ErdUYsSUFDQTNOLEdBQUE1NUUsR0FBQWszRSxZQUFBd0MsR0FDQWxoRixFQUFBNFEsT0FBQXhTLE1BQUFvSixHQUFBazNFLFlBQUE3ckUsWUFHQXJMLEdBQUF5K0UsWUFBQS9FLEdBQUEsR0FBQSxJQUdBLFFBQUFxQixJQUFBdmlGLEdBQ0EsR0FBQWd2RixHQUFBeG5GLEdBQUF1L0UsYUFBQTVqRixTQUFBbkQsRUFBQTRRLFFBQ0FxK0UsRUFBQXpuRixHQUFBNC9FLGFBQUFqa0YsU0FBQW5ELEVBQUE0USxPQUNBbytFLElBQUFDLEVBQ0FoSixFQUFBK0ksR0FBQSxFQUFBLEdBQ0FodkYsRUFBQTRRLFNBQUFwSixHQUFBMjVFLG9CQUNBbmhGLEVBQUErdEIsaUJBQ0F2bUIsR0FBQTI1RSxtQkFBQWpxRSxVQUVBLFlBQUFsWCxFQUFBNFEsT0FBQStPLFVBQ0FuWSxHQUFBNDVFLFdBQUE1NUUsR0FBQWszRSxZQUFBLEdBQ0EsY0FBQTErRSxFQUFBNFEsT0FBQStPLFdBQ0FuWSxHQUFBNDVFLFdBQUE1NUUsR0FBQWszRSxZQUFBLEdBRUEsUUFBQW1CLElBQUE3L0UsR0FDQUEsRUFBQSt0QixnQkFDQSxJQUFBbWhFLEdBQUEsWUFBQWx2RixFQUFBaEUsS0FBQWlrQixFQUFBamdCLEVBQUE0USxXQUNBOVIsS0FBQTBJLEdBQUF5NEUsTUFBQWpnRixFQUFBNFEsU0FBQXBKLEdBQUF5NEUsT0FDQXo0RSxHQUFBeTRFLEtBQUFoOEUsWUFDQXVELEdBQUFtM0UsS0FBQXNCLEtBQUEsT0FBQXo0RSxHQUFBeTRFLEtBQUFoOEUsWUFBQSxFQUFBLEdBQ0EsSUFBQTA0QyxHQUFBazhCLE9BQUE1NEQsRUFBQTA4QixLQUFBanpDLEVBQUFtdkUsT0FBQTU0RCxFQUFBdlcsS0FBQXNzQixFQUFBNmlELE9BQUE1NEQsRUFBQStWLE1BQUF3RCxFQUFBTCxTQUFBbFosRUFBQTdoQixNQUFBLElBQUE4aUYsRUFBQWxoRixFQUFBa2hGLFFBQ0FnTyxFQUNBLEtBQUFsdkYsRUFBQXNMLE1BQUEsR0FBQSxFQUNBN0IsS0FBQUMsS0FBQSxFQUFBRCxLQUFBa3pDLElBQUEsRUFBQTM4QyxFQUFBczlFLGFBQUF0OUUsRUFBQXU5RSxVQUFBLEdBQ0E0UixFQUFBMzFELEVBQUF4RCxFQUFBa3JELENBQ0EsUUFBQSxLQUFBamhFLEVBQUE3aEIsT0FBQSxJQUFBNmhCLEVBQUE3aEIsTUFBQXJDLE9BQUEsQ0FDQSxHQUFBcXpGLEdBQUFudkUsSUFBQXpZLEdBQUE0NEUsWUFBQWlQLEVBQUFwdkUsSUFBQXpZLEdBQUE2NEUsYUFDQThPLEdBQUF4eUMsR0FDQXd5QyxFQUNBemxGLEVBQ0F5bEYsRUFDQWpQLEdBQUFrUCxJQUNBbFAsRUFBQWtQLElBQUFsUCxHQUFBMTRFLEdBQUF5NEUsT0FDQW9QLEdBQ0ExTCxNQUFBN2tGLElBQUEsRUFBQTBJLEdBQUE0NEUsY0FFQStPLEVBQUF6bEYsSUFDQXlsRixFQUNBbHZFLElBQUF6WSxHQUFBNDRFLFlBQUErTyxFQUFBemxGLEVBQUF3MkUsR0FBQTE0RSxHQUFBeTRFLE1BQUF0akMsRUFDQTB5QyxHQUNBMUwsTUFBQTdrRixHQUFBLEVBQUEwSSxHQUFBNDRFLGNBRUE1NEUsR0FBQXk0RSxNQUNBbVAsSUFDQSxJQUFBcDVELEVBQ0FtNUQsRUFBQTMxRCxJQUFBLEdBQ0EvdkIsS0FBQWdsQyxJQUFBMGdELEVBQUEzMUQsR0FBQXhELEtBQ0F4dUIsR0FBQXk0RSxLQUFBaDhFLFlBQUEsT0FBQXVELEdBQUF5NEUsS0FBQWg4RSxZQUFBLEtBQUEsTUFDQWdjLEVBQUE3aEIsTUFBQTJpRixFQUFBb08sSUF0cERBLEdBQUEzbkYsTUEwcERBLE9BenBEQUEsSUFBQWc4RSxVQUFBQSxHQUNBaDhFLEdBQUE0OUUsV0FBQUEsR0FDQTU5RSxHQUFBdTdFLGtCQUNBdjdFLEdBQUE2NUUsYUFDQTc1RSxHQUFBOG5GLE1BQUFwckQsRUFDQTE4QixHQUFBK25GLGtCQUFBMU8sRUFDQXI1RSxHQUFBeStFLFlBQUFBLEVBQ0F6K0UsR0FBQTQ1RSxXQUFBQSxHQUNBNTVFLEdBQUEwaEQsTUFBQUEsRUFDQTFoRCxHQUFBNnJDLE1BQUFBLEVBQ0E3ckMsR0FBQWdvRixlQUFBajBGLEVBQ0FpTSxHQUFBczVDLFFBQUFBLEVBQ0F0NUMsR0FBQXk5RSxVQUFBQSxHQUNBejlFLEdBQUE4N0UsV0FBQUEsRUFDQTk3RSxHQUFBbzVCLEtBQUFBLEdBQ0FwNUIsR0FBQWs4RSxPQUFBQSxHQUNBbDhFLEdBQUF0SCxJQUFBQSxHQUNBc0gsR0FBQTIzRSxRQUFBQSxHQUNBMzNFLEdBQUF5RSxPQUFBQSxHQVlBLFdBQ0F6RSxHQUFBcTRDLFFBQUFyNEMsR0FBQXlZLE1BQUE0L0IsRUFDQXI0QyxHQUFBa2hGLFFBQUEsRUFDQW9DLEtBQ0FrQixLQUNBdUMsS0FDQWpCLEtBQ0FsUCxJQUNBNTJFLEdBQUEydkMsVUFDQTRzQyxJQUNBdEMsS0FDQWo2RSxHQUFBeTNFLGNBQUFsakYsUUFBQXlMLEdBQUF1M0UsT0FBQUMsY0FDQXgzRSxHQUFBdTNFLE9BQUEyRixZQUNBN0QsRUFBQXI1RSxHQUFBdTNFLE9BQUFDLFdBQ0F4M0UsR0FBQWs1RSx1QkFBQWw1RSxHQUFBdTNFLE9BQUFHLFlBQ0FwZ0YsSUFFQThnRixJQUFBLElBRUFwNEUsR0FBQWloRixjQUNBamhGLEdBQUF5M0UsY0FBQWxqRixPQUFBLEdBQUF5TCxHQUFBdTNFLE9BQUFDLGVBQ0FsZ0YsS0FBQTBJLEdBQUE4OEUsaUJBQUF4bEYsS0FBQTBJLEdBQUFzNkUsZ0JBQ0F0NkUsR0FBQXc4RSxrQkFBQTlpRixNQUFBa0gsTUFDQVosR0FBQXM2RSxjQUFBNWhELFlBQUExNEIsR0FBQTg4RSxZQUFBcGtELFlBQUEsTUFFQTE0QixHQUFBMnZDLFVBQ0FzekMsS0FDQWpKLEdBQUEsY0FnbURBaDZFLEdBRUEsUUFBQWlvRixHQUFBQyxFQUFBM1EsR0FHQSxJQUFBLEdBRkF4N0UsR0FBQWlLLE1BQUFqRCxVQUFBeEwsTUFBQWpDLEtBQUE0eUYsR0FDQUMsS0FDQTl5RixFQUFBLEVBQUFBLEVBQUEwRyxFQUFBeEgsT0FBQWMsSUFBQSxDQUNBLEdBQUFzSyxHQUFBNUQsRUFBQTFHLEVBQ0EsS0FDQSxHQUFBLE9BQUFzSyxFQUFBcEgsYUFBQSxnQkFDQSxhQUNBakIsS0FBQXFJLEVBQUFzb0YsYUFDQXRvRixFQUFBc29GLFdBQUEzdUMsVUFDQTM1QyxFQUFBc29GLGVBQUEzd0YsSUFFQXFJLEVBQUFzb0YsV0FBQXZSLEVBQUEvMkUsRUFBQTQzRSxPQUNBNFEsRUFBQXpyRixLQUFBaUQsRUFBQXNvRixZQUVBLE1BQUF6dkYsR0FDQW1wQixRQUFBNVcsTUFBQXZTLElBR0EsTUFBQSxLQUFBMnZGLEVBQUE1ekYsT0FBQTR6RixFQUFBLEdBQUFBLEVBbmhFQSxHQUFBM0UsR0FBQXQ0RSxPQUFBaTVFLFFBQUEsU0FBQXQvRCxHQUNBLElBQUEsR0FBQXBiLEdBQUFwVSxFQUFBLEVBQUEwb0IsRUFBQXBnQixVQUFBcEosT0FBQWMsRUFBQTBvQixFQUFBMW9CLElBQUEsQ0FDQW9VLEVBQUE5TCxVQUFBdEksRUFDQSxLQUFBLEdBQUF1NUIsS0FBQW5sQixHQUFBeUIsT0FBQW5JLFVBQUF3SSxlQUFBalcsS0FBQW1VLEVBQUFtbEIsS0FBQS9KLEVBQUErSixHQUFBbmxCLEVBQUFtbEIsSUFFQSxNQUFBL0osSUFVQSs3RCxFQUFBLFNBQUF3SCxFQUFBNUgsRUFBQWlFLEdBQUEsTUFBQUEsR0FBQTRELE9BQUE3SCxFQUFBLFlBQUEsWUFBQTRILElBQ0EvSixFQUFBLFNBQUFpSyxHQUNBLEdBQUFDLEdBQUEsR0FBQXo2RSxNQUFBdzZFLEVBQUF4YyxjQUFBLEVBQUEsRUFDQSxPQUFBN3BFLE1BQUFraUMsT0FBQW1rRCxFQUFBbHhDLFVBQUFteEMsRUFBQW54QyxXQUFBLE1BQ0FteEMsRUFBQTNKLFNBQ0EsR0FDQSxJQUVBLzNFLEdBQ0FnOEUsSUFBQSxPQUdBdGxELEdBQ0F5bUQsWUFDQUgsV0FDQTVCLFlBQUEsRUFDQUcsVUFBQSxTQUNBL0UsVUFBQSxFQUNBMkosY0FBQSxxQkFDQXYzRCxRQUFBLGdCQUFBajhCLFVBQ0EsSUFBQUEsT0FBQW85QyxVQUFBQyxVQUFBcjdDLFFBQUEsUUFDQXFvRixlQUFBLFNBQ0FqRCxZQUFBLEVBQ0EySyxlQUFBLEVBQ0FJLFlBQUEsS0FDQXRELFdBQUEsUUFDQXhLLFlBQUEsR0FDQUUsY0FBQSxFQUNBRyxlQUFBLEVBQ0F4NEQsV0FDQTZrRSxlQUFBLEVBQ0ExQyxVQUNBN0osZUFBQSxFQUNBa0YsWUFBQSxFQUNBakIsYUFBQXQ2RCxRQUFBQyxLQUNBeThELFFBQUFBLEVBQ0E2QixjQUFBLEVBQ0FzQix3QkFDQTlHLFFBQUEsRUFDQStKLE9BQUEsVUFDQXRFLGdCQUFBLEVBQ0EzaUQsS0FBQSxTQUNBcWlELFVBQUEseU9BQ0FySSxZQUFBLEVBQ0FnUixZQUNBQyxXQUNBQyxlQUNBQyxhQUNBM3NCLGFBQ0E0c0IsaUJBQ0FDLFVBQ0FDLGlCQUNBQyxXQUNBQyxpQkFDQUMsZ0JBQ0E1RSxXQUNBOTNELFNBQUEsT0FDQTIyRCxvQkFBQTVyRixHQUNBa29GLFVBQUEsdU9BQ0FxQix1QkFBQSxFQUNBckcsUUFBQSxFQUNBaEIsV0FBQSxFQUNBbUQsYUFBQSxFQUNBamhGLE1BQUEsR0FHQXd0RixHQUNBM0ksVUFDQUMsV0FBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxPQUNBMkksVUFDQSxTQUNBLFNBQ0EsVUFDQSxZQUNBLFdBQ0EsU0FDQSxhQUdBZCxRQUNBN0gsV0FDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FFQTJJLFVBQ0EsVUFDQSxXQUNBLFFBQ0EsUUFDQSxNQUNBLE9BQ0EsT0FDQSxTQUNBLFlBQ0EsVUFDQSxXQUNBLGFBR0EvUixhQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxJQUNBeUgsZUFBQSxFQUNBdUssUUFBQSxTQUFBQyxHQUNBLEdBQUE1L0UsR0FBQTQvRSxFQUFBLEdBQ0EsSUFBQTUvRSxFQUFBLEdBQUFBLEVBQUEsR0FDQSxNQUFBLElBQ0EsUUFBQUEsRUFBQSxJQUNBLElBQUEsR0FDQSxNQUFBLElBQ0EsS0FBQSxHQUNBLE1BQUEsSUFDQSxLQUFBLEdBQ0EsTUFBQSxJQUNBLFNBQ0EsTUFBQSxPQUdBbThFLGVBQUEsT0FDQW5GLGlCQUFBLEtBQ0FmLFlBQUEsc0JBQ0FXLFlBQUEsa0JBQ0E1SCxNQUFBLEtBQUEsT0FHQWMsRUFBQSxTQUFBK1AsR0FBQSxPQUFBLElBQUFBLEdBQUEveEYsT0FBQSxJQUNBbWhGLEVBQUEsU0FBQS9oRSxHQUFBLE9BQUEsSUFBQUEsRUFBQSxFQUFBLEdBZ0JBeXRFLEVBQUEsU0FBQTl2RixHQUNBLE1BQUFBLGFBQUEwUixPQUFBMVIsR0FBQUEsSUEwQ0FpMUYsRUFBQSxhQUNBekMsR0FDQTBDLEVBQUFELEVBQ0FFLEVBQUEsU0FBQW5RLEVBQUFvUSxFQUFBakYsR0FDQW5MLEVBQUFxUSxTQUFBbEYsRUFBQTRELE9BQUFjLFNBQUEzekYsUUFBQWswRixLQUVBRSxFQUFBLFNBQUF0USxFQUFBZCxHQUNBYyxFQUFBNUQsU0FBQTl5RSxXQUFBNDFFLEtBRUFxUixFQUFBLFNBQUF2USxFQUFBZCxHQUNBYyxFQUFBNUQsU0FBQTl5RSxXQUFBNDFFLEtBRUFzUixFQUFBLFNBQUF4USxFQUFBOEwsR0FDQTlMLEVBQUEzQixRQUFBLzBFLFdBQUF3aUYsS0FFQTJFLEVBQUEsU0FBQXpRLEVBQUFiLEdBQ0FhLEVBQUE1RCxTQUFBNEQsRUFBQTFCLFdBQUEsR0FBQSxHQUFBYyxFQUFBLE1BQUFoakYsS0FBQStpRixNQUVBdVIsRUFBQSxTQUFBMVEsRUFBQTJRLEVBQUF4RixHQUNBbkwsRUFBQXFRLFNBQUFsRixFQUFBNEQsT0FBQTdILFVBQUFockYsUUFBQXkwRixLQUVBQyxFQUFBLFNBQUE1USxFQUFBTixHQUNBTSxFQUFBNlEsV0FBQXZuRixXQUFBbzJFLEtBRUFvUixFQUFBLFNBQUEvekYsRUFBQWcwRixHQUFBLE1BQUEsSUFBQXY4RSxNQUFBLElBQUFsTCxXQUFBeW5GLEtBQ0FDLEVBQUEsU0FBQWhSLEVBQUFpUixHQUNBLEdBQUFDLEdBQUE3NEQsU0FBQTQ0RCxFQUNBLE9BQUEsSUFBQXo4RSxNQUFBd3JFLEVBQUF4TixjQUFBLEVBQUEsRUFBQSxHQUFBMGUsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLElBRUFDLEVBQUEsU0FBQW5SLEVBQUEzTyxHQUNBMk8sRUFBQW9SLFlBQUE5bkYsV0FBQStuRSxLQUVBZ2dCLEVBQUEsU0FBQXQwRixFQUFBdTBGLEdBQUEsTUFBQSxJQUFBOThFLE1BQUE4OEUsSUFDQTl4QyxFQUFBLFNBQUF3Z0MsRUFBQThMLEdBQ0E5TCxFQUFBM0IsUUFBQS8wRSxXQUFBd2lGLEtBRUFwWCxFQUFBLFNBQUFzTCxFQUFBZCxHQUNBYyxFQUFBNUQsU0FBQTl5RSxXQUFBNDFFLEtBRUFuakYsRUFBQSxTQUFBaWtGLEVBQUFQLEdBQ0FPLEVBQUF1UixXQUFBam9GLFdBQUFtMkUsS0FFQW45RSxFQUFBLFNBQUEwOUUsRUFBQThMLEdBQ0E5TCxFQUFBM0IsUUFBQS8wRSxXQUFBd2lGLEtBRUFocUYsRUFBQW11RixFQUNBcDdFLEVBQUEsU0FBQW1yRSxFQUFBdkMsR0FDQXVDLEVBQUFxUSxTQUFBL21GLFdBQUFtMEUsR0FBQSxJQUVBaDVELEVBQUEsU0FBQXU3RCxFQUFBdkMsR0FDQXVDLEVBQUFxUSxTQUFBL21GLFdBQUFtMEUsR0FBQSxJQUVBdHRFLEVBQUEsU0FBQTZ2RSxFQUFBTixHQUNBTSxFQUFBNlEsV0FBQXZuRixXQUFBbzJFLEtBRUExbEYsRUFBQWkyRixFQUNBM2hELEVBQUEsU0FBQTB4QyxFQUFBM08sR0FDQTJPLEVBQUFvUixZQUFBLElBQUE5bkYsV0FBQStuRSxNQUdBa2MsR0FDQTJDLEVBQUEsU0FDQUMsRUFBQSxTQUNBRyxFQUFBLGVBQ0FDLEVBQUEsZUFDQUMsRUFBQSxtQkFDQUMsRUFBQSw0QkFDQUMsRUFBQSxTQUNBRSxFQUFBLGVBQ0FFLEVBQUEsT0FDQUUsRUFBQSxlQUNBRyxFQUFBLFdBQ0FFLEVBQUEsT0FDQTd4QyxFQUFBLGVBQ0FrMUIsRUFBQSxlQUNBMzRFLEVBQUEsZUFDQXVHLEVBQUEsZUFDQVIsRUFBQSxTQUNBK1MsRUFBQSxlQUNBNFAsRUFBQSxlQUNBdFUsRUFBQSxlQUNBblcsRUFBQSxlQUNBczBDLEVBQUEsWUFFQXUrQyxHQUNBd0UsRUFBQSxTQUFBcGMsR0FBQSxNQUFBQSxHQUFBdWMsZUFDQXRCLEVBQUEsU0FBQWpiLEVBQUFrVyxFQUFBenVGLEdBQ0EsTUFBQXl1RixHQUFBbEUsU0FBQUMsVUFBQTJGLEVBQUE3eUYsRUFBQWk3RSxFQUFBa1csRUFBQXp1RixLQUVBeXpGLEVBQUEsU0FBQWxiLEVBQUFrVyxFQUFBenVGLEdBQ0EsTUFBQTRxRixHQUFBdUYsRUFBQXBvRSxFQUFBd3dELEVBQUFrVyxFQUFBenVGLEdBQUEsR0FBQSxFQUFBeXVGLElBRUFtRixFQUFBLFNBQUFyYixFQUFBa1csRUFBQXp1RixHQUNBLE1BQUF1akYsR0FBQTRNLEVBQUFuWSxFQUFBTyxFQUFBa1csRUFBQXp1RixLQUVBNnpGLEVBQUEsU0FBQXRiLEdBQUEsTUFBQWdMLEdBQUFoTCxFQUFBcUosYUFDQWtTLEVBQUEsU0FBQXZiLEVBQUFrVyxHQUNBLFdBQUFudEYsS0FBQW10RixFQUFBMkUsUUFDQTdhLEVBQUEzRCxVQUFBNlosRUFBQTJFLFFBQUE3YSxFQUFBM0QsV0FDQTJELEVBQUEzRCxXQUVBbWYsRUFBQSxTQUFBeGIsR0FBQSxNQUFBQSxHQUFBcUosV0FBQSxHQUFBLEtBQUEsTUFDQW9TLEVBQUEsU0FBQXpiLEVBQUFrVyxHQUNBLE1BQUE3RCxHQUFBclMsRUFBQWxDLFlBQUEsRUFBQW9ZLElBRUF5RixFQUFBLFNBQUEzYixHQUFBLE1BQUFnTCxHQUFBaEwsRUFBQTBKLGVBQ0FtUyxFQUFBLFNBQUE3YixHQUFBLE1BQUFBLEdBQUFuM0IsVUFBQSxLQUNBa3pDLEVBQUEsU0FBQS9iLEVBQUFsNEUsRUFBQUwsR0FDQSxNQUFBQSxHQUFBcW9GLFFBQUE5UCxJQUVBa2MsRUFBQSxTQUFBbGMsR0FBQSxNQUFBQSxHQUFBekMsZUFDQWh6QixFQUFBLFNBQUF5MUIsR0FBQSxNQUFBZ0wsR0FBQWhMLEVBQUEzRCxZQUNBb0QsRUFBQSxTQUFBTyxHQUFBLE1BQUFBLEdBQUFxSixXQUFBLEdBQUFySixFQUFBcUosV0FBQSxHQUFBLElBQ0F2aUYsRUFBQSxTQUFBazVFLEdBQUEsTUFBQWdMLEdBQUFoTCxFQUFBdUosZUFDQWw4RSxFQUFBLFNBQUEyeUUsR0FBQSxNQUFBQSxHQUFBM0QsV0FDQXh2RSxFQUFBLFNBQUFtekUsRUFBQWtXLEdBQ0EsTUFBQUEsR0FBQWxFLFNBQUE0SSxTQUFBNWEsRUFBQXFRLFdBRUF6d0UsRUFBQSxTQUFBb2dFLEdBQUEsTUFBQWdMLEdBQUFoTCxFQUFBbEMsV0FBQSxJQUNBdHVELEVBQUEsU0FBQXd3RCxHQUFBLE1BQUFBLEdBQUFsQyxXQUFBLEdBQ0E1aUUsRUFBQSxTQUFBOGtFLEdBQUEsTUFBQUEsR0FBQTBKLGNBQ0Eza0YsRUFBQSxTQUFBaTdFLEdBQUEsTUFBQUEsR0FBQXFRLFVBQ0FoM0MsRUFBQSxTQUFBMm1DLEdBQUEsTUFBQWwzRCxRQUFBazNELEVBQUF6QyxlQUFBdDFCLFVBQUEsSUFHQSxtQkFBQXRyQyxRQUFBaTVFLFNBQ0FqNUUsT0FBQWk1RSxPQUFBLFNBQUEvNkUsR0FFQSxJQUFBLEdBREE5SixNQUNBeXJGLEVBQUEsRUFBQUEsRUFBQXB0RixVQUFBcEosT0FBQXcyRixJQUNBenJGLEVBQUF5ckYsRUFBQSxHQUFBcHRGLFVBQUFvdEYsRUFFQSxLQUFBM2hGLEVBQ0EsS0FBQXlYLFdBQUEsNkNBT0EsS0FBQSxHQUFBKzdELEdBQUEsRUFBQW9PLEVBQUExckYsRUFBQXM5RSxFQUFBb08sRUFBQXoyRixPQUFBcW9GLElBQUEsQ0FDQSxHQUFBdDVELEdBQUEwbkUsRUFBQXBPLElBTkEsU0FBQXQ1RCxHQUNBQSxHQUNBcFksT0FBQTJFLEtBQUF5VCxHQUFBOHRCLFFBQUEsU0FBQWg1QyxHQUFBLE1BQUFnUixHQUFBaFIsR0FBQWtyQixFQUFBbHJCLE1BS0FrckIsR0FFQSxNQUFBbGEsS0FzckRBLG1CQUFBNmhGLGVBQ0FDLGVBQUFub0YsVUFBQXN5RSxVQUFBOFYsU0FBQXBvRixVQUFBc3lFLFVBQUEsU0FBQWtDLEdBQ0EsTUFBQTBRLEdBQUF4MEYsS0FBQThqRixJQUVBMFQsWUFBQWxvRixVQUFBc3lFLFVBQUEsU0FBQWtDLEdBQ0EsTUFBQTBRLElBQUF4MEYsTUFBQThqRixJQUdBLElBQUFsQyxFQStCQSxPQTlCQUEsR0FBQSxTQUFBaDRFLEVBQUFrNkUsR0FDQSxNQUFBbDZFLGFBQUE4dEYsVUFDQWxELEVBQUE1cUYsRUFBQWs2RSxHQUNBLGdCQUFBbDZFLEdBQ0E0cUYsRUFBQXowRixPQUFBSCxTQUFBMEgsaUJBQUFzQyxHQUFBazZFLEdBQ0EwUSxHQUFBNXFGLEdBQUFrNkUsSUFFQSxnQkFBQS9qRixVQUNBQSxPQUFBNmhGLFVBQUFBLEdBQ0FBLEVBQUFvTyxjQUFBbG1ELEVBQ0E4M0MsRUFBQXFQLE9BQ0E3MkMsR0FBQTIxQyxLQUFBMEYsR0FDQTFqQyxRQUFBZytCLEtBQUEwRixJQUVBN1QsRUFBQStWLFNBQUEsU0FBQWpVLEdBQ0E5QixFQUFBcVAsTUFBQWwvQixRQUFBZytCLEtBQUFuTyxFQUFBcVAsTUFBQWwvQixRQUFBMnhCLElBRUE5QixFQUFBZ1csWUFBQSxTQUFBOVQsR0FDQWxDLEVBQUFvTyxjQUFBRCxLQUFBbk8sRUFBQW9PLGNBQUFsTSxJQUVBLG1CQUFBOWlGLFVBQ0FBLE9BQUE2SSxHQUFBKzNFLFVBQUEsU0FBQWtDLEdBQ0EsTUFBQTBRLEdBQUF4MEYsS0FBQThqRixLQUdBenBFLEtBQUEvSyxVQUFBdW9GLFFBQUEsU0FBQTdQLEdBQ0EsTUFBQSxJQUFBM3RFLE1BQUFyYSxLQUFBcTRFLGNBQUFyNEUsS0FBQTQ0RSxXQUFBNTRFLEtBQUFtM0UsV0FBQSxnQkFBQTZRLEdBQUE5cEQsU0FBQThwRCxFQUFBLElBQUFBLEtBRUFwRyxJQ2xsRUEsU0FBQXBpRixFQUFBQyxHQUNBLGdCQUFBRSxVQUFBLG1CQUFBRCxRQUFBRCxFQUFBRSxTQUNBLGtCQUFBNnBDLFNBQUFBLE9BQUFDLElBQUFELFFBQUEsV0FBQS9wQyxHQUNBQSxFQUFBRCxFQUFBczRGLFFBQ0E5M0YsS0FBQSxTQUFBTCxHQUFBLFlBRUEsSUFBQW80RixHQUFBLG1CQUFBaDRGLGFBQUE4RCxLQUFBOUQsT0FBQTZoRixVQUNBN2hGLE9BQUE2aEYsV0FFQXFQLFVBRUErRyxHQUNBNU0sZUFBQSxFQUNBMEIsVUFDQUMsV0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxNQUNBMkksVUFDQSxjQUNBLGNBQ0EsVUFDQSxRQUNBLFVBQ0EsVUFDQSxZQUdBZCxRQUNBN0gsV0FDQSxNQUNBLE1BQ0EsT0FDQSxNQUNBLE1BQ0EsT0FDQSxPQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FFQTJJLFVBQ0EsU0FDQSxVQUNBLE9BQ0EsU0FDQSxNQUNBLE9BQ0EsT0FDQSxTQUNBLFdBQ0EsVUFDQSxTQUNBLFlBR0F2RCxlQUFBLE1BQ0FsRyxZQUFBLDRCQUNBVyxZQUFBLDJCQUVBbUwsR0FBQTlHLE1BQUE2RyxHQUFBRSxDQUNBLElBQUFGLEdBQUFDLEVBQUE5RyxLQUVBdHhGLEdBQUFxNEYsUUFBQUEsRUFDQXI0RixFQUFBLFFBQUFtNEYsRUFFQXJnRixPQUFBd1gsZUFBQXR2QixFQUFBLGNBQUF3RCxPQUFBLE1DbEVBLFNBQUEzRCxFQUFBQyxHQUNBLGdCQUFBRSxVQUFBLG1CQUFBRCxRQUFBQSxPQUFBQyxRQUFBRixJQUNBLGtCQUFBK3BDLFNBQUFBLE9BQUFDLElBQUFELE9BQUEvcEMsR0FDQUQsRUFBQXk0RixNQUFBeDRGLEtBQ0FPLEtBQUEsV0FBQSxZQWlGQSxTQUFBazRGLEdBQUFDLEdBQ0FDLEdBQUF6NkMsUUFBQSxTQUFBMDZDLEdBQ0EsR0FBQUMsR0FBQUQsRUFBQUMsT0FDQUMsRUFBQUYsRUFBQUUsY0FDQUMsRUFBQUgsRUFBQS8xRCxTQUNBakwsRUFBQW1oRSxFQUFBbmhFLFNBQ0FvaEUsRUFBQUQsRUFBQUMsWUFDQTlrRSxFQUFBNmtFLEVBQUE3a0UsT0FJQSxJQUFBMEQsRUFBQW52QixTQUFBb3dGLEdBQUEsQ0FHQSxHQUFBSSxJQUFBLElBQUFELElBQUEsSUFBQTlrRSxFQUFBNXhCLFFBQUEsU0FDQTQyRixHQUFBUixHQUFBRyxJQUFBSCxFQUFBRyxNQUVBSSxJQUFBQyxHQUNBSixFQUFBdm9FLEtBQUFzb0UsTUF5QkEsUUFBQXZ0RSxHQUFBNjVCLEVBQUFnMEMsR0FXQSxPQVZBQyxRQUFBdnBGLFVBQUF5YixTQUFBLFNBQUFuaEIsR0FFQSxJQURBLEdBQUE2UyxHQUFBemMsS0FDQXljLEdBQUEsQ0FDQSxHQUFBcThFLEdBQUFqM0YsS0FBQTRhLEVBQUE3UyxHQUNBLE1BQUE2UyxFQUVBQSxHQUFBQSxFQUFBc29DLGlCQUlBbGpELEtBQUEraUQsRUFBQWcwQyxHQVNBLFFBQUE3M0UsR0FBQXhKLEVBQUF3aEYsR0FDQSxNQUFBeG1GLE9BQUFqRCxVQUFBeVIsS0FDQXhKLEVBQUF3SixLQUFBZzRFLEdBSUF4aEYsRUFBQXJWLE9BQUE2MkYsR0FBQSxHQU1BLFFBQUFDLEtBQ0EsR0FBQUMsR0FBQSxXQUNBQyxHQUFBamxELE9BQUEsRUFFQWlsRCxHQUFBQyxPQUNBdjVGLFNBQUE2RyxLQUFBODdFLFVBQUFuNEUsSUFBQSxlQUdBOHVGLEdBQUFFLHVCQUFBcjVGLE9BQUFzNUYsYUFDQXo1RixTQUFBNGtCLGlCQUFBLFlBQUE4MEUsSUFJQUEsRUFBQSxXQUNBLEdBQUF0OEQsT0FBQSxFQUVBLE9BQUEsWUFDQSxHQUFBOXNCLEdBQUFtcEYsWUFBQW5wRixLQUdBQSxHQUFBOHNCLEVBQUEsS0FDQWs4RCxHQUFBamxELE9BQUEsRUFDQXIwQyxTQUFBb0Usb0JBQUEsWUFBQXMxRixHQUNBSixHQUFBQyxPQUNBdjVGLFNBQUE2RyxLQUFBODdFLFVBQUF6MUUsT0FBQSxnQkFJQWt3QixFQUFBOXNCLE1BSUFxcEYsRUFBQSxTQUFBdnZGLEdBRUEsS0FBQUEsRUFBQTJMLGlCQUFBa2pGLFVBQ0EsTUFBQVgsSUFHQSxJQUFBejdFLEdBQUFzTyxFQUFBL2dCLEVBQUEyTCxPQUFBNmpGLEdBQUFDLGVBQ0FuQixFQUFBdnRFLEVBQUEvZ0IsRUFBQTJMLE9BQUE2akYsR0FBQUUsT0FFQSxJQUFBcEIsRUFBQSxDQU1BLEdBTEF2M0UsRUFBQXEzRSxHQUFBLFNBQUF1QixHQUNBLE1BQUFBLEdBQUFyQixTQUFBQSxJQUVBaDJELFNBQUFzM0QsWUFFQSxPQUdBLEdBQUFuOUUsRUFBQSxDQUNBLEdBQUFvOUUsR0FBQTk0RSxFQUFBcTNFLEdBQUEsU0FBQXVCLEdBQ0EsTUFBQUEsR0FBQWw5RSxLQUFBQSxJQUVBcTlFLEVBQUFELEVBQUF2M0QsU0FDQW0yRCxFQUFBcUIsRUFBQXJCLFlBQ0FzQixFQUFBRCxFQUFBQyxTQUNBcG1FLEVBQUFtbUUsRUFBQW5tRSxPQU1BLEtBQUFvbUUsR0FBQWIsR0FBQWpsRCxRQUFBOGxELElBQUEsSUFBQXBtRSxFQUFBNXhCLFFBQUEsU0FDQSxNQUFBbTJGLEdBQUEyQixFQUlBLEtBQUEsSUFBQXBCLElBQUEsSUFBQTlrRSxFQUFBNXhCLFFBQUEsU0FBQSxRQUlBZ3BCLEVBQUEvZ0IsRUFBQTJMLE9BQUE2akYsR0FBQVEsYUFBQXA2RixTQUFBdzJFLGNBQUFvakIsR0FBQUUsU0FFQXhCLEtBR0ErQixFQUFBLFNBQUFqd0YsR0FDQSxHQUFBa3dGLEdBQUF0NkYsU0FDQTZjLEVBQUF5OUUsRUFBQTF3RixhQUVBaVQsSUFBQUEsRUFBQW1YLE1BQUFrbEUsR0FBQWozRixLQUFBNGEsRUFBQSs4RSxHQUFBQyxnQkFDQWg5RSxFQUFBbVgsT0FLQWgwQixVQUFBNGtCLGlCQUFBLFFBQUErMEUsR0FDQTM1RixTQUFBNGtCLGlCQUFBLGFBQUF5MEUsR0FDQWw1RixPQUFBeWtCLGlCQUFBLE9BQUF5MUUsSUFFQWYsR0FBQWlCLGlCQUFBaDlDLFVBQUFpOUMsZUFBQSxHQUFBajlDLFVBQUFrOUMsaUJBQUEsSUFDQXo2RixTQUFBNGtCLGlCQUFBLGNBQUF5MEUsR0FRQSxRQUFBMXBGLEtBQ0EsT0FBQUEsRUFBQTlMLE9BQ0E4TCxFQUFBOUwsTUFBQSxFQUVBdTFGLEtBRUEsR0FPQSxRQUFBcnBFLEdBQUE5bEIsR0FDQTlKLE9BQUE0UCxzQkFBQSxXQUNBQyxXQUFBL0YsRUFBQSxLQVNBLFFBQUEwSyxHQUFBNitCLEdBSUEsSUFBQSxHQUhBa25ELEtBQUEsRUFBQSxVQUNBQyxFQUFBbm5ELEVBQUErSyxPQUFBLEdBQUFsd0MsY0FBQW1sQyxFQUFBdHZDLE1BQUEsR0FFQWxDLEVBQUEsRUFBQUEsRUFBQTA0RixFQUFBeDVGLE9BQUFjLElBQUEsQ0FDQSxHQUFBNDRGLEdBQUFGLEVBQUExNEYsR0FDQTY0RixFQUFBRCxFQUFBLEdBQUFBLEVBQUFELEVBQUFubkQsQ0FDQSxRQUFBLEtBQUFyekMsT0FBQUgsU0FBQTZHLEtBQUFSLE1BQUF3MEYsR0FDQSxNQUFBQSxHQUlBLE1BQUEsTUFTQSxRQUFBQyxHQUFBbmpGLEVBQUF3aEYsR0FDQSxNQUFBeG1GLE9BQUFqRCxVQUFBb3JGLFVBQ0FuakYsRUFBQW1qRixVQUFBM0IsR0FJQXhoRixFQUFBeFYsUUFBQWdmLEVBQUF4SixFQUFBd2hGLElBUUEsUUFBQTRCLEdBQUFsK0UsR0FDQSxHQUFBNDFCLEdBQUE1MUIsRUFBQTNYLGFBQUEsUUFHQXV0QyxJQUNBNTFCLEVBQUFkLGFBQUEsc0JBQUEwMkIsR0FHQTUxQixFQUFBL1IsZ0JBQUEsU0FRQSxRQUFBa3dGLEdBQUFuK0UsR0FDQSxHQUFBMHJCLEdBQUExckIsRUFBQTJkLHVCQUVBLE9BQUErTixHQUFBNWpCLEtBQUEsR0FBQTRqQixFQUFBOU4sTUFBQSxHQUFBOE4sRUFBQTJMLFNBQUEvekMsT0FBQXc5QyxhQUFBMzlDLFNBQUF1a0IsZ0JBQUFpbEMsZUFBQWpoQixFQUFBMEwsUUFBQTl6QyxPQUFBK2lELFlBQUFsakQsU0FBQXVrQixnQkFBQXE1QixhQVFBLFFBQUFxOUMsR0FBQUMsRUFBQUMsR0FFQUEsRUFBQWg3RixPQUFBNjNCLGlCQUFBbWpFLEdBQUF4bUYsRUFBQSxjQUFBeFUsT0FBQTYzQixpQkFBQWtqRSxHQUFBdHFGLFFBUUEsUUFBQXdxRixHQUFBOTJFLEVBQUFwWSxHQUNBb1ksRUFBQXk1QixRQUFBLFNBQUFsaEMsR0FDQUEsR0FDQTNRLEVBQUEyUSxFQUFBOGxFLGFBU0EsUUFBQTBZLEdBQUEzQyxHQUNBLE9BQ0F3QyxRQUFBeEMsRUFBQWxpQixjQUFBb2pCLEdBQUEwQixTQUNBSCxPQUFBekMsRUFBQWxpQixjQUFBb2pCLEdBQUEyQixRQUNBN3dGLFFBQUFndUYsRUFBQWxpQixjQUFBb2pCLEdBQUE0QixVQVNBLFFBQUFDLEdBQUFuM0UsRUFBQTlRLEdBQ0E4USxFQUFBeTVCLFFBQUEsU0FBQWxoQyxHQUNBLEdBQUFBLEVBQUEsQ0FFQSxHQUFBNitFLEdBQUF4QyxHQUFBajNGLEtBQUE0YSxFQUFBKzhFLEdBQUE0QixTQUVBRyxFQUFBRCxFQUFBOXNGLEtBQUF5eEMsTUFBQTdzQyxFQUFBLEtBQUFBLENBRUFxSixHQUFBeFcsTUFBQXNPLEVBQUEsdUJBQUFnbkYsRUFBQSxRQVNBLFFBQUFuMkMsR0FBQWt6QyxHQUNBLE1BQUEsWUFBQUEsRUFBQXJ5RixNQUFBOHlCLFdBR0EsUUFBQXhmLE1BRUEsUUFBQWlpRixHQUFBeDJFLEdBQ0EsUUFBQUEsR0FBQSxvQkFBQUEsRUFBQXBOLFdBUUEsUUFBQTZqRixHQUFBQyxHQUNBLE1BQUFBLEdBQUE5MkYsUUFBQSxNQUFBLElBT0EsUUFBQSsyRixHQUFBNTJGLEdBQ0EsR0FBQTYyRixHQUFBNTdGLEtBRUFzRSxFQUFBeWMsRUFBQXEzRSxHQUFBLFNBQUE5ekYsR0FDQSxNQUFBQSxHQUFBbVksS0FBQW0vRSxJQUdBdEQsRUFBQWgwRixFQUFBZzBGLE9BQ0E5d0QsRUFBQWxqQyxFQUFBZytCLFNBQUFrRixPQUdBMU8sRUFBQTJpRSxFQUFBbkQsRUFBQXh6RixhQUFBLGdCQUNBKzJGLEVBQUFydEYsS0FBQXl4QyxNQUFBcTRDLEVBQUFyekQsWUFBQSxHQUNBNjJELEVBQUF0dEYsS0FBQXl4QyxNQUFBcTRDLEVBQUFwekQsYUFBQSxHQUVBNjJELEVBQUFuOEYsU0FBQXVrQixnQkFBQThnQixhQUFBcmxDLFNBQUE2RyxLQUFBdytCLFlBRUFuUSxFQUFBL3ZCLEVBQUErdkIsTUFDQUMsRUFBQWh3QixFQUFBZ3dCLE1BR0FtZixNQUFBLEdBQ0FDLE1BQUEsRUFFQSxRQUFBcmIsR0FDQSxJQUFBLE1BQ0FvYixFQUFBcGYsRUFBQSttRSxFQUFBcjBELEVBQ0EyTSxFQUFBcGYsRUFBQSxFQUFBK21FLENBQ0EsTUFDQSxLQUFBLFNBQ0E1bkQsRUFBQXBmLEVBQUErbUUsRUFBQXIwRCxFQUNBMk0sRUFBQXBmLEVBQUEsRUFDQSxNQUNBLEtBQUEsT0FDQW1mLEVBQUFwZixFQUFBLEVBQUErbUUsRUFDQTFuRCxFQUFBcGYsRUFBQSttRSxFQUFBdDBELENBQ0EsTUFDQSxLQUFBLFFBQ0EwTSxFQUFBcGYsRUFBQSxFQUNBcWYsRUFBQXBmLEVBQUErbUUsRUFBQXQwRCxFQUlBLEdBQUF3MEQsR0FBQWxuRSxFQTdCQSxFQTZCQSttRSxFQUFBcjBELEVBQUF1MEQsRUFDQUUsRUFBQW5uRSxFQTlCQSxFQThCQSttRSxFQUFBcjBELEVBQUEsQ0FHQSxTQUFBMU8sR0FBQSxXQUFBQSxJQUNBa2pFLElBQ0E5bkQsRUFBQTZuRCxFQW5DQSxFQW1DQSxFQUFBRixHQUdBSSxJQUNBL25ELEVBdkNBLElBMkNBb2tELEVBQUFyeUYsTUFBQXNPLEVBQUEsY0FBQSxlQUFBMi9CLEVBQUEsT0FBQUMsRUFBQSxTQVFBLFFBQUErbkQsR0FBQXR5RixHQUNBLEdBQUFBLFlBQUFpdkYsVUFBQTJDLEVBQUE1eEYsR0FDQSxPQUFBQSxFQUdBLElBQUFBLFlBQUE4dEYsVUFDQSxTQUFBNXpGLE1BQUFqQyxLQUFBK0gsRUFHQSxJQUFBMkksTUFBQUMsUUFBQTVJLEdBQ0EsTUFBQUEsRUFHQSxLQUNBLFNBQUE5RixNQUFBakMsS0FBQWpDLFNBQUEwSCxpQkFBQXNDLElBQ0EsTUFBQWhILEdBQ0EsVUFVQSxRQUFBdTVGLEdBQUE3M0YsRUFBQThPLEVBQUF0SCxHQUVBLElBQUFzSCxFQUNBLE1BQUF0SCxJQUdBLElBQUFzd0YsR0FBQW5CLEVBQUEzMkYsRUFBQWcwRixRQUNBd0MsRUFBQXNCLEVBQUF0QixRQUVBdUIsR0FBQSxFQUVBQyxFQUFBLFNBQUF6dUMsR0FDQWl0QyxFQUFBanRDLEVBQUEsaUJBQUEsc0JBQUEwdUMsR0FDQXpCLEVBQUFqdEMsRUFBQSxpQkFBQSxnQkFBQTB1QyxJQUdBQSxFQUFBLFNBQUF4M0YsR0FDQUEsRUFBQTRRLFNBQUFtbEYsR0FBQXVCLElBQ0FBLEdBQUEsRUFDQUMsRUFBQSxVQUNBeHdGLEtBS0F3d0YsR0FBQSxPQUdBcC9ELGFBQUE1NEIsRUFBQWs0Rix1QkFDQWw0RixFQUFBazRGLHNCQUFBNXNGLFdBQUEsV0FDQXlzRixJQUNBQyxFQUFBLFVBQ0F4d0YsTUFFQXNILEdBcUNBLFFBQUFxcEYsR0FBQTV5RixHQUNBLEdBQUFzeEMsSUFBQSxDQUNBLE9BQUEsWUFDQUEsSUFHQUEsR0FBQSxFQUNBcDdDLE9BQUEyOEYsUUFBQXQ1RixVQUFBTyxLQUFBLFdBQ0F3M0MsR0FBQSxFQUNBdHhDLFFBS0EsUUFBQTh5RixHQUFBOXlGLEdBQ0EsR0FBQSt5RixJQUFBLENBQ0EsT0FBQSxZQUNBQSxJQUNBQSxHQUFBLEVBQ0FodEYsV0FBQSxXQUNBZ3RGLEdBQUEsRUFDQS95RixLQUNBZ3pGLE1BeUJBLFFBQUFuN0YsR0FBQW83RixHQUNBLEdBQUFDLEtBQ0EsT0FBQUQsSUFBQSxzQkFBQUMsRUFBQW5sRixTQUFBL1YsS0FBQWk3RixHQVVBLFFBQUFFLEdBQUFwNEMsRUFBQXhSLEdBQ0EsR0FBQSxJQUFBd1IsRUFBQTlpRCxTQUNBLFFBR0EsSUFBQTRELEdBQUFreUIsaUJBQUFndEIsRUFBQSxLQUNBLE9BQUF4UixHQUFBMXRDLEVBQUEwdEMsR0FBQTF0QyxFQVVBLFFBQUF1M0YsR0FBQXI0QyxHQUNBLE1BQUEsU0FBQUEsRUFBQTFqRCxTQUNBMGpELEVBRUFBLEVBQUFsa0QsWUFBQWtrRCxFQUFBdGdCLEtBVUEsUUFBQTQ0RCxHQUFBdDRDLEdBRUEsSUFBQUEsRUFDQSxNQUFBaGxELFVBQUE2RyxJQUdBLFFBQUFtK0MsRUFBQTFqRCxVQUNBLElBQUEsT0FDQSxJQUFBLE9BQ0EsTUFBQTBqRCxHQUFBdCtDLGNBQUFHLElBQ0EsS0FBQSxZQUNBLE1BQUFtK0MsR0FBQW4rQyxLQUtBLEdBQUEwMkYsR0FBQUgsRUFBQXA0QyxHQUNBM3lDLEVBQUFrckYsRUFBQWxyRixTQUNBQyxFQUFBaXJGLEVBQUFqckYsU0FHQSxPQUFBLGdCQUFBalEsS0FBQWdRLEVBRkFrckYsRUFBQWhyRixVQUVBRCxHQUNBMHlDLEVBR0FzNEMsRUFBQUQsRUFBQXI0QyxJQVVBLFFBQUF3NEMsR0FBQXg0QyxHQUVBLEdBQUFuYyxHQUFBbWMsR0FBQUEsRUFBQW5jLGFBQ0F2bkMsRUFBQXVuQyxHQUFBQSxFQUFBdm5DLFFBRUEsT0FBQUEsSUFBQSxTQUFBQSxHQUFBLFNBQUFBLEdBVUEsS0FBQSxLQUFBLFNBQUFhLFFBQUEwbUMsRUFBQXZuQyxXQUFBLFdBQUE4N0YsRUFBQXYwRCxFQUFBLFlBQ0EyMEQsRUFBQTMwRCxHQUdBQSxFQWJBbWMsRUFDQUEsRUFBQXQrQyxjQUFBNmQsZ0JBR0F2a0IsU0FBQXVrQixnQkFZQSxRQUFBazVFLEdBQUF6NEMsR0FDQSxHQUFBMWpELEdBQUEwakQsRUFBQTFqRCxRQUVBLE9BQUEsU0FBQUEsSUFHQSxTQUFBQSxHQUFBazhGLEVBQUF4NEMsRUFBQS9mLHFCQUFBK2YsR0FVQSxRQUFBMDRDLEdBQUFweEYsR0FDQSxNQUFBLFFBQUFBLEVBQUF4TCxXQUNBNDhGLEVBQUFweEYsRUFBQXhMLFlBR0F3TCxFQVdBLFFBQUFxeEYsR0FBQUMsRUFBQUMsR0FFQSxLQUFBRCxHQUFBQSxFQUFBMTdGLFVBQUEyN0YsR0FBQUEsRUFBQTM3RixVQUNBLE1BQUFsQyxVQUFBdWtCLGVBSUEsSUFBQXNWLEdBQUErakUsRUFBQWo0RSx3QkFBQWs0RSxHQUFBQyxLQUFBQyw0QkFDQXozRixFQUFBdXpCLEVBQUErakUsRUFBQUMsRUFDQXQzRixFQUFBc3pCLEVBQUFna0UsRUFBQUQsRUFHQTM2QixFQUFBampFLFNBQUEwakUsYUFDQVQsR0FBQWlCLFNBQUE1OUQsRUFBQSxHQUNBMjhELEVBQUFrQixPQUFBNTlELEVBQUEsRUFDQSxJQUFBZzlELEdBQUFOLEVBQUFNLHVCQUlBLElBQUFxNkIsSUFBQXI2QixHQUFBczZCLElBQUF0NkIsR0FBQWo5RCxFQUFBZ0MsU0FBQS9CLEdBQ0EsTUFBQWszRixHQUFBbDZCLEdBQ0FBLEVBR0FpNkIsRUFBQWo2QixFQUlBLElBQUF5NkIsR0FBQU4sRUFBQUUsRUFDQSxPQUFBSSxHQUFBdDVELEtBQ0FpNUQsRUFBQUssRUFBQXQ1RCxLQUFBbTVELEdBRUFGLEVBQUFDLEVBQUFGLEVBQUFHLEdBQUFuNUQsTUFZQSxRQUFBdTVELEdBQUFqNUMsR0FDQSxHQUFBazVDLEdBQUE1ekYsVUFBQXBKLE9BQUEsT0FBQStDLEtBQUFxRyxVQUFBLEdBQUFBLFVBQUEsR0FBQSxNQUVBNnpGLEVBQUEsUUFBQUQsRUFBQSxZQUFBLGFBQ0E1OEYsRUFBQTBqRCxFQUFBMWpELFFBRUEsSUFBQSxTQUFBQSxHQUFBLFNBQUFBLEVBQUEsQ0FDQSxHQUFBdUwsR0FBQW00QyxFQUFBdCtDLGNBQUE2ZCxlQUVBLFFBREF5Z0MsRUFBQXQrQyxjQUFBMDNGLGtCQUFBdnhGLEdBQ0FzeEYsR0FHQSxNQUFBbjVDLEdBQUFtNUMsR0FZQSxRQUFBRSxHQUFBOTFELEVBQUF5YyxHQUNBLEdBQUF0MkMsR0FBQXBFLFVBQUFwSixPQUFBLE9BQUErQyxLQUFBcUcsVUFBQSxJQUFBQSxVQUFBLEdBRUE4d0IsRUFBQTZpRSxFQUFBajVDLEVBQUEsT0FDQTNwQixFQUFBNGlFLEVBQUFqNUMsRUFBQSxRQUNBczVDLEVBQUE1dkYsR0FBQSxFQUFBLENBS0EsT0FKQTY1QixHQUFBNWpCLEtBQUF5VyxFQUFBa2pFLEVBQ0EvMUQsRUFBQTJMLFFBQUE5WSxFQUFBa2pFLEVBQ0EvMUQsRUFBQTlOLE1BQUFZLEVBQUFpakUsRUFDQS8xRCxFQUFBMEwsT0FBQTVZLEVBQUFpakUsRUFDQS8xRCxFQWFBLFFBQUFnMkQsR0FBQXR2RixFQUFBcXFDLEdBQ0EsR0FBQWtsRCxHQUFBLE1BQUFsbEQsRUFBQSxPQUFBLE1BQ0FtbEQsRUFBQSxTQUFBRCxFQUFBLFFBQUEsUUFFQSxPQUFBanZGLFlBQUFOLEVBQUEsU0FBQXV2RixFQUFBLFNBQUEsSUFBQWp2RixXQUFBTixFQUFBLFNBQUF3dkYsRUFBQSxTQUFBLElBa0JBLFFBQUFDLEdBQUFwbEQsRUFBQXp5QyxFQUFBZ0csRUFBQTg0RCxHQUNBLE1BQUEvMkQsTUFBQUMsSUFBQWhJLEVBQUEsU0FBQXl5QyxHQUFBenlDLEVBQUEsU0FBQXl5QyxHQUFBenNDLEVBQUEsU0FBQXlzQyxHQUFBenNDLEVBQUEsU0FBQXlzQyxHQUFBenNDLEVBQUEsU0FBQXlzQyxHQUFBcWxELEtBQUE5eEYsRUFBQSxTQUFBeXNDLEdBQUFxc0IsRUFBQSxVQUFBLFdBQUFyc0IsRUFBQSxNQUFBLFNBQUFxc0IsRUFBQSxVQUFBLFdBQUFyc0IsRUFBQSxTQUFBLFVBQUEsR0FHQSxRQUFBc2xELEtBQ0EsR0FBQS8zRixHQUFBN0csU0FBQTZHLEtBQ0FnRyxFQUFBN00sU0FBQXVrQixnQkFDQW9oRCxFQUFBZzVCLE1BQUEzbUUsaUJBQUFuckIsRUFFQSxRQUNBOEQsT0FBQSt0RixFQUFBLFNBQUE3M0YsRUFBQWdHLEVBQUE4NEQsR0FDQXA0RCxNQUFBbXhGLEVBQUEsUUFBQTczRixFQUFBZ0csRUFBQTg0RCxJQWdFQSxRQUFBazVCLEdBQUFDLEdBQ0EsTUFBQUMsT0FBQUQsR0FDQTdxRCxNQUFBNnFELEVBQUFya0UsS0FBQXFrRSxFQUFBdnhGLE1BQ0EybUMsT0FBQTRxRCxFQUFBbjZFLElBQUFtNkUsRUFBQW51RixTQVdBLFFBQUE2cEIsR0FBQXdxQixHQUNBLEdBQUF6YyxLQUtBLElBQUFvMkQsS0FDQSxJQUNBcDJELEVBQUF5YyxFQUFBeHFCLHVCQUNBLElBQUFZLEdBQUE2aUUsRUFBQWo1QyxFQUFBLE9BQ0EzcEIsRUFBQTRpRSxFQUFBajVDLEVBQUEsT0FDQXpjLEdBQUE1akIsS0FBQXlXLEVBQ0FtTixFQUFBOU4sTUFBQVksRUFDQWtOLEVBQUEyTCxRQUFBOVksRUFDQW1OLEVBQUEwTCxPQUFBNVksRUFDQSxNQUFBeHhCLFFBRUEwK0IsR0FBQXljLEVBQUF4cUIsdUJBR0EsSUFBQXhuQixJQUNBeW5CLEtBQUE4TixFQUFBOU4sS0FDQTlWLElBQUE0akIsRUFBQTVqQixJQUNBcFgsTUFBQWc3QixFQUFBMEwsTUFBQTFMLEVBQUE5TixLQUNBOXBCLE9BQUE0M0IsRUFBQTJMLE9BQUEzTCxFQUFBNWpCLEtBSUFxNkUsRUFBQSxTQUFBaDZDLEVBQUExakQsU0FBQXM5RixPQUNBcnhGLEVBQUF5eEYsRUFBQXp4RixPQUFBeTNDLEVBQUFwSCxhQUFBNXFDLEVBQUFpaEMsTUFBQWpoQyxFQUFBeW5CLEtBQ0E5cEIsRUFBQXF1RixFQUFBcnVGLFFBQUFxMEMsRUFBQXdFLGNBQUF4MkMsRUFBQWtoQyxPQUFBbGhDLEVBQUEyUixJQUVBczZFLEVBQUFqNkMsRUFBQTNmLFlBQUE5M0IsRUFDQTJ4RixFQUFBbDZDLEVBQUExZixhQUFBMzBCLENBSUEsSUFBQXN1RixHQUFBQyxFQUFBLENBQ0EsR0FBQWp3RixHQUFBbXVGLEVBQUFwNEMsRUFDQWk2QyxJQUFBVixFQUFBdHZGLEVBQUEsS0FDQWl3RixHQUFBWCxFQUFBdHZGLEVBQUEsS0FFQStELEVBQUF6RixPQUFBMHhGLEVBQ0Fqc0YsRUFBQXJDLFFBQUF1dUYsRUFHQSxNQUFBTCxHQUFBN3JGLEdBR0EsUUFBQW1zRixHQUFBbDBFLEVBQUFwRCxHQUNBLEdBQUF1M0UsR0FBQVQsS0FDQVUsRUFBQSxTQUFBeDNFLEVBQUF2bUIsU0FDQWcrRixFQUFBOWtFLEVBQUF2UCxHQUNBbzZCLEVBQUE3cUIsRUFBQTNTLEdBQ0EwM0UsRUFBQWpDLEVBQUFyeUUsR0FFQWhjLEVBQUFtdUYsRUFBQXYxRSxHQUNBMjNFLEVBQUFqd0YsV0FBQU4sRUFBQXV3RixlQUFBLElBQ0FDLEVBQUFsd0YsV0FBQU4sRUFBQXd3RixnQkFBQSxJQUVBWCxFQUFBRCxHQUNBbDZFLElBQUEyNkUsRUFBQTM2RSxJQUFBMGdDLEVBQUExZ0MsSUFBQTY2RSxFQUNBL2tFLEtBQUE2a0UsRUFBQTdrRSxLQUFBNHFCLEVBQUE1cUIsS0FBQWdsRSxFQUNBbHlGLE1BQUEreEYsRUFBQS94RixNQUNBb0QsT0FBQTJ1RixFQUFBM3VGLFFBU0EsSUFQQW11RixFQUFBWSxVQUFBLEVBQ0FaLEVBQUF2bUUsV0FBQSxHQU1BNm1FLEdBQUFDLEVBQUEsQ0FDQSxHQUFBSyxHQUFBbndGLFdBQUFOLEVBQUF5d0YsVUFBQSxJQUNBbm5FLEVBQUFocEIsV0FBQU4sRUFBQXNwQixXQUFBLEdBRUF1bUUsR0FBQW42RSxLQUFBNjZFLEVBQUFFLEVBQ0FaLEVBQUE1cUQsUUFBQXNyRCxFQUFBRSxFQUNBWixFQUFBcmtFLE1BQUFnbEUsRUFBQWxuRSxFQUNBdW1FLEVBQUE3cUQsT0FBQXdyRCxFQUFBbG5FLEVBR0F1bUUsRUFBQVksVUFBQUEsRUFDQVosRUFBQXZtRSxXQUFBQSxFQU9BLE9BSkE2bUUsRUFBQXYzRSxFQUFBdmYsU0FBQWkzRixHQUFBMTNFLElBQUEwM0UsR0FBQSxTQUFBQSxFQUFBaitGLFlBQ0F3OUYsRUFBQVQsRUFBQVMsRUFBQWozRSxJQUdBaTNFLEVBR0EsUUFBQWEsR0FBQTM2QyxHQUNBLEdBQUFuNEMsR0FBQW00QyxFQUFBdCtDLGNBQUE2ZCxnQkFDQXE3RSxFQUFBVCxFQUFBbjZDLEVBQUFuNEMsR0FDQVUsRUFBQXFCLEtBQUFDLElBQUFoQyxFQUFBK3dDLFlBQUF6OUMsT0FBQStpRCxZQUFBLEdBQ0F2eUMsRUFBQS9CLEtBQUFDLElBQUFoQyxFQUFBMjhDLGFBQUFycEQsT0FBQXc5QyxhQUFBLEdBRUF2aUIsRUFBQTZpRSxFQUFBcHhGLEdBQ0F3dUIsRUFBQTRpRSxFQUFBcHhGLEVBQUEsT0FTQSxPQUFBZ3lGLElBTkFsNkUsSUFBQXlXLEVBQUF3a0UsRUFBQWo3RSxJQUFBaTdFLEVBQUFGLFVBQ0FqbEUsS0FBQVksRUFBQXVrRSxFQUFBbmxFLEtBQUFtbEUsRUFBQXJuRSxXQUNBaHJCLE1BQUFBLEVBQ0FvRCxPQUFBQSxJQWNBLFFBQUFrdkYsR0FBQTc2QyxHQUNBLEdBQUExakQsR0FBQTBqRCxFQUFBMWpELFFBQ0EsT0FBQSxTQUFBQSxHQUFBLFNBQUFBLElBR0EsVUFBQTg3RixFQUFBcDRDLEVBQUEsYUFHQTY2QyxFQUFBeEMsRUFBQXI0QyxLQWFBLFFBQUE4NkMsR0FBQXBILEVBQUFxSCxFQUFBcGxFLEVBQUFxbEUsR0FFQSxHQUFBQyxJQUFBdDdFLElBQUEsRUFBQThWLEtBQUEsR0FDQW9PLEVBQUE4MEQsRUFBQWpGLEVBQUFxSCxFQUdBLElBQUEsYUFBQUMsRUFDQUMsRUFBQU4sRUFBQTkyRCxPQUNBLENBRUEsR0FBQXEzRCxPQUFBLEVBQ0Esa0JBQUFGLEdBQ0FFLEVBQUE1QyxFQUFBRCxFQUFBMEMsSUFDQSxTQUFBRyxFQUFBNStGLFdBQ0E0K0YsRUFBQXhILEVBQUFoeUYsY0FBQTZkLGtCQUdBMjdFLEVBREEsV0FBQUYsRUFDQXRILEVBQUFoeUYsY0FBQTZkLGdCQUVBeTdFLENBR0EsSUFBQWxCLEdBQUFLLEVBQUFlLEVBQUFyM0QsRUFHQSxJQUFBLFNBQUFxM0QsRUFBQTUrRixVQUFBdStGLEVBQUFoM0QsR0FXQW8zRCxFQUFBbkIsTUFYQSxDQUNBLEdBQUFxQixHQUFBdkIsSUFDQWp1RixFQUFBd3ZGLEVBQUF4dkYsT0FDQXBELEVBQUE0eUYsRUFBQTV5RixLQUVBMHlGLEdBQUF0N0UsS0FBQW02RSxFQUFBbjZFLElBQUFtNkUsRUFBQVksVUFDQU8sRUFBQS9yRCxPQUFBdmpDLEVBQUFtdUYsRUFBQW42RSxJQUNBczdFLEVBQUF4bEUsTUFBQXFrRSxFQUFBcmtFLEtBQUFxa0UsRUFBQXZtRSxXQUNBMG5FLEVBQUFoc0QsTUFBQTFtQyxFQUFBdXhGLEVBQUFya0UsTUFhQSxNQUxBd2xFLEdBQUF4bEUsTUFBQUUsRUFDQXNsRSxFQUFBdDdFLEtBQUFnVyxFQUNBc2xFLEVBQUFoc0QsT0FBQXRaLEVBQ0FzbEUsRUFBQS9yRCxRQUFBdlosRUFFQXNsRSxFQUdBLFFBQUFHLEdBQUFuRyxHQUlBLE1BSEFBLEdBQUExc0YsTUFDQTBzRixFQUFBdHBGLE9BY0EsUUFBQTB2RixHQUFBdkUsRUFBQXdFLEVBQUE1SCxFQUFBcUgsRUFBQUMsR0FDQSxHQUFBcmxFLEdBQUFyd0IsVUFBQXBKLE9BQUEsT0FBQStDLEtBQUFxRyxVQUFBLEdBQUFBLFVBQUEsR0FBQSxDQUVBLEtBQUEsSUFBQXd4RixFQUFBMzVGLFFBQUEsUUFDQSxNQUFBMjVGLEVBR0EsSUFBQW1FLEdBQUFILEVBQUFwSCxFQUFBcUgsRUFBQXBsRSxFQUFBcWxFLEdBRUFPLEdBQ0E1N0UsS0FDQXBYLE1BQUEweUYsRUFBQTF5RixNQUNBb0QsT0FBQTJ2RixFQUFBMzdFLElBQUFzN0UsRUFBQXQ3RSxLQUVBc3ZCLE9BQ0ExbUMsTUFBQTB5RixFQUFBaHNELE1BQUFxc0QsRUFBQXJzRCxNQUNBdGpDLE9BQUFzdkYsRUFBQXR2RixRQUVBdWpDLFFBQ0EzbUMsTUFBQTB5RixFQUFBMXlGLE1BQ0FvRCxPQUFBc3ZGLEVBQUEvckQsT0FBQW9zRCxFQUFBcHNELFFBRUF6WixNQUNBbHRCLE1BQUEreUYsRUFBQTdsRSxLQUFBd2xFLEVBQUF4bEUsS0FDQTlwQixPQUFBc3ZGLEVBQUF0dkYsU0FJQTZ2RixFQUFBM29GLE9BQUEyRSxLQUFBK2pGLEdBQUF6ekYsSUFBQSxTQUFBL0gsR0FDQSxNQUFBZzZGLEtBQ0FoNkYsSUFBQUEsR0FDQXc3RixFQUFBeDdGLElBQ0EwN0YsS0FBQUwsRUFBQUcsRUFBQXg3RixRQUVBb1UsS0FBQSxTQUFBK0QsRUFBQUMsR0FDQSxNQUFBQSxHQUFBc2pGLEtBQUF2akYsRUFBQXVqRixPQUdBQyxFQUFBRixFQUFBbCtGLE9BQUEsU0FBQXErRixHQUNBLEdBQUFwekYsR0FBQW96RixFQUFBcHpGLE1BQ0FvRCxFQUFBZ3dGLEVBQUFod0YsTUFDQSxPQUFBcEQsSUFBQW1yRixFQUFBOTZDLGFBQUFqdEMsR0FBQStuRixFQUFBbHZDLGVBR0FvM0MsRUFBQUYsRUFBQXgvRixPQUFBLEVBQUF3L0YsRUFBQSxHQUFBMzdGLElBQUF5N0YsRUFBQSxHQUFBejdGLElBRUFpN0UsRUFBQThiLEVBQUF2a0YsTUFBQSxLQUFBLEVBRUEsT0FBQXFwRixJQUFBNWdCLEVBQUEsSUFBQUEsRUFBQSxJQVlBLFFBQUE2Z0IsR0FBQXBwRixFQUFBaWhGLEVBQUFxSCxHQUVBLE1BQUFaLEdBQUFZLEVBREFwQyxFQUFBakYsRUFBQXFILElBV0EsUUFBQWUsR0FBQTk3QyxHQUNBLEdBQUEvMUMsR0FBQStvQixpQkFBQWd0QixHQUNBMVEsRUFBQS9rQyxXQUFBTixFQUFBeXdGLFdBQUFud0YsV0FBQU4sRUFBQTh4RixjQUNBeHNELEVBQUFobEMsV0FBQU4sRUFBQXNwQixZQUFBaHBCLFdBQUFOLEVBQUF3cEIsWUFLQSxRQUhBbHJCLE1BQUF5M0MsRUFBQTNmLFlBQUFrUCxFQUNBNWpDLE9BQUFxMEMsRUFBQTFmLGFBQUFnUCxHQVlBLFFBQUEwc0QsR0FBQWxGLEdBQ0EsR0FBQXh6RSxJQUFBbVMsS0FBQSxRQUFBd1osTUFBQSxPQUFBQyxPQUFBLE1BQUF2dkIsSUFBQSxTQUNBLE9BQUFtM0UsR0FBQTkyRixRQUFBLHlCQUFBLFNBQUFpakIsR0FDQSxNQUFBSyxHQUFBTCxLQWNBLFFBQUFnNUUsR0FBQXZJLEVBQUF3SSxFQUFBcEYsR0FDQUEsRUFBQUEsRUFBQXZrRixNQUFBLEtBQUEsRUFHQSxJQUFBNHBGLEdBQUFMLEVBQUFwSSxHQUdBMEksR0FDQTd6RixNQUFBNHpGLEVBQUE1ekYsTUFDQW9ELE9BQUF3d0YsRUFBQXh3RixRQUlBMHdGLEdBQUEsS0FBQSxRQUFBLFFBQUFsL0YsUUFBQTI1RixHQUNBd0YsRUFBQUQsRUFBQSxNQUFBLE9BQ0FFLEVBQUFGLEVBQUEsT0FBQSxNQUNBRyxFQUFBSCxFQUFBLFNBQUEsUUFDQUksRUFBQUosRUFBQSxRQUFBLFFBU0EsT0FQQUQsR0FBQUUsR0FBQUosRUFBQUksR0FBQUosRUFBQU0sR0FBQSxFQUFBTCxFQUFBSyxHQUFBLEVBRUFKLEVBQUFHLEdBREF6RixJQUFBeUYsRUFDQUwsRUFBQUssR0FBQUosRUFBQU0sR0FFQVAsRUFBQUYsRUFBQU8sSUFHQUgsRUFZQSxRQUFBTSxHQUFBL3BGLEVBQUE0UCxHQUVBLE1BQUE1VSxPQUFBakQsVUFBQXlSLEtBQ0F4SixFQUFBd0osS0FBQW9HLEdBSUE1UCxFQUFBclYsT0FBQWlsQixHQUFBLEdBWUEsUUFBQW82RSxHQUFBaHFGLEVBQUFwUyxFQUFBaEMsR0FFQSxHQUFBb1AsTUFBQWpELFVBQUFvckYsVUFDQSxNQUFBbmpGLEdBQUFtakYsVUFBQSxTQUFBdDRGLEdBQ0EsTUFBQUEsR0FBQStDLEtBQUFoQyxHQUtBLElBQUFULEdBQUE0K0YsRUFBQS9wRixFQUFBLFNBQUExVyxHQUNBLE1BQUFBLEdBQUFzRSxLQUFBaEMsR0FFQSxPQUFBb1UsR0FBQXhWLFFBQUFXLEdBYUEsUUFBQTgrRixHQUFBQyxFQUFBbjlGLEVBQUFvOUYsR0FvQkEsV0FuQkE3OUYsS0FBQTY5RixFQUFBRCxFQUFBQSxFQUFBMzlGLE1BQUEsRUFBQXk5RixFQUFBRSxFQUFBLE9BQUFDLEtBRUEvakQsUUFBQSxTQUFBdWdELEdBQ0FBLEVBQUEsVUFFQWh3RSxRQUFBQyxLQUFBLHdEQUVBLElBQUF0a0IsR0FBQXEwRixFQUFBLFVBQUFBLEVBQUFyMEYsRUFDQXEwRixHQUFBejFFLFNBQUEvbUIsRUFBQW1JLEtBSUF2RixFQUFBbzZGLFFBQUFwRyxPQUFBbUcsRUFBQW42RixFQUFBbzZGLFFBQUFwRyxRQUNBaDBGLEVBQUFvNkYsUUFBQWlCLFVBQUFsQixFQUFBbjZGLEVBQUFvNkYsUUFBQWlCLFdBRUFyN0YsRUFBQXVGLEVBQUF2RixFQUFBNDVGLE1BSUE1NUYsRUFVQSxRQUFBbTZDLEtBRUEsSUFBQXorQyxLQUFBcVgsTUFBQXNxRixZQUFBLENBSUEsR0FBQXI5RixJQUNBcTZDLFNBQUEzK0MsS0FDQTZPLFVBQ0EreUYsZUFDQTEvRSxjQUNBMi9FLFNBQUEsRUFDQW5ELFdBSUFwNkYsR0FBQW82RixRQUFBaUIsVUFBQWMsRUFBQXpnRyxLQUFBcVgsTUFBQXJYLEtBQUFzNEYsT0FBQXQ0RixLQUFBMi9GLFdBS0FyN0YsRUFBQW8zRixVQUFBdUUsRUFBQWpnRyxLQUFBdUMsUUFBQW01RixVQUFBcDNGLEVBQUFvNkYsUUFBQWlCLFVBQUEzL0YsS0FBQXM0RixPQUFBdDRGLEtBQUEyL0YsVUFBQTMvRixLQUFBdUMsUUFBQWsvRixVQUFBSyxLQUFBbEMsa0JBQUE1L0YsS0FBQXVDLFFBQUFrL0YsVUFBQUssS0FBQXZuRSxTQUdBajJCLEVBQUF5OUYsa0JBQUF6OUYsRUFBQW8zRixVQUdBcDNGLEVBQUFvNkYsUUFBQXBHLE9BQUF1SSxFQUFBN2dHLEtBQUFzNEYsT0FBQWgwRixFQUFBbzZGLFFBQUFpQixVQUFBcjdGLEVBQUFvM0YsV0FDQXAzRixFQUFBbzZGLFFBQUFwRyxPQUFBeC9ELFNBQUEsV0FHQXgwQixFQUFBazlGLEVBQUF4aEcsS0FBQXloRyxVQUFBbjlGLEdBSUF0RSxLQUFBcVgsTUFBQTJxRixVQUlBaGlHLEtBQUF1QyxRQUFBMC9GLFNBQUEzOUYsSUFIQXRFLEtBQUFxWCxNQUFBMnFGLFdBQUEsRUFDQWhpRyxLQUFBdUMsUUFBQTIvRixTQUFBNTlGLEtBWUEsUUFBQTY5RixHQUFBVixFQUFBVyxHQUNBLE1BQUFYLEdBQUFZLEtBQUEsU0FBQXhJLEdBQ0EsR0FBQXo0RixHQUFBeTRGLEVBQUF6NEYsSUFFQSxPQURBeTRGLEdBQUFweEUsU0FDQXJuQixJQUFBZ2hHLElBV0EsUUFBQUUsR0FBQWx2RCxHQUlBLElBQUEsR0FIQWtuRCxLQUFBLEVBQUEsS0FBQSxTQUFBLE1BQUEsS0FDQUMsRUFBQW5uRCxFQUFBK0ssT0FBQSxHQUFBbHdDLGNBQUFtbEMsRUFBQXR2QyxNQUFBLEdBRUFsQyxFQUFBLEVBQUFBLEVBQUEwNEYsRUFBQXg1RixPQUFBLEVBQUFjLElBQUEsQ0FDQSxHQUFBMlMsR0FBQStsRixFQUFBMTRGLEdBQ0EyZ0csRUFBQWh1RixFQUFBLEdBQUFBLEVBQUFnbUYsRUFBQW5uRCxDQUNBLFFBQUEsS0FBQXh6QyxTQUFBNkcsS0FBQVIsTUFBQXM4RixHQUNBLE1BQUFBLEdBR0EsTUFBQSxNQVFBLFFBQUExOEMsTUFtQkEsTUFsQkE3bEQsTUFBQXFYLE1BQUFzcUYsYUFBQSxFQUdBUSxFQUFBbmlHLEtBQUF5aEcsVUFBQSxnQkFDQXpoRyxLQUFBczRGLE9BQUE1dEYsZ0JBQUEsZUFDQTFLLEtBQUFzNEYsT0FBQXJ5RixNQUFBbzBCLEtBQUEsR0FDQXI2QixLQUFBczRGLE9BQUFyeUYsTUFBQTZ5QixTQUFBLEdBQ0E5NEIsS0FBQXM0RixPQUFBcnlGLE1BQUFzZSxJQUFBLEdBQ0F2a0IsS0FBQXM0RixPQUFBcnlGLE1BQUFxOEYsRUFBQSxjQUFBLElBR0F0aUcsS0FBQXdpRyx3QkFJQXhpRyxLQUFBdUMsUUFBQWtnRyxpQkFDQXppRyxLQUFBczRGLE9BQUE1M0YsV0FBQUMsWUFBQVgsS0FBQXM0RixRQUVBdDRGLEtBUUEsUUFBQTBpRyxJQUFBOTlDLEdBQ0EsR0FBQXQrQyxHQUFBcytDLEVBQUF0K0MsYUFDQSxPQUFBQSxHQUFBQSxFQUFBZ2UsWUFBQXZrQixPQUdBLFFBQUE0aUcsSUFBQXhELEVBQUFuMUYsRUFBQThCLEVBQUE4MkYsR0FDQSxHQUFBQyxHQUFBLFNBQUExRCxFQUFBaitGLFNBQ0F5VSxFQUFBa3RGLEVBQUExRCxFQUFBNzRGLGNBQUFnZSxZQUFBNjZFLENBQ0F4cEYsR0FBQTZPLGlCQUFBeGEsRUFBQThCLEdBQUFnM0YsU0FBQSxJQUVBRCxHQUNBRixHQUFBekYsRUFBQXZuRixFQUFBalYsWUFBQXNKLEVBQUE4QixFQUFBODJGLEdBRUFBLEVBQUEzNUYsS0FBQTBNLEdBU0EsUUFBQW90RixJQUFBcEQsRUFBQXA5RixFQUFBOFUsRUFBQTJyRixHQUVBM3JGLEVBQUEyckYsWUFBQUEsRUFDQU4sR0FBQS9DLEdBQUFuN0UsaUJBQUEsU0FBQW5OLEVBQUEyckYsYUFBQUYsU0FBQSxHQUdBLElBQUFHLEdBQUEvRixFQUFBeUMsRUFLQSxPQUpBZ0QsSUFBQU0sRUFBQSxTQUFBNXJGLEVBQUEyckYsWUFBQTNyRixFQUFBdXJGLGVBQ0F2ckYsRUFBQTRyRixjQUFBQSxFQUNBNXJGLEVBQUE2ckYsZUFBQSxFQUVBN3JGLEVBU0EsUUFBQThyRixNQUNBbmpHLEtBQUFxWCxNQUFBNnJGLGdCQUNBbGpHLEtBQUFxWCxNQUFBMHJGLEdBQUEvaUcsS0FBQTIvRixVQUFBMy9GLEtBQUF1QyxRQUFBdkMsS0FBQXFYLE1BQUFyWCxLQUFBb2pHLGlCQVVBLFFBQUFDLElBQUExRCxFQUFBdG9GLEdBY0EsTUFaQXFyRixJQUFBL0MsR0FBQTM3RixvQkFBQSxTQUFBcVQsRUFBQTJyRixhQUdBM3JGLEVBQUF1ckYsY0FBQWpsRCxRQUFBLFNBQUFob0MsR0FDQUEsRUFBQTNSLG9CQUFBLFNBQUFxVCxFQUFBMnJGLGVBSUEzckYsRUFBQTJyRixZQUFBLEtBQ0EzckYsRUFBQXVyRixpQkFDQXZyRixFQUFBNHJGLGNBQUEsS0FDQTVyRixFQUFBNnJGLGVBQUEsRUFDQTdyRixFQVVBLFFBQUFtckYsTUFDQXhpRyxLQUFBcVgsTUFBQTZyRixnQkFDQTU2QyxxQkFBQXRvRCxLQUFBb2pHLGdCQUNBcGpHLEtBQUFxWCxNQUFBZ3NGLEdBQUFyakcsS0FBQTIvRixVQUFBMy9GLEtBQUFxWCxRQVdBLFFBQUFtQyxJQUFBOFEsR0FDQSxNQUFBLEtBQUFBLElBQUE3USxNQUFBdEssV0FBQW1iLEtBQUE0UCxTQUFBNVAsR0FXQSxRQUFBZzVFLElBQUExK0MsRUFBQS8xQyxHQUNBNEksT0FBQTJFLEtBQUF2TixHQUFBOHVDLFFBQUEsU0FBQXg0QyxHQUNBLEdBQUFTLEdBQUEsSUFFQSxLQUFBLFFBQUEsU0FBQSxNQUFBLFFBQUEsU0FBQSxRQUFBN0QsUUFBQW9ELElBQUFxVSxHQUFBM0ssRUFBQTFKLE1BQ0FTLEVBQUEsTUFFQWcvQyxFQUFBMytDLE1BQUFkLEdBQUEwSixFQUFBMUosR0FBQVMsSUFZQSxRQUFBMjlGLElBQUEzK0MsRUFBQTFpQyxHQUNBekssT0FBQTJFLEtBQUE4RixHQUFBeTdCLFFBQUEsU0FBQXg0QyxJQUVBLElBREErYyxFQUFBL2MsR0FFQXkvQyxFQUFBanBDLGFBQUF4VyxFQUFBK2MsRUFBQS9jLElBRUF5L0MsRUFBQWw2QyxnQkFBQXZGLEtBY0EsUUFBQXErRixJQUFBbC9GLEdBZ0JBLE1BWEFnL0YsSUFBQWgvRixFQUFBcTZDLFNBQUEyNUMsT0FBQWgwRixFQUFBdUssUUFJQTAwRixHQUFBai9GLEVBQUFxNkMsU0FBQTI1QyxPQUFBaDBGLEVBQUE0ZCxZQUdBNWQsRUFBQW0vRixjQUFBaHNGLE9BQUEyRSxLQUFBOVgsRUFBQXM5RixhQUFBOWdHLFFBQ0F3aUcsR0FBQWgvRixFQUFBbS9GLGFBQUFuL0YsRUFBQXM5RixhQUdBdDlGLEVBYUEsUUFBQW8vRixJQUFBL0QsRUFBQXJILEVBQUEvMUYsRUFBQW9oRyxFQUFBdHNGLEdBRUEsR0FBQXlwRixHQUFBTCxFQUFBcHBGLEVBQUFpaEYsRUFBQXFILEdBS0FqRSxFQUFBdUUsRUFBQTE5RixFQUFBbTVGLFVBQUFvRixFQUFBeEksRUFBQXFILEVBQUFwOUYsRUFBQWsvRixVQUFBSyxLQUFBbEMsa0JBQUFyOUYsRUFBQWsvRixVQUFBSyxLQUFBdm5FLFFBUUEsT0FOQSs5RCxHQUFBMzhFLGFBQUEsY0FBQSsvRSxHQUlBNEgsR0FBQWhMLEdBQUF4L0QsU0FBQSxhQUVBdjJCLEVBVUEsUUFBQXFoRyxJQUFBdC9GLEVBQUEvQixHQUNBLEdBQUEyeEMsR0FBQTN4QyxFQUFBMnhDLEVBQ0FDLEVBQUE1eEMsRUFBQTR4QyxFQUNBbWtELEVBQUFoMEYsRUFBQW82RixRQUFBcEcsT0FJQXVMLEVBQUF2QyxFQUFBaDlGLEVBQUFxNkMsU0FBQThpRCxVQUFBLFNBQUF2RCxHQUNBLE1BQUEsZUFBQUEsRUFBQTk4RixPQUNBMGlHLG9CQUNBamdHLEtBQUFnZ0csR0FDQTMxRSxRQUFBQyxLQUFBLGdJQUVBLElBQUEyMUUsT0FBQWpnRyxLQUFBZ2dHLEVBQUFBLEVBQUF0aEcsRUFBQXVoRyxnQkFFQXI3RCxFQUFBMjBELEVBQUE5NEYsRUFBQXE2QyxTQUFBMjVDLFFBQ0F5TCxFQUFBM3BFLEVBQUFxTyxHQUdBNTVCLEdBQ0FpcUIsU0FBQXcvRCxFQUFBeC9ELFVBSUE0bEUsR0FDQXJrRSxLQUFBN3JCLEtBQUF5L0IsTUFBQXFxRCxFQUFBaitELE1BQ0E5VixJQUFBL1YsS0FBQXkvQixNQUFBcXFELEVBQUEvekUsS0FDQXV2QixPQUFBdGxDLEtBQUF5L0IsTUFBQXFxRCxFQUFBeGtELFFBQ0FELE1BQUFybEMsS0FBQXkvQixNQUFBcXFELEVBQUF6a0QsUUFHQXVxRCxFQUFBLFdBQUFscUQsRUFBQSxNQUFBLFNBQ0FtcUQsRUFBQSxVQUFBbHFELEVBQUEsT0FBQSxRQUtBNnZELEVBQUExQixFQUFBLGFBV0Fqb0UsTUFBQSxHQUNBOVYsTUFBQSxFQVdBLElBVEFBLEVBREEsV0FBQTY1RSxHQUNBMkYsRUFBQXh6RixPQUFBbXVGLEVBQUE1cUQsT0FFQTRxRCxFQUFBbjZFLElBR0E4VixFQURBLFVBQUFna0UsR0FDQTBGLEVBQUE1MkYsTUFBQXV4RixFQUFBN3FELE1BRUE2cUQsRUFBQXJrRSxLQUVBeXBFLEdBQUFFLEVBQ0FuMUYsRUFBQW0xRixHQUFBLGVBQUEzcEUsRUFBQSxPQUFBOVYsRUFBQSxTQUNBMVYsRUFBQXV2RixHQUFBLEVBQ0F2dkYsRUFBQXd2RixHQUFBLEVBQ0F4dkYsRUFBQW8xRixXQUFBLGdCQUNBLENBRUEsR0FBQUMsR0FBQSxXQUFBOUYsR0FBQSxFQUFBLEVBQ0ErRixFQUFBLFVBQUE5RixHQUFBLEVBQUEsQ0FDQXh2RixHQUFBdXZGLEdBQUE3NUUsRUFBQTIvRSxFQUNBcjFGLEVBQUF3dkYsR0FBQWhrRSxFQUFBOHBFLEVBQ0F0MUYsRUFBQW8xRixXQUFBN0YsRUFBQSxLQUFBQyxFQUlBLEdBQUFuOEUsSUFDQWtpRixjQUFBOS9GLEVBQUFvM0YsVUFRQSxPQUpBcDNGLEdBQUE0ZCxXQUFBeThFLE1BQUF6OEUsRUFBQTVkLEVBQUE0ZCxZQUNBNWQsRUFBQXVLLE9BQUE4dkYsTUFBQTl2RixFQUFBdkssRUFBQXVLLFFBQ0F2SyxFQUFBczlGLFlBQUFqRCxNQUFBcjZGLEVBQUFvNkYsUUFBQTJGLE1BQUEvL0YsRUFBQXM5RixhQUVBdDlGLEVBYUEsUUFBQWdnRyxJQUFBN0MsRUFBQThDLEVBQUFDLEdBQ0EsR0FBQUMsR0FBQW5ELEVBQUFHLEVBQUEsU0FBQTVILEdBRUEsTUFEQUEsR0FBQXo0RixPQUNBbWpHLElBR0FHLElBQUFELEdBQUFoRCxFQUFBWSxLQUFBLFNBQUFuRSxHQUNBLE1BQUFBLEdBQUE5OEYsT0FBQW9qRyxHQUFBdEcsRUFBQXoxRSxTQUFBeTFFLEVBQUF6a0UsTUFBQWdyRSxFQUFBaHJFLE9BR0EsS0FBQWlyRSxFQUFBLENBQ0EsR0FBQUMsR0FBQSxJQUFBSixFQUFBLElBQ0FLLEVBQUEsSUFBQUosRUFBQSxHQUNBdDJFLFNBQUFDLEtBQUF5MkUsRUFBQSw0QkFBQUQsRUFBQSw0REFBQUEsRUFBQSxLQUVBLE1BQUFELEdBVUEsUUFBQUwsSUFBQS8vRixFQUFBL0IsR0FDQSxHQUFBc2lHLEVBR0EsS0FBQVAsR0FBQWhnRyxFQUFBcTZDLFNBQUE4aUQsVUFBQSxRQUFBLGdCQUNBLE1BQUFuOUYsRUFHQSxJQUFBbS9GLEdBQUFsaEcsRUFBQXFpRCxPQUdBLElBQUEsZ0JBQUE2K0MsSUFJQSxLQUhBQSxFQUFBbi9GLEVBQUFxNkMsU0FBQTI1QyxPQUFBbGlCLGNBQUFxdEIsSUFJQSxNQUFBbi9GLE9BS0EsS0FBQUEsRUFBQXE2QyxTQUFBMjVDLE9BQUFwd0YsU0FBQXU3RixHQUVBLE1BREF2MUUsU0FBQUMsS0FBQSxpRUFDQTdwQixDQUlBLElBQUFvM0YsR0FBQXAzRixFQUFBbzNGLFVBQUF2a0YsTUFBQSxLQUFBLEdBQ0EydEYsRUFBQXhnRyxFQUFBbzZGLFFBQ0FwRyxFQUFBd00sRUFBQXhNLE9BQ0FxSCxFQUFBbUYsRUFBQW5GLFVBRUFvRixHQUFBLEtBQUEsT0FBQSxTQUFBaGpHLFFBQUEyNUYsR0FFQTVpRixFQUFBaXNGLEVBQUEsU0FBQSxRQUNBQyxFQUFBRCxFQUFBLE1BQUEsT0FDQWpILEVBQUFrSCxFQUFBM2pHLGNBQ0E0akcsRUFBQUYsRUFBQSxPQUFBLE1BQ0FHLEVBQUFILEVBQUEsU0FBQSxRQUNBSSxFQUFBekUsRUFBQStDLEdBQUEzcUYsRUFRQTZtRixHQUFBdUYsR0FBQUMsRUFBQTdNLEVBQUF3RixLQUNBeDVGLEVBQUFvNkYsUUFBQXBHLE9BQUF3RixJQUFBeEYsRUFBQXdGLElBQUE2QixFQUFBdUYsR0FBQUMsSUFHQXhGLEVBQUE3QixHQUFBcUgsRUFBQTdNLEVBQUE0TSxLQUNBNWdHLEVBQUFvNkYsUUFBQXBHLE9BQUF3RixJQUFBNkIsRUFBQTdCLEdBQUFxSCxFQUFBN00sRUFBQTRNLElBRUE1Z0csRUFBQW82RixRQUFBcEcsT0FBQW1HLEVBQUFuNkYsRUFBQW82RixRQUFBcEcsT0FHQSxJQUFBOE0sR0FBQXpGLEVBQUE3QixHQUFBNkIsRUFBQTdtRixHQUFBLEVBQUFxc0YsRUFBQSxFQUlBei9GLEVBQUFzM0YsRUFBQTE0RixFQUFBcTZDLFNBQUEyNUMsUUFDQStNLEVBQUFsMkYsV0FBQXpKLEVBQUEsU0FBQXMvRixHQUFBLElBQ0FNLEVBQUFuMkYsV0FBQXpKLEVBQUEsU0FBQXMvRixFQUFBLFNBQUEsSUFDQU8sRUFBQUgsRUFBQTlnRyxFQUFBbzZGLFFBQUFwRyxPQUFBd0YsR0FBQXVILEVBQUFDLENBUUEsT0FMQUMsR0FBQS8yRixLQUFBQyxJQUFBRCxLQUFBa3pDLElBQUE0MkMsRUFBQXgvRSxHQUFBcXNGLEVBQUFJLEdBQUEsR0FFQWpoRyxFQUFBbS9GLGFBQUFBLEVBQ0FuL0YsRUFBQW82RixRQUFBMkYsT0FBQVEsS0FBQTUxRSxHQUFBNDFFLEVBQUEvRyxFQUFBdHZGLEtBQUF5eEMsTUFBQXNsRCxJQUFBdDJFLEdBQUE0MUUsRUFBQUksRUFBQSxJQUFBSixHQUVBdmdHLEVBVUEsUUFBQWtoRyxJQUFBNWxCLEdBQ0EsTUFBQSxRQUFBQSxFQUNBLFFBQ0EsVUFBQUEsRUFDQSxNQUVBQSxFQWlEQSxRQUFBNmxCLElBQUEvSixHQUNBLEdBQUExcUQsR0FBQTltQyxVQUFBcEosT0FBQSxPQUFBK0MsS0FBQXFHLFVBQUEsSUFBQUEsVUFBQSxHQUVBckQsRUFBQTYrRixHQUFBM2pHLFFBQUEyNUYsR0FDQW5rRixFQUFBbXVGLEdBQUE1aEcsTUFBQStDLEVBQUEsR0FBQWtGLE9BQUEyNUYsR0FBQTVoRyxNQUFBLEVBQUErQyxHQUNBLE9BQUFtcUMsR0FBQXo1QixFQUFBaVUsVUFBQWpVLEVBZ0JBLFFBQUF1cUYsSUFBQXg5RixFQUFBL0IsR0FFQSxHQUFBNC9GLEVBQUE3OUYsRUFBQXE2QyxTQUFBOGlELFVBQUEsU0FDQSxNQUFBbjlGLEVBR0EsSUFBQUEsRUFBQXU5RixTQUFBdjlGLEVBQUFvM0YsWUFBQXAzRixFQUFBeTlGLGtCQUVBLE1BQUF6OUYsRUFHQSxJQUFBdTdGLEdBQUFILEVBQUFwN0YsRUFBQXE2QyxTQUFBMjVDLE9BQUFoMEYsRUFBQXE2QyxTQUFBZ2hELFVBQUFwOUYsRUFBQWc0QixRQUFBaDRCLEVBQUFxOUYsbUJBRUFsRSxFQUFBcDNGLEVBQUFvM0YsVUFBQXZrRixNQUFBLEtBQUEsR0FDQXd1RixFQUFBL0UsRUFBQWxGLEdBQ0E5YixFQUFBdDdFLEVBQUFvM0YsVUFBQXZrRixNQUFBLEtBQUEsSUFBQSxHQUVBeXVGLElBRUEsUUFBQXJqRyxFQUFBc2pHLFVBQ0EsSUFBQUMsSUFBQUMsS0FDQUgsR0FBQWxLLEVBQUFpSyxFQUNBLE1BQ0EsS0FBQUcsSUFBQUUsVUFDQUosRUFBQUgsR0FBQS9KLEVBQ0EsTUFDQSxLQUFBb0ssSUFBQUcsaUJBQ0FMLEVBQUFILEdBQUEvSixHQUFBLEVBQ0EsTUFDQSxTQUNBa0ssRUFBQXJqRyxFQUFBc2pHLFNBa0RBLE1BL0NBRCxHQUFBam9ELFFBQUEsU0FBQTVpQixFQUFBbDBCLEdBQ0EsR0FBQTYwRixJQUFBM2dFLEdBQUE2cUUsRUFBQTlrRyxTQUFBK0YsRUFBQSxFQUNBLE1BQUF2QyxFQUdBbzNGLEdBQUFwM0YsRUFBQW8zRixVQUFBdmtGLE1BQUEsS0FBQSxHQUNBd3VGLEVBQUEvRSxFQUFBbEYsRUFFQSxJQUFBc0YsR0FBQTE4RixFQUFBbzZGLFFBQUFwRyxPQUNBNE4sRUFBQTVoRyxFQUFBbzZGLFFBQUFpQixVQUdBMXhELEVBQUF6L0IsS0FBQXkvQixNQUNBazRELEVBQUEsU0FBQXpLLEdBQUF6dEQsRUFBQSt5RCxFQUFBbnRELE9BQUE1RixFQUFBaTRELEVBQUE3ckUsT0FBQSxVQUFBcWhFLEdBQUF6dEQsRUFBQSt5RCxFQUFBM21FLE1BQUE0VCxFQUFBaTRELEVBQUFyeUQsUUFBQSxRQUFBNm5ELEdBQUF6dEQsRUFBQSt5RCxFQUFBbHRELFFBQUE3RixFQUFBaTRELEVBQUEzaEYsTUFBQSxXQUFBbTNFLEdBQUF6dEQsRUFBQSt5RCxFQUFBejhFLEtBQUEwcEIsRUFBQWk0RCxFQUFBcHlELFFBRUFzeUQsRUFBQW40RCxFQUFBK3lELEVBQUEzbUUsTUFBQTRULEVBQUE0eEQsRUFBQXhsRSxNQUNBZ3NFLEVBQUFwNEQsRUFBQSt5RCxFQUFBbnRELE9BQUE1RixFQUFBNHhELEVBQUFoc0QsT0FDQXl5RCxFQUFBcjRELEVBQUEreUQsRUFBQXo4RSxLQUFBMHBCLEVBQUE0eEQsRUFBQXQ3RSxLQUNBZ2lGLEVBQUF0NEQsRUFBQSt5RCxFQUFBbHRELFFBQUE3RixFQUFBNHhELEVBQUEvckQsUUFFQTB5RCxFQUFBLFNBQUE5SyxHQUFBMEssR0FBQSxVQUFBMUssR0FBQTJLLEdBQUEsUUFBQTNLLEdBQUE0SyxHQUFBLFdBQUE1SyxHQUFBNkssRUFHQXhCLEdBQUEsS0FBQSxNQUFBLFVBQUFoakcsUUFBQTI1RixHQUNBK0ssSUFBQWxrRyxFQUFBbWtHLGlCQUFBM0IsR0FBQSxVQUFBbmxCLEdBQUF3bUIsR0FBQXJCLEdBQUEsUUFBQW5sQixHQUFBeW1CLElBQUF0QixHQUFBLFVBQUFubEIsR0FBQTBtQixJQUFBdkIsR0FBQSxRQUFBbmxCLEdBQUEybUIsSUFFQUosR0FBQUssR0FBQUMsS0FFQW5pRyxFQUFBdTlGLFNBQUEsR0FFQXNFLEdBQUFLLEtBQ0E5SyxFQUFBa0ssRUFBQS8rRixFQUFBLElBR0E0L0YsSUFDQTdtQixFQUFBNGxCLEdBQUE1bEIsSUFHQXQ3RSxFQUFBbzNGLFVBQUFBLEdBQUE5YixFQUFBLElBQUFBLEVBQUEsSUFJQXQ3RSxFQUFBbzZGLFFBQUFwRyxPQUFBcUcsTUFBQXI2RixFQUFBbzZGLFFBQUFwRyxPQUFBdUksRUFBQXY4RixFQUFBcTZDLFNBQUEyNUMsT0FBQWgwRixFQUFBbzZGLFFBQUFpQixVQUFBcjdGLEVBQUFvM0YsWUFFQXAzRixFQUFBazlGLEVBQUFsOUYsRUFBQXE2QyxTQUFBOGlELFVBQUFuOUYsRUFBQSxXQUdBQSxFQVVBLFFBQUFxaUcsSUFBQXJpRyxHQUNBLEdBQUF3Z0csR0FBQXhnRyxFQUFBbzZGLFFBQ0FwRyxFQUFBd00sRUFBQXhNLE9BQ0FxSCxFQUFBbUYsRUFBQW5GLFVBRUFqRSxFQUFBcDNGLEVBQUFvM0YsVUFBQXZrRixNQUFBLEtBQUEsR0FDQTgyQixFQUFBei9CLEtBQUF5L0IsTUFDQTgyRCxHQUFBLEtBQUEsTUFBQSxVQUFBaGpHLFFBQUEyNUYsR0FDQW9DLEVBQUFpSCxFQUFBLFFBQUEsU0FDQUcsRUFBQUgsRUFBQSxPQUFBLE1BQ0EzRCxFQUFBMkQsRUFBQSxRQUFBLFFBU0EsT0FQQXpNLEdBQUF3RixHQUFBN3ZELEVBQUEweEQsRUFBQXVGLE1BQ0E1Z0csRUFBQW82RixRQUFBcEcsT0FBQTRNLEdBQUFqM0QsRUFBQTB4RCxFQUFBdUYsSUFBQTVNLEVBQUE4SSxJQUVBOUksRUFBQTRNLEdBQUFqM0QsRUFBQTB4RCxFQUFBN0IsTUFDQXg1RixFQUFBbzZGLFFBQUFwRyxPQUFBNE0sR0FBQWozRCxFQUFBMHhELEVBQUE3QixLQUdBeDVGLEVBZUEsUUFBQXNpRyxJQUFBN29ELEVBQUFxakQsRUFBQUosRUFBQUYsR0FFQSxHQUFBM3BGLEdBQUE0bUMsRUFBQXI3QyxNQUFBLDZCQUNBUyxHQUFBZ1UsRUFBQSxHQUNBdlIsRUFBQXVSLEVBQUEsRUFHQSxLQUFBaFUsRUFDQSxNQUFBNDZDLEVBR0EsSUFBQSxJQUFBbjRDLEVBQUE3RCxRQUFBLEtBQUEsQ0FDQSxHQUFBNmlELE9BQUEsRUFDQSxRQUFBaC9DLEdBQ0EsSUFBQSxLQUNBZy9DLEVBQUFvOEMsQ0FDQSxNQUNBLEtBQUEsSUFDQSxJQUFBLEtBQ0EsUUFDQXA4QyxFQUFBazhDLEVBSUEsTUFEQXJDLEdBQUE3NUMsR0FDQXc4QyxHQUFBLElBQUFqK0YsRUFDQSxHQUFBLE9BQUF5QyxHQUFBLE9BQUFBLEVBQUEsQ0FRQSxPQUxBLE9BQUFBLEVBQ0E0SSxLQUFBQyxJQUFBN08sU0FBQXVrQixnQkFBQWlsQyxhQUFBcnBELE9BQUF3OUMsYUFBQSxHQUVBL3VDLEtBQUFDLElBQUE3TyxTQUFBdWtCLGdCQUFBcTVCLFlBQUF6OUMsT0FBQStpRCxZQUFBLElBRUEsSUFBQTMvQyxFQUlBLE1BQUFBLEdBZUEsUUFBQTBqRyxJQUFBci9ELEVBQUF3NUQsRUFBQUYsRUFBQWdHLEdBQ0EsR0FBQXBJLElBQUEsRUFBQSxHQUtBcUksR0FBQSxLQUFBLFFBQUEsUUFBQWhsRyxRQUFBK2tHLEdBSUFFLEVBQUF4L0QsRUFBQXJ3QixNQUFBLFdBQUF6SyxJQUFBLFNBQUF1NkYsR0FDQSxNQUFBQSxHQUFBbnRGLFNBS0FvdEYsRUFBQUYsRUFBQWpsRyxRQUFBdS9GLEVBQUEwRixFQUFBLFNBQUFDLEdBQ0EsT0FBQSxJQUFBQSxFQUFBMzFDLE9BQUEsVUFHQTAxQyxHQUFBRSxLQUFBLElBQUFGLEVBQUFFLEdBQUFubEcsUUFBQSxNQUNBbXNCLFFBQUFDLEtBQUEsK0VBS0EsSUFBQWc1RSxHQUFBLGNBQ0FuVSxHQUFBLElBQUFrVSxHQUFBRixFQUFBbGpHLE1BQUEsRUFBQW9qRyxHQUFBbjdGLFFBQUFpN0YsRUFBQUUsR0FBQS92RixNQUFBZ3dGLEdBQUEsTUFBQUgsRUFBQUUsR0FBQS92RixNQUFBZ3dGLEdBQUEsSUFBQXA3RixPQUFBaTdGLEVBQUFsakcsTUFBQW9qRyxFQUFBLE1BQUFGLEVBcUNBLE9BbENBaFUsR0FBQUEsRUFBQXRtRixJQUFBLFNBQUEwNkYsRUFBQXZnRyxHQUVBLEdBQUF1NkYsSUFBQSxJQUFBdjZGLEdBQUFrZ0csRUFBQUEsR0FBQSxTQUFBLFFBQ0FNLEdBQUE7d0NBQ0EsT0FBQUQsR0FHQUUsT0FBQSxTQUFBeHFGLEVBQUFDLEdBQ0EsTUFBQSxLQUFBRCxFQUFBQSxFQUFBaGMsT0FBQSxLQUFBLEtBQUEsSUFBQSxLQUFBaUIsUUFBQWdiLElBQ0FELEVBQUFBLEVBQUFoYyxPQUFBLEdBQUFpYyxFQUNBc3FGLEdBQUEsRUFDQXZxRixHQUNBdXFGLEdBQ0F2cUYsRUFBQUEsRUFBQWhjLE9BQUEsSUFBQWljLEVBQ0FzcUYsR0FBQSxFQUNBdnFGLEdBRUFBLEVBQUEvUSxPQUFBZ1IsUUFJQXJRLElBQUEsU0FBQXF4QyxHQUNBLE1BQUE2b0QsSUFBQTdvRCxFQUFBcWpELEVBQUFKLEVBQUFGLE9BS0E5TixFQUFBcjFDLFFBQUEsU0FBQXlwRCxFQUFBdmdHLEdBQ0F1Z0csRUFBQXpwRCxRQUFBLFNBQUFzcEQsRUFBQU0sR0FDQS90RixHQUFBeXRGLEtBQ0F2SSxFQUFBNzNGLElBQUFvZ0csR0FBQSxNQUFBRyxFQUFBRyxFQUFBLElBQUEsRUFBQSxRQUlBN0ksRUFZQSxRQUFBbDNELElBQUFsakMsRUFBQXUxRixHQUNBLEdBQUFyeUQsR0FBQXF5RCxFQUFBcnlELE9BQ0FrMEQsRUFBQXAzRixFQUFBbzNGLFVBQ0FvSixFQUFBeGdHLEVBQUFvNkYsUUFDQXBHLEVBQUF3TSxFQUFBeE0sT0FDQXFILEVBQUFtRixFQUFBbkYsVUFFQW1ILEVBQUFwTCxFQUFBdmtGLE1BQUEsS0FBQSxHQUVBdW5GLE1BQUEsRUFzQkEsT0FwQkFBLEdBREFsbEYsSUFBQWd1QixLQUNBQSxFQUFBLEdBRUFxL0QsR0FBQXIvRCxFQUFBOHdELEVBQUFxSCxFQUFBbUgsR0FHQSxTQUFBQSxHQUNBeE8sRUFBQS96RSxLQUFBbTZFLEVBQUEsR0FDQXBHLEVBQUFqK0QsTUFBQXFrRSxFQUFBLElBQ0EsVUFBQW9JLEdBQ0F4TyxFQUFBL3pFLEtBQUFtNkUsRUFBQSxHQUNBcEcsRUFBQWorRCxNQUFBcWtFLEVBQUEsSUFDQSxRQUFBb0ksR0FDQXhPLEVBQUFqK0QsTUFBQXFrRSxFQUFBLEdBQ0FwRyxFQUFBL3pFLEtBQUFtNkUsRUFBQSxJQUNBLFdBQUFvSSxJQUNBeE8sRUFBQWorRCxNQUFBcWtFLEVBQUEsR0FDQXBHLEVBQUEvekUsS0FBQW02RSxFQUFBLElBR0FwNkYsRUFBQWcwRixPQUFBQSxFQUNBaDBGLEVBVUEsUUFBQWtqRyxJQUFBbGpHLEVBQUEvQixHQUNBLEdBQUFxOUYsR0FBQXI5RixFQUFBcTlGLG1CQUFBeEMsRUFBQTk0RixFQUFBcTZDLFNBQUEyNUMsT0FLQWgwRixHQUFBcTZDLFNBQUFnaEQsWUFBQUMsSUFDQUEsRUFBQXhDLEVBQUF3QyxHQUdBLElBQUFDLEdBQUFILEVBQUFwN0YsRUFBQXE2QyxTQUFBMjVDLE9BQUFoMEYsRUFBQXE2QyxTQUFBZ2hELFVBQUFwOUYsRUFBQWc0QixRQUFBcWxFLEVBQ0FyOUYsR0FBQXM5RixXQUFBQSxDQUVBLElBQUFwbUUsR0FBQWwzQixFQUFBa2xHLFNBQ0FuUCxFQUFBaDBGLEVBQUFvNkYsUUFBQXBHLE9BRUFueEUsR0FDQXVnRixRQUFBLFNBQUFoTSxHQUNBLEdBQUF2NEYsR0FBQW0xRixFQUFBb0QsRUFJQSxPQUhBcEQsR0FBQW9ELEdBQUFtRSxFQUFBbkUsS0FBQW41RixFQUFBb2xHLHNCQUNBeGtHLEVBQUFxTCxLQUFBQyxJQUFBNnBGLEVBQUFvRCxHQUFBbUUsRUFBQW5FLEtBRUF6c0UsTUFBQXlzRSxFQUFBdjRGLElBRUF5a0csVUFBQSxTQUFBbE0sR0FDQSxHQUFBd0YsR0FBQSxVQUFBeEYsRUFBQSxPQUFBLE1BQ0F2NEYsRUFBQW0xRixFQUFBNEksRUFJQSxPQUhBNUksR0FBQW9ELEdBQUFtRSxFQUFBbkUsS0FBQW41RixFQUFBb2xHLHNCQUNBeGtHLEVBQUFxTCxLQUFBa3pDLElBQUE0MkMsRUFBQTRJLEdBQUFyQixFQUFBbkUsSUFBQSxVQUFBQSxFQUFBcEQsRUFBQW5yRixNQUFBbXJGLEVBQUEvbkYsVUFFQTBlLE1BQUFpeUUsRUFBQS85RixJQVdBLE9BUEFzMkIsR0FBQWtrQixRQUFBLFNBQUErOUMsR0FDQSxHQUFBb0MsSUFBQSxLQUFBLE9BQUEsT0FBQS83RixRQUFBMjVGLEdBQUEsVUFBQSxXQUNBcEQsR0FBQXFHLE1BQUFyRyxFQUFBbnhFLEVBQUEyMkUsR0FBQXBDLE1BR0FwM0YsRUFBQW82RixRQUFBcEcsT0FBQUEsRUFFQWgwRixFQVVBLFFBQUFnUyxJQUFBaFMsR0FDQSxHQUFBbzNGLEdBQUFwM0YsRUFBQW8zRixVQUNBb0wsRUFBQXBMLEVBQUF2a0YsTUFBQSxLQUFBLEdBQ0Ewd0YsRUFBQW5NLEVBQUF2a0YsTUFBQSxLQUFBLEVBR0EsSUFBQTB3RixFQUFBLENBQ0EsR0FBQS9DLEdBQUF4Z0csRUFBQW82RixRQUNBaUIsRUFBQW1GLEVBQUFuRixVQUNBckgsRUFBQXdNLEVBQUF4TSxPQUVBeU0sR0FBQSxLQUFBLFNBQUEsT0FBQWhqRyxRQUFBK2tHLEdBQ0FoSixFQUFBaUgsRUFBQSxPQUFBLE1BQ0EzRCxFQUFBMkQsRUFBQSxRQUFBLFNBRUErQyxHQUNBNWhHLE1BQUErb0IsTUFBQTZ1RSxFQUFBNkIsRUFBQTdCLElBQ0EzM0YsSUFBQThvQixNQUFBNnVFLEVBQUE2QixFQUFBN0IsR0FBQTZCLEVBQUF5QixHQUFBOUksRUFBQThJLElBR0E5OEYsR0FBQW82RixRQUFBcEcsT0FBQXFHLE1BQUFyRyxFQUFBd1AsRUFBQUQsSUFHQSxNQUFBdmpHLEdBVUEsUUFBQTByQixJQUFBMXJCLEdBQ0EsSUFBQWdnRyxHQUFBaGdHLEVBQUFxNkMsU0FBQThpRCxVQUFBLE9BQUEsbUJBQ0EsTUFBQW45RixFQUdBLElBQUE0N0YsR0FBQTU3RixFQUFBbzZGLFFBQUFpQixVQUNBb0ksRUFBQXpHLEVBQUFoOUYsRUFBQXE2QyxTQUFBOGlELFVBQUEsU0FBQXZELEdBQ0EsTUFBQSxvQkFBQUEsRUFBQTk4RixPQUNBeStGLFVBRUEsSUFBQUssRUFBQXBzRCxPQUFBaTBELEVBQUF4akYsS0FBQTI3RSxFQUFBN2xFLEtBQUEwdEUsRUFBQWwwRCxPQUFBcXNELEVBQUEzN0UsSUFBQXdqRixFQUFBajBELFFBQUFvc0QsRUFBQXJzRCxNQUFBazBELEVBQUExdEUsS0FBQSxDQUVBLElBQUEsSUFBQS8xQixFQUFBMHJCLEtBQ0EsTUFBQTFyQixFQUdBQSxHQUFBMHJCLE1BQUEsRUFDQTFyQixFQUFBNGQsV0FBQSx1QkFBQSxPQUNBLENBRUEsSUFBQSxJQUFBNWQsRUFBQTByQixLQUNBLE1BQUExckIsRUFHQUEsR0FBQTByQixNQUFBLEVBQ0ExckIsRUFBQTRkLFdBQUEsd0JBQUEsRUFHQSxNQUFBNWQsR0FVQSxRQUFBMGpHLElBQUExakcsR0FDQSxHQUFBbzNGLEdBQUFwM0YsRUFBQW8zRixVQUNBb0wsRUFBQXBMLEVBQUF2a0YsTUFBQSxLQUFBLEdBQ0EydEYsRUFBQXhnRyxFQUFBbzZGLFFBQ0FwRyxFQUFBd00sRUFBQXhNLE9BQ0FxSCxFQUFBbUYsRUFBQW5GLFVBRUFzQixHQUFBLEtBQUEsT0FBQSxTQUFBbC9GLFFBQUEra0csR0FFQW1CLEdBQUEsS0FBQSxNQUFBLFFBQUFsbUcsUUFBQStrRyxFQU9BLE9BTEF4TyxHQUFBMkksRUFBQSxPQUFBLE9BQUF0QixFQUFBbUgsSUFBQW1CLEVBQUEzUCxFQUFBMkksRUFBQSxRQUFBLFVBQUEsR0FFQTM4RixFQUFBbzNGLFVBQUFrRixFQUFBbEYsR0FDQXAzRixFQUFBbzZGLFFBQUFwRyxPQUFBbUcsRUFBQW5HLEdBRUFoMEYsRUFpa0JBLFFBQUE0akcsSUFBQW56RCxHQUNBLFFBQUFBLEVBQUFvekQsR0FBQXB6RCxVQUFBLEtBb0RBLFFBQUFxekQsSUFBQTlqRyxHQUNBLEdBQUFtWSxHQUFBblksRUFBQW1ZLEdBQ0E2N0UsRUFBQWgwRixFQUFBZzBGLE9BQ0ErUCxFQUFBL2pHLEVBQUFnK0IsU0FDQXhKLEVBQUF1dkUsRUFBQXZ2RSxTQUNBd3ZFLEVBQUFELEVBQUFDLGNBQ0E5Z0UsRUFBQTZnRSxFQUFBN2dFLE9BQ0F1TixFQUFBc3pELEVBQUF0ekQsU0FDQXd6RCxFQUFBRixFQUFBRSxhQUVBbk0sRUFBQW5CLEVBQUEzQyxHQUNBd0MsRUFBQXNCLEVBQUF0QixRQUVBaFgsRUFBQTBrQixJQUNBOU0sVUFBQTVpRSxHQUNBd3ZFLE9BQ0E3RyxVQUFBK0csTUFBQUYsRUFBQUEsRUFBQTdHLGNBQ0FLLEtBQUEwRyxJQUNBanVFLFFBQUF3YSxFQUFBLEdBQ0F1ekQsR0FBQUEsRUFBQTdHLFVBQUE2RyxFQUFBN0csVUFBQUssU0FDQXQ2RCxPQUFBZ2hFLElBQ0FoaEUsT0FBQUEsR0FDQThnRSxHQUFBQSxFQUFBN0csVUFBQTZHLEVBQUE3RyxVQUFBajZELGFBRUF5NkQsU0FBQSxXQUNBLEdBQUFwekYsR0FBQWlzRixFQUFBNzBGLEtBQ0E0SSxHQUFBMFYsSUFBQSxHQUNBMVYsRUFBQWlsQyxPQUFBLEdBQ0FqbEMsRUFBQXdyQixLQUFBLEdBQ0F4ckIsRUFBQWdsQyxNQUFBLEdBQ0FobEMsRUFBQTRzRixFQUFBbkQsRUFBQXh6RixhQUFBLGlCQUFBb2pHLEdBQUFuekQsS0FNQSxJQUFBaDFDLE9BQUEwb0csaUJBQUEsQ0FDQSxHQUFBNTVGLEdBQUF5cEYsRUFBQXJ5RixNQUVBeWlHLEVBQUEsR0FBQUQsa0JBQUEsV0FDQTU1RixFQUFBMEYsRUFBQSx1QkFBQSxNQUNBalEsRUFBQXFrRyxlQUFBbHFELFNBQ0E5dUIsRUFBQSxXQUNBOWdCLEVBQUEwRixFQUFBLHVCQUFBZzBGLEVBQUEsUUFJQUcsR0FBQUUsUUFBQXRRLEdBQ0F1USxXQUFBLEVBQ0FDLFNBQUEsRUFDQUMsZUFBQSxJQUdBemtHLEVBQUEwa0csbUJBQUEvL0YsS0FBQXkvRixHQUdBLE1BQUEsSUFBQU8sSUFBQXhzRixFQUFBNjdFLEVBQUF4VSxHQVFBLFFBQUFvbEIsSUFBQTVrRyxHQUNBLEdBQUFtWSxHQUFBblksRUFBQW1ZLEdBQ0E2N0UsRUFBQWgwRixFQUFBZzBGLE9BQ0ErUCxFQUFBL2pHLEVBQUFnK0IsU0FDQWpMLEVBQUFneEUsRUFBQWh4RSxTQUNBOHhFLEVBQUFkLEVBQUFjLFlBSUE5eEUsR0FBQW52QixTQUFBb3dGLEtBRUFqaEUsRUFBQTUyQixZQUFBNjNGLEdBRUFoMEYsRUFBQXFrRyxnQkFHQXJrRyxFQUFBcWtHLGVBQUFscUQsU0FDQTBxRCxJQUFBalEsR0FBQWpsRCxPQUNBM3ZDLEVBQUFxa0csZUFBQXhGLHdCQUpBNytGLEVBQUFxa0csZUFBQVAsR0FBQTlqRyxHQVNBNmtHLElBQUFqUSxHQUFBamxELFFBQ0F4M0IsRUFBQStILGlCQUFBLFlBQUFtM0UsR0FDQXIzRixFQUFBcWtHLGVBQUFuRywwQkFRQSxRQUFBNEcsSUFBQS9RLEdBQ0EsR0FBQUMsR0FBQUQsRUFBQUMsT0FDQXFRLEVBQUF0USxFQUFBc1EsZUFDQVUsRUFBQWhSLEVBQUEvMUQsU0FBQSttRSxlQUdBaE8sRUFBQSxXQUNBLE1BQUEvQyxHQUFBcnlGLE1BQUFzTyxFQUFBLHVCQUFBODBGLEVBQUEsTUFHQUMsRUFBQSxXQUNBLE1BQUFoUixHQUFBcnlGLE1BQUFzTyxFQUFBLHVCQUFBLEdBWUFvYixHQVRBLFFBQUE0NUUsS0FDQVosR0FBQUEsRUFBQXZGLGlCQUVBL0gsSUFFQWoyQyxFQUFBa3pDLEdBQUF2NEYsT0FBQTRQLHNCQUFBNDVGLEdBQUFELE1BYUEsUUFBQUUsSUFBQS9zRixFQUFBZ3RGLEdBQ0EsR0FBQW5uRSxHQUFBb25FLEdBQUFwQyxPQUFBLFNBQUFxQyxFQUFBaGxHLEdBQ0EsR0FBQW1LLEdBQUEyTixFQUFBM1gsYUFBQSxRQUFBSCxFQUFBdEQsZ0JBQUFvb0csRUFBQTlrRyxFQWtCQSxPQWZBLFVBQUFtSyxJQUFBQSxHQUFBLEdBQ0EsU0FBQUEsSUFBQUEsR0FBQSxHQUdBb3JCLFNBQUFwckIsS0FBQTJLLE1BQUF0SyxXQUFBTCxNQUNBQSxFQUFBSyxXQUFBTCxJQUlBLGdCQUFBQSxJQUFBLE1BQUFBLEVBQUFnTCxPQUFBcWtDLE9BQUEsS0FDQXJ2QyxFQUFBdEssS0FBQUMsTUFBQXFLLElBR0E2NkYsRUFBQWhsRyxHQUFBbUssRUFFQTY2RixNQUdBLE9BQUFuQixPQUFBaUIsRUFBQW5uRSxHQVVBLFFBQUFzbkUsSUFBQXh1RixFQUFBaTNCLEVBQUEvUCxHQUNBLEdBQUF4SixHQUFBd0osRUFBQXhKLFNBQ0FpYyxFQUFBelMsRUFBQXlTLFNBQ0FzdkQsRUFBQS9oRSxFQUFBK2hFLE1BQ0F3RixFQUFBdm5FLEVBQUF1bkUsWUFDQUMsRUFBQXhuRSxFQUFBd25FLFFBQ0FwNUYsRUFBQTR4QixFQUFBNXhCLFVBQ0FxNUYsRUFBQXpuRSxFQUFBeW5FLFVBQ0FDLEVBQUExbkUsRUFBQTBuRSxLQUNBQyxFQUFBM25FLEVBQUEybkUsTUFDQXg5RixFQUFBNjFCLEVBQUE3MUIsS0FDQW10QixFQUFBMEksRUFBQTFJLE9BQ0FnZ0UsRUFBQXQzRCxFQUFBczNELFlBR0F0QixFQUFBMTRGLFNBQUFVLGNBQUEsTUFDQWc0RixHQUFBMzhFLGFBQUEsUUFBQSxnQkFDQTI4RSxFQUFBMzhFLGFBQUEsT0FBQSxXQUNBMjhFLEVBQUEzOEUsYUFBQSxjQUFBLFFBQ0EyOEUsRUFBQTM4RSxhQUFBLEtBQUEsaUJBQUFQLEdBQ0FrOUUsRUFBQXJ5RixNQUFBMnpCLE9BQUFBLENBRUEsSUFBQWtoRSxHQUFBbDdGLFNBQUFVLGNBQUEsTUFRQSxJQVBBdzZGLEVBQUFuL0UsYUFBQSxRQUFBLGdDQUFBcXVGLEVBQUEsVUFDQWxQLEVBQUFuL0UsYUFBQSxpQkFBQWpMLEdBRUF1NUYsRUFBQTl5RixNQUFBLEtBQUF3bUMsUUFBQSxTQUFBdnNCLEdBQ0EwcEUsRUFBQXZZLFVBQUFuNEUsSUFBQWduQixFQUFBLFlBR0FpekUsRUFBQSxDQUVBLEdBQUE2RixHQUFBdHFHLFNBQUFVLGNBQUEsTUFDQTRwRyxHQUFBdnVGLGFBQUEsUUFBQSxTQUFBb3VGLEdBQ0FHLEVBQUF2dUYsYUFBQSxVQUFBLElBQ0FtL0UsRUFBQXI2RixZQUFBeXBHLEdBR0EsR0FBQUwsRUFBQSxDQUVBL08sRUFBQW4vRSxhQUFBLG1CQUFBLEdBQ0EsSUFBQW8vRSxHQUFBbjdGLFNBQUFVLGNBQUEsTUFDQXk2RixHQUFBcC9FLGFBQUEsUUFBQSxTQUNBby9FLEVBQUFwL0UsYUFBQSxXQUFBLElBQ0FtL0UsRUFBQXI2RixZQUFBczZGLEdBR0ErTyxHQUVBaFAsRUFBQW4vRSxhQUFBLGVBQUEsSUFHQWkrRSxHQUNBa0IsRUFBQW4vRSxhQUFBLG1CQUFBLEdBSUEsSUFBQXJSLEdBQUExSyxTQUFBVSxjQUFBLE1BR0EsSUFGQWdLLEVBQUFxUixhQUFBLFFBQUEseUJBRUFsUCxFQUFBLENBQ0EsR0FBQTA5RixPQUFBLEVBRUExOUYsYUFBQW9zRixVQUNBdnVGLEVBQUE3SixZQUFBZ00sR0FDQTA5RixFQUFBLElBQUExOUYsRUFBQTJPLElBQUEsd0JBRUE5USxFQUFBM0IsVUFBQS9JLFNBQUF1YixlQUFBMU8sRUFBQTdILFFBQUEsSUFBQSxLQUFBK0QsVUFDQXdoRyxFQUFBMTlGLEdBR0E2ckYsRUFBQS9WLFVBQUFuNEUsSUFBQSxpQkFDQXd2RixHQUFBdEIsRUFBQTM4RSxhQUFBLFdBQUEsTUFDQW0vRSxFQUFBbi9FLGFBQUEsbUJBQUF3dUYsT0FFQTcvRixHQUFBM0IsVUFBQTBwQyxDQVNBLE9BTEF5b0QsR0FBQTcwRixNQUFBdzFGLEVBQUEzaUUsSUFBQW92RSxHQUFBbnpELEdBRUErbEQsRUFBQXI2RixZQUFBNkosR0FDQWd1RixFQUFBNzNGLFlBQUFxNkYsR0FFQXhDLEVBV0EsUUFBQThSLElBQUFwZ0csRUFBQXlTLEVBQUE2VSxFQUFBKzRFLEdBQ0EsR0FBQS9OLEtBRUEsT0FBQSxXQUFBdHlGLEVBQUFzeUYsR0FHQTcvRSxFQUFBK0gsaUJBQUF4YSxFQUFBc25CLEVBQUFnNUUsZUFDQWhPLEVBQUFyekYsTUFDQWUsTUFBQUEsRUFDQTJTLFFBQUEyVSxFQUFBZzVFLGdCQUlBLGVBQUF0Z0csSUFDQWt2RixHQUFBaUIsZ0JBQUFrUSxJQUNBNXRGLEVBQUErSCxpQkFBQSxhQUFBOE0sRUFBQWc1RSxlQUNBaE8sRUFBQXJ6RixNQUNBZSxNQUFBLGFBQ0EyUyxRQUFBMlUsRUFBQWc1RSxnQkFFQTd0RixFQUFBK0gsaUJBQUEsV0FBQThNLEVBQUFpNUUsa0JBQ0FqTyxFQUFBcnpGLE1BQ0FlLE1BQUEsV0FDQTJTLFFBQUEyVSxFQUFBaTVFLG9CQUlBOXRGLEVBQUErSCxpQkFBQSxhQUFBOE0sRUFBQWk1RSxrQkFDQWpPLEVBQUFyekYsTUFDQWUsTUFBQSxhQUNBMlMsUUFBQTJVLEVBQUFpNUUsb0JBSUEsVUFBQXZnRyxJQUNBeVMsRUFBQStILGlCQUFBLE9BQUE4TSxFQUFBazVFLFlBQ0FsTyxFQUFBcnpGLE1BQ0FlLE1BQUEsT0FDQTJTLFFBQUEyVSxFQUFBazVFLGNBSUFsTyxHQVVBLFFBQUFtTyxJQUFBemdHLEVBQUFzdUYsRUFBQWgyRCxHQUNBLElBQUFnMkQsRUFBQXh6RixhQUFBLGVBQUEsT0FBQSxDQUVBLElBQUFvdkMsR0FBQWxxQyxFQUFBc3JCLFFBQ0E2ZSxFQUFBbnFDLEVBQUF1ckIsUUFDQW0xRSxFQUFBcG9FLEVBQUFvb0Usa0JBQ0EzMUQsRUFBQXpTLEVBQUF5UyxTQUdBNU0sRUFBQW13RCxFQUFBbCtELHdCQUNBdXdFLEVBQUFsUCxFQUFBbkQsRUFBQXh6RixhQUFBLGdCQUNBOGxHLEVBQUFGLEVBQUEzMUQsRUFFQTgxRCxHQUNBdG1GLElBQUE0akIsRUFBQTVqQixJQUFBNHZCLEVBQUF1MkQsRUFDQTUyRCxPQUFBSyxFQUFBaE0sRUFBQTJMLE9BQUE0MkQsRUFDQXJ3RSxLQUFBOE4sRUFBQTlOLEtBQUE2WixFQUFBdzJELEVBQ0E3MkQsTUFBQUssRUFBQS9MLEVBQUEwTCxNQUFBNjJELEVBR0EsUUFBQUMsR0FDQSxJQUFBLE1BQ0FFLEVBQUF0bUYsSUFBQTRqQixFQUFBNWpCLElBQUE0dkIsRUFBQXkyRCxDQUNBLE1BQ0EsS0FBQSxTQUNBQyxFQUFBLzJELE9BQUFLLEVBQUFoTSxFQUFBMkwsT0FBQTgyRCxDQUNBLE1BQ0EsS0FBQSxPQUNBQyxFQUFBeHdFLEtBQUE4TixFQUFBOU4sS0FBQTZaLEVBQUEwMkQsQ0FDQSxNQUNBLEtBQUEsUUFDQUMsRUFBQWgzRCxNQUFBSyxFQUFBL0wsRUFBQTBMLE1BQUErMkQsRUFJQSxNQUFBQyxHQUFBdG1GLEtBQUFzbUYsRUFBQS8yRCxRQUFBKzJELEVBQUF4d0UsTUFBQXd3RSxFQUFBaDNELE1BVUEsUUFBQWkzRCxJQUFBcnVGLEVBQUE2N0UsRUFBQWgyRCxHQUNBLEdBQUFzNUQsR0FBQTU3RixLQUdBKzhCLEdBREF1RixFQUFBeEosU0FDQXdKLEVBQUF2RixPQUVBNjhELEdBREF0M0QsRUFBQWx2QixTQUNBa3ZCLEVBQUFzM0QsYUFHQW5CLEdBRkFuMkQsRUFBQW9vRSxrQkFDQXBvRSxFQUFBeVMsU0FDQXpTLEVBQUFtMkQsYUFDQTlrRSxFQUFBMk8sRUFBQTNPLFFBQ0EwMkUsRUFBQS9uRSxFQUFBK25FLFVBSUFVLEdBSEF6b0UsRUFBQTBvRSxjQUdBLElBQ0FDLE1BQUEsR0FFQUMsRUFBQSxXQUNBaHVFLGFBQUE2dEUsR0FDQTd0RSxhQUFBK3RFLElBR0FFLEVBQUEsV0FJQSxHQUhBRCxLQUdBOWxELEVBQUFrekMsR0FBQSxDQUVBLEdBQUE4UyxHQUFBNzRGLE1BQUFDLFFBQUF1cUIsR0FBQUEsRUFBQSxHQUFBQSxDQUVBQSxHQUNBZ3VFLEVBQUFuN0YsV0FBQSxXQUNBLE1BQUFnc0YsR0FBQWoxRixLQUFBMnhGLElBQ0E4UyxHQUVBeFAsRUFBQWoxRixLQUFBMnhGLEtBSUEzeEYsRUFBQSxTQUFBcUQsR0FDQSxNQUFBNHhGLEdBQUF5UCxVQUFBNzhFLEtBQUFvdEUsRUFBQXlQLFVBQUE3OEUsS0FBQTNzQixLQUFBeTJGLEVBQUE2UyxFQUFBbmhHLEdBQUFtaEcsS0FHQW43RSxFQUFBLFdBQ0FrN0UsR0FFQSxJQUFBRSxHQUFBNzRGLE1BQUFDLFFBQUF1cUIsR0FBQUEsRUFBQSxHQUFBQSxDQUVBQSxHQUNBa3VFLEVBQUFyN0YsV0FBQSxXQUNBLE1BQUFnc0YsR0FBQTVyRSxLQUFBc29FLElBQ0E4UyxHQUVBeFAsRUFBQTVyRSxLQUFBc29FLEdBMkVBLFFBQ0FnUyxjQXhFQSxTQUFBdGdHLEdBQ0EsR0FBQXNoRyxHQUFBLGVBQUF0aEcsRUFBQWpKLE1BQUFtNEYsR0FBQWlCLGdCQUFBakIsR0FBQWpsRCxLQUVBLEtBQUFxM0QsSUFBQWpCLEVBQUEsQ0FHQSxHQUFBa0IsR0FBQSxVQUFBdmhHLEVBQUFqSixLQUNBeXFHLEVBQUEsZUFBQS9TLENBRUE4UyxJQUFBbm1ELEVBQUFrekMsSUFBQWtULEVBQUF4N0UsSUFBQXJwQixFQUFBcUQsR0FFQXNoRyxHQUFBcFMsR0FBQUMsT0FBQTE4RSxFQUFBb1gsT0FDQXBYLEVBQUFvWCxVQTZEQTAyRSxpQkF6REEsU0FBQXZnRyxHQUdBLEtBQUEsZUFBQUEsRUFBQWpKLE1BQUFtNEYsR0FBQWlCLGdCQUFBakIsR0FBQWpsRCxPQUFBbzJELEdBQUEsQ0FJQSxHQUFBelEsRUFBQSxDQUdBLEdBQUE2UixHQUFBLFFBQUFBLEdBQUF6aEcsR0FFQSxHQUFBMGhHLEdBQUEsV0FDQTlyRyxTQUFBNkcsS0FBQXpDLG9CQUFBLGFBQUFnc0IsR0FDQXB3QixTQUFBb0Usb0JBQUEsWUFBQXluRyxHQUNBejdFLEtBR0EyN0UsRUFBQTVnRixFQUFBL2dCLEVBQUEyTCxPQUFBNmpGLEdBQUFDLGVBRUFtUyxFQUFBN2dGLEVBQUEvZ0IsRUFBQTJMLE9BQUE2akYsR0FBQUUsVUFBQXBCLEVBQ0F1VCxFQUFBRixJQUFBbHZGLEVBQ0FxdkYsR0FBQSxJQUFBbjRFLEVBQUE1eEIsUUFBQSxRQUdBLElBRkE0cEcsR0FBQUEsSUFBQWx2RixFQUdBLE1BQUFpdkYsSUFHQUUsSUFBQUMsR0FBQUMsR0FFQXJCLEdBQUF6Z0csRUFBQXN1RixFQUFBaDJELElBQ0FvcEUsSUFPQSxPQUhBOXJHLFVBQUE2RyxLQUFBK2QsaUJBQUEsYUFBQXdMLE9BQ0Fwd0IsVUFBQTRrQixpQkFBQSxZQUFBaW5GLEdBTUF6N0UsTUFlQXc2RSxXQVpBLFNBQUF4Z0csR0FHQUEsRUFBQWtxQixnQkFBQWdsRSxHQUFBamxELFFBQ0FscEIsRUFBQS9nQixFQUFBa3FCLGNBQUFzbEUsR0FBQUUsU0FFQTFwRSxPQWVBLFFBQUErN0UsSUFBQXpwRSxHQVlBLE1BVkFBLEdBQUEraEUsUUFDQS9oRSxFQUFBdW5FLGFBQUEsR0FLQXZuRSxFQUFBakwsVUFBQSxrQkFBQWlMLEdBQUFqTCxXQUNBaUwsRUFBQWpMLFNBQUFpTCxFQUFBakwsWUFHQWlMLEVBVUEsUUFBQTBwRSxJQUFBOW5GLEdBQ0EsR0FBQTAzRSxHQUFBNTdGLElBRUEsT0FBQWtrQixHQUFBb2pGLE9BQUEsU0FBQXFDLEVBQUFsdEYsR0FDQSxHQUFBckIsR0FBQTZ3RixHQUVBM3BFLEVBQUFrbUUsTUFBQXVELEdBQUFuUSxFQUFBdDVELFNBQUErMkQsWUFBQXVDLEVBQUF0NUQsU0FBQWtuRSxHQUFBL3NGLEVBQUFtL0UsRUFBQXQ1RCxXQUVBLG1CQUFBQSxHQUFBNzFCLE9BQUE2MUIsRUFBQTcxQixLQUFBNjFCLEVBQUE3MUIsS0FBQWdRLEdBRUEsSUFBQWhRLEdBQUE2MUIsRUFBQTcxQixLQUNBa25CLEVBQUEyTyxFQUFBM08sUUFDQTAyRSxFQUFBL25FLEVBQUErbkUsVUFDQTZCLEVBQUE1cEUsRUFBQTRwRSxhQUdBNzVELEVBQUE1MUIsRUFBQTNYLGFBQUEsUUFDQSxLQUFBdXRDLElBQUE1bEMsRUFBQSxNQUFBazlGLEVBRUFsdEYsR0FBQWQsYUFBQSxrQkFBQSxJQUNBYyxFQUFBZCxhQUFBLG1CQUFBLGlCQUFBUCxHQUNBdS9FLEVBQUFsK0UsRUFFQSxJQUFBNjdFLEdBQUFzUixHQUFBeHVGLEVBQUFpM0IsRUFBQS9QLEdBQ0FoUixFQUFBdzVFLEdBQUFqcEcsS0FBQSs1RixFQUFBbi9FLEVBQUE2N0UsRUFBQWgyRCxHQUVBZzZELElBRUEzb0UsR0FBQTdaLE9BQUEzQyxNQUFBLEtBQUF3bUMsUUFBQSxTQUFBM3pDLEdBQ0EsTUFBQXN5RixHQUFBQSxFQUFBdndGLE9BQUFxK0YsR0FBQXBnRyxFQUFBeVMsRUFBQTZVLEVBQUErNEUsS0FLQSxJQUFBM0IsT0FBQSxFQUVBLElBQUF3RCxHQUFBbnNHLE9BQUEwb0csaUJBQUEsQ0FDQSxHQUFBck0sR0FBQW5CLEVBQUEzQyxHQUNBaHVGLEVBQUE4eEYsRUFBQTl4RixPQUVBbytGLEdBQUEsR0FBQUQsa0JBQUEsV0FDQSxHQUFBcDJELEdBQUE1MUIsRUFBQTNYLGFBQUEsUUFDQXV0QyxLQUNBL25DLEVBQUEzQixVQUFBMHBDLEVBQ0Fzb0QsRUFBQWwrRSxNQUlBaXNGLEVBQUFFLFFBQUFuc0YsR0FBQXlGLFlBQUEsSUFlQSxNQVpBeW5GLEdBQUExZ0csTUFDQW1TLEdBQUFBLEVBQ0FxQixHQUFBQSxFQUNBNjdFLE9BQUFBLEVBQ0FoMkQsU0FBQUEsRUFDQWc2RCxVQUFBQSxFQUNBL0QsY0FBQXFELEVBQ0FvTixvQkFBQU4sS0FHQXVELEtBRUF0QyxPQW1ZQSxRQUFBd0MsSUFBQXZpRyxFQUFBMDRCLEdBb0NBLE1BbENBazVELEdBQUE1eEYsS0FDQUEsR0FDQXdpRyxRQUFBLEVBQ0FscUYsV0FBQXRZLEVBQUFzWSxlQUNBa1ksc0JBQUF4d0IsRUFBQXd3QixzQkFDQW9qQixZQUFBNXpDLEVBQUE0ekMsWUFDQTRMLGFBQUF4L0MsRUFBQXcvQyxhQUNBenRDLGFBQUEsU0FBQWhYLEVBQUFtSyxHQUNBbEYsRUFBQXNZLFdBQUF2ZCxHQUFBbUssR0FFQWhLLGFBQUEsU0FBQUgsR0FDQSxNQUFBaUYsR0FBQXNZLFdBQUF2ZCxJQUVBK0YsZ0JBQUEsU0FBQS9GLFNBQ0FpRixHQUFBc1ksV0FBQXZkLElBRUE2ZixpQkFBQSxhQUNBeGdCLG9CQUFBLGFBQ0F1K0UsV0FDQTFqRCxjQUNBejBCLElBQUEsU0FBQXpGLEdBQ0FpRixFQUFBMjRFLFVBQUExakQsV0FBQWw2QixJQUFBLEdBRUFtSSxPQUFBLFNBQUFuSSxHQUVBLE1BREFpRixHQUFBMjRFLFVBQUExakQsV0FBQWw2QixJQUFBLEdBQ0EsR0FFQXVELFNBQUEsU0FBQXZELEdBQ0EsUUFBQWlGLEVBQUEyNEUsVUFBQTFqRCxXQUFBbDZCLE9BTUEsR0FBQTBuRyxJQUFBemlHLEVBQUEwNEIsR0FsOEhBLEdBQUE0MkQsTUFFQSxvQkFBQW41RixVQUNBbTVGLEdBQUFvVCxVQUFBLHlCQUFBdnNHLFFBQ0FtNUYsR0FBQWlCLGVBQUEsZ0JBQUFwNkYsUUFDQW01RixHQUFBamxELE9BQUEsRUFDQWlsRCxHQUFBRSx1QkFBQSxFQUVBRixHQUFBQyxJQUFBLFdBQ0EsTUFBQSxtQkFBQWwzRixLQUFBazdDLFVBQUFDLGFBQUFyOUMsT0FBQXM5QyxVQVdBLElBQUErNkMsT0FLQW9CLElBQ0FFLE9BQUEsZ0JBQ0F3QixRQUFBLGlCQUNBRSxRQUFBLHlCQUNBRCxPQUFBLGFBQ0FvUixNQUFBLFlBQ0E5UyxjQUFBLG9CQUNBTyxXQUFBLDJCQUtBbU8sSUFDQTE3RixNQUFBLEVBQ0Fxc0IsU0FBQSxNQUNBcG9CLFVBQUEsUUFDQW01RixhQUFBLEVBQ0F4RixPQUFBLEVBQ0EwRixVQUFBLFVBQ0FodEUsTUFBQSxFQUNBcEosUUFBQSxtQkFDQXZnQixTQUFBLElBQ0F3bUYsYUFBQSxFQUNBOFEsa0JBQUEsRUFDQVQsTUFBQSxPQUNBRCxLQUFBLFVBQ0FqMUQsU0FBQSxHQUNBdk4sT0FBQSxFQUNBaXhELGFBQUEsRUFDQXNCLFVBQUEsRUFDQW9QLGNBQUEsRUFDQVcsU0FBQSxFQUNBdkIsYUFBQSxJQUNBaUUsUUFBQSxFQUNBbkQsZUFBQSxJQUNBaHlFLFNBQUEsV0FDQSxNQUFBejNCLFVBQUE2RyxNQUVBbXpCLE9BQUEsS0FDQXl3RSxXQUFBLEVBQ0FoUixhQUFBLEVBQ0E2UyxjQUFBLEVBQ0E1RCxrQkFNQW9CLEdBQUF4USxHQUFBb1QsV0FBQTcwRixPQUFBMkUsS0FBQStyRixJQTZCQTU1RixLQUVBLElBQUEsbUJBQUFzcUYsU0FBQSxDQUNBLEdBQUE5ekYsSUFBQTh6RixRQUFBdnBGLFNBQ0FmLElBQUF4SixHQUFBd0osU0FBQXhKLEdBQUFrZ0IsaUJBQUFsZ0IsR0FBQW1nQix1QkFBQW5nQixHQUFBb2dCLG9CQUFBcGdCLEdBQUFzZ0IsbUJBQUEsU0FBQXJQLEdBR0EsSUFGQSxHQUFBekgsSUFBQXZPLEtBQUFKLFVBQUFJLEtBQUFzRyxlQUFBZ0IsaUJBQUEwTyxHQUNBcFUsRUFBQTJNLEVBQUF6TixTQUNBYyxHQUFBLEdBQUEyTSxFQUFBcXZDLEtBQUFoOEMsS0FBQTVCLE9BQ0EsTUFBQTRCLElBQUEsR0E0Y0EsSUFBQSxHQXhjQWszRixJQUFBdnFGLEdBcWNBaytGLEdBQUEsbUJBQUExc0csU0FBQSxtQkFBQUgsVUFDQThzRyxJQUFBLE9BQUEsVUFBQSxXQUNBN1AsR0FBQSxFQUNBajdGLEdBQUEsRUFBQUEsR0FBQThxRyxHQUFBNXJHLE9BQUFjLElBQUEsRUFDQSxHQUFBNnFHLElBQUF0dkQsVUFBQUMsVUFBQXI3QyxRQUFBMnFHLEdBQUE5cUcsTUFBQSxFQUFBLENBQ0FpN0YsR0FBQSxDQUNBLE9BK0JBLEdBQUE4UCxJQUFBRixJQUFBMXNHLE9BQUEyOEYsUUFXQXhhLEdBQUF5cUIsR0FBQWxRLEVBQUFFLEVBb1BBcUMsT0FBQW43RixHQUVBMDZGLEdBQUEsV0FJQSxXQUhBMTZGLEtBQUFtN0YsS0FDQUEsSUFBQSxJQUFBN2hELFVBQUF5dkQsV0FBQTdxRyxRQUFBLFlBRUFpOUYsSUFrQkE2TixHQUFBLFNBQUFsdUQsRUFBQW11RCxHQUNBLEtBQUFudUQsWUFBQW11RCxJQUNBLEtBQUEsSUFBQTEvRSxXQUFBLHNDQUlBMi9FLEdBQUEsV0FDQSxRQUFBQyxHQUFBcjNGLEVBQUE3RSxHQUNBLElBQUEsR0FBQWxQLEdBQUEsRUFBQUEsRUFBQWtQLEVBQUFoUSxPQUFBYyxJQUFBLENBQ0EsR0FBQXFyRyxHQUFBbjhGLEVBQUFsUCxFQUNBcXJHLEdBQUEzNUUsV0FBQTI1RSxFQUFBMzVFLGFBQUEsRUFDQTI1RSxFQUFBLzlFLGNBQUEsRUFDQSxTQUFBKzlFLEtBQUFBLEVBQUF6NUUsVUFBQSxHQUNBL2IsT0FBQXdYLGVBQUF0WixFQUFBczNGLEVBQUF0b0csSUFBQXNvRyxJQUlBLE1BQUEsVUFBQUgsRUFBQUksRUFBQUMsR0FHQSxNQUZBRCxJQUFBRixFQUFBRixFQUFBeDlGLFVBQUE0OUYsR0FDQUMsR0FBQUgsRUFBQUYsRUFBQUssR0FDQUwsTUFJQTc5RSxHQUFBLFNBQUFwdUIsRUFBQThELEVBQUF4QixHQVlBLE1BWEF3QixLQUFBOUQsR0FDQTRXLE9BQUF3WCxlQUFBcHVCLEVBQUE4RCxHQUNBeEIsTUFBQUEsRUFDQW13QixZQUFBLEVBQ0FwRSxjQUFBLEVBQ0FzRSxVQUFBLElBR0EzeUIsRUFBQThELEdBQUF4QixFQUdBdEMsR0FHQTg5RixHQUFBbG5GLE9BQUFpNUUsUUFBQSxTQUFBLzZFLEdBQ0EsSUFBQSxHQUFBL1QsR0FBQSxFQUFBQSxFQUFBc0ksVUFBQXBKLE9BQUFjLElBQUEsQ0FDQSxHQUFBaXVCLEdBQUEzbEIsVUFBQXRJLEVBRUEsS0FBQSxHQUFBK0MsS0FBQWtyQixHQUNBcFksT0FBQW5JLFVBQUF3SSxlQUFBalcsS0FBQWd1QixFQUFBbHJCLEtBQ0FnUixFQUFBaFIsR0FBQWtyQixFQUFBbHJCLElBS0EsTUFBQWdSLElBeStCQXkzRixJQUFBLGFBQUEsT0FBQSxXQUFBLFlBQUEsTUFBQSxVQUFBLGNBQUEsUUFBQSxZQUFBLGFBQUEsU0FBQSxlQUFBLFdBQUEsT0FBQSxjQUdBMUgsR0FBQTBILEdBQUF0cEcsTUFBQSxHQW9CQWdpRyxJQUNBQyxLQUFBLE9BQ0FDLFVBQUEsWUFDQUMsaUJBQUEsb0JBaWRBeEUsSUFTQW5yRixPQUVBbWpCLE1BQUEsSUFFQWhSLFNBQUEsRUFFQTVlLEdBQUF5TSxJQXlDQWt4QixRQUVBL04sTUFBQSxJQUVBaFIsU0FBQSxFQUVBNWUsR0FBQTI5QixHQUlBQSxPQUFBLEdBb0JBZ2dFLGlCQUVBL3RFLE1BQUEsSUFFQWhSLFNBQUEsRUFFQTVlLEdBQUEyOUYsR0FNQUMsVUFBQSxPQUFBLFFBQUEsTUFBQSxVQU9BbHRFLFFBQUEsRUFNQXFsRSxrQkFBQSxnQkFZQStHLGNBRUFsdEUsTUFBQSxJQUVBaFIsU0FBQSxFQUVBNWUsR0FBQTg4RixJQWFBdEMsT0FFQTVxRSxNQUFBLElBRUFoUixTQUFBLEVBRUE1ZSxHQUFBdzZGLEdBRUF6L0MsUUFBQSxhQWNBazlDLE1BRUFyb0UsTUFBQSxJQUVBaFIsU0FBQSxFQUVBNWUsR0FBQWk0RixHQU9BK0QsU0FBQSxPQUtBdHJFLFFBQUEsRUFPQXFsRSxrQkFBQSxZQVVBb0ksT0FFQXZ1RSxNQUFBLElBRUFoUixTQUFBLEVBRUE1ZSxHQUFBbStGLElBYUFoNEUsTUFFQXlKLE1BQUEsSUFFQWhSLFNBQUEsRUFFQTVlLEdBQUFtbUIsSUFrQkE0ekUsY0FFQW5xRSxNQUFBLElBRUFoUixTQUFBLEVBRUE1ZSxHQUFBKzVGLEdBTUFFLGlCQUFBLEVBTUE1dkQsRUFBQSxTQU1BQyxFQUFBLFNBa0JBcXZELFlBRUEvcEUsTUFBQSxJQUVBaFIsU0FBQSxFQUVBNWUsR0FBQTI1RixHQUVBNkosT0FBQTNKLEdBT0FJLG9CQUFBamdHLEtBdUNBeXBHLElBS0E1UixVQUFBLFNBTUF3SCxlQUFBLEVBT0FULGlCQUFBLEVBUUFQLFNBQUEsYUFVQUQsU0FBQSxhQU9BUixVQUFBQSxJQWVBd0gsR0FBQSxXQVNBLFFBQUFBLEdBQUF0SixFQUFBckgsR0FDQSxHQUFBc0QsR0FBQTU3RixLQUVBdUMsRUFBQTJILFVBQUFwSixPQUFBLE9BQUErQyxLQUFBcUcsVUFBQSxHQUFBQSxVQUFBLEtBQ0EyaUcsSUFBQTdzRyxLQUFBaXBHLEdBRUFqcEcsS0FBQW9qRyxlQUFBLFdBQ0EsTUFBQXp6Rix1QkFBQWlzRixFQUFBbjlDLFNBSUF6K0MsS0FBQXkrQyxPQUFBeWpDLEdBQUFsaUYsS0FBQXkrQyxPQUFBeFYsS0FBQWpwQyxPQUdBQSxLQUFBdUMsUUFBQW84RixNQUFBc0ssRUFBQWQsU0FBQTVsRyxHQUdBdkMsS0FBQXFYLE9BQ0FzcUYsYUFBQSxFQUNBSyxXQUFBLEVBQ0FZLGtCQUlBNWlHLEtBQUEyL0YsVUFBQUEsR0FBQUEsRUFBQXBuRixPQUFBb25GLEVBQUEsR0FBQUEsRUFDQTMvRixLQUFBczRGLE9BQUFBLEdBQUFBLEVBQUEvL0UsT0FBQSsvRSxFQUFBLEdBQUFBLEVBR0F0NEYsS0FBQXVDLFFBQUFrL0YsYUFDQWhxRixPQUFBMkUsS0FBQXVpRixNQUFBc0ssRUFBQWQsU0FBQTFHLFVBQUFsL0YsRUFBQWsvRixZQUFBOWpELFFBQUEsU0FBQXY4QyxHQUNBdzZGLEVBQUFyNUYsUUFBQWsvRixVQUFBcmdHLEdBQUF1OUYsTUFBQXNLLEVBQUFkLFNBQUExRyxVQUFBcmdHLE9BQUFtQixFQUFBay9GLFVBQUFsL0YsRUFBQWsvRixVQUFBcmdHLFNBSUFwQixLQUFBeWhHLFVBQUFocUYsT0FBQTJFLEtBQUFwYyxLQUFBdUMsUUFBQWsvRixXQUFBLzBGLElBQUEsU0FBQXRMLEdBQ0EsTUFBQXU5RixLQUNBdjlGLEtBQUFBLEdBQ0F3NkYsRUFBQXI1RixRQUFBay9GLFVBQUFyZ0csTUFHQTJYLEtBQUEsU0FBQStELEVBQUFDLEdBQ0EsTUFBQUQsR0FBQTJjLE1BQUExYyxFQUFBMGMsUUFPQXo1QixLQUFBeWhHLFVBQUE5akQsUUFBQSxTQUFBZ21ELEdBQ0FBLEVBQUFsN0UsU0FBQS9tQixFQUFBaWlHLEVBQUEwSixTQUNBMUosRUFBQTBKLE9BQUF6UixFQUFBK0QsVUFBQS9ELEVBQUF0RCxPQUFBc0QsRUFBQXI1RixRQUFBb2hHLEVBQUEvSCxFQUFBdmtGLFNBS0FyWCxLQUFBeStDLFFBRUEsSUFBQXlrRCxHQUFBbGpHLEtBQUF1QyxRQUFBMmdHLGFBQ0FBLElBRUFsakcsS0FBQW1qRyx1QkFHQW5qRyxLQUFBcVgsTUFBQTZyRixjQUFBQSxFQW9EQSxNQTdDQTZKLElBQUE5RCxJQUNBdGtHLElBQUEsU0FDQXhCLE1BQUEsV0FDQSxNQUFBczdDLEdBQUE1OEMsS0FBQTdCLFNBR0EyRSxJQUFBLFVBQ0F4QixNQUFBLFdBQ0EsTUFBQTBpRCxJQUFBaGtELEtBQUE3QixTQUdBMkUsSUFBQSx1QkFDQXhCLE1BQUEsV0FDQSxNQUFBZ2dHLElBQUF0aEcsS0FBQTdCLFNBR0EyRSxJQUFBLHdCQUNBeEIsTUFBQSxXQUNBLE1BQUFxL0YsSUFBQTNnRyxLQUFBN0IsVUEyQkFpcEcsSUF1QkFBLElBQUFzRSxPQUFBLG1CQUFBeHRHLFFBQUFBLE9BQUFQLFFBQUFndUcsWUFDQXZFLEdBQUFtRSxXQUFBQSxHQUNBbkUsR0FBQWQsU0FBQW1GLEVBWUEsSUFBQUcsSUFBQSxTQUFBOXVELEVBQUFtdUQsR0FDQSxLQUFBbnVELFlBQUFtdUQsSUFDQSxLQUFBLElBQUExL0UsV0FBQSxzQ0FJQXNnRixHQUFBLFdBQ0EsUUFBQVYsR0FBQXIzRixFQUFBN0UsR0FDQSxJQUFBLEdBQUFsUCxHQUFBLEVBQUFBLEVBQUFrUCxFQUFBaFEsT0FBQWMsSUFBQSxDQUNBLEdBQUFxckcsR0FBQW44RixFQUFBbFAsRUFDQXFyRyxHQUFBMzVFLFdBQUEyNUUsRUFBQTM1RSxhQUFBLEVBQ0EyNUUsRUFBQS85RSxjQUFBLEVBQ0EsU0FBQSs5RSxLQUFBQSxFQUFBejVFLFVBQUEsR0FDQS9iLE9BQUF3WCxlQUFBdFosRUFBQXMzRixFQUFBdG9HLElBQUFzb0csSUFJQSxNQUFBLFVBQUFILEVBQUFJLEVBQUFDLEdBR0EsTUFGQUQsSUFBQUYsRUFBQUYsRUFBQXg5RixVQUFBNDlGLEdBQ0FDLEdBQUFILEVBQUFGLEVBQUFLLEdBQ0FMLE1BVUF0RSxHQUFBL3dGLE9BQUFpNUUsUUFBQSxTQUFBLzZFLEdBQ0EsSUFBQSxHQUFBL1QsR0FBQSxFQUFBQSxFQUFBc0ksVUFBQXBKLE9BQUFjLElBQUEsQ0FDQSxHQUFBaXVCLEdBQUEzbEIsVUFBQXRJLEVBRUEsS0FBQSxHQUFBK0MsS0FBQWtyQixHQUNBcFksT0FBQW5JLFVBQUF3SSxlQUFBalcsS0FBQWd1QixFQUFBbHJCLEtBQ0FnUixFQUFBaFIsR0FBQWtyQixFQUFBbHJCLElBS0EsTUFBQWdSLElBc2dCQXMyRixHQUFBLEVBaUZBSSxHQUFBLFdBQ0EsUUFBQUEsR0FBQXppRyxHQUNBLEdBQUEwNEIsR0FBQXA0QixVQUFBcEosT0FBQSxPQUFBK0MsS0FBQXFHLFVBQUEsR0FBQUEsVUFBQSxLQUNBdWpHLElBQUF6dEcsS0FBQXFzRyxHQUdBblQsR0FBQW9ULFlBRUEvOEYsSUFFQXZQLEtBQUFxWCxPQUNBczJGLFdBQUEsR0FHQTN0RyxLQUFBNEosU0FBQUEsRUFFQTVKLEtBQUFzaUMsU0FBQWttRSxNQUFBTCxHQUFBN2xFLElBRUFBLEVBQUEzN0IsTUFBQTI3QixFQUFBc3JFLE9BQUF0ckUsRUFBQXRTLE1BQUFzUyxFQUFBNXlCLFNBQ0F3ZSxRQUFBQyxLQUFBLHVJQUdBbnVCLEtBQUFxckcsV0FDQTc4RSxLQUFBOFQsRUFBQTlULEtBQ0E3bkIsS0FBQTI3QixFQUFBdXJFLFFBQUF2ckUsRUFBQTM3QixNQUFBNFMsRUFDQXEwRixNQUFBdHJFLEVBQUF3ckUsU0FBQXhyRSxFQUFBc3JFLE9BQUFyMEYsRUFDQXlXLEtBQUFzUyxFQUFBeXJFLFFBQUF6ckUsRUFBQXRTLE1BQUF6VyxFQUNBN0osT0FBQTR5QixFQUFBMHJFLFVBQUExckUsRUFBQTV5QixRQUFBNkosR0FHQXZaLEtBQUFpdUcsTUFBQWpDLEdBQUFucUcsS0FBQTdCLEtBQUFrOEYsRUFBQXR5RixJQUNBd3VGLEdBQUFudkYsS0FBQXJGLE1BQUF3MEYsR0FBQXA0RixLQUFBaXVHLFFBc1ZBLE1BNVVBUCxJQUFBckIsSUFDQTFuRyxJQUFBLG1CQUNBeEIsTUFBQSxTQUFBc1osR0FDQSxJQUNBLE1BQUFzRSxHQUFBL2dCLEtBQUFpdUcsTUFBQSxTQUFBM3BHLEdBQ0EsTUFBQUEsR0FBQW1ZLEtBQUFBLElBQ0E2N0UsT0FDQSxNQUFBdnpGLEdBQ0FtcEIsUUFBQTVXLE1BQUEseUZBV0EzUyxJQUFBLHNCQUNBeEIsTUFBQSxTQUFBbTFGLEdBQ0EsSUFDQSxNQUFBdjNFLEdBQUEvZ0IsS0FBQWl1RyxNQUFBLFNBQUEzcEcsR0FDQSxNQUFBQSxHQUFBZzBGLFNBQUFBLElBQ0E3N0UsR0FDQSxNQUFBMVgsR0FDQW1wQixRQUFBNVcsTUFBQSwyRkFXQTNTLElBQUEsbUJBQ0F4QixNQUFBLFNBQUErd0MsR0FDQSxNQUFBbnpCLEdBQUEvZ0IsS0FBQWl1RyxNQUFBLFNBQUEzcEcsR0FDQSxNQUFBQSxHQUFBbVksS0FBQXkzQixHQUFBNXZDLEVBQUFnMEYsU0FBQXBrRCxPQVdBdnZDLElBQUEsT0FDQXhCLE1BQUEsU0FBQW0xRixFQUFBNFYsR0FDQSxHQUFBdFMsR0FBQTU3RixJQUVBLEtBQUFBLEtBQUFxWCxNQUFBczJGLFVBQUEsQ0FFQSxHQUFBcnBHLEdBQUF5YyxFQUFBL2dCLEtBQUFpdUcsTUFBQSxTQUFBM3BHLEdBQ0EsTUFBQUEsR0FBQWcwRixTQUFBQSxJQUdBOEQsRUFBQW5CLEVBQUEzQyxHQUNBd0MsRUFBQXNCLEVBQUF0QixRQUNBQyxFQUFBcUIsRUFBQXJCLE9BQ0F6d0YsRUFBQTh4RixFQUFBOXhGLE9BS0EsS0FBQXRLLEtBQUE0SixTQUFBd2lHLFNBQUF4c0csU0FBQTZHLEtBQUF5QixTQUFBNUQsRUFBQW1ZLElBRUEsV0FEQXpjLE1BQUE2bEQsUUFBQXl5QyxFQUlBdDRGLE1BQUFxckcsVUFBQTFrRyxLQUFBOUUsS0FBQXkyRixFQUVBLElBQUE3N0UsR0FBQW5ZLEVBQUFtWSxHQUNBNHJGLEVBQUEvakcsRUFBQWcrQixTQUVBa3FFLEdBREFuRSxFQUFBaHhFLFNBQ0FneEUsRUFBQW1FLFFBQ0E1UyxFQUFBeU8sRUFBQXpPLFlBQ0F1UCxFQUFBZCxFQUFBYyxhQUNBWixFQUFBRixFQUFBRSxhQUNBbjFGLEVBQUFpMUYsRUFBQWoxRixTQUdBbW9GLE1BQUExM0YsS0FBQXFxRyxFQUFBQSxFQUFBMzdGLE1BQUFDLFFBQUFZLEdBQUFBLEVBQUEsR0FBQUEsQ0FHQWlvRixJQUFBL0MsRUFBQXdDLEVBQUFDLEdBQUEsR0FFQW1PLEdBQUE1a0csR0FFQWcwRixFQUFBcnlGLE1BQUE4eUIsV0FBQSxVQUNBdS9ELEVBQUEzOEUsYUFBQSxjQUFBLFNBR0FnVSxFQUFBLFdBQ0F5MUIsRUFBQWt6QyxLQUdBNlEsSUFBQWpRLEdBQUFqbEQsUUFDQTN2QyxFQUFBcWtHLGVBQUFscUQsU0FDQTQ4QyxHQUFBL0MsR0FBQWlRLElBSUFsTixHQUFBUCxFQUFBQyxHQUFBUSxHQUdBUixJQUFBendGLEVBQUFyRSxNQUFBdUssUUFBQSxHQUdBb3BGLEdBQUFuOUUsRUFBQThsRSxVQUFBbjRFLElBQUEsVUFHQW9pRyxHQUFBcEQsR0FBQTlrRyxHQUdBdTJGLEVBQUFDLEVBQUFDLEdBRUFDLEdBQUFGLEVBQUFDLEdBQUEsU0FBQWo1RSxHQUNBQSxFQUFBNVosU0FBQSx1QkFBQTRaLEVBQUFoVixPQUFBLHNCQUNBZ1YsRUFBQWhWLE9BQUEsU0FDQWdWLEVBQUExWCxJQUFBLFdBSUEreEYsRUFBQTczRixFQUFBaTNGLEVBQUEsV0FDQW4yQyxFQUFBa3pDLEtBQUFoMEYsRUFBQTZwRyxnQkFHQXZVLEdBQUF0QixFQUFBandFLFFBRUF5eUUsRUFBQXZZLFVBQUFuNEUsSUFBQSxzQkFFQTlGLEVBQUE2cEcsZUFBQSxFQUVBdlMsRUFBQXlQLFVBQUF1QyxNQUFBL3JHLEtBQUF5MkYsYUFZQTN6RixJQUFBLE9BQ0F4QixNQUFBLFNBQUFtMUYsRUFBQTRWLEdBQ0EsR0FBQUUsR0FBQXB1RyxJQUVBLEtBQUFBLEtBQUFxWCxNQUFBczJGLFVBQUEsQ0FFQTN0RyxLQUFBcXJHLFVBQUFyN0UsS0FBQW51QixLQUFBeTJGLEVBRUEsSUFBQWgwRixHQUFBeWMsRUFBQS9nQixLQUFBaXVHLE1BQUEsU0FBQTNwRyxHQUNBLE1BQUFBLEdBQUFnMEYsU0FBQUEsSUFHQStWLEVBQUFwVCxFQUFBM0MsR0FDQXdDLEVBQUF1VCxFQUFBdlQsUUFDQUMsRUFBQXNULEVBQUF0VCxPQUNBendGLEVBQUErakcsRUFBQS9qRyxRQUVBbVMsRUFBQW5ZLEVBQUFtWSxHQUNBNnhGLEVBQUFocUcsRUFBQWcrQixTQUNBakwsRUFBQWkzRSxFQUFBajNFLFNBRUF1aUUsR0FEQTBVLEVBQUE5QixPQUNBOEIsRUFBQTFVLGFBRUFudEYsR0FEQTZoRyxFQUFBbkYsYUFDQW1GLEVBQUE3aEcsTUFDQWtuQixFQUFBMjZFLEVBQUEzNkUsUUFDQXZnQixFQUFBazdGLEVBQUFsN0YsU0FHQW1vRixNQUFBMTNGLEtBQUFxcUcsRUFBQUEsRUFBQTM3RixNQUFBQyxRQUFBWSxHQUFBQSxFQUFBLEdBQUFBLENBRUE5TyxHQUFBNnBHLGVBQUEsRUFDQXZVLEdBQUFuOUUsRUFBQThsRSxVQUFBejFFLE9BQUEsVUFFQXdyRixFQUFBcnlGLE1BQUE4eUIsV0FBQSxTQUNBdS9ELEVBQUEzOEUsYUFBQSxjQUFBLFFBRUEwL0UsR0FBQVAsRUFBQUMsRUFBQUEsRUFBQXp3RixFQUFBLE1BQUFpeEYsR0FFQVIsSUFBQXp3RixFQUFBckUsTUFBQXVLLFFBQUEsR0FFQXdxRixHQUFBRixFQUFBQyxHQUFBLFNBQUFqNUUsR0FDQUEsRUFBQTVaLFNBQUEsa0JBQUE0WixFQUFBaFYsT0FBQSxzQkFDQWdWLEVBQUFoVixPQUFBLFNBQ0FnVixFQUFBMVgsSUFBQSxXQU1BcUMsSUFBQSxJQUFBa25CLEVBQUE1eEIsUUFBQSxVQUFBNjRGLEVBQUFuK0UsSUFDQUEsRUFBQTRMLFFBSUE4ekUsRUFBQTczRixFQUFBaTNGLEVBQUEsWUFLQW4yQyxFQUFBa3pDLElBQUFqaEUsRUFBQW52QixTQUFBb3dGLElBQUEsTUFBQTFnRSxpQkFBQWtqRSxHQUFBdHFGLFVBRUFpTSxFQUFBelksb0JBQUEsWUFBQTIzRixHQUNBcjNGLEVBQUFxa0csZUFBQW5HLHdCQUNBbnJFLEVBQUExMkIsWUFBQTIzRixHQUVBOFYsRUFBQS9DLFVBQUEzN0YsT0FBQTdOLEtBQUF5MkYsVUFVQTN6RixJQUFBLFNBQ0F4QixNQUFBLFNBQUFtMUYsR0FDQSxJQUFBdDRGLEtBQUFxWCxNQUFBczJGLFVBQUEsQ0FFQSxHQUFBcnBHLEdBQUF5YyxFQUFBL2dCLEtBQUFpdUcsTUFBQSxTQUFBM3BHLEdBQ0EsTUFBQUEsR0FBQWcwRixTQUFBQSxJQUdBaVcsRUFBQXRULEVBQUEzQyxHQUNBaHVGLEVBQUFpa0csRUFBQWprRyxRQUVBbVMsRUFBQW5ZLEVBQUFtWSxHQUNBaFEsRUFBQW5JLEVBQUFnK0IsU0FBQTcxQixJQUdBLElBQUFBLFlBQUFvc0YsU0FFQSxXQURBM3FFLFNBQUFDLEtBQUEsa0VBSUE3akIsR0FBQTNCLFVBQUE4RCxFQUFBN00sU0FBQXViLGVBQUExTyxFQUFBN0gsUUFBQSxJQUFBLEtBQUErRCxVQUFBOFQsRUFBQTNYLGFBQUEsVUFBQTJYLEVBQUEzWCxhQUFBLHVCQUVBMkgsR0FBQWt1RixFQUFBbCtFLE9BVUE5WCxJQUFBLFVBQ0F4QixNQUFBLFNBQUFtMUYsRUFBQWtXLEdBQ0EsR0FBQUMsR0FBQXp1RyxJQUVBLEtBQUFBLEtBQUFxWCxNQUFBczJGLFVBQUEsQ0FFQSxHQUFBcnBHLEdBQUF5YyxFQUFBL2dCLEtBQUFpdUcsTUFBQSxTQUFBM3BHLEdBQ0EsTUFBQUEsR0FBQWcwRixTQUFBQSxJQUdBNzdFLEVBQUFuWSxFQUFBbVksR0FDQWtzRixFQUFBcmtHLEVBQUFxa0csZUFDQXJNLEVBQUFoNEYsRUFBQWc0RixVQUNBME0sRUFBQTFrRyxFQUFBMGtHLGtCQUlBNWpELEdBQUFrekMsSUFDQXQ0RixLQUFBZ3dCLEtBQUFzb0UsRUFBQSxHQUlBZ0UsRUFBQTMrQyxRQUFBLFNBQUErd0QsR0FDQSxNQUFBanlGLEdBQUF6WSxvQkFBQTBxRyxFQUFBMWtHLE1BQUEwa0csRUFBQS94RixXQUlBRixFQUFBZCxhQUFBLFFBQUFjLEVBQUEzWCxhQUFBLHdCQUVBMlgsRUFBQS9SLGdCQUFBLHVCQUNBK1IsRUFBQS9SLGdCQUFBLG1CQUNBK1IsRUFBQS9SLGdCQUFBLG9CQUVBaStGLEdBQUFBLEVBQUE5aUQsVUFFQW1qRCxFQUFBcnJELFFBQUEsU0FBQStxRCxHQUNBQSxHQUFBQSxFQUFBaUcsZUFJQXZXLEdBQUFwL0UsT0FBQTBoRixFQUFBdEMsR0FBQSxTQUFBOXpGLEdBQ0EsTUFBQUEsR0FBQWcwRixTQUFBQSxJQUNBLFFBR0F6MEYsS0FBQTJxRyxHQUFBQSxLQUNBeHVHLEtBQUFpdUcsTUFBQTdWLEdBQUFsMkYsT0FBQSxTQUFBb0MsR0FDQSxNQUFBQSxHQUFBaTBGLGdCQUFBa1csU0FVQTlwRyxJQUFBLGFBQ0F4QixNQUFBLFdBQ0EsR0FBQXlyRyxHQUFBNXVHLElBRUEsS0FBQUEsS0FBQXFYLE1BQUFzMkYsVUFBQSxDQUVBLEdBQUFrQixHQUFBN3VHLEtBQUFpdUcsTUFBQW50RyxNQUVBZCxNQUFBaXVHLE1BQUF0d0QsUUFBQSxTQUFBazhDLEVBQUFoekYsR0FDQSxHQUFBeXhGLEdBQUF1QixFQUFBdkIsTUFFQXNXLEdBQUEvb0QsUUFBQXl5QyxFQUFBenhGLElBQUFnb0csRUFBQSxLQUdBN3VHLEtBQUFpdUcsTUFBQSxLQUNBanVHLEtBQUFxWCxNQUFBczJGLFdBQUEsT0FHQXRCLElBbURBLE9BVEFGLElBQUFqVCxRQUFBQSxHQUNBaVQsR0FBQWhFLFNBQUFBLEdBQ0FnRSxHQUFBMkMsNkJBQUEsV0FDQSxNQUFBNVYsSUFBQUUsdUJBQUEsR0FFQStTLEdBQUE0Qyw0QkFBQSxXQUNBLE1BQUE3VixJQUFBRSx1QkFBQSxHQUdBK1MsS0NwOUhBLFdBQ0F2aUUsRUFBQSxxQkFBQWxnQyxHQUFBLFFBQUEsV0FDQSxHQUFBc2xHLEdBQUFwbEUsRUFBQTVwQyxNQUFBa3JCLFFBQUEsZ0NBR0EsT0FGQThqRixHQUFBanVGLEtBQUEsK0NBQUFpUCxPQUNBZy9FLEVBQUFqdUYsS0FBQSxrREFBQXBhLFFBQ0EsSUFHQWlqQyxFQUFBLG9CQUFBbGdDLEdBQUEsUUFBQSxXQUNBLEdBQUF1bEcsR0FBQXJsRSxFQUFBNXBDLE1BQUFzRSxLQUFBLGFBQ0EwcUcsRUFBQXBsRSxFQUFBNXBDLE1BQUFrckIsUUFBQSxpQ0FDQTR2RCxFQUFBazBCLEVBQUFqdUYsS0FBQSxrREFBQWpTLEtBRUEsT0FBQWdzRSxJQUtBbHhDLEVBQUFuSCxNQUNBbC9CLE9BQUEsT0FDQWsrQixJQUFBLGFBQ0Ezc0IsU0FBQSxPQUNBeFEsTUFDQXcyRSxLQUFBQSxFQUNBbTBCLFVBQUFBLEVBQ0FDLE9BQUF0bEUsRUFBQSxzQkFBQTk2QixPQUVBK3pCLFFBQUEsU0FBQWxzQixHQUNBcTRGLEVBQUFqdUYsS0FBQSxzQ0FBQXhnQixLQUFBb1csRUFBQXc0RixVQUNBSCxFQUFBanVGLEtBQUEsa0RBQUFpUCxPQUNBZy9FLEVBQUFqdUYsS0FBQSwrQ0FBQXBhLFdBSUEsSUFwQkFxb0csRUFBQWp1RixLQUFBLGtEQUFBc0gsU0FDQSxRSGZBLFdBR0F1aEIsRUFBQSxvQkFBQW5uQyxLQUFBLFdBQ0EsR0FBQUYsSUFDQXl1RixPQUFBLEtBQ0FwQyxXQUFBLFNBRUF3Z0IsRUFBQXhsRSxFQUFBNXBDLE1BQUFzRSxLQUFBLFlBRUEsS0FBQSxHQUFBMnJCLEtBQUFtL0UsR0FDQTdzRyxFQUFBMHRCLEdBQUFtL0UsRUFBQW4vRSxFQUdBMlosR0FBQTVwQyxNQUFBNGhGLFVBQUFyL0UsUUlkQSxXQUNBcW5DLEVBQUEscUJBQUFubkMsS0FBQSxXQUNBLEdBQUE0c0csR0FBQXpsRSxFQUFBNXBDLE1BQUE2dEMsVUFDQTVELGNBQUEsRUFDQXdCLE9BQUEsRUFDQU0sVUFBQSxHQUdBbkMsR0FBQSwwQkFBQS9WLE1BQUEsV0FFQSxNQURBdzdFLEdBQUE5OEQsaUJBQ0EsSUFHQTNJLEVBQUEsMEJBQUEvVixNQUFBLFdBRUEsTUFEQXc3RSxHQUFBNzhELGlCQUNBLElBR0E1SSxFQUFBN3BDLFFBQUF1dkcsT0FBQSxXQUNBRCxFQUFBbDVELG1CQUlBdk0sRUFBQSwyQkFBQW5uQyxLQUFBLFdBQ0EsR0FBQThzRyxHQUFBM2xFLEVBQUE1cEMsTUFBQTZ0QyxVQUNBNUQsY0FBQSxFQUNBd0IsT0FBQSxFQUNBTSxVQUFBLEdBR0FuQyxHQUFBN3BDLFFBQUF1dkcsT0FBQSxXQUNBQyxFQUFBcDVELHNCQy9CQSxXQUNBdk0sRUFBQSx3QkFBQW5uQyxLQUFBLFdBQ0EsR0FBQStzRyxHQUFBNWxFLEVBQUE1cEMsTUFBQTZ0QyxVQUNBNUQsY0FBQSxFQUNBd0IsT0FBQSxFQUNBTSxVQUFBLEdBR0FuQyxHQUFBNXBDLE1BQUErcUIsUUFBQSwyQkFBQWhLLEtBQUEsNkJBQUE4UyxNQUFBLFdBRUEsTUFEQTI3RSxHQUFBajlELGlCQUNBLElBR0EzSSxFQUFBNXBDLE1BQUErcUIsUUFBQSwyQkFBQWhLLEtBQUEsNkJBQUE4UyxNQUFBLFdBRUEsTUFEQTI3RSxHQUFBaDlELGlCQUNBLElBR0E1SSxFQUFBN3BDLFFBQUF1dkcsT0FBQSxXQUNBRSxFQUFBcjVELHNCQ25CQSxXQUNBdk0sRUFBQSw4QkFBQWxnQyxHQUFBLFNBQUEsV0FDQSxHQUFBNjlELEdBQUEzOUIsRUFBQTVwQyxNQUFBa3JCLFFBQUEsT0FFQW5yQixRQUFBMHZHLHVCQUNBdnlFLGFBQUFuOUIsT0FBQTB2Ryx1QkFHQTF2RyxPQUFBMHZHLHNCQUFBNy9GLFdBQUEsV0FDQTIzRCxFQUFBaitDLFVBQ0EsV0NWQSxXQUNBLFFBQUFvbUYsR0FBQTNxRyxFQUFBNHFHLEVBQUFDLEdBQ0FobUUsRUFBQTdrQyxFQUFBNFEsUUFBQW9WLFFBQUE0a0YsR0FBQTd1RyxTQUNBOHVHLElBQ0FobUUsRUFBQWhxQyxVQUFBcUssSUFBQSxRQUFBLE9BQUF5bEcsSUFJQTlsRSxFQUFBLGlCQUFBL1YsTUFBQSxXQWFBLFFBQUE3RCxLQUNBNFosRUFBQSxrQkFBQWltRSxHQUFBbnhFLFlBQUEsVUFiQSxHQUFBbXhFLEdBQUEsYUFDQUMsRUFBQSw4QkFxQkEsT0FOQWxtRSxHQUFBNXBDLE1BQUE4K0IsU0FBQSxVQUNBOU8sSUFkQSxXQUNBNFosRUFBQSxpQkFBQXZMLFNBQUEsVUFDQXVMLEVBQUFpbUUsR0FBQXh4RSxTQUFBLFVBRUF1TCxFQUFBaHFDLFVBQUE4SixHQUFBLFFBQUEsT0FBQSxTQUFBM0UsR0FDQTJxRyxFQUFBM3FHLEVBQUErcUcsRUFBQTkvRSxTQWNBLE9DL0JBLFNBQUE0WixHQUNBQSxFQUFBLy9CLEdBQUFrbUcsUUFBQSxXQThCQSxNQTdCQS92RyxNQUFBeUMsS0FBQSxXQUNBbW5DLEVBQUE1cEMsTUFBQTBKLEdBQUEsUUFBQSxTQUFBM0UsR0FDQSxHQUFBaXJHLEdBQUFwbUUsRUFBQTVwQyxNQUFBc0UsS0FBQSxXQUFBc2xDLEVBQUE1cEMsTUFBQWdtQixLQUFBLFFBQ0EyWSxFQUFBaUwsRUFBQTVwQyxNQUFBc0UsS0FBQSxpQkFBQSxTQUNBMnJHLEVBQUFybUUsRUFBQTVwQyxNQUFBc0UsS0FBQSxnQkFDQTRyRyxFQUFBdG1FLEVBQUE1cEMsTUFBQW9xQixHQUFBLDhCQW9CQSxPQWxCQThELFNBQUFzb0IsSUFBQXc1RCxFQUFBcnhFLEVBQUFzeEUsR0FFQXJtRSxFQUFBLHVCQUFBcW1FLEVBQUEsTUFBQXh1RyxJQUFBekIsTUFBQXlDLEtBQUEsV0FDQSxHQUFBa1QsR0FBQWkwQixFQUFBNXBDLE1BQUFzRSxLQUFBLFdBQUFzbEMsRUFBQTVwQyxNQUFBZ21CLEtBQUEsUUFDQW1xRixFQUFBdm1FLEVBQUE1cEMsTUFBQXNFLEtBQUEsaUJBQUEsUUFFQXNsQyxHQUFBajBCLEdBQUErb0IsWUFBQXl4RSxHQUNBdm1FLEVBQUE1cEMsTUFBQTArQixZQUFBeXhFLEtBR0F2bUUsRUFBQTVwQyxNQUFBOCtCLFNBQUFILElBQUF1eEUsR0FDQXRtRSxFQUFBNXBDLE1BQUEwK0IsWUFBQUMsR0FDQWlMLEVBQUFvbUUsR0FBQXR4RSxZQUFBQyxLQUVBaUwsRUFBQTVwQyxNQUFBcStCLFNBQUFNLEdBQ0FpTCxFQUFBb21FLEdBQUEzeEUsU0FBQU0sS0FHQSxNQUlBMytCLE9BRUFnQixRQ2pDQTRvQyxFQUFBaHFDLFVBQUFxRSxNQUFBLFdBQ0EybEMsRUFBQSxpQkFBQW1tRSxVQUNBbm1FLEVBQUEsVUFBQWkzQixZQUNBbzNCLE1BQUEsa0JBQ0FnUyxNQUFBIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjIuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTctMDMtMjBUMTg6NTlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjIuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2csXG5cblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHRcdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0XHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRcdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG5cdH0sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdHR5cGVvZiBvYmo7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2ltcGxlIHNlbGVjdG9yIHRoYXQgY2FuIGJlIGZpbHRlcmVkIGRpcmVjdGx5LCByZW1vdmluZyBub24tRWxlbWVudHNcblx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xuXHR9XG5cblx0Ly8gQ29tcGxleCBzZWxlY3RvciwgY29tcGFyZSB0aGUgdHdvIHNldHMsIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3QgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGpRdWVyeS5jYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLFxuXHRcdHNjYWxlID0gMSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHRkbyB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcblx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHQvLyBCcmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoLlxuXHRcdH0gd2hpbGUgKFxuXHRcdFx0c2NhbGUgIT09ICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcblx0XHQpO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogalF1ZXJ5LmlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIG5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIFwiPnRib2R5XCIsIGVsZW0gKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHByb3BlcnR5IG1hcHBlZCBhbG9uZyB3aGF0IGpRdWVyeS5jc3NQcm9wcyBzdWdnZXN0cyBvciB0b1xuLy8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgcmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF07XG5cdGlmICggIXJldCApIHtcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpLFxuXHRcdHZhbCA9IDA7XG5cblx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdGlmICggZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRpID0gNDtcblxuXHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdH0gZWxzZSB7XG5cdFx0aSA9IG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvSGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRpZiAoIHZhbCA9PT0gXCJhdXRvXCIgKSB7XG5cdFx0dmFsID0gZWxlbVsgXCJvZmZzZXRcIiArIG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApIF07XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvYywgZG9jRWxlbSwgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHR3aW4gPSBkb2MuZGVmYXVsdFZpZXc7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0fTtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHQvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhbm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0ID0ge1xuXHRcdFx0XHR0b3A6IHBhcmVudE9mZnNldC50b3AgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICksXG5cdFx0XHRcdGxlZnQ6IHBhcmVudE9mZnNldC5sZWZ0ICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiLyoqXG4gKiBieFNsaWRlciB2NC4yLjEyXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1IFN0ZXZlbiBXYW5kZXJza2lcbiAqIFdyaXR0ZW4gd2hpbGUgZHJpbmtpbmcgQmVsZ2lhbiBhbGVzIGFuZCBsaXN0ZW5pbmcgdG8gamF6elxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUKVxuICovXG5cbjsoZnVuY3Rpb24oJCkge1xuXG4gIHZhciBkZWZhdWx0cyA9IHtcblxuICAgIC8vIEdFTkVSQUxcbiAgICBtb2RlOiAnaG9yaXpvbnRhbCcsXG4gICAgc2xpZGVTZWxlY3RvcjogJycsXG4gICAgaW5maW5pdGVMb29wOiB0cnVlLFxuICAgIGhpZGVDb250cm9sT25FbmQ6IGZhbHNlLFxuICAgIHNwZWVkOiA1MDAsXG4gICAgZWFzaW5nOiBudWxsLFxuICAgIHNsaWRlTWFyZ2luOiAwLFxuICAgIHN0YXJ0U2xpZGU6IDAsXG4gICAgcmFuZG9tU3RhcnQ6IGZhbHNlLFxuICAgIGNhcHRpb25zOiBmYWxzZSxcbiAgICB0aWNrZXI6IGZhbHNlLFxuICAgIHRpY2tlckhvdmVyOiBmYWxzZSxcbiAgICBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gICAgYWRhcHRpdmVIZWlnaHRTcGVlZDogNTAwLFxuICAgIHZpZGVvOiBmYWxzZSxcbiAgICB1c2VDU1M6IHRydWUsXG4gICAgcHJlbG9hZEltYWdlczogJ3Zpc2libGUnLFxuICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgc2xpZGVaSW5kZXg6IDUwLFxuICAgIHdyYXBwZXJDbGFzczogJ2J4LXdyYXBwZXInLFxuXG4gICAgLy8gVE9VQ0hcbiAgICB0b3VjaEVuYWJsZWQ6IHRydWUsXG4gICAgc3dpcGVUaHJlc2hvbGQ6IDUwLFxuICAgIG9uZVRvT25lVG91Y2g6IHRydWUsXG4gICAgcHJldmVudERlZmF1bHRTd2lwZVg6IHRydWUsXG4gICAgcHJldmVudERlZmF1bHRTd2lwZVk6IGZhbHNlLFxuXG4gICAgLy8gQUNDRVNTSUJJTElUWVxuICAgIGFyaWFMaXZlOiB0cnVlLFxuICAgIGFyaWFIaWRkZW46IHRydWUsXG5cbiAgICAvLyBLRVlCT0FSRFxuICAgIGtleWJvYXJkRW5hYmxlZDogZmFsc2UsXG5cbiAgICAvLyBQQUdFUlxuICAgIHBhZ2VyOiB0cnVlLFxuICAgIHBhZ2VyVHlwZTogJ2Z1bGwnLFxuICAgIHBhZ2VyU2hvcnRTZXBhcmF0b3I6ICcgLyAnLFxuICAgIHBhZ2VyU2VsZWN0b3I6IG51bGwsXG4gICAgYnVpbGRQYWdlcjogbnVsbCxcbiAgICBwYWdlckN1c3RvbTogbnVsbCxcblxuICAgIC8vIENPTlRST0xTXG4gICAgY29udHJvbHM6IHRydWUsXG4gICAgbmV4dFRleHQ6ICdOZXh0JyxcbiAgICBwcmV2VGV4dDogJ1ByZXYnLFxuICAgIG5leHRTZWxlY3RvcjogbnVsbCxcbiAgICBwcmV2U2VsZWN0b3I6IG51bGwsXG4gICAgYXV0b0NvbnRyb2xzOiBmYWxzZSxcbiAgICBzdGFydFRleHQ6ICdTdGFydCcsXG4gICAgc3RvcFRleHQ6ICdTdG9wJyxcbiAgICBhdXRvQ29udHJvbHNDb21iaW5lOiBmYWxzZSxcbiAgICBhdXRvQ29udHJvbHNTZWxlY3RvcjogbnVsbCxcblxuICAgIC8vIEFVVE9cbiAgICBhdXRvOiBmYWxzZSxcbiAgICBwYXVzZTogNDAwMCxcbiAgICBhdXRvU3RhcnQ6IHRydWUsXG4gICAgYXV0b0RpcmVjdGlvbjogJ25leHQnLFxuICAgIHN0b3BBdXRvT25DbGljazogZmFsc2UsXG4gICAgYXV0b0hvdmVyOiBmYWxzZSxcbiAgICBhdXRvRGVsYXk6IDAsXG4gICAgYXV0b1NsaWRlRm9yT25lUGFnZTogZmFsc2UsXG5cbiAgICAvLyBDQVJPVVNFTFxuICAgIG1pblNsaWRlczogMSxcbiAgICBtYXhTbGlkZXM6IDEsXG4gICAgbW92ZVNsaWRlczogMCxcbiAgICBzbGlkZVdpZHRoOiAwLFxuICAgIHNocmlua0l0ZW1zOiBmYWxzZSxcblxuICAgIC8vIENBTExCQUNLU1xuICAgIG9uU2xpZGVyTG9hZDogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICAgIG9uU2xpZGVCZWZvcmU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICBvblNsaWRlQWZ0ZXI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICBvblNsaWRlTmV4dDogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICAgIG9uU2xpZGVQcmV2OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgb25TbGlkZXJSZXNpemU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcblx0b25BdXRvQ2hhbmdlOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gLy9jYWxscyB3aGVuIGF1dG8gc2xpZGVzIHN0YXJ0cyBhbmQgc3RvcHNcbiAgfTtcblxuICAkLmZuLmJ4U2xpZGVyID0gZnVuY3Rpb24ob3B0aW9ucykge1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0IG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAkKHRoaXMpLmJ4U2xpZGVyKG9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgYSBuYW1lc3BhY2UgdG8gYmUgdXNlZCB0aHJvdWdob3V0IHRoZSBwbHVnaW5cbiAgICB2YXIgc2xpZGVyID0ge30sXG4gICAgLy8gc2V0IGEgcmVmZXJlbmNlIHRvIG91ciBzbGlkZXIgZWxlbWVudFxuICAgIGVsID0gdGhpcyxcbiAgICAvLyBnZXQgdGhlIG9yaWdpbmFsIHdpbmRvdyBkaW1lbnMgKHRoYW5rcyBhIGxvdCBJRSlcbiAgICB3aW5kb3dXaWR0aCA9ICQod2luZG93KS53aWR0aCgpLFxuICAgIHdpbmRvd0hlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTtcblxuICAgIC8vIFJldHVybiBpZiBzbGlkZXIgaXMgYWxyZWFkeSBpbml0aWFsaXplZFxuICAgIGlmICgkKGVsKS5kYXRhKCdieFNsaWRlcicpKSB7IHJldHVybjsgfVxuXG4gICAgLyoqXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgKiA9IFBSSVZBVEUgRlVOQ1RJT05TXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIG5hbWVzcGFjZSBzZXR0aW5ncyB0byBiZSB1c2VkIHRocm91Z2hvdXQgcGx1Z2luXG4gICAgICovXG4gICAgdmFyIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFJldHVybiBpZiBzbGlkZXIgaXMgYWxyZWFkeSBpbml0aWFsaXplZFxuICAgICAgaWYgKCQoZWwpLmRhdGEoJ2J4U2xpZGVyJykpIHsgcmV0dXJuOyB9XG4gICAgICAvLyBtZXJnZSB1c2VyLXN1cHBsaWVkIG9wdGlvbnMgd2l0aCB0aGUgZGVmYXVsdHNcbiAgICAgIHNsaWRlci5zZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICAvLyBwYXJzZSBzbGlkZVdpZHRoIHNldHRpbmdcbiAgICAgIHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoID0gcGFyc2VJbnQoc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGgpO1xuICAgICAgLy8gc3RvcmUgdGhlIG9yaWdpbmFsIGNoaWxkcmVuXG4gICAgICBzbGlkZXIuY2hpbGRyZW4gPSBlbC5jaGlsZHJlbihzbGlkZXIuc2V0dGluZ3Muc2xpZGVTZWxlY3Rvcik7XG4gICAgICAvLyBjaGVjayBpZiBhY3R1YWwgbnVtYmVyIG9mIHNsaWRlcyBpcyBsZXNzIHRoYW4gbWluU2xpZGVzIC8gbWF4U2xpZGVzXG4gICAgICBpZiAoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCA8IHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXMpIHsgc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyA9IHNsaWRlci5jaGlsZHJlbi5sZW5ndGg7IH1cbiAgICAgIGlmIChzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIDwgc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcykgeyBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzID0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aDsgfVxuICAgICAgLy8gaWYgcmFuZG9tIHN0YXJ0LCBzZXQgdGhlIHN0YXJ0U2xpZGUgc2V0dGluZyB0byByYW5kb20gbnVtYmVyXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnJhbmRvbVN0YXJ0KSB7IHNsaWRlci5zZXR0aW5ncy5zdGFydFNsaWRlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCk7IH1cbiAgICAgIC8vIHN0b3JlIGFjdGl2ZSBzbGlkZSBpbmZvcm1hdGlvblxuICAgICAgc2xpZGVyLmFjdGl2ZSA9IHsgaW5kZXg6IHNsaWRlci5zZXR0aW5ncy5zdGFydFNsaWRlIH07XG4gICAgICAvLyBzdG9yZSBpZiB0aGUgc2xpZGVyIGlzIGluIGNhcm91c2VsIG1vZGUgKGRpc3BsYXlpbmcgLyBtb3ZpbmcgbXVsdGlwbGUgc2xpZGVzKVxuICAgICAgc2xpZGVyLmNhcm91c2VsID0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyA+IDEgfHwgc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyA+IDEgPyB0cnVlIDogZmFsc2U7XG4gICAgICAvLyBpZiBjYXJvdXNlbCwgZm9yY2UgcHJlbG9hZEltYWdlcyA9ICdhbGwnXG4gICAgICBpZiAoc2xpZGVyLmNhcm91c2VsKSB7IHNsaWRlci5zZXR0aW5ncy5wcmVsb2FkSW1hZ2VzID0gJ2FsbCc7IH1cbiAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgbWluIC8gbWF4IHdpZHRoIHRocmVzaG9sZHMgYmFzZWQgb24gbWluIC8gbWF4IG51bWJlciBvZiBzbGlkZXNcbiAgICAgIC8vIHVzZWQgdG8gc2V0dXAgYW5kIHVwZGF0ZSBjYXJvdXNlbCBzbGlkZXMgZGltZW5zaW9uc1xuICAgICAgc2xpZGVyLm1pblRocmVzaG9sZCA9IChzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzICogc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGgpICsgKChzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzIC0gMSkgKiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pO1xuICAgICAgc2xpZGVyLm1heFRocmVzaG9sZCA9IChzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzICogc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGgpICsgKChzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzIC0gMSkgKiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pO1xuICAgICAgLy8gc3RvcmUgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNsaWRlciAoaWYgY3VycmVudGx5IGFuaW1hdGluZywgd29ya2luZyBpcyB0cnVlKVxuICAgICAgc2xpZGVyLndvcmtpbmcgPSBmYWxzZTtcbiAgICAgIC8vIGluaXRpYWxpemUgdGhlIGNvbnRyb2xzIG9iamVjdFxuICAgICAgc2xpZGVyLmNvbnRyb2xzID0ge307XG4gICAgICAvLyBpbml0aWFsaXplIGFuIGF1dG8gaW50ZXJ2YWxcbiAgICAgIHNsaWRlci5pbnRlcnZhbCA9IG51bGw7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJvcGVydHkgdG8gdXNlIGZvciB0cmFuc2l0aW9uc1xuICAgICAgc2xpZGVyLmFuaW1Qcm9wID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcgPyAndG9wJyA6ICdsZWZ0JztcbiAgICAgIC8vIGRldGVybWluZSBpZiBoYXJkd2FyZSBhY2NlbGVyYXRpb24gY2FuIGJlIHVzZWRcbiAgICAgIHNsaWRlci51c2luZ0NTUyA9IHNsaWRlci5zZXR0aW5ncy51c2VDU1MgJiYgc2xpZGVyLnNldHRpbmdzLm1vZGUgIT09ICdmYWRlJyAmJiAoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBvdXIgdGVzdCBkaXYgZWxlbWVudFxuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgIC8vIGNzcyB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgICAgICAgcHJvcHMgPSBbJ1dlYmtpdFBlcnNwZWN0aXZlJywgJ01velBlcnNwZWN0aXZlJywgJ09QZXJzcGVjdGl2ZScsICdtc1BlcnNwZWN0aXZlJ107XG4gICAgICAgIC8vIHRlc3QgZm9yIGVhY2ggcHJvcGVydHlcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChkaXYuc3R5bGVbcHJvcHNbaV1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNsaWRlci5jc3NQcmVmaXggPSBwcm9wc1tpXS5yZXBsYWNlKCdQZXJzcGVjdGl2ZScsICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgc2xpZGVyLmFuaW1Qcm9wID0gJy0nICsgc2xpZGVyLmNzc1ByZWZpeCArICctdHJhbnNmb3JtJztcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KCkpO1xuICAgICAgLy8gaWYgdmVydGljYWwgbW9kZSBhbHdheXMgbWFrZSBtYXhTbGlkZXMgYW5kIG1pblNsaWRlcyBlcXVhbFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgPSBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzOyB9XG4gICAgICAvLyBzYXZlIG9yaWdpbmFsIHN0eWxlIGRhdGFcbiAgICAgIGVsLmRhdGEoJ29yaWdTdHlsZScsIGVsLmF0dHIoJ3N0eWxlJykpO1xuICAgICAgZWwuY2hpbGRyZW4oc2xpZGVyLnNldHRpbmdzLnNsaWRlU2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICQodGhpcykuZGF0YSgnb3JpZ1N0eWxlJywgJCh0aGlzKS5hdHRyKCdzdHlsZScpKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBwZXJmb3JtIGFsbCBET00gLyBDU1MgbW9kaWZpY2F0aW9uc1xuICAgICAgc2V0dXAoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYWxsIERPTSBhbmQgQ1NTIG1vZGlmaWNhdGlvbnNcbiAgICAgKi9cbiAgICB2YXIgc2V0dXAgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwcmVsb2FkU2VsZWN0b3IgPSBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLnNldHRpbmdzLnN0YXJ0U2xpZGUpOyAvLyBzZXQgdGhlIGRlZmF1bHQgcHJlbG9hZCBzZWxlY3RvciAodmlzaWJsZSlcblxuICAgICAgLy8gd3JhcCBlbCBpbiBhIHdyYXBwZXJcbiAgICAgIGVsLndyYXAoJzxkaXYgY2xhc3M9XCInICsgc2xpZGVyLnNldHRpbmdzLndyYXBwZXJDbGFzcyArICdcIj48ZGl2IGNsYXNzPVwiYngtdmlld3BvcnRcIj48L2Rpdj48L2Rpdj4nKTtcbiAgICAgIC8vIHN0b3JlIGEgbmFtZXNwYWNlIHJlZmVyZW5jZSB0byAuYngtdmlld3BvcnRcbiAgICAgIHNsaWRlci52aWV3cG9ydCA9IGVsLnBhcmVudCgpO1xuXG4gICAgICAvLyBhZGQgYXJpYS1saXZlIGlmIHRoZSBzZXR0aW5nIGlzIGVuYWJsZWQgYW5kIHRpY2tlciBtb2RlIGlzIGRpc2FibGVkXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFMaXZlICYmICFzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7XG4gICAgICAgIHNsaWRlci52aWV3cG9ydC5hdHRyKCdhcmlhLWxpdmUnLCAncG9saXRlJyk7XG4gICAgICB9XG4gICAgICAvLyBhZGQgYSBsb2FkaW5nIGRpdiB0byBkaXNwbGF5IHdoaWxlIGltYWdlcyBhcmUgbG9hZGluZ1xuICAgICAgc2xpZGVyLmxvYWRlciA9ICQoJzxkaXYgY2xhc3M9XCJieC1sb2FkaW5nXCIgLz4nKTtcbiAgICAgIHNsaWRlci52aWV3cG9ydC5wcmVwZW5kKHNsaWRlci5sb2FkZXIpO1xuICAgICAgLy8gc2V0IGVsIHRvIGEgbWFzc2l2ZSB3aWR0aCwgdG8gaG9sZCBhbnkgbmVlZGVkIHNsaWRlc1xuICAgICAgLy8gYWxzbyBzdHJpcCBhbnkgbWFyZ2luIGFuZCBwYWRkaW5nIGZyb20gZWxcbiAgICAgIGVsLmNzcyh7XG4gICAgICAgIHdpZHRoOiBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggKiAxMDAwICsgMjE1KSArICclJyA6ICdhdXRvJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0pO1xuICAgICAgLy8gaWYgdXNpbmcgQ1NTLCBhZGQgdGhlIGVhc2luZyBwcm9wZXJ0eVxuICAgICAgaWYgKHNsaWRlci51c2luZ0NTUyAmJiBzbGlkZXIuc2V0dGluZ3MuZWFzaW5nKSB7XG4gICAgICAgIGVsLmNzcygnLScgKyBzbGlkZXIuY3NzUHJlZml4ICsgJy10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbicsIHNsaWRlci5zZXR0aW5ncy5lYXNpbmcpO1xuICAgICAgLy8gaWYgbm90IHVzaW5nIENTUyBhbmQgbm8gZWFzaW5nIHZhbHVlIHdhcyBzdXBwbGllZCwgdXNlIHRoZSBkZWZhdWx0IEpTIGFuaW1hdGlvbiBlYXNpbmcgKHN3aW5nKVxuICAgICAgfSBlbHNlIGlmICghc2xpZGVyLnNldHRpbmdzLmVhc2luZykge1xuICAgICAgICBzbGlkZXIuc2V0dGluZ3MuZWFzaW5nID0gJ3N3aW5nJztcbiAgICAgIH1cbiAgICAgIC8vIG1ha2UgbW9kaWZpY2F0aW9ucyB0byB0aGUgdmlld3BvcnQgKC5ieC12aWV3cG9ydClcbiAgICAgIHNsaWRlci52aWV3cG9ydC5jc3Moe1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9KTtcbiAgICAgIHNsaWRlci52aWV3cG9ydC5wYXJlbnQoKS5jc3Moe1xuICAgICAgICBtYXhXaWR0aDogZ2V0Vmlld3BvcnRNYXhXaWR0aCgpXG4gICAgICB9KTtcbiAgICAgIC8vIGFwcGx5IGNzcyB0byBhbGwgc2xpZGVyIGNoaWxkcmVuXG4gICAgICBzbGlkZXIuY2hpbGRyZW4uY3NzKHtcbiAgICAgICAgLy8gdGhlIGZsb2F0IGF0dHJpYnV0ZSBpcyBhIHJlc2VydmVkIHdvcmQgaW4gY29tcHJlc3NvcnMgbGlrZSBZVUkgY29tcHJlc3NvciBhbmQgbmVlZCB0byBiZSBxdW90ZWQgIzQ4XG4gICAgICAgICdmbG9hdCc6IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAnbGVmdCcgOiAnbm9uZScsXG4gICAgICAgIGxpc3RTdHlsZTogJ25vbmUnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSk7XG4gICAgICAvLyBhcHBseSB0aGUgY2FsY3VsYXRlZCB3aWR0aCBhZnRlciB0aGUgZmxvYXQgaXMgYXBwbGllZCB0byBwcmV2ZW50IHNjcm9sbGJhciBpbnRlcmZlcmVuY2VcbiAgICAgIHNsaWRlci5jaGlsZHJlbi5jc3MoJ3dpZHRoJywgZ2V0U2xpZGVXaWR0aCgpKTtcbiAgICAgIC8vIGlmIHNsaWRlTWFyZ2luIGlzIHN1cHBsaWVkLCBhZGQgdGhlIGNzc1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgJiYgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luID4gMCkgeyBzbGlkZXIuY2hpbGRyZW4uY3NzKCdtYXJnaW5SaWdodCcsIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbik7IH1cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJyAmJiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4gPiAwKSB7IHNsaWRlci5jaGlsZHJlbi5jc3MoJ21hcmdpbkJvdHRvbScsIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbik7IH1cbiAgICAgIC8vIGlmIFwiZmFkZVwiIG1vZGUsIGFkZCBwb3NpdGlvbmluZyBhbmQgei1pbmRleCBDU1NcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2ZhZGUnKSB7XG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5jc3Moe1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIHpJbmRleDogMCxcbiAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHByZXBhcmUgdGhlIHotaW5kZXggb24gdGhlIHNob3dpbmcgZWxlbWVudFxuICAgICAgICBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLnNldHRpbmdzLnN0YXJ0U2xpZGUpLmNzcyh7ekluZGV4OiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVaSW5kZXgsIGRpc3BsYXk6ICdibG9jayd9KTtcbiAgICAgIH1cbiAgICAgIC8vIGNyZWF0ZSBhbiBlbGVtZW50IHRvIGNvbnRhaW4gYWxsIHNsaWRlciBjb250cm9scyAocGFnZXIsIHN0YXJ0IC8gc3RvcCwgZXRjKVxuICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsID0gJCgnPGRpdiBjbGFzcz1cImJ4LWNvbnRyb2xzXCIgLz4nKTtcbiAgICAgIC8vIGlmIGNhcHRpb25zIGFyZSByZXF1ZXN0ZWQsIGFkZCB0aGVtXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmNhcHRpb25zKSB7IGFwcGVuZENhcHRpb25zKCk7IH1cbiAgICAgIC8vIGNoZWNrIGlmIHN0YXJ0U2xpZGUgaXMgbGFzdCBzbGlkZVxuICAgICAgc2xpZGVyLmFjdGl2ZS5sYXN0ID0gc2xpZGVyLnNldHRpbmdzLnN0YXJ0U2xpZGUgPT09IGdldFBhZ2VyUXR5KCkgLSAxO1xuICAgICAgLy8gaWYgdmlkZW8gaXMgdHJ1ZSwgc2V0IHVwIHRoZSBmaXRWaWRzIHBsdWdpblxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy52aWRlbykgeyBlbC5maXRWaWRzKCk7IH1cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucHJlbG9hZEltYWdlcyA9PT0gJ2FsbCcgfHwgc2xpZGVyLnNldHRpbmdzLnRpY2tlcikgeyBwcmVsb2FkU2VsZWN0b3IgPSBzbGlkZXIuY2hpbGRyZW47IH1cbiAgICAgIC8vIG9ubHkgY2hlY2sgZm9yIGNvbnRyb2wgYWRkaXRpb24gaWYgbm90IGluIFwidGlja2VyXCIgbW9kZVxuICAgICAgaWYgKCFzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7XG4gICAgICAgIC8vIGlmIGNvbnRyb2xzIGFyZSByZXF1ZXN0ZWQsIGFkZCB0aGVtXG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuY29udHJvbHMpIHsgYXBwZW5kQ29udHJvbHMoKTsgfVxuICAgICAgICAvLyBpZiBhdXRvIGlzIHRydWUsIGFuZCBhdXRvIGNvbnRyb2xzIGFyZSByZXF1ZXN0ZWQsIGFkZCB0aGVtXG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0byAmJiBzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzKSB7IGFwcGVuZENvbnRyb2xzQXV0bygpOyB9XG4gICAgICAgIC8vIGlmIHBhZ2VyIGlzIHJlcXVlc3RlZCwgYWRkIGl0XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucGFnZXIpIHsgYXBwZW5kUGFnZXIoKTsgfVxuICAgICAgICAvLyBpZiBhbnkgY29udHJvbCBvcHRpb24gaXMgcmVxdWVzdGVkLCBhZGQgdGhlIGNvbnRyb2xzIHdyYXBwZXJcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5jb250cm9scyB8fCBzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzIHx8IHNsaWRlci5zZXR0aW5ncy5wYWdlcikgeyBzbGlkZXIudmlld3BvcnQuYWZ0ZXIoc2xpZGVyLmNvbnRyb2xzLmVsKTsgfVxuICAgICAgLy8gaWYgdGlja2VyIG1vZGUsIGRvIG5vdCBhbGxvdyBhIHBhZ2VyXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXIuc2V0dGluZ3MucGFnZXIgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGxvYWRFbGVtZW50cyhwcmVsb2FkU2VsZWN0b3IsIHN0YXJ0KTtcbiAgICB9O1xuXG4gICAgdmFyIGxvYWRFbGVtZW50cyA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHRvdGFsID0gc2VsZWN0b3IuZmluZCgnaW1nOm5vdChbc3JjPVwiXCJdKSwgaWZyYW1lJykubGVuZ3RoLFxuICAgICAgY291bnQgPSAwO1xuICAgICAgaWYgKHRvdGFsID09PSAwKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlbGVjdG9yLmZpbmQoJ2ltZzpub3QoW3NyYz1cIlwiXSksIGlmcmFtZScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICQodGhpcykub25lKCdsb2FkIGVycm9yJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPT09IHRvdGFsKSB7IGNhbGxiYWNrKCk7IH1cbiAgICAgICAgfSkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodGhpcy5jb21wbGV0ZSB8fCB0aGlzLnNyYyA9PSAnJykgeyAkKHRoaXMpLnRyaWdnZXIoJ2xvYWQnKTsgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCB0aGUgc2xpZGVyXG4gICAgICovXG4gICAgdmFyIHN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpZiBpbmZpbml0ZSBsb29wLCBwcmVwYXJlIGFkZGl0aW9uYWwgc2xpZGVzXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiBzbGlkZXIuc2V0dGluZ3MubW9kZSAhPT0gJ2ZhZGUnICYmICFzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7XG4gICAgICAgIHZhciBzbGljZSAgICA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnID8gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyA6IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMsXG4gICAgICAgIHNsaWNlQXBwZW5kICA9IHNsaWRlci5jaGlsZHJlbi5zbGljZSgwLCBzbGljZSkuY2xvbmUodHJ1ZSkuYWRkQ2xhc3MoJ2J4LWNsb25lJyksXG4gICAgICAgIHNsaWNlUHJlcGVuZCA9IHNsaWRlci5jaGlsZHJlbi5zbGljZSgtc2xpY2UpLmNsb25lKHRydWUpLmFkZENsYXNzKCdieC1jbG9uZScpO1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFIaWRkZW4pIHtcbiAgICAgICAgICBzbGljZUFwcGVuZC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgICAgIHNsaWNlUHJlcGVuZC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsLmFwcGVuZChzbGljZUFwcGVuZCkucHJlcGVuZChzbGljZVByZXBlbmQpO1xuICAgICAgfVxuICAgICAgLy8gcmVtb3ZlIHRoZSBsb2FkaW5nIERPTSBlbGVtZW50XG4gICAgICBzbGlkZXIubG9hZGVyLnJlbW92ZSgpO1xuICAgICAgLy8gc2V0IHRoZSBsZWZ0IC8gdG9wIHBvc2l0aW9uIG9mIFwiZWxcIlxuICAgICAgc2V0U2xpZGVQb3NpdGlvbigpO1xuICAgICAgLy8gaWYgXCJ2ZXJ0aWNhbFwiIG1vZGUsIGFsd2F5cyB1c2UgYWRhcHRpdmVIZWlnaHQgdG8gcHJldmVudCBvZGQgYmVoYXZpb3JcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykgeyBzbGlkZXIuc2V0dGluZ3MuYWRhcHRpdmVIZWlnaHQgPSB0cnVlOyB9XG4gICAgICAvLyBzZXQgdGhlIHZpZXdwb3J0IGhlaWdodFxuICAgICAgc2xpZGVyLnZpZXdwb3J0LmhlaWdodChnZXRWaWV3cG9ydEhlaWdodCgpKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSBldmVyeXRoaW5nIGlzIHBvc2l0aW9uZWQganVzdCByaWdodCAoc2FtZSBhcyBhIHdpbmRvdyByZXNpemUpXG4gICAgICBlbC5yZWRyYXdTbGlkZXIoKTtcbiAgICAgIC8vIG9uU2xpZGVyTG9hZCBjYWxsYmFja1xuICAgICAgc2xpZGVyLnNldHRpbmdzLm9uU2xpZGVyTG9hZC5jYWxsKGVsLCBzbGlkZXIuYWN0aXZlLmluZGV4KTtcbiAgICAgIC8vIHNsaWRlciBoYXMgYmVlbiBmdWxseSBpbml0aWFsaXplZFxuICAgICAgc2xpZGVyLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIC8vIGJpbmQgdGhlIHJlc2l6ZSBjYWxsIHRvIHRoZSB3aW5kb3dcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucmVzcG9uc2l2ZSkgeyAkKHdpbmRvdykuYmluZCgncmVzaXplJywgcmVzaXplV2luZG93KTsgfVxuICAgICAgLy8gaWYgYXV0byBpcyB0cnVlIGFuZCBoYXMgbW9yZSB0aGFuIDEgcGFnZSwgc3RhcnQgdGhlIHNob3dcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0byAmJiBzbGlkZXIuc2V0dGluZ3MuYXV0b1N0YXJ0ICYmIChnZXRQYWdlclF0eSgpID4gMSB8fCBzbGlkZXIuc2V0dGluZ3MuYXV0b1NsaWRlRm9yT25lUGFnZSkpIHsgaW5pdEF1dG8oKTsgfVxuICAgICAgLy8gaWYgdGlja2VyIGlzIHRydWUsIHN0YXJ0IHRoZSB0aWNrZXJcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7IGluaXRUaWNrZXIoKTsgfVxuICAgICAgLy8gaWYgcGFnZXIgaXMgcmVxdWVzdGVkLCBtYWtlIHRoZSBhcHByb3ByaWF0ZSBwYWdlciBsaW5rIGFjdGl2ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wYWdlcikgeyB1cGRhdGVQYWdlckFjdGl2ZShzbGlkZXIuc2V0dGluZ3Muc3RhcnRTbGlkZSk7IH1cbiAgICAgIC8vIGNoZWNrIGZvciBhbnkgdXBkYXRlcyB0byB0aGUgY29udHJvbHMgKGxpa2UgaGlkZUNvbnRyb2xPbkVuZCB1cGRhdGVzKVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5jb250cm9scykgeyB1cGRhdGVEaXJlY3Rpb25Db250cm9scygpOyB9XG4gICAgICAvLyBpZiB0b3VjaEVuYWJsZWQgaXMgdHJ1ZSwgc2V0dXAgdGhlIHRvdWNoIGV2ZW50c1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy50b3VjaEVuYWJsZWQgJiYgIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHsgaW5pdFRvdWNoKCk7IH1cbiAgICAgIC8vIGlmIGtleWJvYXJkRW5hYmxlZCBpcyB0cnVlLCBzZXR1cCB0aGUga2V5Ym9hcmQgZXZlbnRzXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmtleWJvYXJkRW5hYmxlZCAmJiAhc2xpZGVyLnNldHRpbmdzLnRpY2tlcikge1xuICAgICAgICAkKGRvY3VtZW50KS5rZXlkb3duKGtleVByZXNzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2FsY3VsYXRlZCBoZWlnaHQgb2YgdGhlIHZpZXdwb3J0LCB1c2VkIHRvIGRldGVybWluZSBlaXRoZXIgYWRhcHRpdmVIZWlnaHQgb3IgdGhlIG1heEhlaWdodCB2YWx1ZVxuICAgICAqL1xuICAgIHZhciBnZXRWaWV3cG9ydEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhlaWdodCA9IDA7XG4gICAgICAvLyBmaXJzdCBkZXRlcm1pbmUgd2hpY2ggY2hpbGRyZW4gKHNsaWRlcykgc2hvdWxkIGJlIHVzZWQgaW4gb3VyIGhlaWdodCBjYWxjdWxhdGlvblxuICAgICAgdmFyIGNoaWxkcmVuID0gJCgpO1xuICAgICAgLy8gaWYgbW9kZSBpcyBub3QgXCJ2ZXJ0aWNhbFwiIGFuZCBhZGFwdGl2ZUhlaWdodCBpcyBmYWxzZSwgaW5jbHVkZSBhbGwgY2hpbGRyZW5cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSAhPT0gJ3ZlcnRpY2FsJyAmJiAhc2xpZGVyLnNldHRpbmdzLmFkYXB0aXZlSGVpZ2h0KSB7XG4gICAgICAgIGNoaWxkcmVuID0gc2xpZGVyLmNoaWxkcmVuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgbm90IGNhcm91c2VsLCByZXR1cm4gdGhlIHNpbmdsZSBhY3RpdmUgY2hpbGRcbiAgICAgICAgaWYgKCFzbGlkZXIuY2Fyb3VzZWwpIHtcbiAgICAgICAgICBjaGlsZHJlbiA9IHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuYWN0aXZlLmluZGV4KTtcbiAgICAgICAgLy8gaWYgY2Fyb3VzZWwsIHJldHVybiBhIHNsaWNlIG9mIGNoaWxkcmVuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZ2V0IHRoZSBpbmRpdmlkdWFsIHNsaWRlIGluZGV4XG4gICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHNsaWRlci5zZXR0aW5ncy5tb3ZlU2xpZGVzID09PSAxID8gc2xpZGVyLmFjdGl2ZS5pbmRleCA6IHNsaWRlci5hY3RpdmUuaW5kZXggKiBnZXRNb3ZlQnkoKTtcbiAgICAgICAgICAvLyBhZGQgdGhlIGN1cnJlbnQgc2xpZGUgdG8gdGhlIGNoaWxkcmVuXG4gICAgICAgICAgY2hpbGRyZW4gPSBzbGlkZXIuY2hpbGRyZW4uZXEoY3VycmVudEluZGV4KTtcbiAgICAgICAgICAvLyBjeWNsZSB0aHJvdWdoIHRoZSByZW1haW5pbmcgXCJzaG93aW5nXCIgc2xpZGVzXG4gICAgICAgICAgZm9yIChpID0gMTsgaSA8PSBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAvLyBpZiBsb29wZWQgYmFjayB0byB0aGUgc3RhcnRcbiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggKyBpID49IHNsaWRlci5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5hZGQoc2xpZGVyLmNoaWxkcmVuLmVxKGkgLSAxKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmFkZChzbGlkZXIuY2hpbGRyZW4uZXEoY3VycmVudEluZGV4ICsgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gaWYgXCJ2ZXJ0aWNhbFwiIG1vZGUsIGNhbGN1bGF0ZSB0aGUgc3VtIG9mIHRoZSBoZWlnaHRzIG9mIHRoZSBjaGlsZHJlblxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIGNoaWxkcmVuLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICBoZWlnaHQgKz0gJCh0aGlzKS5vdXRlckhlaWdodCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gYWRkIHVzZXItc3VwcGxpZWQgbWFyZ2luc1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luID4gMCkge1xuICAgICAgICAgIGhlaWdodCArPSBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4gKiAoc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyAtIDEpO1xuICAgICAgICB9XG4gICAgICAvLyBpZiBub3QgXCJ2ZXJ0aWNhbFwiIG1vZGUsIGNhbGN1bGF0ZSB0aGUgbWF4IGhlaWdodCBvZiB0aGUgY2hpbGRyZW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhlaWdodCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGNoaWxkcmVuLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJCh0aGlzKS5vdXRlckhlaWdodChmYWxzZSk7XG4gICAgICAgIH0pLmdldCgpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNsaWRlci52aWV3cG9ydC5jc3MoJ2JveC1zaXppbmcnKSA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgIGhlaWdodCArPSBwYXJzZUZsb2F0KHNsaWRlci52aWV3cG9ydC5jc3MoJ3BhZGRpbmctdG9wJykpICsgcGFyc2VGbG9hdChzbGlkZXIudmlld3BvcnQuY3NzKCdwYWRkaW5nLWJvdHRvbScpKSArXG4gICAgICAgICAgICAgIHBhcnNlRmxvYXQoc2xpZGVyLnZpZXdwb3J0LmNzcygnYm9yZGVyLXRvcC13aWR0aCcpKSArIHBhcnNlRmxvYXQoc2xpZGVyLnZpZXdwb3J0LmNzcygnYm9yZGVyLWJvdHRvbS13aWR0aCcpKTtcbiAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLnZpZXdwb3J0LmNzcygnYm94LXNpemluZycpID09PSAncGFkZGluZy1ib3gnKSB7XG4gICAgICAgIGhlaWdodCArPSBwYXJzZUZsb2F0KHNsaWRlci52aWV3cG9ydC5jc3MoJ3BhZGRpbmctdG9wJykpICsgcGFyc2VGbG9hdChzbGlkZXIudmlld3BvcnQuY3NzKCdwYWRkaW5nLWJvdHRvbScpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2FsY3VsYXRlZCB3aWR0aCB0byBiZSB1c2VkIGZvciB0aGUgb3V0ZXIgd3JhcHBlciAvIHZpZXdwb3J0XG4gICAgICovXG4gICAgdmFyIGdldFZpZXdwb3J0TWF4V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB3aWR0aCA9ICcxMDAlJztcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCA+IDApIHtcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICB3aWR0aCA9IChzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzICogc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGgpICsgKChzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzIC0gMSkgKiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpZHRoID0gc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB3aWR0aDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2FsY3VsYXRlZCB3aWR0aCB0byBiZSBhcHBsaWVkIHRvIGVhY2ggc2xpZGVcbiAgICAgKi9cbiAgICB2YXIgZ2V0U2xpZGVXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5ld0VsV2lkdGggPSBzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCwgLy8gc3RhcnQgd2l0aCBhbnkgdXNlci1zdXBwbGllZCBzbGlkZSB3aWR0aFxuICAgICAgd3JhcFdpZHRoICAgICAgPSBzbGlkZXIudmlld3BvcnQud2lkdGgoKTsgICAgLy8gZ2V0IHRoZSBjdXJyZW50IHZpZXdwb3J0IHdpZHRoXG4gICAgICAvLyBpZiBzbGlkZSB3aWR0aCB3YXMgbm90IHN1cHBsaWVkLCBvciBpcyBsYXJnZXIgdGhhbiB0aGUgdmlld3BvcnQgdXNlIHRoZSB2aWV3cG9ydCB3aWR0aFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoID09PSAwIHx8XG4gICAgICAgIChzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCA+IHdyYXBXaWR0aCAmJiAhc2xpZGVyLmNhcm91c2VsKSB8fFxuICAgICAgICBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBuZXdFbFdpZHRoID0gd3JhcFdpZHRoO1xuICAgICAgLy8gaWYgY2Fyb3VzZWwsIHVzZSB0aGUgdGhyZXNob2xkcyB0byBkZXRlcm1pbmUgdGhlIHdpZHRoXG4gICAgICB9IGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgPiAxICYmIHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgaWYgKHdyYXBXaWR0aCA+IHNsaWRlci5tYXhUaHJlc2hvbGQpIHtcbiAgICAgICAgICByZXR1cm4gbmV3RWxXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmICh3cmFwV2lkdGggPCBzbGlkZXIubWluVGhyZXNob2xkKSB7XG4gICAgICAgICAgbmV3RWxXaWR0aCA9ICh3cmFwV2lkdGggLSAoc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luICogKHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXMgLSAxKSkpIC8gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcztcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3Muc2hyaW5rSXRlbXMpIHtcbiAgICAgICAgICBuZXdFbFdpZHRoID0gTWF0aC5mbG9vcigod3JhcFdpZHRoICsgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKSAvIChNYXRoLmNlaWwoKHdyYXBXaWR0aCArIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbikgLyAobmV3RWxXaWR0aCArIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbikpKSAtIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdFbFdpZHRoO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygc2xpZGVzIGN1cnJlbnRseSB2aXNpYmxlIGluIHRoZSB2aWV3cG9ydCAoaW5jbHVkZXMgcGFydGlhbGx5IHZpc2libGUgc2xpZGVzKVxuICAgICAqL1xuICAgIHZhciBnZXROdW1iZXJTbGlkZXNTaG93aW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2xpZGVzU2hvd2luZyA9IDEsXG4gICAgICBjaGlsZFdpZHRoID0gbnVsbDtcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnICYmIHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoID4gMCkge1xuICAgICAgICAvLyBpZiB2aWV3cG9ydCBpcyBzbWFsbGVyIHRoYW4gbWluVGhyZXNob2xkLCByZXR1cm4gbWluU2xpZGVzXG4gICAgICAgIGlmIChzbGlkZXIudmlld3BvcnQud2lkdGgoKSA8IHNsaWRlci5taW5UaHJlc2hvbGQpIHtcbiAgICAgICAgICBzbGlkZXNTaG93aW5nID0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcztcbiAgICAgICAgLy8gaWYgdmlld3BvcnQgaXMgbGFyZ2VyIHRoYW4gbWF4VGhyZXNob2xkLCByZXR1cm4gbWF4U2xpZGVzXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLnZpZXdwb3J0LndpZHRoKCkgPiBzbGlkZXIubWF4VGhyZXNob2xkKSB7XG4gICAgICAgICAgc2xpZGVzU2hvd2luZyA9IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXM7XG4gICAgICAgIC8vIGlmIHZpZXdwb3J0IGlzIGJldHdlZW4gbWluIC8gbWF4IHRocmVzaG9sZHMsIGRpdmlkZSB2aWV3cG9ydCB3aWR0aCBieSBmaXJzdCBjaGlsZCB3aWR0aFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoaWxkV2lkdGggPSBzbGlkZXIuY2hpbGRyZW4uZmlyc3QoKS53aWR0aCgpICsgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luO1xuICAgICAgICAgIHNsaWRlc1Nob3dpbmcgPSBNYXRoLmZsb29yKChzbGlkZXIudmlld3BvcnQud2lkdGgoKSArXG4gICAgICAgICAgICBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pIC8gY2hpbGRXaWR0aCkgfHwgMTtcbiAgICAgICAgfVxuICAgICAgLy8gaWYgXCJ2ZXJ0aWNhbFwiIG1vZGUsIHNsaWRlcyBzaG93aW5nIHdpbGwgYWx3YXlzIGJlIG1pblNsaWRlc1xuICAgICAgfSBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZXNTaG93aW5nID0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBzbGlkZXNTaG93aW5nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcGFnZXMgKG9uZSBmdWxsIHZpZXdwb3J0IG9mIHNsaWRlcyBpcyBvbmUgXCJwYWdlXCIpXG4gICAgICovXG4gICAgdmFyIGdldFBhZ2VyUXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFnZXJRdHkgPSAwLFxuICAgICAgYnJlYWtQb2ludCA9IDAsXG4gICAgICBjb3VudGVyID0gMDtcbiAgICAgIC8vIGlmIG1vdmVTbGlkZXMgaXMgc3BlY2lmaWVkIGJ5IHRoZSB1c2VyXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPiAwKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wKSB7XG4gICAgICAgICAgcGFnZXJRdHkgPSBNYXRoLmNlaWwoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAvIGdldE1vdmVCeSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB3aGVuIGJyZWFrcG9pbnQgZ29lcyBhYm92ZSBjaGlsZHJlbiBsZW5ndGgsIGNvdW50ZXIgaXMgdGhlIG51bWJlciBvZiBwYWdlc1xuICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgZ2V0TnVtYmVyU2xpZGVzU2hvd2luZygpO1xuICAgICAgICAgICAgY291bnRlciArPSBzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcyA8PSBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCkgPyBzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcyA6IGdldE51bWJlclNsaWRlc1Nob3dpbmcoKTtcbiAgICAgICAgICB9XG5cdFx0ICByZXR1cm4gY291bnRlcjtcbiAgICAgICAgfVxuICAgICAgLy8gaWYgbW92ZVNsaWRlcyBpcyAwIChhdXRvKSBkaXZpZGUgY2hpbGRyZW4gbGVuZ3RoIGJ5IHNpZGVzIHNob3dpbmcsIHRoZW4gcm91bmQgdXBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2VyUXR5ID0gTWF0aC5jZWlsKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggLyBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhZ2VyUXR5O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgaW5kaXZpZHVhbCBzbGlkZXMgYnkgd2hpY2ggdG8gc2hpZnQgdGhlIHNsaWRlclxuICAgICAqL1xuICAgIHZhciBnZXRNb3ZlQnkgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIG1vdmVTbGlkZXMgd2FzIHNldCBieSB0aGUgdXNlciBhbmQgbW92ZVNsaWRlcyBpcyBsZXNzIHRoYW4gbnVtYmVyIG9mIHNsaWRlcyBzaG93aW5nXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPiAwICYmIHNsaWRlci5zZXR0aW5ncy5tb3ZlU2xpZGVzIDw9IGdldE51bWJlclNsaWRlc1Nob3dpbmcoKSkge1xuICAgICAgICByZXR1cm4gc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXM7XG4gICAgICB9XG4gICAgICAvLyBpZiBtb3ZlU2xpZGVzIGlzIDAgKGF1dG8pXG4gICAgICByZXR1cm4gZ2V0TnVtYmVyU2xpZGVzU2hvd2luZygpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzbGlkZXIncyAoZWwpIGxlZnQgb3IgdG9wIHBvc2l0aW9uXG4gICAgICovXG4gICAgdmFyIHNldFNsaWRlUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwb3NpdGlvbiwgbGFzdENoaWxkLCBsYXN0U2hvd2luZ0luZGV4O1xuICAgICAgLy8gaWYgbGFzdCBzbGlkZSwgbm90IGluZmluaXRlIGxvb3AsIGFuZCBudW1iZXIgb2YgY2hpbGRyZW4gaXMgbGFyZ2VyIHRoYW4gc3BlY2lmaWVkIG1heFNsaWRlc1xuICAgICAgaWYgKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggPiBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzICYmIHNsaWRlci5hY3RpdmUubGFzdCAmJiAhc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCkge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBjaGlsZCdzIHBvc2l0aW9uXG4gICAgICAgICAgbGFzdENoaWxkID0gc2xpZGVyLmNoaWxkcmVuLmxhc3QoKTtcbiAgICAgICAgICBwb3NpdGlvbiA9IGxhc3RDaGlsZC5wb3NpdGlvbigpO1xuICAgICAgICAgIC8vIHNldCB0aGUgbGVmdCBwb3NpdGlvblxuICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkoLShwb3NpdGlvbi5sZWZ0IC0gKHNsaWRlci52aWV3cG9ydC53aWR0aCgpIC0gbGFzdENoaWxkLm91dGVyV2lkdGgoKSkpLCAncmVzZXQnLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBzaG93aW5nIGluZGV4J3MgcG9zaXRpb25cbiAgICAgICAgICBsYXN0U2hvd2luZ0luZGV4ID0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAtIHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXM7XG4gICAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEobGFzdFNob3dpbmdJbmRleCkucG9zaXRpb24oKTtcbiAgICAgICAgICAvLyBzZXQgdGhlIHRvcCBwb3NpdGlvblxuICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkoLXBvc2l0aW9uLnRvcCwgJ3Jlc2V0JywgMCk7XG4gICAgICAgIH1cbiAgICAgIC8vIGlmIG5vdCBsYXN0IHNsaWRlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBzaG93aW5nIHNsaWRlXG4gICAgICAgIHBvc2l0aW9uID0gc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5hY3RpdmUuaW5kZXggKiBnZXRNb3ZlQnkoKSkucG9zaXRpb24oKTtcbiAgICAgICAgLy8gY2hlY2sgZm9yIGxhc3Qgc2xpZGVcbiAgICAgICAgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IGdldFBhZ2VyUXR5KCkgLSAxKSB7IHNsaWRlci5hY3RpdmUubGFzdCA9IHRydWU7IH1cbiAgICAgICAgLy8gc2V0IHRoZSByZXNwZWN0aXZlIHBvc2l0aW9uXG4gICAgICAgIGlmIChwb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHsgc2V0UG9zaXRpb25Qcm9wZXJ0eSgtcG9zaXRpb24ubGVmdCwgJ3Jlc2V0JywgMCk7IH1cbiAgICAgICAgICBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykgeyBzZXRQb3NpdGlvblByb3BlcnR5KC1wb3NpdGlvbi50b3AsICdyZXNldCcsIDApOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZWwncyBhbmltYXRpbmcgcHJvcGVydHkgcG9zaXRpb24gKHdoaWNoIGluIHR1cm4gd2lsbCBzb21ldGltZXMgYW5pbWF0ZSBlbCkuXG4gICAgICogSWYgdXNpbmcgQ1NTLCBzZXRzIHRoZSB0cmFuc2Zvcm0gcHJvcGVydHkuIElmIG5vdCB1c2luZyBDU1MsIHNldHMgdGhlIHRvcCAvIGxlZnQgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgKGludClcbiAgICAgKiAgLSB0aGUgYW5pbWF0aW5nIHByb3BlcnR5J3MgdmFsdWVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIChzdHJpbmcpICdzbGlkZScsICdyZXNldCcsICd0aWNrZXInXG4gICAgICogIC0gdGhlIHR5cGUgb2YgaW5zdGFuY2UgZm9yIHdoaWNoIHRoZSBmdW5jdGlvbiBpcyBiZWluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIChpbnQpXG4gICAgICogIC0gdGhlIGFtb3VudCBvZiB0aW1lIChpbiBtcykgdGhlIHRyYW5zaXRpb24gc2hvdWxkIG9jY3VweVxuICAgICAqXG4gICAgICogQHBhcmFtIHBhcmFtcyAoYXJyYXkpIG9wdGlvbmFsXG4gICAgICogIC0gYW4gb3B0aW9uYWwgcGFyYW1ldGVyIGNvbnRhaW5pbmcgYW55IHZhcmlhYmxlcyB0aGF0IG5lZWQgdG8gYmUgcGFzc2VkIGluXG4gICAgICovXG4gICAgdmFyIHNldFBvc2l0aW9uUHJvcGVydHkgPSBmdW5jdGlvbih2YWx1ZSwgdHlwZSwgZHVyYXRpb24sIHBhcmFtcykge1xuICAgICAgdmFyIGFuaW1hdGVPYmosIHByb3BWYWx1ZTtcbiAgICAgIC8vIHVzZSBDU1MgdHJhbnNmb3JtXG4gICAgICBpZiAoc2xpZGVyLnVzaW5nQ1NTKSB7XG4gICAgICAgIC8vIGRldGVybWluZSB0aGUgdHJhbnNsYXRlM2QgdmFsdWVcbiAgICAgICAgcHJvcFZhbHVlID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcgPyAndHJhbnNsYXRlM2QoMCwgJyArIHZhbHVlICsgJ3B4LCAwKScgOiAndHJhbnNsYXRlM2QoJyArIHZhbHVlICsgJ3B4LCAwLCAwKSc7XG4gICAgICAgIC8vIGFkZCB0aGUgQ1NTIHRyYW5zaXRpb24tZHVyYXRpb25cbiAgICAgICAgZWwuY3NzKCctJyArIHNsaWRlci5jc3NQcmVmaXggKyAnLXRyYW5zaXRpb24tZHVyYXRpb24nLCBkdXJhdGlvbiAvIDEwMDAgKyAncycpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgIC8vIHNldCB0aGUgcHJvcGVydHkgdmFsdWVcbiAgICAgICAgICBlbC5jc3Moc2xpZGVyLmFuaW1Qcm9wLCBwcm9wVmFsdWUpO1xuICAgICAgICAgIGlmIChkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgLy8gYmluZCBhIGNhbGxiYWNrIG1ldGhvZCAtIGV4ZWN1dGVzIHdoZW4gQ1NTIHRyYW5zaXRpb24gY29tcGxldGVzXG4gICAgICAgICAgICBlbC5iaW5kKCd0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgTVNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAvL21ha2Ugc3VyZSBpdCdzIHRoZSBjb3JyZWN0IG9uZVxuICAgICAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLmlzKGVsKSkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgLy8gdW5iaW5kIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICBlbC51bmJpbmQoJ3RyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCBNU1RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICAgICAgdXBkYXRlQWZ0ZXJTbGlkZVRyYW5zaXRpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7IC8vZHVyYXRpb24gPSAwXG4gICAgICAgICAgICB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncmVzZXQnKSB7XG4gICAgICAgICAgZWwuY3NzKHNsaWRlci5hbmltUHJvcCwgcHJvcFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndGlja2VyJykge1xuICAgICAgICAgIC8vIG1ha2UgdGhlIHRyYW5zaXRpb24gdXNlICdsaW5lYXInXG4gICAgICAgICAgZWwuY3NzKCctJyArIHNsaWRlci5jc3NQcmVmaXggKyAnLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uJywgJ2xpbmVhcicpO1xuICAgICAgICAgIGVsLmNzcyhzbGlkZXIuYW5pbVByb3AsIHByb3BWYWx1ZSk7XG4gICAgICAgICAgaWYgKGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICBlbC5iaW5kKCd0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgTVNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAvL21ha2Ugc3VyZSBpdCdzIHRoZSBjb3JyZWN0IG9uZVxuICAgICAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLmlzKGVsKSkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgLy8gdW5iaW5kIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICBlbC51bmJpbmQoJ3RyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCBNU1RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICAgICAgLy8gcmVzZXQgdGhlIHBvc2l0aW9uXG4gICAgICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkocGFyYW1zLnJlc2V0VmFsdWUsICdyZXNldCcsIDApO1xuICAgICAgICAgICAgICAvLyBzdGFydCB0aGUgbG9vcCBhZ2FpblxuICAgICAgICAgICAgICB0aWNrZXJMb29wKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgeyAvL2R1cmF0aW9uID0gMFxuICAgICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eShwYXJhbXMucmVzZXRWYWx1ZSwgJ3Jlc2V0JywgMCk7XG4gICAgICAgICAgICB0aWNrZXJMb29wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAvLyB1c2UgSlMgYW5pbWF0ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW5pbWF0ZU9iaiA9IHt9O1xuICAgICAgICBhbmltYXRlT2JqW3NsaWRlci5hbmltUHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzbGlkZScpIHtcbiAgICAgICAgICBlbC5hbmltYXRlKGFuaW1hdGVPYmosIGR1cmF0aW9uLCBzbGlkZXIuc2V0dGluZ3MuZWFzaW5nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHVwZGF0ZUFmdGVyU2xpZGVUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3Jlc2V0Jykge1xuICAgICAgICAgIGVsLmNzcyhzbGlkZXIuYW5pbVByb3AsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndGlja2VyJykge1xuICAgICAgICAgIGVsLmFuaW1hdGUoYW5pbWF0ZU9iaiwgZHVyYXRpb24sICdsaW5lYXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkocGFyYW1zLnJlc2V0VmFsdWUsICdyZXNldCcsIDApO1xuICAgICAgICAgICAgLy8gcnVuIHRoZSByZWN1cnNpdmUgbG9vcCBhZnRlciBhbmltYXRpb25cbiAgICAgICAgICAgIHRpY2tlckxvb3AoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQb3B1bGF0ZXMgdGhlIHBhZ2VyIHdpdGggcHJvcGVyIGFtb3VudCBvZiBwYWdlc1xuICAgICAqL1xuICAgIHZhciBwb3B1bGF0ZVBhZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFnZXJIdG1sID0gJycsXG4gICAgICBsaW5rQ29udGVudCA9ICcnLFxuICAgICAgcGFnZXJRdHkgPSBnZXRQYWdlclF0eSgpO1xuICAgICAgLy8gbG9vcCB0aHJvdWdoIGVhY2ggcGFnZXIgaXRlbVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWdlclF0eTsgaSsrKSB7XG4gICAgICAgIGxpbmtDb250ZW50ID0gJyc7XG4gICAgICAgIC8vIGlmIGEgYnVpbGRQYWdlciBmdW5jdGlvbiBpcyBzdXBwbGllZCwgdXNlIGl0IHRvIGdldCBwYWdlciBsaW5rIHZhbHVlLCBlbHNlIHVzZSBpbmRleCArIDFcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5idWlsZFBhZ2VyICYmICQuaXNGdW5jdGlvbihzbGlkZXIuc2V0dGluZ3MuYnVpbGRQYWdlcikgfHwgc2xpZGVyLnNldHRpbmdzLnBhZ2VyQ3VzdG9tKSB7XG4gICAgICAgICAgbGlua0NvbnRlbnQgPSBzbGlkZXIuc2V0dGluZ3MuYnVpbGRQYWdlcihpKTtcbiAgICAgICAgICBzbGlkZXIucGFnZXJFbC5hZGRDbGFzcygnYngtY3VzdG9tLXBhZ2VyJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGlua0NvbnRlbnQgPSBpICsgMTtcbiAgICAgICAgICBzbGlkZXIucGFnZXJFbC5hZGRDbGFzcygnYngtZGVmYXVsdC1wYWdlcicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHZhciBsaW5rQ29udGVudCA9IHNsaWRlci5zZXR0aW5ncy5idWlsZFBhZ2VyICYmICQuaXNGdW5jdGlvbihzbGlkZXIuc2V0dGluZ3MuYnVpbGRQYWdlcikgPyBzbGlkZXIuc2V0dGluZ3MuYnVpbGRQYWdlcihpKSA6IGkgKyAxO1xuICAgICAgICAvLyBhZGQgdGhlIG1hcmt1cCB0byB0aGUgc3RyaW5nXG4gICAgICAgIHBhZ2VySHRtbCArPSAnPGRpdiBjbGFzcz1cImJ4LXBhZ2VyLWl0ZW1cIj48YSBocmVmPVwiXCIgZGF0YS1zbGlkZS1pbmRleD1cIicgKyBpICsgJ1wiIGNsYXNzPVwiYngtcGFnZXItbGlua1wiPicgKyBsaW5rQ29udGVudCArICc8L2E+PC9kaXY+JztcbiAgICAgIH1cbiAgICAgIC8vIHBvcHVsYXRlIHRoZSBwYWdlciBlbGVtZW50IHdpdGggcGFnZXIgbGlua3NcbiAgICAgIHNsaWRlci5wYWdlckVsLmh0bWwocGFnZXJIdG1sKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyB0aGUgcGFnZXIgdG8gdGhlIGNvbnRyb2xzIGVsZW1lbnRcbiAgICAgKi9cbiAgICB2YXIgYXBwZW5kUGFnZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLnBhZ2VyQ3VzdG9tKSB7XG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgcGFnZXIgRE9NIGVsZW1lbnRcbiAgICAgICAgc2xpZGVyLnBhZ2VyRWwgPSAkKCc8ZGl2IGNsYXNzPVwiYngtcGFnZXJcIiAvPicpO1xuICAgICAgICAvLyBpZiBhIHBhZ2VyIHNlbGVjdG9yIHdhcyBzdXBwbGllZCwgcG9wdWxhdGUgaXQgd2l0aCB0aGUgcGFnZXJcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wYWdlclNlbGVjdG9yKSB7XG4gICAgICAgICAgJChzbGlkZXIuc2V0dGluZ3MucGFnZXJTZWxlY3RvcikuaHRtbChzbGlkZXIucGFnZXJFbCk7XG4gICAgICAgIC8vIGlmIG5vIHBhZ2VyIHNlbGVjdG9yIHdhcyBzdXBwbGllZCwgYWRkIGl0IGFmdGVyIHRoZSB3cmFwcGVyXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLmFkZENsYXNzKCdieC1oYXMtcGFnZXInKS5hcHBlbmQoc2xpZGVyLnBhZ2VyRWwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHBvcHVsYXRlIHRoZSBwYWdlclxuICAgICAgICBwb3B1bGF0ZVBhZ2VyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXIucGFnZXJFbCA9ICQoc2xpZGVyLnNldHRpbmdzLnBhZ2VyQ3VzdG9tKTtcbiAgICAgIH1cbiAgICAgIC8vIGFzc2lnbiB0aGUgcGFnZXIgY2xpY2sgYmluZGluZ1xuICAgICAgc2xpZGVyLnBhZ2VyRWwub24oJ2NsaWNrIHRvdWNoZW5kJywgJ2EnLCBjbGlja1BhZ2VyQmluZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgcHJldiAvIG5leHQgY29udHJvbHMgdG8gdGhlIGNvbnRyb2xzIGVsZW1lbnRcbiAgICAgKi9cbiAgICB2YXIgYXBwZW5kQ29udHJvbHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNsaWRlci5jb250cm9scy5uZXh0ID0gJCgnPGEgY2xhc3M9XCJieC1uZXh0XCIgaHJlZj1cIlwiPicgKyBzbGlkZXIuc2V0dGluZ3MubmV4dFRleHQgKyAnPC9hPicpO1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLnByZXYgPSAkKCc8YSBjbGFzcz1cImJ4LXByZXZcIiBocmVmPVwiXCI+JyArIHNsaWRlci5zZXR0aW5ncy5wcmV2VGV4dCArICc8L2E+Jyk7XG4gICAgICAvLyBiaW5kIGNsaWNrIGFjdGlvbnMgdG8gdGhlIGNvbnRyb2xzXG4gICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5iaW5kKCdjbGljayB0b3VjaGVuZCcsIGNsaWNrTmV4dEJpbmQpO1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLnByZXYuYmluZCgnY2xpY2sgdG91Y2hlbmQnLCBjbGlja1ByZXZCaW5kKTtcbiAgICAgIC8vIGlmIG5leHRTZWxlY3RvciB3YXMgc3VwcGxpZWQsIHBvcHVsYXRlIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm5leHRTZWxlY3Rvcikge1xuICAgICAgICAkKHNsaWRlci5zZXR0aW5ncy5uZXh0U2VsZWN0b3IpLmFwcGVuZChzbGlkZXIuY29udHJvbHMubmV4dCk7XG4gICAgICB9XG4gICAgICAvLyBpZiBwcmV2U2VsZWN0b3Igd2FzIHN1cHBsaWVkLCBwb3B1bGF0ZSBpdFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wcmV2U2VsZWN0b3IpIHtcbiAgICAgICAgJChzbGlkZXIuc2V0dGluZ3MucHJldlNlbGVjdG9yKS5hcHBlbmQoc2xpZGVyLmNvbnRyb2xzLnByZXYpO1xuICAgICAgfVxuICAgICAgLy8gaWYgbm8gY3VzdG9tIHNlbGVjdG9ycyB3ZXJlIHN1cHBsaWVkXG4gICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5uZXh0U2VsZWN0b3IgJiYgIXNsaWRlci5zZXR0aW5ncy5wcmV2U2VsZWN0b3IpIHtcbiAgICAgICAgLy8gYWRkIHRoZSBjb250cm9scyB0byB0aGUgRE9NXG4gICAgICAgIHNsaWRlci5jb250cm9scy5kaXJlY3Rpb25FbCA9ICQoJzxkaXYgY2xhc3M9XCJieC1jb250cm9scy1kaXJlY3Rpb25cIiAvPicpO1xuICAgICAgICAvLyBhZGQgdGhlIGNvbnRyb2wgZWxlbWVudHMgdG8gdGhlIGRpcmVjdGlvbkVsXG4gICAgICAgIHNsaWRlci5jb250cm9scy5kaXJlY3Rpb25FbC5hcHBlbmQoc2xpZGVyLmNvbnRyb2xzLnByZXYpLmFwcGVuZChzbGlkZXIuY29udHJvbHMubmV4dCk7XG4gICAgICAgIC8vIHNsaWRlci52aWV3cG9ydC5hcHBlbmQoc2xpZGVyLmNvbnRyb2xzLmRpcmVjdGlvbkVsKTtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLmFkZENsYXNzKCdieC1oYXMtY29udHJvbHMtZGlyZWN0aW9uJykuYXBwZW5kKHNsaWRlci5jb250cm9scy5kaXJlY3Rpb25FbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgc3RhcnQgLyBzdG9wIGF1dG8gY29udHJvbHMgdG8gdGhlIGNvbnRyb2xzIGVsZW1lbnRcbiAgICAgKi9cbiAgICB2YXIgYXBwZW5kQ29udHJvbHNBdXRvID0gZnVuY3Rpb24oKSB7XG4gICAgICBzbGlkZXIuY29udHJvbHMuc3RhcnQgPSAkKCc8ZGl2IGNsYXNzPVwiYngtY29udHJvbHMtYXV0by1pdGVtXCI+PGEgY2xhc3M9XCJieC1zdGFydFwiIGhyZWY9XCJcIj4nICsgc2xpZGVyLnNldHRpbmdzLnN0YXJ0VGV4dCArICc8L2E+PC9kaXY+Jyk7XG4gICAgICBzbGlkZXIuY29udHJvbHMuc3RvcCA9ICQoJzxkaXYgY2xhc3M9XCJieC1jb250cm9scy1hdXRvLWl0ZW1cIj48YSBjbGFzcz1cImJ4LXN0b3BcIiBocmVmPVwiXCI+JyArIHNsaWRlci5zZXR0aW5ncy5zdG9wVGV4dCArICc8L2E+PC9kaXY+Jyk7XG4gICAgICAvLyBhZGQgdGhlIGNvbnRyb2xzIHRvIHRoZSBET01cbiAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwgPSAkKCc8ZGl2IGNsYXNzPVwiYngtY29udHJvbHMtYXV0b1wiIC8+Jyk7XG4gICAgICAvLyBiaW5kIGNsaWNrIGFjdGlvbnMgdG8gdGhlIGNvbnRyb2xzXG4gICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLm9uKCdjbGljaycsICcuYngtc3RhcnQnLCBjbGlja1N0YXJ0QmluZCk7XG4gICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLm9uKCdjbGljaycsICcuYngtc3RvcCcsIGNsaWNrU3RvcEJpbmQpO1xuICAgICAgLy8gaWYgYXV0b0NvbnRyb2xzQ29tYmluZSwgaW5zZXJ0IG9ubHkgdGhlIFwic3RhcnRcIiBjb250cm9sXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9Db250cm9sc0NvbWJpbmUpIHtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmF1dG9FbC5hcHBlbmQoc2xpZGVyLmNvbnRyb2xzLnN0YXJ0KTtcbiAgICAgIC8vIGlmIGF1dG9Db250cm9sc0NvbWJpbmUgaXMgZmFsc2UsIGluc2VydCBib3RoIGNvbnRyb2xzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLmFwcGVuZChzbGlkZXIuY29udHJvbHMuc3RhcnQpLmFwcGVuZChzbGlkZXIuY29udHJvbHMuc3RvcCk7XG4gICAgICB9XG4gICAgICAvLyBpZiBhdXRvIGNvbnRyb2xzIHNlbGVjdG9yIHdhcyBzdXBwbGllZCwgcG9wdWxhdGUgaXQgd2l0aCB0aGUgY29udHJvbHNcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzU2VsZWN0b3IpIHtcbiAgICAgICAgJChzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzU2VsZWN0b3IpLmh0bWwoc2xpZGVyLmNvbnRyb2xzLmF1dG9FbCk7XG4gICAgICAvLyBpZiBhdXRvIGNvbnRyb2xzIHNlbGVjdG9yIHdhcyBub3Qgc3VwcGxpZWQsIGFkZCBpdCBhZnRlciB0aGUgd3JhcHBlclxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLmFkZENsYXNzKCdieC1oYXMtY29udHJvbHMtYXV0bycpLmFwcGVuZChzbGlkZXIuY29udHJvbHMuYXV0b0VsKTtcbiAgICAgIH1cbiAgICAgIC8vIHVwZGF0ZSB0aGUgYXV0byBjb250cm9sc1xuICAgICAgdXBkYXRlQXV0b0NvbnRyb2xzKHNsaWRlci5zZXR0aW5ncy5hdXRvU3RhcnQgPyAnc3RvcCcgOiAnc3RhcnQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBpbWFnZSBjYXB0aW9ucyB0byB0aGUgRE9NXG4gICAgICovXG4gICAgdmFyIGFwcGVuZENhcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBjeWNsZSB0aHJvdWdoIGVhY2ggY2hpbGRcbiAgICAgIHNsaWRlci5jaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIC8vIGdldCB0aGUgaW1hZ2UgdGl0bGUgYXR0cmlidXRlXG4gICAgICAgIHZhciB0aXRsZSA9ICQodGhpcykuZmluZCgnaW1nOmZpcnN0JykuYXR0cigndGl0bGUnKTtcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBjYXB0aW9uXG4gICAgICAgIGlmICh0aXRsZSAhPT0gdW5kZWZpbmVkICYmICgnJyArIHRpdGxlKS5sZW5ndGgpIHtcbiAgICAgICAgICAkKHRoaXMpLmFwcGVuZCgnPGRpdiBjbGFzcz1cImJ4LWNhcHRpb25cIj48c3Bhbj4nICsgdGl0bGUgKyAnPC9zcGFuPjwvZGl2PicpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgbmV4dCBiaW5kaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjbGlja05leHRCaW5kID0gZnVuY3Rpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHNsaWRlci5jb250cm9scy5lbC5oYXNDbGFzcygnZGlzYWJsZWQnKSkgeyByZXR1cm47IH1cbiAgICAgIC8vIGlmIGF1dG8gc2hvdyBpcyBydW5uaW5nLCBzdG9wIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG8gJiYgc2xpZGVyLnNldHRpbmdzLnN0b3BBdXRvT25DbGljaykgeyBlbC5zdG9wQXV0bygpOyB9XG4gICAgICBlbC5nb1RvTmV4dFNsaWRlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsaWNrIHByZXYgYmluZGluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIGUgKGV2ZW50KVxuICAgICAqICAtIERPTSBldmVudCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgY2xpY2tQcmV2QmluZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChzbGlkZXIuY29udHJvbHMuZWwuaGFzQ2xhc3MoJ2Rpc2FibGVkJykpIHsgcmV0dXJuOyB9XG4gICAgICAvLyBpZiBhdXRvIHNob3cgaXMgcnVubmluZywgc3RvcCBpdFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvICYmIHNsaWRlci5zZXR0aW5ncy5zdG9wQXV0b09uQ2xpY2spIHsgZWwuc3RvcEF1dG8oKTsgfVxuICAgICAgZWwuZ29Ub1ByZXZTbGlkZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBzdGFydCBiaW5kaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjbGlja1N0YXJ0QmluZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGVsLnN0YXJ0QXV0bygpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBzdG9wIGJpbmRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIGNsaWNrU3RvcEJpbmQgPSBmdW5jdGlvbihlKSB7XG4gICAgICBlbC5zdG9wQXV0bygpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBwYWdlciBiaW5kaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjbGlja1BhZ2VyQmluZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwYWdlckxpbmssIHBhZ2VySW5kZXg7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLmVsLmhhc0NsYXNzKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGlmIGF1dG8gc2hvdyBpcyBydW5uaW5nLCBzdG9wIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG8gICYmIHNsaWRlci5zZXR0aW5ncy5zdG9wQXV0b09uQ2xpY2spIHsgZWwuc3RvcEF1dG8oKTsgfVxuICAgICAgcGFnZXJMaW5rID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgaWYgKHBhZ2VyTGluay5hdHRyKCdkYXRhLXNsaWRlLWluZGV4JykgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwYWdlckluZGV4ID0gcGFyc2VJbnQocGFnZXJMaW5rLmF0dHIoJ2RhdGEtc2xpZGUtaW5kZXgnKSk7XG4gICAgICAgIC8vIGlmIGNsaWNrZWQgcGFnZXIgbGluayBpcyBub3QgYWN0aXZlLCBjb250aW51ZSB3aXRoIHRoZSBnb1RvU2xpZGUgY2FsbFxuICAgICAgICBpZiAocGFnZXJJbmRleCAhPT0gc2xpZGVyLmFjdGl2ZS5pbmRleCkgeyBlbC5nb1RvU2xpZGUocGFnZXJJbmRleCk7IH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcGFnZXIgbGlua3Mgd2l0aCBhbiBhY3RpdmUgY2xhc3NcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzbGlkZUluZGV4IChpbnQpXG4gICAgICogIC0gaW5kZXggb2Ygc2xpZGUgdG8gbWFrZSBhY3RpdmVcbiAgICAgKi9cbiAgICB2YXIgdXBkYXRlUGFnZXJBY3RpdmUgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG4gICAgICAvLyBpZiBcInNob3J0XCIgcGFnZXIgdHlwZVxuICAgICAgdmFyIGxlbiA9IHNsaWRlci5jaGlsZHJlbi5sZW5ndGg7IC8vIG5iIG9mIGNoaWxkcmVuXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnBhZ2VyVHlwZSA9PT0gJ3Nob3J0Jykge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyA+IDEpIHtcbiAgICAgICAgICBsZW4gPSBNYXRoLmNlaWwoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAvIHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIHNsaWRlci5wYWdlckVsLmh0bWwoKHNsaWRlSW5kZXggKyAxKSArIHNsaWRlci5zZXR0aW5ncy5wYWdlclNob3J0U2VwYXJhdG9yICsgbGVuKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gcmVtb3ZlIGFsbCBwYWdlciBhY3RpdmUgY2xhc3Nlc1xuICAgICAgc2xpZGVyLnBhZ2VyRWwuZmluZCgnYScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgIC8vIGFwcGx5IHRoZSBhY3RpdmUgY2xhc3MgZm9yIGFsbCBwYWdlcnNcbiAgICAgIHNsaWRlci5wYWdlckVsLmVhY2goZnVuY3Rpb24oaSwgZWwpIHsgJChlbCkuZmluZCgnYScpLmVxKHNsaWRlSW5kZXgpLmFkZENsYXNzKCdhY3RpdmUnKTsgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIG5lZWRlZCBhY3Rpb25zIGFmdGVyIGEgc2xpZGUgdHJhbnNpdGlvblxuICAgICAqL1xuICAgIHZhciB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaWYgaW5maW5pdGUgbG9vcCBpcyB0cnVlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSAnJztcbiAgICAgICAgLy8gZmlyc3Qgc2xpZGVcbiAgICAgICAgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IDApIHtcbiAgICAgICAgICAvLyBzZXQgdGhlIG5ldyBwb3NpdGlvblxuICAgICAgICAgIHBvc2l0aW9uID0gc2xpZGVyLmNoaWxkcmVuLmVxKDApLnBvc2l0aW9uKCk7XG4gICAgICAgIC8vIGNhcm91c2VsLCBsYXN0IHNsaWRlXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gZ2V0UGFnZXJRdHkoKSAtIDEgJiYgc2xpZGVyLmNhcm91c2VsKSB7XG4gICAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEoKGdldFBhZ2VyUXR5KCkgLSAxKSAqIGdldE1vdmVCeSgpKS5wb3NpdGlvbigpO1xuICAgICAgICAvLyBsYXN0IHNsaWRlXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBwb3NpdGlvbiA9IHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMSkucG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykgeyBzZXRQb3NpdGlvblByb3BlcnR5KC1wb3NpdGlvbi5sZWZ0LCAncmVzZXQnLCAwKTsgfVxuICAgICAgICAgIGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7IHNldFBvc2l0aW9uUHJvcGVydHkoLXBvc2l0aW9uLnRvcCwgJ3Jlc2V0JywgMCk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gZGVjbGFyZSB0aGF0IHRoZSB0cmFuc2l0aW9uIGlzIGNvbXBsZXRlXG4gICAgICBzbGlkZXIud29ya2luZyA9IGZhbHNlO1xuICAgICAgLy8gb25TbGlkZUFmdGVyIGNhbGxiYWNrXG4gICAgICBzbGlkZXIuc2V0dGluZ3Mub25TbGlkZUFmdGVyLmNhbGwoZWwsIHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuYWN0aXZlLmluZGV4KSwgc2xpZGVyLm9sZEluZGV4LCBzbGlkZXIuYWN0aXZlLmluZGV4KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgYXV0byBjb250cm9scyBzdGF0ZSAoZWl0aGVyIGFjdGl2ZSwgb3IgY29tYmluZWQgc3dpdGNoKVxuICAgICAqXG4gICAgICogQHBhcmFtIHN0YXRlIChzdHJpbmcpIFwic3RhcnRcIiwgXCJzdG9wXCJcbiAgICAgKiAgLSB0aGUgbmV3IHN0YXRlIG9mIHRoZSBhdXRvIHNob3dcbiAgICAgKi9cbiAgICB2YXIgdXBkYXRlQXV0b0NvbnRyb2xzID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIC8vIGlmIGF1dG9Db250cm9sc0NvbWJpbmUgaXMgdHJ1ZSwgcmVwbGFjZSB0aGUgY3VycmVudCBjb250cm9sIHdpdGggdGhlIG5ldyBzdGF0ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHNDb21iaW5lKSB7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwuaHRtbChzbGlkZXIuY29udHJvbHNbc3RhdGVdKTtcbiAgICAgIC8vIGlmIGF1dG9Db250cm9sc0NvbWJpbmUgaXMgZmFsc2UsIGFwcGx5IHRoZSBcImFjdGl2ZVwiIGNsYXNzIHRvIHRoZSBhcHByb3ByaWF0ZSBjb250cm9sXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLmZpbmQoJ2EnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwuZmluZCgnYTpub3QoLmJ4LScgKyBzdGF0ZSArICcpJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBkaXJlY3Rpb24gY29udHJvbHMgKGNoZWNrcyBpZiBlaXRoZXIgc2hvdWxkIGJlIGhpZGRlbilcbiAgICAgKi9cbiAgICB2YXIgdXBkYXRlRGlyZWN0aW9uQ29udHJvbHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChnZXRQYWdlclF0eSgpID09PSAxKSB7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5wcmV2LmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgIH0gZWxzZSBpZiAoIXNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3AgJiYgc2xpZGVyLnNldHRpbmdzLmhpZGVDb250cm9sT25FbmQpIHtcbiAgICAgICAgLy8gaWYgZmlyc3Qgc2xpZGVcbiAgICAgICAgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IDApIHtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMucHJldi5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgLy8gaWYgbGFzdCBzbGlkZVxuICAgICAgICB9IGVsc2UgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IGdldFBhZ2VyUXR5KCkgLSAxKSB7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLm5leHQuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLnByZXYucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIC8vIGlmIGFueSBzbGlkZSBpbiB0aGUgbWlkZGxlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLnByZXYucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLm5leHQucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXHQvKiBhdXRvIHN0YXJ0IGFuZCBzdG9wIGZ1bmN0aW9ucyAqL1xuXHR2YXIgd2luZG93Rm9jdXNIYW5kbGVyID0gZnVuY3Rpb24oKSB7IGVsLnN0YXJ0QXV0bygpOyB9O1xuXHR2YXIgd2luZG93Qmx1ckhhbmRsZXIgPSBmdW5jdGlvbigpIHsgZWwuc3RvcEF1dG8oKTsgfTtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYXV0byBwcm9jZXNzXG4gICAgICovXG4gICAgdmFyIGluaXRBdXRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpZiBhdXRvRGVsYXkgd2FzIHN1cHBsaWVkLCBsYXVuY2ggdGhlIGF1dG8gc2hvdyB1c2luZyBhIHNldFRpbWVvdXQoKSBjYWxsXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9EZWxheSA+IDApIHtcbiAgICAgICAgdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGVsLnN0YXJ0QXV0bywgc2xpZGVyLnNldHRpbmdzLmF1dG9EZWxheSk7XG4gICAgICAvLyBpZiBhdXRvRGVsYXkgd2FzIG5vdCBzdXBwbGllZCwgc3RhcnQgdGhlIGF1dG8gc2hvdyBub3JtYWxseVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc3RhcnRBdXRvKCk7XG5cbiAgICAgICAgLy9hZGQgZm9jdXMgYW5kIGJsdXIgZXZlbnRzIHRvIGVuc3VyZSBpdHMgcnVubmluZyBpZiB0aW1lb3V0IGdldHMgcGF1c2VkXG4gICAgICAgICQod2luZG93KS5mb2N1cyh3aW5kb3dGb2N1c0hhbmRsZXIpLmJsdXIod2luZG93Qmx1ckhhbmRsZXIpO1xuICAgICAgfVxuICAgICAgLy8gaWYgYXV0b0hvdmVyIGlzIHJlcXVlc3RlZFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvSG92ZXIpIHtcbiAgICAgICAgLy8gb24gZWwgaG92ZXJcbiAgICAgICAgZWwuaG92ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gaWYgdGhlIGF1dG8gc2hvdyBpcyBjdXJyZW50bHkgcGxheWluZyAoaGFzIGFuIGFjdGl2ZSBpbnRlcnZhbClcbiAgICAgICAgICBpZiAoc2xpZGVyLmludGVydmFsKSB7XG4gICAgICAgICAgICAvLyBzdG9wIHRoZSBhdXRvIHNob3cgYW5kIHBhc3MgdHJ1ZSBhcmd1bWVudCB3aGljaCB3aWxsIHByZXZlbnQgY29udHJvbCB1cGRhdGVcbiAgICAgICAgICAgIGVsLnN0b3BBdXRvKHRydWUpO1xuICAgICAgICAgICAgLy8gY3JlYXRlIGEgbmV3IGF1dG9QYXVzZWQgdmFsdWUgd2hpY2ggd2lsbCBiZSB1c2VkIGJ5IHRoZSByZWxhdGl2ZSBcIm1vdXNlb3V0XCIgZXZlbnRcbiAgICAgICAgICAgIHNsaWRlci5hdXRvUGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIGlmIHRoZSBhdXRvUGF1c2VkIHZhbHVlIHdhcyBjcmVhdGVkIGJlIHRoZSBwcmlvciBcIm1vdXNlb3ZlclwiIGV2ZW50XG4gICAgICAgICAgaWYgKHNsaWRlci5hdXRvUGF1c2VkKSB7XG4gICAgICAgICAgICAvLyBzdGFydCB0aGUgYXV0byBzaG93IGFuZCBwYXNzIHRydWUgYXJndW1lbnQgd2hpY2ggd2lsbCBwcmV2ZW50IGNvbnRyb2wgdXBkYXRlXG4gICAgICAgICAgICBlbC5zdGFydEF1dG8odHJ1ZSk7XG4gICAgICAgICAgICAvLyByZXNldCB0aGUgYXV0b1BhdXNlZCB2YWx1ZVxuICAgICAgICAgICAgc2xpZGVyLmF1dG9QYXVzZWQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSB0aWNrZXIgcHJvY2Vzc1xuICAgICAqL1xuICAgIHZhciBpbml0VGlja2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc3RhcnRQb3NpdGlvbiA9IDAsXG4gICAgICBwb3NpdGlvbiwgdHJhbnNmb3JtLCB2YWx1ZSwgaWR4LCByYXRpbywgcHJvcGVydHksIG5ld1NwZWVkLCB0b3RhbERpbWVucztcbiAgICAgIC8vIGlmIGF1dG9EaXJlY3Rpb24gaXMgXCJuZXh0XCIsIGFwcGVuZCBhIGNsb25lIG9mIHRoZSBlbnRpcmUgc2xpZGVyXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9EaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBlbC5hcHBlbmQoc2xpZGVyLmNoaWxkcmVuLmNsb25lKCkuYWRkQ2xhc3MoJ2J4LWNsb25lJykpO1xuICAgICAgLy8gaWYgYXV0b0RpcmVjdGlvbiBpcyBcInByZXZcIiwgcHJlcGVuZCBhIGNsb25lIG9mIHRoZSBlbnRpcmUgc2xpZGVyLCBhbmQgc2V0IHRoZSBsZWZ0IHBvc2l0aW9uXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5wcmVwZW5kKHNsaWRlci5jaGlsZHJlbi5jbG9uZSgpLmFkZENsYXNzKCdieC1jbG9uZScpKTtcbiAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZmlyc3QoKS5wb3NpdGlvbigpO1xuICAgICAgICBzdGFydFBvc2l0aW9uID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/IC1wb3NpdGlvbi5sZWZ0IDogLXBvc2l0aW9uLnRvcDtcbiAgICAgIH1cbiAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkoc3RhcnRQb3NpdGlvbiwgJ3Jlc2V0JywgMCk7XG4gICAgICAvLyBkbyBub3QgYWxsb3cgY29udHJvbHMgaW4gdGlja2VyIG1vZGVcbiAgICAgIHNsaWRlci5zZXR0aW5ncy5wYWdlciA9IGZhbHNlO1xuICAgICAgc2xpZGVyLnNldHRpbmdzLmNvbnRyb2xzID0gZmFsc2U7XG4gICAgICBzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzID0gZmFsc2U7XG4gICAgICAvLyBpZiBhdXRvSG92ZXIgaXMgcmVxdWVzdGVkXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnRpY2tlckhvdmVyKSB7XG4gICAgICAgIGlmIChzbGlkZXIudXNpbmdDU1MpIHtcbiAgICAgICAgICBpZHggPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gNCA6IDU7XG4gICAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmhvdmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdHJhbnNmb3JtID0gZWwuY3NzKCctJyArIHNsaWRlci5jc3NQcmVmaXggKyAnLXRyYW5zZm9ybScpO1xuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHRyYW5zZm9ybS5zcGxpdCgnLCcpW2lkeF0pO1xuICAgICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSh2YWx1ZSwgJ3Jlc2V0JywgMCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0b3RhbERpbWVucyA9IDA7XG4gICAgICAgICAgICBzbGlkZXIuY2hpbGRyZW4uZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICB0b3RhbERpbWVucyArPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gJCh0aGlzKS5vdXRlcldpZHRoKHRydWUpIDogJCh0aGlzKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBzcGVlZCByYXRpbyAodXNlZCB0byBkZXRlcm1pbmUgdGhlIG5ldyBzcGVlZCB0byBmaW5pc2ggdGhlIHBhdXNlZCBhbmltYXRpb24pXG4gICAgICAgICAgICByYXRpbyA9IHNsaWRlci5zZXR0aW5ncy5zcGVlZCAvIHRvdGFsRGltZW5zO1xuICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3BlcnR5IHRvIHVzZVxuICAgICAgICAgICAgcHJvcGVydHkgPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIG5ldyBzcGVlZFxuICAgICAgICAgICAgbmV3U3BlZWQgPSByYXRpbyAqICh0b3RhbERpbWVucyAtIChNYXRoLmFicyhwYXJzZUludCh2YWx1ZSkpKSk7XG4gICAgICAgICAgICB0aWNrZXJMb29wKG5ld1NwZWVkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBvbiBlbCBob3ZlclxuICAgICAgICAgIHNsaWRlci52aWV3cG9ydC5ob3ZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVsLnN0b3AoKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgdG90YWwgd2lkdGggb2YgY2hpbGRyZW4gKHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBzcGVlZCByYXRpbylcbiAgICAgICAgICAgIHRvdGFsRGltZW5zID0gMDtcbiAgICAgICAgICAgIHNsaWRlci5jaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgIHRvdGFsRGltZW5zICs9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAkKHRoaXMpLm91dGVyV2lkdGgodHJ1ZSkgOiAkKHRoaXMpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIHNwZWVkIHJhdGlvICh1c2VkIHRvIGRldGVybWluZSB0aGUgbmV3IHNwZWVkIHRvIGZpbmlzaCB0aGUgcGF1c2VkIGFuaW1hdGlvbilcbiAgICAgICAgICAgIHJhdGlvID0gc2xpZGVyLnNldHRpbmdzLnNwZWVkIC8gdG90YWxEaW1lbnM7XG4gICAgICAgICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJvcGVydHkgdG8gdXNlXG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgbmV3IHNwZWVkXG4gICAgICAgICAgICBuZXdTcGVlZCA9IHJhdGlvICogKHRvdGFsRGltZW5zIC0gKE1hdGguYWJzKHBhcnNlSW50KGVsLmNzcyhwcm9wZXJ0eSkpKSkpO1xuICAgICAgICAgICAgdGlja2VyTG9vcChuZXdTcGVlZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIHN0YXJ0IHRoZSB0aWNrZXIgbG9vcFxuICAgICAgdGlja2VyTG9vcCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSdW5zIGEgY29udGludW91cyBsb29wLCBuZXdzIHRpY2tlci1zdHlsZVxuICAgICAqL1xuICAgIHZhciB0aWNrZXJMb29wID0gZnVuY3Rpb24ocmVzdW1lU3BlZWQpIHtcbiAgICAgIHZhciBzcGVlZCA9IHJlc3VtZVNwZWVkID8gcmVzdW1lU3BlZWQgOiBzbGlkZXIuc2V0dGluZ3Muc3BlZWQsXG4gICAgICBwb3NpdGlvbiA9IHtsZWZ0OiAwLCB0b3A6IDB9LFxuICAgICAgcmVzZXQgPSB7bGVmdDogMCwgdG9wOiAwfSxcbiAgICAgIGFuaW1hdGVQcm9wZXJ0eSwgcmVzZXRWYWx1ZSwgcGFyYW1zO1xuXG4gICAgICAvLyBpZiBcIm5leHRcIiBhbmltYXRlIGxlZnQgcG9zaXRpb24gdG8gbGFzdCBjaGlsZCwgdGhlbiByZXNldCBsZWZ0IHRvIDBcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0RpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIHBvc2l0aW9uID0gZWwuZmluZCgnLmJ4LWNsb25lJykuZmlyc3QoKS5wb3NpdGlvbigpO1xuICAgICAgLy8gaWYgXCJwcmV2XCIgYW5pbWF0ZSBsZWZ0IHBvc2l0aW9uIHRvIDAsIHRoZW4gcmVzZXQgbGVmdCB0byBmaXJzdCBub24tY2xvbmUgY2hpbGRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc2V0ID0gc2xpZGVyLmNoaWxkcmVuLmZpcnN0KCkucG9zaXRpb24oKTtcbiAgICAgIH1cbiAgICAgIGFuaW1hdGVQcm9wZXJ0eSA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAtcG9zaXRpb24ubGVmdCA6IC1wb3NpdGlvbi50b3A7XG4gICAgICByZXNldFZhbHVlID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/IC1yZXNldC5sZWZ0IDogLXJlc2V0LnRvcDtcbiAgICAgIHBhcmFtcyA9IHtyZXNldFZhbHVlOiByZXNldFZhbHVlfTtcbiAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkoYW5pbWF0ZVByb3BlcnR5LCAndGlja2VyJywgc3BlZWQsIHBhcmFtcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGVsIGlzIG9uIHNjcmVlblxuICAgICAqL1xuICAgIHZhciBpc09uU2NyZWVuID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgIHZhciB3aW4gPSAkKHdpbmRvdyksXG4gICAgICB2aWV3cG9ydCA9IHtcbiAgICAgICAgdG9wOiB3aW4uc2Nyb2xsVG9wKCksXG4gICAgICAgIGxlZnQ6IHdpbi5zY3JvbGxMZWZ0KClcbiAgICAgIH0sXG4gICAgICBib3VuZHMgPSBlbC5vZmZzZXQoKTtcblxuICAgICAgdmlld3BvcnQucmlnaHQgPSB2aWV3cG9ydC5sZWZ0ICsgd2luLndpZHRoKCk7XG4gICAgICB2aWV3cG9ydC5ib3R0b20gPSB2aWV3cG9ydC50b3AgKyB3aW4uaGVpZ2h0KCk7XG4gICAgICBib3VuZHMucmlnaHQgPSBib3VuZHMubGVmdCArIGVsLm91dGVyV2lkdGgoKTtcbiAgICAgIGJvdW5kcy5ib3R0b20gPSBib3VuZHMudG9wICsgZWwub3V0ZXJIZWlnaHQoKTtcblxuICAgICAgcmV0dXJuICghKHZpZXdwb3J0LnJpZ2h0IDwgYm91bmRzLmxlZnQgfHwgdmlld3BvcnQubGVmdCA+IGJvdW5kcy5yaWdodCB8fCB2aWV3cG9ydC5ib3R0b20gPCBib3VuZHMudG9wIHx8IHZpZXdwb3J0LnRvcCA+IGJvdW5kcy5ib3R0b20pKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMga2V5Ym9hcmQgZXZlbnRzXG4gICAgICovXG4gICAgdmFyIGtleVByZXNzID0gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIGFjdGl2ZUVsZW1lbnRUYWcgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgIHRhZ0ZpbHRlcnMgPSAnaW5wdXR8dGV4dGFyZWEnLFxuICAgICAgcCA9IG5ldyBSZWdFeHAoYWN0aXZlRWxlbWVudFRhZyxbJ2knXSksXG4gICAgICByZXN1bHQgPSBwLmV4ZWModGFnRmlsdGVycyk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBpc09uU2NyZWVuKGVsKSkge1xuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzOSkge1xuICAgICAgICAgIGNsaWNrTmV4dEJpbmQoZSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcbiAgICAgICAgICBjbGlja1ByZXZCaW5kKGUpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0b3VjaCBldmVudHNcbiAgICAgKi9cbiAgICB2YXIgaW5pdFRvdWNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpbml0aWFsaXplIG9iamVjdCB0byBjb250YWluIGFsbCB0b3VjaCB2YWx1ZXNcbiAgICAgIHNsaWRlci50b3VjaCA9IHtcbiAgICAgICAgc3RhcnQ6IHt4OiAwLCB5OiAwfSxcbiAgICAgICAgZW5kOiB7eDogMCwgeTogMH1cbiAgICAgIH07XG4gICAgICBzbGlkZXIudmlld3BvcnQuYmluZCgndG91Y2hzdGFydCBNU1BvaW50ZXJEb3duIHBvaW50ZXJkb3duJywgb25Ub3VjaFN0YXJ0KTtcblxuICAgICAgLy9mb3IgYnJvd3NlcnMgdGhhdCBoYXZlIGltcGxlbWVudGVkIHBvaW50ZXIgZXZlbnRzIGFuZCBmaXJlIGEgY2xpY2sgYWZ0ZXJcbiAgICAgIC8vZXZlcnkgcG9pbnRlcnVwIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciBwb2ludGVydXAgaXMgb24gc2FtZSBzY3JlZW4gbG9jYXRpb24gYXMgcG9pbnRlcmRvd24gb3Igbm90XG4gICAgICBzbGlkZXIudmlld3BvcnQub24oJ2NsaWNrJywgJy5ieHNsaWRlciBhJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoc2xpZGVyLnZpZXdwb3J0Lmhhc0NsYXNzKCdjbGljay1kaXNhYmxlZCcpKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHNsaWRlci52aWV3cG9ydC5yZW1vdmVDbGFzcygnY2xpY2stZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIFwidG91Y2hzdGFydFwiXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBvblRvdWNoU3RhcnQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAvL2Rpc2FibGUgc2xpZGVyIGNvbnRyb2xzIHdoaWxlIHVzZXIgaXMgaW50ZXJhY3Rpbmcgd2l0aCBzbGlkZXMgdG8gYXZvaWQgc2xpZGVyIGZyZWV6ZSB0aGF0IGhhcHBlbnMgb24gdG91Y2ggZGV2aWNlcyB3aGVuIGEgc2xpZGUgc3dpcGUgaGFwcGVucyBpbW1lZGlhdGVseSBhZnRlciBpbnRlcmFjdGluZyB3aXRoIHNsaWRlciBjb250cm9sc1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuXG4gICAgICBpZiAoc2xpZGVyLndvcmtpbmcpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuZWwucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZWNvcmQgdGhlIG9yaWdpbmFsIHBvc2l0aW9uIHdoZW4gdG91Y2ggc3RhcnRzXG4gICAgICAgIHNsaWRlci50b3VjaC5vcmlnaW5hbFBvcyA9IGVsLnBvc2l0aW9uKCk7XG4gICAgICAgIHZhciBvcmlnID0gZS5vcmlnaW5hbEV2ZW50LFxuICAgICAgICB0b3VjaFBvaW50cyA9ICh0eXBlb2Ygb3JpZy5jaGFuZ2VkVG91Y2hlcyAhPT0gJ3VuZGVmaW5lZCcpID8gb3JpZy5jaGFuZ2VkVG91Y2hlcyA6IFtvcmlnXTtcbiAgICAgICAgLy8gcmVjb3JkIHRoZSBzdGFydGluZyB0b3VjaCB4LCB5IGNvb3JkaW5hdGVzXG4gICAgICAgIHNsaWRlci50b3VjaC5zdGFydC54ID0gdG91Y2hQb2ludHNbMF0ucGFnZVg7XG4gICAgICAgIHNsaWRlci50b3VjaC5zdGFydC55ID0gdG91Y2hQb2ludHNbMF0ucGFnZVk7XG5cbiAgICAgICAgaWYgKHNsaWRlci52aWV3cG9ydC5nZXQoMCkuc2V0UG9pbnRlckNhcHR1cmUpIHtcbiAgICAgICAgICBzbGlkZXIucG9pbnRlcklkID0gb3JpZy5wb2ludGVySWQ7XG4gICAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmdldCgwKS5zZXRQb2ludGVyQ2FwdHVyZShzbGlkZXIucG9pbnRlcklkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBiaW5kIGEgXCJ0b3VjaG1vdmVcIiBldmVudCB0byB0aGUgdmlld3BvcnRcbiAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmJpbmQoJ3RvdWNobW92ZSBNU1BvaW50ZXJNb3ZlIHBvaW50ZXJtb3ZlJywgb25Ub3VjaE1vdmUpO1xuICAgICAgICAvLyBiaW5kIGEgXCJ0b3VjaGVuZFwiIGV2ZW50IHRvIHRoZSB2aWV3cG9ydFxuICAgICAgICBzbGlkZXIudmlld3BvcnQuYmluZCgndG91Y2hlbmQgTVNQb2ludGVyVXAgcG9pbnRlcnVwJywgb25Ub3VjaEVuZCk7XG4gICAgICAgIHNsaWRlci52aWV3cG9ydC5iaW5kKCdNU1BvaW50ZXJDYW5jZWwgcG9pbnRlcmNhbmNlbCcsIG9uUG9pbnRlckNhbmNlbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbmNlbCBQb2ludGVyIGZvciBXaW5kb3dzIFBob25lXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBvblBvaW50ZXJDYW5jZWwgPSBmdW5jdGlvbihlKSB7XG4gICAgICAvKiBvblBvaW50ZXJDYW5jZWwgaGFuZGxlciBpcyBuZWVkZWQgdG8gZGVhbCB3aXRoIHNpdHVhdGlvbnMgd2hlbiBhIHRvdWNoZW5kXG4gICAgICBkb2Vzbid0IGZpcmUgYWZ0ZXIgYSB0b3VjaHN0YXJ0ICh0aGlzIGhhcHBlbnMgb24gd2luZG93cyBwaG9uZXMgb25seSkgKi9cbiAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkoc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zLmxlZnQsICdyZXNldCcsIDApO1xuXG4gICAgICAvL3JlbW92ZSBoYW5kbGVyc1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgc2xpZGVyLnZpZXdwb3J0LnVuYmluZCgnTVNQb2ludGVyQ2FuY2VsIHBvaW50ZXJjYW5jZWwnLCBvblBvaW50ZXJDYW5jZWwpO1xuICAgICAgc2xpZGVyLnZpZXdwb3J0LnVuYmluZCgndG91Y2htb3ZlIE1TUG9pbnRlck1vdmUgcG9pbnRlcm1vdmUnLCBvblRvdWNoTW92ZSk7XG4gICAgICBzbGlkZXIudmlld3BvcnQudW5iaW5kKCd0b3VjaGVuZCBNU1BvaW50ZXJVcCBwb2ludGVydXAnLCBvblRvdWNoRW5kKTtcbiAgICAgIGlmIChzbGlkZXIudmlld3BvcnQuZ2V0KDApLnJlbGVhc2VQb2ludGVyQ2FwdHVyZSkge1xuICAgICAgICBzbGlkZXIudmlld3BvcnQuZ2V0KDApLnJlbGVhc2VQb2ludGVyQ2FwdHVyZShzbGlkZXIucG9pbnRlcklkKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgXCJ0b3VjaG1vdmVcIlxuICAgICAqXG4gICAgICogQHBhcmFtIGUgKGV2ZW50KVxuICAgICAqICAtIERPTSBldmVudCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgb25Ub3VjaE1vdmUgPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgb3JpZyA9IGUub3JpZ2luYWxFdmVudCxcbiAgICAgIHRvdWNoUG9pbnRzID0gKHR5cGVvZiBvcmlnLmNoYW5nZWRUb3VjaGVzICE9PSAndW5kZWZpbmVkJykgPyBvcmlnLmNoYW5nZWRUb3VjaGVzIDogW29yaWddLFxuICAgICAgLy8gaWYgc2Nyb2xsaW5nIG9uIHkgYXhpcywgZG8gbm90IHByZXZlbnQgZGVmYXVsdFxuICAgICAgeE1vdmVtZW50ID0gTWF0aC5hYnModG91Y2hQb2ludHNbMF0ucGFnZVggLSBzbGlkZXIudG91Y2guc3RhcnQueCksXG4gICAgICB5TW92ZW1lbnQgPSBNYXRoLmFicyh0b3VjaFBvaW50c1swXS5wYWdlWSAtIHNsaWRlci50b3VjaC5zdGFydC55KSxcbiAgICAgIHZhbHVlID0gMCxcbiAgICAgIGNoYW5nZSA9IDA7XG5cbiAgICAgIC8vIHggYXhpcyBzd2lwZVxuICAgICAgaWYgKCh4TW92ZW1lbnQgKiAzKSA+IHlNb3ZlbWVudCAmJiBzbGlkZXIuc2V0dGluZ3MucHJldmVudERlZmF1bHRTd2lwZVgpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8geSBheGlzIHN3aXBlXG4gICAgICB9IGVsc2UgaWYgKCh5TW92ZW1lbnQgKiAzKSA+IHhNb3ZlbWVudCAmJiBzbGlkZXIuc2V0dGluZ3MucHJldmVudERlZmF1bHRTd2lwZVkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlICE9PSAnZmFkZScgJiYgc2xpZGVyLnNldHRpbmdzLm9uZVRvT25lVG91Y2gpIHtcbiAgICAgICAgLy8gaWYgaG9yaXpvbnRhbCwgZHJhZyBhbG9uZyB4IGF4aXNcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBjaGFuZ2UgPSB0b3VjaFBvaW50c1swXS5wYWdlWCAtIHNsaWRlci50b3VjaC5zdGFydC54O1xuICAgICAgICAgIHZhbHVlID0gc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zLmxlZnQgKyBjaGFuZ2U7XG4gICAgICAgIC8vIGlmIHZlcnRpY2FsLCBkcmFnIGFsb25nIHkgYXhpc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZSA9IHRvdWNoUG9pbnRzWzBdLnBhZ2VZIC0gc2xpZGVyLnRvdWNoLnN0YXJ0Lnk7XG4gICAgICAgICAgdmFsdWUgPSBzbGlkZXIudG91Y2gub3JpZ2luYWxQb3MudG9wICsgY2hhbmdlO1xuICAgICAgICB9XG4gICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkodmFsdWUsICdyZXNldCcsIDApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBcInRvdWNoZW5kXCJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIG9uVG91Y2hFbmQgPSBmdW5jdGlvbihlKSB7XG4gICAgICBzbGlkZXIudmlld3BvcnQudW5iaW5kKCd0b3VjaG1vdmUgTVNQb2ludGVyTW92ZSBwb2ludGVybW92ZScsIG9uVG91Y2hNb3ZlKTtcbiAgICAgIC8vZW5hYmxlIHNsaWRlciBjb250cm9scyBhcyBzb29uIGFzIHVzZXIgc3RvcHMgaW50ZXJhY2luZyB3aXRoIHNsaWRlc1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgdmFyIG9yaWcgICAgPSBlLm9yaWdpbmFsRXZlbnQsXG4gICAgICB0b3VjaFBvaW50cyA9ICh0eXBlb2Ygb3JpZy5jaGFuZ2VkVG91Y2hlcyAhPT0gJ3VuZGVmaW5lZCcpID8gb3JpZy5jaGFuZ2VkVG91Y2hlcyA6IFtvcmlnXSxcbiAgICAgIHZhbHVlICAgICAgID0gMCxcbiAgICAgIGRpc3RhbmNlICAgID0gMDtcbiAgICAgIC8vIHJlY29yZCBlbmQgeCwgeSBwb3NpdGlvbnNcbiAgICAgIHNsaWRlci50b3VjaC5lbmQueCA9IHRvdWNoUG9pbnRzWzBdLnBhZ2VYO1xuICAgICAgc2xpZGVyLnRvdWNoLmVuZC55ID0gdG91Y2hQb2ludHNbMF0ucGFnZVk7XG4gICAgICAvLyBpZiBmYWRlIG1vZGUsIGNoZWNrIGlmIGFic29sdXRlIHggZGlzdGFuY2UgY2xlYXJzIHRoZSB0aHJlc2hvbGRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2ZhZGUnKSB7XG4gICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoc2xpZGVyLnRvdWNoLnN0YXJ0LnggLSBzbGlkZXIudG91Y2guZW5kLngpO1xuICAgICAgICBpZiAoZGlzdGFuY2UgPj0gc2xpZGVyLnNldHRpbmdzLnN3aXBlVGhyZXNob2xkKSB7XG4gICAgICAgICAgaWYgKHNsaWRlci50b3VjaC5zdGFydC54ID4gc2xpZGVyLnRvdWNoLmVuZC54KSB7XG4gICAgICAgICAgICBlbC5nb1RvTmV4dFNsaWRlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsLmdvVG9QcmV2U2xpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWwuc3RvcEF1dG8oKTtcbiAgICAgICAgfVxuICAgICAgLy8gbm90IGZhZGUgbW9kZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY2FsY3VsYXRlIGRpc3RhbmNlIGFuZCBlbCdzIGFuaW1hdGUgcHJvcGVydHlcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBkaXN0YW5jZSA9IHNsaWRlci50b3VjaC5lbmQueCAtIHNsaWRlci50b3VjaC5zdGFydC54O1xuICAgICAgICAgIHZhbHVlID0gc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zLmxlZnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlzdGFuY2UgPSBzbGlkZXIudG91Y2guZW5kLnkgLSBzbGlkZXIudG91Y2guc3RhcnQueTtcbiAgICAgICAgICB2YWx1ZSA9IHNsaWRlci50b3VjaC5vcmlnaW5hbFBvcy50b3A7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgbm90IGluZmluaXRlIGxvb3AgYW5kIGZpcnN0IC8gbGFzdCBzbGlkZSwgZG8gbm90IGF0dGVtcHQgYSBzbGlkZSB0cmFuc2l0aW9uXG4gICAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiAoKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IDAgJiYgZGlzdGFuY2UgPiAwKSB8fCAoc2xpZGVyLmFjdGl2ZS5sYXN0ICYmIGRpc3RhbmNlIDwgMCkpKSB7XG4gICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSh2YWx1ZSwgJ3Jlc2V0JywgMjAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjaGVjayBpZiBkaXN0YW5jZSBjbGVhcnMgdGhyZXNob2xkXG4gICAgICAgICAgaWYgKE1hdGguYWJzKGRpc3RhbmNlKSA+PSBzbGlkZXIuc2V0dGluZ3Muc3dpcGVUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IDApIHtcbiAgICAgICAgICAgICAgZWwuZ29Ub05leHRTbGlkZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZWwuZ29Ub1ByZXZTbGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwuc3RvcEF1dG8oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZWwuYW5pbWF0ZShwcm9wZXJ0eSwgMjAwKTtcbiAgICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkodmFsdWUsICdyZXNldCcsIDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzbGlkZXIudmlld3BvcnQudW5iaW5kKCd0b3VjaGVuZCBNU1BvaW50ZXJVcCBwb2ludGVydXAnLCBvblRvdWNoRW5kKTtcbiAgICAgIGlmIChzbGlkZXIudmlld3BvcnQuZ2V0KDApLnJlbGVhc2VQb2ludGVyQ2FwdHVyZSkge1xuICAgICAgICBzbGlkZXIudmlld3BvcnQuZ2V0KDApLnJlbGVhc2VQb2ludGVyQ2FwdHVyZShzbGlkZXIucG9pbnRlcklkKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogV2luZG93IHJlc2l6ZSBldmVudCBjYWxsYmFja1xuICAgICAqL1xuICAgIHZhciByZXNpemVXaW5kb3cgPSBmdW5jdGlvbihlKSB7XG4gICAgICAvLyBkb24ndCBkbyBhbnl0aGluZyBpZiBzbGlkZXIgaXNuJ3QgaW5pdGlhbGl6ZWQuXG4gICAgICBpZiAoIXNsaWRlci5pbml0aWFsaXplZCkgeyByZXR1cm47IH1cbiAgICAgIC8vIERlbGF5IGlmIHNsaWRlciB3b3JraW5nLlxuICAgICAgaWYgKHNsaWRlci53b3JraW5nKSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHJlc2l6ZVdpbmRvdywgMTApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZ2V0IHRoZSBuZXcgd2luZG93IGRpbWVucyAoYWdhaW4sIHRoYW5rIHlvdSBJRSlcbiAgICAgICAgdmFyIHdpbmRvd1dpZHRoTmV3ID0gJCh3aW5kb3cpLndpZHRoKCksXG4gICAgICAgIHdpbmRvd0hlaWdodE5ldyA9ICQod2luZG93KS5oZWlnaHQoKTtcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgaXQgaXMgYSB0cnVlIHdpbmRvdyByZXNpemVcbiAgICAgICAgLy8gKndlIG11c3QgY2hlY2sgdGhpcyBiZWNhdXNlIG91ciBkaW5vc2F1ciBmcmllbmQgSUUgZmlyZXMgYSB3aW5kb3cgcmVzaXplIGV2ZW50IHdoZW4gY2VydGFpbiBET00gZWxlbWVudHNcbiAgICAgICAgLy8gYXJlIHJlc2l6ZWQuIENhbiB5b3UganVzdCBkaWUgYWxyZWFkeT8qXG4gICAgICAgIGlmICh3aW5kb3dXaWR0aCAhPT0gd2luZG93V2lkdGhOZXcgfHwgd2luZG93SGVpZ2h0ICE9PSB3aW5kb3dIZWlnaHROZXcpIHtcbiAgICAgICAgICAvLyBzZXQgdGhlIG5ldyB3aW5kb3cgZGltZW5zXG4gICAgICAgICAgd2luZG93V2lkdGggPSB3aW5kb3dXaWR0aE5ldztcbiAgICAgICAgICB3aW5kb3dIZWlnaHQgPSB3aW5kb3dIZWlnaHROZXc7XG4gICAgICAgICAgLy8gdXBkYXRlIGFsbCBkeW5hbWljIGVsZW1lbnRzXG4gICAgICAgICAgZWwucmVkcmF3U2xpZGVyKCk7XG4gICAgICAgICAgLy8gQ2FsbCB1c2VyIHJlc2l6ZSBoYW5kbGVyXG4gICAgICAgICAgc2xpZGVyLnNldHRpbmdzLm9uU2xpZGVyUmVzaXplLmNhbGwoZWwsIHNsaWRlci5hY3RpdmUuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYW4gYXJpYS1oaWRkZW49dHJ1ZSBhdHRyaWJ1dGUgdG8gZWFjaCBlbGVtZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhcnRWaXNpYmxlSW5kZXggKGludClcbiAgICAgKiAgLSB0aGUgZmlyc3QgdmlzaWJsZSBlbGVtZW50J3MgaW5kZXhcbiAgICAgKi9cbiAgICB2YXIgYXBwbHlBcmlhSGlkZGVuQXR0cmlidXRlcyA9IGZ1bmN0aW9uKHN0YXJ0VmlzaWJsZUluZGV4KSB7XG4gICAgICB2YXIgbnVtYmVyT2ZTbGlkZXNTaG93aW5nID0gZ2V0TnVtYmVyU2xpZGVzU2hvd2luZygpO1xuICAgICAgLy8gb25seSBhcHBseSBhdHRyaWJ1dGVzIGlmIHRoZSBzZXR0aW5nIGlzIGVuYWJsZWQgYW5kIG5vdCBpbiB0aWNrZXIgbW9kZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hcmlhSGlkZGVuICYmICFzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7XG4gICAgICAgIC8vIGFkZCBhcmlhLWhpZGRlbj10cnVlIHRvIGFsbCBlbGVtZW50c1xuICAgICAgICBzbGlkZXIuY2hpbGRyZW4uYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICAvLyBnZXQgdGhlIHZpc2libGUgZWxlbWVudHMgYW5kIGNoYW5nZSB0byBhcmlhLWhpZGRlbj1mYWxzZVxuICAgICAgICBzbGlkZXIuY2hpbGRyZW4uc2xpY2Uoc3RhcnRWaXNpYmxlSW5kZXgsIHN0YXJ0VmlzaWJsZUluZGV4ICsgbnVtYmVyT2ZTbGlkZXNTaG93aW5nKS5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGluZGV4IGFjY29yZGluZyB0byBwcmVzZW50IHBhZ2UgcmFuZ2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzbGlkZU9uZGV4IChpbnQpXG4gICAgICogIC0gdGhlIGRlc2lyZWQgc2xpZGUgaW5kZXhcbiAgICAgKi9cbiAgICB2YXIgc2V0U2xpZGVJbmRleCA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcbiAgICAgIGlmIChzbGlkZUluZGV4IDwgMCkge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCkge1xuICAgICAgICAgIHJldHVybiBnZXRQYWdlclF0eSgpIC0gMTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgIC8vd2UgZG9uJ3QgZ28gdG8gdW5kZWZpbmVkIHNsaWRlc1xuICAgICAgICAgIHJldHVybiBzbGlkZXIuYWN0aXZlLmluZGV4O1xuICAgICAgICB9XG4gICAgICAvLyBpZiBzbGlkZUluZGV4IGlzIGdyZWF0ZXIgdGhhbiBjaGlsZHJlbiBsZW5ndGgsIHNldCBhY3RpdmUgaW5kZXggdG8gMCAodGhpcyBoYXBwZW5zIGR1cmluZyBpbmZpbml0ZSBsb29wKVxuICAgICAgfSBlbHNlIGlmIChzbGlkZUluZGV4ID49IGdldFBhZ2VyUXR5KCkpIHtcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3ApIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL3dlIGRvbid0IG1vdmUgdG8gdW5kZWZpbmVkIHBhZ2VzXG4gICAgICAgICAgcmV0dXJuIHNsaWRlci5hY3RpdmUuaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIC8vIHNldCBhY3RpdmUgaW5kZXggdG8gcmVxdWVzdGVkIHNsaWRlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2xpZGVJbmRleDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgKiA9IFBVQkxJQyBGVU5DVElPTlNcbiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgc2xpZGUgdHJhbnNpdGlvbiB0byB0aGUgc3BlY2lmaWVkIHNsaWRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2xpZGVJbmRleCAoaW50KVxuICAgICAqICAtIHRoZSBkZXN0aW5hdGlvbiBzbGlkZSdzIGluZGV4ICh6ZXJvLWJhc2VkKVxuICAgICAqXG4gICAgICogQHBhcmFtIGRpcmVjdGlvbiAoc3RyaW5nKVxuICAgICAqICAtIElOVEVSTkFMIFVTRSBPTkxZIC0gdGhlIGRpcmVjdGlvbiBvZiB0cmF2ZWwgKFwicHJldlwiIC8gXCJuZXh0XCIpXG4gICAgICovXG4gICAgZWwuZ29Ub1NsaWRlID0gZnVuY3Rpb24oc2xpZGVJbmRleCwgZGlyZWN0aW9uKSB7XG4gICAgICAvLyBvblNsaWRlQmVmb3JlLCBvblNsaWRlTmV4dCwgb25TbGlkZVByZXYgY2FsbGJhY2tzXG4gICAgICAvLyBBbGxvdyB0cmFuc2l0aW9uIGNhbmNlbGluZyBiYXNlZCBvbiByZXR1cm5lZCB2YWx1ZVxuICAgICAgdmFyIHBlcmZvcm1UcmFuc2l0aW9uID0gdHJ1ZSxcbiAgICAgIG1vdmVCeSA9IDAsXG4gICAgICBwb3NpdGlvbiA9IHtsZWZ0OiAwLCB0b3A6IDB9LFxuICAgICAgbGFzdENoaWxkID0gbnVsbCxcbiAgICAgIGxhc3RTaG93aW5nSW5kZXgsIGVxLCB2YWx1ZSwgcmVxdWVzdEVsO1xuICAgICAgLy8gc3RvcmUgdGhlIG9sZCBpbmRleFxuICAgICAgc2xpZGVyLm9sZEluZGV4ID0gc2xpZGVyLmFjdGl2ZS5pbmRleDtcbiAgICAgIC8vc2V0IG5ldyBpbmRleFxuICAgICAgc2xpZGVyLmFjdGl2ZS5pbmRleCA9IHNldFNsaWRlSW5kZXgoc2xpZGVJbmRleCk7XG5cbiAgICAgIC8vIGlmIHBsdWdpbiBpcyBjdXJyZW50bHkgaW4gbW90aW9uLCBpZ25vcmUgcmVxdWVzdFxuICAgICAgaWYgKHNsaWRlci53b3JraW5nIHx8IHNsaWRlci5hY3RpdmUuaW5kZXggPT09IHNsaWRlci5vbGRJbmRleCkgeyByZXR1cm47IH1cbiAgICAgIC8vIGRlY2xhcmUgdGhhdCBwbHVnaW4gaXMgaW4gbW90aW9uXG4gICAgICBzbGlkZXIud29ya2luZyA9IHRydWU7XG5cbiAgICAgIHBlcmZvcm1UcmFuc2l0aW9uID0gc2xpZGVyLnNldHRpbmdzLm9uU2xpZGVCZWZvcmUuY2FsbChlbCwgc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5hY3RpdmUuaW5kZXgpLCBzbGlkZXIub2xkSW5kZXgsIHNsaWRlci5hY3RpdmUuaW5kZXgpO1xuXG4gICAgICAvLyBJZiB0cmFuc2l0aW9ucyBjYW5jZWxlZCwgcmVzZXQgYW5kIHJldHVyblxuICAgICAgaWYgKHR5cGVvZiAocGVyZm9ybVRyYW5zaXRpb24pICE9PSAndW5kZWZpbmVkJyAmJiAhcGVyZm9ybVRyYW5zaXRpb24pIHtcbiAgICAgICAgc2xpZGVyLmFjdGl2ZS5pbmRleCA9IHNsaWRlci5vbGRJbmRleDsgLy8gcmVzdG9yZSBvbGQgaW5kZXhcbiAgICAgICAgc2xpZGVyLndvcmtpbmcgPSBmYWxzZTsgLy8gaXMgbm90IGluIG1vdGlvblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICAvLyBQcmV2ZW50IGNhbmNlbGluZyBpbiBmdXR1cmUgZnVuY3Rpb25zIG9yIGxhY2sgdGhlcmUtb2YgZnJvbSBuZWdhdGluZyBwcmV2aW91cyBjb21tYW5kcyB0byBjYW5jZWxcbiAgICAgICAgaWYgKCFzbGlkZXIuc2V0dGluZ3Mub25TbGlkZU5leHQuY2FsbChlbCwgc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5hY3RpdmUuaW5kZXgpLCBzbGlkZXIub2xkSW5kZXgsIHNsaWRlci5hY3RpdmUuaW5kZXgpKSB7XG4gICAgICAgICAgcGVyZm9ybVRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICAvLyBQcmV2ZW50IGNhbmNlbGluZyBpbiBmdXR1cmUgZnVuY3Rpb25zIG9yIGxhY2sgdGhlcmUtb2YgZnJvbSBuZWdhdGluZyBwcmV2aW91cyBjb21tYW5kcyB0byBjYW5jZWxcbiAgICAgICAgaWYgKCFzbGlkZXIuc2V0dGluZ3Mub25TbGlkZVByZXYuY2FsbChlbCwgc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5hY3RpdmUuaW5kZXgpLCBzbGlkZXIub2xkSW5kZXgsIHNsaWRlci5hY3RpdmUuaW5kZXgpKSB7XG4gICAgICAgICAgcGVyZm9ybVRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBpZiBsYXN0IHNsaWRlXG4gICAgICBzbGlkZXIuYWN0aXZlLmxhc3QgPSBzbGlkZXIuYWN0aXZlLmluZGV4ID49IGdldFBhZ2VyUXR5KCkgLSAxO1xuICAgICAgLy8gdXBkYXRlIHRoZSBwYWdlciB3aXRoIGFjdGl2ZSBjbGFzc1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wYWdlciB8fCBzbGlkZXIuc2V0dGluZ3MucGFnZXJDdXN0b20pIHsgdXBkYXRlUGFnZXJBY3RpdmUoc2xpZGVyLmFjdGl2ZS5pbmRleCk7IH1cbiAgICAgIC8vIC8vIGNoZWNrIGZvciBkaXJlY3Rpb24gY29udHJvbCB1cGRhdGVcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuY29udHJvbHMpIHsgdXBkYXRlRGlyZWN0aW9uQ29udHJvbHMoKTsgfVxuICAgICAgLy8gaWYgc2xpZGVyIGlzIHNldCB0byBtb2RlOiBcImZhZGVcIlxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnZmFkZScpIHtcbiAgICAgICAgLy8gaWYgYWRhcHRpdmVIZWlnaHQgaXMgdHJ1ZSBhbmQgbmV4dCBoZWlnaHQgaXMgZGlmZmVyZW50IGZyb20gY3VycmVudCBoZWlnaHQsIGFuaW1hdGUgdG8gdGhlIG5ldyBoZWlnaHRcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hZGFwdGl2ZUhlaWdodCAmJiBzbGlkZXIudmlld3BvcnQuaGVpZ2h0KCkgIT09IGdldFZpZXdwb3J0SGVpZ2h0KCkpIHtcbiAgICAgICAgICBzbGlkZXIudmlld3BvcnQuYW5pbWF0ZSh7aGVpZ2h0OiBnZXRWaWV3cG9ydEhlaWdodCgpfSwgc2xpZGVyLnNldHRpbmdzLmFkYXB0aXZlSGVpZ2h0U3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGZhZGUgb3V0IHRoZSB2aXNpYmxlIGNoaWxkIGFuZCByZXNldCBpdHMgei1pbmRleCB2YWx1ZVxuICAgICAgICBzbGlkZXIuY2hpbGRyZW4uZmlsdGVyKCc6dmlzaWJsZScpLmZhZGVPdXQoc2xpZGVyLnNldHRpbmdzLnNwZWVkKS5jc3Moe3pJbmRleDogMH0pO1xuICAgICAgICAvLyBmYWRlIGluIHRoZSBuZXdseSByZXF1ZXN0ZWQgc2xpZGVcbiAgICAgICAgc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5hY3RpdmUuaW5kZXgpLmNzcygnekluZGV4Jywgc2xpZGVyLnNldHRpbmdzLnNsaWRlWkluZGV4ICsgMSkuZmFkZUluKHNsaWRlci5zZXR0aW5ncy5zcGVlZCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJCh0aGlzKS5jc3MoJ3pJbmRleCcsIHNsaWRlci5zZXR0aW5ncy5zbGlkZVpJbmRleCk7XG4gICAgICAgICAgdXBkYXRlQWZ0ZXJTbGlkZVRyYW5zaXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgICAvLyBzbGlkZXIgbW9kZSBpcyBub3QgXCJmYWRlXCJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIGFkYXB0aXZlSGVpZ2h0IGlzIHRydWUgYW5kIG5leHQgaGVpZ2h0IGlzIGRpZmZlcmVudCBmcm9tIGN1cnJlbnQgaGVpZ2h0LCBhbmltYXRlIHRvIHRoZSBuZXcgaGVpZ2h0XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYWRhcHRpdmVIZWlnaHQgJiYgc2xpZGVyLnZpZXdwb3J0LmhlaWdodCgpICE9PSBnZXRWaWV3cG9ydEhlaWdodCgpKSB7XG4gICAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmFuaW1hdGUoe2hlaWdodDogZ2V0Vmlld3BvcnRIZWlnaHQoKX0sIHNsaWRlci5zZXR0aW5ncy5hZGFwdGl2ZUhlaWdodFNwZWVkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBjYXJvdXNlbCBhbmQgbm90IGluZmluaXRlIGxvb3BcbiAgICAgICAgaWYgKCFzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wICYmIHNsaWRlci5jYXJvdXNlbCAmJiBzbGlkZXIuYWN0aXZlLmxhc3QpIHtcbiAgICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgLy8gZ2V0IHRoZSBsYXN0IGNoaWxkIHBvc2l0aW9uXG4gICAgICAgICAgICBsYXN0Q2hpbGQgPSBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBsYXN0Q2hpbGQucG9zaXRpb24oKTtcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGxhc3Qgc2xpZGVcbiAgICAgICAgICAgIG1vdmVCeSA9IHNsaWRlci52aWV3cG9ydC53aWR0aCgpIC0gbGFzdENoaWxkLm91dGVyV2lkdGgoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZ2V0IGxhc3Qgc2hvd2luZyBpbmRleCBwb3NpdGlvblxuICAgICAgICAgICAgbGFzdFNob3dpbmdJbmRleCA9IHNsaWRlci5jaGlsZHJlbi5sZW5ndGggLSBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEobGFzdFNob3dpbmdJbmRleCkucG9zaXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gaG9yaXpvbnRhbCBjYXJvdXNlbCwgZ29pbmcgcHJldmlvdXMgd2hpbGUgb24gZmlyc3Qgc2xpZGUgKGluZmluaXRlTG9vcCBtb2RlKVxuICAgICAgICB9IGVsc2UgaWYgKHNsaWRlci5jYXJvdXNlbCAmJiBzbGlkZXIuYWN0aXZlLmxhc3QgJiYgZGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgICAvLyBnZXQgdGhlIGxhc3QgY2hpbGQgcG9zaXRpb25cbiAgICAgICAgICBlcSA9IHNsaWRlci5zZXR0aW5ncy5tb3ZlU2xpZGVzID09PSAxID8gc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyAtIGdldE1vdmVCeSgpIDogKChnZXRQYWdlclF0eSgpIC0gMSkgKiBnZXRNb3ZlQnkoKSkgLSAoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAtIHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMpO1xuICAgICAgICAgIGxhc3RDaGlsZCA9IGVsLmNoaWxkcmVuKCcuYngtY2xvbmUnKS5lcShlcSk7XG4gICAgICAgICAgcG9zaXRpb24gPSBsYXN0Q2hpbGQucG9zaXRpb24oKTtcbiAgICAgICAgLy8gaWYgaW5maW5pdGUgbG9vcCBhbmQgXCJOZXh0XCIgaXMgY2xpY2tlZCBvbiB0aGUgbGFzdCBzbGlkZVxuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ25leHQnICYmIHNsaWRlci5hY3RpdmUuaW5kZXggPT09IDApIHtcbiAgICAgICAgICAvLyBnZXQgdGhlIGxhc3QgY2xvbmUgcG9zaXRpb25cbiAgICAgICAgICBwb3NpdGlvbiA9IGVsLmZpbmQoJz4gLmJ4LWNsb25lJykuZXEoc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcykucG9zaXRpb24oKTtcbiAgICAgICAgICBzbGlkZXIuYWN0aXZlLmxhc3QgPSBmYWxzZTtcbiAgICAgICAgLy8gbm9ybWFsIG5vbi16ZXJvIHJlcXVlc3RzXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVJbmRleCA+PSAwKSB7XG4gICAgICAgICAgLy9wYXJzZUludCBpcyBhcHBsaWVkIHRvIGFsbG93IGZsb2F0cyBmb3Igc2xpZGVzL3BhZ2VcbiAgICAgICAgICByZXF1ZXN0RWwgPSBzbGlkZUluZGV4ICogcGFyc2VJbnQoZ2V0TW92ZUJ5KCkpO1xuICAgICAgICAgIHBvc2l0aW9uID0gc2xpZGVyLmNoaWxkcmVuLmVxKHJlcXVlc3RFbCkucG9zaXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIElmIHRoZSBwb3NpdGlvbiBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAqIChlLmcuIGlmIHlvdSBkZXN0cm95IHRoZSBzbGlkZXIgb24gYSBuZXh0IGNsaWNrKSxcbiAgICAgICAgICogaXQgZG9lc24ndCB0aHJvdyBhbiBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh0eXBlb2YgKHBvc2l0aW9uKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB2YWx1ZSA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAtKHBvc2l0aW9uLmxlZnQgLSBtb3ZlQnkpIDogLXBvc2l0aW9uLnRvcDtcbiAgICAgICAgICAvLyBwbHVnaW4gdmFsdWVzIHRvIGJlIGFuaW1hdGVkXG4gICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSh2YWx1ZSwgJ3NsaWRlJywgc2xpZGVyLnNldHRpbmdzLnNwZWVkKTtcbiAgICAgICAgfVxuICAgICAgICBzbGlkZXIud29ya2luZyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hcmlhSGlkZGVuKSB7IGFwcGx5QXJpYUhpZGRlbkF0dHJpYnV0ZXMoc2xpZGVyLmFjdGl2ZS5pbmRleCAqIGdldE1vdmVCeSgpKTsgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2l0aW9ucyB0byB0aGUgbmV4dCBzbGlkZSBpbiB0aGUgc2hvd1xuICAgICAqL1xuICAgIGVsLmdvVG9OZXh0U2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIGluZmluaXRlTG9vcCBpcyBmYWxzZSBhbmQgbGFzdCBwYWdlIGlzIHNob3dpbmcsIGRpc3JlZ2FyZCBjYWxsXG4gICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3AgJiYgc2xpZGVyLmFjdGl2ZS5sYXN0KSB7IHJldHVybjsgfVxuXHQgIGlmIChzbGlkZXIud29ya2luZyA9PSB0cnVlKXsgcmV0dXJuIDt9XG4gICAgICB2YXIgcGFnZXJJbmRleCA9IHBhcnNlSW50KHNsaWRlci5hY3RpdmUuaW5kZXgpICsgMTtcbiAgICAgIGVsLmdvVG9TbGlkZShwYWdlckluZGV4LCAnbmV4dCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2l0aW9ucyB0byB0aGUgcHJldiBzbGlkZSBpbiB0aGUgc2hvd1xuICAgICAqL1xuICAgIGVsLmdvVG9QcmV2U2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIGluZmluaXRlTG9vcCBpcyBmYWxzZSBhbmQgbGFzdCBwYWdlIGlzIHNob3dpbmcsIGRpc3JlZ2FyZCBjYWxsXG4gICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3AgJiYgc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gMCkgeyByZXR1cm47IH1cblx0ICBpZiAoc2xpZGVyLndvcmtpbmcgPT0gdHJ1ZSl7IHJldHVybiA7fVxuICAgICAgdmFyIHBhZ2VySW5kZXggPSBwYXJzZUludChzbGlkZXIuYWN0aXZlLmluZGV4KSAtIDE7XG4gICAgICBlbC5nb1RvU2xpZGUocGFnZXJJbmRleCwgJ3ByZXYnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRoZSBhdXRvIHNob3dcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcmV2ZW50Q29udHJvbFVwZGF0ZSAoYm9vbGVhbilcbiAgICAgKiAgLSBpZiB0cnVlLCBhdXRvIGNvbnRyb2xzIHN0YXRlIHdpbGwgbm90IGJlIHVwZGF0ZWRcbiAgICAgKi9cbiAgICBlbC5zdGFydEF1dG8gPSBmdW5jdGlvbihwcmV2ZW50Q29udHJvbFVwZGF0ZSkge1xuICAgICAgLy8gaWYgYW4gaW50ZXJ2YWwgYWxyZWFkeSBleGlzdHMsIGRpc3JlZ2FyZCBjYWxsXG4gICAgICBpZiAoc2xpZGVyLmludGVydmFsKSB7IHJldHVybjsgfVxuICAgICAgLy8gY3JlYXRlIGFuIGludGVydmFsXG4gICAgICBzbGlkZXIuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgICBlbC5nb1RvTmV4dFNsaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWwuZ29Ub1ByZXZTbGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LCBzbGlkZXIuc2V0dGluZ3MucGF1c2UpO1xuXHQgIC8vYWxsYmFjayBmb3Igd2hlbiB0aGUgYXV0byByb3RhdGUgc3RhdHVzIGNoYW5nZXNcblx0ICBzbGlkZXIuc2V0dGluZ3Mub25BdXRvQ2hhbmdlLmNhbGwoZWwsIHRydWUpO1xuICAgICAgLy8gaWYgYXV0byBjb250cm9scyBhcmUgZGlzcGxheWVkIGFuZCBwcmV2ZW50Q29udHJvbFVwZGF0ZSBpcyBub3QgdHJ1ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHMgJiYgcHJldmVudENvbnRyb2xVcGRhdGUgIT09IHRydWUpIHsgdXBkYXRlQXV0b0NvbnRyb2xzKCdzdG9wJyk7IH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3RvcHMgdGhlIGF1dG8gc2hvd1xuICAgICAqXG4gICAgICogQHBhcmFtIHByZXZlbnRDb250cm9sVXBkYXRlIChib29sZWFuKVxuICAgICAqICAtIGlmIHRydWUsIGF1dG8gY29udHJvbHMgc3RhdGUgd2lsbCBub3QgYmUgdXBkYXRlZFxuICAgICAqL1xuICAgIGVsLnN0b3BBdXRvID0gZnVuY3Rpb24ocHJldmVudENvbnRyb2xVcGRhdGUpIHtcbiAgICAgIC8vIGlmIG5vIGludGVydmFsIGV4aXN0cywgZGlzcmVnYXJkIGNhbGxcbiAgICAgIGlmICghc2xpZGVyLmludGVydmFsKSB7IHJldHVybjsgfVxuICAgICAgLy8gY2xlYXIgdGhlIGludGVydmFsXG4gICAgICBjbGVhckludGVydmFsKHNsaWRlci5pbnRlcnZhbCk7XG4gICAgICBzbGlkZXIuaW50ZXJ2YWwgPSBudWxsO1xuXHQgIC8vYWxsYmFjayBmb3Igd2hlbiB0aGUgYXV0byByb3RhdGUgc3RhdHVzIGNoYW5nZXNcblx0ICBzbGlkZXIuc2V0dGluZ3Mub25BdXRvQ2hhbmdlLmNhbGwoZWwsIGZhbHNlKTtcbiAgICAgIC8vIGlmIGF1dG8gY29udHJvbHMgYXJlIGRpc3BsYXllZCBhbmQgcHJldmVudENvbnRyb2xVcGRhdGUgaXMgbm90IHRydWVcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzICYmIHByZXZlbnRDb250cm9sVXBkYXRlICE9PSB0cnVlKSB7IHVwZGF0ZUF1dG9Db250cm9scygnc3RhcnQnKTsgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGN1cnJlbnQgc2xpZGUgaW5kZXggKHplcm8tYmFzZWQpXG4gICAgICovXG4gICAgZWwuZ2V0Q3VycmVudFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2xpZGVyLmFjdGl2ZS5pbmRleDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjdXJyZW50IHNsaWRlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBlbC5nZXRDdXJyZW50U2xpZGVFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5hY3RpdmUuaW5kZXgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc2xpZGUgZWxlbWVudFxuICAgICAqIEBwYXJhbSBpbmRleCAoaW50KVxuICAgICAqICAtIFRoZSBpbmRleCAoemVyby1iYXNlZCkgb2YgdGhlIGVsZW1lbnQgeW91IHdhbnQgcmV0dXJuZWQuXG4gICAgICovXG4gICAgZWwuZ2V0U2xpZGVFbGVtZW50ID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiBzbGlkZXIuY2hpbGRyZW4uZXEoaW5kZXgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG51bWJlciBvZiBzbGlkZXMgaW4gc2hvd1xuICAgICAqL1xuICAgIGVsLmdldFNsaWRlQ291bnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gc2xpZGVyLndvcmtpbmcgdmFyaWFibGVcbiAgICAgKi9cbiAgICBlbC5pc1dvcmtpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzbGlkZXIud29ya2luZztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIGFsbCBkeW5hbWljIHNsaWRlciBlbGVtZW50c1xuICAgICAqL1xuICAgIGVsLnJlZHJhd1NsaWRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gcmVzaXplIGFsbCBjaGlsZHJlbiBpbiByYXRpbyB0byBuZXcgc2NyZWVuIHNpemVcbiAgICAgIHNsaWRlci5jaGlsZHJlbi5hZGQoZWwuZmluZCgnLmJ4LWNsb25lJykpLm91dGVyV2lkdGgoZ2V0U2xpZGVXaWR0aCgpKTtcbiAgICAgIC8vIGFkanVzdCB0aGUgaGVpZ2h0XG4gICAgICBzbGlkZXIudmlld3BvcnQuY3NzKCdoZWlnaHQnLCBnZXRWaWV3cG9ydEhlaWdodCgpKTtcbiAgICAgIC8vIHVwZGF0ZSB0aGUgc2xpZGUgcG9zaXRpb25cbiAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLnRpY2tlcikgeyBzZXRTbGlkZVBvc2l0aW9uKCk7IH1cbiAgICAgIC8vIGlmIGFjdGl2ZS5sYXN0IHdhcyB0cnVlIGJlZm9yZSB0aGUgc2NyZWVuIHJlc2l6ZSwgd2Ugd2FudFxuICAgICAgLy8gdG8ga2VlcCBpdCBsYXN0IG5vIG1hdHRlciB3aGF0IHNjcmVlbiBzaXplIHdlIGVuZCBvblxuICAgICAgaWYgKHNsaWRlci5hY3RpdmUubGFzdCkgeyBzbGlkZXIuYWN0aXZlLmluZGV4ID0gZ2V0UGFnZXJRdHkoKSAtIDE7IH1cbiAgICAgIC8vIGlmIHRoZSBhY3RpdmUgaW5kZXggKHBhZ2UpIG5vIGxvbmdlciBleGlzdHMgZHVlIHRvIHRoZSByZXNpemUsIHNpbXBseSBzZXQgdGhlIGluZGV4IGFzIGxhc3RcbiAgICAgIGlmIChzbGlkZXIuYWN0aXZlLmluZGV4ID49IGdldFBhZ2VyUXR5KCkpIHsgc2xpZGVyLmFjdGl2ZS5sYXN0ID0gdHJ1ZTsgfVxuICAgICAgLy8gaWYgYSBwYWdlciBpcyBiZWluZyBkaXNwbGF5ZWQgYW5kIGEgY3VzdG9tIHBhZ2VyIGlzIG5vdCBiZWluZyB1c2VkLCB1cGRhdGUgaXRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucGFnZXIgJiYgIXNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSkge1xuICAgICAgICBwb3B1bGF0ZVBhZ2VyKCk7XG4gICAgICAgIHVwZGF0ZVBhZ2VyQWN0aXZlKHNsaWRlci5hY3RpdmUuaW5kZXgpO1xuICAgICAgfVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hcmlhSGlkZGVuKSB7IGFwcGx5QXJpYUhpZGRlbkF0dHJpYnV0ZXMoc2xpZGVyLmFjdGl2ZS5pbmRleCAqIGdldE1vdmVCeSgpKTsgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHRoZSBjdXJyZW50IGluc3RhbmNlIG9mIHRoZSBzbGlkZXIgKHJldmVydCBldmVyeXRoaW5nIGJhY2sgdG8gb3JpZ2luYWwgc3RhdGUpXG4gICAgICovXG4gICAgZWwuZGVzdHJveVNsaWRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gZG9uJ3QgZG8gYW55dGhpbmcgaWYgc2xpZGVyIGhhcyBhbHJlYWR5IGJlZW4gZGVzdHJveWVkXG4gICAgICBpZiAoIXNsaWRlci5pbml0aWFsaXplZCkgeyByZXR1cm47IH1cbiAgICAgIHNsaWRlci5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgJCgnLmJ4LWNsb25lJywgdGhpcykucmVtb3ZlKCk7XG4gICAgICBzbGlkZXIuY2hpbGRyZW4uZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCQodGhpcykuZGF0YSgnb3JpZ1N0eWxlJykgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICQodGhpcykuYXR0cignc3R5bGUnLCAkKHRoaXMpLmRhdGEoJ29yaWdTdHlsZScpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkKHRoaXMpLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCQodGhpcykuZGF0YSgnb3JpZ1N0eWxlJykgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmF0dHIoJ3N0eWxlJywgJCh0aGlzKS5kYXRhKCdvcmlnU3R5bGUnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKHRoaXMpLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICB9XG4gICAgICAkKHRoaXMpLnVud3JhcCgpLnVud3JhcCgpO1xuICAgICAgaWYgKHNsaWRlci5jb250cm9scy5lbCkgeyBzbGlkZXIuY29udHJvbHMuZWwucmVtb3ZlKCk7IH1cbiAgICAgIGlmIChzbGlkZXIuY29udHJvbHMubmV4dCkgeyBzbGlkZXIuY29udHJvbHMubmV4dC5yZW1vdmUoKTsgfVxuICAgICAgaWYgKHNsaWRlci5jb250cm9scy5wcmV2KSB7IHNsaWRlci5jb250cm9scy5wcmV2LnJlbW92ZSgpOyB9XG4gICAgICBpZiAoc2xpZGVyLnBhZ2VyRWwgJiYgc2xpZGVyLnNldHRpbmdzLmNvbnRyb2xzICYmICFzbGlkZXIuc2V0dGluZ3MucGFnZXJDdXN0b20pIHsgc2xpZGVyLnBhZ2VyRWwucmVtb3ZlKCk7IH1cbiAgICAgICQoJy5ieC1jYXB0aW9uJywgdGhpcykucmVtb3ZlKCk7XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLmF1dG9FbCkgeyBzbGlkZXIuY29udHJvbHMuYXV0b0VsLnJlbW92ZSgpOyB9XG4gICAgICBjbGVhckludGVydmFsKHNsaWRlci5pbnRlcnZhbCk7XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnJlc3BvbnNpdmUpIHsgJCh3aW5kb3cpLnVuYmluZCgncmVzaXplJywgcmVzaXplV2luZG93KTsgfVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5rZXlib2FyZEVuYWJsZWQpIHsgJChkb2N1bWVudCkudW5iaW5kKCdrZXlkb3duJywga2V5UHJlc3MpOyB9XG4gICAgICAvL3JlbW92ZSBzZWxmIHJlZmVyZW5jZSBpbiBkYXRhXG4gICAgICAkKHRoaXMpLnJlbW92ZURhdGEoJ2J4U2xpZGVyJyk7XG5cdCAgLy8gcmVtb3ZlIGdsb2JhbCB3aW5kb3cgaGFuZGxlcnNcblx0ICAkKHdpbmRvdykub2ZmKCdibHVyJywgd2luZG93Qmx1ckhhbmRsZXIpLm9mZignZm9jdXMnLCB3aW5kb3dGb2N1c0hhbmRsZXIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWxvYWQgdGhlIHNsaWRlciAocmV2ZXJ0IGFsbCBET00gY2hhbmdlcywgYW5kIHJlLWluaXRpYWxpemUpXG4gICAgICovXG4gICAgZWwucmVsb2FkU2xpZGVyID0gZnVuY3Rpb24oc2V0dGluZ3MpIHtcbiAgICAgIGlmIChzZXR0aW5ncyAhPT0gdW5kZWZpbmVkKSB7IG9wdGlvbnMgPSBzZXR0aW5nczsgfVxuICAgICAgZWwuZGVzdHJveVNsaWRlcigpO1xuICAgICAgaW5pdCgpO1xuICAgICAgLy9zdG9yZSByZWZlcmVuY2UgdG8gc2VsZiBpbiBvcmRlciB0byBhY2Nlc3MgcHVibGljIGZ1bmN0aW9ucyBsYXRlclxuICAgICAgJChlbCkuZGF0YSgnYnhTbGlkZXInLCB0aGlzKTtcbiAgICB9O1xuXG4gICAgaW5pdCgpO1xuXG4gICAgJChlbCkuZGF0YSgnYnhTbGlkZXInLCB0aGlzKTtcblxuICAgIC8vIHJldHVybnMgdGhlIGN1cnJlbnQgalF1ZXJ5IG9iamVjdFxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG59KShqUXVlcnkpO1xuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIGZhbmN5Qm94IHYzLjIuNVxuLy9cbi8vIExpY2Vuc2VkIEdQTHYzIGZvciBvcGVuIHNvdXJjZSB1c2Vcbi8vIG9yIGZhbmN5Qm94IENvbW1lcmNpYWwgTGljZW5zZSBmb3IgY29tbWVyY2lhbCB1c2Vcbi8vXG4vLyBodHRwOi8vZmFuY3lhcHBzLmNvbS9mYW5jeWJveC9cbi8vIENvcHlyaWdodCAyMDE3IGZhbmN5QXBwc1xuLy9cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG47KGZ1bmN0aW9uICh3aW5kb3csIGRvY3VtZW50LCAkLCB1bmRlZmluZWQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAvLyBJZiB0aGVyZSdzIG5vIGpRdWVyeSwgZmFuY3lCb3ggY2FuJ3Qgd29ya1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBpZiAoICEkICkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBpZiBmYW5jeUJveCBpcyBhbHJlYWR5IGluaXRpYWxpemVkXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgaWYgKCAkLmZuLmZhbmN5Ym94ICkge1xyXG5cclxuICAgICAgICBpZiAoICdjb25zb2xlJyBpbiB3aW5kb3cgKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnZmFuY3lCb3ggYWxyZWFkeSBpbml0aWFsaXplZCcgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQcml2YXRlIGRlZmF1bHQgc2V0dGluZ3NcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHZhciBkZWZhdWx0cyA9IHtcclxuXHJcbiAgICAgICAgLy8gRW5hYmxlIGluZmluaXRlIGdhbGxlcnkgbmF2aWdhdGlvblxyXG4gICAgICAgIGxvb3AgOiBmYWxzZSxcclxuXHJcbiAgICAgICAgLy8gU3BhY2UgYXJvdW5kIGltYWdlLCBpZ25vcmVkIGlmIHpvb21lZC1pbiBvciB2aWV3cG9ydCB3aWR0aCBpcyBzbWFsbGVyIHRoYW4gODAwcHhcclxuICAgICAgICBtYXJnaW4gOiBbNDQsIDBdLFxyXG5cclxuICAgICAgICAvLyBIb3Jpem9udGFsIHNwYWNlIGJldHdlZW4gc2xpZGVzXHJcbiAgICAgICAgZ3V0dGVyIDogNTAsXHJcblxyXG4gICAgICAgIC8vIEVuYWJsZSBrZXlib2FyZCBuYXZpZ2F0aW9uXHJcbiAgICAgICAga2V5Ym9hcmQgOiB0cnVlLFxyXG5cclxuICAgICAgICAvLyBTaG91bGQgZGlzcGxheSBuYXZpZ2F0aW9uIGFycm93cyBhdCB0aGUgc2NyZWVuIGVkZ2VzXHJcbiAgICAgICAgYXJyb3dzIDogdHJ1ZSxcclxuXHJcbiAgICAgICAgLy8gU2hvdWxkIGRpc3BsYXkgaW5mb2JhciAoY291bnRlciBhbmQgYXJyb3dzIGF0IHRoZSB0b3ApXHJcbiAgICAgICAgaW5mb2JhciA6IHRydWUsXHJcblxyXG4gICAgICAgIC8vIFNob3VsZCBkaXNwbGF5IHRvb2xiYXIgKGJ1dHRvbnMgYXQgdGhlIHRvcClcclxuICAgICAgICB0b29sYmFyIDogdHJ1ZSxcclxuXHJcbiAgICAgICAgLy8gV2hhdCBidXR0b25zIHNob3VsZCBhcHBlYXIgaW4gdGhlIHRvcCByaWdodCBjb3JuZXIuXHJcbiAgICAgICAgLy8gQnV0dG9ucyB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGVtcGxhdGVzIGZyb20gYGJ0blRwbGAgb3B0aW9uXHJcbiAgICAgICAgLy8gYW5kIHRoZXkgd2lsbCBiZSBwbGFjZWQgaW50byB0b29sYmFyIChjbGFzcz1cImZhbmN5Ym94LXRvb2xiYXJcImAgZWxlbWVudClcclxuICAgICAgICBidXR0b25zIDogW1xyXG4gICAgICAgICAgICAnc2xpZGVTaG93JyxcclxuICAgICAgICAgICAgJ2Z1bGxTY3JlZW4nLFxyXG4gICAgICAgICAgICAndGh1bWJzJyxcclxuICAgICAgICAgICAgJ3NoYXJlJyxcclxuICAgICAgICAgICAgLy8nZG93bmxvYWQnLFxyXG4gICAgICAgICAgICAvLyd6b29tJyxcclxuICAgICAgICAgICAgJ2Nsb3NlJ1xyXG4gICAgICAgIF0sXHJcblxyXG4gICAgICAgIC8vIERldGVjdCBcImlkbGVcIiB0aW1lIGluIHNlY29uZHNcclxuICAgICAgICBpZGxlVGltZSA6IDMsXHJcblxyXG4gICAgICAgIC8vIFNob3VsZCBkaXNwbGF5IGJ1dHRvbnMgYXQgdG9wIHJpZ2h0IGNvcm5lciBvZiB0aGUgY29udGVudFxyXG4gICAgICAgIC8vIElmICdhdXRvJyAtIHRoZXkgd2lsbCBiZSBjcmVhdGVkIGZvciBjb250ZW50IGhhdmluZyB0eXBlICdodG1sJywgJ2lubGluZScgb3IgJ2FqYXgnXHJcbiAgICAgICAgLy8gVXNlIHRlbXBsYXRlIGZyb20gYGJ0blRwbC5zbWFsbEJ0bmAgZm9yIGN1c3RvbWl6YXRpb25cclxuICAgICAgICBzbWFsbEJ0biA6ICdhdXRvJyxcclxuXHJcbiAgICAgICAgLy8gRGlzYWJsZSByaWdodC1jbGljayBhbmQgdXNlIHNpbXBsZSBpbWFnZSBwcm90ZWN0aW9uIGZvciBpbWFnZXNcclxuICAgICAgICBwcm90ZWN0IDogZmFsc2UsXHJcblxyXG4gICAgICAgIC8vIFNob3J0Y3V0IHRvIG1ha2UgY29udGVudCBcIm1vZGFsXCIgLSBkaXNhYmxlIGtleWJvYXJkIG5hdmlndGlvbiwgaGlkZSBidXR0b25zLCBldGNcclxuICAgICAgICBtb2RhbCA6IGZhbHNlLFxyXG5cclxuICAgICAgICBpbWFnZSA6IHtcclxuXHJcbiAgICAgICAgICAgIC8vIFdhaXQgZm9yIGltYWdlcyB0byBsb2FkIGJlZm9yZSBkaXNwbGF5aW5nXHJcbiAgICAgICAgICAgIC8vIFJlcXVpcmVzIHByZWRlZmluZWQgaW1hZ2UgZGltZW5zaW9uc1xyXG4gICAgICAgICAgICAvLyBJZiAnYXV0bycgLSB3aWxsIHpvb20gaW4gdGh1bWJuYWlsIGlmICd3aWR0aCcgYW5kICdoZWlnaHQnIGF0dHJpYnV0ZXMgYXJlIGZvdW5kXHJcbiAgICAgICAgICAgIHByZWxvYWQgOiBcImF1dG9cIlxyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhamF4IDoge1xyXG5cclxuICAgICAgICAgICAgLy8gT2JqZWN0IGNvbnRhaW5pbmcgc2V0dGluZ3MgZm9yIGFqYXggcmVxdWVzdFxyXG4gICAgICAgICAgICBzZXR0aW5ncyA6IHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGhlbHBzIHRvIGluZGljYXRlIHRoYXQgcmVxdWVzdCBjb21lcyBmcm9tIHRoZSBtb2RhbFxyXG4gICAgICAgICAgICAgICAgLy8gRmVlbCBmcmVlIHRvIGNoYW5nZSBuYW1pbmdcclxuICAgICAgICAgICAgICAgIGRhdGEgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFuY3lib3ggOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaWZyYW1lIDoge1xyXG5cclxuICAgICAgICAgICAgLy8gSWZyYW1lIHRlbXBsYXRlXHJcbiAgICAgICAgICAgIHRwbCA6ICc8aWZyYW1lIGlkPVwiZmFuY3lib3gtZnJhbWV7cm5kfVwiIG5hbWU9XCJmYW5jeWJveC1mcmFtZXtybmR9XCIgY2xhc3M9XCJmYW5jeWJveC1pZnJhbWVcIiBmcmFtZWJvcmRlcj1cIjBcIiB2c3BhY2U9XCIwXCIgaHNwYWNlPVwiMFwiIHdlYmtpdEFsbG93RnVsbFNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gYWxsb3dGdWxsU2NyZWVuIGFsbG93dHJhbnNwYXJlbmN5PVwidHJ1ZVwiIHNyYz1cIlwiPjwvaWZyYW1lPicsXHJcblxyXG4gICAgICAgICAgICAvLyBQcmVsb2FkIGlmcmFtZSBiZWZvcmUgZGlzcGxheWluZyBpdFxyXG4gICAgICAgICAgICAvLyBUaGlzIGFsbG93cyB0byBjYWxjdWxhdGUgaWZyYW1lIGNvbnRlbnQgd2lkdGggYW5kIGhlaWdodFxyXG4gICAgICAgICAgICAvLyAobm90ZTogRHVlIHRvIFwiU2FtZSBPcmlnaW4gUG9saWN5XCIsIHlvdSBjYW4ndCBnZXQgY3Jvc3MgZG9tYWluIGRhdGEpLlxyXG4gICAgICAgICAgICBwcmVsb2FkIDogdHJ1ZSxcclxuXHJcbiAgICAgICAgICAgIC8vIEN1c3RvbSBDU1Mgc3R5bGluZyBmb3IgaWZyYW1lIHdyYXBwaW5nIGVsZW1lbnRcclxuICAgICAgICAgICAgLy8gWW91IGNhbiB1c2UgdGhpcyB0byBzZXQgY3VzdG9tIGlmcmFtZSBkaW1lbnNpb25zXHJcbiAgICAgICAgICAgIGNzcyA6IHt9LFxyXG5cclxuICAgICAgICAgICAgLy8gSWZyYW1lIHRhZyBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGF0dHIgOiB7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGxpbmcgOiAnYXV0bydcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBEZWZhdWx0IGNvbnRlbnQgdHlwZSBpZiBjYW5ub3QgYmUgZGV0ZWN0ZWQgYXV0b21hdGljYWxseVxyXG4gICAgICAgIGRlZmF1bHRUeXBlIDogJ2ltYWdlJyxcclxuXHJcbiAgICAgICAgLy8gT3Blbi9jbG9zZSBhbmltYXRpb24gdHlwZVxyXG4gICAgICAgIC8vIFBvc3NpYmxlIHZhbHVlczpcclxuICAgICAgICAvLyAgIGZhbHNlICAgICAgICAgICAgLSBkaXNhYmxlXHJcbiAgICAgICAgLy8gICBcInpvb21cIiAgICAgICAgICAgLSB6b29tIGltYWdlcyBmcm9tL3RvIHRodW1ibmFpbFxyXG4gICAgICAgIC8vICAgXCJmYWRlXCJcclxuICAgICAgICAvLyAgIFwiem9vbS1pbi1vdXRcIlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgYW5pbWF0aW9uRWZmZWN0IDogXCJ6b29tXCIsXHJcblxyXG4gICAgICAgIC8vIER1cmF0aW9uIGluIG1zIGZvciBvcGVuL2Nsb3NlIGFuaW1hdGlvblxyXG4gICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uIDogNTAwLFxyXG5cclxuICAgICAgICAvLyBTaG91bGQgaW1hZ2UgY2hhbmdlIG9wYWNpdHkgd2hpbGUgem9vbWluZ1xyXG4gICAgICAgIC8vIElmIG9wYWNpdHkgaXMgXCJhdXRvXCIsIHRoZW4gb3BhY2l0eSB3aWxsIGJlIGNoYW5nZWQgaWYgaW1hZ2UgYW5kIHRodW1ibmFpbCBoYXZlIGRpZmZlcmVudCBhc3BlY3QgcmF0aW9zXHJcbiAgICAgICAgem9vbU9wYWNpdHkgOiBcImF1dG9cIixcclxuXHJcbiAgICAgICAgLy8gVHJhbnNpdGlvbiBlZmZlY3QgYmV0d2VlbiBzbGlkZXNcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIFBvc3NpYmxlIHZhbHVlczpcclxuICAgICAgICAvLyAgIGZhbHNlICAgICAgICAgICAgLSBkaXNhYmxlXHJcbiAgICAgICAgLy8gICBcImZhZGUnXHJcbiAgICAgICAgLy8gICBcInNsaWRlJ1xyXG4gICAgICAgIC8vICAgXCJjaXJjdWxhcidcclxuICAgICAgICAvLyAgIFwidHViZSdcclxuICAgICAgICAvLyAgIFwiem9vbS1pbi1vdXQnXHJcbiAgICAgICAgLy8gICBcInJvdGF0ZSdcclxuICAgICAgICAvL1xyXG4gICAgICAgIHRyYW5zaXRpb25FZmZlY3QgOiBcImZhZGVcIixcclxuXHJcbiAgICAgICAgLy8gRHVyYXRpb24gaW4gbXMgZm9yIHRyYW5zaXRpb24gYW5pbWF0aW9uXHJcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uIDogMzY2LFxyXG5cclxuICAgICAgICAvLyBDdXN0b20gQ1NTIGNsYXNzIGZvciBzbGlkZSBlbGVtZW50XHJcbiAgICAgICAgc2xpZGVDbGFzcyA6ICcnLFxyXG5cclxuICAgICAgICAvLyBDdXN0b20gQ1NTIGNsYXNzIGZvciBsYXlvdXRcclxuICAgICAgICBiYXNlQ2xhc3MgOiAnJyxcclxuXHJcbiAgICAgICAgLy8gQmFzZSB0ZW1wbGF0ZSBmb3IgbGF5b3V0XHJcbiAgICAgICAgYmFzZVRwbFx0OlxyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWNvbnRhaW5lclwiIHJvbGU9XCJkaWFsb2dcIiB0YWJpbmRleD1cIi0xXCI+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWJnXCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWlubmVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1pbmZvYmFyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBkYXRhLWZhbmN5Ym94LWluZGV4Pjwvc3Bhbj4mbmJzcDsvJm5ic3A7PHNwYW4gZGF0YS1mYW5jeWJveC1jb3VudD48L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtdG9vbGJhclwiPnt7YnV0dG9uc319PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1uYXZpZ2F0aW9uXCI+e3thcnJvd3N9fTwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtc3RhZ2VcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWNhcHRpb24td3JhcFwiPjxkaXYgY2xhc3M9XCJmYW5jeWJveC1jYXB0aW9uXCI+PC9kaXY+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nLFxyXG5cclxuICAgICAgICAvLyBMb2FkaW5nIGluZGljYXRvciB0ZW1wbGF0ZVxyXG4gICAgICAgIHNwaW5uZXJUcGwgOiAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWxvYWRpbmdcIj48L2Rpdj4nLFxyXG5cclxuICAgICAgICAvLyBFcnJvciBtZXNzYWdlIHRlbXBsYXRlXHJcbiAgICAgICAgZXJyb3JUcGwgOiAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWVycm9yXCI+PHA+e3tFUlJPUn19PHA+PC9kaXY+JyxcclxuXHJcbiAgICAgICAgYnRuVHBsIDoge1xyXG5cclxuICAgICAgICAgICAgZG93bmxvYWQgOiAnPGEgZG93bmxvYWQgZGF0YS1mYW5jeWJveC1kb3dubG9hZCBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWRvd25sb2FkXCIgdGl0bGU9XCJ7e0RPV05MT0FEfX1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmcgdmlld0JveD1cIjAgMCA0MCA0MFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwYXRoIGQ9XCJNMjAsMjMgTDIwLDggTDIwLDIzIEwxMywxNiBMMjAsMjMgTDI3LDE2IEwyMCwyMyBNMjYsMjggTDEzLDI4IEwyNywyOCBMMTQsMjhcIiAvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9zdmc+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvYT4nLFxyXG5cclxuICAgICAgICAgICAgem9vbSA6ICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtem9vbSBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLXpvb21cIiB0aXRsZT1cInt7Wk9PTX19XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnIHZpZXdCb3g9XCIwIDAgNDAgNDBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8cGF0aCBkPVwiTSAxOCwxNyBtLTgsMCBhIDgsOCAwIDEsMCAxNiwwIGEgOCw4IDAgMSwwIC0xNiwwIE0yNSwyMyBMMzEsMjkgTDI1LDIzXCIgLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvc3ZnPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nLFxyXG5cclxuICAgICAgICAgICAgY2xvc2UgOiAnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LWNsb3NlIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tY2xvc2VcIiB0aXRsZT1cInt7Q0xPU0V9fVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyB2aWV3Qm94PVwiMCAwIDQwIDQwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHBhdGggZD1cIk0xMCwxMCBMMzAsMzAgTTMwLDEwIEwxMCwzMFwiIC8+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L3N2Zz4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyxcclxuXHJcbiAgICAgICAgICAgIC8vIFRoaXMgc21hbGwgY2xvc2UgYnV0dG9uIHdpbGwgYmUgYXBwZW5kZWQgdG8geW91ciBodG1sL2lubGluZS9hamF4IGNvbnRlbnQgYnkgZGVmYXVsdCxcclxuICAgICAgICAgICAgLy8gaWYgXCJzbWFsbEJ0blwiIG9wdGlvbiBpcyBub3Qgc2V0IHRvIGZhbHNlXHJcbiAgICAgICAgICAgIHNtYWxsQnRuICAgOiAnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LWNsb3NlIGNsYXNzPVwiZmFuY3lib3gtY2xvc2Utc21hbGxcIiB0aXRsZT1cInt7Q0xPU0V9fVwiPjwvYnV0dG9uPicsXHJcblxyXG4gICAgICAgICAgICAvLyBBcnJvd3NcclxuICAgICAgICAgICAgYXJyb3dMZWZ0IDogJzxidXR0b24gZGF0YS1mYW5jeWJveC1wcmV2IGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tYXJyb3dfbGVmdFwiIHRpdGxlPVwie3tQUkVWfX1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnIHZpZXdCb3g9XCIwIDAgNDAgNDBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwYXRoIGQ9XCJNMTAsMjAgTDMwLDIwIEwxMCwyMCBMMTgsMjggTDEwLDIwIEwxOCwxMiBMMTAsMjBcIj48L3BhdGg+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9zdmc+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPicsXHJcblxyXG4gICAgICAgICAgICBhcnJvd1JpZ2h0IDogJzxidXR0b24gZGF0YS1mYW5jeWJveC1uZXh0IGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tYXJyb3dfcmlnaHRcIiB0aXRsZT1cInt7TkVYVH19XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmcgdmlld0JveD1cIjAgMCA0MCA0MFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwYXRoIGQ9XCJNMzAsMjAgTDEwLDIwIEwzMCwyMCBMMjIsMjggTDMwLDIwIEwyMiwxMiBMMzAsMjBcIj48L3BhdGg+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvc3ZnPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIENvbnRhaW5lciBpcyBpbmplY3RlZCBpbnRvIHRoaXMgZWxlbWVudFxyXG4gICAgICAgIHBhcmVudEVsIDogJ2JvZHknLFxyXG5cclxuXHJcbiAgICAgICAgLy8gRm9jdXMgaGFuZGxpbmdcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAvLyBUcnkgdG8gZm9jdXMgb24gdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50IGFmdGVyIG9wZW5pbmdcclxuICAgICAgICBhdXRvRm9jdXMgOiBmYWxzZSxcclxuXHJcbiAgICAgICAgLy8gUHV0IGZvY3VzIGJhY2sgdG8gYWN0aXZlIGVsZW1lbnQgYWZ0ZXIgY2xvc2luZ1xyXG4gICAgICAgIGJhY2tGb2N1cyA6IHRydWUsXHJcblxyXG4gICAgICAgIC8vIERvIG5vdCBsZXQgdXNlciB0byBmb2N1cyBvbiBlbGVtZW50IG91dHNpZGUgbW9kYWwgY29udGVudFxyXG4gICAgICAgIHRyYXBGb2N1cyA6IHRydWUsXHJcblxyXG5cclxuICAgICAgICAvLyBNb2R1bGUgc3BlY2lmaWMgb3B0aW9uc1xyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGZ1bGxTY3JlZW4gOiB7XHJcbiAgICAgICAgICAgIGF1dG9TdGFydCA6IGZhbHNlLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIFNldCBgdG91Y2g6IGZhbHNlYCB0byBkaXNhYmxlIGRyYWdnaW5nL3N3aXBpbmdcclxuICAgICAgICB0b3VjaCA6IHtcclxuICAgICAgICAgICAgdmVydGljYWwgOiB0cnVlLCAgLy8gQWxsb3cgdG8gZHJhZyBjb250ZW50IHZlcnRpY2FsbHlcclxuICAgICAgICAgICAgbW9tZW50dW0gOiB0cnVlICAgLy8gQ29udGludWUgbW92ZW1lbnQgYWZ0ZXIgcmVsZWFzaW5nIG1vdXNlL3RvdWNoIHdoZW4gcGFubmluZ1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIEhhc2ggdmFsdWUgd2hlbiBpbml0aWFsaXppbmcgbWFudWFsbHksXHJcbiAgICAgICAgLy8gc2V0IGBmYWxzZWAgdG8gZGlzYWJsZSBoYXNoIGNoYW5nZVxyXG4gICAgICAgIGhhc2ggOiBudWxsLFxyXG5cclxuICAgICAgICAvLyBDdXN0b21pemUgb3IgYWRkIG5ldyBtZWRpYSB0eXBlc1xyXG4gICAgICAgIC8vIEV4YW1wbGU6XHJcbiAgICAgICAgLypcclxuICAgICAgICBtZWRpYSA6IHtcclxuICAgICAgICAgICAgeW91dHViZSA6IHtcclxuICAgICAgICAgICAgICAgIHBhcmFtcyA6IHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheSA6IDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAqL1xyXG4gICAgICAgIG1lZGlhIDoge30sXHJcblxyXG4gICAgICAgIHNsaWRlU2hvdyA6IHtcclxuICAgICAgICAgICAgYXV0b1N0YXJ0IDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNwZWVkICAgICA6IDQwMDBcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0aHVtYnMgOiB7XHJcblx0XHRcdGF1dG9TdGFydCAgIDogZmFsc2UsICAgICAgICAgICAgICAgICAgLy8gRGlzcGxheSB0aHVtYm5haWxzIG9uIG9wZW5pbmdcclxuXHRcdFx0aGlkZU9uQ2xvc2UgOiB0cnVlLCAgICAgICAgICAgICAgICAgICAvLyBIaWRlIHRodW1ibmFpbCBncmlkIHdoZW4gY2xvc2luZyBhbmltYXRpb24gc3RhcnRzXHJcblx0XHRcdHBhcmVudEVsICAgIDogJy5mYW5jeWJveC1jb250YWluZXInLCAgLy8gQ29udGFpbmVyIGlzIGluamVjdGVkIGludG8gdGhpcyBlbGVtZW50XHJcblx0XHRcdGF4aXMgICAgICAgIDogJ3knICAgICAgICAgICAgICAgICAgICAgLy8gVmVydGljYWwgKHkpIG9yIGhvcml6b250YWwgKHgpIHNjcm9sbGluZ1xyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgLy8gQ2FsbGJhY2tzXHJcbiAgICAgICAgLy89PT09PT09PT09XHJcblxyXG4gICAgICAgIC8vIFNlZSBEb2N1bWVudGF0aW9uL0FQSS9FdmVudHMgZm9yIG1vcmUgaW5mb3JtYXRpb25cclxuICAgICAgICAvLyBFeGFtcGxlOlxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICAgIGFmdGVyU2hvdzogZnVuY3Rpb24oIGluc3RhbmNlLCBjdXJyZW50ICkge1xyXG4gICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyggJ0NsaWNrZWQgZWxlbWVudDonICk7XHJcbiAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCBjdXJyZW50Lm9wdHMuJG9yaWcgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICovXHJcblxyXG4gICAgICAgIG9uSW5pdCAgICAgICA6ICQubm9vcCwgIC8vIFdoZW4gaW5zdGFuY2UgaGFzIGJlZW4gaW5pdGlhbGl6ZWRcclxuXHJcbiAgICAgICAgYmVmb3JlTG9hZCAgIDogJC5ub29wLCAgLy8gQmVmb3JlIHRoZSBjb250ZW50IG9mIGEgc2xpZGUgaXMgYmVpbmcgbG9hZGVkXHJcbiAgICAgICAgYWZ0ZXJMb2FkICAgIDogJC5ub29wLCAgLy8gV2hlbiB0aGUgY29udGVudCBvZiBhIHNsaWRlIGlzIGRvbmUgbG9hZGluZ1xyXG5cclxuICAgICAgICBiZWZvcmVTaG93ICAgOiAkLm5vb3AsICAvLyBCZWZvcmUgb3BlbiBhbmltYXRpb24gc3RhcnRzXHJcbiAgICAgICAgYWZ0ZXJTaG93ICAgIDogJC5ub29wLCAgLy8gV2hlbiBjb250ZW50IGlzIGRvbmUgbG9hZGluZyBhbmQgYW5pbWF0aW5nXHJcblxyXG4gICAgICAgIGJlZm9yZUNsb3NlICA6ICQubm9vcCwgIC8vIEJlZm9yZSB0aGUgaW5zdGFuY2UgYXR0ZW1wdHMgdG8gY2xvc2UuIFJldHVybiBmYWxzZSB0byBjYW5jZWwgdGhlIGNsb3NlLlxyXG4gICAgICAgIGFmdGVyQ2xvc2UgICA6ICQubm9vcCwgIC8vIEFmdGVyIGluc3RhbmNlIGhhcyBiZWVuIGNsb3NlZFxyXG5cclxuICAgICAgICBvbkFjdGl2YXRlICAgOiAkLm5vb3AsICAvLyBXaGVuIGluc3RhbmNlIGlzIGJyb3VnaHQgdG8gZnJvbnRcclxuICAgICAgICBvbkRlYWN0aXZhdGUgOiAkLm5vb3AsICAvLyBXaGVuIG90aGVyIGluc3RhbmNlIGhhcyBiZWVuIGFjdGl2YXRlZFxyXG5cclxuXHJcbiAgICAgICAgLy8gSW50ZXJhY3Rpb25cclxuICAgICAgICAvLyA9PT09PT09PT09PVxyXG5cclxuICAgICAgICAvLyBVc2Ugb3B0aW9ucyBiZWxvdyB0byBjdXN0b21pemUgdGFrZW4gYWN0aW9uIHdoZW4gdXNlciBjbGlja3Mgb3IgZG91YmxlIGNsaWNrcyBvbiB0aGUgZmFuY3lCb3ggYXJlYSxcclxuICAgICAgICAvLyBlYWNoIG9wdGlvbiBjYW4gYmUgc3RyaW5nIG9yIG1ldGhvZCB0aGF0IHJldHVybnMgdmFsdWUuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBQb3NzaWJsZSB2YWx1ZXM6XHJcbiAgICAgICAgLy8gICBcImNsb3NlXCIgICAgICAgICAgIC0gY2xvc2UgaW5zdGFuY2VcclxuICAgICAgICAvLyAgIFwibmV4dFwiICAgICAgICAgICAgLSBtb3ZlIHRvIG5leHQgZ2FsbGVyeSBpdGVtXHJcbiAgICAgICAgLy8gICBcIm5leHRPckNsb3NlXCIgICAgIC0gbW92ZSB0byBuZXh0IGdhbGxlcnkgaXRlbSBvciBjbG9zZSBpZiBnYWxsZXJ5IGhhcyBvbmx5IG9uZSBpdGVtXHJcbiAgICAgICAgLy8gICBcInRvZ2dsZUNvbnRyb2xzXCIgIC0gc2hvdy9oaWRlIGNvbnRyb2xzXHJcbiAgICAgICAgLy8gICBcInpvb21cIiAgICAgICAgICAgIC0gem9vbSBpbWFnZSAoaWYgbG9hZGVkKVxyXG4gICAgICAgIC8vICAgZmFsc2UgICAgICAgICAgICAgLSBkbyBub3RoaW5nXHJcblxyXG4gICAgICAgIC8vIENsaWNrZWQgb24gdGhlIGNvbnRlbnRcclxuICAgICAgICBjbGlja0NvbnRlbnQgOiBmdW5jdGlvbiggY3VycmVudCwgZXZlbnQgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50LnR5cGUgPT09ICdpbWFnZScgPyAnem9vbScgOiBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBDbGlja2VkIG9uIHRoZSBzbGlkZVxyXG4gICAgICAgIGNsaWNrU2xpZGUgOiAnY2xvc2UnLFxyXG5cclxuICAgICAgICAvLyBDbGlja2VkIG9uIHRoZSBiYWNrZ3JvdW5kIChiYWNrZHJvcCkgZWxlbWVudFxyXG4gICAgICAgIGNsaWNrT3V0c2lkZSA6ICdjbG9zZScsXHJcblxyXG4gICAgICAgIC8vIFNhbWUgYXMgcHJldmlvdXMgdHdvLCBidXQgZm9yIGRvdWJsZSBjbGlja1xyXG4gICAgICAgIGRibGNsaWNrQ29udGVudCA6IGZhbHNlLFxyXG4gICAgICAgIGRibGNsaWNrU2xpZGUgICA6IGZhbHNlLFxyXG4gICAgICAgIGRibGNsaWNrT3V0c2lkZSA6IGZhbHNlLFxyXG5cclxuXHJcbiAgICAgICAgLy8gQ3VzdG9tIG9wdGlvbnMgd2hlbiBtb2JpbGUgZGV2aWNlIGlzIGRldGVjdGVkXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIG1vYmlsZSA6IHtcclxuICAgICAgICAgICAgbWFyZ2luIDogMCxcclxuXHJcbiAgICAgICAgICAgIGNsaWNrQ29udGVudCA6IGZ1bmN0aW9uKCBjdXJyZW50LCBldmVudCApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50LnR5cGUgPT09ICdpbWFnZScgPyAndG9nZ2xlQ29udHJvbHMnIDogZmFsc2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNsaWNrU2xpZGUgOiBmdW5jdGlvbiggY3VycmVudCwgZXZlbnQgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudC50eXBlID09PSAnaW1hZ2UnID8gJ3RvZ2dsZUNvbnRyb2xzJyA6ICdjbG9zZSc7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRibGNsaWNrQ29udGVudCA6IGZ1bmN0aW9uKCBjdXJyZW50LCBldmVudCApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50LnR5cGUgPT09ICdpbWFnZScgPyAnem9vbScgOiBmYWxzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGJsY2xpY2tTbGlkZSA6IGZ1bmN0aW9uKCBjdXJyZW50LCBldmVudCApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50LnR5cGUgPT09ICdpbWFnZScgPyAnem9vbScgOiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBJbnRlcm5hdGlvbmFsaXphdGlvblxyXG4gICAgICAgIC8vID09PT09PT09PT09PVxyXG5cclxuICAgICAgICBsYW5nIDogJ2VuJyxcclxuICAgICAgICBpMThuIDoge1xyXG4gICAgICAgICAgICAnZW4nIDoge1xyXG4gICAgICAgICAgICAgICAgQ0xPU0UgICAgICAgOiAnQ2xvc2UnLFxyXG4gICAgICAgICAgICAgICAgTkVYVCAgICAgICAgOiAnTmV4dCcsXHJcbiAgICAgICAgICAgICAgICBQUkVWICAgICAgICA6ICdQcmV2aW91cycsXHJcbiAgICAgICAgICAgICAgICBFUlJPUiAgICAgICA6ICdUaGUgcmVxdWVzdGVkIGNvbnRlbnQgY2Fubm90IGJlIGxvYWRlZC4gPGJyLz4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4nLFxyXG4gICAgICAgICAgICAgICAgUExBWV9TVEFSVCAgOiAnU3RhcnQgc2xpZGVzaG93JyxcclxuICAgICAgICAgICAgICAgIFBMQVlfU1RPUCAgIDogJ1BhdXNlIHNsaWRlc2hvdycsXHJcbiAgICAgICAgICAgICAgICBGVUxMX1NDUkVFTiA6ICdGdWxsIHNjcmVlbicsXHJcbiAgICAgICAgICAgICAgICBUSFVNQlMgICAgICA6ICdUaHVtYm5haWxzJyxcclxuICAgICAgICAgICAgICAgIERPV05MT0FEICAgIDogJ0Rvd25sb2FkJyxcclxuICAgICAgICAgICAgICAgIFNIQVJFICAgICAgIDogJ1NoYXJlJyxcclxuICAgICAgICAgICAgICAgIFpPT00gICAgICAgIDogJ1pvb20nXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdkZScgOiB7XHJcbiAgICAgICAgICAgICAgICBDTE9TRSAgICAgICA6ICdTY2hsaWVzc2VuJyxcclxuICAgICAgICAgICAgICAgIE5FWFQgICAgICAgIDogJ1dlaXRlcicsXHJcbiAgICAgICAgICAgICAgICBQUkVWICAgICAgICA6ICdadXLDvGNrJyxcclxuICAgICAgICAgICAgICAgIEVSUk9SICAgICAgIDogJ0RpZSBhbmdlZm9yZGVydGVuIERhdGVuIGtvbm50ZW4gbmljaHQgZ2VsYWRlbiB3ZXJkZW4uIDxici8+IEJpdHRlIHZlcnN1Y2hlbiBTaWUgZXMgc3DDpHRlciBub2NobWFsLicsXHJcbiAgICAgICAgICAgICAgICBQTEFZX1NUQVJUICA6ICdEaWFzY2hhdSBzdGFydGVuJyxcclxuICAgICAgICAgICAgICAgIFBMQVlfU1RPUCAgIDogJ0RpYXNjaGF1IGJlZW5kZW4nLFxyXG4gICAgICAgICAgICAgICAgRlVMTF9TQ1JFRU4gOiAnVm9sbGJpbGQnLFxyXG4gICAgICAgICAgICAgICAgVEhVTUJTICAgICAgOiAnVm9yc2NoYXViaWxkZXInLFxyXG4gICAgICAgICAgICAgICAgRE9XTkxPQUQgICAgOiAnSGVydW50ZXJsYWRlbicsXHJcbiAgICAgICAgICAgICAgICBTSEFSRSAgICAgICA6ICdUZWlsZW4nLFxyXG4gICAgICAgICAgICAgICAgWk9PTSAgICAgICAgOiAnTWHDn3N0YWInXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBGZXcgdXNlZnVsIHZhcmlhYmxlcyBhbmQgbWV0aG9kc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB2YXIgJFcgPSAkKHdpbmRvdyk7XHJcbiAgICB2YXIgJEQgPSAkKGRvY3VtZW50KTtcclxuXHJcbiAgICB2YXIgY2FsbGVkID0gMDtcclxuXHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgYW4gb2JqZWN0IGlzIGEgalF1ZXJ5IG9iamVjdCBhbmQgbm90IGEgbmF0aXZlIEphdmFTY3JpcHQgb2JqZWN0XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB2YXIgaXNRdWVyeSA9IGZ1bmN0aW9uICggb2JqICkge1xyXG4gICAgICAgIHJldHVybiBvYmogJiYgb2JqLmhhc093blByb3BlcnR5ICYmIG9iaiBpbnN0YW5jZW9mICQ7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvLyBIYW5kbGUgbXVsdGlwbGUgYnJvd3NlcnMgZm9yIFwicmVxdWVzdEFuaW1hdGlvbkZyYW1lXCIgYW5kIFwiY2FuY2VsQW5pbWF0aW9uRnJhbWVcIlxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHZhciByZXF1ZXN0QUZyYW1lID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgd2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICAgICAgICAgIC8vIGlmIGFsbCBlbHNlIGZhaWxzLCB1c2Ugc2V0VGltZW91dFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgIH0pKCk7XHJcblxyXG5cclxuICAgIC8vIERldGVjdCB0aGUgc3VwcG9ydGVkIHRyYW5zaXRpb24tZW5kIGV2ZW50IHByb3BlcnR5IG5hbWVcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB2YXIgdHJhbnNpdGlvbkVuZCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHQsIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZha2VlbGVtZW50XCIpO1xyXG5cclxuICAgICAgICB2YXIgdHJhbnNpdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIFwidHJhbnNpdGlvblwiICAgICAgOiBcInRyYW5zaXRpb25lbmRcIixcclxuICAgICAgICAgICAgXCJPVHJhbnNpdGlvblwiICAgICA6IFwib1RyYW5zaXRpb25FbmRcIixcclxuICAgICAgICAgICAgXCJNb3pUcmFuc2l0aW9uXCIgICA6IFwidHJhbnNpdGlvbmVuZFwiLFxyXG4gICAgICAgICAgICBcIldlYmtpdFRyYW5zaXRpb25cIjogXCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmb3IgKHQgaW4gdHJhbnNpdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKGVsLnN0eWxlW3RdICE9PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zaXRpb25zW3RdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJ3RyYW5zaXRpb25lbmQnO1xyXG4gICAgfSkoKTtcclxuXHJcblxyXG4gICAgLy8gRm9yY2UgcmVkcmF3IG9uIGFuIGVsZW1lbnQuXHJcbiAgICAvLyBUaGlzIGhlbHBzIGluIGNhc2VzIHdoZXJlIHRoZSBicm93c2VyIGRvZXNuJ3QgcmVkcmF3IGFuIHVwZGF0ZWQgZWxlbWVudCBwcm9wZXJseS5cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHZhciBmb3JjZVJlZHJhdyA9IGZ1bmN0aW9uKCAkZWwgKSB7XHJcbiAgICAgICAgcmV0dXJuICggJGVsICYmICRlbC5sZW5ndGggJiYgJGVsWzBdLm9mZnNldEhlaWdodCApO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gQ2xhc3MgZGVmaW5pdGlvblxyXG4gICAgLy8gPT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHZhciBGYW5jeUJveCA9IGZ1bmN0aW9uKCBjb250ZW50LCBvcHRzLCBpbmRleCApIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHNlbGYub3B0cyA9ICQuZXh0ZW5kKCB0cnVlLCB7IGluZGV4IDogaW5kZXggfSwgJC5mYW5jeWJveC5kZWZhdWx0cywgb3B0cyB8fCB7fSApO1xyXG5cclxuICAgICAgICBpZiAoICQuZmFuY3lib3guaXNNb2JpbGUgKSB7XHJcbiAgICAgICAgICAgIHNlbGYub3B0cyA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwgc2VsZi5vcHRzLCBzZWxmLm9wdHMubW9iaWxlICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFeGNsdWRlIGJ1dHRvbnMgb3B0aW9uIGZyb20gZGVlcCBtZXJnaW5nXHJcbiAgICAgICAgaWYgKCBvcHRzICYmICQuaXNBcnJheSggb3B0cy5idXR0b25zICkgKSB7XHJcbiAgICAgICAgICAgIHNlbGYub3B0cy5idXR0b25zID0gb3B0cy5idXR0b25zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi5pZCAgICA9IHNlbGYub3B0cy5pZCB8fCArK2NhbGxlZDtcclxuICAgICAgICBzZWxmLmdyb3VwID0gW107XHJcblxyXG4gICAgICAgIHNlbGYuY3VyckluZGV4ID0gcGFyc2VJbnQoIHNlbGYub3B0cy5pbmRleCwgMTAgKSB8fCAwO1xyXG4gICAgICAgIHNlbGYucHJldkluZGV4ID0gbnVsbDtcclxuXHJcbiAgICAgICAgc2VsZi5wcmV2UG9zID0gbnVsbDtcclxuICAgICAgICBzZWxmLmN1cnJQb3MgPSAwO1xyXG5cclxuICAgICAgICBzZWxmLmZpcnN0UnVuID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGdyb3VwIGVsZW1lbnRzIGZyb20gb3JpZ2luYWwgaXRlbSBjb2xsZWN0aW9uXHJcbiAgICAgICAgc2VsZi5jcmVhdGVHcm91cCggY29udGVudCApO1xyXG5cclxuICAgICAgICBpZiAoICFzZWxmLmdyb3VwLmxlbmd0aCApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2F2ZSBsYXN0IGFjdGl2ZSBlbGVtZW50IGFuZCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxyXG4gICAgICAgIHNlbGYuJGxhc3RGb2N1cyA9ICQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuYmx1cigpO1xyXG5cclxuICAgICAgICAvLyBDb2xsZWN0aW9uIG9mIGdhbGxlcnkgb2JqZWN0c1xyXG4gICAgICAgIHNlbGYuc2xpZGVzID0ge307XHJcblxyXG4gICAgICAgIHNlbGYuaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmV4dGVuZChGYW5jeUJveC5wcm90b3R5cGUsIHtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIERPTSBzdHJ1Y3R1cmVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBpbml0IDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIGZpcnN0SXRlbSAgICAgID0gc2VsZi5ncm91cFsgc2VsZi5jdXJySW5kZXggXSxcclxuICAgICAgICAgICAgICAgIGZpcnN0SXRlbU9wdHMgID0gZmlyc3RJdGVtLm9wdHMsXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxiYXJXaWR0aCA9ICQuZmFuY3lib3guc2Nyb2xsYmFyV2lkdGgsXHJcbiAgICAgICAgICAgICAgICAkc2Nyb2xsRGl2LFxyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIGJ1dHRvblN0cjtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuc2Nyb2xsVG9wICA9ICRELnNjcm9sbFRvcCgpO1xyXG4gICAgICAgICAgICBzZWxmLnNjcm9sbExlZnQgPSAkRC5zY3JvbGxMZWZ0KCk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gSGlkZSBzY3JvbGxiYXJzXHJcbiAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgaWYgKCAhJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICQoICdib2R5JyApLmFkZENsYXNzKCAnZmFuY3lib3gtYWN0aXZlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlPUyBoYWNrXHJcbiAgICAgICAgICAgICAgICBpZiAoIC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICF3aW5kb3cuTVNTdHJlYW0gKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlPUyBoYXMgcHJvYmxlbXMgZm9yIGlucHV0IGVsZW1lbnRzIGluc2lkZSBmaXhlZCBjb250YWluZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSB3b3JrYXJvdW5kIGlzIHRvIGFwcGx5IGBwb3NpdGlvbjogZml4ZWRgIHRvIGA8Ym9keT5gIGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdW5mb3J0dW5hdGVseSwgdGhpcyBtYWtlcyBpdCBsb3NlIHRoZSBzY3JvbGxiYXJzIGFuZCBmb3JjZXMgYWRkcmVzcyBiYXIgdG8gYXBwZWFyLlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIGZpcnN0SXRlbS50eXBlICE9PSAnaW1hZ2UnICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCAnYm9keScgKS5jc3MoICd0b3AnLCAkKCAnYm9keScgKS5zY3JvbGxUb3AoKSAqIC0xICkuYWRkQ2xhc3MoICdmYW5jeWJveC1pb3NmaXgnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICEkLmZhbmN5Ym94LmlzTW9iaWxlICYmIGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNjcm9sbGJhcldpZHRoID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY3JvbGxEaXYgPSAkKCc8ZGl2IHN0eWxlPVwid2lkdGg6NTBweDtoZWlnaHQ6NTBweDtvdmVyZmxvdzpzY3JvbGw7XCIgLz4nKS5hcHBlbmRUbyggJ2JvZHknICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxiYXJXaWR0aCA9ICQuZmFuY3lib3guc2Nyb2xsYmFyV2lkdGggPSAkc2Nyb2xsRGl2WzBdLm9mZnNldFdpZHRoIC0gJHNjcm9sbERpdlswXS5jbGllbnRXaWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY3JvbGxEaXYucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKCAnaGVhZCcgKS5hcHBlbmQoICc8c3R5bGUgaWQ9XCJmYW5jeWJveC1zdHlsZS1ub3Njcm9sbFwiIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5jb21wZW5zYXRlLWZvci1zY3JvbGxiYXIgeyBtYXJnaW4tcmlnaHQ6ICcgKyBzY3JvbGxiYXJXaWR0aCArICdweDsgfTwvc3R5bGU+JyApO1xyXG4gICAgICAgICAgICAgICAgICAgICQoICdib2R5JyApLmFkZENsYXNzKCAnY29tcGVuc2F0ZS1mb3Itc2Nyb2xsYmFyJyApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gQnVpbGQgaHRtbCBtYXJrdXAgYW5kIHNldCByZWZlcmVuY2VzXHJcbiAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgLy8gQnVpbGQgaHRtbCBjb2RlIGZvciBidXR0b25zIGFuZCBpbnNlcnQgaW50byBtYWluIHRlbXBsYXRlXHJcbiAgICAgICAgICAgIGJ1dHRvblN0ciA9ICcnO1xyXG5cclxuICAgICAgICAgICAgJC5lYWNoKCBmaXJzdEl0ZW1PcHRzLmJ1dHRvbnMsIGZ1bmN0aW9uKCBpbmRleCwgdmFsdWUgKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b25TdHIgKz0gKCBmaXJzdEl0ZW1PcHRzLmJ0blRwbFsgdmFsdWUgXSB8fCAnJyApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBtYXJrdXAgZnJvbSBiYXNlIHRlbXBsYXRlLCBpdCB3aWxsIGJlIGluaXRpYWxseSBoaWRkZW4gdG9cclxuICAgICAgICAgICAgLy8gYXZvaWQgdW5uZWNlc3Nhcnkgd29yayBsaWtlIHBhaW50aW5nIHdoaWxlIGluaXRpYWxpemluZyBpcyBub3QgY29tcGxldGVcclxuICAgICAgICAgICAgJGNvbnRhaW5lciA9ICQoXHJcbiAgICAgICAgICAgICAgICBzZWxmLnRyYW5zbGF0ZSggc2VsZixcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdEl0ZW1PcHRzLmJhc2VUcGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoICdcXHtcXHtidXR0b25zXFx9XFx9JywgYnV0dG9uU3RyIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoICdcXHtcXHthcnJvd3NcXH1cXH0nLCBmaXJzdEl0ZW1PcHRzLmJ0blRwbC5hcnJvd0xlZnQgKyBmaXJzdEl0ZW1PcHRzLmJ0blRwbC5hcnJvd1JpZ2h0IClcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoICdpZCcsICdmYW5jeWJveC1jb250YWluZXItJyArIHNlbGYuaWQgKVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnZmFuY3lib3gtaXMtaGlkZGVuJyApXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoIGZpcnN0SXRlbU9wdHMuYmFzZUNsYXNzIClcclxuICAgICAgICAgICAgICAgIC5kYXRhKCAnRmFuY3lCb3gnLCBzZWxmIClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyggZmlyc3RJdGVtT3B0cy5wYXJlbnRFbCApO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIG9iamVjdCBob2xkaW5nIHJlZmVyZW5jZXMgdG8galF1ZXJ5IHdyYXBwZWQgbm9kZXNcclxuICAgICAgICAgICAgc2VsZi4kcmVmcyA9IHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA6ICRjb250YWluZXJcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIFsgJ2JnJywgJ2lubmVyJywgJ2luZm9iYXInLCAndG9vbGJhcicsICdzdGFnZScsICdjYXB0aW9uJywgJ25hdmlnYXRpb24nIF0uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLiRyZWZzWyBpdGVtIF0gPSAkY29udGFpbmVyLmZpbmQoICcuZmFuY3lib3gtJyArIGl0ZW0gKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnRyaWdnZXIoICdvbkluaXQnICk7XHJcblxyXG4gICAgICAgICAgICAvLyBFbmFibGUgZXZlbnRzLCBkZWFjdGl2ZSBwcmV2aW91cyBpbnN0YW5jZXNcclxuICAgICAgICAgICAgc2VsZi5hY3RpdmF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gQnVpbGQgc2xpZGVzLCBsb2FkIGFuZCByZXZlYWwgY29udGVudFxyXG4gICAgICAgICAgICBzZWxmLmp1bXBUbyggc2VsZi5jdXJySW5kZXggKTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gU2ltcGxlIGkxOG4gc3VwcG9ydCAtIHJlcGxhY2VzIG9iamVjdCBrZXlzIGZvdW5kIGluIHRlbXBsYXRlXHJcbiAgICAgICAgLy8gd2l0aCBjb3JyZXNwb25kaW5nIHZhbHVlc1xyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICB0cmFuc2xhdGUgOiBmdW5jdGlvbiggb2JqLCBzdHIgKSB7XHJcbiAgICAgICAgICAgIHZhciBhcnIgPSBvYmoub3B0cy5pMThuWyBvYmoub3B0cy5sYW5nIF07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1xce1xceyhcXHcrKVxcfVxcfS9nLCBmdW5jdGlvbihtYXRjaCwgbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJyW25dO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2g7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgYXJyYXkgb2YgZ2FsbHkgaXRlbSBvYmplY3RzXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgZWFjaCBvYmplY3QgaGFzIHZhbGlkIHR5cGUgYW5kIGNvbnRlbnRcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBjcmVhdGVHcm91cCA6IGZ1bmN0aW9uICggY29udGVudCApIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGl0ZW1zID0gJC5tYWtlQXJyYXkoIGNvbnRlbnQgKTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaChpdGVtcywgZnVuY3Rpb24oIGksIGl0ZW0gKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqICA9IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMgPSB7fSxcclxuICAgICAgICAgICAgICAgICAgICAkaXRlbSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNyYyxcclxuICAgICAgICAgICAgICAgICAgICBzcmNQYXJ0cztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTdGVwIDEgLSBNYWtlIHN1cmUgd2UgaGF2ZSBhbiBvYmplY3RcclxuICAgICAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggJC5pc1BsYWluT2JqZWN0KCBpdGVtICkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIHByb2JhYmx5IGhhdmUgbWFudWFsIHVzYWdlIGhlcmUsIHNvbWV0aGluZyBsaWtlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gJC5mYW5jeWJveC5vcGVuKCBbIHsgc3JjIDogXCJpbWFnZS5qcGdcIiwgdHlwZSA6IFwiaW1hZ2VcIiB9IF0gKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBvYmogID0gaXRlbTtcclxuICAgICAgICAgICAgICAgICAgICBvcHRzID0gaXRlbS5vcHRzIHx8IGl0ZW07XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggJC50eXBlKCBpdGVtICkgPT09ICdvYmplY3QnICYmICQoIGl0ZW0gKS5sZW5ndGggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEhlcmUgd2UgcHJvYmFibHkgaGF2ZSBqUXVlcnkgY29sbGVjdGlvbiByZXR1cm5lZCBieSBzb21lIHNlbGVjdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgJGl0ZW0gPSAkKCBpdGVtICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMgPSAkaXRlbS5kYXRhKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0cyA9ICQuZXh0ZW5kKCB7fSwgb3B0cywgb3B0cy5vcHRpb25zIHx8IHt9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEhlcmUgd2Ugc3RvcmUgY2xpY2tlZCBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0cy4kb3JpZyA9ICRpdGVtO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBvYmouc3JjID0gb3B0cy5zcmMgfHwgJGl0ZW0uYXR0ciggJ2hyZWYnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtZSB0aGF0IHNpbXBsZSBzeW50YXggaXMgdXNlZCwgZm9yIGV4YW1wbGU6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICBgJC5mYW5jeWJveC5vcGVuKCAkKFwiI3Rlc3RcIiksIHt9ICk7YFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggIW9iai50eXBlICYmICFvYmouc3JjICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoudHlwZSA9ICdpbmxpbmUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouc3JjICA9IGl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtZSB3ZSBoYXZlIGEgc2ltcGxlIGh0bWwgY29kZSwgZm9yIGV4YW1wbGU6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAkLmZhbmN5Ym94Lm9wZW4oICc8ZGl2PjxoMT5IaSE8L2gxPjwvZGl2PicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlIDogJ2h0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmMgIDogaXRlbSArICcnXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRWFjaCBnYWxsZXJ5IG9iamVjdCBoYXMgZnVsbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnNcclxuICAgICAgICAgICAgICAgIG9iai5vcHRzID0gJC5leHRlbmQoIHRydWUsIHt9LCBzZWxmLm9wdHMsIG9wdHMgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBEbyBub3QgbWVyZ2UgYnV0dG9ucyBhcnJheVxyXG4gICAgICAgICAgICAgICAgaWYgKCAkLmlzQXJyYXkoIG9wdHMuYnV0dG9ucyApICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRzLmJ1dHRvbnMgPSBvcHRzLmJ1dHRvbnM7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFN0ZXAgMiAtIE1ha2Ugc3VyZSB3ZSBoYXZlIGNvbnRlbnQgdHlwZSwgaWYgbm90IC0gdHJ5IHRvIGd1ZXNzXHJcbiAgICAgICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgICAgIHR5cGUgPSBvYmoudHlwZSB8fCBvYmoub3B0cy50eXBlO1xyXG4gICAgICAgICAgICAgICAgc3JjICA9IG9iai5zcmMgfHwgJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhdHlwZSAmJiBzcmMgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzcmMubWF0Y2goLyheZGF0YTppbWFnZVxcL1thLXowLTkrXFwvPV0qLCl8KFxcLihqcChlfGd8ZWcpfGdpZnxwbmd8Ym1wfHdlYnB8c3ZnfGljbykoKFxcP3wjKS4qKT8kKS9pKSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdpbWFnZSc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHNyYy5tYXRjaCgvXFwuKHBkZikoKFxcP3wjKS4qKT8kL2kpICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ3BkZic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHNyYy5jaGFyQXQoMCkgPT09ICcjJyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdpbmxpbmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIHR5cGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLnR5cGUgPSB0eXBlO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCAnb2JqZWN0TmVlZHNUeXBlJywgb2JqICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFN0ZXAgMyAtIFNvbWUgYWRqdXN0bWVudHNcclxuICAgICAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAgICAgICBvYmouaW5kZXggPSBzZWxmLmdyb3VwLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiAkb3JpZyBhbmQgJHRodW1iIG9iamVjdHMgZXhpc3RcclxuICAgICAgICAgICAgICAgIGlmICggb2JqLm9wdHMuJG9yaWcgJiYgIW9iai5vcHRzLiRvcmlnLmxlbmd0aCApIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqLm9wdHMuJG9yaWc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhb2JqLm9wdHMuJHRodW1iICYmIG9iai5vcHRzLiRvcmlnICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRzLiR0aHVtYiA9IG9iai5vcHRzLiRvcmlnLmZpbmQoICdpbWc6Zmlyc3QnICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBvYmoub3B0cy4kdGh1bWIgJiYgIW9iai5vcHRzLiR0aHVtYi5sZW5ndGggKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9iai5vcHRzLiR0aHVtYjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBcImNhcHRpb25cIiBpcyBhIFwic3BlY2lhbFwiIG9wdGlvbiwgaXQgY2FuIGJlIHVzZWQgdG8gY3VzdG9taXplIGNhcHRpb24gcGVyIGdhbGxlcnkgaXRlbSAuLlxyXG4gICAgICAgICAgICAgICAgaWYgKCAkLnR5cGUoIG9iai5vcHRzLmNhcHRpb24gKSA9PT0gJ2Z1bmN0aW9uJyApIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmoub3B0cy5jYXB0aW9uID0gb2JqLm9wdHMuY2FwdGlvbi5hcHBseSggaXRlbSwgWyBzZWxmLCBvYmogXSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggJC50eXBlKCBzZWxmLm9wdHMuY2FwdGlvbiApID09PSAnZnVuY3Rpb24nICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRzLmNhcHRpb24gPSBzZWxmLm9wdHMuY2FwdGlvbi5hcHBseSggaXRlbSwgWyBzZWxmLCBvYmogXSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGNhcHRpb24gYXMgYSBzdHJpbmcgb3IgalF1ZXJ5IG9iamVjdFxyXG4gICAgICAgICAgICAgICAgaWYgKCAhKCBvYmoub3B0cy5jYXB0aW9uIGluc3RhbmNlb2YgJCApICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRzLmNhcHRpb24gPSBvYmoub3B0cy5jYXB0aW9uID09PSB1bmRlZmluZWQgPyAnJyA6IG9iai5vcHRzLmNhcHRpb24gKyAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB1cmwgY29udGFpbnMgXCJmaWx0ZXJcIiB1c2VkIHRvIGZpbHRlciB0aGUgY29udGVudFxyXG4gICAgICAgICAgICAgICAgLy8gRXhhbXBsZTogXCJhamF4Lmh0bWwgI3NvbWV0aGluZ1wiXHJcbiAgICAgICAgICAgICAgICBpZiAoIHR5cGUgPT09ICdhamF4JyApIHtcclxuICAgICAgICAgICAgICAgICAgICBzcmNQYXJ0cyA9IHNyYy5zcGxpdCgvXFxzKy8sIDIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNyY1BhcnRzLmxlbmd0aCA+IDEgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zcmMgPSBzcmNQYXJ0cy5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMuZmlsdGVyID0gc3JjUGFydHMuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBvYmoub3B0cy5zbWFsbEJ0biA9PSAnYXV0bycgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggJC5pbkFycmF5KCB0eXBlLCBbJ2h0bWwnLCAnaW5saW5lJywgJ2FqYXgnXSApID4gLTEgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5vcHRzLnRvb2xiYXIgID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5vcHRzLnNtYWxsQnRuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMuc21hbGxCdG4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0eXBlIGlzIFwicGRmXCIsIHRoZW4gc2ltcGx5IGxvYWQgZmlsZSBpbnRvIGlmcmFtZVxyXG4gICAgICAgICAgICAgICAgaWYgKCB0eXBlID09PSAncGRmJyApIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmoudHlwZSA9ICdpZnJhbWUnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBvYmoub3B0cy5pZnJhbWUucHJlbG9hZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEhpZGUgYWxsIGJ1dHRvbnMgYW5kIGRpc2FibGUgaW50ZXJhY3Rpdml0eSBmb3IgbW9kYWwgaXRlbXNcclxuICAgICAgICAgICAgICAgIGlmICggb2JqLm9wdHMubW9kYWwgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRzID0gJC5leHRlbmQodHJ1ZSwgb2JqLm9wdHMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGJ1dHRvbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb2JhciA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXIgOiAwLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc21hbGxCdG4gOiAwLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZSBrZXlib2FyZCBuYXZpZ2F0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkIDogMCxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc2FibGUgc29tZSBtb2R1bGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlU2hvdyAgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsU2NyZWVuIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJzICAgICA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoICAgICAgOiAwLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZSBjbGljayBldmVudCBoYW5kbGVyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0NvbnRlbnQgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tTbGlkZSAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrT3V0c2lkZSAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYmxjbGlja0NvbnRlbnQgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGJsY2xpY2tTbGlkZSAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRibGNsaWNrT3V0c2lkZSA6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFN0ZXAgNCAtIEFkZCBwcm9jZXNzZWQgb2JqZWN0IHRvIGdyb3VwXHJcbiAgICAgICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuZ3JvdXAucHVzaCggb2JqICk7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIEF0dGFjaCBhbiBldmVudCBoYW5kbGVyIGZ1bmN0aW9ucyBmb3I6XHJcbiAgICAgICAgLy8gICAtIG5hdmlnYXRpb24gYnV0dG9uc1xyXG4gICAgICAgIC8vICAgLSBicm93c2VyIHNjcm9sbGluZywgcmVzaXppbmc7XHJcbiAgICAgICAgLy8gICAtIGZvY3VzaW5nXHJcbiAgICAgICAgLy8gICAtIGtleWJvYXJkXHJcbiAgICAgICAgLy8gICAtIGRldGVjdCBpZGxlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgYWRkRXZlbnRzIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHNlbGYucmVtb3ZlRXZlbnRzKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBNYWtlIG5hdmlnYXRpb24gZWxlbWVudHMgY2xpY2thYmxlXHJcbiAgICAgICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLm9uKCdjbGljay5mYi1jbG9zZScsICdbZGF0YS1mYW5jeWJveC1jbG9zZV0nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuY2xvc2UoIGUgKTtcclxuXHJcbiAgICAgICAgICAgIH0pLm9uKCAnY2xpY2suZmItcHJldiB0b3VjaGVuZC5mYi1wcmV2JywgJ1tkYXRhLWZhbmN5Ym94LXByZXZdJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnByZXZpb3VzKCk7XHJcblxyXG4gICAgICAgICAgICB9KS5vbiggJ2NsaWNrLmZiLW5leHQgdG91Y2hlbmQuZmItbmV4dCcsICdbZGF0YS1mYW5jeWJveC1uZXh0XScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5uZXh0KCk7XHJcblxyXG4gICAgICAgICAgICB9KS5vbiggJ2NsaWNrLmZiJywgJ1tkYXRhLWZhbmN5Ym94LXpvb21dJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQ2xpY2sgaGFuZGxlciBmb3Igem9vbSBidXR0b25cclxuICAgICAgICAgICAgICAgIHNlbGZbIHNlbGYuaXNTY2FsZWREb3duKCkgPyAnc2NhbGVUb0FjdHVhbCcgOiAnc2NhbGVUb0ZpdCcgXSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBIYW5kbGUgcGFnZSBzY3JvbGxpbmcgYW5kIGJyb3dzZXIgcmVzaXppbmdcclxuICAgICAgICAgICAgJFcub24oJ29yaWVudGF0aW9uY2hhbmdlLmZiIHJlc2l6ZS5mYicsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGUgJiYgZS5vcmlnaW5hbEV2ZW50ICYmIGUub3JpZ2luYWxFdmVudC50eXBlID09PSBcInJlc2l6ZVwiICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QUZyYW1lKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMuc3RhZ2UuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRyZWZzLnN0YWdlLnNob3coKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNjAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRyYXAga2V5Ym9hcmQgZm9jdXMgaW5zaWRlIG9mIHRoZSBtb2RhbCwgc28gdGhlIHVzZXIgZG9lcyBub3QgYWNjaWRlbnRhbGx5IHRhYiBvdXRzaWRlIG9mIHRoZSBtb2RhbFxyXG4gICAgICAgICAgICAvLyAoYS5rLmEuIFwiZXNjYXBpbmcgdGhlIG1vZGFsXCIpXHJcbiAgICAgICAgICAgICRELm9uKCdmb2N1c2luLmZiJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gJC5mYW5jeWJveCA/ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKSA6IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBpbnN0YW5jZS5pc0Nsb3NpbmcgfHwgIWluc3RhbmNlLmN1cnJlbnQgfHwgIWluc3RhbmNlLmN1cnJlbnQub3B0cy50cmFwRm9jdXMgfHwgJCggZS50YXJnZXQgKS5oYXNDbGFzcyggJ2ZhbmN5Ym94LWNvbnRhaW5lcicgKSB8fCAkKCBlLnRhcmdldCApLmlzKCBkb2N1bWVudCApICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGluc3RhbmNlICYmICQoIGUudGFyZ2V0ICkuY3NzKCAncG9zaXRpb24nICkgIT09ICdmaXhlZCcgJiYgIWluc3RhbmNlLiRyZWZzLmNvbnRhaW5lci5oYXMoIGUudGFyZ2V0ICkubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNvbWV0aW1lcyBwYWdlIGdldHMgc2Nyb2xsZWQsIHNldCBpdCBiYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgJFcuc2Nyb2xsVG9wKCBzZWxmLnNjcm9sbFRvcCApLnNjcm9sbExlZnQoIHNlbGYuc2Nyb2xsTGVmdCApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBFbmFibGUga2V5Ym9hcmQgbmF2aWdhdGlvblxyXG4gICAgICAgICAgICAkRC5vbigna2V5ZG93bi5mYicsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICAgICAgICAgICAgICBrZXljb2RlID0gZS5rZXlDb2RlIHx8IGUud2hpY2g7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhY3VycmVudCB8fCAhY3VycmVudC5vcHRzLmtleWJvYXJkICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICQoZS50YXJnZXQpLmlzKCdpbnB1dCcpIHx8ICQoZS50YXJnZXQpLmlzKCd0ZXh0YXJlYScpICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBCYWNrc3BhY2UgYW5kIEVzYyBrZXlzXHJcbiAgICAgICAgICAgICAgICBpZiAoIGtleWNvZGUgPT09IDggfHwga2V5Y29kZSA9PT0gMjcgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNsb3NlKCBlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBMZWZ0IGFycm93IGFuZCBVcCBhcnJvd1xyXG4gICAgICAgICAgICAgICAgaWYgKCBrZXljb2RlID09PSAzNyB8fCBrZXljb2RlID09PSAzOCApIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucHJldmlvdXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJpZ2ggYXJyb3cgYW5kIERvd24gYXJyb3dcclxuICAgICAgICAgICAgICAgIGlmICgga2V5Y29kZSA9PT0gMzkgfHwga2V5Y29kZSA9PT0gNDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm5leHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYudHJpZ2dlcignYWZ0ZXJLZXlkb3duJywgZSwga2V5Y29kZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIEhpZGUgY29udHJvbHMgYWZ0ZXIgc29tZSBpbmFjdGl2aXR5IHBlcmlvZFxyXG4gICAgICAgICAgICBpZiAoIHNlbGYuZ3JvdXBbIHNlbGYuY3VyckluZGV4IF0ub3B0cy5pZGxlVGltZSApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaWRsZVNlY29uZHNDb3VudGVyID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAkRC5vbignbW91c2Vtb3ZlLmZiLWlkbGUgbW91c2VsZWF2ZS5mYi1pZGxlIG1vdXNlZG93bi5mYi1pZGxlIHRvdWNoc3RhcnQuZmItaWRsZSB0b3VjaG1vdmUuZmItaWRsZSBzY3JvbGwuZmItaWRsZSBrZXlkb3duLmZiLWlkbGUnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNlbGYuaXNJZGxlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNob3dDb250cm9scygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pc0lkbGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuaWRsZUludGVydmFsID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaWRsZVNlY29uZHNDb3VudGVyKys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIgPj0gc2VsZi5ncm91cFsgc2VsZi5jdXJySW5kZXggXS5vcHRzLmlkbGVUaW1lICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlzSWRsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaWRsZVNlY29uZHNDb3VudGVyID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGlkZUNvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBSZW1vdmUgZXZlbnRzIGFkZGVkIGJ5IHRoZSBjb3JlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICByZW1vdmVFdmVudHMgOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgJFcub2ZmKCAnb3JpZW50YXRpb25jaGFuZ2UuZmIgcmVzaXplLmZiJyApO1xyXG4gICAgICAgICAgICAkRC5vZmYoICdmb2N1c2luLmZiIGtleWRvd24uZmIgLmZiLWlkbGUnICk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRyZWZzLmNvbnRhaW5lci5vZmYoICcuZmItY2xvc2UgLmZiLXByZXYgLmZiLW5leHQnICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNlbGYuaWRsZUludGVydmFsICkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoIHNlbGYuaWRsZUludGVydmFsICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5pZGxlSW50ZXJ2YWwgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIENoYW5nZSB0byBwcmV2aW91cyBnYWxsZXJ5IGl0ZW1cclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHByZXZpb3VzIDogZnVuY3Rpb24oIGR1cmF0aW9uICkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5qdW1wVG8oIHRoaXMuY3VyclBvcyAtIDEsIGR1cmF0aW9uICk7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIENoYW5nZSB0byBuZXh0IGdhbGxlcnkgaXRlbVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBuZXh0IDogZnVuY3Rpb24oIGR1cmF0aW9uICkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5qdW1wVG8oIHRoaXMuY3VyclBvcyArIDEsIGR1cmF0aW9uICk7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFN3aXRjaCB0byBzZWxlY3RlZCBnYWxsZXJ5IGl0ZW1cclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGp1bXBUbyA6IGZ1bmN0aW9uICggcG9zLCBkdXJhdGlvbiwgc2xpZGUgKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIGZpcnN0UnVuLFxyXG4gICAgICAgICAgICAgICAgbG9vcCxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXHJcbiAgICAgICAgICAgICAgICBwcmV2aW91cyxcclxuICAgICAgICAgICAgICAgIGNhbnZhc1dpZHRoLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudFBvcyxcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wcztcclxuXHJcbiAgICAgICAgICAgIHZhciBncm91cExlbiA9IHNlbGYuZ3JvdXAubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzZWxmLmlzU2xpZGluZyB8fCBzZWxmLmlzQ2xvc2luZyB8fCAoIHNlbGYuaXNBbmltYXRpbmcgJiYgc2VsZi5maXJzdFJ1biApICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwb3MgID0gcGFyc2VJbnQoIHBvcywgMTAgKTtcclxuICAgICAgICAgICAgbG9vcCA9IHNlbGYuY3VycmVudCA/IHNlbGYuY3VycmVudC5vcHRzLmxvb3AgOiBzZWxmLm9wdHMubG9vcDtcclxuXHJcbiAgICAgICAgICAgIGlmICggIWxvb3AgJiYgKCBwb3MgPCAwIHx8IHBvcyA+PSBncm91cExlbiApICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmaXJzdFJ1biA9IHNlbGYuZmlyc3RSdW4gPSAoIHNlbGYuZmlyc3RSdW4gPT09IG51bGwgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggZ3JvdXBMZW4gPCAyICYmICFmaXJzdFJ1biAmJiAhIXNlbGYuaXNTbGlkaW5nICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwcmV2aW91cyA9IHNlbGYuY3VycmVudDtcclxuXHJcbiAgICAgICAgICAgIHNlbGYucHJldkluZGV4ID0gc2VsZi5jdXJySW5kZXg7XHJcbiAgICAgICAgICAgIHNlbGYucHJldlBvcyAgID0gc2VsZi5jdXJyUG9zO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIHNsaWRlc1xyXG4gICAgICAgICAgICBjdXJyZW50ID0gc2VsZi5jcmVhdGVTbGlkZSggcG9zICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGdyb3VwTGVuID4gMSApIHtcclxuICAgICAgICAgICAgICAgIGlmICggbG9vcCB8fCBjdXJyZW50LmluZGV4ID4gMCApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNyZWF0ZVNsaWRlKCBwb3MgLSAxICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBsb29wIHx8IGN1cnJlbnQuaW5kZXggPCBncm91cExlbiAtIDEgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jcmVhdGVTbGlkZSggcG9zICsgMSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxmLmN1cnJlbnQgICA9IGN1cnJlbnQ7XHJcbiAgICAgICAgICAgIHNlbGYuY3VyckluZGV4ID0gY3VycmVudC5pbmRleDtcclxuICAgICAgICAgICAgc2VsZi5jdXJyUG9zICAgPSBjdXJyZW50LnBvcztcclxuXHJcbiAgICAgICAgICAgIHNlbGYudHJpZ2dlciggJ2JlZm9yZVNob3cnLCBmaXJzdFJ1biApO1xyXG5cclxuICAgICAgICAgICAgc2VsZi51cGRhdGVDb250cm9scygpO1xyXG5cclxuICAgICAgICAgICAgY3VycmVudFBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKCBjdXJyZW50LiRzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgY3VycmVudC5pc01vdmVkICAgICAgICA9ICggY3VycmVudFBvcy5sZWZ0ICE9PSAwIHx8IGN1cnJlbnRQb3MudG9wICE9PSAwICkgJiYgIWN1cnJlbnQuJHNsaWRlLmhhc0NsYXNzKCAnZmFuY3lib3gtYW5pbWF0ZWQnICk7XHJcbiAgICAgICAgICAgIGN1cnJlbnQuZm9yY2VkRHVyYXRpb24gPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoICQuaXNOdW1lcmljKCBkdXJhdGlvbiApICkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudC5mb3JjZWREdXJhdGlvbiA9IGR1cmF0aW9uO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBjdXJyZW50Lm9wdHNbIGZpcnN0UnVuID8gJ2FuaW1hdGlvbkR1cmF0aW9uJyA6ICd0cmFuc2l0aW9uRHVyYXRpb24nIF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGR1cmF0aW9uID0gcGFyc2VJbnQoIGR1cmF0aW9uLCAxMCApO1xyXG5cclxuICAgICAgICAgICAgLy8gRnJlc2ggc3RhcnQgLSByZXZlYWwgY29udGFpbmVyLCBjdXJyZW50IHNsaWRlIGFuZCBzdGFydCBsb2FkaW5nIGNvbnRlbnRcclxuICAgICAgICAgICAgaWYgKCBmaXJzdFJ1biApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGN1cnJlbnQub3B0cy5hbmltYXRpb25FZmZlY3QgJiYgZHVyYXRpb24gKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIuY3NzKCAndHJhbnNpdGlvbi1kdXJhdGlvbicsIGR1cmF0aW9uICsgJ21zJyApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtaXMtaGlkZGVuJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcmNlUmVkcmF3KCBzZWxmLiRyZWZzLmNvbnRhaW5lciApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLmFkZENsYXNzKCAnZmFuY3lib3gtaXMtb3BlbicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYWtlIGZpcnN0IHNsaWRlIHZpc2libGUgKHRvIGRpc3BsYXkgbG9hZGluZyBpY29uLCBpZiBuZWVkZWQpXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LiRzbGlkZS5hZGRDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS1jdXJyZW50JyApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYubG9hZFNsaWRlKCBjdXJyZW50ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5wcmVsb2FkKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDbGVhbiB1cFxyXG4gICAgICAgICAgICAkLmVhY2goc2VsZi5zbGlkZXMsIGZ1bmN0aW9uKCBpbmRleCwgc2xpZGUgKSB7XHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnN0b3AoIHNsaWRlLiRzbGlkZSApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIE1ha2UgY3VycmVudCB0aGF0IHNsaWRlIGlzIHZpc2libGUgZXZlbiBpZiBjb250ZW50IGlzIHN0aWxsIGxvYWRpbmdcclxuICAgICAgICAgICAgY3VycmVudC4kc2xpZGUucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1zbGlkZS0tbmV4dCBmYW5jeWJveC1zbGlkZS0tcHJldmlvdXMnICkuYWRkQ2xhc3MoICdmYW5jeWJveC1zbGlkZS0tY3VycmVudCcgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIHNsaWRlcyBoYXZlIGJlZW4gZHJhZ2dlZCwgYW5pbWF0ZSB0aGVtIHRvIGNvcnJlY3QgcG9zaXRpb25cclxuICAgICAgICAgICAgaWYgKCBjdXJyZW50LmlzTW92ZWQgKSB7XHJcbiAgICAgICAgICAgICAgICBjYW52YXNXaWR0aCA9IE1hdGgucm91bmQoIGN1cnJlbnQuJHNsaWRlLndpZHRoKCkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2goc2VsZi5zbGlkZXMsIGZ1bmN0aW9uKCBpbmRleCwgc2xpZGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IHNsaWRlLnBvcyAtIGN1cnJlbnQucG9zO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoIHNsaWRlLiRzbGlkZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA6ICggcG9zICogY2FudmFzV2lkdGggKSArICggcG9zICogc2xpZGUub3B0cy5ndXR0ZXIgKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGR1cmF0aW9uLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLiRzbGlkZS5yZW1vdmVBdHRyKCdzdHlsZScpLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuaXNNb3ZlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5zdGFnZS5jaGlsZHJlbigpLnJlbW92ZUF0dHIoICdzdHlsZScgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU3RhcnQgdHJhbnNpdGlvbiB0aGF0IHJldmVhbHMgY3VycmVudCBjb250ZW50XHJcbiAgICAgICAgICAgIC8vIG9yIHdhaXQgd2hlbiBpdCB3aWxsIGJlIGxvYWRlZFxyXG5cclxuICAgICAgICAgICAgaWYgKCBjdXJyZW50LmlzTG9hZGVkICkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5yZXZlYWxDb250ZW50KCBjdXJyZW50ICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sb2FkU2xpZGUoIGN1cnJlbnQgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi5wcmVsb2FkKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHByZXZpb3VzLnBvcyA9PT0gY3VycmVudC5wb3MgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSBwcmV2aW91cyBzbGlkZVxyXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wcyA9ICdmYW5jeWJveC1zbGlkZS0tJyArICggcHJldmlvdXMucG9zID4gY3VycmVudC5wb3MgPyAnbmV4dCcgOiAncHJldmlvdXMnICk7XHJcblxyXG4gICAgICAgICAgICBwcmV2aW91cy4kc2xpZGUucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1zbGlkZS0tY29tcGxldGUgZmFuY3lib3gtc2xpZGUtLWN1cnJlbnQgZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzJyApO1xyXG5cclxuICAgICAgICAgICAgcHJldmlvdXMuaXNDb21wbGV0ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhZHVyYXRpb24gfHwgKCAhY3VycmVudC5pc01vdmVkICYmICFjdXJyZW50Lm9wdHMudHJhbnNpdGlvbkVmZmVjdCApICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQuaXNNb3ZlZCApIHtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzLiRzbGlkZS5hZGRDbGFzcyggdHJhbnNpdGlvblByb3BzICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wcyA9ICdmYW5jeWJveC1hbmltYXRlZCAnICsgdHJhbnNpdGlvblByb3BzICsgJyBmYW5jeWJveC1meC0nICsgY3VycmVudC5vcHRzLnRyYW5zaXRpb25FZmZlY3Q7XHJcblxyXG4gICAgICAgICAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKCBwcmV2aW91cy4kc2xpZGUsIHRyYW5zaXRpb25Qcm9wcywgZHVyYXRpb24sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzLiRzbGlkZS5yZW1vdmVDbGFzcyggdHJhbnNpdGlvblByb3BzICkucmVtb3ZlQXR0ciggJ3N0eWxlJyApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgbmV3IFwic2xpZGVcIiBlbGVtZW50XHJcbiAgICAgICAgLy8gVGhlc2UgYXJlIGdhbGxlcnkgaXRlbXMgIHRoYXQgYXJlIGFjdHVhbGx5IGFkZGVkIHRvIERPTVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgY3JlYXRlU2xpZGUgOiBmdW5jdGlvbiggcG9zICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgJHNsaWRlO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXg7XHJcblxyXG4gICAgICAgICAgICBpbmRleCA9IHBvcyAlIHNlbGYuZ3JvdXAubGVuZ3RoO1xyXG4gICAgICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IHNlbGYuZ3JvdXAubGVuZ3RoICsgaW5kZXggOiBpbmRleDtcclxuXHJcbiAgICAgICAgICAgIGlmICggIXNlbGYuc2xpZGVzWyBwb3MgXSAmJiBzZWxmLmdyb3VwWyBpbmRleCBdICkge1xyXG4gICAgICAgICAgICAgICAgJHNsaWRlID0gJCgnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXNsaWRlXCI+PC9kaXY+JykuYXBwZW5kVG8oIHNlbGYuJHJlZnMuc3RhZ2UgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnNsaWRlc1sgcG9zIF0gPSAkLmV4dGVuZCggdHJ1ZSwge30sIHNlbGYuZ3JvdXBbIGluZGV4IF0sIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3MgICAgICA6IHBvcyxcclxuICAgICAgICAgICAgICAgICAgICAkc2xpZGUgICA6ICRzbGlkZSxcclxuICAgICAgICAgICAgICAgICAgICBpc0xvYWRlZCA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGVTbGlkZSggc2VsZi5zbGlkZXNbIHBvcyBdICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnNsaWRlc1sgcG9zIF07XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFNjYWxlIGltYWdlIHRvIHRoZSBhY3R1YWwgc2l6ZSBvZiB0aGUgaW1hZ2VcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNjYWxlVG9BY3R1YWwgOiBmdW5jdGlvbiggeCwgeSwgZHVyYXRpb24gKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHNlbGYuY3VycmVudDtcclxuICAgICAgICAgICAgdmFyICR3aGF0ICAgPSBjdXJyZW50LiRjb250ZW50O1xyXG5cclxuICAgICAgICAgICAgdmFyIGltZ1BvcywgcG9zWCwgcG9zWSwgc2NhbGVYLCBzY2FsZVk7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2FudmFzV2lkdGggID0gcGFyc2VJbnQoIGN1cnJlbnQuJHNsaWRlLndpZHRoKCksIDEwICk7XHJcbiAgICAgICAgICAgIHZhciBjYW52YXNIZWlnaHQgPSBwYXJzZUludCggY3VycmVudC4kc2xpZGUuaGVpZ2h0KCksIDEwICk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbmV3SW1nV2lkdGggID0gY3VycmVudC53aWR0aDtcclxuICAgICAgICAgICAgdmFyIG5ld0ltZ0hlaWdodCA9IGN1cnJlbnQuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhKCBjdXJyZW50LnR5cGUgPT0gJ2ltYWdlJyAmJiAhY3VycmVudC5oYXNFcnJvcikgfHwgISR3aGF0IHx8IHNlbGYuaXNBbmltYXRpbmcgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICQuZmFuY3lib3guc3RvcCggJHdoYXQgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgeCA9IHggPT09IHVuZGVmaW5lZCA/IGNhbnZhc1dpZHRoICAqIDAuNSAgOiB4O1xyXG4gICAgICAgICAgICB5ID0geSA9PT0gdW5kZWZpbmVkID8gY2FudmFzSGVpZ2h0ICogMC41ICA6IHk7XHJcblxyXG4gICAgICAgICAgICBpbWdQb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZSggJHdoYXQgKTtcclxuXHJcbiAgICAgICAgICAgIHNjYWxlWCAgPSBuZXdJbWdXaWR0aCAgLyBpbWdQb3Mud2lkdGg7XHJcbiAgICAgICAgICAgIHNjYWxlWSAgPSBuZXdJbWdIZWlnaHQgLyBpbWdQb3MuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgLy8gR2V0IGNlbnRlciBwb3NpdGlvbiBmb3Igb3JpZ2luYWwgaW1hZ2VcclxuICAgICAgICAgICAgcG9zWCA9ICggY2FudmFzV2lkdGggKiAwLjUgIC0gbmV3SW1nV2lkdGggKiAwLjUgKTtcclxuICAgICAgICAgICAgcG9zWSA9ICggY2FudmFzSGVpZ2h0ICogMC41IC0gbmV3SW1nSGVpZ2h0ICogMC41ICk7XHJcblxyXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgaW1hZ2UgZG9lcyBub3QgbW92ZSBhd2F5IGZyb20gZWRnZXNcclxuICAgICAgICAgICAgaWYgKCBuZXdJbWdXaWR0aCA+IGNhbnZhc1dpZHRoICkge1xyXG4gICAgICAgICAgICAgICAgcG9zWCA9IGltZ1Bvcy5sZWZ0ICogc2NhbGVYIC0gKCAoIHggKiBzY2FsZVggKSAtIHggKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIHBvc1ggPiAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc1ggPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggcG9zWCA8ICBjYW52YXNXaWR0aCAtIG5ld0ltZ1dpZHRoICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc1ggPSBjYW52YXNXaWR0aCAtIG5ld0ltZ1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIG5ld0ltZ0hlaWdodCA+IGNhbnZhc0hlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgcG9zWSA9IGltZ1Bvcy50b3AgICogc2NhbGVZIC0gKCAoIHkgKiBzY2FsZVkgKSAtIHkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIHBvc1kgPiAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc1kgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggcG9zWSA8ICBjYW52YXNIZWlnaHQgLSBuZXdJbWdIZWlnaHQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zWSA9IGNhbnZhc0hlaWdodCAtIG5ld0ltZ0hlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi51cGRhdGVDdXJzb3IoIG5ld0ltZ1dpZHRoLCBuZXdJbWdIZWlnaHQgKTtcclxuXHJcbiAgICAgICAgICAgICQuZmFuY3lib3guYW5pbWF0ZSggJHdoYXQsIHtcclxuICAgICAgICAgICAgICAgIHRvcCAgICA6IHBvc1ksXHJcbiAgICAgICAgICAgICAgICBsZWZ0ICAgOiBwb3NYLFxyXG4gICAgICAgICAgICAgICAgc2NhbGVYIDogc2NhbGVYLFxyXG4gICAgICAgICAgICAgICAgc2NhbGVZIDogc2NhbGVZXHJcbiAgICAgICAgICAgIH0sIGR1cmF0aW9uIHx8IDMzMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gU3RvcCBzbGlkZXNob3dcclxuICAgICAgICAgICAgaWYgKCBzZWxmLlNsaWRlU2hvdyAmJiBzZWxmLlNsaWRlU2hvdy5pc0FjdGl2ZSApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuU2xpZGVTaG93LnN0b3AoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBTY2FsZSBpbWFnZSB0byBmaXQgaW5zaWRlIHBhcmVudCBlbGVtZW50XHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBzY2FsZVRvRml0IDogZnVuY3Rpb24oIGR1cmF0aW9uICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIHZhciAkd2hhdCAgID0gY3VycmVudC4kY29udGVudDtcclxuICAgICAgICAgICAgdmFyIGVuZDtcclxuXHJcbiAgICAgICAgICAgIGlmICggISggY3VycmVudC50eXBlID09ICdpbWFnZScgJiYgIWN1cnJlbnQuaGFzRXJyb3IpIHx8ICEkd2hhdCB8fCBzZWxmLmlzQW5pbWF0aW5nICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkLmZhbmN5Ym94LnN0b3AoICR3aGF0ICk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGVuZCA9IHNlbGYuZ2V0Rml0UG9zKCBjdXJyZW50ICk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUN1cnNvciggZW5kLndpZHRoLCBlbmQuaGVpZ2h0ICk7XHJcblxyXG4gICAgICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoICR3aGF0LCB7XHJcbiAgICAgICAgICAgICAgICB0b3AgICAgOiBlbmQudG9wLFxyXG4gICAgICAgICAgICAgICAgbGVmdCAgIDogZW5kLmxlZnQsXHJcbiAgICAgICAgICAgICAgICBzY2FsZVggOiBlbmQud2lkdGggIC8gJHdoYXQud2lkdGgoKSxcclxuICAgICAgICAgICAgICAgIHNjYWxlWSA6IGVuZC5oZWlnaHQgLyAkd2hhdC5oZWlnaHQoKVxyXG4gICAgICAgICAgICB9LCBkdXJhdGlvbiB8fCAzMzAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gQ2FsY3VsYXRlIGltYWdlIHNpemUgdG8gZml0IGluc2lkZSB2aWV3cG9ydFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgZ2V0Rml0UG9zIDogZnVuY3Rpb24oIHNsaWRlICkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiAgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgJHdoYXQgPSBzbGlkZS4kY29udGVudDtcclxuXHJcbiAgICAgICAgICAgIHZhciBpbWdXaWR0aCAgPSBzbGlkZS53aWR0aDtcclxuICAgICAgICAgICAgdmFyIGltZ0hlaWdodCA9IHNsaWRlLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIHZhciBtYXJnaW4gPSBzbGlkZS5vcHRzLm1hcmdpbjtcclxuXHJcbiAgICAgICAgICAgIHZhciBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0LCBtaW5SYXRpbywgd2lkdGgsIGhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGlmICggISR3aGF0IHx8ICEkd2hhdC5sZW5ndGggfHwgKCAhaW1nV2lkdGggJiYgIWltZ0hlaWdodCkgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgXCJtYXJnaW4gdG8gQ1NTIHN0eWxlOiBbIHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCBdXHJcbiAgICAgICAgICAgIGlmICggJC50eXBlKCBtYXJnaW4gKSA9PT0gXCJudW1iZXJcIiApIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbiA9IFsgbWFyZ2luLCBtYXJnaW4gXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBtYXJnaW4ubGVuZ3RoID09IDIgKSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4gPSBbIG1hcmdpblswXSwgbWFyZ2luWzFdLCBtYXJnaW5bMF0sIG1hcmdpblsxXSBdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBXZSBjYW4gbm90IHVzZSAkc2xpZGUgd2lkdGggaGVyZSwgYmVjYXVzZSBpdCBjYW4gaGF2ZSBkaWZmZXJlbnQgZGllbWVuc2lvbnMgd2hpbGUgaW4gdHJhbnNpdG9uXHJcbiAgICAgICAgICAgIGNhbnZhc1dpZHRoICA9IHBhcnNlSW50KCBzZWxmLiRyZWZzLnN0YWdlLndpZHRoKCksIDEwICkgIC0gKCBtYXJnaW5bIDEgXSArIG1hcmdpblsgMyBdICk7XHJcbiAgICAgICAgICAgIGNhbnZhc0hlaWdodCA9IHBhcnNlSW50KCBzZWxmLiRyZWZzLnN0YWdlLmhlaWdodCgpLCAxMCApIC0gKCBtYXJnaW5bIDAgXSArIG1hcmdpblsgMiBdICk7XHJcblxyXG4gICAgICAgICAgICBtaW5SYXRpbyA9IE1hdGgubWluKDEsIGNhbnZhc1dpZHRoIC8gaW1nV2lkdGgsIGNhbnZhc0hlaWdodCAvIGltZ0hlaWdodCApO1xyXG5cclxuICAgICAgICAgICAgd2lkdGggID0gTWF0aC5mbG9vciggbWluUmF0aW8gKiBpbWdXaWR0aCApO1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBNYXRoLmZsb29yKCBtaW5SYXRpbyAqIGltZ0hlaWdodCApO1xyXG5cclxuICAgICAgICAgICAgLy8gVXNlIGZsb29yIHJvdW5kaW5nIHRvIG1ha2Ugc3VyZSBpdCByZWFsbHkgZml0c1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdG9wICAgIDogTWF0aC5mbG9vciggKCBjYW52YXNIZWlnaHQgLSBoZWlnaHQgKSAqIDAuNSApICsgbWFyZ2luWyAwIF0sXHJcbiAgICAgICAgICAgICAgICBsZWZ0ICAgOiBNYXRoLmZsb29yKCAoIGNhbnZhc1dpZHRoICAtIHdpZHRoICkgICogMC41ICkgKyBtYXJnaW5bIDMgXSxcclxuICAgICAgICAgICAgICAgIHdpZHRoICA6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0IDogaGVpZ2h0XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBVcGRhdGUgcG9zaXRpb24gYW5kIGNvbnRlbnQgb2YgYWxsIHNsaWRlc1xyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHVwZGF0ZSA6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgJC5lYWNoKCBzZWxmLnNsaWRlcywgZnVuY3Rpb24oIGtleSwgc2xpZGUgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZVNsaWRlKCBzbGlkZSApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBzbGlkZSBwb3NpdGlvbiBhbmQgc2NhbGUgY29udGVudCB0byBmaXRcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHVwZGF0ZVNsaWRlIDogZnVuY3Rpb24oIHNsaWRlICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgID0gdGhpcztcclxuICAgICAgICAgICAgdmFyICR3aGF0ID0gc2xpZGUuJGNvbnRlbnQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoICR3aGF0ICYmICggc2xpZGUud2lkdGggfHwgc2xpZGUuaGVpZ2h0ICkgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3guc3RvcCggJHdoYXQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSggJHdoYXQsIHNlbGYuZ2V0Rml0UG9zKCBzbGlkZSApICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcyApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZUN1cnNvcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzbGlkZS4kc2xpZGUudHJpZ2dlciggJ3JlZnJlc2gnICk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnRyaWdnZXIoICdvblVwZGF0ZScsIHNsaWRlICk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBjdXJzb3Igc3R5bGUgZGVwZW5kaW5nIGlmIGNvbnRlbnQgY2FuIGJlIHpvb21lZFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICB1cGRhdGVDdXJzb3IgOiBmdW5jdGlvbiggbmV4dFdpZHRoLCBuZXh0SGVpZ2h0ICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgaXNTY2FsZWREb3duO1xyXG5cclxuICAgICAgICAgICAgdmFyICRjb250YWluZXIgPSBzZWxmLiRyZWZzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LWlzLXpvb21hYmxlIGZhbmN5Ym94LWNhbi16b29tSW4gZmFuY3lib3gtY2FuLWRyYWcgZmFuY3lib3gtY2FuLXpvb21PdXQnICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoICFzZWxmLmN1cnJlbnQgfHwgc2VsZi5pc0Nsb3NpbmcgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggc2VsZi5pc1pvb21hYmxlKCkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyggJ2ZhbmN5Ym94LWlzLXpvb21hYmxlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggbmV4dFdpZHRoICE9PSB1bmRlZmluZWQgJiYgbmV4dEhlaWdodCAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU2NhbGVkRG93biA9IG5leHRXaWR0aCA8IHNlbGYuY3VycmVudC53aWR0aCAmJiBuZXh0SGVpZ2h0IDwgc2VsZi5jdXJyZW50LmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU2NhbGVkRG93biA9IHNlbGYuaXNTY2FsZWREb3duKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBpc1NjYWxlZERvd24gKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGltYWdlIGlzIHNjYWxlZCBkb3duLCB0aGVuLCBvYnZpb3VzbHksIGl0IGNhbiBiZSB6b29tZWQgdG8gZnVsbCBzaXplXHJcbiAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyggJ2ZhbmN5Ym94LWNhbi16b29tSW4nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzZWxmLmN1cnJlbnQub3B0cy50b3VjaCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGltYWdlIHNpemUgaXIgbGFyZ2VuIHRoYW4gYXZhaWxhYmxlIGF2YWlsYWJsZSBhbmQgdG91Y2ggbW9kdWxlIGlzIG5vdCBkaXNhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGVuIHVzZXIgY2FuIGRvIHBhbm5pbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyggJ2ZhbmN5Ym94LWNhbi1kcmFnJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkY29udGFpbmVyLmFkZENsYXNzKCAnZmFuY3lib3gtY2FuLXpvb21PdXQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHNlbGYuY3VycmVudC5vcHRzLnRvdWNoICkge1xyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyggJ2ZhbmN5Ym94LWNhbi1kcmFnJyApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiBjdXJyZW50IHNsaWRlIGlzIHpvb21hYmxlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBpc1pvb21hYmxlIDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHNlbGYuY3VycmVudDtcclxuICAgICAgICAgICAgdmFyIGZpdFBvcztcclxuXHJcbiAgICAgICAgICAgIGlmICggIWN1cnJlbnQgfHwgc2VsZi5pc0Nsb3NpbmcgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEFzc3VtZSB0aGF0IHNsaWRlIGlzIHpvb21hYmxlIGlmXHJcbiAgICAgICAgICAgIC8vICAgLSBpbWFnZSBpcyBsb2FkZWQgc3VjY2Vzc2Z1bHlcclxuICAgICAgICAgICAgLy8gICAtIGNsaWNrIGFjdGlvbiBpcyBcInpvb21cIlxyXG4gICAgICAgICAgICAvLyAgIC0gYWN0dWFsIHNpemUgb2YgdGhlIGltYWdlIGlzIHNtYWxsZXIgdGhhbiBhdmFpbGFibGUgYXJlYVxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyAmJiBjdXJyZW50LmlzTG9hZGVkICYmICFjdXJyZW50Lmhhc0Vycm9yICYmXHJcbiAgICAgICAgICAgICAgICAoIGN1cnJlbnQub3B0cy5jbGlja0NvbnRlbnQgPT09ICd6b29tJyB8fCAoICQuaXNGdW5jdGlvbiggY3VycmVudC5vcHRzLmNsaWNrQ29udGVudCApICYmIGN1cnJlbnQub3B0cy5jbGlja0NvbnRlbnQoIGN1cnJlbnQgKSA9PT0gIFwiem9vbVwiICkgKVxyXG4gICAgICAgICAgICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBmaXRQb3MgPSBzZWxmLmdldEZpdFBvcyggY3VycmVudCApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggY3VycmVudC53aWR0aCA+IGZpdFBvcy53aWR0aCB8fCBjdXJyZW50LmhlaWdodCA+IGZpdFBvcy5oZWlnaHQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiBjdXJyZW50IGltYWdlIGRpbWVuc2lvbnMgYXJlIHNtYWxsZXIgdGhhbiBhY3R1YWxcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgaXNTY2FsZWREb3duIDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHNlbGYuY3VycmVudDtcclxuICAgICAgICAgICAgdmFyICR3aGF0ICAgPSBjdXJyZW50LiRjb250ZW50O1xyXG5cclxuICAgICAgICAgICAgdmFyIHJleiA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAkd2hhdCApIHtcclxuICAgICAgICAgICAgICAgIHJleiA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKCAkd2hhdCApO1xyXG4gICAgICAgICAgICAgICAgcmV6ID0gcmV6LndpZHRoIDwgY3VycmVudC53aWR0aCB8fCByZXouaGVpZ2h0IDwgY3VycmVudC5oZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXo7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiBpbWFnZSBkaW1lbnNpb25zIGV4Y2VlZCBwYXJlbnQgZWxlbWVudFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGNhblBhbiA6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIHZhciAkd2hhdCAgID0gY3VycmVudC4kY29udGVudDtcclxuXHJcbiAgICAgICAgICAgIHZhciByZXogPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICggJHdoYXQgKSB7XHJcbiAgICAgICAgICAgICAgICByZXogPSBzZWxmLmdldEZpdFBvcyggY3VycmVudCApO1xyXG4gICAgICAgICAgICAgICAgcmV6ID0gTWF0aC5hYnMoICR3aGF0LndpZHRoKCkgLSByZXoud2lkdGggKSA+IDEgIHx8IE1hdGguYWJzKCAkd2hhdC5oZWlnaHQoKSAtIHJlei5oZWlnaHQgKSA+IDE7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmV6O1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gTG9hZCBjb250ZW50IGludG8gdGhlIHNsaWRlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGxvYWRTbGlkZSA6IGZ1bmN0aW9uKCBzbGlkZSApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgdHlwZSwgJHNsaWRlO1xyXG4gICAgICAgICAgICB2YXIgYWpheExvYWQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNsaWRlLmlzTG9hZGluZyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBzbGlkZS5pc0xvYWRlZCApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2xpZGUuaXNMb2FkaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYudHJpZ2dlciggJ2JlZm9yZUxvYWQnLCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgdHlwZSAgID0gc2xpZGUudHlwZTtcclxuICAgICAgICAgICAgJHNsaWRlID0gc2xpZGUuJHNsaWRlO1xyXG5cclxuICAgICAgICAgICAgJHNsaWRlXHJcbiAgICAgICAgICAgICAgICAub2ZmKCAncmVmcmVzaCcgKVxyXG4gICAgICAgICAgICAgICAgLnRyaWdnZXIoICdvblJlc2V0JyApXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdmYW5jeWJveC1zbGlkZS0tJyArICggdHlwZSB8fCAndW5rbm93bicgKSApXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoIHNsaWRlLm9wdHMuc2xpZGVDbGFzcyApO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIGNvbnRlbnQgZGVwZW5kaW5nIG9uIHRoZSB0eXBlXHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKCB0eXBlICkge1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2ltYWdlJzpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRJbWFnZSggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdpZnJhbWUnOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldElmcmFtZSggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdodG1sJzpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRDb250ZW50KCBzbGlkZSwgc2xpZGUuc3JjIHx8IHNsaWRlLmNvbnRlbnQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdpbmxpbmUnOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICQoIHNsaWRlLnNyYyApLmxlbmd0aCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRDb250ZW50KCBzbGlkZSwgJCggc2xpZGUuc3JjICkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRFcnJvciggc2xpZGUgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWpheCc6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2hvd0xvYWRpbmcoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFqYXhMb2FkID0gJC5hamF4KCAkLmV4dGVuZCgge30sIHNsaWRlLm9wdHMuYWpheC5zZXR0aW5ncywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgOiBzbGlkZS5zcmMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbiAoIGRhdGEsIHRleHRTdGF0dXMgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0ZXh0U3RhdHVzID09PSAnc3VjY2VzcycgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRDb250ZW50KCBzbGlkZSwgZGF0YSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgOiBmdW5jdGlvbiAoIGpxWEhSLCB0ZXh0U3RhdHVzICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgganFYSFIgJiYgdGV4dFN0YXR1cyAhPT0gJ2Fib3J0JyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEVycm9yKCBzbGlkZSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNsaWRlLm9uZSggJ29uUmVzZXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFqYXhMb2FkLmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRFcnJvciggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gVXNlIHRodW1ibmFpbCBpbWFnZSwgaWYgcG9zc2libGVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBzZXRJbWFnZSA6IGZ1bmN0aW9uKCBzbGlkZSApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmICAgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgc3Jjc2V0ID0gc2xpZGUub3B0cy5zcmNzZXQgfHwgc2xpZGUub3B0cy5pbWFnZS5zcmNzZXQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgZm91bmQsIHRlbXAsIHB4UmF0aW8sIHdpbmRvd1dpZHRoO1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBcInNyY3NldFwiLCB0aGVuIHdlIG5lZWQgdG8gZmluZCBtYXRjaGluZyBcInNyY1wiIHZhbHVlLlxyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSwgYmVjYXVzZSB3aGVuIHlvdSBzZXQgYW4gc3JjIGF0dHJpYnV0ZSwgdGhlIGJyb3dzZXIgd2lsbCBwcmVsb2FkIHRoZSBpbWFnZVxyXG4gICAgICAgICAgICAvLyBiZWZvcmUgYW55IGphdmFzY3JpcHQgb3IgZXZlbiBDU1MgaXMgYXBwbGllZC5cclxuICAgICAgICAgICAgaWYgKCBzcmNzZXQgKSB7XHJcbiAgICAgICAgICAgICAgICBweFJhdGlvICAgICA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoICAqIHB4UmF0aW87XHJcblxyXG4gICAgICAgICAgICAgICAgdGVtcCA9IHNyY3NldC5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAoIGVsICkge1xyXG4gICAgICAgICAgICBcdFx0dmFyIHJldCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgXHRcdGVsLnRyaW0oKS5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24gKCBlbCwgaSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VJbnQoIGVsLnN1YnN0cmluZygwLCBlbC5sZW5ndGggLSAxKSwgMTAgKTtcclxuXHJcbiAgICAgICAgICAgIFx0XHRcdGlmICggaSA9PT0gMCApIHtcclxuICAgICAgICAgICAgXHRcdFx0XHRyZXR1cm4gKCByZXQudXJsID0gZWwgKTtcclxuICAgICAgICAgICAgXHRcdFx0fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC52YWx1ZSAgID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQucG9zdGZpeCA9IGVsWyBlbC5sZW5ndGggLSAxIF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFx0XHR9KTtcclxuXHJcbiAgICAgICAgICAgIFx0XHRyZXR1cm4gcmV0O1xyXG4gICAgICAgICAgICBcdH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNvcnQgYnkgdmFsdWVcclxuICAgICAgICAgICAgICAgIHRlbXAuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gYS52YWx1ZSAtIGIudmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBPaywgbm93IHdlIGhhdmUgYW4gYXJyYXkgb2YgYWxsIHNyY3NldCB2YWx1ZXNcclxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBqID0gMDsgaiA8IHRlbXAubGVuZ3RoOyBqKysgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gdGVtcFsgaiBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICggZWwucG9zdGZpeCA9PT0gJ3cnICYmIGVsLnZhbHVlID49IHdpbmRvd1dpZHRoICkgfHwgKCBlbC5wb3N0Zml4ID09PSAneCcgJiYgZWwudmFsdWUgPj0gcHhSYXRpbyApICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSWYgbm90IGZvdW5kLCB0YWtlIHRoZSBsYXN0IG9uZVxyXG4gICAgICAgICAgICAgICAgaWYgKCAhZm91bmQgJiYgdGVtcC5sZW5ndGggKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0ZW1wWyB0ZW1wLmxlbmd0aCAtIDEgXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGZvdW5kICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLnNyYyA9IGZvdW5kLnVybDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBkZWZhdWx0IHdpZHRoL2hlaWdodCB2YWx1ZXMsIHdlIGNhbiBjYWxjdWxhdGUgaGVpZ2h0IGZvciBtYXRjaGluZyBzb3VyY2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLndpZHRoICYmIHNsaWRlLmhlaWdodCAmJiBmb3VuZC5wb3N0Zml4ID09ICd3JyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUuaGVpZ2h0ID0gKCBzbGlkZS53aWR0aCAvIHNsaWRlLmhlaWdodCApICogZm91bmQudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLndpZHRoICA9IGZvdW5kLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVGhpcyB3aWxsIGJlIHdyYXBwZXIgY29udGFpbmluZyBib3RoIGdob3N0IGFuZCBhY3R1YWwgaW1hZ2VcclxuICAgICAgICAgICAgc2xpZGUuJGNvbnRlbnQgPSAkKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtaW1hZ2Utd3JhcFwiPjwvZGl2PicpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdmYW5jeWJveC1pcy1oaWRkZW4nIClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyggc2xpZGUuJHNsaWRlICk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHRodW1ibmFpbCwgd2UgY2FuIGRpc3BsYXkgaXQgd2hpbGUgYWN0dWFsIGltYWdlIGlzIGxvYWRpbmdcclxuICAgICAgICAgICAgLy8gVXNlcnMgd2lsbCBub3Qgc3RhcmUgYXQgYmxhY2sgc2NyZWVuIGFuZCBhY3R1YWwgaW1hZ2Ugd2lsbCBhcHBlYXIgZ3JhZHVhbGx5XHJcbiAgICAgICAgICAgIGlmICggc2xpZGUub3B0cy5wcmVsb2FkICE9PSBmYWxzZSAmJiBzbGlkZS5vcHRzLndpZHRoICYmIHNsaWRlLm9wdHMuaGVpZ2h0ICYmICggc2xpZGUub3B0cy50aHVtYiB8fCBzbGlkZS5vcHRzLiR0aHVtYiApICkge1xyXG5cclxuICAgICAgICAgICAgICAgIHNsaWRlLndpZHRoICA9IHNsaWRlLm9wdHMud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBzbGlkZS5oZWlnaHQgPSBzbGlkZS5vcHRzLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICBzbGlkZS4kZ2hvc3QgPSAkKCc8aW1nIC8+JylcclxuICAgICAgICAgICAgICAgICAgICAub25lKCdlcnJvcicsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLiRnaG9zdCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEJpZ0ltYWdlKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWZ0ZXJMb2FkKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRCaWdJbWFnZSggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdmYW5jeWJveC1pbWFnZScgKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyggc2xpZGUuJGNvbnRlbnQgKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCAnc3JjJywgc2xpZGUub3B0cy50aHVtYiB8fCBzbGlkZS5vcHRzLiR0aHVtYi5hdHRyKCAnc3JjJyApICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuc2V0QmlnSW1hZ2UoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgZnVsbC1zaXplIGltYWdlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBzZXRCaWdJbWFnZSA6IGZ1bmN0aW9uICggc2xpZGUgKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgdmFyICRpbWcgPSAkKCc8aW1nIC8+Jyk7XHJcblxyXG4gICAgICAgICAgICBzbGlkZS4kaW1hZ2UgPSAkaW1nXHJcbiAgICAgICAgICAgICAgICAub25lKCdlcnJvcicsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEVycm9yKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAub25lKCdsb2FkJywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFyIHRpbWVvdXQgdGhhdCBjaGVja3MgaWYgbG9hZGluZyBpY29uIG5lZWRzIHRvIGJlIGRpc3BsYXllZFxyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCggc2xpZGUudGltb3V0cyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS50aW1vdXRzID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzZWxmLmlzQ2xvc2luZyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUud2lkdGggID0gdGhpcy5uYXR1cmFsV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuaGVpZ2h0ID0gdGhpcy5uYXR1cmFsSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLm9wdHMuaW1hZ2Uuc3Jjc2V0ICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaW1nLmF0dHIoICdzaXplcycsICcxMDB2dycgKS5hdHRyKCAnc3Jjc2V0Jywgc2xpZGUub3B0cy5pbWFnZS5zcmNzZXQgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaGlkZUxvYWRpbmcoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2xpZGUuJGdob3N0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUudGltb3V0cyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS50aW1vdXRzID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS4kZ2hvc3QuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgTWF0aC5taW4oIDMwMCwgTWF0aC5tYXgoIDEwMDAsIHNsaWRlLmhlaWdodCAvIDE2MDAgKSApICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWZ0ZXJMb2FkKCBzbGlkZSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnZmFuY3lib3gtaW1hZ2UnIClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdzcmMnLCBzbGlkZS5zcmMpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oIHNsaWRlLiRjb250ZW50ICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoICggJGltZ1swXS5jb21wbGV0ZSB8fCAkaW1nWzBdLnJlYWR5U3RhdGUgPT0gXCJjb21wbGV0ZVwiICkgJiYgJGltZ1swXS5uYXR1cmFsV2lkdGggJiYgJGltZ1swXS5uYXR1cmFsSGVpZ2h0ICkge1xyXG4gICAgICAgICAgICAgICAgICAkaW1nLnRyaWdnZXIoICdsb2FkJyApO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmKCAkaW1nWzBdLmVycm9yICkge1xyXG4gICAgICAgICAgICAgICAgICRpbWcudHJpZ2dlciggJ2Vycm9yJyApO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICBzbGlkZS50aW1vdXRzID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoICEkaW1nWzBdLmNvbXBsZXRlICYmICFzbGlkZS5oYXNFcnJvciApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zaG93TG9hZGluZyggc2xpZGUgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBpZnJhbWUgd3JhcHBlciwgaWZyYW1lIGFuZCBiaW5kaW5nc1xyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBzZXRJZnJhbWUgOiBmdW5jdGlvbiggc2xpZGUgKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmXHQ9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBvcHRzICAgID0gc2xpZGUub3B0cy5pZnJhbWUsXHJcbiAgICAgICAgICAgICAgICAkc2xpZGVcdD0gc2xpZGUuJHNsaWRlLFxyXG4gICAgICAgICAgICAgICAgJGlmcmFtZTtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlLiRjb250ZW50ID0gJCgnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWNvbnRlbnQnICsgKCBvcHRzLnByZWxvYWQgPyAnIGZhbmN5Ym94LWlzLWhpZGRlbicgOiAnJyApICsgJ1wiPjwvZGl2PicpXHJcbiAgICAgICAgICAgICAgICAuY3NzKCBvcHRzLmNzcyApXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oICRzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgJGlmcmFtZSA9ICQoIG9wdHMudHBsLnJlcGxhY2UoL1xce3JuZFxcfS9nLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSkgKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoIG9wdHMuYXR0ciApXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oIHNsaWRlLiRjb250ZW50ICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIG9wdHMucHJlbG9hZCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnNob3dMb2FkaW5nKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFVuZm9ydHVuYXRlbHksIGl0IGlzIG5vdCBhbHdheXMgcG9zc2libGUgdG8gZGV0ZXJtaW5lIGlmIGlmcmFtZSBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkXHJcbiAgICAgICAgICAgICAgICAvLyAoZHVlIHRvIGJyb3dzZXIgc2VjdXJpdHkgcG9saWN5KVxyXG5cclxuICAgICAgICAgICAgICAgICRpZnJhbWUub24oJ2xvYWQuZmIgZXJyb3IuZmInLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuJHNsaWRlLnRyaWdnZXIoICdyZWZyZXNoJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFmdGVyTG9hZCggc2xpZGUgKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJlY2FsY3VsYXRlIGlmcmFtZSBjb250ZW50IHNpemVcclxuICAgICAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAgICAgICAkc2xpZGUub24oJ3JlZnJlc2guZmInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgJHdyYXAgPSBzbGlkZS4kY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVXaWR0aCAgPSBvcHRzLmNzcy53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVIZWlnaHQgPSBvcHRzLmNzcy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkY29udGVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRib2R5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICRpZnJhbWVbMF0uaXNSZWFkeSAhPT0gMSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgY29udGVudCBpcyBhY2Nlc3NpYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0IHdpbGwgZmFpbCBpZiBmcmFtZSBpcyBub3Qgd2l0aCB0aGUgc2FtZSBvcmlnaW5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRlbnRzID0gJGlmcmFtZS5jb250ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkYm9keSAgICAgPSAkY29udGVudHMuZmluZCgnYm9keScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBkaW1lbnNpb25zIGZvciB0aGUgd3JhcHBlclxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggJGJvZHkgJiYgJGJvZHkubGVuZ3RoICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBmcmFtZVdpZHRoID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxXaWR0aCA9ICRpZnJhbWVbMF0uY29udGVudFdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVXaWR0aCA9IE1hdGguY2VpbCggJGJvZHkub3V0ZXJXaWR0aCh0cnVlKSArICggJHdyYXAud2lkdGgoKSAtIHNjcm9sbFdpZHRoICkgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lV2lkdGggKz0gJHdyYXAub3V0ZXJXaWR0aCgpIC0gJHdyYXAuaW5uZXJXaWR0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGZyYW1lSGVpZ2h0ID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZUhlaWdodCA9IE1hdGguY2VpbCggJGJvZHkub3V0ZXJIZWlnaHQodHJ1ZSkgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lSGVpZ2h0ICs9ICR3cmFwLm91dGVySGVpZ2h0KCkgLSAkd3JhcC5pbm5lckhlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNpemUgd3JhcHBlciB0byBmaXQgaWZyYW1lIGNvbnRlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBmcmFtZVdpZHRoICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdyYXAud2lkdGgoIGZyYW1lV2lkdGggKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBmcmFtZUhlaWdodCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3cmFwLmhlaWdodCggZnJhbWVIZWlnaHQgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHdyYXAucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1pcy1oaWRkZW4nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuYWZ0ZXJMb2FkKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJGlmcmFtZS5hdHRyKCAnc3JjJywgc2xpZGUuc3JjICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNsaWRlLm9wdHMuc21hbGxCdG4gPT09IHRydWUgKSB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZS4kY29udGVudC5wcmVwZW5kKCBzZWxmLnRyYW5zbGF0ZSggc2xpZGUsIHNsaWRlLm9wdHMuYnRuVHBsLnNtYWxsQnRuICkgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGlmcmFtZSBpZiBjbG9zaW5nIG9yIGNoYW5naW5nIGdhbGxlcnkgaXRlbVxyXG4gICAgICAgICAgICAkc2xpZGUub25lKCAnb25SZXNldCcsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGhlbHBzIElFIG5vdCB0byB0aHJvdyBlcnJvcnMgd2hlbiBjbG9zaW5nXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKCB0aGlzICkuZmluZCggJ2lmcmFtZScgKS5oaWRlKCkuYXR0ciggJ3NyYycsICcvL2Fib3V0OmJsYW5rJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKCBpZ25vcmUgKSB7fVxyXG5cclxuICAgICAgICAgICAgICAgICQoIHRoaXMgKS5lbXB0eSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNsaWRlLmlzTG9hZGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFdyYXAgYW5kIGFwcGVuZCBjb250ZW50IHRvIHRoZSBzbGlkZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNldENvbnRlbnQgOiBmdW5jdGlvbiAoIHNsaWRlLCBjb250ZW50ICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzZWxmLmlzQ2xvc2luZyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi5oaWRlTG9hZGluZyggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlLiRzbGlkZS5lbXB0eSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBpc1F1ZXJ5KCBjb250ZW50ICkgJiYgY29udGVudC5wYXJlbnQoKS5sZW5ndGggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSWYgY29udGVudCBpcyBhIGpRdWVyeSBvYmplY3QsIHRoZW4gaXQgd2lsbCBiZSBtb3ZlZCB0byB0aGUgc2xpZGUuXHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgcGxhY2Vob2xkZXIgaXMgY3JlYXRlZCBzbyB3ZSB3aWxsIGtub3cgd2hlcmUgdG8gcHV0IGl0IGJhY2suXHJcbiAgICAgICAgICAgICAgICAvLyBJZiB1c2VyIGlzIG5hdmlnYXRpbmcgZ2FsbGVyeSBmYXN0LCB0aGVuIHRoZSBjb250ZW50IG1pZ2h0IGJlIGFscmVhZHkgaW5zaWRlIGZhbmN5Qm94XHJcbiAgICAgICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIGNvbnRlbnQgaXMgbm90IGFscmVhZHkgbW92ZWQgdG8gZmFuY3lCb3hcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQucGFyZW50KCAnLmZhbmN5Ym94LXNsaWRlLS1pbmxpbmUnICkudHJpZ2dlciggJ29uUmVzZXQnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRlbXBvcmFyeSBlbGVtZW50IG1hcmtpbmcgb3JpZ2luYWwgcGxhY2Ugb2YgdGhlIGNvbnRlbnRcclxuICAgICAgICAgICAgICAgIHNsaWRlLiRwbGFjZWhvbGRlciA9ICQoICc8ZGl2PjwvZGl2PicgKS5oaWRlKCkuaW5zZXJ0QWZ0ZXIoIGNvbnRlbnQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgY29udGVudCBpcyB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICBjb250ZW50LmNzcygnZGlzcGxheScsICdpbmxpbmUtYmxvY2snKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoICFzbGlkZS5oYXNFcnJvciApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBjb250ZW50IGlzIGp1c3QgYSBwbGFpbiB0ZXh0LCB0cnkgdG8gY29udmVydCBpdCB0byBodG1sXHJcbiAgICAgICAgICAgICAgICBpZiAoICQudHlwZSggY29udGVudCApID09PSAnc3RyaW5nJyApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gJCgnPGRpdj4nKS5hcHBlbmQoICQudHJpbSggY29udGVudCApICkuY29udGVudHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSB0ZXh0IG5vZGUsIHRoZW4gYWRkIHdyYXBwaW5nIGVsZW1lbnQgdG8gbWFrZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgd29ya1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICggY29udGVudFswXS5ub2RlVHlwZSA9PT0gMyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9ICQoJzxkaXY+JykuaHRtbCggY29udGVudCApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBcImZpbHRlclwiIG9wdGlvbiBpcyBwcm92aWRlZCwgdGhlbiBmaWx0ZXIgY29udGVudFxyXG4gICAgICAgICAgICAgICAgaWYgKCBzbGlkZS5vcHRzLmZpbHRlciApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gJCgnPGRpdj4nKS5odG1sKCBjb250ZW50ICkuZmluZCggc2xpZGUub3B0cy5maWx0ZXIgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNsaWRlLiRzbGlkZS5vbmUoJ29uUmVzZXQnLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUHV0IGNvbnRlbnQgYmFja1xyXG4gICAgICAgICAgICAgICAgaWYgKCBzbGlkZS4kcGxhY2Vob2xkZXIgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuJHBsYWNlaG9sZGVyLmFmdGVyKCBjb250ZW50LmhpZGUoKSApLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS4kcGxhY2Vob2xkZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjdXN0b20gY2xvc2UgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLiRzbWFsbEJ0biApIHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS4kc21hbGxCdG4ucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLiRzbWFsbEJ0biA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGNvbnRlbnQgYW5kIG1hcmsgc2xpZGUgYXMgbm90IGxvYWRlZFxyXG4gICAgICAgICAgICAgICAgaWYgKCAhc2xpZGUuaGFzRXJyb3IgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5lbXB0eSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5pc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzbGlkZS4kY29udGVudCA9ICQoIGNvbnRlbnQgKS5hcHBlbmRUbyggc2xpZGUuJHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFmdGVyTG9hZCggc2xpZGUgKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBEaXNwbGF5IGVycm9yIG1lc3NhZ2VcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgc2V0RXJyb3IgOiBmdW5jdGlvbiAoIHNsaWRlICkge1xyXG5cclxuICAgICAgICAgICAgc2xpZGUuaGFzRXJyb3IgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgc2xpZGUuJHNsaWRlLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtc2xpZGUtLScgKyBzbGlkZS50eXBlICk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldENvbnRlbnQoIHNsaWRlLCB0aGlzLnRyYW5zbGF0ZSggc2xpZGUsIHNsaWRlLm9wdHMuZXJyb3JUcGwgKSApO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gU2hvdyBsb2FkaW5nIGljb24gaW5zaWRlIHRoZSBzbGlkZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgc2hvd0xvYWRpbmcgOiBmdW5jdGlvbiggc2xpZGUgKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBzbGlkZSA9IHNsaWRlIHx8IHNlbGYuY3VycmVudDtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2xpZGUgJiYgIXNsaWRlLiRzcGlubmVyICkge1xyXG4gICAgICAgICAgICAgICAgc2xpZGUuJHNwaW5uZXIgPSAkKCBzZWxmLm9wdHMuc3Bpbm5lclRwbCApLmFwcGVuZFRvKCBzbGlkZS4kc2xpZGUgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBSZW1vdmUgbG9hZGluZyBpY29uIGZyb20gdGhlIHNsaWRlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBoaWRlTG9hZGluZyA6IGZ1bmN0aW9uKCBzbGlkZSApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHNsaWRlID0gc2xpZGUgfHwgc2VsZi5jdXJyZW50O1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzbGlkZSAmJiBzbGlkZS4kc3Bpbm5lciApIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlLiRzcGlubmVyLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzbGlkZS4kc3Bpbm5lcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQWRqdXN0bWVudHMgYWZ0ZXIgc2xpZGUgY29udGVudCBoYXMgYmVlbiBsb2FkZWRcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBhZnRlckxvYWQgOiBmdW5jdGlvbiggc2xpZGUgKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNlbGYuaXNDbG9zaW5nICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzbGlkZS5pc0xvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2xpZGUuaXNMb2FkZWQgID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYudHJpZ2dlciggJ2FmdGVyTG9hZCcsIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmhpZGVMb2FkaW5nKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzbGlkZS5vcHRzLnNtYWxsQnRuICYmICFzbGlkZS4kc21hbGxCdG4gKSB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZS4kc21hbGxCdG4gPSAkKCBzZWxmLnRyYW5zbGF0ZSggc2xpZGUsIHNsaWRlLm9wdHMuYnRuVHBsLnNtYWxsQnRuICkgKS5hcHBlbmRUbyggc2xpZGUuJGNvbnRlbnQuZmlsdGVyKCdkaXYsZm9ybScpLmZpcnN0KCkgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBzbGlkZS5vcHRzLnByb3RlY3QgJiYgc2xpZGUuJGNvbnRlbnQgJiYgIXNsaWRlLmhhc0Vycm9yICkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIERpc2FibGUgcmlnaHQgY2xpY2tcclxuICAgICAgICAgICAgICAgIHNsaWRlLiRjb250ZW50Lm9uKCAnY29udGV4dG1lbnUuZmInLCBmdW5jdGlvbiggZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgaWYgKCBlLmJ1dHRvbiA9PSAyICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQWRkIGZha2UgZWxlbWVudCBvbiB0b3Agb2YgdGhlIGltYWdlXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG1ha2VzIGEgYml0IGhhcmRlciBmb3IgdXNlciB0byBzZWxlY3QgaW1hZ2VcclxuICAgICAgICAgICAgICAgIGlmICggc2xpZGUudHlwZSA9PT0gJ2ltYWdlJyApIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXNwYWNlYmFsbFwiPjwvZGl2PicgKS5hcHBlbmRUbyggc2xpZGUuJGNvbnRlbnQgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGYucmV2ZWFsQ29udGVudCggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIE1ha2UgY29udGVudCB2aXNpYmxlXHJcbiAgICAgICAgLy8gVGhpcyBtZXRob2QgaXMgY2FsbGVkIHJpZ2h0IGFmdGVyIGNvbnRlbnQgaGFzIGJlZW4gbG9hZGVkIG9yXHJcbiAgICAgICAgLy8gdXNlciBuYXZpZ2F0ZXMgZ2FsbGVyeSBhbmQgdHJhbnNpdGlvbiBzaG91bGQgc3RhcnRcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgcmV2ZWFsQ29udGVudCA6IGZ1bmN0aW9uKCBzbGlkZSApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmICAgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgJHNsaWRlID0gc2xpZGUuJHNsaWRlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGVmZmVjdCwgZWZmZWN0Q2xhc3NOYW1lLCBkdXJhdGlvbiwgb3BhY2l0eSwgZW5kLCBzdGFydCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgZWZmZWN0ICAgPSBzbGlkZS5vcHRzWyBzZWxmLmZpcnN0UnVuID8gJ2FuaW1hdGlvbkVmZmVjdCcgICA6ICd0cmFuc2l0aW9uRWZmZWN0JyBdO1xyXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHNsaWRlLm9wdHNbIHNlbGYuZmlyc3RSdW4gPyAnYW5pbWF0aW9uRHVyYXRpb24nIDogJ3RyYW5zaXRpb25EdXJhdGlvbicgXTtcclxuXHJcbiAgICAgICAgICAgIGR1cmF0aW9uID0gcGFyc2VJbnQoIHNsaWRlLmZvcmNlZER1cmF0aW9uID09PSB1bmRlZmluZWQgPyBkdXJhdGlvbiA6IHNsaWRlLmZvcmNlZER1cmF0aW9uLCAxMCApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzbGlkZS5pc01vdmVkIHx8IHNsaWRlLnBvcyAhPT0gc2VsZi5jdXJyUG9zIHx8ICFkdXJhdGlvbiApIHtcclxuICAgICAgICAgICAgICAgIGVmZmVjdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiBjYW4gem9vbVxyXG4gICAgICAgICAgICBpZiAoIGVmZmVjdCA9PT0gJ3pvb20nICYmICEoIHNsaWRlLnBvcyA9PT0gc2VsZi5jdXJyUG9zICYmIGR1cmF0aW9uICYmIHNsaWRlLnR5cGUgPT09ICdpbWFnZScgJiYgIXNsaWRlLmhhc0Vycm9yICYmICggc3RhcnQgPSBzZWxmLmdldFRodW1iUG9zKCBzbGlkZSApICkgKSApIHtcclxuICAgICAgICAgICAgICAgIGVmZmVjdCA9ICdmYWRlJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gWm9vbSBhbmltYXRpb25cclxuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAgIGlmICggZWZmZWN0ID09PSAnem9vbScgKSB7XHJcbiAgICAgICAgICAgICAgICBlbmQgPSBzZWxmLmdldEZpdFBvcyggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbmQuc2NhbGVYID0gZW5kLndpZHRoICAvIHN0YXJ0LndpZHRoO1xyXG4gICAgICAgICAgICAgICAgZW5kLnNjYWxlWSA9IGVuZC5oZWlnaHQgLyBzdGFydC5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGVuZC53aWR0aDtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbmQuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gYW5pbWF0ZSBvcGFjaXR5XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5ID0gc2xpZGUub3B0cy56b29tT3BhY2l0eTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIG9wYWNpdHkgPT0gJ2F1dG8nICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHkgPSBNYXRoLmFicyggc2xpZGUud2lkdGggLyBzbGlkZS5oZWlnaHQgLSBzdGFydC53aWR0aCAvIHN0YXJ0LmhlaWdodCApID4gMC4xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggb3BhY2l0eSApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydC5vcGFjaXR5ID0gMC4xO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZC5vcGFjaXR5ICAgPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIERyYXcgaW1hZ2UgYXQgc3RhcnQgcG9zaXRpb25cclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCBzbGlkZS4kY29udGVudC5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LWlzLWhpZGRlbicgKSwgc3RhcnQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3JjZVJlZHJhdyggc2xpZGUuJGNvbnRlbnQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTdGFydCBhbmltYXRpb25cclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3guYW5pbWF0ZSggc2xpZGUuJGNvbnRlbnQsIGVuZCwgZHVyYXRpb24sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi51cGRhdGVTbGlkZSggc2xpZGUgKTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBTaW1wbHkgc2hvdyBjb250ZW50XHJcbiAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAgIGlmICggIWVmZmVjdCApIHtcclxuICAgICAgICAgICAgICAgIGZvcmNlUmVkcmF3KCAkc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzbGlkZS4kY29udGVudC5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LWlzLWhpZGRlbicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLnBvcyA9PT0gc2VsZi5jdXJyUG9zICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICQuZmFuY3lib3guc3RvcCggJHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICBlZmZlY3RDbGFzc05hbWUgPSAnZmFuY3lib3gtYW5pbWF0ZWQgZmFuY3lib3gtc2xpZGUtLScgKyAoIHNsaWRlLnBvcyA+PSBzZWxmLnByZXZQb3MgPyAnbmV4dCcgOiAncHJldmlvdXMnICkgKyAnIGZhbmN5Ym94LWZ4LScgKyBlZmZlY3Q7XHJcblxyXG4gICAgICAgICAgICAkc2xpZGUucmVtb3ZlQXR0ciggJ3N0eWxlJyApLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtc2xpZGUtLWN1cnJlbnQgZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzJyApLmFkZENsYXNzKCBlZmZlY3RDbGFzc05hbWUgKTtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlLiRjb250ZW50LnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtaXMtaGlkZGVuJyApO1xyXG5cclxuICAgICAgICAgICAgLy9Gb3JjZSByZWZsb3cgZm9yIENTUzMgdHJhbnNpdGlvbnNcclxuICAgICAgICAgICAgZm9yY2VSZWRyYXcoICRzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKCAkc2xpZGUsICdmYW5jeWJveC1zbGlkZS0tY3VycmVudCcsIGR1cmF0aW9uLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2xpZGUucmVtb3ZlQ2xhc3MoIGVmZmVjdENsYXNzTmFtZSApLnJlbW92ZUF0dHIoICdzdHlsZScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLnBvcyA9PT0gc2VsZi5jdXJyUG9zICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0sIHRydWUpO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgY2FuIGFuZCBoYXZlIHRvIHpvb20gZnJvbSB0aHVtYm5haWxcclxuICAgICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBnZXRUaHVtYlBvcyA6IGZ1bmN0aW9uKCBzbGlkZSApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIHJleiAgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIGVsZW1lbnQgaXMgaW5zaWRlIHRoZSB2aWV3cG9ydCBieSBhdCBsZWFzdCAxIHBpeGVsXHJcbiAgICAgICAgICAgIHZhciBpc0VsZW1lbnRWaXNpYmxlID0gZnVuY3Rpb24oICRlbCApIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gJGVsWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50UmVjdHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdmlzaWJsZUluQWxsUGFyZW50cztcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoIGVsZW1lbnQucGFyZW50RWxlbWVudCAhPT0gbnVsbCApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoICQoZWxlbWVudC5wYXJlbnRFbGVtZW50KS5jc3MoJ292ZXJmbG93JykgPT09ICdoaWRkZW4nICB8fCAkKGVsZW1lbnQucGFyZW50RWxlbWVudCkuY3NzKCdvdmVyZmxvdycpID09PSAnYXV0bycgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFJlY3RzLnB1c2goZWxlbWVudC5wYXJlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmlzaWJsZUluQWxsUGFyZW50cyA9IHBhcmVudFJlY3RzLmV2ZXJ5KGZ1bmN0aW9uKHBhcmVudFJlY3Qpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2aXNpYmxlUGl4ZWxYID0gTWF0aC5taW4oZWxlbWVudFJlY3QucmlnaHQsIHBhcmVudFJlY3QucmlnaHQpIC0gTWF0aC5tYXgoZWxlbWVudFJlY3QubGVmdCwgcGFyZW50UmVjdC5sZWZ0KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmlzaWJsZVBpeGVsWSA9IE1hdGgubWluKGVsZW1lbnRSZWN0LmJvdHRvbSwgcGFyZW50UmVjdC5ib3R0b20pIC0gTWF0aC5tYXgoZWxlbWVudFJlY3QudG9wLCBwYXJlbnRSZWN0LnRvcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2aXNpYmxlUGl4ZWxYID4gMCAmJiB2aXNpYmxlUGl4ZWxZID4gMDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpYmxlSW5BbGxQYXJlbnRzICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFJlY3QuYm90dG9tID4gMCAmJiBlbGVtZW50UmVjdC5yaWdodCA+IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50UmVjdC5sZWZ0IDwgJCh3aW5kb3cpLndpZHRoKCkgJiYgZWxlbWVudFJlY3QudG9wIDwgJCh3aW5kb3cpLmhlaWdodCgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aHVtYiAgID0gc2xpZGUub3B0cy4kdGh1bWI7XHJcbiAgICAgICAgICAgIHZhciB0aHVtYlBvcyA9ICR0aHVtYiA/ICR0aHVtYi5vZmZzZXQoKSA6IDA7XHJcbiAgICAgICAgICAgIHZhciBzbGlkZVBvcztcclxuXHJcbiAgICAgICAgICAgIGlmICggdGh1bWJQb3MgJiYgJHRodW1iWzBdLm93bmVyRG9jdW1lbnQgPT09IGRvY3VtZW50ICYmIGlzRWxlbWVudFZpc2libGUoICR0aHVtYiApICkge1xyXG4gICAgICAgICAgICAgICAgc2xpZGVQb3MgPSBzZWxmLiRyZWZzLnN0YWdlLm9mZnNldCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJleiA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0b3AgICAgOiB0aHVtYlBvcy50b3AgIC0gc2xpZGVQb3MudG9wICArIHBhcnNlRmxvYXQoICR0aHVtYi5jc3MoIFwiYm9yZGVyLXRvcC13aWR0aFwiICkgfHwgMCApLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgICA6IHRodW1iUG9zLmxlZnQgLSBzbGlkZVBvcy5sZWZ0ICsgcGFyc2VGbG9hdCggJHRodW1iLmNzcyggXCJib3JkZXItbGVmdC13aWR0aFwiICkgfHwgMCApLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoICA6ICR0aHVtYi53aWR0aCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA6ICR0aHVtYi5oZWlnaHQoKSxcclxuICAgICAgICAgICAgICAgICAgICBzY2FsZVggOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlWSA6IDFcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXo7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIEZpbmFsIGFkanVzdG1lbnRzIGFmdGVyIGN1cnJlbnQgZ2FsbGVyeSBpdGVtIGlzIG1vdmVkIHRvIHBvc2l0aW9uXHJcbiAgICAgICAgLy8gYW5kIGl0YHMgY29udGVudCBpcyBsb2FkZWRcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgY29tcGxldGUgOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gc2VsZi5jdXJyZW50O1xyXG4gICAgICAgICAgICB2YXIgc2xpZGVzICA9IHt9O1xyXG5cclxuICAgICAgICAgICAgaWYgKCBjdXJyZW50LmlzTW92ZWQgfHwgIWN1cnJlbnQuaXNMb2FkZWQgfHwgY3VycmVudC5pc0NvbXBsZXRlICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LmlzQ29tcGxldGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgY3VycmVudC4kc2xpZGUuc2libGluZ3MoKS50cmlnZ2VyKCAnb25SZXNldCcgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRyaWdnZXIgYW55IENTUzMgdHJhbnNpdG9uIGluc2lkZSB0aGUgc2xpZGVcclxuICAgICAgICAgICAgZm9yY2VSZWRyYXcoIGN1cnJlbnQuJHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LiRzbGlkZS5hZGRDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS1jb21wbGV0ZScgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSB1bm5lY2Vzc2FyeSBzbGlkZXNcclxuICAgICAgICAgICAgJC5lYWNoKCBzZWxmLnNsaWRlcywgZnVuY3Rpb24oIGtleSwgc2xpZGUgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLnBvcyA+PSBzZWxmLmN1cnJQb3MgLSAxICYmIHNsaWRlLnBvcyA8PSBzZWxmLmN1cnJQb3MgKyAxICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1sgc2xpZGUucG9zIF0gPSBzbGlkZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBzbGlkZSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJC5mYW5jeWJveC5zdG9wKCBzbGlkZS4kc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuJHNsaWRlLm9mZigpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuc2xpZGVzID0gc2xpZGVzO1xyXG5cclxuICAgICAgICAgICAgc2VsZi51cGRhdGVDdXJzb3IoKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYudHJpZ2dlciggJ2FmdGVyU2hvdycgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRyeSB0byBmb2N1cyBvbiB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnRcclxuICAgICAgICAgICAgaWYgKCAkKCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICkuaXMoICdbZGlzYWJsZWRdJyApIHx8ICggY3VycmVudC5vcHRzLmF1dG9Gb2N1cyAmJiAhKCBjdXJyZW50LnR5cGUgPT0gJ2ltYWdlJyB8fCBjdXJyZW50LnR5cGUgPT09ICdpZnJhbWUnICkgKSApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuZm9jdXMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gUHJlbG9hZCBuZXh0IGFuZCBwcmV2aW91cyBzbGlkZXNcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBwcmVsb2FkIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIG5leHQsIHByZXY7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNlbGYuZ3JvdXAubGVuZ3RoIDwgMiApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbmV4dCAgPSBzZWxmLnNsaWRlc1sgc2VsZi5jdXJyUG9zICsgMSBdO1xyXG4gICAgICAgICAgICBwcmV2ICA9IHNlbGYuc2xpZGVzWyBzZWxmLmN1cnJQb3MgLSAxIF07XHJcblxyXG4gICAgICAgICAgICBpZiAoIG5leHQgJiYgbmV4dC50eXBlID09PSAnaW1hZ2UnICkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sb2FkU2xpZGUoIG5leHQgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBwcmV2ICYmIHByZXYudHlwZSA9PT0gJ2ltYWdlJyApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYubG9hZFNsaWRlKCBwcmV2ICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGFuZCBmb2N1cyBvbiB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnRcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGZvY3VzIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xyXG4gICAgICAgICAgICB2YXIgJGVsO1xyXG5cclxuICAgICAgICAgICAgaWYgKCB0aGlzLmlzQ2xvc2luZyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBjdXJyZW50ICYmIGN1cnJlbnQuaXNDb21wbGV0ZSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBMb29rIGZvciBmaXJzdCBpbnB1dCB3aXRoIGF1dG9mb2N1cyBhdHRyaWJ1dGVcclxuICAgICAgICAgICAgICAgICRlbCA9IGN1cnJlbnQuJHNsaWRlLmZpbmQoJ2lucHV0W2F1dG9mb2N1c106ZW5hYmxlZDp2aXNpYmxlOmZpcnN0Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhJGVsLmxlbmd0aCApIHtcclxuICAgICAgICAgICAgICAgICAgICAkZWwgPSBjdXJyZW50LiRzbGlkZS5maW5kKCdidXR0b24sOmlucHV0LFt0YWJpbmRleF0sYScpLmZpbHRlcignOmVuYWJsZWQ6dmlzaWJsZTpmaXJzdCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkZWwgPSAkZWwgJiYgJGVsLmxlbmd0aCA/ICRlbCA6IHRoaXMuJHJlZnMuY29udGFpbmVyO1xyXG5cclxuICAgICAgICAgICAgJGVsLmZvY3VzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIEFjdGl2YXRlcyBjdXJyZW50IGluc3RhbmNlIC0gYnJpbmdzIGNvbnRhaW5lciB0byB0aGUgZnJvbnQgYW5kIGVuYWJsZXMga2V5Ym9hcmQsXHJcbiAgICAgICAgLy8gbm90aWZpZXMgb3RoZXIgaW5zdGFuY2VzIGFib3V0IGRlYWN0aXZhdGluZ1xyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBhY3RpdmF0ZSA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgLy8gRGVhY3RpdmF0ZSBhbGwgaW5zdGFuY2VzXHJcbiAgICAgICAgICAgICQoICcuZmFuY3lib3gtY29udGFpbmVyJyApLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gJCh0aGlzKS5kYXRhKCAnRmFuY3lCb3gnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2tpcCBzZWxmIGFuZCBjbG9zaW5nIGluc3RhbmNlc1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmlkICE9PSBzZWxmLmlkICYmICFpbnN0YW5jZS5pc0Nsb3NpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS50cmlnZ2VyKCAnb25EZWFjdGl2YXRlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5yZW1vdmVFdmVudHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuaXNWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2VsZi5jdXJyZW50IHx8IHNlbGYuaXNJZGxlICkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZUNvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGYudHJpZ2dlciggJ29uQWN0aXZhdGUnICk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmFkZEV2ZW50cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBTdGFydCBjbG9zaW5nIHByb2NlZHVyZVxyXG4gICAgICAgIC8vIFRoaXMgd2lsbCBzdGFydCBcInpvb20tb3V0XCIgYW5pbWF0aW9uIGlmIG5lZWRlZCBhbmQgY2xlYW4gZXZlcnl0aGluZyB1cCBhZnRlcndhcmRzXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGNsb3NlIDogZnVuY3Rpb24oIGUsIGQgKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiAgICA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gc2VsZi5jdXJyZW50O1xyXG5cclxuICAgICAgICAgICAgdmFyIGVmZmVjdCwgZHVyYXRpb247XHJcbiAgICAgICAgICAgIHZhciAkd2hhdCwgb3BhY2l0eSwgc3RhcnQsIGVuZDtcclxuXHJcbiAgICAgICAgICAgIHZhciBkb25lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmNsZWFuVXAoIGUgKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2VsZi5pc0Nsb3NpbmcgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGYuaXNDbG9zaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIGJlZm9yZUNsb3NlIGNhbGxiYWNrIHByZXZlbnRzIGNsb3NpbmcsIG1ha2Ugc3VyZSBjb250ZW50IGlzIGNlbnRlcmVkXHJcbiAgICAgICAgICAgIGlmICggc2VsZi50cmlnZ2VyKCAnYmVmb3JlQ2xvc2UnLCBlICkgPT09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pc0Nsb3NpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0QUZyYW1lKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgZXZlbnRzXHJcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBpbnN0YW5jZXMsIHRoZXkgd2lsbCBiZSBzZXQgYWdhaW4gYnkgXCJhY3RpdmF0ZVwiIG1ldGhvZFxyXG4gICAgICAgICAgICBzZWxmLnJlbW92ZUV2ZW50cygpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBjdXJyZW50LnRpbW91dHMgKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoIGN1cnJlbnQudGltb3V0cyApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkd2hhdCAgICA9IGN1cnJlbnQuJGNvbnRlbnQ7XHJcbiAgICAgICAgICAgIGVmZmVjdCAgID0gY3VycmVudC5vcHRzLmFuaW1hdGlvbkVmZmVjdDtcclxuICAgICAgICAgICAgZHVyYXRpb24gPSAkLmlzTnVtZXJpYyggZCApID8gZCA6ICggZWZmZWN0ID8gY3VycmVudC5vcHRzLmFuaW1hdGlvbkR1cmF0aW9uIDogMCApO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlIG90aGVyIHNsaWRlc1xyXG4gICAgICAgICAgICBjdXJyZW50LiRzbGlkZS5vZmYoIHRyYW5zaXRpb25FbmQgKS5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS1jb21wbGV0ZSBmYW5jeWJveC1zbGlkZS0tbmV4dCBmYW5jeWJveC1zbGlkZS0tcHJldmlvdXMgZmFuY3lib3gtYW5pbWF0ZWQnICk7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LiRzbGlkZS5zaWJsaW5ncygpLnRyaWdnZXIoICdvblJlc2V0JyApLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gVHJpZ2dlciBhbmltYXRpb25zXHJcbiAgICAgICAgICAgIGlmICggZHVyYXRpb24gKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LWlzLW9wZW4nICkuYWRkQ2xhc3MoICdmYW5jeWJveC1pcy1jbG9zaW5nJyApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDbGVhbiB1cFxyXG4gICAgICAgICAgICBzZWxmLmhpZGVMb2FkaW5nKCBjdXJyZW50ICk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmhpZGVDb250cm9scygpO1xyXG5cclxuICAgICAgICAgICAgc2VsZi51cGRhdGVDdXJzb3IoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHBvc3NpYmxlIHRvIHpvb20tb3V0XHJcbiAgICAgICAgICAgIGlmICggZWZmZWN0ID09PSAnem9vbScgJiYgISggZSAhPT0gdHJ1ZSAmJiAkd2hhdCAmJiBkdXJhdGlvbiAmJiBjdXJyZW50LnR5cGUgPT09ICdpbWFnZScgJiYgIWN1cnJlbnQuaGFzRXJyb3IgJiYgKCBlbmQgPSBzZWxmLmdldFRodW1iUG9zKCBjdXJyZW50ICkgKSApICkge1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0ID0gJ2ZhZGUnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIGVmZmVjdCA9PT0gJ3pvb20nICkge1xyXG4gICAgICAgICAgICAgICAgJC5mYW5jeWJveC5zdG9wKCAkd2hhdCApO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoICR3aGF0ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RhcnQud2lkdGggID0gc3RhcnQud2lkdGggICogc3RhcnQuc2NhbGVYO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQuaGVpZ2h0ID0gc3RhcnQuaGVpZ2h0ICogc3RhcnQuc2NhbGVZO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gYW5pbWF0ZSBvcGFjaXR5XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5ID0gY3VycmVudC5vcHRzLnpvb21PcGFjaXR5O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggb3BhY2l0eSA9PSAnYXV0bycgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eSA9IE1hdGguYWJzKCBjdXJyZW50LndpZHRoIC8gY3VycmVudC5oZWlnaHQgLSBlbmQud2lkdGggLyBlbmQuaGVpZ2h0ICkgPiAwLjE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBvcGFjaXR5ICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZC5vcGFjaXR5ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzdGFydC5zY2FsZVggPSBzdGFydC53aWR0aCAgLyBlbmQud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5zY2FsZVkgPSBzdGFydC5oZWlnaHQgLyBlbmQuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIHN0YXJ0LndpZHRoICA9IGVuZC53aWR0aDtcclxuICAgICAgICAgICAgICAgIHN0YXJ0LmhlaWdodCA9IGVuZC5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoIGN1cnJlbnQuJGNvbnRlbnQsIHN0YXJ0ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yY2VSZWRyYXcoIGN1cnJlbnQuJGNvbnRlbnQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoIGN1cnJlbnQuJGNvbnRlbnQsIGVuZCwgZHVyYXRpb24sIGRvbmUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBlZmZlY3QgJiYgZHVyYXRpb24gKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSWYgc2tpcCBhbmltYXRpb25cclxuICAgICAgICAgICAgICAgIGlmICggZSA9PT0gdHJ1ZSApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBkb25lLCBkdXJhdGlvbiApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKCBjdXJyZW50LiRzbGlkZS5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS1jdXJyZW50JyApLCAnZmFuY3lib3gtYW5pbWF0ZWQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzIGZhbmN5Ym94LWZ4LScgKyBlZmZlY3QsIGR1cmF0aW9uLCBkb25lICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gRmluYWwgYWRqdXN0bWVudHMgYWZ0ZXIgcmVtb3ZpbmcgdGhlIGluc3RhbmNlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGNsZWFuVXAgOiBmdW5jdGlvbiggZSApIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgID0gdGhpcyxcclxuICAgICAgICAgICAgICAgICRib2R5ID0gJCggJ2JvZHknICksXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSxcclxuICAgICAgICAgICAgICAgIG9mZnNldDtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuY3VycmVudC4kc2xpZGUudHJpZ2dlciggJ29uUmVzZXQnICk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lci5lbXB0eSgpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCAnYWZ0ZXJDbG9zZScsIGUgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFBsYWNlIGJhY2sgZm9jdXNcclxuICAgICAgICAgICAgaWYgKCBzZWxmLiRsYXN0Rm9jdXMgJiYgISFzZWxmLmN1cnJlbnQub3B0cy5iYWNrRm9jdXMgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLiRsYXN0Rm9jdXMuZm9jdXMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBvdGhlciBpbnN0YW5jZXNcclxuICAgICAgICAgICAgaW5zdGFuY2UgPSAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGluc3RhbmNlICkge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuYWN0aXZhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJFcuc2Nyb2xsVG9wKCBzZWxmLnNjcm9sbFRvcCApLnNjcm9sbExlZnQoIHNlbGYuc2Nyb2xsTGVmdCApO1xyXG5cclxuICAgICAgICAgICAgICAgICRib2R5LnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtYWN0aXZlIGNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhcicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICRib2R5Lmhhc0NsYXNzKCAnZmFuY3lib3gtaW9zZml4JyApICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHBhcnNlSW50KGRvY3VtZW50LmJvZHkuc3R5bGUudG9wLCAxMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRib2R5LnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtaW9zZml4JyApLmNzcyggJ3RvcCcsICcnICkuc2Nyb2xsVG9wKCBvZmZzZXQgKiAtMSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICQoICcjZmFuY3lib3gtc3R5bGUtbm9zY3JvbGwnICkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDYWxsIGNhbGxiYWNrIGFuZCB0cmlnZ2VyIGFuIGV2ZW50XHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICB0cmlnZ2VyIDogZnVuY3Rpb24oIG5hbWUsIHNsaWRlICkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyAgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxyXG4gICAgICAgICAgICAgICAgc2VsZiAgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgb2JqICAgPSBzbGlkZSAmJiBzbGlkZS5vcHRzID8gc2xpZGUgOiBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgICAgICAgICByZXo7XHJcblxyXG4gICAgICAgICAgICBpZiAoIG9iaiApIHtcclxuICAgICAgICAgICAgICAgIGFyZ3MudW5zaGlmdCggb2JqICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb2JqID0gc2VsZjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXJncy51bnNoaWZ0KCBzZWxmICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoICQuaXNGdW5jdGlvbiggb2JqLm9wdHNbIG5hbWUgXSApICkge1xyXG4gICAgICAgICAgICAgICAgcmV6ID0gb2JqLm9wdHNbIG5hbWUgXS5hcHBseSggb2JqLCBhcmdzICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggcmV6ID09PSBmYWxzZSApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXo7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggbmFtZSA9PT0gJ2FmdGVyQ2xvc2UnIHx8ICFzZWxmLiRyZWZzICkge1xyXG4gICAgICAgICAgICAgICAgJEQudHJpZ2dlciggbmFtZSArICcuZmInLCBhcmdzICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIudHJpZ2dlciggbmFtZSArICcuZmInLCBhcmdzICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBpbmZvYmFyIHZhbHVlcywgbmF2aWdhdGlvbiBidXR0b24gc3RhdGVzIGFuZCByZXZlYWwgY2FwdGlvblxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICB1cGRhdGVDb250cm9scyA6IGZ1bmN0aW9uICggZm9yY2UgKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB2YXIgY3VycmVudCAgPSBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgICAgICAgICBpbmRleCAgICA9IGN1cnJlbnQuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBjYXB0aW9uICA9IGN1cnJlbnQub3B0cy5jYXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lciA9IHNlbGYuJHJlZnMuY29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgJGNhcHRpb24gICA9IHNlbGYuJHJlZnMuY2FwdGlvbjtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlY2FsY3VsYXRlIGNvbnRlbnQgZGltZW5zaW9uc1xyXG4gICAgICAgICAgICBjdXJyZW50LiRzbGlkZS50cmlnZ2VyKCAncmVmcmVzaCcgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuJGNhcHRpb24gPSBjYXB0aW9uICYmIGNhcHRpb24ubGVuZ3RoID8gJGNhcHRpb24uaHRtbCggY2FwdGlvbiApIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmICggIXNlbGYuaXNIaWRkZW5Db250cm9scyAmJiAhc2VsZi5pc0lkbGUgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNob3dDb250cm9scygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgaW5mbyBhbmQgbmF2aWdhdGlvbiBlbGVtZW50c1xyXG4gICAgICAgICAgICAkY29udGFpbmVyLmZpbmQoJ1tkYXRhLWZhbmN5Ym94LWNvdW50XScpLmh0bWwoIHNlbGYuZ3JvdXAubGVuZ3RoICk7XHJcbiAgICAgICAgICAgICRjb250YWluZXIuZmluZCgnW2RhdGEtZmFuY3lib3gtaW5kZXhdJykuaHRtbCggaW5kZXggKyAxICk7XHJcblxyXG4gICAgICAgICAgICAkY29udGFpbmVyLmZpbmQoJ1tkYXRhLWZhbmN5Ym94LXByZXZdJykucHJvcCggJ2Rpc2FibGVkJywgKCAhY3VycmVudC5vcHRzLmxvb3AgJiYgaW5kZXggPD0gMCApICk7XHJcbiAgICAgICAgICAgICRjb250YWluZXIuZmluZCgnW2RhdGEtZmFuY3lib3gtbmV4dF0nKS5wcm9wKCAnZGlzYWJsZWQnLCAoICFjdXJyZW50Lm9wdHMubG9vcCAmJiBpbmRleCA+PSBzZWxmLmdyb3VwLmxlbmd0aCAtIDEgKSApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBjdXJyZW50LnR5cGUgPT09ICdpbWFnZScgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGRvd25sb2FkIGJ1dHRvbiBzb3VyY2VcclxuICAgICAgICAgICAgICAgICRjb250YWluZXIuZmluZCgnW2RhdGEtZmFuY3lib3gtZG93bmxvYWRdJykuYXR0ciggJ2hyZWYnLCBjdXJyZW50Lm9wdHMuaW1hZ2Uuc3JjIHx8IGN1cnJlbnQuc3JjICkuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRjb250YWluZXIuZmluZCgnW2RhdGEtZmFuY3lib3gtZG93bmxvYWRdLFtkYXRhLWZhbmN5Ym94LXpvb21dJykuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gSGlkZSB0b29sYmFyIGFuZCBjYXB0aW9uXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGhpZGVDb250cm9scyA6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaXNIaWRkZW5Db250cm9scyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRyZWZzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LXNob3ctaW5mb2JhciBmYW5jeWJveC1zaG93LXRvb2xiYXIgZmFuY3lib3gtc2hvdy1jYXB0aW9uIGZhbmN5Ym94LXNob3ctbmF2JyApO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzaG93Q29udHJvbHMgOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgb3B0cyA9IHNlbGYuY3VycmVudCA/IHNlbGYuY3VycmVudC5vcHRzIDogc2VsZi5vcHRzO1xyXG4gICAgICAgICAgICB2YXIgJGNvbnRhaW5lciA9IHNlbGYuJHJlZnMuY29udGFpbmVyO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5pc0hpZGRlbkNvbnRyb2xzICAgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgJGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCAnZmFuY3lib3gtc2hvdy10b29sYmFyJywgISEoIG9wdHMudG9vbGJhciAmJiBvcHRzLmJ1dHRvbnMgKSApXHJcbiAgICAgICAgICAgICAgICAudG9nZ2xlQ2xhc3MoICdmYW5jeWJveC1zaG93LWluZm9iYXInLCAhISggb3B0cy5pbmZvYmFyICYmIHNlbGYuZ3JvdXAubGVuZ3RoID4gMSApIClcclxuICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcyggJ2ZhbmN5Ym94LXNob3ctbmF2JywgICAgICEhKCBvcHRzLmFycm93cyAmJiBzZWxmLmdyb3VwLmxlbmd0aCA+IDEgKSApXHJcbiAgICAgICAgICAgICAgICAudG9nZ2xlQ2xhc3MoICdmYW5jeWJveC1pcy1tb2RhbCcsICAgICAhIW9wdHMubW9kYWwgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2VsZi4kY2FwdGlvbiApIHtcclxuICAgICAgICAgICAgICAgICRjb250YWluZXIuYWRkQ2xhc3MoICdmYW5jeWJveC1zaG93LWNhcHRpb24gJyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAkY29udGFpbmVyLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtc2hvdy1jYXB0aW9uJyApO1xyXG4gICAgICAgICAgIH1cclxuXHJcbiAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAvLyBUb2dnbGUgdG9vbGJhciBhbmQgY2FwdGlvblxyXG4gICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICB0b2dnbGVDb250cm9scyA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgIGlmICggdGhpcy5pc0hpZGRlbkNvbnRyb2xzICkge1xyXG4gICAgICAgICAgICAgICB0aGlzLnNob3dDb250cm9scygpO1xyXG5cclxuICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICB0aGlzLmhpZGVDb250cm9scygpO1xyXG4gICAgICAgICAgIH1cclxuXHJcbiAgICAgICB9LFxyXG5cclxuXHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgJC5mYW5jeWJveCA9IHtcclxuXHJcbiAgICAgICAgdmVyc2lvbiAgOiBcIjMuMi41XCIsXHJcbiAgICAgICAgZGVmYXVsdHMgOiBkZWZhdWx0cyxcclxuXHJcblxyXG4gICAgICAgIC8vIEdldCBjdXJyZW50IGluc3RhbmNlIGFuZCBleGVjdXRlIGEgY29tbWFuZC5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIEV4YW1wbGVzIG9mIHVzYWdlOlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gICAkaW5zdGFuY2UgPSAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgLy8gICAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCkuanVtcFRvKCAxICk7XHJcbiAgICAgICAgLy8gICAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCAnanVtcFRvJywgMSApO1xyXG4gICAgICAgIC8vICAgJC5mYW5jeWJveC5nZXRJbnN0YW5jZSggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gICAgICAgY29uc29sZS5pbmZvKCB0aGlzLmN1cnJJbmRleCApO1xyXG4gICAgICAgIC8vICAgfSk7XHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGdldEluc3RhbmNlIDogZnVuY3Rpb24gKCBjb21tYW5kICkge1xyXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSAkKCcuZmFuY3lib3gtY29udGFpbmVyOm5vdChcIi5mYW5jeWJveC1pcy1jbG9zaW5nXCIpOmxhc3QnKS5kYXRhKCAnRmFuY3lCb3gnICk7XHJcbiAgICAgICAgICAgIHZhciBhcmdzICAgICA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGluc3RhbmNlIGluc3RhbmNlb2YgRmFuY3lCb3ggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAkLnR5cGUoIGNvbW1hbmQgKSA9PT0gJ3N0cmluZycgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VbIGNvbW1hbmQgXS5hcHBseSggaW5zdGFuY2UsIGFyZ3MgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAkLnR5cGUoIGNvbW1hbmQgKSA9PT0gJ2Z1bmN0aW9uJyApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLmFwcGx5KCBpbnN0YW5jZSwgYXJncyApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBpbnN0YW5jZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgb3BlbiA6IGZ1bmN0aW9uICggaXRlbXMsIG9wdHMsIGluZGV4ICkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZhbmN5Qm94KCBpdGVtcywgb3B0cywgaW5kZXggKTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQ2xvc2UgY3VycmVudCBvciBhbGwgaW5zdGFuY2VzXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGNsb3NlIDogZnVuY3Rpb24gKCBhbGwgKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggaW5zdGFuY2UgKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5jbG9zZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRyeSB0byBmaW5kIGFuZCBjbG9zZSBuZXh0IGluc3RhbmNlXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBhbGwgPT09IHRydWUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIENsb3NlIGluc3RhbmNlcyBhbmQgdW5iaW5kIGFsbCBldmVudHNcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgZGVzdHJveSA6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jbG9zZSggdHJ1ZSApO1xyXG5cclxuICAgICAgICAgICAgJEQub2ZmKCAnY2xpY2suZmItc3RhcnQnICk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBUcnkgdG8gZGV0ZWN0IG1vYmlsZSBkZXZpY2VzXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBpc01vYmlsZSA6IGRvY3VtZW50LmNyZWF0ZVRvdWNoICE9PSB1bmRlZmluZWQgJiYgL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLFxyXG5cclxuXHJcbiAgICAgICAgLy8gRGV0ZWN0IGlmICd0cmFuc2xhdGUzZCcgc3VwcG9ydCBpcyBhdmFpbGFibGVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICB1c2UzZCA6IChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKSAmJiAhKGRvY3VtZW50LmRvY3VtZW50TW9kZSAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPCAxMSk7XHJcbiAgICAgICAgfSgpKSxcclxuXHJcbiAgICAgICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHZpc3VhbCBzdGF0ZSBvZiBhbiBlbGVtZW50XHJcbiAgICAgICAgLy8gcmV0dXJucyBhcnJheVsgdG9wLCBsZWZ0LCBob3Jpem9udGFsLXNjYWxlLCB2ZXJ0aWNhbC1zY2FsZSwgb3BhY2l0eSBdXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGdldFRyYW5zbGF0ZSA6IGZ1bmN0aW9uKCAkZWwgKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRyaXg7XHJcblxyXG4gICAgICAgICAgICBpZiAoICEkZWwgfHwgISRlbC5sZW5ndGggKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1hdHJpeCAgPSAkZWwuZXEoIDAgKS5jc3MoJ3RyYW5zZm9ybScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBtYXRyaXggJiYgbWF0cml4LmluZGV4T2YoICdtYXRyaXgnICkgIT09IC0xICkge1xyXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gbWF0cml4LnNwbGl0KCcoJylbMV07XHJcbiAgICAgICAgICAgICAgICBtYXRyaXggPSBtYXRyaXguc3BsaXQoJyknKVswXTtcclxuICAgICAgICAgICAgICAgIG1hdHJpeCA9IG1hdHJpeC5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gW107XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggbWF0cml4Lmxlbmd0aCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBJRVxyXG4gICAgICAgICAgICAgICAgaWYgKCBtYXRyaXgubGVuZ3RoID4gMTAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4ID0gWyBtYXRyaXhbMTNdLCBtYXRyaXhbMTJdLCBtYXRyaXhbMF0sIG1hdHJpeFs1XSBdO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4ID0gWyBtYXRyaXhbNV0sIG1hdHJpeFs0XSwgbWF0cml4WzBdLCBtYXRyaXhbM11dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG1hdHJpeCA9IG1hdHJpeC5tYXAocGFyc2VGbG9hdCk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gWyAwLCAwLCAxLCAxIF07XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zUmVnZXggPSAvXFwuKnRyYW5zbGF0ZVxcKCguKilweCwoLiopcHhcXCkvaTtcclxuICAgICAgICAgICAgICAgIHZhciB0cmFuc1JleiA9IHRyYW5zUmVnZXguZXhlYyggJGVsLmVxKCAwICkuYXR0cignc3R5bGUnKSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggdHJhbnNSZXogKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4WyAwIF0gPSBwYXJzZUZsb2F0KCB0cmFuc1JlelsyXSApO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpeFsgMSBdID0gcGFyc2VGbG9hdCggdHJhbnNSZXpbMV0gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRvcCAgICAgOiBtYXRyaXhbIDAgXSxcclxuICAgICAgICAgICAgICAgIGxlZnQgICAgOiBtYXRyaXhbIDEgXSxcclxuICAgICAgICAgICAgICAgIHNjYWxlWCAgOiBtYXRyaXhbIDIgXSxcclxuICAgICAgICAgICAgICAgIHNjYWxlWSAgOiBtYXRyaXhbIDMgXSxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHkgOiBwYXJzZUZsb2F0KCAkZWwuY3NzKCdvcGFjaXR5JykgKSxcclxuICAgICAgICAgICAgICAgIHdpZHRoICAgOiAkZWwud2lkdGgoKSxcclxuICAgICAgICAgICAgICAgIGhlaWdodCAgOiAkZWwuaGVpZ2h0KClcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFNob3J0Y3V0IGZvciBzZXR0aW5nIFwidHJhbnNsYXRlM2RcIiBwcm9wZXJ0aWVzIGZvciBlbGVtZW50XHJcbiAgICAgICAgLy8gQ2FuIHNldCBiZSB1c2VkIHRvIHNldCBvcGFjaXR5LCB0b29cclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBzZXRUcmFuc2xhdGUgOiBmdW5jdGlvbiggJGVsLCBwcm9wcyApIHtcclxuICAgICAgICAgICAgdmFyIHN0ciAgPSAnJztcclxuICAgICAgICAgICAgdmFyIGNzcyAgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGlmICggISRlbCB8fCAhcHJvcHMgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggcHJvcHMubGVmdCAhPT0gdW5kZWZpbmVkIHx8IHByb3BzLnRvcCAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgICAgICAgc3RyID0gKCBwcm9wcy5sZWZ0ID09PSB1bmRlZmluZWQgPyAkZWwucG9zaXRpb24oKS5sZWZ0IDogcHJvcHMubGVmdCApICArICdweCwgJyArICggcHJvcHMudG9wID09PSB1bmRlZmluZWQgPyAkZWwucG9zaXRpb24oKS50b3AgOiBwcm9wcy50b3AgKSArICdweCc7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLnVzZTNkICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9ICd0cmFuc2xhdGUzZCgnICsgc3RyICsgJywgMHB4KSc7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHIgPSAndHJhbnNsYXRlKCcgKyBzdHIgKyAnKSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggcHJvcHMuc2NhbGVYICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuc2NhbGVZICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICBzdHIgPSAoc3RyLmxlbmd0aCA/IHN0ciArICcgJyA6ICcnKSArICdzY2FsZSgnICsgcHJvcHMuc2NhbGVYICsgJywgJyArIHByb3BzLnNjYWxlWSArICcpJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBzdHIubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgY3NzLnRyYW5zZm9ybSA9IHN0cjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBwcm9wcy5vcGFjaXR5ICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICBjc3Mub3BhY2l0eSA9IHByb3BzLm9wYWNpdHk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggcHJvcHMud2lkdGggIT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAgICAgIGNzcy53aWR0aCA9IHByb3BzLndpZHRoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIHByb3BzLmhlaWdodCAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgICAgICAgY3NzLmhlaWdodCA9IHByb3BzLmhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuICRlbC5jc3MoIGNzcyApO1xyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBTaW1wbGUgQ1NTIHRyYW5zaXRpb24gaGFuZGxlclxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGFuaW1hdGUgOiBmdW5jdGlvbiAoICRlbCwgdG8sIGR1cmF0aW9uLCBjYWxsYmFjaywgbGVhdmVBbmltYXRpb25OYW1lICkge1xyXG4gICAgICAgICAgICBpZiAoICQuaXNGdW5jdGlvbiggZHVyYXRpb24gKSApIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggISQuaXNQbGFpbk9iamVjdCggdG8gKSApIHtcclxuICAgICAgICAgICAgICAgICRlbC5yZW1vdmVBdHRyKCdzdHlsZScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkZWwub24oIHRyYW5zaXRpb25FbmQsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTa2lwIGV2ZW50cyBmcm9tIGNoaWxkIGVsZW1lbnRzIGFuZCB6LWluZGV4IGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgaWYgKCBlICYmIGUub3JpZ2luYWxFdmVudCAmJiAoICEkZWwuaXMoIGUub3JpZ2luYWxFdmVudC50YXJnZXQgKSB8fCBlLm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lID09ICd6LWluZGV4JyApICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnN0b3AoICRlbCApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggJC5pc1BsYWluT2JqZWN0KCB0byApICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIHRvLnNjYWxlWCAhPT0gdW5kZWZpbmVkICYmIHRvLnNjYWxlWSAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkZWwuY3NzKCAndHJhbnNpdGlvbi1kdXJhdGlvbicsICcnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0by53aWR0aCAgPSBNYXRoLnJvdW5kKCAkZWwud2lkdGgoKSAgKiB0by5zY2FsZVggKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG8uaGVpZ2h0ID0gTWF0aC5yb3VuZCggJGVsLmhlaWdodCgpICogdG8uc2NhbGVZICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0by5zY2FsZVggPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0by5zY2FsZVkgPSAxO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoICRlbCwgdG8gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbGVhdmVBbmltYXRpb25OYW1lICE9PSB0cnVlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICRlbC5yZW1vdmVDbGFzcyggdG8gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICQuaXNGdW5jdGlvbiggY2FsbGJhY2sgKSApIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayggZSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoICQuaXNOdW1lcmljKCBkdXJhdGlvbiApICkge1xyXG4gICAgICAgICAgICAgICAgJGVsLmNzcyggJ3RyYW5zaXRpb24tZHVyYXRpb24nLCBkdXJhdGlvbiArICdtcycgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCAkLmlzUGxhaW5PYmplY3QoIHRvICkgKSB7XHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSggJGVsLCB0byApO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRlbC5hZGRDbGFzcyggdG8gKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCB0by5zY2FsZVggJiYgJGVsLmhhc0NsYXNzKCAnZmFuY3lib3gtaW1hZ2Utd3JhcCcgKSApIHtcclxuICAgICAgICAgICAgICAgICRlbC5wYXJlbnQoKS5hZGRDbGFzcyggJ2ZhbmN5Ym94LWlzLXNjYWxpbmcnICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGB0cmFuc2l0aW9uZW5kYCBjYWxsYmFjayBnZXRzIGZpcmVkXHJcbiAgICAgICAgICAgICRlbC5kYXRhKFwidGltZXJcIiwgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRlbC50cmlnZ2VyKCAndHJhbnNpdGlvbmVuZCcgKTtcclxuICAgICAgICAgICAgfSwgZHVyYXRpb24gKyAxNikpO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzdG9wIDogZnVuY3Rpb24oICRlbCApIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KCAkZWwuZGF0YShcInRpbWVyXCIpICk7XHJcblxyXG4gICAgICAgICAgICAkZWwub2ZmKCAndHJhbnNpdGlvbmVuZCcgKS5jc3MoICd0cmFuc2l0aW9uLWR1cmF0aW9uJywgJycgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggJGVsLmhhc0NsYXNzKCAnZmFuY3lib3gtaW1hZ2Utd3JhcCcgKSApIHtcclxuICAgICAgICAgICAgICAgICRlbC5wYXJlbnQoKS5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LWlzLXNjYWxpbmcnICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gRGVmYXVsdCBjbGljayBoYW5kbGVyIGZvciBcImZhbmN5Ym94ZWRcIiBsaW5rc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBmdW5jdGlvbiBfcnVuKCBlICkge1xyXG4gICAgICAgIHZhciAkdGFyZ2V0XHQ9ICQoIGUuY3VycmVudFRhcmdldCApLFxyXG4gICAgICAgICAgICBvcHRzXHQ9IGUuZGF0YSA/IGUuZGF0YS5vcHRpb25zIDoge30sXHJcbiAgICAgICAgICAgIHZhbHVlXHQ9ICR0YXJnZXQuYXR0ciggJ2RhdGEtZmFuY3lib3gnICkgfHwgJycsXHJcbiAgICAgICAgICAgIGluZGV4XHQ9IDAsXHJcbiAgICAgICAgICAgIGl0ZW1zICAgPSBbXTtcclxuXHJcbiAgICAgICAgLy8gQXZvaWQgb3BlbmluZyBtdWx0aXBsZSB0aW1lc1xyXG4gICAgICAgIGlmICggZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAvLyBHZXQgYWxsIHJlbGF0ZWQgaXRlbXMgYW5kIGZpbmQgaW5kZXggZm9yIGNsaWNrZWQgb25lXHJcbiAgICAgICAgaWYgKCB2YWx1ZSApIHtcclxuICAgICAgICAgICAgaXRlbXMgPSBvcHRzLnNlbGVjdG9yID8gJCggb3B0cy5zZWxlY3RvciApIDogKCBlLmRhdGEgPyBlLmRhdGEuaXRlbXMgOiBbXSApO1xyXG4gICAgICAgICAgICBpdGVtcyA9IGl0ZW1zLmxlbmd0aCA/IGl0ZW1zLmZpbHRlciggJ1tkYXRhLWZhbmN5Ym94PVwiJyArIHZhbHVlICsgJ1wiXScgKSA6ICQoICdbZGF0YS1mYW5jeWJveD1cIicgKyB2YWx1ZSArICdcIl0nICk7XHJcblxyXG4gICAgICAgICAgICBpbmRleCA9IGl0ZW1zLmluZGV4KCAkdGFyZ2V0ICk7XHJcblxyXG4gICAgICAgICAgICAvLyBTb21ldGltZXMgY3VycmVudCBpdGVtIGNhbiBub3QgYmUgZm91bmRcclxuICAgICAgICAgICAgLy8gKGZvciBleGFtcGxlLCB3aGVuIHNsaWRlciBjbG9uZXMgaXRlbXMpXHJcbiAgICAgICAgICAgIGlmICggaW5kZXggPCAwICkge1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGl0ZW1zID0gWyAkdGFyZ2V0IF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkLmZhbmN5Ym94Lm9wZW4oIGl0ZW1zLCBvcHRzLCBpbmRleCApO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBDcmVhdGUgYSBqUXVlcnkgcGx1Z2luXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgJC5mbi5mYW5jeWJveCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIHNlbGVjdG9yO1xyXG5cclxuICAgICAgICBvcHRpb25zICA9IG9wdGlvbnMgfHwge307XHJcbiAgICAgICAgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yIHx8IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoIHNlbGVjdG9yICkge1xyXG5cclxuICAgICAgICAgICAgJCggJ2JvZHknICkub2ZmKCAnY2xpY2suZmItc3RhcnQnLCBzZWxlY3RvciApLm9uKCAnY2xpY2suZmItc3RhcnQnLCBzZWxlY3Rvciwge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA6IG9wdGlvbnNcclxuICAgICAgICAgICAgfSwgX3J1biApO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vZmYoICdjbGljay5mYi1zdGFydCcgKS5vbiggJ2NsaWNrLmZiLXN0YXJ0Jywge1xyXG4gICAgICAgICAgICAgICAgaXRlbXMgICA6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zIDogb3B0aW9uc1xyXG4gICAgICAgICAgICB9LCBfcnVuKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8vIFNlbGYgaW5pdGlhbGl6aW5nIHBsdWdpblxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgJEQub24oICdjbGljay5mYi1zdGFydCcsICdbZGF0YS1mYW5jeWJveF0nLCBfcnVuICk7XHJcblxyXG59KCB3aW5kb3csIGRvY3VtZW50LCB3aW5kb3cualF1ZXJ5IHx8IGpRdWVyeSApKTtcclxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBNZWRpYVxyXG4vLyBBZGRzIGFkZGl0aW9uYWwgbWVkaWEgdHlwZSBzdXBwb3J0XHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbjsoZnVuY3Rpb24gKCQpIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQvLyBGb3JtYXRzIG1hdGNoaW5nIHVybCB0byBmaW5hbCBmb3JtXHJcblxyXG5cdHZhciBmb3JtYXQgPSBmdW5jdGlvbiAodXJsLCByZXosIHBhcmFtcykge1xyXG5cdFx0aWYgKCAhdXJsICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0cGFyYW1zID0gcGFyYW1zIHx8ICcnO1xyXG5cclxuXHRcdGlmICggJC50eXBlKHBhcmFtcykgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRcdHBhcmFtcyA9ICQucGFyYW0ocGFyYW1zLCB0cnVlKTtcclxuXHRcdH1cclxuXHJcblx0XHQkLmVhY2gocmV6LCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG5cdFx0XHR1cmwgPSB1cmwucmVwbGFjZSgnJCcgKyBrZXksIHZhbHVlIHx8ICcnKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdGlmIChwYXJhbXMubGVuZ3RoKSB7XHJcblx0XHRcdHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA+IDAgPyAnJicgOiAnPycpICsgcGFyYW1zO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB1cmw7XHJcblx0fTtcclxuXHJcblx0Ly8gT2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBmb3IgZWFjaCBtZWRpYSB0eXBlXHJcblxyXG5cdHZhciBkZWZhdWx0cyA9IHtcclxuXHRcdHlvdXR1YmUgOiB7XHJcblx0XHRcdG1hdGNoZXIgOiAvKHlvdXR1YmVcXC5jb218eW91dHVcXC5iZXx5b3V0dWJlXFwtbm9jb29raWVcXC5jb20pXFwvKHdhdGNoXFw/KC4qJik/dj18dlxcL3x1XFwvfGVtYmVkXFwvPyk/KHZpZGVvc2VyaWVzXFw/bGlzdD0oLiopfFtcXHctXXsxMX18XFw/bGlzdFR5cGU9KC4qKSZsaXN0PSguKikpKC4qKS9pLFxyXG5cdFx0XHRwYXJhbXMgIDoge1xyXG5cdFx0XHRcdGF1dG9wbGF5IDogMSxcclxuXHRcdFx0XHRhdXRvaGlkZSA6IDEsXHJcblx0XHRcdFx0ZnMgIDogMSxcclxuXHRcdFx0XHRyZWwgOiAwLFxyXG5cdFx0XHRcdGhkICA6IDEsXHJcblx0XHRcdFx0d21vZGUgOiAndHJhbnNwYXJlbnQnLFxyXG5cdFx0XHRcdGVuYWJsZWpzYXBpIDogMSxcclxuXHRcdFx0XHRodG1sNSA6IDFcclxuXHRcdFx0fSxcclxuXHRcdFx0cGFyYW1QbGFjZSA6IDgsXHJcblx0XHRcdHR5cGUgIDogJ2lmcmFtZScsXHJcblx0XHRcdHVybCAgIDogJy8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyQ0JyxcclxuXHRcdFx0dGh1bWIgOiAnLy9pbWcueW91dHViZS5jb20vdmkvJDQvaHFkZWZhdWx0LmpwZydcclxuXHRcdH0sXHJcblxyXG5cdFx0dmltZW8gOiB7XHJcblx0XHRcdG1hdGNoZXIgOiAvXi4rdmltZW8uY29tXFwvKC4qXFwvKT8oW1xcZF0rKSguKik/LyxcclxuXHRcdFx0cGFyYW1zICA6IHtcclxuXHRcdFx0XHRhdXRvcGxheSA6IDEsXHJcblx0XHRcdFx0aGQgOiAxLFxyXG5cdFx0XHRcdHNob3dfdGl0bGUgICAgOiAxLFxyXG5cdFx0XHRcdHNob3dfYnlsaW5lICAgOiAxLFxyXG5cdFx0XHRcdHNob3dfcG9ydHJhaXQgOiAwLFxyXG5cdFx0XHRcdGZ1bGxzY3JlZW4gICAgOiAxLFxyXG5cdFx0XHRcdGFwaSA6IDFcclxuXHRcdFx0fSxcclxuXHRcdFx0cGFyYW1QbGFjZSA6IDMsXHJcblx0XHRcdHR5cGUgOiAnaWZyYW1lJyxcclxuXHRcdFx0dXJsIDogJy8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8kMidcclxuXHRcdH0sXHJcblxyXG5cdFx0bWV0YWNhZmUgOiB7XHJcblx0XHRcdG1hdGNoZXIgOiAvbWV0YWNhZmUuY29tXFwvd2F0Y2hcXC8oXFxkKylcXC8oLiopPy8sXHJcblx0XHRcdHR5cGUgICAgOiAnaWZyYW1lJyxcclxuXHRcdFx0dXJsICAgICA6ICcvL3d3dy5tZXRhY2FmZS5jb20vZW1iZWQvJDEvP2FwPTEnXHJcblx0XHR9LFxyXG5cclxuXHRcdGRhaWx5bW90aW9uIDoge1xyXG5cdFx0XHRtYXRjaGVyIDogL2RhaWx5bW90aW9uLmNvbVxcL3ZpZGVvXFwvKC4qKVxcLz8oLiopLyxcclxuXHRcdFx0cGFyYW1zIDoge1xyXG5cdFx0XHRcdGFkZGl0aW9uYWxJbmZvcyA6IDAsXHJcblx0XHRcdFx0YXV0b1N0YXJ0IDogMVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR0eXBlIDogJ2lmcmFtZScsXHJcblx0XHRcdHVybCAgOiAnLy93d3cuZGFpbHltb3Rpb24uY29tL2VtYmVkL3ZpZGVvLyQxJ1xyXG5cdFx0fSxcclxuXHJcblx0XHR2aW5lIDoge1xyXG5cdFx0XHRtYXRjaGVyIDogL3ZpbmUuY29cXC92XFwvKFthLXpBLVowLTlcXD9cXD1cXC1dKykvLFxyXG5cdFx0XHR0eXBlICAgIDogJ2lmcmFtZScsXHJcblx0XHRcdHVybCAgICAgOiAnLy92aW5lLmNvL3YvJDEvZW1iZWQvc2ltcGxlJ1xyXG5cdFx0fSxcclxuXHJcblx0XHRpbnN0YWdyYW0gOiB7XHJcblx0XHRcdG1hdGNoZXIgOiAvKGluc3RhZ3JcXC5hbXxpbnN0YWdyYW1cXC5jb20pXFwvcFxcLyhbYS16QS1aMC05X1xcLV0rKVxcLz8vaSxcclxuXHRcdFx0dHlwZSAgICA6ICdpbWFnZScsXHJcblx0XHRcdHVybCAgICAgOiAnLy8kMS9wLyQyL21lZGlhLz9zaXplPWwnXHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEV4YW1wbGVzOlxyXG5cdFx0Ly8gaHR0cDovL21hcHMuZ29vZ2xlLmNvbS8/bGw9NDguODU3OTk1LDIuMjk0Mjk3JnNwbj0wLjAwNzY2NiwwLjAyMTEzNiZ0PW0mej0xNlxyXG5cdFx0Ly8gaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL0AzNy43ODUyMDA2LC0xMjIuNDE0NjM1NSwxNC42NXpcclxuXHRcdC8vIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9wbGFjZS9Hb29nbGVwbGV4L0AzNy40MjIwMDQxLC0xMjIuMDgzMzQ5NCwxN3ovZGF0YT0hNG01ITNtNCExczB4MDoweDZjMjk2YzY2NjE5MzY3ZTAhOG0yITNkMzcuNDIxOTk5OCE0ZC0xMjIuMDg0MDU3MlxyXG5cdFx0Z21hcF9wbGFjZSA6IHtcclxuXHRcdFx0bWF0Y2hlciA6IC8obWFwc1xcLik/Z29vZ2xlXFwuKFthLXpdezIsM30oXFwuW2Etel17Mn0pPylcXC8oKChtYXBzXFwvKHBsYWNlXFwvKC4qKVxcLyk/XFxAKC4qKSwoXFxkKy4/XFxkKz8peikpfChcXD9sbD0pKSguKik/L2ksXHJcblx0XHRcdHR5cGUgICAgOiAnaWZyYW1lJyxcclxuXHRcdFx0dXJsICAgICA6IGZ1bmN0aW9uIChyZXopIHtcclxuXHRcdFx0XHRyZXR1cm4gJy8vbWFwcy5nb29nbGUuJyArIHJlelsyXSArICcvP2xsPScgKyAoIHJlels5XSA/IHJlels5XSArICcmej0nICsgTWF0aC5mbG9vciggIHJlelsxMF0gICkgKyAoIHJlelsxMl0gPyByZXpbMTJdLnJlcGxhY2UoL15cXC8vLCBcIiZcIikgOiAnJyApICA6IHJlelsxMl0gKSArICcmb3V0cHV0PScgKyAoIHJlelsxMl0gJiYgcmV6WzEyXS5pbmRleE9mKCdsYXllcj1jJykgPiAwID8gJ3N2ZW1iZWQnIDogJ2VtYmVkJyApO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEV4YW1wbGVzOlxyXG5cdFx0Ly8gaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL3NlYXJjaC9FbXBpcmUrU3RhdGUrQnVpbGRpbmcvXHJcblx0XHQvLyBodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvc2VhcmNoLz9hcGk9MSZxdWVyeT1jZW50dXJ5bGluaytmaWVsZFxyXG5cdFx0Ly8gaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL3NlYXJjaC8/YXBpPTEmcXVlcnk9NDcuNTk1MTUxOCwtMTIyLjMzMTYzOTNcclxuXHRcdGdtYXBfc2VhcmNoIDoge1xyXG5cdFx0XHRtYXRjaGVyIDogLyhtYXBzXFwuKT9nb29nbGVcXC4oW2Etel17MiwzfShcXC5bYS16XXsyfSk/KVxcLyhtYXBzXFwvc2VhcmNoXFwvKSguKikvaSxcclxuXHRcdFx0dHlwZSAgICA6ICdpZnJhbWUnLFxyXG5cdFx0XHR1cmwgICAgIDogZnVuY3Rpb24gKHJleikge1xyXG5cdFx0XHRcdHJldHVybiAnLy9tYXBzLmdvb2dsZS4nICsgcmV6WzJdICsgJy9tYXBzP3E9JyArIHJlels1XS5yZXBsYWNlKCdxdWVyeT0nLCAncT0nKS5yZXBsYWNlKCdhcGk9MScsICcnKSArICcmb3V0cHV0PWVtYmVkJztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKCdvYmplY3ROZWVkc1R5cGUuZmInLCBmdW5jdGlvbiAoZSwgaW5zdGFuY2UsIGl0ZW0pIHtcclxuXHJcblx0XHR2YXIgdXJsXHQgPSBpdGVtLnNyYyB8fCAnJyxcclxuXHRcdFx0dHlwZSA9IGZhbHNlLFxyXG5cdFx0XHRtZWRpYSxcclxuXHRcdFx0dGh1bWIsXHJcblx0XHRcdHJleixcclxuXHRcdFx0cGFyYW1zLFxyXG5cdFx0XHR1cmxQYXJhbXMsXHJcblx0XHRcdHBhcmFtT2JqLFxyXG5cdFx0XHRwcm92aWRlcjtcclxuXHJcblx0XHRtZWRpYSA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwgZGVmYXVsdHMsIGl0ZW0ub3B0cy5tZWRpYSApO1xyXG5cclxuXHRcdC8vIExvb2sgZm9yIGFueSBtYXRjaGluZyBtZWRpYSB0eXBlXHJcblx0XHQkLmVhY2gobWVkaWEsIGZ1bmN0aW9uICggcHJvdmlkZXJOYW1lLCBwcm92aWRlck9wdHMgKSB7XHJcblx0XHRcdHJleiA9IHVybC5tYXRjaCggcHJvdmlkZXJPcHRzLm1hdGNoZXIgKTtcclxuXHJcblx0XHRcdGlmICggIXJleiApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHR5cGUgICAgID0gcHJvdmlkZXJPcHRzLnR5cGU7XHJcblx0XHRcdHBhcmFtT2JqID0ge307XHJcblxyXG5cdFx0XHRpZiAoIHByb3ZpZGVyT3B0cy5wYXJhbVBsYWNlICYmIHJlelsgcHJvdmlkZXJPcHRzLnBhcmFtUGxhY2UgXSApIHtcclxuXHRcdFx0XHR1cmxQYXJhbXMgPSByZXpbIHByb3ZpZGVyT3B0cy5wYXJhbVBsYWNlIF07XHJcblxyXG5cdFx0XHRcdGlmICggdXJsUGFyYW1zWyAwIF0gPT0gJz8nICkge1xyXG5cdFx0XHRcdFx0dXJsUGFyYW1zID0gdXJsUGFyYW1zLnN1YnN0cmluZygxKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHVybFBhcmFtcyA9IHVybFBhcmFtcy5zcGxpdCgnJicpO1xyXG5cclxuXHRcdFx0XHRmb3IgKCB2YXIgbSA9IDA7IG0gPCB1cmxQYXJhbXMubGVuZ3RoOyArK20gKSB7XHJcblx0XHRcdFx0XHR2YXIgcCA9IHVybFBhcmFtc1sgbSBdLnNwbGl0KCc9JywgMik7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBwLmxlbmd0aCA9PSAyICkge1xyXG5cdFx0XHRcdFx0XHRwYXJhbU9ialsgcFswXSBdID0gZGVjb2RlVVJJQ29tcG9uZW50KCBwWzFdLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHBhcmFtcyA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwgcHJvdmlkZXJPcHRzLnBhcmFtcywgaXRlbS5vcHRzWyBwcm92aWRlck5hbWUgXSwgcGFyYW1PYmogKTtcclxuXHJcblx0XHRcdHVybCAgID0gJC50eXBlKCBwcm92aWRlck9wdHMudXJsICkgPT09IFwiZnVuY3Rpb25cIiA/IHByb3ZpZGVyT3B0cy51cmwuY2FsbCggdGhpcywgcmV6LCBwYXJhbXMsIGl0ZW0gKSA6IGZvcm1hdCggcHJvdmlkZXJPcHRzLnVybCwgcmV6LCBwYXJhbXMgKTtcclxuXHRcdFx0dGh1bWIgPSAkLnR5cGUoIHByb3ZpZGVyT3B0cy50aHVtYiApID09PSBcImZ1bmN0aW9uXCIgPyBwcm92aWRlck9wdHMudGh1bWIuY2FsbCggdGhpcywgcmV6LCBwYXJhbXMsIGl0ZW0gKSA6IGZvcm1hdCggcHJvdmlkZXJPcHRzLnRodW1iLCByZXogKTtcclxuXHJcblx0XHRcdGlmICggcHJvdmlkZXJOYW1lID09PSAndmltZW8nICkge1xyXG5cdFx0XHRcdHVybCA9IHVybC5yZXBsYWNlKCcmJTIzJywgJyMnKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gSWYgaXQgaXMgZm91bmQsIHRoZW4gY2hhbmdlIGNvbnRlbnQgdHlwZSBhbmQgdXBkYXRlIHRoZSB1cmxcclxuXHJcblx0XHRpZiAoIHR5cGUgKSB7XHJcblx0XHRcdGl0ZW0uc3JjICA9IHVybDtcclxuXHRcdFx0aXRlbS50eXBlID0gdHlwZTtcclxuXHJcblx0XHRcdGlmICggIWl0ZW0ub3B0cy50aHVtYiAmJiAhKCBpdGVtLm9wdHMuJHRodW1iICYmIGl0ZW0ub3B0cy4kdGh1bWIubGVuZ3RoICkgKSB7XHJcblx0XHRcdFx0aXRlbS5vcHRzLnRodW1iID0gdGh1bWI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggdHlwZSA9PT0gJ2lmcmFtZScgKSB7XHJcblx0XHRcdFx0JC5leHRlbmQodHJ1ZSwgaXRlbS5vcHRzLCB7XHJcblx0XHRcdFx0XHRpZnJhbWUgOiB7XHJcblx0XHRcdFx0XHRcdHByZWxvYWQgOiBmYWxzZSxcclxuXHRcdFx0XHRcdFx0YXR0ciA6IHtcclxuXHRcdFx0XHRcdFx0XHRzY3JvbGxpbmcgOiBcIm5vXCJcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRpdGVtLmNvbnRlbnRQcm92aWRlciA9IHByb3ZpZGVyO1xyXG5cclxuXHRcdFx0XHRpdGVtLm9wdHMuc2xpZGVDbGFzcyArPSAnIGZhbmN5Ym94LXNsaWRlLS0nICsgKCBwcm92aWRlciA9PSAnZ21hcF9wbGFjZScgfHwgcHJvdmlkZXIgPT0gJ2dtYXBfc2VhcmNoJyA/ICdtYXAnIDogJ3ZpZGVvJyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIGlmICggdXJsICkge1xyXG5cdFx0XHRpdGVtLnR5cGUgPSBpdGVtLm9wdHMuZGVmYXVsdFR5cGU7XHJcblx0XHR9XHJcblxyXG5cdH0pO1xyXG5cclxufSggd2luZG93LmpRdWVyeSB8fCBqUXVlcnkgKSk7XHJcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gR3Vlc3R1cmVzXHJcbi8vIEFkZHMgdG91Y2ggZ3Vlc3R1cmVzLCBoYW5kbGVzIGNsaWNrIGFuZCB0YXAgZXZlbnRzXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbjsoZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsICQpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciByZXF1ZXN0QUZyYW1lID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgd2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICAgICAgICAgIC8vIGlmIGFsbCBlbHNlIGZhaWxzLCB1c2Ugc2V0VGltZW91dFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgIH0pKCk7XHJcblxyXG5cclxuICAgIHZhciBjYW5jZWxBRnJhbWUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICAgICAgICAgIHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cub0NhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGlkKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICB9KSgpO1xyXG5cclxuXHJcblx0dmFyIHBvaW50ZXJzID0gZnVuY3Rpb24oIGUgKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gW107XHJcblxyXG5cdFx0ZSA9IGUub3JpZ2luYWxFdmVudCB8fCBlIHx8IHdpbmRvdy5lO1xyXG5cdFx0ZSA9IGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID8gZS50b3VjaGVzIDogKCBlLmNoYW5nZWRUb3VjaGVzICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID8gZS5jaGFuZ2VkVG91Y2hlcyA6IFsgZSBdICk7XHJcblxyXG5cdFx0Zm9yICggdmFyIGtleSBpbiBlICkge1xyXG5cclxuXHRcdFx0aWYgKCBlWyBrZXkgXS5wYWdlWCApIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaCggeyB4IDogZVsga2V5IF0ucGFnZVgsIHkgOiBlWyBrZXkgXS5wYWdlWSB9ICk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBlWyBrZXkgXS5jbGllbnRYICkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKCB7IHggOiBlWyBrZXkgXS5jbGllbnRYLCB5IDogZVsga2V5IF0uY2xpZW50WSB9ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH07XHJcblxyXG5cdHZhciBkaXN0YW5jZSA9IGZ1bmN0aW9uKCBwb2ludDIsIHBvaW50MSwgd2hhdCApIHtcclxuXHRcdGlmICggIXBvaW50MSB8fCAhcG9pbnQyICkge1xyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHdoYXQgPT09ICd4JyApIHtcclxuXHRcdFx0cmV0dXJuIHBvaW50Mi54IC0gcG9pbnQxLng7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggd2hhdCA9PT0gJ3knICkge1xyXG5cdFx0XHRyZXR1cm4gcG9pbnQyLnkgLSBwb2ludDEueTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCBNYXRoLnBvdyggcG9pbnQyLnggLSBwb2ludDEueCwgMiApICsgTWF0aC5wb3coIHBvaW50Mi55IC0gcG9pbnQxLnksIDIgKSApO1xyXG5cdH07XHJcblxyXG5cdHZhciBpc0NsaWNrYWJsZSA9IGZ1bmN0aW9uKCAkZWwgKSB7XHJcblxyXG5cdFx0aWYgKCAkZWwuaXMoJ2EsYXJlYSxidXR0b24sW3JvbGU9XCJidXR0b25cIl0saW5wdXQsbGFiZWwsc2VsZWN0LHN1bW1hcnksdGV4dGFyZWEnKSB8fCAkLmlzRnVuY3Rpb24oICRlbC5nZXQoMCkub25jbGljayApIHx8ICRlbC5kYXRhKCdzZWxlY3RhYmxlJykgKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENoZWNrIGZvciBhdHRyaWJ1dGVzIGxpa2UgZGF0YS1mYW5jeWJveC1uZXh0IG9yIGRhdGEtZmFuY3lib3gtY2xvc2VcclxuXHRcdGZvciAoIHZhciBpID0gMCwgYXR0cyA9ICRlbFswXS5hdHRyaWJ1dGVzLCBuID0gYXR0cy5sZW5ndGg7IGkgPCBuOyBpKysgKSB7XHJcbiAgICAgICAgICAgIGlmICggYXR0c1tpXS5ub2RlTmFtZS5zdWJzdHIoMCwgMTQpID09PSAnZGF0YS1mYW5jeWJveC0nICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cdCBcdHJldHVybiBmYWxzZTtcclxuXHR9O1xyXG5cclxuXHR2YXIgaGFzU2Nyb2xsYmFycyA9IGZ1bmN0aW9uKCBlbCApIHtcclxuXHRcdHZhciBvdmVyZmxvd1kgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZWwgKVsnb3ZlcmZsb3cteSddO1xyXG5cdFx0dmFyIG92ZXJmbG93WCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBlbCApWydvdmVyZmxvdy14J107XHJcblxyXG5cdFx0dmFyIHZlcnRpY2FsICAgPSAob3ZlcmZsb3dZID09PSAnc2Nyb2xsJyB8fCBvdmVyZmxvd1kgPT09ICdhdXRvJykgJiYgZWwuc2Nyb2xsSGVpZ2h0ID4gZWwuY2xpZW50SGVpZ2h0O1xyXG5cdFx0dmFyIGhvcml6b250YWwgPSAob3ZlcmZsb3dYID09PSAnc2Nyb2xsJyB8fCBvdmVyZmxvd1ggPT09ICdhdXRvJykgJiYgZWwuc2Nyb2xsV2lkdGggPiBlbC5jbGllbnRXaWR0aDtcclxuXHJcblx0XHRyZXR1cm4gdmVydGljYWwgfHwgaG9yaXpvbnRhbDtcclxuXHR9O1xyXG5cclxuXHR2YXIgaXNTY3JvbGxhYmxlID0gZnVuY3Rpb24gKCAkZWwgKSB7XHJcblx0XHR2YXIgcmV6ID0gZmFsc2U7XHJcblxyXG5cdFx0d2hpbGUgKCB0cnVlICkge1xyXG5cdFx0XHRyZXpcdD0gaGFzU2Nyb2xsYmFycyggJGVsLmdldCgwKSApO1xyXG5cclxuXHRcdFx0aWYgKCByZXogKSB7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdCRlbCA9ICRlbC5wYXJlbnQoKTtcclxuXHJcblx0XHRcdGlmICggISRlbC5sZW5ndGggfHwgJGVsLmhhc0NsYXNzKCAnZmFuY3lib3gtc3RhZ2UnICkgfHwgJGVsLmlzKCAnYm9keScgKSApIHtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXo7XHJcblx0fTtcclxuXHJcblxyXG5cdHZhciBHdWVzdHVyZXMgPSBmdW5jdGlvbiAoIGluc3RhbmNlICkge1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdHNlbGYuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuXHJcblx0XHRzZWxmLiRiZyAgICAgICAgPSBpbnN0YW5jZS4kcmVmcy5iZztcclxuXHRcdHNlbGYuJHN0YWdlICAgICA9IGluc3RhbmNlLiRyZWZzLnN0YWdlO1xyXG5cdFx0c2VsZi4kY29udGFpbmVyID0gaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyO1xyXG5cclxuXHRcdHNlbGYuZGVzdHJveSgpO1xyXG5cclxuXHRcdHNlbGYuJGNvbnRhaW5lci5vbiggJ3RvdWNoc3RhcnQuZmIudG91Y2ggbW91c2Vkb3duLmZiLnRvdWNoJywgJC5wcm94eShzZWxmLCAnb250b3VjaHN0YXJ0JykgKTtcclxuXHR9O1xyXG5cclxuXHRHdWVzdHVyZXMucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuJGNvbnRhaW5lci5vZmYoICcuZmIudG91Y2gnICk7XHJcblx0fTtcclxuXHJcblx0R3Vlc3R1cmVzLnByb3RvdHlwZS5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbiggZSApIHtcclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHR2YXIgJHRhcmdldCAgPSAkKCBlLnRhcmdldCApO1xyXG5cdFx0dmFyIGluc3RhbmNlID0gc2VsZi5pbnN0YW5jZTtcclxuXHRcdHZhciBjdXJyZW50ICA9IGluc3RhbmNlLmN1cnJlbnQ7XHJcblx0XHR2YXIgJGNvbnRlbnQgPSBjdXJyZW50LiRjb250ZW50O1xyXG5cclxuXHRcdHZhciBpc1RvdWNoRGV2aWNlID0gKCBlLnR5cGUgPT0gJ3RvdWNoc3RhcnQnICk7XHJcblxyXG5cdFx0Ly8gRG8gbm90IHJlc3BvbmQgdG8gYm90aCBldmVudHNcclxuXHRcdGlmICggaXNUb3VjaERldmljZSApIHtcclxuXHQgICAgICAgIHNlbGYuJGNvbnRhaW5lci5vZmYoICdtb3VzZWRvd24uZmIudG91Y2gnICk7XHJcblx0ICAgIH1cclxuXHJcblx0XHQvLyBJZ25vcmUgY2xpY2tzIHdoaWxlIHpvb21pbmcgb3IgY2xvc2luZ1xyXG5cdFx0aWYgKCAhY3VycmVudCB8fCBzZWxmLmluc3RhbmNlLmlzQW5pbWF0aW5nIHx8IHNlbGYuaW5zdGFuY2UuaXNDbG9zaW5nICkge1xyXG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSWdub3JlIHJpZ2h0IGNsaWNrXHJcblx0XHRpZiAoIGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQuYnV0dG9uID09IDIgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZ25vcmUgdGFwaW5nIG9uIGxpbmtzLCBidXR0b25zLCBpbnB1dCBlbGVtZW50c1xyXG5cdFx0aWYgKCAhJHRhcmdldC5sZW5ndGggfHwgaXNDbGlja2FibGUoICR0YXJnZXQgKSB8fCBpc0NsaWNrYWJsZSggJHRhcmdldC5wYXJlbnQoKSApICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSWdub3JlIGNsaWNrcyBvbiB0aGUgc2Nyb2xsYmFyXHJcblx0XHRpZiAoIGUub3JpZ2luYWxFdmVudC5jbGllbnRYID4gJHRhcmdldFswXS5jbGllbnRXaWR0aCArICR0YXJnZXQub2Zmc2V0KCkubGVmdCApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHNlbGYuc3RhcnRQb2ludHMgPSBwb2ludGVycyggZSApO1xyXG5cclxuXHRcdC8vIFByZXZlbnQgem9vbWluZyBpZiBhbHJlYWR5IHN3aXBpbmdcclxuXHRcdGlmICggIXNlbGYuc3RhcnRQb2ludHMgfHwgKCBzZWxmLnN0YXJ0UG9pbnRzLmxlbmd0aCA+IDEgJiYgaW5zdGFuY2UuaXNTbGlkaW5nICkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLiR0YXJnZXQgID0gJHRhcmdldDtcclxuXHRcdHNlbGYuJGNvbnRlbnQgPSAkY29udGVudDtcclxuXHRcdHNlbGYuY2FuVGFwICAgPSB0cnVlO1xyXG5cdFx0c2VsZi5vcHRzICAgICA9IGN1cnJlbnQub3B0cy50b3VjaDtcclxuXHJcblx0XHQkKGRvY3VtZW50KS5vZmYoICcuZmIudG91Y2gnICk7XHJcblxyXG5cdFx0JChkb2N1bWVudCkub24oIGlzVG91Y2hEZXZpY2UgPyAndG91Y2hlbmQuZmIudG91Y2ggdG91Y2hjYW5jZWwuZmIudG91Y2gnIDogJ21vdXNldXAuZmIudG91Y2ggbW91c2VsZWF2ZS5mYi50b3VjaCcsICAkLnByb3h5KHNlbGYsIFwib250b3VjaGVuZFwiKSk7XHJcblx0XHQkKGRvY3VtZW50KS5vbiggaXNUb3VjaERldmljZSA/ICd0b3VjaG1vdmUuZmIudG91Y2gnIDogJ21vdXNlbW92ZS5mYi50b3VjaCcsICAkLnByb3h5KHNlbGYsIFwib250b3VjaG1vdmVcIikpO1xyXG5cclxuXHRcdGlmICggIShzZWxmLm9wdHMgfHwgaW5zdGFuY2UuY2FuUGFuKCkgKSB8fCAhKCAkdGFyZ2V0LmlzKCBzZWxmLiRzdGFnZSApIHx8IHNlbGYuJHN0YWdlLmZpbmQoICR0YXJnZXQgKS5sZW5ndGggKSApIHtcclxuXHJcblx0XHRcdC8vIFByZXZlbnQgZ2hvc3RpbmdcclxuXHRcdFx0aWYgKCAkdGFyZ2V0LmlzKCdpbWcnKSApIHtcclxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuXHRcdGlmICggISggJC5mYW5jeWJveC5pc01vYmlsZSAmJiAoIGlzU2Nyb2xsYWJsZSggc2VsZi4kdGFyZ2V0ICkgfHwgaXNTY3JvbGxhYmxlKCBzZWxmLiR0YXJnZXQucGFyZW50KCkgKSApICkgKSB7XHJcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLmNhbnZhc1dpZHRoICA9IE1hdGgucm91bmQoIGN1cnJlbnQuJHNsaWRlWzBdLmNsaWVudFdpZHRoICk7XHJcblx0XHRzZWxmLmNhbnZhc0hlaWdodCA9IE1hdGgucm91bmQoIGN1cnJlbnQuJHNsaWRlWzBdLmNsaWVudEhlaWdodCApO1xyXG5cclxuXHRcdHNlbGYuc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblx0XHRzZWxmLmRpc3RhbmNlWCA9IHNlbGYuZGlzdGFuY2VZID0gc2VsZi5kaXN0YW5jZSA9IDA7XHJcblxyXG5cdFx0c2VsZi5pc1Bhbm5pbmcgPSBmYWxzZTtcclxuXHRcdHNlbGYuaXNTd2lwaW5nID0gZmFsc2U7XHJcblx0XHRzZWxmLmlzWm9vbWluZyA9IGZhbHNlO1xyXG5cclxuXHRcdHNlbGYuc2xpZGVyU3RhcnRQb3MgID0gc2VsZi5zbGlkZXJMYXN0UG9zIHx8IHsgdG9wOiAwLCBsZWZ0OiAwIH07XHJcblx0XHRzZWxmLmNvbnRlbnRTdGFydFBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKCBzZWxmLiRjb250ZW50ICk7XHJcblx0XHRzZWxmLmNvbnRlbnRMYXN0UG9zICA9IG51bGw7XHJcblxyXG5cdFx0aWYgKCBzZWxmLnN0YXJ0UG9pbnRzLmxlbmd0aCA9PT0gMSAmJiAhc2VsZi5pc1pvb21pbmcgKSB7XHJcblx0XHRcdHNlbGYuY2FuVGFwID0gIWluc3RhbmNlLmlzU2xpZGluZztcclxuXHJcblx0XHRcdGlmICggY3VycmVudC50eXBlID09PSAnaW1hZ2UnICYmICggc2VsZi5jb250ZW50U3RhcnRQb3Mud2lkdGggPiBzZWxmLmNhbnZhc1dpZHRoICsgMSB8fCBzZWxmLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQgPiBzZWxmLmNhbnZhc0hlaWdodCArIDEgKSApIHtcclxuXHJcblx0XHRcdFx0JC5mYW5jeWJveC5zdG9wKCBzZWxmLiRjb250ZW50ICk7XHJcblxyXG5cdFx0XHRcdHNlbGYuJGNvbnRlbnQuY3NzKCAndHJhbnNpdGlvbi1kdXJhdGlvbicsICcwbXMnICk7XHJcblxyXG5cdFx0XHRcdHNlbGYuaXNQYW5uaW5nID0gdHJ1ZTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHNlbGYuaXNTd2lwaW5nID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c2VsZi4kY29udGFpbmVyLmFkZENsYXNzKCdmYW5jeWJveC1jb250cm9scy0taXNHcmFiYmluZycpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggc2VsZi5zdGFydFBvaW50cy5sZW5ndGggPT09IDIgJiYgIWluc3RhbmNlLmlzQW5pbWF0aW5nICYmICFjdXJyZW50Lmhhc0Vycm9yICYmIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyAmJiAoIGN1cnJlbnQuaXNMb2FkZWQgfHwgY3VycmVudC4kZ2hvc3QgKSApIHtcclxuXHRcdFx0c2VsZi5pc1pvb21pbmcgPSB0cnVlO1xyXG5cclxuXHRcdFx0c2VsZi5pc1N3aXBpbmcgPSBmYWxzZTtcclxuXHRcdFx0c2VsZi5pc1Bhbm5pbmcgPSBmYWxzZTtcclxuXHJcblx0XHRcdCQuZmFuY3lib3guc3RvcCggc2VsZi4kY29udGVudCApO1xyXG5cclxuXHRcdFx0c2VsZi4kY29udGVudC5jc3MoICd0cmFuc2l0aW9uLWR1cmF0aW9uJywgJzBtcycgKTtcclxuXHJcblx0XHRcdHNlbGYuY2VudGVyUG9pbnRTdGFydFggPSAoICggc2VsZi5zdGFydFBvaW50c1swXS54ICsgc2VsZi5zdGFydFBvaW50c1sxXS54ICkgKiAwLjUgKSAtICQod2luZG93KS5zY3JvbGxMZWZ0KCk7XHJcblx0XHRcdHNlbGYuY2VudGVyUG9pbnRTdGFydFkgPSAoICggc2VsZi5zdGFydFBvaW50c1swXS55ICsgc2VsZi5zdGFydFBvaW50c1sxXS55ICkgKiAwLjUgKSAtICQod2luZG93KS5zY3JvbGxUb3AoKTtcclxuXHJcblx0XHRcdHNlbGYucGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRYID0gKCBzZWxmLmNlbnRlclBvaW50U3RhcnRYIC0gc2VsZi5jb250ZW50U3RhcnRQb3MubGVmdCApIC8gc2VsZi5jb250ZW50U3RhcnRQb3Mud2lkdGg7XHJcblx0XHRcdHNlbGYucGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRZID0gKCBzZWxmLmNlbnRlclBvaW50U3RhcnRZIC0gc2VsZi5jb250ZW50U3RhcnRQb3MudG9wICApIC8gc2VsZi5jb250ZW50U3RhcnRQb3MuaGVpZ2h0O1xyXG5cclxuXHRcdFx0c2VsZi5zdGFydERpc3RhbmNlQmV0d2VlbkZpbmdlcnMgPSBkaXN0YW5jZSggc2VsZi5zdGFydFBvaW50c1swXSwgc2VsZi5zdGFydFBvaW50c1sxXSApO1xyXG5cdFx0fVxyXG5cclxuXHR9O1xyXG5cclxuXHRHdWVzdHVyZXMucHJvdG90eXBlLm9udG91Y2htb3ZlID0gZnVuY3Rpb24oIGUgKSB7XHJcblxyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdHNlbGYubmV3UG9pbnRzID0gcG9pbnRlcnMoIGUgKTtcclxuXHJcblx0XHRpZiAoICQuZmFuY3lib3guaXNNb2JpbGUgJiYgKCBpc1Njcm9sbGFibGUoIHNlbGYuJHRhcmdldCApIHx8IGlzU2Nyb2xsYWJsZSggc2VsZi4kdGFyZ2V0LnBhcmVudCgpICkgKSApIHtcclxuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcblx0XHRcdHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhKCBzZWxmLm9wdHMgfHwgc2VsZi5pbnN0YW5jZS5jYW5QYW4oKSApIHx8ICFzZWxmLm5ld1BvaW50cyB8fCAhc2VsZi5uZXdQb2ludHMubGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0c2VsZi5kaXN0YW5jZVggPSBkaXN0YW5jZSggc2VsZi5uZXdQb2ludHNbMF0sIHNlbGYuc3RhcnRQb2ludHNbMF0sICd4JyApO1xyXG5cdFx0c2VsZi5kaXN0YW5jZVkgPSBkaXN0YW5jZSggc2VsZi5uZXdQb2ludHNbMF0sIHNlbGYuc3RhcnRQb2ludHNbMF0sICd5JyApO1xyXG5cclxuXHRcdHNlbGYuZGlzdGFuY2UgPSBkaXN0YW5jZSggc2VsZi5uZXdQb2ludHNbMF0sIHNlbGYuc3RhcnRQb2ludHNbMF0gKTtcclxuXHJcblx0XHQvLyBTa2lwIGZhbHNlIG9udG91Y2htb3ZlIGV2ZW50cyAoQ2hyb21lKVxyXG5cdFx0aWYgKCBzZWxmLmRpc3RhbmNlID4gMCApIHtcclxuXHJcblx0XHRcdGlmICggISggc2VsZi4kdGFyZ2V0LmlzKCBzZWxmLiRzdGFnZSApIHx8IHNlbGYuJHN0YWdlLmZpbmQoIHNlbGYuJHRhcmdldCApLmxlbmd0aCApICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0aWYgKCBzZWxmLmlzU3dpcGluZyApIHtcclxuXHRcdFx0XHRzZWxmLm9uU3dpcGUoKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHNlbGYuaXNQYW5uaW5nICkge1xyXG5cdFx0XHRcdHNlbGYub25QYW4oKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHNlbGYuaXNab29taW5nICkge1xyXG5cdFx0XHRcdHNlbGYub25ab29tKCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUub25Td2lwZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHR2YXIgc3dpcGluZyA9IHNlbGYuaXNTd2lwaW5nO1xyXG5cdFx0dmFyIGxlZnQgICAgPSBzZWxmLnNsaWRlclN0YXJ0UG9zLmxlZnQgfHwgMDtcclxuXHRcdHZhciBhbmdsZTtcclxuXHJcblx0XHRpZiAoIHN3aXBpbmcgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBzZWxmLmRpc3RhbmNlICkgPiAxMCApICB7XHJcblxyXG5cdFx0XHRcdHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdGlmICggc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyICYmIHNlbGYub3B0cy52ZXJ0aWNhbCApIHtcclxuXHRcdFx0XHRcdHNlbGYuaXNTd2lwaW5nICA9ICd5JztcclxuXHJcblx0XHRcdFx0fSBlbHNlIGlmICggc2VsZi5pbnN0YW5jZS5pc1NsaWRpbmcgfHwgc2VsZi5vcHRzLnZlcnRpY2FsID09PSBmYWxzZSB8fCAoIHNlbGYub3B0cy52ZXJ0aWNhbCA9PT0gJ2F1dG8nICYmICQoIHdpbmRvdyApLndpZHRoKCkgPiA4MDAgKSApIHtcclxuXHRcdFx0XHRcdHNlbGYuaXNTd2lwaW5nICA9ICd4JztcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGFuZ2xlID0gTWF0aC5hYnMoIE1hdGguYXRhbjIoIHNlbGYuZGlzdGFuY2VZLCBzZWxmLmRpc3RhbmNlWCApICogMTgwIC8gTWF0aC5QSSApO1xyXG5cclxuXHRcdFx0XHRcdHNlbGYuaXNTd2lwaW5nID0gKCBhbmdsZSA+IDQ1ICYmIGFuZ2xlIDwgMTM1ICkgPyAneScgOiAneCc7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRzZWxmLmluc3RhbmNlLmlzU2xpZGluZyA9IHNlbGYuaXNTd2lwaW5nO1xyXG5cclxuXHRcdFx0XHQvLyBSZXNldCBwb2ludHMgdG8gYXZvaWQganVtcGluZywgYmVjYXVzZSB3ZSBkcm9wcGVkIGZpcnN0IHN3aXBlcyB0byBjYWxjdWxhdGUgdGhlIGFuZ2xlXHJcblx0XHRcdFx0c2VsZi5zdGFydFBvaW50cyA9IHNlbGYubmV3UG9pbnRzO1xyXG5cclxuXHRcdFx0XHQkLmVhY2goc2VsZi5pbnN0YW5jZS5zbGlkZXMsIGZ1bmN0aW9uKCBpbmRleCwgc2xpZGUgKSB7XHJcblx0XHRcdFx0XHQkLmZhbmN5Ym94LnN0b3AoIHNsaWRlLiRzbGlkZSApO1xyXG5cclxuXHRcdFx0XHRcdHNsaWRlLiRzbGlkZS5jc3MoICd0cmFuc2l0aW9uLWR1cmF0aW9uJywgJzBtcycgKTtcclxuXHJcblx0XHRcdFx0XHRzbGlkZS5pblRyYW5zaXRpb24gPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHNsaWRlLnBvcyA9PT0gc2VsZi5pbnN0YW5jZS5jdXJyZW50LnBvcyApIHtcclxuXHRcdFx0XHRcdFx0c2VsZi5zbGlkZXJTdGFydFBvcy5sZWZ0ID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoIHNsaWRlLiRzbGlkZSApLmxlZnQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdC8vc2VsZi5pbnN0YW5jZS5jdXJyZW50LmlzTW92ZWQgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHQvLyBTdG9wIHNsaWRlc2hvd1xyXG5cdFx0XHRcdGlmICggc2VsZi5pbnN0YW5jZS5TbGlkZVNob3cgJiYgc2VsZi5pbnN0YW5jZS5TbGlkZVNob3cuaXNBY3RpdmUgKSB7XHJcblx0XHRcdFx0XHRzZWxmLmluc3RhbmNlLlNsaWRlU2hvdy5zdG9wKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGlmICggc3dpcGluZyA9PSAneCcgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFN0aWNreSBlZGdlc1xyXG5cdFx0XHRcdGlmICggc2VsZi5kaXN0YW5jZVggPiAwICYmICggc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyIHx8ICggc2VsZi5pbnN0YW5jZS5jdXJyZW50LmluZGV4ID09PSAwICYmICFzZWxmLmluc3RhbmNlLmN1cnJlbnQub3B0cy5sb29wICkgKSApIHtcclxuXHRcdFx0XHRcdGxlZnQgPSBsZWZ0ICsgTWF0aC5wb3coIHNlbGYuZGlzdGFuY2VYLCAwLjggKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIGlmICggc2VsZi5kaXN0YW5jZVggPCAwICYmICggc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyIHx8ICggc2VsZi5pbnN0YW5jZS5jdXJyZW50LmluZGV4ID09PSBzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCAtIDEgJiYgIXNlbGYuaW5zdGFuY2UuY3VycmVudC5vcHRzLmxvb3AgKSApICkge1xyXG5cdFx0XHRcdFx0bGVmdCA9IGxlZnQgLSBNYXRoLnBvdyggLXNlbGYuZGlzdGFuY2VYLCAwLjggKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGxlZnQgPSBsZWZ0ICsgc2VsZi5kaXN0YW5jZVg7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c2VsZi5zbGlkZXJMYXN0UG9zID0ge1xyXG5cdFx0XHRcdHRvcCAgOiBzd2lwaW5nID09ICd4JyA/IDAgOiBzZWxmLnNsaWRlclN0YXJ0UG9zLnRvcCArIHNlbGYuZGlzdGFuY2VZLFxyXG5cdFx0XHRcdGxlZnQgOiBsZWZ0XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRpZiAoIHNlbGYucmVxdWVzdElkICkge1xyXG5cdFx0XHRcdGNhbmNlbEFGcmFtZSggc2VsZi5yZXF1ZXN0SWQgKTtcclxuXHJcblx0XHRcdFx0c2VsZi5yZXF1ZXN0SWQgPSBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzZWxmLnJlcXVlc3RJZCA9IHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdGlmICggc2VsZi5zbGlkZXJMYXN0UG9zICkge1xyXG5cdFx0XHRcdFx0JC5lYWNoKHNlbGYuaW5zdGFuY2Uuc2xpZGVzLCBmdW5jdGlvbiggaW5kZXgsIHNsaWRlICkge1xyXG5cdFx0XHRcdFx0XHR2YXIgcG9zID0gc2xpZGUucG9zIC0gc2VsZi5pbnN0YW5jZS5jdXJyUG9zO1xyXG5cclxuXHRcdFx0XHRcdFx0JC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoIHNsaWRlLiRzbGlkZSwge1xyXG5cdFx0XHRcdFx0XHRcdHRvcCAgOiBzZWxmLnNsaWRlckxhc3RQb3MudG9wLFxyXG5cdFx0XHRcdFx0XHRcdGxlZnQgOiBzZWxmLnNsaWRlckxhc3RQb3MubGVmdCArICggcG9zICogc2VsZi5jYW52YXNXaWR0aCApICsgKCBwb3MgKiBzbGlkZS5vcHRzLmd1dHRlciApXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0c2VsZi4kY29udGFpbmVyLmFkZENsYXNzKCAnZmFuY3lib3gtaXMtc2xpZGluZycgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUub25QYW4gPSBmdW5jdGlvbigpIHtcclxuXHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0dmFyIG5ld09mZnNldFgsIG5ld09mZnNldFksIG5ld1BvcztcclxuXHJcblx0XHRzZWxmLmNhblRhcCA9IGZhbHNlO1xyXG5cclxuXHRcdGlmICggc2VsZi5jb250ZW50U3RhcnRQb3Mud2lkdGggPiBzZWxmLmNhbnZhc1dpZHRoICkge1xyXG5cdFx0XHRuZXdPZmZzZXRYID0gc2VsZi5jb250ZW50U3RhcnRQb3MubGVmdCArIHNlbGYuZGlzdGFuY2VYO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG5ld09mZnNldFggPSBzZWxmLmNvbnRlbnRTdGFydFBvcy5sZWZ0O1xyXG5cdFx0fVxyXG5cclxuXHRcdG5ld09mZnNldFkgPSBzZWxmLmNvbnRlbnRTdGFydFBvcy50b3AgKyBzZWxmLmRpc3RhbmNlWTtcclxuXHJcblx0XHRuZXdQb3MgPSBzZWxmLmxpbWl0TW92ZW1lbnQoIG5ld09mZnNldFgsIG5ld09mZnNldFksIHNlbGYuY29udGVudFN0YXJ0UG9zLndpZHRoLCBzZWxmLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQgKTtcclxuXHJcblx0XHRuZXdQb3Muc2NhbGVYID0gc2VsZi5jb250ZW50U3RhcnRQb3Muc2NhbGVYO1xyXG5cdFx0bmV3UG9zLnNjYWxlWSA9IHNlbGYuY29udGVudFN0YXJ0UG9zLnNjYWxlWTtcclxuXHJcblx0XHRzZWxmLmNvbnRlbnRMYXN0UG9zID0gbmV3UG9zO1xyXG5cclxuXHRcdGlmICggc2VsZi5yZXF1ZXN0SWQgKSB7XHJcblx0XHRcdGNhbmNlbEFGcmFtZSggc2VsZi5yZXF1ZXN0SWQgKTtcclxuXHJcblx0XHRcdHNlbGYucmVxdWVzdElkID0gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLnJlcXVlc3RJZCA9IHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24oKSB7XHJcblx0XHRcdCQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCBzZWxmLiRjb250ZW50LCBzZWxmLmNvbnRlbnRMYXN0UG9zICk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHQvLyBNYWtlIHBhbm5pbmcgc3RpY2t5IHRvIHRoZSBlZGdlc1xyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUubGltaXRNb3ZlbWVudCA9IGZ1bmN0aW9uKCBuZXdPZmZzZXRYLCBuZXdPZmZzZXRZLCBuZXdXaWR0aCwgbmV3SGVpZ2h0ICkge1xyXG5cclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHR2YXIgbWluVHJhbnNsYXRlWCwgbWluVHJhbnNsYXRlWSwgbWF4VHJhbnNsYXRlWCwgbWF4VHJhbnNsYXRlWTtcclxuXHJcblx0XHR2YXIgY2FudmFzV2lkdGggID0gc2VsZi5jYW52YXNXaWR0aDtcclxuXHRcdHZhciBjYW52YXNIZWlnaHQgPSBzZWxmLmNhbnZhc0hlaWdodDtcclxuXHJcblx0XHR2YXIgY3VycmVudE9mZnNldFggPSBzZWxmLmNvbnRlbnRTdGFydFBvcy5sZWZ0O1xyXG5cdFx0dmFyIGN1cnJlbnRPZmZzZXRZID0gc2VsZi5jb250ZW50U3RhcnRQb3MudG9wO1xyXG5cclxuXHRcdHZhciBkaXN0YW5jZVggPSBzZWxmLmRpc3RhbmNlWDtcclxuXHRcdHZhciBkaXN0YW5jZVkgPSBzZWxmLmRpc3RhbmNlWTtcclxuXHJcblx0XHQvLyBTbG93IGRvd24gcHJvcG9ydGlvbmFsbHkgdG8gdHJhdmVsZWQgZGlzdGFuY2VcclxuXHJcblx0XHRtaW5UcmFuc2xhdGVYID0gTWF0aC5tYXgoMCwgY2FudmFzV2lkdGggICogMC41IC0gbmV3V2lkdGggICogMC41ICk7XHJcblx0XHRtaW5UcmFuc2xhdGVZID0gTWF0aC5tYXgoMCwgY2FudmFzSGVpZ2h0ICogMC41IC0gbmV3SGVpZ2h0ICogMC41ICk7XHJcblxyXG5cdFx0bWF4VHJhbnNsYXRlWCA9IE1hdGgubWluKCBjYW52YXNXaWR0aCAgLSBuZXdXaWR0aCwgIGNhbnZhc1dpZHRoICAqIDAuNSAtIG5ld1dpZHRoICAqIDAuNSApO1xyXG5cdFx0bWF4VHJhbnNsYXRlWSA9IE1hdGgubWluKCBjYW52YXNIZWlnaHQgLSBuZXdIZWlnaHQsIGNhbnZhc0hlaWdodCAqIDAuNSAtIG5ld0hlaWdodCAqIDAuNSApO1xyXG5cclxuXHRcdGlmICggbmV3V2lkdGggPiBjYW52YXNXaWR0aCApIHtcclxuXHJcblx0XHRcdC8vICAgLT5cclxuXHRcdFx0aWYgKCBkaXN0YW5jZVggPiAwICYmIG5ld09mZnNldFggPiBtaW5UcmFuc2xhdGVYICkge1xyXG5cdFx0XHRcdG5ld09mZnNldFggPSBtaW5UcmFuc2xhdGVYIC0gMSArIE1hdGgucG93KCAtbWluVHJhbnNsYXRlWCArIGN1cnJlbnRPZmZzZXRYICsgZGlzdGFuY2VYLCAwLjggKSB8fCAwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyAgICA8LVxyXG5cdFx0XHRpZiAoIGRpc3RhbmNlWCAgPCAwICYmIG5ld09mZnNldFggPCBtYXhUcmFuc2xhdGVYICkge1xyXG5cdFx0XHRcdG5ld09mZnNldFggPSBtYXhUcmFuc2xhdGVYICsgMSAtIE1hdGgucG93KCBtYXhUcmFuc2xhdGVYIC0gY3VycmVudE9mZnNldFggLSBkaXN0YW5jZVgsIDAuOCApIHx8IDA7XHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBuZXdIZWlnaHQgPiBjYW52YXNIZWlnaHQgKSB7XHJcblxyXG5cdFx0XHQvLyAgIFxcL1xyXG5cdFx0XHRpZiAoIGRpc3RhbmNlWSA+IDAgJiYgbmV3T2Zmc2V0WSA+IG1pblRyYW5zbGF0ZVkgKSB7XHJcblx0XHRcdFx0bmV3T2Zmc2V0WSA9IG1pblRyYW5zbGF0ZVkgLSAxICsgTWF0aC5wb3coLW1pblRyYW5zbGF0ZVkgKyBjdXJyZW50T2Zmc2V0WSArIGRpc3RhbmNlWSwgMC44ICkgfHwgMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gICAvXFxcclxuXHRcdFx0aWYgKCBkaXN0YW5jZVkgPCAwICYmIG5ld09mZnNldFkgPCBtYXhUcmFuc2xhdGVZICkge1xyXG5cdFx0XHRcdG5ld09mZnNldFkgPSBtYXhUcmFuc2xhdGVZICsgMSAtIE1hdGgucG93ICggbWF4VHJhbnNsYXRlWSAtIGN1cnJlbnRPZmZzZXRZIC0gZGlzdGFuY2VZLCAwLjggKSB8fCAwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRvcCAgOiBuZXdPZmZzZXRZLFxyXG5cdFx0XHRsZWZ0IDogbmV3T2Zmc2V0WFxyXG5cdFx0fTtcclxuXHJcblx0fTtcclxuXHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUubGltaXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBuZXdPZmZzZXRYLCBuZXdPZmZzZXRZLCBuZXdXaWR0aCwgbmV3SGVpZ2h0ICkge1xyXG5cclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHR2YXIgY2FudmFzV2lkdGggID0gc2VsZi5jYW52YXNXaWR0aDtcclxuXHRcdHZhciBjYW52YXNIZWlnaHQgPSBzZWxmLmNhbnZhc0hlaWdodDtcclxuXHJcblx0XHRpZiAoIG5ld1dpZHRoID4gY2FudmFzV2lkdGggKSB7XHJcblx0XHRcdG5ld09mZnNldFggPSBuZXdPZmZzZXRYID4gMCA/IDAgOiBuZXdPZmZzZXRYO1xyXG5cdFx0XHRuZXdPZmZzZXRYID0gbmV3T2Zmc2V0WCA8IGNhbnZhc1dpZHRoIC0gbmV3V2lkdGggPyBjYW52YXNXaWR0aCAtIG5ld1dpZHRoIDogbmV3T2Zmc2V0WDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gQ2VudGVyIGhvcml6b250YWxseVxyXG5cdFx0XHRuZXdPZmZzZXRYID0gTWF0aC5tYXgoIDAsIGNhbnZhc1dpZHRoIC8gMiAtIG5ld1dpZHRoIC8gMiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG5ld0hlaWdodCA+IGNhbnZhc0hlaWdodCApIHtcclxuXHRcdFx0bmV3T2Zmc2V0WSA9IG5ld09mZnNldFkgPiAwID8gMCA6IG5ld09mZnNldFk7XHJcblx0XHRcdG5ld09mZnNldFkgPSBuZXdPZmZzZXRZIDwgY2FudmFzSGVpZ2h0IC0gbmV3SGVpZ2h0ID8gY2FudmFzSGVpZ2h0IC0gbmV3SGVpZ2h0IDogbmV3T2Zmc2V0WTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gQ2VudGVyIHZlcnRpY2FsbHlcclxuXHRcdFx0bmV3T2Zmc2V0WSA9IE1hdGgubWF4KCAwLCBjYW52YXNIZWlnaHQgLyAyIC0gbmV3SGVpZ2h0IC8gMiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0b3AgIDogbmV3T2Zmc2V0WSxcclxuXHRcdFx0bGVmdCA6IG5ld09mZnNldFhcclxuXHRcdH07XHJcblxyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUub25ab29tID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdC8vIENhbGN1bGF0ZSBjdXJyZW50IGRpc3RhbmNlIGJldHdlZW4gcG9pbnRzIHRvIGdldCBwaW5jaCByYXRpbyBhbmQgbmV3IHdpZHRoIGFuZCBoZWlnaHRcclxuXHJcblx0XHR2YXIgY3VycmVudFdpZHRoICA9IHNlbGYuY29udGVudFN0YXJ0UG9zLndpZHRoO1xyXG5cdFx0dmFyIGN1cnJlbnRIZWlnaHQgPSBzZWxmLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQ7XHJcblxyXG5cdFx0dmFyIGN1cnJlbnRPZmZzZXRYID0gc2VsZi5jb250ZW50U3RhcnRQb3MubGVmdDtcclxuXHRcdHZhciBjdXJyZW50T2Zmc2V0WSA9IHNlbGYuY29udGVudFN0YXJ0UG9zLnRvcDtcclxuXHJcblx0XHR2YXIgZW5kRGlzdGFuY2VCZXR3ZWVuRmluZ2VycyA9IGRpc3RhbmNlKCBzZWxmLm5ld1BvaW50c1swXSwgc2VsZi5uZXdQb2ludHNbMV0gKTtcclxuXHJcblx0XHR2YXIgcGluY2hSYXRpbyA9IGVuZERpc3RhbmNlQmV0d2VlbkZpbmdlcnMgLyBzZWxmLnN0YXJ0RGlzdGFuY2VCZXR3ZWVuRmluZ2VycztcclxuXHJcblx0XHR2YXIgbmV3V2lkdGggID0gTWF0aC5mbG9vciggY3VycmVudFdpZHRoICAqIHBpbmNoUmF0aW8gKTtcclxuXHRcdHZhciBuZXdIZWlnaHQgPSBNYXRoLmZsb29yKCBjdXJyZW50SGVpZ2h0ICogcGluY2hSYXRpbyApO1xyXG5cclxuXHRcdC8vIFRoaXMgaXMgdGhlIHRyYW5zbGF0aW9uIGR1ZSB0byBwaW5jaC16b29taW5nXHJcblx0XHR2YXIgdHJhbnNsYXRlRnJvbVpvb21pbmdYID0gKGN1cnJlbnRXaWR0aCAgLSBuZXdXaWR0aCkgICogc2VsZi5wZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFg7XHJcblx0XHR2YXIgdHJhbnNsYXRlRnJvbVpvb21pbmdZID0gKGN1cnJlbnRIZWlnaHQgLSBuZXdIZWlnaHQpICogc2VsZi5wZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFk7XHJcblxyXG5cdFx0Ly9Qb2ludCBiZXR3ZWVuIHRoZSB0d28gdG91Y2hlc1xyXG5cclxuXHRcdHZhciBjZW50ZXJQb2ludEVuZFggPSAoKHNlbGYubmV3UG9pbnRzWzBdLnggKyBzZWxmLm5ld1BvaW50c1sxXS54KSAvIDIpIC0gJCh3aW5kb3cpLnNjcm9sbExlZnQoKTtcclxuXHRcdHZhciBjZW50ZXJQb2ludEVuZFkgPSAoKHNlbGYubmV3UG9pbnRzWzBdLnkgKyBzZWxmLm5ld1BvaW50c1sxXS55KSAvIDIpIC0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xyXG5cclxuXHRcdC8vIEFuZCB0aGlzIGlzIHRoZSB0cmFuc2xhdGlvbiBkdWUgdG8gdHJhbnNsYXRpb24gb2YgdGhlIGNlbnRlcnBvaW50XHJcblx0XHQvLyBiZXR3ZWVuIHRoZSB0d28gZmluZ2Vyc1xyXG5cclxuXHRcdHZhciB0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdYID0gY2VudGVyUG9pbnRFbmRYIC0gc2VsZi5jZW50ZXJQb2ludFN0YXJ0WDtcclxuXHRcdHZhciB0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdZID0gY2VudGVyUG9pbnRFbmRZIC0gc2VsZi5jZW50ZXJQb2ludFN0YXJ0WTtcclxuXHJcblx0XHQvLyBUaGUgbmV3IG9mZnNldCBpcyB0aGUgb2xkL2N1cnJlbnQgb25lIHBsdXMgdGhlIHRvdGFsIHRyYW5zbGF0aW9uXHJcblxyXG5cdFx0dmFyIG5ld09mZnNldFggPSBjdXJyZW50T2Zmc2V0WCArICggdHJhbnNsYXRlRnJvbVpvb21pbmdYICsgdHJhbnNsYXRlRnJvbVRyYW5zbGF0aW5nWCApO1xyXG5cdFx0dmFyIG5ld09mZnNldFkgPSBjdXJyZW50T2Zmc2V0WSArICggdHJhbnNsYXRlRnJvbVpvb21pbmdZICsgdHJhbnNsYXRlRnJvbVRyYW5zbGF0aW5nWSApO1xyXG5cclxuXHRcdHZhciBuZXdQb3MgPSB7XHJcblx0XHRcdHRvcCAgICA6IG5ld09mZnNldFksXHJcblx0XHRcdGxlZnQgICA6IG5ld09mZnNldFgsXHJcblx0XHRcdHNjYWxlWCA6IHNlbGYuY29udGVudFN0YXJ0UG9zLnNjYWxlWCAqIHBpbmNoUmF0aW8sXHJcblx0XHRcdHNjYWxlWSA6IHNlbGYuY29udGVudFN0YXJ0UG9zLnNjYWxlWSAqIHBpbmNoUmF0aW9cclxuXHRcdH07XHJcblxyXG5cdFx0c2VsZi5jYW5UYXAgPSBmYWxzZTtcclxuXHJcblx0XHRzZWxmLm5ld1dpZHRoICA9IG5ld1dpZHRoO1xyXG5cdFx0c2VsZi5uZXdIZWlnaHQgPSBuZXdIZWlnaHQ7XHJcblxyXG5cdFx0c2VsZi5jb250ZW50TGFzdFBvcyA9IG5ld1BvcztcclxuXHJcblx0XHRpZiAoIHNlbGYucmVxdWVzdElkICkge1xyXG5cdFx0XHRjYW5jZWxBRnJhbWUoIHNlbGYucmVxdWVzdElkICk7XHJcblxyXG5cdFx0XHRzZWxmLnJlcXVlc3RJZCA9IG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0c2VsZi5yZXF1ZXN0SWQgPSByZXF1ZXN0QUZyYW1lKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSggc2VsZi4kY29udGVudCwgc2VsZi5jb250ZW50TGFzdFBvcyApO1xyXG5cdFx0fSk7XHJcblxyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUub250b3VjaGVuZCA9IGZ1bmN0aW9uKCBlICkge1xyXG5cclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdHZhciBkTXMgID0gTWF0aC5tYXgoIChuZXcgRGF0ZSgpLmdldFRpbWUoKSApIC0gc2VsZi5zdGFydFRpbWUsIDEpO1xyXG5cclxuXHRcdHZhciBzd2lwaW5nID0gc2VsZi5pc1N3aXBpbmc7XHJcblx0XHR2YXIgcGFubmluZyA9IHNlbGYuaXNQYW5uaW5nO1xyXG5cdFx0dmFyIHpvb21pbmcgPSBzZWxmLmlzWm9vbWluZztcclxuXHJcblx0XHRzZWxmLmVuZFBvaW50cyA9IHBvaW50ZXJzKCBlICk7XHJcblxyXG5cdFx0c2VsZi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtY29udHJvbHMtLWlzR3JhYmJpbmcnICk7XHJcblxyXG5cdFx0JChkb2N1bWVudCkub2ZmKCAnLmZiLnRvdWNoJyApO1xyXG5cclxuXHRcdGlmICggc2VsZi5yZXF1ZXN0SWQgKSB7XHJcblx0XHRcdGNhbmNlbEFGcmFtZSggc2VsZi5yZXF1ZXN0SWQgKTtcclxuXHJcblx0XHRcdHNlbGYucmVxdWVzdElkID0gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLmlzU3dpcGluZyA9IGZhbHNlO1xyXG5cdFx0c2VsZi5pc1Bhbm5pbmcgPSBmYWxzZTtcclxuXHRcdHNlbGYuaXNab29taW5nID0gZmFsc2U7XHJcblxyXG5cdFx0aWYgKCBzZWxmLmNhblRhcCApICB7XHJcblx0XHRcdHJldHVybiBzZWxmLm9uVGFwKCBlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0c2VsZi5zcGVlZCA9IDM2NjtcclxuXHJcblx0XHQvLyBTcGVlZCBpbiBweC9tc1xyXG5cdFx0c2VsZi52ZWxvY2l0eVggPSBzZWxmLmRpc3RhbmNlWCAvIGRNcyAqIDAuNTtcclxuXHRcdHNlbGYudmVsb2NpdHlZID0gc2VsZi5kaXN0YW5jZVkgLyBkTXMgKiAwLjU7XHJcblxyXG5cdFx0c2VsZi5zcGVlZFggPSBNYXRoLm1heCggc2VsZi5zcGVlZCAqIDAuNSwgTWF0aC5taW4oIHNlbGYuc3BlZWQgKiAxLjUsICggMSAvIE1hdGguYWJzKCBzZWxmLnZlbG9jaXR5WCApICkgKiBzZWxmLnNwZWVkICkgKTtcclxuXHJcblx0XHRpZiAoIHBhbm5pbmcgKSB7XHJcblx0XHRcdHNlbGYuZW5kUGFubmluZygpO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIHpvb21pbmcgKSB7XHJcblx0XHRcdHNlbGYuZW5kWm9vbWluZygpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHNlbGYuZW5kU3dpcGluZyggc3dpcGluZyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybjtcclxuXHR9O1xyXG5cclxuXHRHdWVzdHVyZXMucHJvdG90eXBlLmVuZFN3aXBpbmcgPSBmdW5jdGlvbiggc3dpcGluZyApIHtcclxuXHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHR2YXIgcmV0ID0gZmFsc2U7XHJcblxyXG5cdFx0c2VsZi5pbnN0YW5jZS5pc1NsaWRpbmcgPSBmYWxzZTtcclxuXHRcdHNlbGYuc2xpZGVyTGFzdFBvcyAgICAgID0gbnVsbDtcclxuXHJcblx0XHQvLyBDbG9zZSBpZiBzd2lwZWQgdmVydGljYWxseSAvIG5hdmlnYXRlIGlmIGhvcml6b250YWxseVxyXG5cdFx0aWYgKCBzd2lwaW5nID09ICd5JyAmJiBNYXRoLmFicyggc2VsZi5kaXN0YW5jZVkgKSA+IDUwICkge1xyXG5cclxuXHRcdFx0Ly8gQ29udGludWUgdmVydGljYWwgbW92ZW1lbnRcclxuXHRcdFx0JC5mYW5jeWJveC5hbmltYXRlKCBzZWxmLmluc3RhbmNlLmN1cnJlbnQuJHNsaWRlLCB7XHJcblx0XHRcdFx0dG9wICAgICA6IHNlbGYuc2xpZGVyU3RhcnRQb3MudG9wICsgc2VsZi5kaXN0YW5jZVkgKyAoIHNlbGYudmVsb2NpdHlZICogMTUwICksXHJcblx0XHRcdFx0b3BhY2l0eSA6IDBcclxuXHRcdFx0fSwgMTUwICk7XHJcblxyXG5cdFx0XHRyZXQgPSBzZWxmLmluc3RhbmNlLmNsb3NlKCB0cnVlLCAzMDAgKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKCBzd2lwaW5nID09ICd4JyAmJiBzZWxmLmRpc3RhbmNlWCA+IDUwICYmIHNlbGYuaW5zdGFuY2UuZ3JvdXAubGVuZ3RoID4gMSApIHtcclxuXHRcdFx0cmV0ID0gc2VsZi5pbnN0YW5jZS5wcmV2aW91cyggc2VsZi5zcGVlZFggKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKCBzd2lwaW5nID09ICd4JyAmJiBzZWxmLmRpc3RhbmNlWCA8IC01MCAgJiYgc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggPiAxICkge1xyXG5cdFx0XHRyZXQgPSBzZWxmLmluc3RhbmNlLm5leHQoIHNlbGYuc3BlZWRYICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCByZXQgPT09IGZhbHNlICYmICggc3dpcGluZyA9PSAneCcgfHwgc3dpcGluZyA9PSAneScgKSApIHtcclxuXHRcdFx0c2VsZi5pbnN0YW5jZS5qdW1wVG8oIHNlbGYuaW5zdGFuY2UuY3VycmVudC5pbmRleCwgMTUwICk7XHJcblx0XHR9XHJcblxyXG5cdFx0c2VsZi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtaXMtc2xpZGluZycgKTtcclxuXHJcblx0fTtcclxuXHJcblx0Ly8gTGltaXQgcGFubmluZyBmcm9tIGVkZ2VzXHJcblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUuZW5kUGFubmluZyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdHZhciBuZXdPZmZzZXRYLCBuZXdPZmZzZXRZLCBuZXdQb3M7XHJcblxyXG5cdFx0aWYgKCAhc2VsZi5jb250ZW50TGFzdFBvcyApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggc2VsZi5vcHRzLm1vbWVudHVtID09PSBmYWxzZSApIHtcclxuXHRcdFx0bmV3T2Zmc2V0WCA9IHNlbGYuY29udGVudExhc3RQb3MubGVmdDtcclxuXHRcdFx0bmV3T2Zmc2V0WSA9IHNlbGYuY29udGVudExhc3RQb3MudG9wO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBDb250aW51ZSBtb3ZlbWVudFxyXG5cdFx0XHRuZXdPZmZzZXRYID0gc2VsZi5jb250ZW50TGFzdFBvcy5sZWZ0ICsgKCBzZWxmLnZlbG9jaXR5WCAqIHNlbGYuc3BlZWQgKTtcclxuXHRcdFx0bmV3T2Zmc2V0WSA9IHNlbGYuY29udGVudExhc3RQb3MudG9wICArICggc2VsZi52ZWxvY2l0eVkgKiBzZWxmLnNwZWVkICk7XHJcblx0XHR9XHJcblxyXG5cdFx0bmV3UG9zID0gc2VsZi5saW1pdFBvc2l0aW9uKCBuZXdPZmZzZXRYLCBuZXdPZmZzZXRZLCBzZWxmLmNvbnRlbnRTdGFydFBvcy53aWR0aCwgc2VsZi5jb250ZW50U3RhcnRQb3MuaGVpZ2h0ICk7XHJcblxyXG5cdFx0IG5ld1Bvcy53aWR0aCAgPSBzZWxmLmNvbnRlbnRTdGFydFBvcy53aWR0aDtcclxuXHRcdCBuZXdQb3MuaGVpZ2h0ID0gc2VsZi5jb250ZW50U3RhcnRQb3MuaGVpZ2h0O1xyXG5cclxuXHRcdCQuZmFuY3lib3guYW5pbWF0ZSggc2VsZi4kY29udGVudCwgbmV3UG9zLCAzMzAgKTtcclxuXHR9O1xyXG5cclxuXHJcblx0R3Vlc3R1cmVzLnByb3RvdHlwZS5lbmRab29taW5nID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdHZhciBjdXJyZW50ID0gc2VsZi5pbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuXHRcdHZhciBuZXdPZmZzZXRYLCBuZXdPZmZzZXRZLCBuZXdQb3MsIHJlc2V0O1xyXG5cclxuXHRcdHZhciBuZXdXaWR0aCAgPSBzZWxmLm5ld1dpZHRoO1xyXG5cdFx0dmFyIG5ld0hlaWdodCA9IHNlbGYubmV3SGVpZ2h0O1xyXG5cclxuXHRcdGlmICggIXNlbGYuY29udGVudExhc3RQb3MgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRuZXdPZmZzZXRYID0gc2VsZi5jb250ZW50TGFzdFBvcy5sZWZ0O1xyXG5cdFx0bmV3T2Zmc2V0WSA9IHNlbGYuY29udGVudExhc3RQb3MudG9wO1xyXG5cclxuXHRcdHJlc2V0ID0ge1xyXG5cdFx0ICAgXHR0b3AgICAgOiBuZXdPZmZzZXRZLFxyXG5cdFx0ICAgXHRsZWZ0ICAgOiBuZXdPZmZzZXRYLFxyXG5cdFx0ICAgXHR3aWR0aCAgOiBuZXdXaWR0aCxcclxuXHRcdCAgIFx0aGVpZ2h0IDogbmV3SGVpZ2h0LFxyXG5cdFx0XHRzY2FsZVggOiAxLFxyXG5cdFx0XHRzY2FsZVkgOiAxXHJcblx0ICAgfTtcclxuXHJcblx0ICAgLy8gUmVzZXQgc2NhbGV4L3NjYWxlWSB2YWx1ZXM7IHRoaXMgaGVscHMgZm9yIHBlcmZvbWFuY2UgYW5kIGRvZXMgbm90IGJyZWFrIGFuaW1hdGlvblxyXG5cdCAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCBzZWxmLiRjb250ZW50LCByZXNldCApO1xyXG5cclxuXHRcdGlmICggbmV3V2lkdGggPCBzZWxmLmNhbnZhc1dpZHRoICYmIG5ld0hlaWdodCA8IHNlbGYuY2FudmFzSGVpZ2h0ICkge1xyXG5cdFx0XHRzZWxmLmluc3RhbmNlLnNjYWxlVG9GaXQoIDE1MCApO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIG5ld1dpZHRoID4gY3VycmVudC53aWR0aCB8fCBuZXdIZWlnaHQgPiBjdXJyZW50LmhlaWdodCApIHtcclxuXHRcdFx0c2VsZi5pbnN0YW5jZS5zY2FsZVRvQWN0dWFsKCBzZWxmLmNlbnRlclBvaW50U3RhcnRYLCBzZWxmLmNlbnRlclBvaW50U3RhcnRZLCAxNTAgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0bmV3UG9zID0gc2VsZi5saW1pdFBvc2l0aW9uKCBuZXdPZmZzZXRYLCBuZXdPZmZzZXRZLCBuZXdXaWR0aCwgbmV3SGVpZ2h0ICk7XHJcblxyXG5cdFx0XHQvLyBTd2l0Y2ggZnJvbSBzY2FsZSgpIHRvIHdpZHRoL2hlaWdodCBvciBhbmltYXRpb24gd2lsbCBub3Qgd29yayBjb3JyZWN0bHlcclxuXHRcdFx0JC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoIHNlbGYuY29udGVudCwgJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoIHNlbGYuJGNvbnRlbnQgKSApO1xyXG5cclxuXHRcdFx0JC5mYW5jeWJveC5hbmltYXRlKCBzZWxmLiRjb250ZW50LCBuZXdQb3MsIDE1MCApO1xyXG5cdFx0fVxyXG5cclxuXHR9O1xyXG5cclxuXHRHdWVzdHVyZXMucHJvdG90eXBlLm9uVGFwID0gZnVuY3Rpb24oZSkge1xyXG5cdFx0dmFyIHNlbGYgICAgPSB0aGlzO1xyXG5cdFx0dmFyICR0YXJnZXQgPSAkKCBlLnRhcmdldCApO1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IHNlbGYuaW5zdGFuY2U7XHJcblx0XHR2YXIgY3VycmVudCAgPSBpbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuXHRcdHZhciBlbmRQb2ludHMgPSAoIGUgJiYgcG9pbnRlcnMoIGUgKSApIHx8IHNlbGYuc3RhcnRQb2ludHM7XHJcblxyXG5cdFx0dmFyIHRhcFggPSBlbmRQb2ludHNbMF0gPyBlbmRQb2ludHNbMF0ueCAtIHNlbGYuJHN0YWdlLm9mZnNldCgpLmxlZnQgOiAwO1xyXG5cdFx0dmFyIHRhcFkgPSBlbmRQb2ludHNbMF0gPyBlbmRQb2ludHNbMF0ueSAtIHNlbGYuJHN0YWdlLm9mZnNldCgpLnRvcCAgOiAwO1xyXG5cclxuXHRcdHZhciB3aGVyZTtcclxuXHJcblx0XHR2YXIgcHJvY2VzcyA9IGZ1bmN0aW9uICggcHJlZml4ICkge1xyXG5cclxuXHRcdFx0dmFyIGFjdGlvbiA9IGN1cnJlbnQub3B0c1sgcHJlZml4IF07XHJcblxyXG5cdFx0XHRpZiAoICQuaXNGdW5jdGlvbiggYWN0aW9uICkgKSB7XHJcblx0XHRcdFx0YWN0aW9uID0gYWN0aW9uLmFwcGx5KCBpbnN0YW5jZSwgWyBjdXJyZW50LCBlIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCAhYWN0aW9uKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzd2l0Y2ggKCBhY3Rpb24gKSB7XHJcblxyXG5cdFx0XHRcdGNhc2UgXCJjbG9zZVwiIDpcclxuXHJcblx0XHRcdFx0XHRpbnN0YW5jZS5jbG9zZSggc2VsZi5zdGFydEV2ZW50ICk7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlIFwidG9nZ2xlQ29udHJvbHNcIiA6XHJcblxyXG5cdFx0XHRcdFx0aW5zdGFuY2UudG9nZ2xlQ29udHJvbHMoIHRydWUgKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgXCJuZXh0XCIgOlxyXG5cclxuXHRcdFx0XHRcdGluc3RhbmNlLm5leHQoKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgXCJuZXh0T3JDbG9zZVwiIDpcclxuXHJcblx0XHRcdFx0XHRpZiAoIGluc3RhbmNlLmdyb3VwLmxlbmd0aCA+IDEgKSB7XHJcblx0XHRcdFx0XHRcdGluc3RhbmNlLm5leHQoKTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRpbnN0YW5jZS5jbG9zZSggc2VsZi5zdGFydEV2ZW50ICk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlIFwiem9vbVwiIDpcclxuXHJcblx0XHRcdFx0XHRpZiAoIGN1cnJlbnQudHlwZSA9PSAnaW1hZ2UnICYmICggY3VycmVudC5pc0xvYWRlZCB8fCBjdXJyZW50LiRnaG9zdCApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBpbnN0YW5jZS5jYW5QYW4oKSApIHtcclxuXHRcdFx0XHRcdFx0XHRpbnN0YW5jZS5zY2FsZVRvRml0KCk7XHJcblxyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBpbnN0YW5jZS5pc1NjYWxlZERvd24oKSApIHtcclxuXHRcdFx0XHRcdFx0XHRpbnN0YW5jZS5zY2FsZVRvQWN0dWFsKCB0YXBYLCB0YXBZICk7XHJcblxyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBpbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyICkge1xyXG5cdFx0XHRcdFx0XHRcdGluc3RhbmNlLmNsb3NlKCBzZWxmLnN0YXJ0RXZlbnQgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gSWdub3JlIHJpZ2h0IGNsaWNrXHJcblx0XHRpZiAoIGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQuYnV0dG9uID09IDIgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTa2lwIGlmIGN1cnJlbnQgc2xpZGUgaXMgbm90IGluIHRoZSBjZW50ZXJcclxuXHRcdGlmICggaW5zdGFuY2UuaXNTbGlkaW5nICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2tpcCBpZiBjbGlja2VkIG9uIHRoZSBzY3JvbGxiYXJcclxuXHRcdGlmICggdGFwWCA+ICR0YXJnZXRbMF0uY2xpZW50V2lkdGggKyAkdGFyZ2V0Lm9mZnNldCgpLmxlZnQgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDaGVjayB3aGVyZSBpcyBjbGlja2VkXHJcblx0XHRpZiAoICR0YXJnZXQuaXMoICcuZmFuY3lib3gtYmcsLmZhbmN5Ym94LWlubmVyLC5mYW5jeWJveC1vdXRlciwuZmFuY3lib3gtY29udGFpbmVyJyApICkge1xyXG5cdFx0XHR3aGVyZSA9ICdPdXRzaWRlJztcclxuXHJcblx0XHR9IGVsc2UgaWYgKCAkdGFyZ2V0LmlzKCAnLmZhbmN5Ym94LXNsaWRlJyApICkge1xyXG5cdFx0XHR3aGVyZSA9ICdTbGlkZSc7XHJcblxyXG5cdFx0fSBlbHNlIGlmICAoIGluc3RhbmNlLmN1cnJlbnQuJGNvbnRlbnQgJiYgaW5zdGFuY2UuY3VycmVudC4kY29udGVudC5oYXMoIGUudGFyZ2V0ICkubGVuZ3RoICkge1xyXG5cdFx0IFx0d2hlcmUgPSAnQ29udGVudCc7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENoZWNrIGlmIHRoaXMgaXMgYSBkb3VibGUgdGFwXHJcblx0XHRpZiAoIHNlbGYudGFwcGVkICkge1xyXG5cclxuXHRcdFx0Ly8gU3RvcCBwcmV2aW91c2x5IGNyZWF0ZWQgc2luZ2xlIHRhcFxyXG5cdFx0XHRjbGVhclRpbWVvdXQoIHNlbGYudGFwcGVkICk7XHJcblx0XHRcdHNlbGYudGFwcGVkID0gbnVsbDtcclxuXHJcblx0XHRcdC8vIFNraXAgaWYgZGlzdGFuY2UgYmV0d2VlbiB0YXBzIGlzIHRvbyBiaWdcclxuXHRcdFx0aWYgKCBNYXRoLmFicyggdGFwWCAtIHNlbGYudGFwWCApID4gNTAgfHwgTWF0aC5hYnMoIHRhcFkgLSBzZWxmLnRhcFkgKSA+IDUwIHx8IGluc3RhbmNlLmlzU2xpZGluZyApIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT0ssIG5vdyB3ZSBhc3N1bWUgdGhhdCB0aGlzIGlzIGEgZG91YmxlLXRhcFxyXG5cdFx0XHRwcm9jZXNzKCAnZGJsY2xpY2snICsgd2hlcmUgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gU2luZ2xlIHRhcCB3aWxsIGJlIHByb2Nlc3NlZCBpZiB1c2VyIGhhcyBub3QgY2xpY2tlZCBzZWNvbmQgdGltZSB3aXRoaW4gMzAwbXNcclxuXHRcdFx0Ly8gb3IgdGhlcmUgaXMgbm8gbmVlZCB0byB3YWl0IGZvciBkb3VibGUtdGFwXHJcblx0XHRcdHNlbGYudGFwWCA9IHRhcFg7XHJcblx0XHRcdHNlbGYudGFwWSA9IHRhcFk7XHJcblxyXG5cdFx0XHRpZiAoIGN1cnJlbnQub3B0c1sgJ2RibGNsaWNrJyArIHdoZXJlIF0gJiYgY3VycmVudC5vcHRzWyAnZGJsY2xpY2snICsgd2hlcmUgXSAhPT0gY3VycmVudC5vcHRzWyAnY2xpY2snICsgd2hlcmUgXSApIHtcclxuXHRcdFx0XHRzZWxmLnRhcHBlZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRzZWxmLnRhcHBlZCA9IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0cHJvY2VzcyggJ2NsaWNrJyArIHdoZXJlICk7XHJcblxyXG5cdFx0XHRcdH0sIDMwMCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHByb2Nlc3MoICdjbGljaycgKyB3aGVyZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKCdvbkFjdGl2YXRlLmZiJywgZnVuY3Rpb24gKGUsIGluc3RhbmNlKSB7XHJcblx0XHRpZiAoIGluc3RhbmNlICYmICFpbnN0YW5jZS5HdWVzdHVyZXMgKSB7XHJcblx0XHRcdGluc3RhbmNlLkd1ZXN0dXJlcyA9IG5ldyBHdWVzdHVyZXMoIGluc3RhbmNlICk7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKCdiZWZvcmVDbG9zZS5mYicsIGZ1bmN0aW9uIChlLCBpbnN0YW5jZSkge1xyXG5cdFx0aWYgKCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5HdWVzdHVyZXMgKSB7XHJcblx0XHRcdGluc3RhbmNlLkd1ZXN0dXJlcy5kZXN0cm95KCk7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cclxufSggd2luZG93LCBkb2N1bWVudCwgd2luZG93LmpRdWVyeSB8fCBqUXVlcnkgKSk7XHJcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gU2xpZGVTaG93XHJcbi8vIEVuYWJsZXMgc2xpZGVzaG93IGZ1bmN0aW9uYWxpdHlcclxuLy9cclxuLy8gRXhhbXBsZSBvZiB1c2FnZTpcclxuLy8gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpLlNsaWRlU2hvdy5zdGFydCgpXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbjsoZnVuY3Rpb24gKGRvY3VtZW50LCAkKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQkLmV4dGVuZCh0cnVlLCAkLmZhbmN5Ym94LmRlZmF1bHRzLCB7XHJcblx0XHRidG5UcGwgOiB7XHJcblx0XHRcdHNsaWRlU2hvdyA6XHJcblx0XHRcdFx0JzxidXR0b24gZGF0YS1mYW5jeWJveC1wbGF5IGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tcGxheVwiIHRpdGxlPVwie3tQTEFZX1NUQVJUfX1cIj4nICtcclxuXHRcdFx0XHRcdCc8c3ZnIHZpZXdCb3g9XCIwIDAgNDAgNDBcIj4nICtcclxuXHRcdFx0XHRcdFx0JzxwYXRoIGQ9XCJNMTMsMTIgTDI3LDIwIEwxMywyNyBaXCIgLz4nICtcclxuXHRcdFx0XHRcdFx0JzxwYXRoIGQ9XCJNMTUsMTAgdjE5IE0yMywxMCB2MTlcIiAvPicgK1xyXG5cdFx0XHRcdFx0Jzwvc3ZnPicgK1xyXG5cdFx0XHRcdCc8L2J1dHRvbj4nXHJcblx0XHR9LFxyXG5cdFx0c2xpZGVTaG93IDoge1xyXG5cdFx0XHRhdXRvU3RhcnQgOiBmYWxzZSxcclxuICAgICAgICAgICAgc3BlZWQgICAgIDogMzAwMFxyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHR2YXIgU2xpZGVTaG93ID0gZnVuY3Rpb24oIGluc3RhbmNlICkge1xyXG5cdFx0dGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG5cdFx0dGhpcy5pbml0KCk7XHJcblx0fTtcclxuXHJcblx0JC5leHRlbmQoIFNsaWRlU2hvdy5wcm90b3R5cGUsIHtcclxuXHRcdHRpbWVyICAgIDogbnVsbCxcclxuXHRcdGlzQWN0aXZlIDogZmFsc2UsXHJcblx0XHQkYnV0dG9uICA6IG51bGwsXHJcblxyXG5cdFx0aW5pdCA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0XHRzZWxmLiRidXR0b24gPSBzZWxmLmluc3RhbmNlLiRyZWZzLnRvb2xiYXIuZmluZCgnW2RhdGEtZmFuY3lib3gtcGxheV0nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRzZWxmLnRvZ2dsZSgpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGlmICggc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyIHx8ICFzZWxmLmluc3RhbmNlLmdyb3VwWyBzZWxmLmluc3RhbmNlLmN1cnJJbmRleCBdLm9wdHMuc2xpZGVTaG93ICkge1xyXG5cdFx0XHRcdHNlbGYuJGJ1dHRvbi5oaWRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0c2V0IDogZnVuY3Rpb24oIGZvcmNlICkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0XHQvLyBDaGVjayBpZiByZWFjaGVkIGxhc3QgZWxlbWVudFxyXG5cdFx0XHRpZiAoIHNlbGYuaW5zdGFuY2UgJiYgc2VsZi5pbnN0YW5jZS5jdXJyZW50ICYmIChmb3JjZSA9PT0gdHJ1ZSB8fCBzZWxmLmluc3RhbmNlLmN1cnJlbnQub3B0cy5sb29wIHx8IHNlbGYuaW5zdGFuY2UuY3VyckluZGV4IDwgc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggLSAxICkpIHtcclxuXHRcdFx0XHRzZWxmLnRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICggc2VsZi5pc0FjdGl2ZSApIHtcclxuXHRcdFx0XHRcdFx0c2VsZi5pbnN0YW5jZS5qdW1wVG8oIChzZWxmLmluc3RhbmNlLmN1cnJJbmRleCArIDEpICUgc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fSwgc2VsZi5pbnN0YW5jZS5jdXJyZW50Lm9wdHMuc2xpZGVTaG93LnNwZWVkKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2VsZi5zdG9wKCk7XHJcblx0XHRcdFx0c2VsZi5pbnN0YW5jZS5pZGxlU2Vjb25kc0NvdW50ZXIgPSAwO1xyXG5cdFx0XHRcdHNlbGYuaW5zdGFuY2Uuc2hvd0NvbnRyb2xzKCk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0Y2xlYXIgOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdFx0Y2xlYXJUaW1lb3V0KCBzZWxmLnRpbWVyICk7XHJcblxyXG5cdFx0XHRzZWxmLnRpbWVyID0gbnVsbDtcclxuXHRcdH0sXHJcblxyXG5cdFx0c3RhcnQgOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHR2YXIgY3VycmVudCA9IHNlbGYuaW5zdGFuY2UuY3VycmVudDtcclxuXHJcblx0XHRcdGlmICggY3VycmVudCApIHtcclxuXHRcdFx0XHRzZWxmLmlzQWN0aXZlID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0c2VsZi4kYnV0dG9uXHJcblx0XHRcdFx0XHQuYXR0ciggJ3RpdGxlJywgY3VycmVudC5vcHRzLmkxOG5bIGN1cnJlbnQub3B0cy5sYW5nIF0uUExBWV9TVE9QIClcclxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LWJ1dHRvbi0tcGxheScgKVxyXG5cdFx0XHRcdFx0LmFkZENsYXNzKCAnZmFuY3lib3gtYnV0dG9uLS1wYXVzZScgKTtcclxuXHJcblx0XHRcdFx0XHRzZWxmLnNldCggdHJ1ZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHN0b3AgOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHR2YXIgY3VycmVudCA9IHNlbGYuaW5zdGFuY2UuY3VycmVudDtcclxuXHJcblx0XHRcdHNlbGYuY2xlYXIoKTtcclxuXHJcblx0XHRcdHNlbGYuJGJ1dHRvblxyXG5cdFx0XHRcdC5hdHRyKCAndGl0bGUnLCBjdXJyZW50Lm9wdHMuaTE4blsgY3VycmVudC5vcHRzLmxhbmcgXS5QTEFZX1NUQVJUIClcclxuXHRcdFx0XHQucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1idXR0b24tLXBhdXNlJyApXHJcblx0XHRcdFx0LmFkZENsYXNzKCAnZmFuY3lib3gtYnV0dG9uLS1wbGF5JyApO1xyXG5cclxuXHRcdFx0c2VsZi5pc0FjdGl2ZSA9IGZhbHNlO1xyXG5cdFx0fSxcclxuXHJcblx0XHR0b2dnbGUgOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdFx0aWYgKCBzZWxmLmlzQWN0aXZlICkge1xyXG5cdFx0XHRcdHNlbGYuc3RvcCgpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzZWxmLnN0YXJ0KCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0fSk7XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKHtcclxuXHRcdCdvbkluaXQuZmInIDogZnVuY3Rpb24oZSwgaW5zdGFuY2UpIHtcclxuXHRcdFx0aWYgKCBpbnN0YW5jZSAmJiAhaW5zdGFuY2UuU2xpZGVTaG93ICkge1xyXG5cdFx0XHRcdGluc3RhbmNlLlNsaWRlU2hvdyA9IG5ldyBTbGlkZVNob3coIGluc3RhbmNlICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0J2JlZm9yZVNob3cuZmInIDogZnVuY3Rpb24oZSwgaW5zdGFuY2UsIGN1cnJlbnQsIGZpcnN0UnVuKSB7XHJcblx0XHRcdHZhciBTbGlkZVNob3cgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5TbGlkZVNob3c7XHJcblxyXG5cdFx0XHRpZiAoIGZpcnN0UnVuICkge1xyXG5cclxuXHRcdFx0XHRpZiAoIFNsaWRlU2hvdyAmJiBjdXJyZW50Lm9wdHMuc2xpZGVTaG93LmF1dG9TdGFydCApIHtcclxuXHRcdFx0XHRcdFNsaWRlU2hvdy5zdGFydCgpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIFNsaWRlU2hvdyAmJiBTbGlkZVNob3cuaXNBY3RpdmUgKSAge1xyXG5cdFx0XHRcdFNsaWRlU2hvdy5jbGVhcigpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdCdhZnRlclNob3cuZmInIDogZnVuY3Rpb24oZSwgaW5zdGFuY2UsIGN1cnJlbnQpIHtcclxuXHRcdFx0dmFyIFNsaWRlU2hvdyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlNsaWRlU2hvdztcclxuXHJcblx0XHRcdGlmICggU2xpZGVTaG93ICYmIFNsaWRlU2hvdy5pc0FjdGl2ZSApIHtcclxuXHRcdFx0XHRTbGlkZVNob3cuc2V0KCk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0J2FmdGVyS2V5ZG93bi5mYicgOiBmdW5jdGlvbihlLCBpbnN0YW5jZSwgY3VycmVudCwga2V5cHJlc3MsIGtleWNvZGUpIHtcclxuXHRcdFx0dmFyIFNsaWRlU2hvdyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlNsaWRlU2hvdztcclxuXHJcblx0XHRcdC8vIFwiUFwiIG9yIFNwYWNlYmFyXHJcblx0XHRcdGlmICggU2xpZGVTaG93ICYmIGN1cnJlbnQub3B0cy5zbGlkZVNob3cgJiYgKCBrZXljb2RlID09PSA4MCB8fCBrZXljb2RlID09PSAzMiApICYmICEkKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmlzKCAnYnV0dG9uLGEsaW5wdXQnICkgKSB7XHJcblx0XHRcdFx0a2V5cHJlc3MucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0XHRcdFx0U2xpZGVTaG93LnRvZ2dsZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdCdiZWZvcmVDbG9zZS5mYiBvbkRlYWN0aXZhdGUuZmInIDogZnVuY3Rpb24oZSwgaW5zdGFuY2UpIHtcclxuXHRcdFx0dmFyIFNsaWRlU2hvdyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlNsaWRlU2hvdztcclxuXHJcblx0XHRcdGlmICggU2xpZGVTaG93ICkge1xyXG5cdFx0XHRcdFNsaWRlU2hvdy5zdG9wKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0Ly8gUGFnZSBWaXNpYmlsaXR5IEFQSSB0byBwYXVzZSBzbGlkZXNob3cgd2hlbiB3aW5kb3cgaXMgbm90IGFjdGl2ZVxyXG5cdCQoZG9jdW1lbnQpLm9uKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpbnN0YW5jZSAgPSAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCk7XHJcblx0XHR2YXIgU2xpZGVTaG93ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuU2xpZGVTaG93O1xyXG5cclxuXHRcdGlmICggU2xpZGVTaG93ICYmIFNsaWRlU2hvdy5pc0FjdGl2ZSApIHtcclxuXHRcdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gKSB7XHJcblx0XHRcdFx0U2xpZGVTaG93LmNsZWFyKCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFNsaWRlU2hvdy5zZXQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxufSggZG9jdW1lbnQsIHdpbmRvdy5qUXVlcnkgfHwgalF1ZXJ5ICkpO1xyXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vXHJcbi8vIEZ1bGxTY3JlZW5cclxuLy8gQWRkcyBmdWxsc2NyZWVuIGZ1bmN0aW9uYWxpdHlcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuOyhmdW5jdGlvbiAoZG9jdW1lbnQsICQpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdC8vIENvbGxlY3Rpb24gb2YgbWV0aG9kcyBzdXBwb3J0ZWQgYnkgdXNlciBicm93c2VyXHJcblx0dmFyIGZuID0gKGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgZm5NYXAgPSBbXHJcblx0XHRcdFtcclxuXHRcdFx0XHQncmVxdWVzdEZ1bGxzY3JlZW4nLFxyXG5cdFx0XHRcdCdleGl0RnVsbHNjcmVlbicsXHJcblx0XHRcdFx0J2Z1bGxzY3JlZW5FbGVtZW50JyxcclxuXHRcdFx0XHQnZnVsbHNjcmVlbkVuYWJsZWQnLFxyXG5cdFx0XHRcdCdmdWxsc2NyZWVuY2hhbmdlJyxcclxuXHRcdFx0XHQnZnVsbHNjcmVlbmVycm9yJ1xyXG5cdFx0XHRdLFxyXG5cdFx0XHQvLyBuZXcgV2ViS2l0XHJcblx0XHRcdFtcclxuXHRcdFx0XHQnd2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4nLFxyXG5cdFx0XHRcdCd3ZWJraXRFeGl0RnVsbHNjcmVlbicsXHJcblx0XHRcdFx0J3dlYmtpdEZ1bGxzY3JlZW5FbGVtZW50JyxcclxuXHRcdFx0XHQnd2Via2l0RnVsbHNjcmVlbkVuYWJsZWQnLFxyXG5cdFx0XHRcdCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJyxcclxuXHRcdFx0XHQnd2Via2l0ZnVsbHNjcmVlbmVycm9yJ1xyXG5cclxuXHRcdFx0XSxcclxuXHRcdFx0Ly8gb2xkIFdlYktpdCAoU2FmYXJpIDUuMSlcclxuXHRcdFx0W1xyXG5cdFx0XHRcdCd3ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbicsXHJcblx0XHRcdFx0J3dlYmtpdENhbmNlbEZ1bGxTY3JlZW4nLFxyXG5cdFx0XHRcdCd3ZWJraXRDdXJyZW50RnVsbFNjcmVlbkVsZW1lbnQnLFxyXG5cdFx0XHRcdCd3ZWJraXRDYW5jZWxGdWxsU2NyZWVuJyxcclxuXHRcdFx0XHQnd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsXHJcblx0XHRcdFx0J3dlYmtpdGZ1bGxzY3JlZW5lcnJvcidcclxuXHJcblx0XHRcdF0sXHJcblx0XHRcdFtcclxuXHRcdFx0XHQnbW96UmVxdWVzdEZ1bGxTY3JlZW4nLFxyXG5cdFx0XHRcdCdtb3pDYW5jZWxGdWxsU2NyZWVuJyxcclxuXHRcdFx0XHQnbW96RnVsbFNjcmVlbkVsZW1lbnQnLFxyXG5cdFx0XHRcdCdtb3pGdWxsU2NyZWVuRW5hYmxlZCcsXHJcblx0XHRcdFx0J21vemZ1bGxzY3JlZW5jaGFuZ2UnLFxyXG5cdFx0XHRcdCdtb3pmdWxsc2NyZWVuZXJyb3InXHJcblx0XHRcdF0sXHJcblx0XHRcdFtcclxuXHRcdFx0XHQnbXNSZXF1ZXN0RnVsbHNjcmVlbicsXHJcblx0XHRcdFx0J21zRXhpdEZ1bGxzY3JlZW4nLFxyXG5cdFx0XHRcdCdtc0Z1bGxzY3JlZW5FbGVtZW50JyxcclxuXHRcdFx0XHQnbXNGdWxsc2NyZWVuRW5hYmxlZCcsXHJcblx0XHRcdFx0J01TRnVsbHNjcmVlbkNoYW5nZScsXHJcblx0XHRcdFx0J01TRnVsbHNjcmVlbkVycm9yJ1xyXG5cdFx0XHRdXHJcblx0XHRdO1xyXG5cclxuXHRcdHZhciB2YWw7XHJcblx0XHR2YXIgcmV0ID0ge307XHJcblx0XHR2YXIgaSwgajtcclxuXHJcblx0XHRmb3IgKCBpID0gMDsgaSA8IGZuTWFwLmxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHR2YWwgPSBmbk1hcFsgaSBdO1xyXG5cclxuXHRcdFx0aWYgKCB2YWwgJiYgdmFsWyAxIF0gaW4gZG9jdW1lbnQgKSB7XHJcblx0XHRcdFx0Zm9yICggaiA9IDA7IGogPCB2YWwubGVuZ3RoOyBqKysgKSB7XHJcblx0XHRcdFx0XHRyZXRbIGZuTWFwWyAwIF1bIGogXSBdID0gdmFsWyBqIF07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH0pKCk7XHJcblxyXG5cdC8vIElmIGJyb3dzZXIgZG9lcyBub3QgaGF2ZSBGdWxsIFNjcmVlbiBBUEksIHRoZW4gc2ltcGx5IHVuc2V0IGRlZmF1bHQgYnV0dG9uIHRlbXBsYXRlIGFuZCBzdG9wXHJcblx0aWYgKCAhZm4gKSB7XHJcblxyXG5cdFx0aWYgKCAkICYmICQuZmFuY3lib3ggKSB7XHJcblx0XHRcdCQuZmFuY3lib3guZGVmYXVsdHMuYnRuVHBsLmZ1bGxTY3JlZW4gPSBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHR2YXIgRnVsbFNjcmVlbiA9IHtcclxuXHJcblx0XHRyZXF1ZXN0IDogZnVuY3Rpb24gKCBlbGVtICkge1xyXG5cclxuXHRcdFx0ZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXHRcdFx0ZWxlbVsgZm4ucmVxdWVzdEZ1bGxzY3JlZW4gXSggZWxlbS5BTExPV19LRVlCT0FSRF9JTlBVVCApO1xyXG5cclxuXHRcdH0sXHJcblx0XHRleGl0IDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0ZG9jdW1lbnRbIGZuLmV4aXRGdWxsc2NyZWVuIF0oKTtcclxuXHJcblx0XHR9LFxyXG5cdFx0dG9nZ2xlIDogZnVuY3Rpb24gKCBlbGVtICkge1xyXG5cclxuXHRcdFx0ZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXHRcdFx0aWYgKCB0aGlzLmlzRnVsbHNjcmVlbigpICkge1xyXG5cdFx0XHRcdHRoaXMuZXhpdCgpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLnJlcXVlc3QoIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0sXHJcblx0XHRpc0Z1bGxzY3JlZW4gOiBmdW5jdGlvbigpICB7XHJcblxyXG5cdFx0XHRyZXR1cm4gQm9vbGVhbiggZG9jdW1lbnRbIGZuLmZ1bGxzY3JlZW5FbGVtZW50IF0gKTtcclxuXHJcblx0XHR9LFxyXG5cdFx0ZW5hYmxlZCA6IGZ1bmN0aW9uKCkgIHtcclxuXHJcblx0XHRcdHJldHVybiBCb29sZWFuKCBkb2N1bWVudFsgZm4uZnVsbHNjcmVlbkVuYWJsZWQgXSApO1xyXG5cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQkLmV4dGVuZCh0cnVlLCAkLmZhbmN5Ym94LmRlZmF1bHRzLCB7XHJcblx0XHRidG5UcGwgOiB7XHJcblx0XHRcdGZ1bGxTY3JlZW4gOlxyXG5cdFx0XHRcdCc8YnV0dG9uIGRhdGEtZmFuY3lib3gtZnVsbHNjcmVlbiBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWZ1bGxzY3JlZW5cIiB0aXRsZT1cInt7RlVMTF9TQ1JFRU59fVwiPicgK1xyXG5cdFx0XHRcdFx0Jzxzdmcgdmlld0JveD1cIjAgMCA0MCA0MFwiPicgK1xyXG5cdFx0XHRcdFx0XHQnPHBhdGggZD1cIk05LDEyIGgyMiB2MTYgaC0yMiB2LTE2IHYxNiBoMjIgdi0xNiBaXCIgLz4nICtcclxuXHRcdFx0XHRcdCc8L3N2Zz4nICtcclxuXHRcdFx0XHQnPC9idXR0b24+J1xyXG5cdFx0fSxcclxuXHRcdGZ1bGxTY3JlZW4gOiB7XHJcblx0XHRcdGF1dG9TdGFydCA6IGZhbHNlXHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKHtcclxuXHRcdCdvbkluaXQuZmInIDogZnVuY3Rpb24oZSwgaW5zdGFuY2UpIHtcclxuXHRcdFx0dmFyICRjb250YWluZXI7XHJcblxyXG5cdFx0XHRpZiAoIGluc3RhbmNlICYmIGluc3RhbmNlLmdyb3VwWyBpbnN0YW5jZS5jdXJySW5kZXggXS5vcHRzLmZ1bGxTY3JlZW4gKSB7XHJcblx0XHRcdFx0JGNvbnRhaW5lciA9IGluc3RhbmNlLiRyZWZzLmNvbnRhaW5lcjtcclxuXHJcblx0XHRcdFx0JGNvbnRhaW5lci5vbignY2xpY2suZmItZnVsbHNjcmVlbicsICdbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXScsIGZ1bmN0aW9uKGUpIHtcclxuXHJcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0XHRcdEZ1bGxTY3JlZW4udG9nZ2xlKCAkY29udGFpbmVyWyAwIF0gKTtcclxuXHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdGlmICggaW5zdGFuY2Uub3B0cy5mdWxsU2NyZWVuICYmIGluc3RhbmNlLm9wdHMuZnVsbFNjcmVlbi5hdXRvU3RhcnQgPT09IHRydWUgKSB7XHJcblx0XHRcdFx0XHRGdWxsU2NyZWVuLnJlcXVlc3QoICRjb250YWluZXJbIDAgXSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gRXhwb3NlIEFQSVxyXG5cdFx0XHRcdGluc3RhbmNlLkZ1bGxTY3JlZW4gPSBGdWxsU2NyZWVuO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggaW5zdGFuY2UgKSB7XHJcblx0XHRcdFx0aW5zdGFuY2UuJHJlZnMudG9vbGJhci5maW5kKCdbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXScpLmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0J2FmdGVyS2V5ZG93bi5mYicgOiBmdW5jdGlvbihlLCBpbnN0YW5jZSwgY3VycmVudCwga2V5cHJlc3MsIGtleWNvZGUpIHtcclxuXHJcblx0XHRcdC8vIFwiUFwiIG9yIFNwYWNlYmFyXHJcblx0XHRcdGlmICggaW5zdGFuY2UgJiYgaW5zdGFuY2UuRnVsbFNjcmVlbiAmJiBrZXljb2RlID09PSA3MCApIHtcclxuXHRcdFx0XHRrZXlwcmVzcy5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0XHRpbnN0YW5jZS5GdWxsU2NyZWVuLnRvZ2dsZSggaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyWyAwIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0J2JlZm9yZUNsb3NlLmZiJyA6IGZ1bmN0aW9uKCBpbnN0YW5jZSApIHtcclxuXHRcdFx0aWYgKCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5GdWxsU2NyZWVuICkge1xyXG5cdFx0XHRcdEZ1bGxTY3JlZW4uZXhpdCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKGZuLmZ1bGxzY3JlZW5jaGFuZ2UsIGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGlzRnVsbHNjcmVlbiA9IEZ1bGxTY3JlZW4uaXNGdWxsc2NyZWVuKCksXHJcblx0XHRcdGluc3RhbmNlID0gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpO1xyXG5cclxuXHRcdGlmICggaW5zdGFuY2UgKSB7XHJcblxyXG5cdFx0XHQvLyBJZiBpbWFnZSBpcyB6b29taW5nLCB0aGVuIGZvcmNlIHRvIHN0b3AgYW5kIHJlcG9zaXRpb24gcHJvcGVybHlcclxuXHRcdFx0aWYgKCBpbnN0YW5jZS5jdXJyZW50ICYmIGluc3RhbmNlLmN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyAmJiBpbnN0YW5jZS5pc0FuaW1hdGluZyApIHtcclxuXHRcdFx0XHRpbnN0YW5jZS5jdXJyZW50LiRjb250ZW50LmNzcyggJ3RyYW5zaXRpb24nLCAnbm9uZScgKTtcclxuXHJcblx0XHRcdFx0aW5zdGFuY2UuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0aW5zdGFuY2UudXBkYXRlKCB0cnVlLCB0cnVlLCAwICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGluc3RhbmNlLnRyaWdnZXIoICdvbkZ1bGxzY3JlZW5DaGFuZ2UnLCBpc0Z1bGxzY3JlZW4gKTtcclxuXHJcblx0XHRcdGluc3RhbmNlLiRyZWZzLmNvbnRhaW5lci50b2dnbGVDbGFzcyggJ2ZhbmN5Ym94LWlzLWZ1bGxzY3JlZW4nLCBpc0Z1bGxzY3JlZW4gKTtcclxuXHRcdH1cclxuXHJcblx0fSk7XHJcblxyXG59KCBkb2N1bWVudCwgd2luZG93LmpRdWVyeSB8fCBqUXVlcnkgKSk7XHJcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gVGh1bWJzXHJcbi8vIERpc3BsYXlzIHRodW1ibmFpbHMgaW4gYSBncmlkXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbjsoZnVuY3Rpb24gKGRvY3VtZW50LCAkKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQvLyBNYWtlIHN1cmUgdGhlcmUgYXJlIGRlZmF1bHQgdmFsdWVzXHJcblx0JC5mYW5jeWJveC5kZWZhdWx0cyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuXHRcdGJ0blRwbCA6IHtcclxuXHRcdFx0dGh1bWJzIDpcclxuXHRcdFx0JzxidXR0b24gZGF0YS1mYW5jeWJveC10aHVtYnMgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS10aHVtYnNcIiB0aXRsZT1cInt7VEhVTUJTfX1cIj4nICtcclxuXHRcdFx0XHQnPHN2ZyB2aWV3Qm94PVwiMCAwIDEyMCAxMjBcIj4nICtcclxuXHRcdFx0XHRcdCc8cGF0aCBkPVwiTTMwLDMwIGgxNCB2MTQgaC0xNCBaIE01MCwzMCBoMTQgdjE0IGgtMTQgWiBNNzAsMzAgaDE0IHYxNCBoLTE0IFogTTMwLDUwIGgxNCB2MTQgaC0xNCBaIE01MCw1MCBoMTQgdjE0IGgtMTQgWiBNNzAsNTAgaDE0IHYxNCBoLTE0IFogTTMwLDcwIGgxNCB2MTQgaC0xNCBaIE01MCw3MCBoMTQgdjE0IGgtMTQgWiBNNzAsNzAgaDE0IHYxNCBoLTE0IFpcIiAvPicgK1xyXG5cdFx0XHRcdCc8L3N2Zz4nICtcclxuXHRcdFx0JzwvYnV0dG9uPidcclxuXHRcdH0sXHJcblx0XHR0aHVtYnMgOiB7XHJcblx0XHRcdGF1dG9TdGFydCAgIDogZmFsc2UsICAgICAgICAgICAgICAgICAgLy8gRGlzcGxheSB0aHVtYm5haWxzIG9uIG9wZW5pbmdcclxuXHRcdFx0aGlkZU9uQ2xvc2UgOiB0cnVlLCAgICAgICAgICAgICAgICAgICAvLyBIaWRlIHRodW1ibmFpbCBncmlkIHdoZW4gY2xvc2luZyBhbmltYXRpb24gc3RhcnRzXHJcblx0XHRcdHBhcmVudEVsICAgIDogJy5mYW5jeWJveC1jb250YWluZXInLCAgLy8gQ29udGFpbmVyIGlzIGluamVjdGVkIGludG8gdGhpcyBlbGVtZW50XHJcblx0XHRcdGF4aXMgICAgICAgIDogJ3knICAgICAgICAgICAgICAgICAgICAgLy8gVmVydGljYWwgKHkpIG9yIGhvcml6b250YWwgKHgpIHNjcm9sbGluZ1xyXG5cdFx0fVxyXG5cdH0sICQuZmFuY3lib3guZGVmYXVsdHMpO1xyXG5cclxuXHR2YXIgRmFuY3lUaHVtYnMgPSBmdW5jdGlvbiggaW5zdGFuY2UgKSB7XHJcblx0XHR0aGlzLmluaXQoIGluc3RhbmNlICk7XHJcblx0fTtcclxuXHJcblx0JC5leHRlbmQoIEZhbmN5VGh1bWJzLnByb3RvdHlwZSwge1xyXG5cclxuXHRcdCRidXR0b25cdFx0OiBudWxsLFxyXG5cdFx0JGdyaWRcdFx0OiBudWxsLFxyXG5cdFx0JGxpc3RcdFx0OiBudWxsLFxyXG5cdFx0aXNWaXNpYmxlXHQ6IGZhbHNlLFxyXG5cdFx0aXNBY3RpdmVcdDogZmFsc2UsXHJcblxyXG5cdFx0aW5pdCA6IGZ1bmN0aW9uKCBpbnN0YW5jZSApIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdFx0c2VsZi5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG5cclxuXHRcdFx0aW5zdGFuY2UuVGh1bWJzID0gc2VsZjtcclxuXHJcblx0XHRcdC8vIEVuYWJsZSB0aHVtYnMgaWYgYXQgbGVhc3QgdHdvIGdyb3VwIGl0ZW1zIGhhdmUgdGh1bWJuYWlsc1xyXG5cdFx0XHR2YXIgZmlyc3QgID0gaW5zdGFuY2UuZ3JvdXBbMF0sXHJcblx0XHRcdFx0c2Vjb25kID0gaW5zdGFuY2UuZ3JvdXBbMV07XHJcblxyXG5cdFx0XHRzZWxmLm9wdHMgPSBpbnN0YW5jZS5ncm91cFsgaW5zdGFuY2UuY3VyckluZGV4IF0ub3B0cy50aHVtYnM7XHJcblxyXG5cdFx0XHRzZWxmLiRidXR0b24gPSBpbnN0YW5jZS4kcmVmcy50b29sYmFyLmZpbmQoICdbZGF0YS1mYW5jeWJveC10aHVtYnNdJyApO1xyXG5cclxuXHRcdFx0aWYgKCBzZWxmLm9wdHMgJiYgZmlyc3QgJiYgc2Vjb25kICYmIChcclxuXHRcdCAgICBcdFx0KCBmaXJzdC50eXBlID09ICdpbWFnZScgIHx8IGZpcnN0Lm9wdHMudGh1bWIgIHx8IGZpcnN0Lm9wdHMuJHRodW1iICkgJiZcclxuXHRcdCAgICBcdFx0KCBzZWNvbmQudHlwZSA9PSAnaW1hZ2UnIHx8IHNlY29uZC5vcHRzLnRodW1iIHx8IHNlY29uZC5vcHRzLiR0aHVtYiApXHJcblx0XHRcdCkpIHtcclxuXHJcblx0XHRcdFx0c2VsZi4kYnV0dG9uLnNob3coKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHNlbGYudG9nZ2xlKCk7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdHNlbGYuaXNBY3RpdmUgPSB0cnVlO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzZWxmLiRidXR0b24uaGlkZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdGNyZWF0ZSA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0aW5zdGFuY2UgPSBzZWxmLmluc3RhbmNlLFxyXG5cdFx0XHRcdHBhcmVudEVsID0gc2VsZi5vcHRzLnBhcmVudEVsLFxyXG5cdFx0XHRcdGxpc3QsXHJcblx0XHRcdFx0c3JjO1xyXG5cclxuXHRcdFx0c2VsZi4kZ3JpZCA9ICQoJzxkaXYgY2xhc3M9XCJmYW5jeWJveC10aHVtYnMgZmFuY3lib3gtdGh1bWJzLScgKyBzZWxmLm9wdHMuYXhpcyArICdcIj48L2Rpdj4nKS5hcHBlbmRUbyggaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyLmZpbmQoIHBhcmVudEVsICkuYWRkQmFjaygpLmZpbHRlciggcGFyZW50RWwgKSApO1xyXG5cclxuXHRcdFx0Ly8gQnVpbGQgbGlzdCBIVE1MXHJcblx0XHRcdGxpc3QgPSAnPHVsPic7XHJcblxyXG5cdFx0XHQkLmVhY2goaW5zdGFuY2UuZ3JvdXAsIGZ1bmN0aW9uKCBpLCBpdGVtICkge1xyXG5cdFx0XHRcdHNyYyA9IGl0ZW0ub3B0cy50aHVtYiB8fCAoIGl0ZW0ub3B0cy4kdGh1bWIgPyBpdGVtLm9wdHMuJHRodW1iLmF0dHIoICdzcmMnICkgOiBudWxsICk7XHJcblxyXG5cdFx0XHRcdGlmICggIXNyYyAmJiBpdGVtLnR5cGUgPT09ICdpbWFnZScgKSB7XHJcblx0XHRcdFx0XHRzcmMgPSBpdGVtLnNyYztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggc3JjICYmIHNyYy5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRsaXN0ICs9ICc8bGkgZGF0YS1pbmRleD1cIicgKyBpICsgJ1wiICB0YWJpbmRleD1cIjBcIiBjbGFzcz1cImZhbmN5Ym94LXRodW1icy1sb2FkaW5nXCI+PGltZyBkYXRhLXNyYz1cIicgKyBzcmMgKyAnXCIgLz48L2xpPic7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGxpc3QgKz0gJzwvdWw+JztcclxuXHJcblx0XHRcdHNlbGYuJGxpc3QgPSAkKCBsaXN0ICkuYXBwZW5kVG8oIHNlbGYuJGdyaWQgKS5vbignY2xpY2snLCAnbGknLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpbnN0YW5jZS5qdW1wVG8oICQodGhpcykuZGF0YSgnaW5kZXgnKSApO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdHNlbGYuJGxpc3QuZmluZCggJ2ltZycgKS5oaWRlKCkub25lKCdsb2FkJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyICRwYXJlbnRcdFx0PSAkKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtdGh1bWJzLWxvYWRpbmcnICksXHJcblx0XHRcdFx0XHR0aHVtYldpZHRoXHQ9ICRwYXJlbnQub3V0ZXJXaWR0aCgpLFxyXG5cdFx0XHRcdFx0dGh1bWJIZWlnaHRcdD0gJHBhcmVudC5vdXRlckhlaWdodCgpLFxyXG5cdFx0XHRcdFx0d2lkdGgsXHJcblx0XHRcdFx0XHRoZWlnaHQsXHJcblx0XHRcdFx0XHR3aWR0aFJhdGlvLFxyXG5cdFx0XHRcdFx0aGVpZ2h0UmF0aW87XHJcblxyXG5cdFx0XHRcdHdpZHRoICA9IHRoaXMubmF0dXJhbFdpZHRoXHR8fCB0aGlzLndpZHRoO1xyXG5cdFx0XHRcdGhlaWdodCA9IHRoaXMubmF0dXJhbEhlaWdodFx0fHwgdGhpcy5oZWlnaHQ7XHJcblxyXG5cdFx0XHRcdC8vIENhbGN1bGF0ZSB0aHVtYm5haWwgZGltZW5zaW9uczsgY2VudGVyIHZlcnRpY2FsbHkgYW5kIGhvcml6b250YWxseVxyXG5cdFx0XHRcdHdpZHRoUmF0aW8gID0gd2lkdGggIC8gdGh1bWJXaWR0aDtcclxuXHRcdFx0XHRoZWlnaHRSYXRpbyA9IGhlaWdodCAvIHRodW1iSGVpZ2h0O1xyXG5cclxuXHRcdFx0XHRpZiAod2lkdGhSYXRpbyA+PSAxICYmIGhlaWdodFJhdGlvID49IDEpIHtcclxuXHRcdFx0XHRcdGlmICh3aWR0aFJhdGlvID4gaGVpZ2h0UmF0aW8pIHtcclxuXHRcdFx0XHRcdFx0d2lkdGggID0gd2lkdGggLyBoZWlnaHRSYXRpbztcclxuXHRcdFx0XHRcdFx0aGVpZ2h0ID0gdGh1bWJIZWlnaHQ7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0d2lkdGggID0gdGh1bWJXaWR0aDtcclxuXHRcdFx0XHRcdFx0aGVpZ2h0ID0gaGVpZ2h0IC8gd2lkdGhSYXRpbztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdCQodGhpcykuY3NzKHtcclxuXHRcdFx0XHRcdHdpZHRoICAgICAgICAgOiBNYXRoLmZsb29yKHdpZHRoKSxcclxuXHRcdFx0XHRcdGhlaWdodCAgICAgICAgOiBNYXRoLmZsb29yKGhlaWdodCksXHJcblx0XHRcdFx0XHQnbWFyZ2luLXRvcCcgIDogaGVpZ2h0ID4gdGh1bWJIZWlnaHQgPyAoIE1hdGguZmxvb3IodGh1bWJIZWlnaHQgKiAwLjMgLSBoZWlnaHQgKiAwLjMgKSApIDogTWF0aC5mbG9vcih0aHVtYkhlaWdodCAqIDAuNSAtIGhlaWdodCAqIDAuNSApLFxyXG5cdFx0XHRcdFx0J21hcmdpbi1sZWZ0JyA6IE1hdGguZmxvb3IodGh1bWJXaWR0aCAqIDAuNSAtIHdpZHRoICogMC41IClcclxuXHRcdFx0XHR9KS5zaG93KCk7XHJcblxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR0aGlzLnNyYyA9ICQoIHRoaXMgKS5kYXRhKCAnc3JjJyApO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGlmICggc2VsZi5vcHRzLmF4aXMgPT09ICd4JyApIHtcclxuXHRcdFx0XHRzZWxmLiRsaXN0LndpZHRoKCBwYXJzZUludCggc2VsZi4kZ3JpZC5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIpICkgKyAoIGluc3RhbmNlLmdyb3VwLmxlbmd0aCAqIHNlbGYuJGxpc3QuY2hpbGRyZW4oKS5lcSgwKS5vdXRlcldpZHRoKHRydWUpICkgKyAncHgnICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0Zm9jdXMgOiBmdW5jdGlvbiggZHVyYXRpb24gKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHQkbGlzdCA9IHNlbGYuJGxpc3QsXHJcblx0XHRcdFx0dGh1bWIsXHJcblx0XHRcdFx0dGh1bWJQb3M7XHJcblxyXG5cdFx0XHRpZiAoIHNlbGYuaW5zdGFuY2UuY3VycmVudCApIHtcclxuXHRcdFx0XHR0aHVtYiA9ICRsaXN0LmNoaWxkcmVuKClcclxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LXRodW1icy1hY3RpdmUnIClcclxuXHRcdFx0XHRcdC5maWx0ZXIoJ1tkYXRhLWluZGV4PVwiJyArIHNlbGYuaW5zdGFuY2UuY3VycmVudC5pbmRleCAgKyAnXCJdJylcclxuXHRcdFx0XHRcdC5hZGRDbGFzcygnZmFuY3lib3gtdGh1bWJzLWFjdGl2ZScpO1xyXG5cclxuXHRcdFx0XHR0aHVtYlBvcyA9IHRodW1iLnBvc2l0aW9uKCk7XHJcblxyXG5cdFx0XHRcdC8vIENoZWNrIGlmIG5lZWQgdG8gc2Nyb2xsIHRvIG1ha2UgY3VycmVudCB0aHVtYiB2aXNpYmxlXHJcblx0XHRcdFx0aWYgKCBzZWxmLm9wdHMuYXhpcyA9PT0gJ3knICYmICggdGh1bWJQb3MudG9wIDwgMCB8fCB0aHVtYlBvcy50b3AgPiAoICRsaXN0LmhlaWdodCgpIC0gdGh1bWIub3V0ZXJIZWlnaHQoKSApICkgKSB7XHJcblx0XHRcdFx0XHQkbGlzdC5zdG9wKCkuYW5pbWF0ZSh7ICdzY3JvbGxUb3AnIDogJGxpc3Quc2Nyb2xsVG9wKCkgKyB0aHVtYlBvcy50b3AgfSwgZHVyYXRpb24pO1xyXG5cclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzZWxmLm9wdHMuYXhpcyA9PT0gJ3gnICYmIChcclxuXHRcdFx0XHRcdFx0dGh1bWJQb3MubGVmdCA8ICRsaXN0LnBhcmVudCgpLnNjcm9sbExlZnQoKSB8fFxyXG5cdFx0XHRcdFx0XHR0aHVtYlBvcy5sZWZ0ID4gKCAkbGlzdC5wYXJlbnQoKS5zY3JvbGxMZWZ0KCkgKyAoICRsaXN0LnBhcmVudCgpLndpZHRoKCkgLSB0aHVtYi5vdXRlcldpZHRoKCkgKSApXHJcblx0XHRcdFx0XHQpXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHQkbGlzdC5wYXJlbnQoKS5zdG9wKCkuYW5pbWF0ZSh7ICdzY3JvbGxMZWZ0JyA6IHRodW1iUG9zLmxlZnQgfSwgZHVyYXRpb24pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHR1cGRhdGUgOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dGhpcy5pbnN0YW5jZS4kcmVmcy5jb250YWluZXIudG9nZ2xlQ2xhc3MoICdmYW5jeWJveC1zaG93LXRodW1icycsIHRoaXMuaXNWaXNpYmxlICk7XHJcblxyXG5cdFx0XHRpZiAoIHRoaXMuaXNWaXNpYmxlICkge1xyXG5cdFx0XHRcdGlmICggIXRoaXMuJGdyaWQgKSB7XHJcblx0XHRcdFx0XHR0aGlzLmNyZWF0ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dGhpcy5pbnN0YW5jZS50cmlnZ2VyKCAnb25UaHVtYnNTaG93JyApO1xyXG5cclxuXHRcdFx0XHR0aGlzLmZvY3VzKCAwICk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCB0aGlzLiRncmlkICkge1xyXG5cdFx0XHRcdHRoaXMuaW5zdGFuY2UudHJpZ2dlciggJ29uVGh1bWJzSGlkZScgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVXBkYXRlIGNvbnRlbnQgcG9zaXRpb25cclxuXHRcdFx0dGhpcy5pbnN0YW5jZS51cGRhdGUoKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0aGlkZSA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRzaG93IDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy51cGRhdGUoKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dG9nZ2xlIDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMuaXNWaXNpYmxlID0gIXRoaXMuaXNWaXNpYmxlO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHQkKGRvY3VtZW50KS5vbih7XHJcblxyXG5cdFx0J29uSW5pdC5mYicgOiBmdW5jdGlvbihlLCBpbnN0YW5jZSkge1xyXG5cdFx0XHR2YXIgVGh1bWJzO1xyXG5cclxuXHRcdFx0aWYgKCBpbnN0YW5jZSAmJiAhaW5zdGFuY2UuVGh1bWJzICkge1xyXG5cdFx0XHRcdFRodW1icyA9IG5ldyBGYW5jeVRodW1icyggaW5zdGFuY2UgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBUaHVtYnMuaXNBY3RpdmUgJiYgVGh1bWJzLm9wdHMuYXV0b1N0YXJ0ID09PSB0cnVlICkge1xyXG5cdFx0XHRcdFx0VGh1bWJzLnNob3coKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0J2JlZm9yZVNob3cuZmInIDogZnVuY3Rpb24oZSwgaW5zdGFuY2UsIGl0ZW0sIGZpcnN0UnVuKSB7XHJcblx0XHRcdHZhciBUaHVtYnMgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5UaHVtYnM7XHJcblxyXG5cdFx0XHRpZiAoIFRodW1icyAmJiBUaHVtYnMuaXNWaXNpYmxlICkge1xyXG5cdFx0XHRcdFRodW1icy5mb2N1cyggZmlyc3RSdW4gPyAwIDogMjUwICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0J2FmdGVyS2V5ZG93bi5mYicgOiBmdW5jdGlvbihlLCBpbnN0YW5jZSwgY3VycmVudCwga2V5cHJlc3MsIGtleWNvZGUpIHtcclxuXHRcdFx0dmFyIFRodW1icyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlRodW1icztcclxuXHJcblx0XHRcdC8vIFwiR1wiXHJcblx0XHRcdGlmICggVGh1bWJzICYmIFRodW1icy5pc0FjdGl2ZSAmJiBrZXljb2RlID09PSA3MSApIHtcclxuXHRcdFx0XHRrZXlwcmVzcy5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0XHRUaHVtYnMudG9nZ2xlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0J2JlZm9yZUNsb3NlLmZiJyA6IGZ1bmN0aW9uKCBlLCBpbnN0YW5jZSApIHtcclxuXHRcdFx0dmFyIFRodW1icyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlRodW1icztcclxuXHJcblx0XHRcdGlmICggVGh1bWJzICYmIFRodW1icy5pc1Zpc2libGUgJiYgVGh1bWJzLm9wdHMuaGlkZU9uQ2xvc2UgIT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFRodW1icy4kZ3JpZC5oaWRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0fSk7XHJcblxyXG59KGRvY3VtZW50LCB3aW5kb3cualF1ZXJ5KSk7XHJcblxuLy8vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBTaGFyZVxyXG4vLyBEaXNwbGF5cyBzaW1wbGUgZm9ybSBmb3Igc2hhcmluZyBjdXJyZW50IHVybFxyXG4vL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG47KGZ1bmN0aW9uIChkb2N1bWVudCwgJCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0JC5leHRlbmQodHJ1ZSwgJC5mYW5jeWJveC5kZWZhdWx0cywge1xyXG5cdFx0YnRuVHBsIDoge1xyXG5cdFx0XHRzaGFyZSA6XHJcblx0XHRcdFx0JzxidXR0b24gZGF0YS1mYW5jeWJveC1zaGFyZSBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLXNoYXJlXCIgdGl0bGU9XCJ7e1NIQVJFfX1cIj4nICtcclxuXHRcdFx0XHRcdCc8c3ZnIHZpZXdCb3g9XCIwIDAgNDAgNDBcIj4nICtcclxuXHRcdFx0XHRcdFx0JzxwYXRoIGQ9XCJNNiwzMCBDOCwxOCAxOSwxNiAyMywxNiBMMjMsMTYgTDIzLDEwIEwzMywyMCBMMjMsMjkgTDIzLDI0IEMxOSwyNCA4LDI3IDYsMzAgWlwiPicgK1xyXG5cdFx0XHRcdFx0Jzwvc3ZnPicgK1xyXG5cdFx0XHRcdCc8L2J1dHRvbj4nXHJcblx0XHR9LFxyXG5cdFx0c2hhcmUgOiB7XHJcblx0XHRcdHRwbCA6XHJcblx0XHRcdFx0JzxkaXYgY2xhc3M9XCJmYW5jeWJveC1zaGFyZVwiPicgK1xyXG5cdFx0XHRcdFx0JzxoMT57e1NIQVJFfX08L2gxPicgK1xyXG5cdFx0XHRcdFx0JzxwPicgK1xyXG5cdFx0XHRcdFx0XHQnPGEgaHJlZj1cImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD91PXt7c3JjfX1cIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImZhbmN5Ym94LXNoYXJlX2J1dHRvblwiPicgK1xyXG5cdFx0XHRcdFx0XHRcdCc8c3ZnIHZlcnNpb249XCIxLjFcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgZmlsbD1cIiMzYjU5OThcIj48cGF0aCBkPVwiTTI3LjYgM2gtMjMuMmMtLjggMC0xLjQuNi0xLjQgMS40djIzLjFjMCAuOS42IDEuNSAxLjQgMS41aDEyLjV2LTEwLjFoLTMuNHYtMy45aDMuNHYtMi45YzAtMy40IDIuMS01LjIgNS01LjIgMS40IDAgMi43LjEgMyAuMnYzLjVoLTIuMWMtMS42IDAtMS45LjgtMS45IDEuOXYyLjVoMy45bC0uNSAzLjloLTMuNHYxMC4xaDYuNmMuOCAwIDEuNC0uNiAxLjQtMS40di0yMy4yYy4xLS44LS41LTEuNC0xLjMtMS40elwiPjwvcGF0aD48L3N2Zz4nICtcclxuXHRcdFx0XHRcdFx0XHQnPHNwYW4+RmFjZWJvb2s8L3NwYW4+JyArXHJcblx0XHRcdFx0XHRcdCc8L2E+JyArXHJcblx0XHRcdFx0XHRcdCc8YSBocmVmPVwiaHR0cHM6Ly93d3cucGludGVyZXN0LmNvbS9waW4vY3JlYXRlL2J1dHRvbi8/dXJsPXt7c3JjfX0mYW1wO2Rlc2NyaXB0aW9uPXt7ZGVzY3J9fVwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwiZmFuY3lib3gtc2hhcmVfYnV0dG9uXCI+JyArXHJcblx0XHRcdFx0XHRcdFx0JzxzdmcgdmVyc2lvbj1cIjEuMVwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBmaWxsPVwiI2M5MjIyOFwiPjxwYXRoIGQ9XCJNMTYgM2MtNy4yIDAtMTMgNS44LTEzIDEzIDAgNS41IDMuNCAxMC4yIDguMyAxMi4xLS4xLTEtLjItMi42IDAtMy43LjItMSAxLjUtNi41IDEuNS02LjVzLS40LS44LS40LTEuOWMwLTEuOCAxLTMuMiAyLjQtMy4yIDEuMSAwIDEuNi44IDEuNiAxLjggMCAxLjEtLjcgMi44LTEuMSA0LjMtLjMgMS4zLjYgMi4zIDEuOSAyLjMgMi4zIDAgNC4xLTIuNCA0LjEtNiAwLTMuMS0yLjItNS4zLTUuNC01LjMtMy43IDAtNS45IDIuOC01LjkgNS42IDAgMS4xLjQgMi4zIDEgMyAuMS4xLjEuMi4xLjQtLjEuNC0uMyAxLjMtLjQgMS41LS4xLjItLjIuMy0uNC4yLTEuNi0uOC0yLjYtMy4xLTIuNi01IDAtNC4xIDMtNy45IDguNi03LjkgNC41IDAgOCAzLjIgOCA3LjUgMCA0LjUtMi44IDguMS02LjcgOC4xLTEuMyAwLTIuNi0uNy0zLTEuNSAwIDAtLjcgMi41LS44IDMuMS0uMyAxLjEtMS4xIDIuNS0xLjYgMy40IDEuMi40IDIuNS42IDMuOC42IDcuMiAwIDEzLTUuOCAxMy0xMyAwLTcuMS01LjgtMTIuOS0xMy0xMi45elwiPjwvcGF0aD48L3N2Zz4nICtcclxuXHRcdFx0XHRcdFx0XHQnPHNwYW4+UGludGVyZXN0PC9zcGFuPicgK1xyXG5cdFx0XHRcdFx0XHQnPC9hPicgK1xyXG5cdFx0XHRcdFx0XHQnPGEgaHJlZj1cImh0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P3VybD17e3NyY319JmFtcDt0ZXh0PXt7ZGVzY3J9fVwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwiZmFuY3lib3gtc2hhcmVfYnV0dG9uXCI+JyArXHJcblx0XHRcdFx0XHRcdFx0JzxzdmcgdmVyc2lvbj1cIjEuMVwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBmaWxsPVwiIzFkYTFmMlwiPjxwYXRoIGQ9XCJNMzAgNy4zYy0xIC41LTIuMS44LTMuMy45IDEuMi0uNyAyLjEtMS44IDIuNS0zLjItMS4xLjctMi4zIDEuMS0zLjYgMS40LTEtMS4xLTIuNS0xLjgtNC4yLTEuOC0zLjIgMC01LjcgMi42LTUuNyA1LjcgMCAuNS4xLjkuMSAxLjMtNC44LS4yLTktMi41LTExLjgtNi0uNS45LS44IDEuOS0uOCAzIDAgMiAxIDMuOCAyLjYgNC44LS45IDAtMS44LS4zLTIuNi0uN3YuMWMwIDIuOCAyIDUuMSA0LjYgNS42LS41LjEtMSAuMi0xLjUuMi0uNCAwLS43IDAtMS4xLS4xLjcgMi4zIDIuOSAzLjkgNS40IDQtMiAxLjUtNC40IDIuNS03LjEgMi41LS41IDAtLjkgMC0xLjQtLjEgMi41IDEuNiA1LjYgMi42IDguOCAyLjYgMTAuNiAwIDE2LjMtOC44IDE2LjMtMTYuM3YtLjdjMS4xLTEgMi0yIDIuOC0zLjJ6XCI+PC9wYXRoPjwvc3ZnPicgK1xyXG5cdFx0XHRcdFx0XHRcdCc8c3Bhbj5Ud2l0dGVyPC9zcGFuPicgK1xyXG5cdFx0XHRcdFx0XHQnPC9hPicgK1xyXG5cdFx0XHRcdFx0JzwvcD4nICtcclxuXHRcdFx0XHRcdCc8cD48aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT1cInt7c3JjX3Jhd319XCIgb25mb2N1cz1cInRoaXMuc2VsZWN0KClcIiAvPjwvcD4nICtcclxuXHRcdFx0XHQnPC9kaXY+J1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHRmdW5jdGlvbiBlc2NhcGVIdG1sKHN0cmluZykge1xyXG5cdFx0dmFyIGVudGl0eU1hcCA9IHtcclxuXHRcdCAgJyYnOiAnJmFtcDsnLFxyXG5cdFx0ICAnPCc6ICcmbHQ7JyxcclxuXHRcdCAgJz4nOiAnJmd0OycsXHJcblx0XHQgICdcIic6ICcmcXVvdDsnLFxyXG5cdFx0ICBcIidcIjogJyYjMzk7JyxcclxuXHRcdCAgJy8nOiAnJiN4MkY7JyxcclxuXHRcdCAgJ2AnOiAnJiN4NjA7JyxcclxuXHRcdCAgJz0nOiAnJiN4M0Q7J1xyXG5cdFx0fTtcclxuXHJcblx0XHRyZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZSgvWyY8PlwiJ2A9XFwvXS9nLCBmdW5jdGlvbiAocykge1xyXG5cdFx0XHRyZXR1cm4gZW50aXR5TWFwW3NdO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQkKGRvY3VtZW50KS5vbignY2xpY2snLCAnW2RhdGEtZmFuY3lib3gtc2hhcmVdJywgZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZiA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKSxcclxuXHRcdFx0dXJsLFxyXG5cdFx0XHR0cGw7XHJcblxyXG5cdFx0aWYgKCBmICkge1xyXG5cdFx0XHR1cmwgPSBmLmN1cnJlbnQub3B0cy5oYXNoID09PSBmYWxzZSA/IGYuY3VycmVudC5zcmMgOiB3aW5kb3cubG9jYXRpb247XHJcblx0XHRcdHRwbCA9IGYuY3VycmVudC5vcHRzLnNoYXJlLnRwbFxyXG5cdFx0XHRcdFx0LnJlcGxhY2UoIC9cXHtcXHtzcmNcXH1cXH0vZywgZW5jb2RlVVJJQ29tcG9uZW50KCB1cmwgKSApXHJcblx0XHRcdFx0XHQucmVwbGFjZSggL1xce1xce3NyY19yYXdcXH1cXH0vZywgZXNjYXBlSHRtbCggdXJsICkgKVxyXG5cdFx0XHRcdFx0LnJlcGxhY2UoIC9cXHtcXHtkZXNjclxcfVxcfS9nLCBmLiRjYXB0aW9uID8gZW5jb2RlVVJJQ29tcG9uZW50KCBmLiRjYXB0aW9uLnRleHQoKSApIDogJycgKTtcclxuXHJcblx0XHRcdCQuZmFuY3lib3gub3Blbih7XHJcblx0XHRcdFx0c3JjICA6IGYudHJhbnNsYXRlKCBmLCB0cGwgKSxcclxuXHRcdFx0XHR0eXBlIDogJ2h0bWwnLFxyXG5cdFx0XHRcdG9wdHMgOiB7XHJcblx0XHRcdFx0XHRhbmltYXRpb25FZmZlY3QgICA6IFwiZmFkZVwiLFxyXG5cdFx0XHRcdFx0YW5pbWF0aW9uRHVyYXRpb24gOiAyNTBcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHR9KTtcclxuXHJcbn0oIGRvY3VtZW50LCB3aW5kb3cualF1ZXJ5IHx8IGpRdWVyeSApKTtcclxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBIYXNoXHJcbi8vIEVuYWJsZXMgbGlua2luZyB0byBlYWNoIG1vZGFsXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbjsoZnVuY3Rpb24gKGRvY3VtZW50LCB3aW5kb3csICQpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdC8vIFNpbXBsZSAkLmVzY2FwZVNlbGVjdG9yIHBvbHlmaWxsIChmb3IgalF1ZXJ5IHByaW9yIHYzKVxyXG5cdGlmICggISQuZXNjYXBlU2VsZWN0b3IgKSB7XHJcblx0XHQkLmVzY2FwZVNlbGVjdG9yID0gZnVuY3Rpb24oIHNlbCApIHtcclxuXHRcdFx0dmFyIHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXHg4MC1cXHVGRkZGXFx3LV0vZztcclxuXHRcdFx0dmFyIGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xyXG5cdFx0XHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XHJcblx0XHRcdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcclxuXHRcdFx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xyXG5cdFx0XHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcclxuXHRcdFx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0Ly8gQ3JlYXRlIG5ldyBoaXN0b3J5IGVudHJ5IG9ubHkgb25jZVxyXG5cdHZhciBzaG91bGRDcmVhdGVIaXN0b3J5ID0gdHJ1ZTtcclxuXHJcblx0Ly8gVmFyaWFibGUgY29udGFpbmluZyBsYXN0IGhhc2ggdmFsdWUgc2V0IGJ5IGZhbmN5Qm94XHJcblx0Ly8gSXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBpZiBmYW5jeUJveCBuZWVkcyB0byBjbG9zZSBhZnRlciBoYXNoIGNoYW5nZSBpcyBkZXRlY3RlZFxyXG4gICAgdmFyIGN1cnJlbnRIYXNoID0gbnVsbDtcclxuXHJcblx0Ly8gVGhyb3R0bGluZyB0aGUgaGlzdG9yeSBjaGFuZ2VcclxuXHR2YXIgdGltZXJJRCA9IG51bGw7XHJcblxyXG5cdC8vIEdldCBpbmZvIGFib3V0IGdhbGxlcnkgbmFtZSBhbmQgY3VycmVudCBpbmRleCBmcm9tIHVybFxyXG4gICAgZnVuY3Rpb24gcGFyc2VVcmwoKSB7XHJcbiAgICAgICAgdmFyIGhhc2ggICAgPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoIDEgKTtcclxuICAgICAgICB2YXIgcmV6ICAgICA9IGhhc2guc3BsaXQoICctJyApO1xyXG4gICAgICAgIHZhciBpbmRleCAgID0gcmV6Lmxlbmd0aCA+IDEgJiYgL15cXCs/XFxkKyQvLnRlc3QoIHJlelsgcmV6Lmxlbmd0aCAtIDEgXSApID8gcGFyc2VJbnQoIHJlei5wb3AoIC0xICksIDEwICkgfHwgMSA6IDE7XHJcbiAgICAgICAgdmFyIGdhbGxlcnkgPSByZXouam9pbiggJy0nICk7XHJcblxyXG5cdFx0Ly8gSW5kZXggaXMgc3RhcnRpbmcgZnJvbSAxXHJcblx0XHRpZiAoIGluZGV4IDwgMSApIHtcclxuXHRcdFx0aW5kZXggPSAxO1xyXG5cdFx0fVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBoYXNoICAgIDogaGFzaCxcclxuICAgICAgICAgICAgaW5kZXggICA6IGluZGV4LFxyXG4gICAgICAgICAgICBnYWxsZXJ5IDogZ2FsbGVyeVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG5cdC8vIFRyaWdnZXIgY2xpY2sgZXZudCBvbiBsaW5rcyB0byBvcGVuIG5ldyBmYW5jeUJveCBpbnN0YW5jZVxyXG5cdGZ1bmN0aW9uIHRyaWdnZXJGcm9tVXJsKCB1cmwgKSB7XHJcblx0XHR2YXIgJGVsO1xyXG5cclxuICAgICAgICBpZiAoIHVybC5nYWxsZXJ5ICE9PSAnJyApIHtcclxuXHJcblx0XHRcdC8vIElmIHdlIGNhbiBmaW5kIGVsZW1lbnQgbWF0Y2hpbmcgJ2RhdGEtZmFuY3lib3gnIGF0cmlidXRlLCB0aGVuIHRyaWdnZXIgY2xpY2sgZXZlbnQgZm9yIHRoYXQgLi5cclxuXHRcdFx0JGVsID0gJCggXCJbZGF0YS1mYW5jeWJveD0nXCIgKyAkLmVzY2FwZVNlbGVjdG9yKCB1cmwuZ2FsbGVyeSApICsgXCInXVwiICkuZXEoIHVybC5pbmRleCAtIDEgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggISRlbC5sZW5ndGggKSB7XHJcblx0XHRcdFx0Ly8gLi4gaWYgbm90LCB0cnkgZmluZGluZyBlbGVtZW50IGJ5IElEXHJcblx0XHRcdFx0JGVsID0gJCggXCIjXCIgKyAkLmVzY2FwZVNlbGVjdG9yKCB1cmwuZ2FsbGVyeSApICsgXCJcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoICRlbC5sZW5ndGggKSB7XHJcblx0XHRcdFx0c2hvdWxkQ3JlYXRlSGlzdG9yeSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHQkZWwudHJpZ2dlciggJ2NsaWNrJyApO1xyXG5cdFx0XHR9XHJcblxyXG4gICAgICAgIH1cclxuXHR9XHJcblxyXG5cdC8vIEdldCBnYWxsZXJ5IG5hbWUgZnJvbSBjdXJyZW50IGluc3RhbmNlXHJcblx0ZnVuY3Rpb24gZ2V0R2FsbGVyeUlEKCBpbnN0YW5jZSApIHtcclxuXHRcdHZhciBvcHRzO1xyXG5cclxuXHRcdGlmICggIWluc3RhbmNlICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0b3B0cyA9IGluc3RhbmNlLmN1cnJlbnQgPyBpbnN0YW5jZS5jdXJyZW50Lm9wdHMgOiBpbnN0YW5jZS5vcHRzO1xyXG5cclxuXHRcdHJldHVybiBvcHRzLmhhc2ggfHwgKCBvcHRzLiRvcmlnID8gb3B0cy4kb3JpZy5kYXRhKCAnZmFuY3lib3gnICkgOiAnJyAgKTtcclxuXHR9XHJcblxyXG5cdC8vIFN0YXJ0IHdoZW4gRE9NIGJlY29tZXMgcmVhZHlcclxuICAgICQoZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgdXNlciBoYXMgZGlzYWJsZWQgdGhpcyBtb2R1bGVcclxuXHRcdGlmICggJC5mYW5jeWJveC5kZWZhdWx0cy5oYXNoID09PSBmYWxzZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFVwZGF0ZSBoYXNoIHdoZW4gb3BlbmluZy9jbG9zaW5nIGZhbmN5Qm94XHJcblx0ICAgICQoZG9jdW1lbnQpLm9uKHtcclxuXHRcdFx0J29uSW5pdC5mYicgOiBmdW5jdGlvbiggZSwgaW5zdGFuY2UgKSB7XHJcblx0XHRcdFx0dmFyIHVybCwgZ2FsbGVyeTtcclxuXHJcblx0XHRcdFx0aWYgKCBpbnN0YW5jZS5ncm91cFsgaW5zdGFuY2UuY3VyckluZGV4IF0ub3B0cy5oYXNoID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHVybCAgICAgPSBwYXJzZVVybCgpO1xyXG5cdFx0XHRcdGdhbGxlcnkgPSBnZXRHYWxsZXJ5SUQoIGluc3RhbmNlICk7XHJcblxyXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSBnYWxsZXJ5IHN0YXJ0IGluZGV4IG1hdGNoZXMgaW5kZXggZnJvbSBoYXNoXHJcblx0XHRcdFx0aWYgKCBnYWxsZXJ5ICYmIHVybC5nYWxsZXJ5ICYmIGdhbGxlcnkgPT0gdXJsLmdhbGxlcnkgKSB7XHJcblx0XHRcdFx0XHRpbnN0YW5jZS5jdXJySW5kZXggPSB1cmwuaW5kZXggLSAxO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdCdiZWZvcmVTaG93LmZiJyA6IGZ1bmN0aW9uKCBlLCBpbnN0YW5jZSwgY3VycmVudCApIHtcclxuXHRcdFx0XHR2YXIgZ2FsbGVyeTtcclxuXHJcblx0XHRcdFx0aWYgKCAhY3VycmVudCB8fCBjdXJyZW50Lm9wdHMuaGFzaCA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHQgICAgICAgICAgICBnYWxsZXJ5ID0gZ2V0R2FsbGVyeUlEKCBpbnN0YW5jZSApO1xyXG5cclxuXHQgICAgICAgICAgICAvLyBVcGRhdGUgd2luZG93IGhhc2hcclxuXHQgICAgICAgICAgICBpZiAoIGdhbGxlcnkgJiYgZ2FsbGVyeSAhPT0gJycgKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB3aW5kb3cubG9jYXRpb24uaGFzaC5pbmRleE9mKCBnYWxsZXJ5ICkgPCAwICkge1xyXG5cdFx0ICAgICAgICAgICAgICAgIGluc3RhbmNlLm9wdHMub3JpZ0hhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxuXHRcdCAgICAgICAgICAgIH1cclxuXHJcblx0XHRcdFx0XHRjdXJyZW50SGFzaCA9IGdhbGxlcnkgKyAoIGluc3RhbmNlLmdyb3VwLmxlbmd0aCA+IDEgPyAnLScgKyAoIGN1cnJlbnQuaW5kZXggKyAxICkgOiAnJyApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggJ3JlcGxhY2VTdGF0ZScgaW4gd2luZG93Lmhpc3RvcnkgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggdGltZXJJRCApIHtcclxuXHRcdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVySUQgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0dGltZXJJRCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0d2luZG93Lmhpc3RvcnlbIHNob3VsZENyZWF0ZUhpc3RvcnkgPyAncHVzaFN0YXRlJyA6ICdyZXBsYWNlU3RhdGUnIF0oIHt9ICwgZG9jdW1lbnQudGl0bGUsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyAnIycgKyAgY3VycmVudEhhc2ggKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0dGltZXJJRCA9IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHNob3VsZENyZWF0ZUhpc3RvcnkgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0XHRcdH0sIDMwMCk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uLmhhc2ggPSBjdXJyZW50SGFzaDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH0sXHJcblxyXG5cdFx0XHQnYmVmb3JlQ2xvc2UuZmInIDogZnVuY3Rpb24oIGUsIGluc3RhbmNlLCBjdXJyZW50ICkge1xyXG5cdFx0XHRcdHZhciBnYWxsZXJ5LCBvcmlnSGFzaDtcclxuXHJcblx0XHRcdFx0aWYgKCB0aW1lcklEICkge1xyXG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lcklEICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIGN1cnJlbnQub3B0cy5oYXNoID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGdhbGxlcnkgID0gZ2V0R2FsbGVyeUlEKCBpbnN0YW5jZSApO1xyXG5cdFx0XHRcdG9yaWdIYXNoID0gaW5zdGFuY2UgJiYgaW5zdGFuY2Uub3B0cy5vcmlnSGFzaCA/IGluc3RhbmNlLm9wdHMub3JpZ0hhc2ggOiAnJztcclxuXHJcblx0ICAgICAgICAgICAgLy8gUmVtb3ZlIGhhc2ggZnJvbSBsb2NhdGlvbiBiYXJcclxuXHQgICAgICAgICAgICBpZiAoIGdhbGxlcnkgJiYgZ2FsbGVyeSAhPT0gJycgKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZiAoICdyZXBsYWNlU3RhdGUnIGluIGhpc3RvcnkgKSB7XHJcblx0XHRcdFx0XHRcdHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSgge30gLCBkb2N1bWVudC50aXRsZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArIG9yaWdIYXNoICk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaGFzaCA9IG9yaWdIYXNoO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gS2VlcCBvcmlnaW5hbCBzY3JvbGwgcG9zaXRpb25cclxuXHRcdFx0XHRcdFx0JCggd2luZG93ICkuc2Nyb2xsVG9wKCBpbnN0YW5jZS5zY3JvbGxUb3AgKS5zY3JvbGxMZWZ0KCBpbnN0YW5jZS5zY3JvbGxMZWZ0ICk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdFx0XHRcdGN1cnJlbnRIYXNoID0gbnVsbDtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfSk7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgbmVlZCB0byBjbG9zZSBhZnRlciB1cmwgaGFzIGNoYW5nZWRcclxuXHRcdCQod2luZG93KS5vbignaGFzaGNoYW5nZS5mYicsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgdXJsID0gcGFyc2VVcmwoKTtcclxuXHJcblx0XHRcdGlmICggJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpICkge1xyXG5cdFx0XHRcdGlmICggY3VycmVudEhhc2ggJiYgY3VycmVudEhhc2ggIT09IHVybC5nYWxsZXJ5ICsgJy0nICsgdXJsLmluZGV4ICYmICEoIHVybC5pbmRleCA9PT0gMSAmJiBjdXJyZW50SGFzaCA9PSB1cmwuZ2FsbGVyeSApICkge1xyXG5cdFx0XHRcdFx0Y3VycmVudEhhc2ggPSBudWxsO1xyXG5cclxuXHRcdFx0XHRcdCQuZmFuY3lib3guY2xvc2UoKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCB1cmwuZ2FsbGVyeSAhPT0gJycgKSB7XHJcblx0XHRcdFx0dHJpZ2dlckZyb21VcmwoIHVybCApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBDaGVjayBjdXJyZW50IGhhc2ggYW5kIHRyaWdnZXIgY2xpY2sgZXZlbnQgb24gbWF0Y2hpbmcgZWxlbWVudCB0byBzdGFydCBmYW5jeUJveCwgaWYgbmVlZGVkXHJcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0cmlnZ2VyRnJvbVVybCggcGFyc2VVcmwoKSApO1xyXG5cdFx0fSwgNTApO1xyXG4gICAgfSk7XHJcblxyXG59KCBkb2N1bWVudCwgd2luZG93LCB3aW5kb3cualF1ZXJ5IHx8IGpRdWVyeSApKTtcclxuIiwiLyohXG4qIGpxdWVyeS5pbnB1dG1hc2suYnVuZGxlLmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTcgUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiAzLjMuMTBcbiovXG5cbiFmdW5jdGlvbihtb2R1bGVzKSB7XG4gICAgZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuICAgICAgICBpZiAoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuICAgICAgICB2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gICAgICAgICAgICBpOiBtb2R1bGVJZCxcbiAgICAgICAgICAgIGw6ICExLFxuICAgICAgICAgICAgZXhwb3J0czoge31cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pLCBcbiAgICAgICAgbW9kdWxlLmwgPSAhMCwgbW9kdWxlLmV4cG9ydHM7XG4gICAgfVxuICAgIHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4gICAgX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcywgX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcywgX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gICAgICAgIF9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiAhMSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6ICEwLFxuICAgICAgICAgICAgZ2V0OiBnZXR0ZXJcbiAgICAgICAgfSk7XG4gICAgfSwgX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICAgIHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGUuZGVmYXVsdDtcbiAgICAgICAgfSA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIFwiYVwiLCBnZXR0ZXIpLCBnZXR0ZXI7XG4gICAgfSwgX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpO1xuICAgIH0sIF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCIsIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMyk7XG59KFsgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187XG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yO1xuICAgICFmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgICAgIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbIF9fd2VicGFja19yZXF1aXJlX18oMikgXSwgdm9pZCAwICE9PSAoX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSBmYWN0b3J5KSA/IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXykgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pO1xuICAgIH0oZnVuY3Rpb24oJCkge1xuICAgICAgICByZXR1cm4gJDtcbiAgICB9KTtcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fLCBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH0gOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICAgICFmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgICAgIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbIF9fd2VicGFja19yZXF1aXJlX18oMCksIF9fd2VicGFja19yZXF1aXJlX18oMTApLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKSBdLCBcbiAgICAgICAgdm9pZCAwICE9PSAoX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSBmYWN0b3J5KSA/IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXykgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pO1xuICAgIH0oZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG4gICAgICAgIGZ1bmN0aW9uIElucHV0bWFzayhhbGlhcywgb3B0aW9ucywgaW50ZXJuYWwpIHtcbiAgICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBJbnB1dG1hc2spKSByZXR1cm4gbmV3IElucHV0bWFzayhhbGlhcywgb3B0aW9ucywgaW50ZXJuYWwpO1xuICAgICAgICAgICAgdGhpcy5lbCA9IHVuZGVmaW5lZCwgdGhpcy5ldmVudHMgPSB7fSwgdGhpcy5tYXNrc2V0ID0gdW5kZWZpbmVkLCB0aGlzLnJlZnJlc2hWYWx1ZSA9ICExLCBcbiAgICAgICAgICAgICEwICE9PSBpbnRlcm5hbCAmJiAoJC5pc1BsYWluT2JqZWN0KGFsaWFzKSA/IG9wdGlvbnMgPSBhbGlhcyA6IChvcHRpb25zID0gb3B0aW9ucyB8fCB7fSkuYWxpYXMgPSBhbGlhcywgXG4gICAgICAgICAgICB0aGlzLm9wdHMgPSAkLmV4dGVuZCghMCwge30sIHRoaXMuZGVmYXVsdHMsIG9wdGlvbnMpLCB0aGlzLm5vTWFza3NDYWNoZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWZpbml0aW9ucyAhPT0gdW5kZWZpbmVkLCBcbiAgICAgICAgICAgIHRoaXMudXNlck9wdGlvbnMgPSBvcHRpb25zIHx8IHt9LCB0aGlzLmlzUlRMID0gdGhpcy5vcHRzLm51bWVyaWNJbnB1dCwgcmVzb2x2ZUFsaWFzKHRoaXMub3B0cy5hbGlhcywgb3B0aW9ucywgdGhpcy5vcHRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUFsaWFzKGFsaWFzU3RyLCBvcHRpb25zLCBvcHRzKSB7XG4gICAgICAgICAgICB2YXIgYWxpYXNEZWZpbml0aW9uID0gSW5wdXRtYXNrLnByb3RvdHlwZS5hbGlhc2VzW2FsaWFzU3RyXTtcbiAgICAgICAgICAgIHJldHVybiBhbGlhc0RlZmluaXRpb24gPyAoYWxpYXNEZWZpbml0aW9uLmFsaWFzICYmIHJlc29sdmVBbGlhcyhhbGlhc0RlZmluaXRpb24uYWxpYXMsIHVuZGVmaW5lZCwgb3B0cyksIFxuICAgICAgICAgICAgJC5leHRlbmQoITAsIG9wdHMsIGFsaWFzRGVmaW5pdGlvbiksICQuZXh0ZW5kKCEwLCBvcHRzLCBvcHRpb25zKSwgITApIDogKG51bGwgPT09IG9wdHMubWFzayAmJiAob3B0cy5tYXNrID0gYWxpYXNTdHIpLCBcbiAgICAgICAgICAgICExKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZU1hc2tTZXQob3B0cywgbm9jYWNoZSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVNYXNrKG1hc2ssIG1ldGFkYXRhLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZ2V4TWFzayA9ICExO1xuICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBtYXNrICYmIFwiXCIgIT09IG1hc2sgfHwgKChyZWdleE1hc2sgPSBudWxsICE9PSBvcHRzLnJlZ2V4KSA/IG1hc2sgPSAobWFzayA9IG9wdHMucmVnZXgpLnJlcGxhY2UoL14oXFxeKSguKikoXFwkKSQvLCBcIiQyXCIpIDogKHJlZ2V4TWFzayA9ICEwLCBcbiAgICAgICAgICAgICAgICBtYXNrID0gXCIuKlwiKSksIDEgPT09IG1hc2subGVuZ3RoICYmICExID09PSBvcHRzLmdyZWVkeSAmJiAwICE9PSBvcHRzLnJlcGVhdCAmJiAob3B0cy5wbGFjZWhvbGRlciA9IFwiXCIpLCBcbiAgICAgICAgICAgICAgICBvcHRzLnJlcGVhdCA+IDAgfHwgXCIqXCIgPT09IG9wdHMucmVwZWF0IHx8IFwiK1wiID09PSBvcHRzLnJlcGVhdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVwZWF0U3RhcnQgPSBcIipcIiA9PT0gb3B0cy5yZXBlYXQgPyAwIDogXCIrXCIgPT09IG9wdHMucmVwZWF0ID8gMSA6IG9wdHMucmVwZWF0O1xuICAgICAgICAgICAgICAgICAgICBtYXNrID0gb3B0cy5ncm91cG1hcmtlci5zdGFydCArIG1hc2sgKyBvcHRzLmdyb3VwbWFya2VyLmVuZCArIG9wdHMucXVhbnRpZmllcm1hcmtlci5zdGFydCArIHJlcGVhdFN0YXJ0ICsgXCIsXCIgKyBvcHRzLnJlcGVhdCArIG9wdHMucXVhbnRpZmllcm1hcmtlci5lbmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBtYXNrc2V0RGVmaW5pdGlvbiwgbWFza2RlZktleSA9IHJlZ2V4TWFzayA/IFwicmVnZXhfXCIgKyBvcHRzLnJlZ2V4IDogb3B0cy5udW1lcmljSW5wdXQgPyBtYXNrLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogbWFzaztcbiAgICAgICAgICAgICAgICByZXR1cm4gSW5wdXRtYXNrLnByb3RvdHlwZS5tYXNrc0NhY2hlW21hc2tkZWZLZXldID09PSB1bmRlZmluZWQgfHwgITAgPT09IG5vY2FjaGUgPyAobWFza3NldERlZmluaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2s6IG1hc2ssXG4gICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbjogSW5wdXRtYXNrLnByb3RvdHlwZS5hbmFseXNlTWFzayhtYXNrLCByZWdleE1hc2ssIG9wdHMpLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZFBvc2l0aW9uczoge30sXG4gICAgICAgICAgICAgICAgICAgIF9idWZmZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHRlc3RzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhLFxuICAgICAgICAgICAgICAgICAgICBtYXNrTGVuZ3RoOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICB9LCAhMCAhPT0gbm9jYWNoZSAmJiAoSW5wdXRtYXNrLnByb3RvdHlwZS5tYXNrc0NhY2hlW21hc2tkZWZLZXldID0gbWFza3NldERlZmluaXRpb24sIFxuICAgICAgICAgICAgICAgIG1hc2tzZXREZWZpbml0aW9uID0gJC5leHRlbmQoITAsIHt9LCBJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0pKSkgOiBtYXNrc2V0RGVmaW5pdGlvbiA9ICQuZXh0ZW5kKCEwLCB7fSwgSW5wdXRtYXNrLnByb3RvdHlwZS5tYXNrc0NhY2hlW21hc2tkZWZLZXldKSwgXG4gICAgICAgICAgICAgICAgbWFza3NldERlZmluaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMubWFzaykgJiYgKG9wdHMubWFzayA9IG9wdHMubWFzayhvcHRzKSksICQuaXNBcnJheShvcHRzLm1hc2spKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMubWFzay5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMua2VlcFN0YXRpYyA9IG51bGwgPT09IG9wdHMua2VlcFN0YXRpYyB8fCBvcHRzLmtlZXBTdGF0aWM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbHRNYXNrID0gb3B0cy5ncm91cG1hcmtlci5zdGFydDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuZWFjaChvcHRzLm51bWVyaWNJbnB1dCA/IG9wdHMubWFzay5yZXZlcnNlKCkgOiBvcHRzLm1hc2ssIGZ1bmN0aW9uKG5keCwgbXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRNYXNrLmxlbmd0aCA+IDEgJiYgKGFsdE1hc2sgKz0gb3B0cy5ncm91cG1hcmtlci5lbmQgKyBvcHRzLmFsdGVybmF0b3JtYXJrZXIgKyBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0KSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBtc2subWFzayA9PT0gdW5kZWZpbmVkIHx8ICQuaXNGdW5jdGlvbihtc2subWFzaykgPyBhbHRNYXNrICs9IG1zayA6IGFsdE1hc2sgKz0gbXNrLm1hc2s7XG4gICAgICAgICAgICAgICAgICAgIH0pLCBhbHRNYXNrICs9IG9wdHMuZ3JvdXBtYXJrZXIuZW5kLCBnZW5lcmF0ZU1hc2soYWx0TWFzaywgb3B0cy5tYXNrLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0cy5tYXNrID0gb3B0cy5tYXNrLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9wdHMubWFzayAmJiBvcHRzLm1hc2subWFzayAhPT0gdW5kZWZpbmVkICYmICEkLmlzRnVuY3Rpb24ob3B0cy5tYXNrLm1hc2spID8gZ2VuZXJhdGVNYXNrKG9wdHMubWFzay5tYXNrLCBvcHRzLm1hc2ssIG9wdHMpIDogZ2VuZXJhdGVNYXNrKG9wdHMubWFzaywgb3B0cy5tYXNrLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYXNrU2NvcGUoYWN0aW9uT2JqLCBtYXNrc2V0LCBvcHRzKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRNYXNrVGVtcGxhdGUoYmFzZU9uSW5wdXQsIG1pbmltYWxQb3MsIGluY2x1ZGVNb2RlKSB7XG4gICAgICAgICAgICAgICAgbWluaW1hbFBvcyA9IG1pbmltYWxQb3MgfHwgMDtcbiAgICAgICAgICAgICAgICB2YXIgbmR4SW50bHpyLCB0ZXN0LCB0ZXN0UG9zLCBtYXNrVGVtcGxhdGUgPSBbXSwgcG9zID0gMCwgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICEwID09PSBiYXNlT25JbnB1dCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSA/ICh0ZXN0ID0gKHRlc3RQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSkubWF0Y2gsIFxuICAgICAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKSwgbWFza1RlbXBsYXRlLnB1c2goITAgPT09IGluY2x1ZGVNb2RlID8gdGVzdFBvcy5pbnB1dCA6ICExID09PSBpbmNsdWRlTW9kZSA/IHRlc3QubmF0aXZlRGVmIDogZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSkpIDogKHRlc3QgPSAodGVzdFBvcyA9IGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgcG9zIC0gMSkpLm1hdGNoLCBcbiAgICAgICAgICAgICAgICAgICAgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCksICghMSA9PT0gb3B0cy5qaXRNYXNraW5nIHx8IHBvcyA8IGx2cCB8fCBcIm51bWJlclwiID09IHR5cGVvZiBvcHRzLmppdE1hc2tpbmcgJiYgaXNGaW5pdGUob3B0cy5qaXRNYXNraW5nKSAmJiBvcHRzLmppdE1hc2tpbmcgPiBwb3MpICYmIG1hc2tUZW1wbGF0ZS5wdXNoKCExID09PSBpbmNsdWRlTW9kZSA/IHRlc3QubmF0aXZlRGVmIDogZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSkpLCBcbiAgICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoKG1heExlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IHBvcyA8IG1heExlbmd0aCkgJiYgKG51bGwgIT09IHRlc3QuZm4gfHwgXCJcIiAhPT0gdGVzdC5kZWYpIHx8IG1pbmltYWxQb3MgPiBwb3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiID09PSBtYXNrVGVtcGxhdGVbbWFza1RlbXBsYXRlLmxlbmd0aCAtIDFdICYmIG1hc2tUZW1wbGF0ZS5wb3AoKSwgZ2V0TWFza1NldCgpLm1hc2tMZW5ndGggPSBwb3MgKyAxLCBcbiAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRNYXNrU2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXRNYXNrU2V0KHNvZnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFza3NldCA9IGdldE1hc2tTZXQoKTtcbiAgICAgICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlciA9IHVuZGVmaW5lZCwgITAgIT09IHNvZnQgJiYgKG1hc2tzZXQudmFsaWRQb3NpdGlvbnMgPSB7fSwgbWFza3NldC5wID0gMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRMYXN0VmFsaWRQb3NpdGlvbihjbG9zZXN0VG8sIHN0cmljdCwgdmFsaWRQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmVmb3JlID0gLTEsIGFmdGVyID0gLTEsIHZhbGlkcyA9IHZhbGlkUG9zaXRpb25zIHx8IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucztcbiAgICAgICAgICAgICAgICBjbG9zZXN0VG8gPT09IHVuZGVmaW5lZCAmJiAoY2xvc2VzdFRvID0gLTEpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHBvc05keCBpbiB2YWxpZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBzTmR4ID0gcGFyc2VJbnQocG9zTmR4KTtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRzW3BzTmR4XSAmJiAoc3RyaWN0IHx8ICEwICE9PSB2YWxpZHNbcHNOZHhdLmdlbmVyYXRlZElucHV0KSAmJiAocHNOZHggPD0gY2xvc2VzdFRvICYmIChiZWZvcmUgPSBwc05keCksIFxuICAgICAgICAgICAgICAgICAgICBwc05keCA+PSBjbG9zZXN0VG8gJiYgKGFmdGVyID0gcHNOZHgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xICE9PSBiZWZvcmUgJiYgY2xvc2VzdFRvIC0gYmVmb3JlID4gMSB8fCBhZnRlciA8IGNsb3Nlc3RUbyA/IGJlZm9yZSA6IGFmdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gc3RyaXBWYWxpZFBvc2l0aW9ucyhzdGFydCwgZW5kLCBub2NoZWNrLCBzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSwgc3RhcnRQb3MgPSBzdGFydCwgcG9zaXRpb25zQ2xvbmUgPSAkLmV4dGVuZCghMCwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksIG5lZWRzVmFsaWRhdGlvbiA9ICExO1xuICAgICAgICAgICAgICAgIGZvciAoZ2V0TWFza1NldCgpLnAgPSBzdGFydCwgaSA9IGVuZCAtIDE7IGkgPj0gc3RhcnRQb3M7IGktLSkgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldICE9PSB1bmRlZmluZWQgJiYgKCEwICE9PSBub2NoZWNrICYmICghZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldLm1hdGNoLm9wdGlvbmFsaXR5ICYmIGZ1bmN0aW9uKHBvcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zTWF0Y2ggPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc01hdGNoICE9PSB1bmRlZmluZWQgJiYgbnVsbCA9PT0gcG9zTWF0Y2gubWF0Y2guZm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2TWF0Y2ggPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV0sIG5leHRNYXRjaCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2TWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBuZXh0TWF0Y2ggIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgfShpKSB8fCAhMSA9PT0gb3B0cy5jYW5DbGVhclBvc2l0aW9uKGdldE1hc2tTZXQoKSwgaSwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgc3RyaWN0LCBvcHRzKSkgfHwgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSk7XG4gICAgICAgICAgICAgICAgZm9yIChyZXNldE1hc2tTZXQoITApLCBpID0gc3RhcnRQb3MgKyAxOyBpIDw9IGdldExhc3RWYWxpZFBvc2l0aW9uKCk7ICkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDtnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbc3RhcnRQb3NdICE9PSB1bmRlZmluZWQ7ICkgc3RhcnRQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCBzdGFydFBvcyAmJiAoaSA9IHN0YXJ0UG9zICsgMSksIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSA9PT0gdW5kZWZpbmVkICYmIGlzTWFzayhpKSkgaSsrOyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZ2V0VGVzdFRlbXBsYXRlKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgITEgPT09IG5lZWRzVmFsaWRhdGlvbiAmJiBwb3NpdGlvbnNDbG9uZVtzdGFydFBvc10gJiYgcG9zaXRpb25zQ2xvbmVbc3RhcnRQb3NdLm1hdGNoLmRlZiA9PT0gdC5tYXRjaC5kZWYgPyAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3N0YXJ0UG9zXSA9ICQuZXh0ZW5kKCEwLCB7fSwgcG9zaXRpb25zQ2xvbmVbc3RhcnRQb3NdKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbc3RhcnRQb3NdLmlucHV0ID0gdC5pbnB1dCwgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBpKyspIDogcG9zaXRpb25DYW5NYXRjaERlZmluaXRpb24oc3RhcnRQb3MsIHQubWF0Y2guZGVmKSA/ICExICE9PSBpc1ZhbGlkKHN0YXJ0UG9zLCB0LmlucHV0IHx8IGdldFBsYWNlaG9sZGVyKGkpLCAhMCkgJiYgKGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgaSsrLCBuZWVkc1ZhbGlkYXRpb24gPSAhMCkgOiBpc01hc2soaSkgfHwgKGkrKywgc3RhcnRQb3MtLSksIHN0YXJ0UG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzZXRNYXNrU2V0KCEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRldGVybWluZVRlc3RUZW1wbGF0ZSh0ZXN0cywgZ3Vlc3NOZXh0QmVzdCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHRlc3RQb3MsIHRlc3RQb3NpdGlvbnMgPSB0ZXN0cywgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgbHZUZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0gfHwgZ2V0VGVzdHMoMClbMF0sIGx2VGVzdEFsdEFyciA9IGx2VGVzdC5hbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gbHZUZXN0LmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSA6IFtdLCBuZHggPSAwOyBuZHggPCB0ZXN0UG9zaXRpb25zLmxlbmd0aCAmJiAoISgodGVzdFBvcyA9IHRlc3RQb3NpdGlvbnNbbmR4XSkubWF0Y2ggJiYgKG9wdHMuZ3JlZWR5ICYmICEwICE9PSB0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciB8fCAoITEgPT09IHRlc3RQb3MubWF0Y2gub3B0aW9uYWxpdHkgfHwgITEgPT09IHRlc3RQb3MubWF0Y2gubmV3QmxvY2tNYXJrZXIpICYmICEwICE9PSB0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllcikgJiYgKGx2VGVzdC5hbHRlcm5hdGlvbiA9PT0gdW5kZWZpbmVkIHx8IGx2VGVzdC5hbHRlcm5hdGlvbiAhPT0gdGVzdFBvcy5hbHRlcm5hdGlvbiB8fCB0ZXN0UG9zLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSAhPT0gdW5kZWZpbmVkICYmIGNoZWNrQWx0ZXJuYXRpb25NYXRjaCh0ZXN0UG9zLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSwgbHZUZXN0QWx0QXJyKSkpIHx8ICEwID09PSBndWVzc05leHRCZXN0ICYmIChudWxsICE9PSB0ZXN0UG9zLm1hdGNoLmZuIHx8IC9bMC05YS1iQS1aXS8udGVzdCh0ZXN0UG9zLm1hdGNoLmRlZikpKTsgbmR4KyspIDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGVzdFBvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgdHN0UHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gfHwgZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKGdldFRlc3RzKHBvcywgbmR4SW50bHpyID8gbmR4SW50bHpyLnNsaWNlKCkgOiBuZHhJbnRsenIsIHRzdFBzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRUZXN0KHBvcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSA/IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdIDogZ2V0VGVzdHMocG9zKVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uKHBvcywgZGVmKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdmFsaWQgPSAhMSwgdGVzdHMgPSBnZXRUZXN0cyhwb3MpLCB0bmR4ID0gMDsgdG5keCA8IHRlc3RzLmxlbmd0aDsgdG5keCsrKSBpZiAodGVzdHNbdG5keF0ubWF0Y2ggJiYgdGVzdHNbdG5keF0ubWF0Y2guZGVmID09PSBkZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFRlc3RzKHBvcywgbmR4SW50bHpyLCB0c3RQcykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVUZXN0RnJvbVRva2VuKG1hc2tUb2tlbiwgbmR4SW5pdGlhbGl6ZXIsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZU1hdGNoKG1hdGNoLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNGaXJzdE1hdGNoKGxhdGVzdE1hdGNoLCB0b2tlbkdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0TWF0Y2ggPSAwID09PSAkLmluQXJyYXkobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXAubWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TWF0Y2ggfHwgJC5lYWNoKHRva2VuR3JvdXAubWF0Y2hlcywgZnVuY3Rpb24obmR4LCBtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoITAgPT09IG1hdGNoLmlzUXVhbnRpZmllciAmJiAoZmlyc3RNYXRjaCA9IGlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgdG9rZW5Hcm91cC5tYXRjaGVzW25keCAtIDFdKSkpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZmlyc3RNYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVOZHhJbml0aWFsaXplcihwb3MsIGFsdGVybmF0ZU5keCwgdGFyZ2V0QWx0ZXJuYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmVzdE1hdGNoLCBpbmRleFBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BvcyAtIDFdICYmIHRhcmdldEFsdGVybmF0aW9uICYmIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdKSBmb3IgKHZhciB2cEFsdGVybmF0aW9uID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BvcyAtIDFdLmxvY2F0b3IsIHRwQWx0ZXJuYXRpb24gPSBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXVswXS5sb2NhdG9yLCBpID0gMDsgaSA8IHRhcmdldEFsdGVybmF0aW9uOyBpKyspIGlmICh2cEFsdGVybmF0aW9uW2ldICE9PSB0cEFsdGVybmF0aW9uW2ldKSByZXR1cm4gdnBBbHRlcm5hdGlvbi5zbGljZSh0YXJnZXRBbHRlcm5hdGlvbiArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gfHwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pICYmICQuZWFjaChnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSB8fCBbIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdIF0sIGZ1bmN0aW9uKG5keCwgbG1udCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0ZXJuYXRpb24gPSB0YXJnZXRBbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gdGFyZ2V0QWx0ZXJuYXRpb24gOiBsbW50LmFsdGVybmF0aW9uLCBuZHhQb3MgPSBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dICE9PSB1bmRlZmluZWQgPyBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuaW5kZXhPZihhbHRlcm5hdGVOZHgpIDogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpbmRleFBvcyA9PT0gdW5kZWZpbmVkIHx8IG5keFBvcyA8IGluZGV4UG9zKSAmJiAtMSAhPT0gbmR4UG9zICYmIChiZXN0TWF0Y2ggPSBsbW50LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhQb3MgPSBuZHhQb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBiZXN0TWF0Y2ggPyBiZXN0TWF0Y2gubG9jYXRvci5zbGljZSgodGFyZ2V0QWx0ZXJuYXRpb24gIT09IHVuZGVmaW5lZCA/IHRhcmdldEFsdGVybmF0aW9uIDogYmVzdE1hdGNoLmFsdGVybmF0aW9uKSArIDEpIDogdGFyZ2V0QWx0ZXJuYXRpb24gIT09IHVuZGVmaW5lZCA/IHJlc29sdmVOZHhJbml0aWFsaXplcihwb3MsIGFsdGVybmF0ZU5keCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA+IDFlNCkgdGhyb3cgXCJJbnB1dG1hc2s6IFRoZXJlIGlzIHByb2JhYmx5IGFuIGVycm9yIGluIHlvdXIgbWFzayBkZWZpbml0aW9uIG9yIGluIHRoZSBjb2RlLiBDcmVhdGUgYW4gaXNzdWUgb24gZ2l0aHViIHdpdGggYW4gZXhhbXBsZSBvZiB0aGUgbWFzayB5b3UgYXJlIHVzaW5nLiBcIiArIGdldE1hc2tTZXQoKS5tYXNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RQb3MgPT09IHBvcyAmJiBtYXRjaC5tYXRjaGVzID09PSB1bmRlZmluZWQpIHJldHVybiBtYXRjaGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoOiBtYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdG9yOiBsb29wTmR4LnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZDogY2FjaGVEZXBlbmRlbmN5XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgITA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gubWF0Y2hlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoLmlzR3JvdXAgJiYgcXVhbnRpZmllclJlY3Vyc2UgIT09IG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9IGhhbmRsZU1hdGNoKG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShtYXRjaCwgbWFza1Rva2VuLm1hdGNoZXMpICsgMV0sIGxvb3BOZHgpKSByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC5pc09wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25hbFRva2VuID0gbWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9IHJlc29sdmVUZXN0RnJvbVRva2VuKG1hdGNoLCBuZHhJbml0aWFsaXplciwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF0ZXN0TWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ubWF0Y2gsICFpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIG9wdGlvbmFsVG9rZW4pKSByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRTdG9wID0gITAsIHRlc3RQb3MgPSBwb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFsdE1hdGNoZXMsIGFsdGVybmF0ZVRva2VuID0gbWF0Y2gsIG1hbHRlcm5hdGVNYXRjaGVzID0gW10sIGN1cnJlbnRNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgpLCBsb29wTmR4Q250ID0gbG9vcE5keC5sZW5ndGgsIGFsdEluZGV4ID0gbmR4SW5pdGlhbGl6ZXIubGVuZ3RoID4gMCA/IG5keEluaXRpYWxpemVyLnNoaWZ0KCkgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC0xID09PSBhbHRJbmRleCB8fCBcInN0cmluZ1wiID09IHR5cGVvZiBhbHRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFtbmR4LCBjdXJyZW50UG9zID0gdGVzdFBvcywgbmR4SW5pdGlhbGl6ZXJDbG9uZSA9IG5keEluaXRpYWxpemVyLnNsaWNlKCksIGFsdEluZGV4QXJyID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgYWx0SW5kZXgpIGFsdEluZGV4QXJyID0gYWx0SW5kZXguc3BsaXQoXCIsXCIpOyBlbHNlIGZvciAoYW1uZHggPSAwOyBhbW5keCA8IGFsdGVybmF0ZVRva2VuLm1hdGNoZXMubGVuZ3RoOyBhbW5keCsrKSBhbHRJbmRleEFyci5wdXNoKGFtbmR4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keCA9IDA7IG5keCA8IGFsdEluZGV4QXJyLmxlbmd0aDsgbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW1uZHggPSBwYXJzZUludChhbHRJbmRleEFycltuZHhdKSwgbWF0Y2hlcyA9IFtdLCBuZHhJbml0aWFsaXplciA9IHJlc29sdmVOZHhJbml0aWFsaXplcih0ZXN0UG9zLCBhbW5keCwgbG9vcE5keENudCkgfHwgbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMCAhPT0gKG1hdGNoID0gaGFuZGxlTWF0Y2goYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlc1thbW5keF0gfHwgbWFza1Rva2VuLm1hdGNoZXNbYW1uZHhdLCBbIGFtbmR4IF0uY29uY2F0KGxvb3BOZHgpLCBxdWFudGlmaWVyUmVjdXJzZSkgfHwgbWF0Y2gpICYmIG1hdGNoICE9PSB1bmRlZmluZWQgJiYgYWx0SW5kZXhBcnJbYWx0SW5kZXhBcnIubGVuZ3RoIC0gMV0gPCBhbHRlcm5hdGVUb2tlbi5tYXRjaGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnRuZHggPSAkLmluQXJyYXkobWF0Y2gsIG1hc2tUb2tlbi5tYXRjaGVzKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbi5tYXRjaGVzLmxlbmd0aCA+IG50bmR4ICYmIChtYXRjaCA9IGhhbmRsZU1hdGNoKG1hc2tUb2tlbi5tYXRjaGVzW250bmR4XSwgWyBudG5keCBdLmNvbmNhdChsb29wTmR4LnNsaWNlKDEsIGxvb3BOZHgubGVuZ3RoKSksIHF1YW50aWZpZXJSZWN1cnNlKSkgJiYgKGFsdEluZGV4QXJyLnB1c2gobnRuZHgudG9TdHJpbmcoKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gobWF0Y2hlcywgZnVuY3Rpb24obmR4LCBsbW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbW50LmFsdGVybmF0aW9uID0gbG9vcE5keC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbHRNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgpLCB0ZXN0UG9zID0gY3VycmVudFBvcywgbWF0Y2hlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keDEgPSAwOyBuZHgxIDwgbWFsdE1hdGNoZXMubGVuZ3RoOyBuZHgxKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdE1hdGNoID0gbWFsdE1hdGNoZXNbbmR4MV0sIGRyb3BNYXRjaCA9ICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRNYXRjaC5hbHRlcm5hdGlvbiA9IGFsdE1hdGNoLmFsdGVybmF0aW9uIHx8IGxvb3BOZHhDbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keDIgPSAwOyBuZHgyIDwgbWFsdGVybmF0ZU1hdGNoZXMubGVuZ3RoOyBuZHgyKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRNYXRjaDIgPSBtYWx0ZXJuYXRlTWF0Y2hlc1tuZHgyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiICE9IHR5cGVvZiBhbHRJbmRleCB8fCAtMSAhPT0gJC5pbkFycmF5KGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCksIGFsdEluZGV4QXJyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmdW5jdGlvbihzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlLm1hdGNoLm5hdGl2ZURlZiA9PT0gdGFyZ2V0Lm1hdGNoLm5hdGl2ZURlZiB8fCBzb3VyY2UubWF0Y2guZGVmID09PSB0YXJnZXQubWF0Y2gubmF0aXZlRGVmIHx8IHNvdXJjZS5tYXRjaC5uYXRpdmVEZWYgPT09IHRhcmdldC5tYXRjaC5kZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfShhbHRNYXRjaCwgYWx0TWF0Y2gyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wTWF0Y2ggPSAhMCwgYWx0TWF0Y2guYWx0ZXJuYXRpb24gPT09IGFsdE1hdGNoMi5hbHRlcm5hdGlvbiAmJiAtMSA9PT0gYWx0TWF0Y2gyLmxvY2F0b3JbYWx0TWF0Y2gyLmFsdGVybmF0aW9uXS50b1N0cmluZygpLmluZGV4T2YoYWx0TWF0Y2gubG9jYXRvclthbHRNYXRjaC5hbHRlcm5hdGlvbl0pICYmIChhbHRNYXRjaDIubG9jYXRvclthbHRNYXRjaDIuYWx0ZXJuYXRpb25dID0gYWx0TWF0Y2gyLmxvY2F0b3JbYWx0TWF0Y2gyLmFsdGVybmF0aW9uXSArIFwiLFwiICsgYWx0TWF0Y2gubG9jYXRvclthbHRNYXRjaC5hbHRlcm5hdGlvbl0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRNYXRjaDIuYWx0ZXJuYXRpb24gPSBhbHRNYXRjaC5hbHRlcm5hdGlvbiksIGFsdE1hdGNoLm1hdGNoLm5hdGl2ZURlZiA9PT0gYWx0TWF0Y2gyLm1hdGNoLmRlZiAmJiAoYWx0TWF0Y2gubG9jYXRvclthbHRNYXRjaC5hbHRlcm5hdGlvbl0gPSBhbHRNYXRjaDIubG9jYXRvclthbHRNYXRjaDIuYWx0ZXJuYXRpb25dLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdGVybmF0ZU1hdGNoZXMuc3BsaWNlKG1hbHRlcm5hdGVNYXRjaGVzLmluZGV4T2YoYWx0TWF0Y2gyKSwgMSwgYWx0TWF0Y2gpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRNYXRjaC5tYXRjaC5kZWYgPT09IGFsdE1hdGNoMi5tYXRjaC5kZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcE1hdGNoID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnVuY3Rpb24oc291cmNlLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IHNvdXJjZS5tYXRjaC5mbiAmJiBudWxsICE9PSB0YXJnZXQubWF0Y2guZm4gJiYgdGFyZ2V0Lm1hdGNoLmZuLnRlc3Qoc291cmNlLm1hdGNoLmRlZiwgZ2V0TWFza1NldCgpLCBwb3MsICExLCBvcHRzLCAhMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfShhbHRNYXRjaCwgYWx0TWF0Y2gyKSB8fCBmdW5jdGlvbihzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCAhPT0gc291cmNlLm1hdGNoLmZuICYmIG51bGwgIT09IHRhcmdldC5tYXRjaC5mbiAmJiB0YXJnZXQubWF0Y2guZm4udGVzdChzb3VyY2UubWF0Y2guZGVmLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXCIpLCBnZXRNYXNrU2V0KCksIHBvcywgITEsIG9wdHMsICExKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KGFsdE1hdGNoLCBhbHRNYXRjaDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hdGNoLmFsdGVybmF0aW9uID09PSBhbHRNYXRjaDIuYWx0ZXJuYXRpb24gJiYgLTEgPT09IGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuaW5kZXhPZihhbHRNYXRjaDIubG9jYXRvclthbHRNYXRjaDIuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCJcIilbMF0pICYmIChhbHRNYXRjaC5uYSA9IGFsdE1hdGNoLm5hIHx8IGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtMSA9PT0gYWx0TWF0Y2gubmEuaW5kZXhPZihhbHRNYXRjaC5sb2NhdG9yW2FsdE1hdGNoLmFsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiXCIpWzBdKSAmJiAoYWx0TWF0Y2gubmEgPSBhbHRNYXRjaC5uYSArIFwiLFwiICsgYWx0TWF0Y2gubG9jYXRvclthbHRNYXRjaDIuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCJcIilbMF0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcE1hdGNoID0gITAsIGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dID0gYWx0TWF0Y2gyLmxvY2F0b3JbYWx0TWF0Y2gyLmFsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiXCIpWzBdICsgXCIsXCIgKyBhbHRNYXRjaC5sb2NhdG9yW2FsdE1hdGNoLmFsdGVybmF0aW9uXSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbHRlcm5hdGVNYXRjaGVzLnNwbGljZShtYWx0ZXJuYXRlTWF0Y2hlcy5pbmRleE9mKGFsdE1hdGNoMiksIDAsIGFsdE1hdGNoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wTWF0Y2ggfHwgbWFsdGVybmF0ZU1hdGNoZXMucHVzaChhbHRNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgYWx0SW5kZXggJiYgKG1hbHRlcm5hdGVNYXRjaGVzID0gJC5tYXAobWFsdGVybmF0ZU1hdGNoZXMsIGZ1bmN0aW9uKGxtbnQsIG5keCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShuZHgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRlcm5hdGlvbiA9IGxtbnQuYWx0ZXJuYXRpb24sIGFsdExvY0FyciA9IGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5zcGxpdChcIixcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0gPSB1bmRlZmluZWQsIGxtbnQuYWx0ZXJuYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGFsbmR4ID0gMDsgYWxuZHggPCBhbHRMb2NBcnIubGVuZ3RoOyBhbG5keCsrKSAtMSAhPT0gJC5pbkFycmF5KGFsdExvY0FyclthbG5keF0sIGFsdEluZGV4QXJyKSAmJiAobG1udC5sb2NhdG9yW2FsdGVybmF0aW9uXSAhPT0gdW5kZWZpbmVkID8gKGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0gKz0gXCIsXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dICs9IGFsdExvY0FyclthbG5keF0pIDogbG1udC5sb2NhdG9yW2FsdGVybmF0aW9uXSA9IHBhcnNlSW50KGFsdExvY0FyclthbG5keF0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG1udC5hbHRlcm5hdGlvbiA9IGFsdGVybmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIGxtbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCBtYXRjaGVzID0gY3VycmVudE1hdGNoZXMuY29uY2F0KG1hbHRlcm5hdGVNYXRjaGVzKSwgdGVzdFBvcyA9IHBvcywgaW5zZXJ0U3RvcCA9IG1hdGNoZXMubGVuZ3RoID4gMCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IG1hbHRlcm5hdGVNYXRjaGVzLmxlbmd0aCA+IDAsIG5keEluaXRpYWxpemVyID0gbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgbWF0Y2ggPSBoYW5kbGVNYXRjaChhbHRlcm5hdGVUb2tlbi5tYXRjaGVzW2FsdEluZGV4XSB8fCBtYXNrVG9rZW4ubWF0Y2hlc1thbHRJbmRleF0sIFsgYWx0SW5kZXggXS5jb25jYXQobG9vcE5keCksIHF1YW50aWZpZXJSZWN1cnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC5pc1F1YW50aWZpZXIgJiYgcXVhbnRpZmllclJlY3Vyc2UgIT09IG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShtYXRjaCwgbWFza1Rva2VuLm1hdGNoZXMpIC0gMV0pIGZvciAodmFyIHF0ID0gbWF0Y2gsIHFuZHggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IDA7IHFuZHggPCAoaXNOYU4ocXQucXVhbnRpZmllci5tYXgpID8gcW5keCArIDEgOiBxdC5xdWFudGlmaWVyLm1heCkgJiYgdGVzdFBvcyA8PSBwb3M7IHFuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5Hcm91cCA9IG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShxdCwgbWFza1Rva2VuLm1hdGNoZXMpIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9IGhhbmRsZU1hdGNoKHRva2VuR3JvdXAsIFsgcW5keCBdLmNvbmNhdChsb29wTmR4KSwgdG9rZW5Hcm91cCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXRlc3RNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5tYXRjaCwgbGF0ZXN0TWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyID0gcW5keCA+IHF0LnF1YW50aWZpZXIubWluIC0gMSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHFuZHggPiBxdC5xdWFudGlmaWVyLm1pbiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0U3RvcCA9ICEwLCB0ZXN0UG9zID0gcG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaCA9IHJlc29sdmVUZXN0RnJvbVRva2VuKG1hdGNoLCBuZHhJbml0aWFsaXplciwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpKSByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGVzdFBvcysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHRuZHggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IDA7IHRuZHggPCBtYXNrVG9rZW4ubWF0Y2hlcy5sZW5ndGg7IHRuZHgrKykgaWYgKCEwICE9PSBtYXNrVG9rZW4ubWF0Y2hlc1t0bmR4XS5pc1F1YW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGhhbmRsZU1hdGNoKG1hc2tUb2tlbi5tYXRjaGVzW3RuZHhdLCBbIHRuZHggXS5jb25jYXQobG9vcE5keCksIHF1YW50aWZpZXJSZWN1cnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiB0ZXN0UG9zID09PSBwb3MpIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0UG9zID4gcG9zKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBmaWx0ZXJUZXN0cyh0ZXN0cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5rZWVwU3RhdGljICYmIHBvcyA+IDAgJiYgdGVzdHMubGVuZ3RoID4gMSArIChcIlwiID09PSB0ZXN0c1t0ZXN0cy5sZW5ndGggLSAxXS5tYXRjaC5kZWYgPyAxIDogMCkgJiYgITAgIT09IHRlc3RzWzBdLm1hdGNoLm9wdGlvbmFsaXR5ICYmICEwICE9PSB0ZXN0c1swXS5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgJiYgbnVsbCA9PT0gdGVzdHNbMF0ubWF0Y2guZm4gJiYgIS9bMC05YS1iQS1aXS8udGVzdCh0ZXN0c1swXS5tYXRjaC5kZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BvcyAtIDFdID09PSB1bmRlZmluZWQpIHJldHVybiBbIGRldGVybWluZVRlc3RUZW1wbGF0ZSh0ZXN0cykgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV0uYWx0ZXJuYXRpb24gPT09IHRlc3RzWzBdLmFsdGVybmF0aW9uKSByZXR1cm4gWyBkZXRlcm1pbmVUZXN0VGVtcGxhdGUodGVzdHMpIF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BvcyAtIDFdKSByZXR1cm4gWyBkZXRlcm1pbmVUZXN0VGVtcGxhdGUodGVzdHMpIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlc3RzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbGF0ZXN0TWF0Y2gsIG1hc2tUb2tlbnMgPSBnZXRNYXNrU2V0KCkubWFza1Rva2VuLCB0ZXN0UG9zID0gbmR4SW50bHpyID8gdHN0UHMgOiAwLCBuZHhJbml0aWFsaXplciA9IG5keEludGx6ciA/IG5keEludGx6ci5zbGljZSgpIDogWyAwIF0sIG1hdGNoZXMgPSBbXSwgaW5zZXJ0U3RvcCA9ICExLCBjYWNoZURlcGVuZGVuY3kgPSBuZHhJbnRsenIgPyBuZHhJbnRsenIuam9pbihcIlwiKSA6IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKHBvcyA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZHhJbnRsenIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdGVzdCwgcHJldmlvdXNQb3MgPSBwb3MgLSAxOyAodGVzdCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twcmV2aW91c1Bvc10gfHwgZ2V0TWFza1NldCgpLnRlc3RzW3ByZXZpb3VzUG9zXSkgPT09IHVuZGVmaW5lZCAmJiBwcmV2aW91c1BvcyA+IC0xOyApIHByZXZpb3VzUG9zLS07XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0ICE9PSB1bmRlZmluZWQgJiYgcHJldmlvdXNQb3MgPiAtMSAmJiAobmR4SW5pdGlhbGl6ZXIgPSBmdW5jdGlvbih0ZXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdG9yID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuaXNBcnJheSh0ZXN0cykgfHwgKHRlc3RzID0gWyB0ZXN0cyBdKSwgdGVzdHMubGVuZ3RoID4gMCAmJiAodGVzdHNbMF0uYWx0ZXJuYXRpb24gPT09IHVuZGVmaW5lZCA/IDAgPT09IChsb2NhdG9yID0gZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKHRlc3RzLnNsaWNlKCkpLmxvY2F0b3Iuc2xpY2UoKSkubGVuZ3RoICYmIChsb2NhdG9yID0gdGVzdHNbMF0ubG9jYXRvci5zbGljZSgpKSA6ICQuZWFjaCh0ZXN0cywgZnVuY3Rpb24obmR4LCB0c3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiXCIgIT09IHRzdC5kZWYpIGlmICgwID09PSBsb2NhdG9yLmxlbmd0aCkgbG9jYXRvciA9IHRzdC5sb2NhdG9yLnNsaWNlKCk7IGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2NhdG9yLmxlbmd0aDsgaSsrKSB0c3QubG9jYXRvcltpXSAmJiAtMSA9PT0gbG9jYXRvcltpXS50b1N0cmluZygpLmluZGV4T2YodHN0LmxvY2F0b3JbaV0pICYmIChsb2NhdG9yW2ldICs9IFwiLFwiICsgdHN0LmxvY2F0b3JbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgbG9jYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0odGVzdCksIGNhY2hlRGVwZW5kZW5jeSA9IG5keEluaXRpYWxpemVyLmpvaW4oXCJcIiksIHRlc3RQb3MgPSBwcmV2aW91c1Bvcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS50ZXN0c1twb3NdICYmIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdWzBdLmNkID09PSBjYWNoZURlcGVuZGVuY3kpIHJldHVybiBmaWx0ZXJUZXN0cyhnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG10bmR4ID0gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKTsgbXRuZHggPCBtYXNrVG9rZW5zLmxlbmd0aCAmJiAhKHJlc29sdmVUZXN0RnJvbVRva2VuKG1hc2tUb2tlbnNbbXRuZHhdLCBuZHhJbml0aWFsaXplciwgWyBtdG5keCBdKSAmJiB0ZXN0UG9zID09PSBwb3MgfHwgdGVzdFBvcyA+IHBvcyk7IG10bmR4KyspIDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwID09PSBtYXRjaGVzLmxlbmd0aCB8fCBpbnNlcnRTdG9wKSAmJiBtYXRjaGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBtYXRjaDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0b3I6IFtdLFxuICAgICAgICAgICAgICAgICAgICBjZDogY2FjaGVEZXBlbmRlbmN5XG4gICAgICAgICAgICAgICAgfSksIG5keEludGx6ciAhPT0gdW5kZWZpbmVkICYmIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdID8gZmlsdGVyVGVzdHMoJC5leHRlbmQoITAsIFtdLCBtYXRjaGVzKSkgOiAoZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gPSAkLmV4dGVuZCghMCwgW10sIG1hdGNoZXMpLCBcbiAgICAgICAgICAgICAgICBmaWx0ZXJUZXN0cyhnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QnVmZmVyVGVtcGxhdGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS5fYnVmZmVyID09PSB1bmRlZmluZWQgJiYgKGdldE1hc2tTZXQoKS5fYnVmZmVyID0gZ2V0TWFza1RlbXBsYXRlKCExLCAxKSwgXG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLmJ1ZmZlciA9PT0gdW5kZWZpbmVkICYmIChnZXRNYXNrU2V0KCkuYnVmZmVyID0gZ2V0TWFza1NldCgpLl9idWZmZXIuc2xpY2UoKSkpLCBcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuX2J1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEJ1ZmZlcihub0NhY2hlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS5idWZmZXIgIT09IHVuZGVmaW5lZCAmJiAhMCAhPT0gbm9DYWNoZSB8fCAoZ2V0TWFza1NldCgpLmJ1ZmZlciA9IGdldE1hc2tUZW1wbGF0ZSghMCwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgITApKSwgXG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLmJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hGcm9tQnVmZmVyKHN0YXJ0LCBlbmQsIGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIHZhciBpLCBwO1xuICAgICAgICAgICAgICAgIGlmICghMCA9PT0gc3RhcnQpIHJlc2V0TWFza1NldCgpLCBzdGFydCA9IDAsIGVuZCA9IGJ1ZmZlci5sZW5ndGg7IGVsc2UgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICBmb3IgKHAgPSBzdGFydCwgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIGlmIChyZXNldE1hc2tTZXQoITApLCBidWZmZXJbaV0gIT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsUmVzdWx0ID0gaXNWYWxpZChwLCBidWZmZXJbaV0sICEwLCAhMCk7XG4gICAgICAgICAgICAgICAgICAgICExICE9PSB2YWxSZXN1bHQgJiYgKHJlc2V0TWFza1NldCghMCksIHAgPSB2YWxSZXN1bHQuY2FyZXQgIT09IHVuZGVmaW5lZCA/IHZhbFJlc3VsdC5jYXJldCA6IHZhbFJlc3VsdC5wb3MgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjYXNpbmcoZWxlbSwgdGVzdCwgcG9zKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChvcHRzLmNhc2luZyB8fCB0ZXN0LmNhc2luZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcInVwcGVyXCI6XG4gICAgICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwibG93ZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zQmVmb3JlID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BvcyAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBlbGVtID0gMCA9PT0gcG9zIHx8IHBvc0JlZm9yZSAmJiBwb3NCZWZvcmUuaW5wdXQgPT09IFN0cmluZy5mcm9tQ2hhckNvZGUoSW5wdXRtYXNrLmtleUNvZGUuU1BBQ0UpID8gZWxlbS50b1VwcGVyQ2FzZSgpIDogZWxlbS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLmNhc2luZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpLCBlbGVtID0gb3B0cy5jYXNpbmcuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja0FsdGVybmF0aW9uTWF0Y2goYWx0QXJyMSwgYWx0QXJyMiwgbmEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuYU5keCwgYWx0QXJyQyA9IG9wdHMuZ3JlZWR5ID8gYWx0QXJyMiA6IGFsdEFycjIuc2xpY2UoMCwgMSksIGlzTWF0Y2ggPSAhMSwgbmFBcnIgPSBuYSAhPT0gdW5kZWZpbmVkID8gbmEuc3BsaXQoXCIsXCIpIDogW10sIGkgPSAwOyBpIDwgbmFBcnIubGVuZ3RoOyBpKyspIC0xICE9PSAobmFOZHggPSBhbHRBcnIxLmluZGV4T2YobmFBcnJbaV0pKSAmJiBhbHRBcnIxLnNwbGljZShuYU5keCwgMSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYWxuZHggPSAwOyBhbG5keCA8IGFsdEFycjEubGVuZ3RoOyBhbG5keCsrKSBpZiAoLTEgIT09ICQuaW5BcnJheShhbHRBcnIxW2FsbmR4XSwgYWx0QXJyQykpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNNYXRjaCA9ICEwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTWF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc1ZhbGlkKHBvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQsIGZyb21BbHRlcm5hdGUsIHZhbGlkYXRlT25seSkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2VsZWN0aW9uKHBvc09iaikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0aW9uID0gaXNSVEwgPyBwb3NPYmouYmVnaW4gLSBwb3NPYmouZW5kID4gMSB8fCBwb3NPYmouYmVnaW4gLSBwb3NPYmouZW5kID09IDEgOiBwb3NPYmouZW5kIC0gcG9zT2JqLmJlZ2luID4gMSB8fCBwb3NPYmouZW5kIC0gcG9zT2JqLmJlZ2luID09IDE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24gJiYgMCA9PT0gcG9zT2JqLmJlZ2luICYmIHBvc09iai5lbmQgPT09IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoID8gXCJmdWxsXCIgOiBzZWxlY3Rpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9pc1ZhbGlkKHBvc2l0aW9uLCBjLCBzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJzbHQgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuZWFjaChnZXRUZXN0cyhwb3NpdGlvbiksIGZ1bmN0aW9uKG5keCwgdHN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0ZXN0ID0gdHN0Lm1hdGNoLCBsb29wZW5kID0gYyA/IDEgOiAwLCBjaHJzID0gXCJcIiwgaSA9IHRlc3QuY2FyZGluYWxpdHk7IGkgPiBsb29wZW5kOyBpLS0pIGNocnMgKz0gZ2V0QnVmZmVyRWxlbWVudChwb3NpdGlvbiAtIChpIC0gMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgJiYgKGNocnMgKz0gYyksIGdldEJ1ZmZlcighMCksICExICE9PSAocnNsdCA9IG51bGwgIT0gdGVzdC5mbiA/IHRlc3QuZm4udGVzdChjaHJzLCBnZXRNYXNrU2V0KCksIHBvc2l0aW9uLCBzdHJpY3QsIG9wdHMsIGlzU2VsZWN0aW9uKHBvcykpIDogKGMgPT09IHRlc3QuZGVmIHx8IGMgPT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcikgJiYgXCJcIiAhPT0gdGVzdC5kZWYgJiYge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IGdldFBsYWNlaG9sZGVyKHBvc2l0aW9uLCB0ZXN0LCAhMCkgfHwgdGVzdC5kZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IHJzbHQuYyAhPT0gdW5kZWZpbmVkID8gcnNsdC5jIDogYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbSA9PT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyICYmIG51bGwgPT09IHRlc3QuZm4gPyBnZXRQbGFjZWhvbGRlcihwb3NpdGlvbiwgdGVzdCwgITApIHx8IHRlc3QuZGVmIDogZWxlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRhdGVkUG9zID0gcG9zaXRpb24sIHBvc3NpYmxlTW9kaWZpZWRCdWZmZXIgPSBnZXRCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocnNsdC5yZW1vdmUgIT09IHVuZGVmaW5lZCAmJiAoJC5pc0FycmF5KHJzbHQucmVtb3ZlKSB8fCAocnNsdC5yZW1vdmUgPSBbIHJzbHQucmVtb3ZlIF0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gocnNsdC5yZW1vdmUuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiIC0gYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwVmFsaWRQb3NpdGlvbnMobG1udCwgbG1udCArIDEsICEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSksIHJzbHQuaW5zZXJ0ICE9PSB1bmRlZmluZWQgJiYgKCQuaXNBcnJheShyc2x0Lmluc2VydCkgfHwgKHJzbHQuaW5zZXJ0ID0gWyByc2x0Lmluc2VydCBdKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHJzbHQuaW5zZXJ0LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGZ1bmN0aW9uKG5keCwgbG1udCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkKGxtbnQucG9zLCBsbW50LmMsICEwLCBmcm9tU2V0VmFsaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgcnNsdC5yZWZyZXNoRnJvbUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaCA9IHJzbHQucmVmcmVzaEZyb21CdWZmZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWZyZXNoRnJvbUJ1ZmZlcighMCA9PT0gcmVmcmVzaCA/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcG9zc2libGVNb2RpZmllZEJ1ZmZlciksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByc2x0LnBvcyA9PT0gdW5kZWZpbmVkICYmIHJzbHQuYyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gcnNsdC5wb3MgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodmFsaWRhdGVkUG9zID0gcnNsdC5wb3MgIT09IHVuZGVmaW5lZCA/IHJzbHQucG9zIDogcG9zaXRpb24pICE9PSBwb3NpdGlvbikgcmV0dXJuIHJzbHQgPSAkLmV4dGVuZChyc2x0LCBpc1ZhbGlkKHZhbGlkYXRlZFBvcywgZWxlbSwgITAsIGZyb21TZXRWYWxpZCkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghMCAhPT0gcnNsdCAmJiByc2x0LnBvcyAhPT0gdW5kZWZpbmVkICYmIHJzbHQucG9zICE9PSBwb3NpdGlvbiAmJiAodmFsaWRhdGVkUG9zID0gcnNsdC5wb3MsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKHBvc2l0aW9uLCB2YWxpZGF0ZWRQb3MsIGdldEJ1ZmZlcigpLnNsaWNlKCkpLCB2YWxpZGF0ZWRQb3MgIT09IHBvc2l0aW9uKSkgcmV0dXJuIHJzbHQgPSAkLmV4dGVuZChyc2x0LCBpc1ZhbGlkKHZhbGlkYXRlZFBvcywgZWxlbSwgITApKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICghMCA9PT0gcnNsdCB8fCByc2x0LnBvcyAhPT0gdW5kZWZpbmVkIHx8IHJzbHQuYyAhPT0gdW5kZWZpbmVkKSAmJiAobmR4ID4gMCAmJiByZXNldE1hc2tTZXQoITApLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWxpZFBvc2l0aW9uKHZhbGlkYXRlZFBvcywgJC5leHRlbmQoe30sIHRzdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogY2FzaW5nKGVsZW0sIHRlc3QsIHZhbGlkYXRlZFBvcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnJvbVNldFZhbGlkLCBpc1NlbGVjdGlvbihwb3MpKSB8fCAocnNsdCA9ICExKSwgITEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSwgcnNsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0VmFsaWRQb3NpdGlvbihwb3MsIHZhbGlkVGVzdCwgZnJvbVNldFZhbGlkLCBpc1NlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTZWxlY3Rpb24gfHwgb3B0cy5pbnNlcnRNb2RlICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdICE9PSB1bmRlZmluZWQgJiYgZnJvbVNldFZhbGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpLCBwb3NpdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKCEwLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKSwgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24odW5kZWZpbmVkLCAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBwb3M7IGkgPD0gbHZwOyBpKyspIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSA9ICQuZXh0ZW5kKCEwLCB7fSwgdmFsaWRUZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqLCB2YWxpZCA9ICEwLCB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMsIG5lZWRzVmFsaWRhdGlvbiA9ICExLCBpbml0aWFsTGVuZ3RoID0gZ2V0TWFza1NldCgpLm1hc2tMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBqID0gcG9zOyBpIDw9IGx2cDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBwb3NpdGlvbnNDbG9uZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodCAhPT0gdW5kZWZpbmVkKSBmb3IgKHZhciBwb3NNYXRjaCA9IGo7IHBvc01hdGNoIDwgZ2V0TWFza1NldCgpLm1hc2tMZW5ndGggJiYgKG51bGwgPT09IHQubWF0Y2guZm4gJiYgdnBzW2ldICYmICghMCA9PT0gdnBzW2ldLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciB8fCAhMCA9PT0gdnBzW2ldLm1hdGNoLm9wdGlvbmFsaXR5KSB8fCBudWxsICE9IHQubWF0Y2guZm4pOyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc01hdGNoKyssICExID09PSBuZWVkc1ZhbGlkYXRpb24gJiYgcG9zaXRpb25zQ2xvbmVbcG9zTWF0Y2hdICYmIHBvc2l0aW9uc0Nsb25lW3Bvc01hdGNoXS5tYXRjaC5kZWYgPT09IHQubWF0Y2guZGVmKSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zTWF0Y2hdID0gJC5leHRlbmQoITAsIHt9LCBwb3NpdGlvbnNDbG9uZVtwb3NNYXRjaF0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc01hdGNoXS5pbnB1dCA9IHQuaW5wdXQsIGZpbGxNaXNzaW5nTm9uTWFzayhwb3NNYXRjaCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gcG9zTWF0Y2gsIHZhbGlkID0gITA7IGVsc2UgaWYgKHBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uKHBvc01hdGNoLCB0Lm1hdGNoLmRlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBpc1ZhbGlkKHBvc01hdGNoLCB0LmlucHV0LCAhMCwgITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSAhMSAhPT0gcmVzdWx0LCBqID0gcmVzdWx0LmNhcmV0IHx8IHJlc3VsdC5pbnNlcnQgPyBnZXRMYXN0VmFsaWRQb3NpdGlvbigpIDogcG9zTWF0Y2gsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZHNWYWxpZGF0aW9uID0gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoISh2YWxpZCA9ICEwID09PSB0LmdlbmVyYXRlZElucHV0KSAmJiBwb3NNYXRjaCA+PSBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCAtIDEpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLm1hc2tMZW5ndGggPCBpbml0aWFsTGVuZ3RoICYmIChnZXRNYXNrU2V0KCkubWFza0xlbmd0aCA9IGluaXRpYWxMZW5ndGgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmFsaWQpIHJldHVybiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHBvc2l0aW9uc0Nsb25lKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoITApLCAhMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdID0gJC5leHRlbmQoITAsIHt9LCB2YWxpZFRlc3QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzZXRNYXNrU2V0KCEwKSwgITA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZpbGxNaXNzaW5nTm9uTWFzayhtYXNrUG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHBuZHggPSBtYXNrUG9zIC0gMTsgcG5keCA+IC0xICYmICFnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG5keF07IHBuZHgtLSkgO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdFRlbXBsYXRlLCB0ZXN0c0Zyb21Qb3M7XG4gICAgICAgICAgICAgICAgICAgIGZvciAocG5keCsrOyBwbmR4IDwgbWFza1BvczsgcG5keCsrKSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG5keF0gPT09IHVuZGVmaW5lZCAmJiAoITEgPT09IG9wdHMuaml0TWFza2luZyB8fCBvcHRzLmppdE1hc2tpbmcgPiBwbmR4KSAmJiAoXCJcIiA9PT0gKHRlc3RzRnJvbVBvcyA9IGdldFRlc3RzKHBuZHgsIGdldFRlc3RUZW1wbGF0ZShwbmR4IC0gMSkubG9jYXRvciwgcG5keCAtIDEpLnNsaWNlKCkpW3Rlc3RzRnJvbVBvcy5sZW5ndGggLSAxXS5tYXRjaC5kZWYgJiYgdGVzdHNGcm9tUG9zLnBvcCgpLCBcbiAgICAgICAgICAgICAgICAgICAgKHRlc3RUZW1wbGF0ZSA9IGRldGVybWluZVRlc3RUZW1wbGF0ZSh0ZXN0c0Zyb21Qb3MpKSAmJiAodGVzdFRlbXBsYXRlLm1hdGNoLmRlZiA9PT0gb3B0cy5yYWRpeFBvaW50RGVmaW5pdGlvblN5bWJvbCB8fCAhaXNNYXNrKHBuZHgsICEwKSB8fCAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBnZXRCdWZmZXIoKSkgPCBwbmR4ICYmIHRlc3RUZW1wbGF0ZS5tYXRjaC5mbiAmJiB0ZXN0VGVtcGxhdGUubWF0Y2guZm4udGVzdChnZXRQbGFjZWhvbGRlcihwbmR4KSwgZ2V0TWFza1NldCgpLCBwbmR4LCAhMSwgb3B0cykpICYmICExICE9PSAocmVzdWx0ID0gX2lzVmFsaWQocG5keCwgZ2V0UGxhY2Vob2xkZXIocG5keCwgdGVzdFRlbXBsYXRlLm1hdGNoLCAhMCkgfHwgKG51bGwgPT0gdGVzdFRlbXBsYXRlLm1hdGNoLmZuID8gdGVzdFRlbXBsYXRlLm1hdGNoLmRlZiA6IFwiXCIgIT09IGdldFBsYWNlaG9sZGVyKHBuZHgpID8gZ2V0UGxhY2Vob2xkZXIocG5keCkgOiBnZXRCdWZmZXIoKVtwbmR4XSksICEwKSkgJiYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tyZXN1bHQucG9zIHx8IHBuZHhdLmdlbmVyYXRlZElucHV0ID0gITApKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyaWN0ID0gITAgPT09IHN0cmljdDtcbiAgICAgICAgICAgICAgICB2YXIgbWFza1BvcyA9IHBvcztcbiAgICAgICAgICAgICAgICBwb3MuYmVnaW4gIT09IHVuZGVmaW5lZCAmJiAobWFza1BvcyA9IGlzUlRMICYmICFpc1NlbGVjdGlvbihwb3MpID8gcG9zLmVuZCA6IHBvcy5iZWdpbik7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9ICEwLCBwb3NpdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKCEwLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMucHJlVmFsaWRhdGlvbikgJiYgIXN0cmljdCAmJiAhMCAhPT0gZnJvbVNldFZhbGlkICYmICEwICE9PSB2YWxpZGF0ZU9ubHkgJiYgKHJlc3VsdCA9IG9wdHMucHJlVmFsaWRhdGlvbihnZXRCdWZmZXIoKSwgbWFza1BvcywgYywgaXNTZWxlY3Rpb24ocG9zKSwgb3B0cykpLCBcbiAgICAgICAgICAgICAgICAhMCA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxsTWlzc2luZ05vbk1hc2sobWFza1BvcyksIGlzU2VsZWN0aW9uKHBvcykgJiYgKGhhbmRsZVJlbW92ZSh1bmRlZmluZWQsIElucHV0bWFzay5rZXlDb2RlLkRFTEVURSwgcG9zLCAhMCwgITApLCBcbiAgICAgICAgICAgICAgICAgICAgbWFza1BvcyA9IGdldE1hc2tTZXQoKS5wKSwgbWFza1BvcyA8IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoICYmIChtYXhMZW5ndGggPT09IHVuZGVmaW5lZCB8fCBtYXNrUG9zIDwgbWF4TGVuZ3RoKSAmJiAocmVzdWx0ID0gX2lzVmFsaWQobWFza1BvcywgYywgc3RyaWN0KSwgXG4gICAgICAgICAgICAgICAgICAgICghc3RyaWN0IHx8ICEwID09PSBmcm9tU2V0VmFsaWQpICYmICExID09PSByZXN1bHQgJiYgITAgIT09IHZhbGlkYXRlT25seSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UG9zVmFsaWQgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbWFza1Bvc107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRQb3NWYWxpZCB8fCBudWxsICE9PSBjdXJyZW50UG9zVmFsaWQubWF0Y2guZm4gfHwgY3VycmVudFBvc1ZhbGlkLm1hdGNoLmRlZiAhPT0gYyAmJiBjICE9PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKG9wdHMuaW5zZXJ0TW9kZSB8fCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbc2Vla05leHQobWFza1BvcyldID09PSB1bmRlZmluZWQpICYmICFpc01hc2sobWFza1BvcywgITApKSBmb3IgKHZhciBuUG9zID0gbWFza1BvcyArIDEsIHNuUG9zID0gc2Vla05leHQobWFza1Bvcyk7IG5Qb3MgPD0gc25Qb3M7IG5Qb3MrKykgaWYgKCExICE9PSAocmVzdWx0ID0gX2lzVmFsaWQoblBvcywgYywgc3RyaWN0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWZ1bmN0aW9uKG9yaWdpbmFsUG9zLCBuZXdQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2cCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tuZXdQb3NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZwKSBmb3IgKHZhciB0YXJnZXRMb2NhdG9yID0gdnAubG9jYXRvciwgdGxsID0gdGFyZ2V0TG9jYXRvci5sZW5ndGgsIHBzID0gb3JpZ2luYWxQb3M7IHBzIDwgbmV3UG9zOyBwcysrKSBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BzXSA9PT0gdW5kZWZpbmVkICYmICFpc01hc2socHMsICEwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0cyA9IGdldFRlc3RzKHBzKS5zbGljZSgpLCBiZXN0TWF0Y2ggPSBkZXRlcm1pbmVUZXN0VGVtcGxhdGUodGVzdHMsICEwKSwgZXF1YWxpdHkgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlwiID09PSB0ZXN0c1t0ZXN0cy5sZW5ndGggLSAxXS5tYXRjaC5kZWYgJiYgdGVzdHMucG9wKCksICQuZWFjaCh0ZXN0cywgZnVuY3Rpb24obmR4LCB0c3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0bGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRzdC5sb2NhdG9yW2ldID09PSB1bmRlZmluZWQgfHwgIWNoZWNrQWx0ZXJuYXRpb25NYXRjaCh0c3QubG9jYXRvcltpXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSwgdGFyZ2V0TG9jYXRvcltpXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSwgdHN0Lm5hKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRBSSA9IHRhcmdldExvY2F0b3JbaV0sIGJlc3RNYXRjaEFJID0gYmVzdE1hdGNoLmxvY2F0b3JbaV0sIHRzdEFJID0gdHN0LmxvY2F0b3JbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QUkgLSBiZXN0TWF0Y2hBSSA+IE1hdGguYWJzKHRhcmdldEFJIC0gdHN0QUkpICYmIChiZXN0TWF0Y2ggPSB0c3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXF1YWxpdHkgPCBpICYmIChlcXVhbGl0eSA9IGksIGJlc3RNYXRjaCA9IHRzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgKGJlc3RNYXRjaCA9ICQuZXh0ZW5kKHt9LCBiZXN0TWF0Y2gsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGdldFBsYWNlaG9sZGVyKHBzLCBiZXN0TWF0Y2gubWF0Y2gsICEwKSB8fCBiZXN0TWF0Y2gubWF0Y2guZGVmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLmdlbmVyYXRlZElucHV0ID0gITAsIHNldFZhbGlkUG9zaXRpb24ocHMsIGJlc3RNYXRjaCwgITApLCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbmV3UG9zXSA9IHVuZGVmaW5lZCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lzVmFsaWQobmV3UG9zLCB2cC5pbnB1dCwgITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KG1hc2tQb3MsIHJlc3VsdC5wb3MgIT09IHVuZGVmaW5lZCA/IHJlc3VsdC5wb3MgOiBuUG9zKSwgbWFza1BvcyA9IG5Qb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHNlZWtOZXh0KG1hc2tQb3MpXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICExID09PSByZXN1bHQgJiYgb3B0cy5rZWVwU3RhdGljICYmICFzdHJpY3QgJiYgITAgIT09IGZyb21BbHRlcm5hdGUgJiYgKHJlc3VsdCA9IGZ1bmN0aW9uKHBvcywgYywgc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdEFsdCwgYWx0ZXJuYXRpb24sIGFsdFBvcywgcHJldkFsdFBvcywgaSwgdmFsaWRQb3MsIGFsdE5keHMsIGRlY2lzaW9uUG9zLCB2YWxpZFBzQ2xvbmUgPSAkLmV4dGVuZCghMCwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksIGlzVmFsaWRSc2x0ID0gITEsIGxBbHRQb3MgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwcmV2QWx0UG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2xBbHRQb3NdOyBsQWx0UG9zID49IDA7IGxBbHRQb3MtLSkgaWYgKChhbHRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbEFsdFBvc10pICYmIGFsdFBvcy5hbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RBbHQgPSBsQWx0UG9zLCBhbHRlcm5hdGlvbiA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsYXN0QWx0XS5hbHRlcm5hdGlvbiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldkFsdFBvcy5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0gIT09IGFsdFBvcy5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0pIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZBbHRQb3MgPSBhbHRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0ZXJuYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2lzaW9uUG9zID0gcGFyc2VJbnQobGFzdEFsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlY2lzaW9uVGFrZXIgPSBwcmV2QWx0UG9zLmxvY2F0b3JbcHJldkFsdFBvcy5hbHRlcm5hdGlvbiB8fCBhbHRlcm5hdGlvbl0gIT09IHVuZGVmaW5lZCA/IHByZXZBbHRQb3MubG9jYXRvcltwcmV2QWx0UG9zLmFsdGVybmF0aW9uIHx8IGFsdGVybmF0aW9uXSA6IGFsdE5keHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjaXNpb25UYWtlci5sZW5ndGggPiAwICYmIChkZWNpc2lvblRha2VyID0gZGVjaXNpb25UYWtlci5zcGxpdChcIixcIilbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NzaWJpbGl0eVBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tkZWNpc2lvblBvc10sIHByZXZQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZGVjaXNpb25Qb3MgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZ2V0VGVzdHMoZGVjaXNpb25Qb3MsIHByZXZQb3MgPyBwcmV2UG9zLmxvY2F0b3IgOiB1bmRlZmluZWQsIGRlY2lzaW9uUG9zIC0gMSksIGZ1bmN0aW9uKG5keCwgdGVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHROZHhzID0gdGVzdC5sb2NhdG9yW2FsdGVybmF0aW9uXSA/IHRlc3QubG9jYXRvclthbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5zcGxpdChcIixcIikgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbW5keCA9IDA7IG1uZHggPCBhbHROZHhzLmxlbmd0aDsgbW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRJbnB1dHMgPSBbXSwgc3RhdGljSW5wdXRzQmVmb3JlUG9zID0gMCwgc3RhdGljSW5wdXRzQmVmb3JlUG9zQWx0ZXJuYXRlID0gMCwgdmVyaWZ5VmFsaWRJbnB1dCA9ICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlY2lzaW9uVGFrZXIgPCBhbHROZHhzW21uZHhdICYmICh0ZXN0Lm5hID09PSB1bmRlZmluZWQgfHwgLTEgPT09ICQuaW5BcnJheShhbHROZHhzW21uZHhdLCB0ZXN0Lm5hLnNwbGl0KFwiLFwiKSkgfHwgLTEgPT09ICQuaW5BcnJheShkZWNpc2lvblRha2VyLnRvU3RyaW5nKCksIGFsdE5keHMpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tkZWNpc2lvblBvc10gPSAkLmV4dGVuZCghMCwge30sIHRlc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NzaWJpbGl0aWVzID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2RlY2lzaW9uUG9zXS5sb2NhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2RlY2lzaW9uUG9zXS5sb2NhdG9yW2FsdGVybmF0aW9uXSA9IHBhcnNlSW50KGFsdE5keHNbbW5keF0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsID09IHRlc3QubWF0Y2guZm4gPyAocG9zc2liaWxpdHlQb3MuaW5wdXQgIT09IHRlc3QubWF0Y2guZGVmICYmICh2ZXJpZnlWYWxpZElucHV0ID0gITAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEwICE9PSBwb3NzaWJpbGl0eVBvcy5nZW5lcmF0ZWRJbnB1dCAmJiB2YWxpZElucHV0cy5wdXNoKHBvc3NpYmlsaXR5UG9zLmlucHV0KSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0lucHV0c0JlZm9yZVBvc0FsdGVybmF0ZSsrLCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZGVjaXNpb25Qb3NdLmdlbmVyYXRlZElucHV0ID0gIS9bMC05YS1iQS1aXS8udGVzdCh0ZXN0Lm1hdGNoLmRlZiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tkZWNpc2lvblBvc10uaW5wdXQgPSB0ZXN0Lm1hdGNoLmRlZikgOiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZGVjaXNpb25Qb3NdLmlucHV0ID0gcG9zc2liaWxpdHlQb3MuaW5wdXQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBkZWNpc2lvblBvcyArIDE7IGkgPCBnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsICEwKSArIDE7IGkrKykgKHZhbGlkUG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldKSAmJiAhMCAhPT0gdmFsaWRQb3MuZ2VuZXJhdGVkSW5wdXQgJiYgL1swLTlhLWJBLVpdLy50ZXN0KHZhbGlkUG9zLmlucHV0KSA/IHZhbGlkSW5wdXRzLnB1c2godmFsaWRQb3MuaW5wdXQpIDogaSA8IHBvcyAmJiBzdGF0aWNJbnB1dHNCZWZvcmVQb3MrKywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZlcmlmeVZhbGlkSW5wdXQgJiYgdmFsaWRJbnB1dHNbMF0gPT09IHRlc3QubWF0Y2guZGVmICYmIHZhbGlkSW5wdXRzLnNoaWZ0KCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCksIGlzVmFsaWRSc2x0ID0gITA7IHZhbGlkSW5wdXRzLmxlbmd0aCA+IDA7ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB2YWxpZElucHV0cy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgIT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciAmJiAhKGlzVmFsaWRSc2x0ID0gaXNWYWxpZChnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsICEwKSArIDEsIGlucHV0LCAhMSwgZnJvbVNldFZhbGlkLCAhMCkpKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRSc2x0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tkZWNpc2lvblBvc10ubG9jYXRvciA9IHBvc3NpYmlsaXRpZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRMdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbihwb3MpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gZGVjaXNpb25Qb3MgKyAxOyBpIDwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSArIDE7IGkrKykgKCh2YWxpZFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSkgPT09IHVuZGVmaW5lZCB8fCBudWxsID09IHZhbGlkUG9zLm1hdGNoLmZuKSAmJiBpIDwgcG9zICsgKHN0YXRpY0lucHV0c0JlZm9yZVBvc0FsdGVybmF0ZSAtIHN0YXRpY0lucHV0c0JlZm9yZVBvcykgJiYgc3RhdGljSW5wdXRzQmVmb3JlUG9zQWx0ZXJuYXRlKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWRSc2x0ID0gaXNWYWxpZCgocG9zICs9IHN0YXRpY0lucHV0c0JlZm9yZVBvc0FsdGVybmF0ZSAtIHN0YXRpY0lucHV0c0JlZm9yZVBvcykgPiB0YXJnZXRMdnAgPyB0YXJnZXRMdnAgOiBwb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkLCAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkUnNsdCkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCgpLCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHZhbGlkUHNDbG9uZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkUnNsdDtcbiAgICAgICAgICAgICAgICAgICAgfShtYXNrUG9zLCBjLCBzdHJpY3QpKSwgITAgPT09IHJlc3VsdCAmJiAocmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBtYXNrUG9zXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMucG9zdFZhbGlkYXRpb24pICYmICExICE9PSByZXN1bHQgJiYgIXN0cmljdCAmJiAhMCAhPT0gZnJvbVNldFZhbGlkICYmICEwICE9PSB2YWxpZGF0ZU9ubHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3RSZXN1bHQgPSBvcHRzLnBvc3RWYWxpZGF0aW9uKGdldEJ1ZmZlcighMCksIHJlc3VsdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3N0UmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyICYmIHBvc3RSZXN1bHQuYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaCA9IHBvc3RSZXN1bHQucmVmcmVzaEZyb21CdWZmZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcighMCA9PT0gcmVmcmVzaCA/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcG9zdFJlc3VsdC5idWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9ICEwID09PSBwb3N0UmVzdWx0ID8gcmVzdWx0IDogcG9zdFJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCAmJiByZXN1bHQucG9zID09PSB1bmRlZmluZWQgJiYgKHJlc3VsdC5wb3MgPSBtYXNrUG9zKSwgITEgIT09IHJlc3VsdCAmJiAhMCAhPT0gdmFsaWRhdGVPbmx5IHx8IChyZXNldE1hc2tTZXQoITApLCBcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHBvc2l0aW9uc0Nsb25lKSksIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzTWFzayhwb3MsIHN0cmljdCkge1xuICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gZ2V0VGVzdFRlbXBsYXRlKHBvcykubWF0Y2g7XG4gICAgICAgICAgICAgICAgaWYgKFwiXCIgPT09IHRlc3QuZGVmICYmICh0ZXN0ID0gZ2V0VGVzdChwb3MpLm1hdGNoKSwgbnVsbCAhPSB0ZXN0LmZuKSByZXR1cm4gdGVzdC5mbjtcbiAgICAgICAgICAgICAgICBpZiAoITAgIT09IHN0cmljdCAmJiBwb3MgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdHMgPSBnZXRUZXN0cyhwb3MpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVzdHMubGVuZ3RoID4gMSArIChcIlwiID09PSB0ZXN0c1t0ZXN0cy5sZW5ndGggLSAxXS5tYXRjaC5kZWYgPyAxIDogMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNlZWtOZXh0KHBvcywgbmV3QmxvY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFza0wgPSBnZXRNYXNrU2V0KCkubWFza0xlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAocG9zID49IG1hc2tMKSByZXR1cm4gbWFza0w7XG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gcG9zO1xuICAgICAgICAgICAgICAgIGZvciAoZ2V0VGVzdHMobWFza0wgKyAxKS5sZW5ndGggPiAxICYmIChnZXRNYXNrVGVtcGxhdGUoITAsIG1hc2tMICsgMSwgITApLCBtYXNrTCA9IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoKTsgKytwb3NpdGlvbiA8IG1hc2tMICYmICghMCA9PT0gbmV3QmxvY2sgJiYgKCEwICE9PSBnZXRUZXN0KHBvc2l0aW9uKS5tYXRjaC5uZXdCbG9ja01hcmtlciB8fCAhaXNNYXNrKHBvc2l0aW9uKSkgfHwgITAgIT09IG5ld0Jsb2NrICYmICFpc01hc2socG9zaXRpb24pKTsgKSA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gc2Vla1ByZXZpb3VzKHBvcywgbmV3QmxvY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVzdHMsIHBvc2l0aW9uID0gcG9zO1xuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA8PSAwKSByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICBmb3IgKDstLXBvc2l0aW9uID4gMCAmJiAoITAgPT09IG5ld0Jsb2NrICYmICEwICE9PSBnZXRUZXN0KHBvc2l0aW9uKS5tYXRjaC5uZXdCbG9ja01hcmtlciB8fCAhMCAhPT0gbmV3QmxvY2sgJiYgIWlzTWFzayhwb3NpdGlvbikgJiYgKCh0ZXN0cyA9IGdldFRlc3RzKHBvc2l0aW9uKSkubGVuZ3RoIDwgMiB8fCAyID09PSB0ZXN0cy5sZW5ndGggJiYgXCJcIiA9PT0gdGVzdHNbMV0ubWF0Y2guZGVmKSk7ICkgO1xuICAgICAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEJ1ZmZlckVsZW1lbnQocG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc2l0aW9uXSA9PT0gdW5kZWZpbmVkID8gZ2V0UGxhY2Vob2xkZXIocG9zaXRpb24pIDogZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc2l0aW9uXS5pbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHdyaXRlQnVmZmVyKGlucHV0LCBidWZmZXIsIGNhcmV0UG9zLCBldmVudCwgdHJpZ2dlcklucHV0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgJiYgJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9wdHMub25CZWZvcmVXcml0ZS5jYWxsKGlucHV0bWFzaywgZXZlbnQsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2ggPSByZXN1bHQucmVmcmVzaEZyb21CdWZmZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXIoITAgPT09IHJlZnJlc2ggPyByZWZyZXNoIDogcmVmcmVzaC5zdGFydCwgcmVmcmVzaC5lbmQsIHJlc3VsdC5idWZmZXIgfHwgYnVmZmVyKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gZ2V0QnVmZmVyKCEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zICE9PSB1bmRlZmluZWQgJiYgKGNhcmV0UG9zID0gcmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgPyByZXN1bHQuY2FyZXQgOiBjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5wdXQgIT09IHVuZGVmaW5lZCAmJiAoaW5wdXQuaW5wdXRtYXNrLl92YWx1ZVNldChidWZmZXIuam9pbihcIlwiKSksIGNhcmV0UG9zID09PSB1bmRlZmluZWQgfHwgZXZlbnQgIT09IHVuZGVmaW5lZCAmJiBcImJsdXJcIiA9PT0gZXZlbnQudHlwZSA/IHJlbmRlckNvbG9yTWFzayhpbnB1dCwgY2FyZXRQb3MsIDAgPT09IGJ1ZmZlci5sZW5ndGgpIDogYW5kcm9pZCAmJiBldmVudCAmJiBcImlucHV0XCIgPT09IGV2ZW50LnR5cGUgPyBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgY2FyZXRQb3MpO1xuICAgICAgICAgICAgICAgIH0sIDApIDogY2FyZXQoaW5wdXQsIGNhcmV0UG9zKSwgITAgPT09IHRyaWdnZXJJbnB1dEV2ZW50ICYmIChza2lwSW5wdXRFdmVudCA9ICEwLCBcbiAgICAgICAgICAgICAgICAkKGlucHV0KS50cmlnZ2VyKFwiaW5wdXRcIikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdCwgcmV0dXJuUEwpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHRlc3QgPSB0ZXN0IHx8IGdldFRlc3QocG9zKS5tYXRjaCkucGxhY2Vob2xkZXIgIT09IHVuZGVmaW5lZCB8fCAhMCA9PT0gcmV0dXJuUEwpIHJldHVybiAkLmlzRnVuY3Rpb24odGVzdC5wbGFjZWhvbGRlcikgPyB0ZXN0LnBsYWNlaG9sZGVyKG9wdHMpIDogdGVzdC5wbGFjZWhvbGRlcjtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gdGVzdC5mbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zID4gLTEgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZUZXN0LCB0ZXN0cyA9IGdldFRlc3RzKHBvcyksIHN0YXRpY0FsdGVybmF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RzLmxlbmd0aCA+IDEgKyAoXCJcIiA9PT0gdGVzdHNbdGVzdHMubGVuZ3RoIC0gMV0ubWF0Y2guZGVmID8gMSA6IDApKSBmb3IgKHZhciBpID0gMDsgaSA8IHRlc3RzLmxlbmd0aDsgaSsrKSBpZiAoITAgIT09IHRlc3RzW2ldLm1hdGNoLm9wdGlvbmFsaXR5ICYmICEwICE9PSB0ZXN0c1tpXS5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgJiYgKG51bGwgPT09IHRlc3RzW2ldLm1hdGNoLmZuIHx8IHByZXZUZXN0ID09PSB1bmRlZmluZWQgfHwgITEgIT09IHRlc3RzW2ldLm1hdGNoLmZuLnRlc3QocHJldlRlc3QubWF0Y2guZGVmLCBnZXRNYXNrU2V0KCksIHBvcywgITAsIG9wdHMpKSAmJiAoc3RhdGljQWx0ZXJuYXRpb25zLnB1c2godGVzdHNbaV0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT09IHRlc3RzW2ldLm1hdGNoLmZuICYmIChwcmV2VGVzdCA9IHRlc3RzW2ldKSwgc3RhdGljQWx0ZXJuYXRpb25zLmxlbmd0aCA+IDEgJiYgL1swLTlhLWJBLVpdLy50ZXN0KHN0YXRpY0FsdGVybmF0aW9uc1swXS5tYXRjaC5kZWYpKSkgcmV0dXJuIG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KHBvcyAlIG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVzdC5kZWY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdChwb3MgJSBvcHRzLnBsYWNlaG9sZGVyLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja1ZhbChpbnB1dCwgd3JpdGVPdXQsIHN0cmljdCwgbnB0dmwsIGluaXRpYXRpbmdFdmVudCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzVGVtcGxhdGVNYXRjaChuZHgsIGNoYXJDb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTEgIT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuc2xpY2UobmR4LCBzZWVrTmV4dChuZHgpKS5qb2luKFwiXCIpLmluZGV4T2YoY2hhckNvZGVzKSAmJiAhaXNNYXNrKG5keCkgJiYgZ2V0VGVzdChuZHgpLm1hdGNoLm5hdGl2ZURlZiA9PT0gY2hhckNvZGVzLmNoYXJBdChjaGFyQ29kZXMubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpbnB1dFZhbHVlID0gbnB0dmwuc2xpY2UoKSwgY2hhckNvZGVzID0gXCJcIiwgaW5pdGlhbE5keCA9IC0xLCByZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlc2V0TWFza1NldCgpLCBzdHJpY3QgfHwgITAgPT09IG9wdHMuYXV0b1VubWFzaykgaW5pdGlhbE5keCA9IHNlZWtOZXh0KGluaXRpYWxOZHgpOyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRpY0lucHV0ID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZSgwLCBzZWVrTmV4dCgtMSkpLmpvaW4oXCJcIiksIG1hdGNoZXMgPSBpbnB1dFZhbHVlLmpvaW4oXCJcIikubWF0Y2gobmV3IFJlZ0V4cChcIl5cIiArIElucHV0bWFzay5lc2NhcGVSZWdleChzdGF0aWNJbnB1dCksIFwiZ1wiKSk7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgJiYgbWF0Y2hlcy5sZW5ndGggPiAwICYmIChpbnB1dFZhbHVlLnNwbGljZSgwLCBtYXRjaGVzLmxlbmd0aCAqIHN0YXRpY0lucHV0Lmxlbmd0aCksIFxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsTmR4ID0gc2Vla05leHQoaW5pdGlhbE5keCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoLTEgPT09IGluaXRpYWxOZHggPyAoZ2V0TWFza1NldCgpLnAgPSBzZWVrTmV4dChpbml0aWFsTmR4KSwgaW5pdGlhbE5keCA9IDApIDogZ2V0TWFza1NldCgpLnAgPSBpbml0aWFsTmR4LCBcbiAgICAgICAgICAgICAgICAkLmVhY2goaW5wdXRWYWx1ZSwgZnVuY3Rpb24obmR4LCBjaGFyQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgIT09IHVuZGVmaW5lZCkgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tuZHhdID09PSB1bmRlZmluZWQgJiYgaW5wdXRWYWx1ZVtuZHhdID09PSBnZXRQbGFjZWhvbGRlcihuZHgpICYmIGlzTWFzayhuZHgsICEwKSAmJiAhMSA9PT0gaXNWYWxpZChuZHgsIGlucHV0VmFsdWVbbmR4XSwgITAsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCAhMCkpIGdldE1hc2tTZXQoKS5wKys7IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleXByZXNzID0gbmV3ICQuRXZlbnQoXCJfY2hlY2t2YWxcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IGNoYXJDb2RlLmNoYXJDb2RlQXQoMCksIGNoYXJDb2RlcyArPSBjaGFyQ29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsICEwKSwgbHZUZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0sIG5leHRUZXN0ID0gZ2V0VGVzdFRlbXBsYXRlKGx2cCArIDEsIGx2VGVzdCA/IGx2VGVzdC5sb2NhdG9yLnNsaWNlKCkgOiB1bmRlZmluZWQsIGx2cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVGVtcGxhdGVNYXRjaChpbml0aWFsTmR4LCBjaGFyQ29kZXMpIHx8IHN0cmljdCB8fCBvcHRzLmF1dG9Vbm1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gc3RyaWN0ID8gbmR4IDogbnVsbCA9PSBuZXh0VGVzdC5tYXRjaC5mbiAmJiBuZXh0VGVzdC5tYXRjaC5vcHRpb25hbGl0eSAmJiBsdnAgKyAxIDwgZ2V0TWFza1NldCgpLnAgPyBsdnAgKyAxIDogZ2V0TWFza1NldCgpLnA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzLCAhMCwgITEsIHN0cmljdCwgcG9zKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbE5keCA9IHBvcyArIDEsIGNoYXJDb2RlcyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcmVzdWx0ID0gRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzLCAhMCwgITEsICEwLCBsdnAgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghMSAhPT0gcmVzdWx0ICYmICFzdHJpY3QgJiYgJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ1Jlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID0gb3B0cy5vbkJlZm9yZVdyaXRlLmNhbGwoaW5wdXRtYXNrLCBrZXlwcmVzcywgZ2V0QnVmZmVyKCksIHJlc3VsdC5mb3J3YXJkUG9zaXRpb24sIG9wdHMpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmVzdWx0ID0gJC5leHRlbmQob3JpZ1Jlc3VsdCwgcmVzdWx0KSkgJiYgcmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZyZXNoID0gcmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcighMCA9PT0gcmVmcmVzaCA/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcmVzdWx0LmJ1ZmZlciksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoITApLCByZXN1bHQuY2FyZXQgJiYgKGdldE1hc2tTZXQoKS5wID0gcmVzdWx0LmNhcmV0LCByZXN1bHQuZm9yd2FyZFBvc2l0aW9uID0gcmVzdWx0LmNhcmV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgd3JpdGVPdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBpbnB1dCAmJiByZXN1bHQgJiYgKGNhcmV0UG9zID0gb3B0cy5udW1lcmljSW5wdXQgPyBzZWVrUHJldmlvdXMocmVzdWx0LmZvcndhcmRQb3NpdGlvbikgOiByZXN1bHQuZm9yd2FyZFBvc2l0aW9uKSwgXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgY2FyZXRQb3MsIGluaXRpYXRpbmdFdmVudCB8fCBuZXcgJC5FdmVudChcImNoZWNrdmFsXCIpLCBpbml0aWF0aW5nRXZlbnQgJiYgXCJpbnB1dFwiID09PSBpbml0aWF0aW5nRXZlbnQudHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdW5tYXNrZWR2YWx1ZShpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaW5wdXRtYXNrID09PSB1bmRlZmluZWQpIHJldHVybiBpbnB1dC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrICYmIGlucHV0LmlucHV0bWFzay5yZWZyZXNoVmFsdWUgJiYgRXZlbnRIYW5kbGVycy5zZXRWYWx1ZUV2ZW50LmNhbGwoaW5wdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdW1WYWx1ZSA9IFtdLCB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnM7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcG5keCBpbiB2cHMpIHZwc1twbmR4XS5tYXRjaCAmJiBudWxsICE9IHZwc1twbmR4XS5tYXRjaC5mbiAmJiB1bVZhbHVlLnB1c2godnBzW3BuZHhdLmlucHV0KTtcbiAgICAgICAgICAgICAgICB2YXIgdW5tYXNrZWRWYWx1ZSA9IDAgPT09IHVtVmFsdWUubGVuZ3RoID8gXCJcIiA6IChpc1JUTCA/IHVtVmFsdWUucmV2ZXJzZSgpIDogdW1WYWx1ZSkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25Vbk1hc2spKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJWYWx1ZSA9IChpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyKCkpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHVubWFza2VkVmFsdWUgPSBvcHRzLm9uVW5NYXNrLmNhbGwoaW5wdXRtYXNrLCBidWZmZXJWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bm1hc2tlZFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY2FyZXQoaW5wdXQsIGJlZ2luLCBlbmQsIG5vdHJhbnNsYXRlKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdHJhbnNsYXRlUG9zaXRpb24ocG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMCA9PT0gbm90cmFuc2xhdGUgfHwgIWlzUlRMIHx8IFwibnVtYmVyXCIgIT0gdHlwZW9mIHBvcyB8fCBvcHRzLmdyZWVkeSAmJiBcIlwiID09PSBvcHRzLnBsYWNlaG9sZGVyIHx8IChwb3MgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLmxlbmd0aCAtIHBvcyksIFxuICAgICAgICAgICAgICAgICAgICBwb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByYW5nZTtcbiAgICAgICAgICAgICAgICBpZiAoYmVnaW4gPT09IHVuZGVmaW5lZCkgcmV0dXJuIGlucHV0LnNldFNlbGVjdGlvblJhbmdlID8gKGJlZ2luID0gaW5wdXQuc2VsZWN0aW9uU3RhcnQsIFxuICAgICAgICAgICAgICAgIGVuZCA9IGlucHV0LnNlbGVjdGlvbkVuZCkgOiB3aW5kb3cuZ2V0U2VsZWN0aW9uID8gKHJhbmdlID0gd2luZG93LmdldFNlbGVjdGlvbigpLmdldFJhbmdlQXQoMCkpLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLnBhcmVudE5vZGUgIT09IGlucHV0ICYmIHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICE9PSBpbnB1dCB8fCAoYmVnaW4gPSByYW5nZS5zdGFydE9mZnNldCwgXG4gICAgICAgICAgICAgICAgZW5kID0gcmFuZ2UuZW5kT2Zmc2V0KSA6IGRvY3VtZW50LnNlbGVjdGlvbiAmJiBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UgJiYgKGVuZCA9IChiZWdpbiA9IDAgLSAocmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKSkuZHVwbGljYXRlKCkubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsIC1pbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKSkgKyByYW5nZS50ZXh0Lmxlbmd0aCksIFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW46IHRyYW5zbGF0ZVBvc2l0aW9uKGJlZ2luKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiB0cmFuc2xhdGVQb3NpdGlvbihlbmQpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoYmVnaW4uYmVnaW4gIT09IHVuZGVmaW5lZCAmJiAoZW5kID0gYmVnaW4uZW5kLCBiZWdpbiA9IGJlZ2luLmJlZ2luKSwgXCJudW1iZXJcIiA9PSB0eXBlb2YgYmVnaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSB0cmFuc2xhdGVQb3NpdGlvbihiZWdpbiksIGVuZCA9IFwibnVtYmVyXCIgPT0gdHlwZW9mIChlbmQgPSB0cmFuc2xhdGVQb3NpdGlvbihlbmQpKSA/IGVuZCA6IGJlZ2luO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsQ2FsYyA9IHBhcnNlSW50KCgoaW5wdXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUgPyAoaW5wdXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUoaW5wdXQsIG51bGwpIDogaW5wdXQuY3VycmVudFN0eWxlKS5mb250U2l6ZSkgKiBlbmQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zY3JvbGxMZWZ0ID0gc2Nyb2xsQ2FsYyA+IGlucHV0LnNjcm9sbFdpZHRoID8gc2Nyb2xsQ2FsYyA6IDAsIG1vYmlsZSB8fCAhMSAhPT0gb3B0cy5pbnNlcnRNb2RlIHx8IGJlZ2luICE9PSBlbmQgfHwgZW5kKyssIFxuICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZXRTZWxlY3Rpb25SYW5nZSkgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBiZWdpbiwgaW5wdXQuc2VsZWN0aW9uRW5kID0gZW5kOyBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpLCBpbnB1dC5maXJzdENoaWxkID09PSB1bmRlZmluZWQgfHwgbnVsbCA9PT0gaW5wdXQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmFwcGVuZENoaWxkKHRleHROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KGlucHV0LmZpcnN0Q2hpbGQsIGJlZ2luIDwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCA/IGJlZ2luIDogaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKGlucHV0LmZpcnN0Q2hpbGQsIGVuZCA8IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGggPyBlbmQgOiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSghMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpLCBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaW5wdXQuY3JlYXRlVGV4dFJhbmdlICYmICgocmFuZ2UgPSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKSkuY29sbGFwc2UoITApLCBcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZUVuZChcImNoYXJhY3RlclwiLCBlbmQpLCByYW5nZS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgYmVnaW4pLCByYW5nZS5zZWxlY3QoKSk7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckNvbG9yTWFzayhpbnB1dCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGJlZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBlbmRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24ocmV0dXJuRGVmaW5pdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBwb3MsIHRlc3RQb3MsIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLCBibCA9IGJ1ZmZlci5sZW5ndGgsIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCksIHBvc2l0aW9ucyA9IHt9LCBsdlRlc3QgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZwXSwgbmR4SW50bHpyID0gbHZUZXN0ICE9PSB1bmRlZmluZWQgPyBsdlRlc3QubG9jYXRvci5zbGljZSgpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGZvciAocG9zID0gbHZwICsgMTsgcG9zIDwgYnVmZmVyLmxlbmd0aDsgcG9zKyspIG5keEludGx6ciA9ICh0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKSkubG9jYXRvci5zbGljZSgpLCBcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbcG9zXSA9ICQuZXh0ZW5kKCEwLCB7fSwgdGVzdFBvcyk7XG4gICAgICAgICAgICAgICAgdmFyIGx2VGVzdEFsdCA9IGx2VGVzdCAmJiBsdlRlc3QuYWx0ZXJuYXRpb24gIT09IHVuZGVmaW5lZCA/IGx2VGVzdC5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZm9yIChwb3MgPSBibCAtIDE7IHBvcyA+IGx2cCAmJiAoKCh0ZXN0UG9zID0gcG9zaXRpb25zW3Bvc10pLm1hdGNoLm9wdGlvbmFsaXR5IHx8IHRlc3RQb3MubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICYmIHRlc3RQb3MubWF0Y2gubmV3QmxvY2tNYXJrZXIgfHwgbHZUZXN0QWx0ICYmIChsdlRlc3RBbHQgIT09IHBvc2l0aW9uc1twb3NdLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSAmJiBudWxsICE9IHRlc3RQb3MubWF0Y2guZm4gfHwgbnVsbCA9PT0gdGVzdFBvcy5tYXRjaC5mbiAmJiB0ZXN0UG9zLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSAmJiBjaGVja0FsdGVybmF0aW9uTWF0Y2godGVzdFBvcy5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5zcGxpdChcIixcIiksIGx2VGVzdEFsdC50b1N0cmluZygpLnNwbGl0KFwiLFwiKSkgJiYgXCJcIiAhPT0gZ2V0VGVzdHMocG9zKVswXS5kZWYpKSAmJiBidWZmZXJbcG9zXSA9PT0gZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0UG9zLm1hdGNoKSk7IHBvcy0tKSBibC0tO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5EZWZpbml0aW9uID8ge1xuICAgICAgICAgICAgICAgICAgICBsOiBibCxcbiAgICAgICAgICAgICAgICAgICAgZGVmOiBwb3NpdGlvbnNbYmxdID8gcG9zaXRpb25zW2JsXS5tYXRjaCA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0gOiBibDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHZhbGlkUG9zLCBybCA9IGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKCksIGJsID0gYnVmZmVyLmxlbmd0aCwgbHYgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZ2V0TGFzdFZhbGlkUG9zaXRpb24oKV07IHJsIDwgYmwgJiYgIWlzTWFzayhybCwgITApICYmICh2YWxpZFBvcyA9IGx2ICE9PSB1bmRlZmluZWQgPyBnZXRUZXN0VGVtcGxhdGUocmwsIGx2LmxvY2F0b3Iuc2xpY2UoXCJcIiksIGx2KSA6IGdldFRlc3QocmwpKSAmJiAhMCAhPT0gdmFsaWRQb3MubWF0Y2gub3B0aW9uYWxpdHkgJiYgKCEwICE9PSB2YWxpZFBvcy5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgJiYgITAgIT09IHZhbGlkUG9zLm1hdGNoLm5ld0Jsb2NrTWFya2VyIHx8IHJsICsgMSA9PT0gYmwgJiYgXCJcIiA9PT0gKGx2ICE9PSB1bmRlZmluZWQgPyBnZXRUZXN0VGVtcGxhdGUocmwgKyAxLCBsdi5sb2NhdG9yLnNsaWNlKFwiXCIpLCBsdikgOiBnZXRUZXN0KHJsICsgMSkpLm1hdGNoLmRlZik7ICkgcmwrKztcbiAgICAgICAgICAgICAgICBmb3IgKDsodmFsaWRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcmwgLSAxXSkgJiYgdmFsaWRQb3MgJiYgdmFsaWRQb3MubWF0Y2gub3B0aW9uYWxpdHkgJiYgdmFsaWRQb3MuaW5wdXQgPT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcjsgKSBybC0tO1xuICAgICAgICAgICAgICAgIHJldHVybiBidWZmZXIuc3BsaWNlKHJsKSwgYnVmZmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNDb21wbGV0ZShidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMuaXNDb21wbGV0ZSkpIHJldHVybiBvcHRzLmlzQ29tcGxldGUoYnVmZmVyLCBvcHRzKTtcbiAgICAgICAgICAgICAgICBpZiAoXCIqXCIgPT09IG9wdHMucmVwZWF0KSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZSA9ICExLCBscnAgPSBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbighMCksIGFtbCA9IHNlZWtQcmV2aW91cyhscnAubCk7XG4gICAgICAgICAgICAgICAgaWYgKGxycC5kZWYgPT09IHVuZGVmaW5lZCB8fCBscnAuZGVmLm5ld0Jsb2NrTWFya2VyIHx8IGxycC5kZWYub3B0aW9uYWxpdHkgfHwgbHJwLmRlZi5vcHRpb25hbFF1YW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gYW1sOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gZ2V0VGVzdFRlbXBsYXRlKGkpLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHRlc3QuZm4gJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldID09PSB1bmRlZmluZWQgJiYgITAgIT09IHRlc3Qub3B0aW9uYWxpdHkgJiYgITAgIT09IHRlc3Qub3B0aW9uYWxRdWFudGlmaWVyIHx8IG51bGwgPT09IHRlc3QuZm4gJiYgYnVmZmVyW2ldICE9PSBnZXRQbGFjZWhvbGRlcihpLCB0ZXN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVtb3ZlKGlucHV0LCBrLCBwb3MsIHN0cmljdCwgZnJvbUlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoKG9wdHMubnVtZXJpY0lucHV0IHx8IGlzUlRMKSAmJiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFID8gayA9IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSA6IGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSAmJiAoayA9IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSksIFxuICAgICAgICAgICAgICAgIGlzUlRMKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGVuZCA9IHBvcy5lbmQ7XG4gICAgICAgICAgICAgICAgICAgIHBvcy5lbmQgPSBwb3MuYmVnaW4sIHBvcy5iZWdpbiA9IHBlbmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGsgPT09IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSAmJiAocG9zLmVuZCAtIHBvcy5iZWdpbiA8IDEgfHwgITEgPT09IG9wdHMuaW5zZXJ0TW9kZSkgPyAocG9zLmJlZ2luID0gc2Vla1ByZXZpb3VzKHBvcy5iZWdpbiksIFxuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dICE9PSB1bmRlZmluZWQgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5iZWdpbl0uaW5wdXQgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgJiYgcG9zLmJlZ2luLS0pIDogayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFICYmIHBvcy5iZWdpbiA9PT0gcG9zLmVuZCAmJiAocG9zLmVuZCA9IGlzTWFzayhwb3MuZW5kLCAhMCkgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5lbmRdICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuZW5kXS5pbnB1dCAhPT0gb3B0cy5yYWRpeFBvaW50ID8gcG9zLmVuZCArIDEgOiBzZWVrTmV4dChwb3MuZW5kKSArIDEsIFxuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dICE9PSB1bmRlZmluZWQgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5iZWdpbl0uaW5wdXQgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgJiYgcG9zLmVuZCsrKSwgXG4gICAgICAgICAgICAgICAgc3RyaXBWYWxpZFBvc2l0aW9ucyhwb3MuYmVnaW4sIHBvcy5lbmQsICExLCBzdHJpY3QpLCAhMCAhPT0gc3RyaWN0ICYmIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5rZWVwU3RhdGljKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB2YWxpZElucHV0cyA9IFtdLCBsYXN0QWx0ID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oLTEsICEwKSwgcG9zaXRpb25zQ2xvbmUgPSAkLmV4dGVuZCghMCwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksIHByZXZBbHRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF07IGxhc3RBbHQgPj0gMDsgbGFzdEFsdC0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsYXN0QWx0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghMCAhPT0gYWx0UG9zLmdlbmVyYXRlZElucHV0ICYmIC9bMC05YS1iQS1aXS8udGVzdChhbHRQb3MuaW5wdXQpICYmIHZhbGlkSW5wdXRzLnB1c2goYWx0UG9zLmlucHV0KSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF0sIGFsdFBvcy5hbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkICYmIGFsdFBvcy5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0gIT09IHByZXZBbHRQb3MubG9jYXRvclthbHRQb3MuYWx0ZXJuYXRpb25dKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldkFsdFBvcyA9IGFsdFBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEFsdCA+IC0xKSBmb3IgKGdldE1hc2tTZXQoKS5wID0gc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oLTEsICEwKSk7IHZhbGlkSW5wdXRzLmxlbmd0aCA+IDA7ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlwcmVzcyA9IG5ldyAkLkV2ZW50KFwia2V5cHJlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5cHJlc3Mud2hpY2ggPSB2YWxpZElucHV0cy5wb3AoKS5jaGFyQ29kZUF0KDApLCBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsICEwLCAhMSwgITEsIGdldE1hc2tTZXQoKS5wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHBvc2l0aW9uc0Nsb25lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0oKTtcbiAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24ocG9zLmJlZ2luLCAhMCk7XG4gICAgICAgICAgICAgICAgaWYgKGx2cCA8IHBvcy5iZWdpbikgZ2V0TWFza1NldCgpLnAgPSBzZWVrTmV4dChsdnApOyBlbHNlIGlmICghMCAhPT0gc3RyaWN0ICYmIChnZXRNYXNrU2V0KCkucCA9IHBvcy5iZWdpbiwgXG4gICAgICAgICAgICAgICAgITAgIT09IGZyb21Jc1ZhbGlkKSkgZm9yICg7Z2V0TWFza1NldCgpLnAgPCBsdnAgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2dldE1hc2tTZXQoKS5wXSA9PT0gdW5kZWZpbmVkOyApIGdldE1hc2tTZXQoKS5wKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpbml0aWFsaXplQ29sb3JNYXNrKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZmluZENhcmV0UG9zKGNsaWVudHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zLCBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHN0eWxlIGluIGNvbXB1dGVkU3R5bGUpIGlzTmFOKHN0eWxlKSAmJiAtMSAhPT0gc3R5bGUuaW5kZXhPZihcImZvbnRcIikgJiYgKGUuc3R5bGVbc3R5bGVdID0gY29tcHV0ZWRTdHlsZVtzdHlsZV0pO1xuICAgICAgICAgICAgICAgICAgICBlLnN0eWxlLnRleHRUcmFuc2Zvcm0gPSBjb21wdXRlZFN0eWxlLnRleHRUcmFuc2Zvcm0sIGUuc3R5bGUubGV0dGVyU3BhY2luZyA9IGNvbXB1dGVkU3R5bGUubGV0dGVyU3BhY2luZywgXG4gICAgICAgICAgICAgICAgICAgIGUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCIsIGUuc3R5bGUuaGVpZ2h0ID0gXCJhdXRvXCIsIGUuc3R5bGUud2lkdGggPSBcImF1dG9cIiwgXG4gICAgICAgICAgICAgICAgICAgIGUuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCIsIGUuc3R5bGUud2hpdGVTcGFjZSA9IFwibm93cmFwXCIsIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGwsIGlucHV0VGV4dCA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSwgcHJldmlvdXNXaWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY2FyZXRQb3MgPSAwLCBpdGwgPSBpbnB1dFRleHQubGVuZ3RoOyBjYXJldFBvcyA8PSBpdGw7IGNhcmV0UG9zKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmlubmVySFRNTCArPSBpbnB1dFRleHQuY2hhckF0KGNhcmV0UG9zKSB8fCBcIl9cIiwgZS5vZmZzZXRXaWR0aCA+PSBjbGllbnR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldDEgPSBjbGllbnR4IC0gcHJldmlvdXNXaWR0aCwgb2Zmc2V0MiA9IGUub2Zmc2V0V2lkdGggLSBjbGllbnR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuaW5uZXJIVE1MID0gaW5wdXRUZXh0LmNoYXJBdChjYXJldFBvcyksIGNhcmV0UG9zID0gKG9mZnNldDEgLT0gZS5vZmZzZXRXaWR0aCAvIDMpIDwgb2Zmc2V0MiA/IGNhcmV0UG9zIC0gMSA6IGNhcmV0UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNXaWR0aCA9IGUub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZSksIGNhcmV0UG9zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IChpbnB1dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdykuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dCwgbnVsbCksIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5zdHlsZS53aWR0aCA9IGNvbXB1dGVkU3R5bGUud2lkdGgsIHRlbXBsYXRlLnN0eWxlLnRleHRBbGlnbiA9IGNvbXB1dGVkU3R5bGUudGV4dEFsaWduLCBcbiAgICAgICAgICAgICAgICAoY29sb3JNYXNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuY2xhc3NOYW1lID0gXCJpbS1jb2xvcm1hc2tcIiwgaW5wdXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29sb3JNYXNrLCBpbnB1dCksIFxuICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaW5wdXQpLCBjb2xvck1hc2suYXBwZW5kQ2hpbGQodGVtcGxhdGUpLCBjb2xvck1hc2suYXBwZW5kQ2hpbGQoaW5wdXQpLCBcbiAgICAgICAgICAgICAgICBpbnB1dC5zdHlsZS5sZWZ0ID0gdGVtcGxhdGUub2Zmc2V0TGVmdCArIFwicHhcIiwgJChpbnB1dCkub24oXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYXJldChpbnB1dCwgZmluZENhcmV0UG9zKGUuY2xpZW50WCkpLCBFdmVudEhhbmRsZXJzLmNsaWNrRXZlbnQuY2FsbChpbnB1dCwgWyBlIF0pO1xuICAgICAgICAgICAgICAgIH0pLCAkKGlucHV0KS5vbihcImtleWRvd25cIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnNoaWZ0S2V5IHx8ICExID09PSBvcHRzLmluc2VydE1vZGUgfHwgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckNvbG9yTWFzayhpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcmVuZGVyQ29sb3JNYXNrKGlucHV0LCBjYXJldFBvcywgY2xlYXIpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVTdGF0aWMoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzU3RhdGljIHx8IG51bGwgIT09IHRlc3QuZm4gJiYgdGVzdFBvcy5pbnB1dCAhPT0gdW5kZWZpbmVkID8gaXNTdGF0aWMgJiYgKG51bGwgIT09IHRlc3QuZm4gJiYgdGVzdFBvcy5pbnB1dCAhPT0gdW5kZWZpbmVkIHx8IFwiXCIgPT09IHRlc3QuZGVmKSAmJiAoaXNTdGF0aWMgPSAhMSwgXG4gICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZSArPSBcIjwvc3Bhbj5cIikgOiAoaXNTdGF0aWMgPSAhMCwgbWFza1RlbXBsYXRlICs9IFwiPHNwYW4gY2xhc3M9J2ltLXN0YXRpYyc+XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVDYXJldChmb3JjZSkge1xuICAgICAgICAgICAgICAgICAgICAhMCAhPT0gZm9yY2UgJiYgcG9zICE9PSBjYXJldFBvcy5iZWdpbiB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBpbnB1dCB8fCAobWFza1RlbXBsYXRlICs9IFwiPHNwYW4gY2xhc3M9J2ltLWNhcmV0JyBzdHlsZT0nYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7Ym9yZGVyLXJpZ2h0LXN0eWxlOiBzb2xpZDsnPjwvc3Bhbj5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB0ZXN0LCB0ZXN0UG9zLCBuZHhJbnRsenIsIG1hc2tUZW1wbGF0ZSA9IFwiXCIsIGlzU3RhdGljID0gITEsIHBvcyA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKGNvbG9yTWFzayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zID09PSB1bmRlZmluZWQgPyBjYXJldFBvcyA9IGNhcmV0KGlucHV0KSA6IGNhcmV0UG9zLmJlZ2luID09PSB1bmRlZmluZWQgJiYgKGNhcmV0UG9zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBjYXJldFBvc1xuICAgICAgICAgICAgICAgICAgICB9KSwgITAgIT09IGNsZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVDYXJldCgpLCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSA/ICh0ZXN0UG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0ZXN0UG9zLm1hdGNoLCBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKSwgaGFuZGxlU3RhdGljKCksIG1hc2tUZW1wbGF0ZSArPSBidWZmZXJbcG9zXSkgOiAodGVzdFBvcyA9IGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgcG9zIC0gMSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0ZXN0UG9zLm1hdGNoLCBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKSwgKCExID09PSBvcHRzLmppdE1hc2tpbmcgfHwgcG9zIDwgbHZwIHx8IFwibnVtYmVyXCIgPT0gdHlwZW9mIG9wdHMuaml0TWFza2luZyAmJiBpc0Zpbml0ZShvcHRzLmppdE1hc2tpbmcpICYmIG9wdHMuaml0TWFza2luZyA+IHBvcykgJiYgKGhhbmRsZVN0YXRpYygpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGUgKz0gZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSkpLCBwb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKChtYXhMZW5ndGggPT09IHVuZGVmaW5lZCB8fCBwb3MgPCBtYXhMZW5ndGgpICYmIChudWxsICE9PSB0ZXN0LmZuIHx8IFwiXCIgIT09IHRlc3QuZGVmKSB8fCBsdnAgPiBwb3MgfHwgaXNTdGF0aWMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLTEgPT09IG1hc2tUZW1wbGF0ZS5pbmRleE9mKFwiaW0tY2FyZXRcIikgJiYgaGFuZGxlQ2FyZXQoITApLCBpc1N0YXRpYyAmJiBoYW5kbGVTdGF0aWMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBjb2xvck1hc2suZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIilbMF07XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IG1hc2tUZW1wbGF0ZSwgaW5wdXQuaW5wdXRtYXNrLnBvc2l0aW9uQ29sb3JNYXNrKGlucHV0LCB0ZW1wbGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWFza3NldCA9IG1hc2tzZXQgfHwgdGhpcy5tYXNrc2V0LCBvcHRzID0gb3B0cyB8fCB0aGlzLm9wdHM7XG4gICAgICAgICAgICB2YXIgdW5kb1ZhbHVlLCAkZWwsIG1heExlbmd0aCwgY29sb3JNYXNrLCBpbnB1dG1hc2sgPSB0aGlzLCBlbCA9IHRoaXMuZWwsIGlzUlRMID0gdGhpcy5pc1JUTCwgc2tpcEtleVByZXNzRXZlbnQgPSAhMSwgc2tpcElucHV0RXZlbnQgPSAhMSwgaWdub3JhYmxlID0gITEsIG1vdXNlRW50ZXIgPSAhMSwgRXZlbnRSdWxlciA9IHtcbiAgICAgICAgICAgICAgICBvbjogZnVuY3Rpb24oaW5wdXQsIGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlucHV0bWFzayA9PT0gdW5kZWZpbmVkICYmIFwiRk9STVwiICE9PSB0aGlzLm5vZGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltT3B0cyA9ICQuZGF0YSh0aGlzLCBcIl9pbnB1dG1hc2tfb3B0c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbU9wdHMgPyBuZXcgSW5wdXRtYXNrKGltT3B0cykubWFzayh0aGlzKSA6IEV2ZW50UnVsZXIub2ZmKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzZXR2YWx1ZVwiID09PSBlLnR5cGUgfHwgXCJGT1JNXCIgPT09IHRoaXMubm9kZU5hbWUgfHwgISh0aGlzLmRpc2FibGVkIHx8IHRoaXMucmVhZE9ubHkgJiYgIShcImtleWRvd25cIiA9PT0gZS50eXBlICYmIGUuY3RybEtleSAmJiA2NyA9PT0gZS5rZXlDb2RlIHx8ICExID09PSBvcHRzLnRhYlRocm91Z2ggJiYgZS5rZXlDb2RlID09PSBJbnB1dG1hc2sua2V5Q29kZS5UQUIpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEwID09PSBza2lwSW5wdXRFdmVudCkgcmV0dXJuIHNraXBJbnB1dEV2ZW50ID0gITEsIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBLZXlQcmVzc0V2ZW50ID0gITEsIHNraXBJbnB1dEV2ZW50ID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEwID09PSBza2lwS2V5UHJlc3NFdmVudCkgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBLZXlQcmVzc0V2ZW50ID0gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjbGlja1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGllbW9iaWxlIHx8IGlwaG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApLCAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXJuVmFsID0gZXZlbnRIYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMSA9PT0gcmV0dXJuVmFsICYmIChlLnByZXZlbnREZWZhdWx0KCksIGUuc3RvcFByb3BhZ2F0aW9uKCkpLCByZXR1cm5WYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdID0gaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdIHx8IFtdLCBpbnB1dC5pbnB1dG1hc2suZXZlbnRzW2V2ZW50TmFtZV0ucHVzaChldiksIFxuICAgICAgICAgICAgICAgICAgICAtMSAhPT0gJC5pbkFycmF5KGV2ZW50TmFtZSwgWyBcInN1Ym1pdFwiLCBcInJlc2V0XCIgXSkgPyBudWxsICE9PSBpbnB1dC5mb3JtICYmICQoaW5wdXQuZm9ybSkub24oZXZlbnROYW1lLCBldikgOiAkKGlucHV0KS5vbihldmVudE5hbWUsIGV2KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9mZjogZnVuY3Rpb24oaW5wdXQsIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbnB1dG1hc2sgJiYgaW5wdXQuaW5wdXRtYXNrLmV2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50ID8gKGV2ZW50cyA9IFtdKVtldmVudF0gPSBpbnB1dC5pbnB1dG1hc2suZXZlbnRzW2V2ZW50XSA6IGV2ZW50cyA9IGlucHV0LmlucHV0bWFzay5ldmVudHMsIFxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGV2ZW50cywgZnVuY3Rpb24oZXZlbnROYW1lLCBldkFycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoO2V2QXJyLmxlbmd0aCA+IDA7ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXYgPSBldkFyci5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLTEgIT09ICQuaW5BcnJheShldmVudE5hbWUsIFsgXCJzdWJtaXRcIiwgXCJyZXNldFwiIF0pID8gbnVsbCAhPT0gaW5wdXQuZm9ybSAmJiAkKGlucHV0LmZvcm0pLm9mZihldmVudE5hbWUsIGV2KSA6ICQoaW5wdXQpLm9mZihldmVudE5hbWUsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgRXZlbnRIYW5kbGVycyA9IHtcbiAgICAgICAgICAgICAgICBrZXlkb3duRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIGsgPSBlLmtleUNvZGUsIHBvcyA9IGNhcmV0KGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSB8fCBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgfHwgaXBob25lICYmIGsgPT09IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRV9TQUZBUkkgfHwgZS5jdHJsS2V5ICYmIGsgPT09IElucHV0bWFzay5rZXlDb2RlLlggJiYgIWZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLCBldk5hbWUgPSBcIm9uXCIgKyBldmVudE5hbWUsIGlzU3VwcG9ydGVkID0gZXZOYW1lIGluIGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkIHx8IChlbC5zZXRBdHRyaWJ1dGUoZXZOYW1lLCBcInJldHVybjtcIiksIGlzU3VwcG9ydGVkID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBlbFtldk5hbWVdKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBlbCA9IG51bGwsIGlzU3VwcG9ydGVkO1xuICAgICAgICAgICAgICAgICAgICB9KFwiY3V0XCIpKSBlLnByZXZlbnREZWZhdWx0KCksIGhhbmRsZVJlbW92ZShpbnB1dCwgaywgcG9zKSwgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcighMCksIGdldE1hc2tTZXQoKS5wLCBlLCBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpLCBcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikgPyAkaW5wdXQudHJpZ2dlcihcImNsZWFyZWRcIikgOiAhMCA9PT0gaXNDb21wbGV0ZShnZXRCdWZmZXIoKSkgJiYgJGlucHV0LnRyaWdnZXIoXCJjb21wbGV0ZVwiKTsgZWxzZSBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuRU5EIHx8IGsgPT09IElucHV0bWFzay5rZXlDb2RlLlBBR0VfRE9XTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmluc2VydE1vZGUgfHwgY2FyZXRQb3MgIT09IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoIHx8IGUuc2hpZnRLZXkgfHwgY2FyZXRQb3MtLSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgZS5zaGlmdEtleSA/IHBvcy5iZWdpbiA6IGNhcmV0UG9zLCBjYXJldFBvcywgITApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuSE9NRSAmJiAhZS5zaGlmdEtleSB8fCBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5QQUdFX1VQID8gKGUucHJldmVudERlZmF1bHQoKSwgXG4gICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCAwLCBlLnNoaWZ0S2V5ID8gcG9zLmJlZ2luIDogMCwgITApKSA6IChvcHRzLnVuZG9PbkVzY2FwZSAmJiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5FU0NBUEUgfHwgOTAgPT09IGsgJiYgZS5jdHJsS2V5KSAmJiAhMCAhPT0gZS5hbHRLZXkgPyAoY2hlY2tWYWwoaW5wdXQsICEwLCAhMSwgdW5kb1ZhbHVlLnNwbGl0KFwiXCIpKSwgXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY2xpY2tcIikpIDogayAhPT0gSW5wdXRtYXNrLmtleUNvZGUuSU5TRVJUIHx8IGUuc2hpZnRLZXkgfHwgZS5jdHJsS2V5ID8gITAgPT09IG9wdHMudGFiVGhyb3VnaCAmJiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5UQUIgPyAoITAgPT09IGUuc2hpZnRLZXkgPyAobnVsbCA9PT0gZ2V0VGVzdChwb3MuYmVnaW4pLm1hdGNoLmZuICYmIChwb3MuYmVnaW4gPSBzZWVrTmV4dChwb3MuYmVnaW4pKSwgXG4gICAgICAgICAgICAgICAgICAgIHBvcy5lbmQgPSBzZWVrUHJldmlvdXMocG9zLmJlZ2luLCAhMCksIHBvcy5iZWdpbiA9IHNlZWtQcmV2aW91cyhwb3MuZW5kLCAhMCkpIDogKHBvcy5iZWdpbiA9IHNlZWtOZXh0KHBvcy5iZWdpbiwgITApLCBcbiAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCA9IHNlZWtOZXh0KHBvcy5iZWdpbiwgITApLCBwb3MuZW5kIDwgZ2V0TWFza1NldCgpLm1hc2tMZW5ndGggJiYgcG9zLmVuZC0tKSwgXG4gICAgICAgICAgICAgICAgICAgIHBvcy5iZWdpbiA8IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoICYmIChlLnByZXZlbnREZWZhdWx0KCksIGNhcmV0KGlucHV0LCBwb3MuYmVnaW4sIHBvcy5lbmQpKSkgOiBlLnNoaWZ0S2V5IHx8ICExID09PSBvcHRzLmluc2VydE1vZGUgJiYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLlJJR0hUID8gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IGNhcmV0KGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBjYXJldFBvcy5iZWdpbik7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApIDogayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuTEVGVCAmJiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGlzUlRMID8gY2FyZXRQb3MuYmVnaW4gKyAxIDogY2FyZXRQb3MuYmVnaW4gLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCkpIDogKG9wdHMuaW5zZXJ0TW9kZSA9ICFvcHRzLmluc2VydE1vZGUsIGNhcmV0KGlucHV0LCBvcHRzLmluc2VydE1vZGUgfHwgcG9zLmJlZ2luICE9PSBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCA/IHBvcy5iZWdpbiA6IHBvcy5iZWdpbiAtIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5vbktleURvd24uY2FsbCh0aGlzLCBlLCBnZXRCdWZmZXIoKSwgY2FyZXQoaW5wdXQpLmJlZ2luLCBvcHRzKSwgaWdub3JhYmxlID0gLTEgIT09ICQuaW5BcnJheShrLCBvcHRzLmlnbm9yYWJsZXMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAga2V5cHJlc3NFdmVudDogZnVuY3Rpb24oZSwgY2hlY2t2YWwsIHdyaXRlT3V0LCBzdHJpY3QsIG5keCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCAkaW5wdXQgPSAkKGlucHV0KSwgayA9IGUud2hpY2ggfHwgZS5jaGFyQ29kZSB8fCBlLmtleUNvZGU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKCEwID09PSBjaGVja3ZhbCB8fCBlLmN0cmxLZXkgJiYgZS5hbHRLZXkpICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGlnbm9yYWJsZSkpIHJldHVybiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5FTlRFUiAmJiB1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikgJiYgKHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApKSwgITA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICA0NiA9PT0gayAmJiAhMSA9PT0gZS5zaGlmdEtleSAmJiBcIlwiICE9PSBvcHRzLnJhZGl4UG9pbnQgJiYgKGsgPSBvcHRzLnJhZGl4UG9pbnQuY2hhckNvZGVBdCgwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9yd2FyZFBvc2l0aW9uLCBwb3MgPSBjaGVja3ZhbCA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogbmR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogbmR4XG4gICAgICAgICAgICAgICAgICAgICAgICB9IDogY2FyZXQoaW5wdXQpLCBjID0gU3RyaW5nLmZyb21DaGFyQ29kZShrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS53cml0ZU91dEJ1ZmZlciA9ICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbFJlc3VsdCA9IGlzVmFsaWQocG9zLCBjLCBzdHJpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCExICE9PSB2YWxSZXN1bHQgJiYgKHJlc2V0TWFza1NldCghMCksIGZvcndhcmRQb3NpdGlvbiA9IHZhbFJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkID8gdmFsUmVzdWx0LmNhcmV0IDogY2hlY2t2YWwgPyB2YWxSZXN1bHQucG9zICsgMSA6IHNlZWtOZXh0KHZhbFJlc3VsdC5wb3MpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gZm9yd2FyZFBvc2l0aW9uKSwgITEgIT09IHdyaXRlT3V0ICYmIChzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMub25LZXlWYWxpZGF0aW9uLmNhbGwoaW5wdXQsIGssIHZhbFJlc3VsdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKSwgZ2V0TWFza1NldCgpLndyaXRlT3V0QnVmZmVyICYmICExICE9PSB2YWxSZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBidWZmZXIsIG9wdHMubnVtZXJpY0lucHV0ICYmIHZhbFJlc3VsdC5jYXJldCA9PT0gdW5kZWZpbmVkID8gc2Vla1ByZXZpb3VzKGZvcndhcmRQb3NpdGlvbikgOiBmb3J3YXJkUG9zaXRpb24sIGUsICEwICE9PSBjaGVja3ZhbCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICEwICE9PSBjaGVja3ZhbCAmJiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMCA9PT0gaXNDb21wbGV0ZShidWZmZXIpICYmICRpbnB1dC50cmlnZ2VyKFwiY29tcGxldGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCgpLCBjaGVja3ZhbCkgcmV0dXJuICExICE9PSB2YWxSZXN1bHQgJiYgKHZhbFJlc3VsdC5mb3J3YXJkUG9zaXRpb24gPSBmb3J3YXJkUG9zaXRpb24pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbFJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGFzdGVFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcFZhbHVlLCBpbnB1dCA9IHRoaXMsIGV2ID0gZS5vcmlnaW5hbEV2ZW50IHx8IGUsICRpbnB1dCA9ICQoaW5wdXQpLCBpbnB1dFZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCghMCksIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBpc1JUTCAmJiAodGVtcFZhbHVlID0gY2FyZXRQb3MuZW5kLCBjYXJldFBvcy5lbmQgPSBjYXJldFBvcy5iZWdpbiwgY2FyZXRQb3MuYmVnaW4gPSB0ZW1wVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVCZWZvcmVDYXJldCA9IGlucHV0VmFsdWUuc3Vic3RyKDAsIGNhcmV0UG9zLmJlZ2luKSwgdmFsdWVBZnRlckNhcmV0ID0gaW5wdXRWYWx1ZS5zdWJzdHIoY2FyZXRQb3MuZW5kLCBpbnB1dFZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUJlZm9yZUNhcmV0ID09PSAoaXNSVEwgPyBnZXRCdWZmZXJUZW1wbGF0ZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlclRlbXBsYXRlKCkpLnNsaWNlKDAsIGNhcmV0UG9zLmJlZ2luKS5qb2luKFwiXCIpICYmICh2YWx1ZUJlZm9yZUNhcmV0ID0gXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZUFmdGVyQ2FyZXQgPT09IChpc1JUTCA/IGdldEJ1ZmZlclRlbXBsYXRlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyVGVtcGxhdGUoKSkuc2xpY2UoY2FyZXRQb3MuZW5kKS5qb2luKFwiXCIpICYmICh2YWx1ZUFmdGVyQ2FyZXQgPSBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIGlzUlRMICYmICh0ZW1wVmFsdWUgPSB2YWx1ZUJlZm9yZUNhcmV0LCB2YWx1ZUJlZm9yZUNhcmV0ID0gdmFsdWVBZnRlckNhcmV0LCB2YWx1ZUFmdGVyQ2FyZXQgPSB0ZW1wVmFsdWUpLCBcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsaXBib2FyZERhdGEgJiYgd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSkgaW5wdXRWYWx1ZSA9IHZhbHVlQmVmb3JlQ2FyZXQgKyB3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKFwiVGV4dFwiKSArIHZhbHVlQWZ0ZXJDYXJldDsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWV2LmNsaXBib2FyZERhdGEgfHwgIWV2LmNsaXBib2FyZERhdGEuZ2V0RGF0YSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHZhbHVlQmVmb3JlQ2FyZXQgKyBldi5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpICsgdmFsdWVBZnRlckNhcmV0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXN0ZVZhbHVlID0gaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlUGFzdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoITEgPT09IChwYXN0ZVZhbHVlID0gb3B0cy5vbkJlZm9yZVBhc3RlLmNhbGwoaW5wdXRtYXNrLCBpbnB1dFZhbHVlLCBvcHRzKSkpIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXN0ZVZhbHVlIHx8IChwYXN0ZVZhbHVlID0gaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrVmFsKGlucHV0LCAhMSwgITEsIGlzUlRMID8gcGFzdGVWYWx1ZS5zcGxpdChcIlwiKS5yZXZlcnNlKCkgOiBwYXN0ZVZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoXCJcIikpLCBcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSwgZSwgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSwgXG4gICAgICAgICAgICAgICAgICAgICEwID09PSBpc0NvbXBsZXRlKGdldEJ1ZmZlcigpKSAmJiAkaW5wdXQudHJpZ2dlcihcImNvbXBsZXRlXCIpLCBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnB1dEZhbGxCYWNrRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgaW5wdXRWYWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldEJ1ZmZlcigpLmpvaW4oXCJcIikgIT09IGlucHV0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IGNhcmV0KGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghMSA9PT0gZnVuY3Rpb24oaW5wdXQsIGlucHV0VmFsdWUsIGNhcmV0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiLlwiID09PSBpbnB1dFZhbHVlLmNoYXJBdChjYXJldFBvcy5iZWdpbiAtIDEpICYmIFwiXCIgIT09IG9wdHMucmFkaXhQb2ludCAmJiAoKGlucHV0VmFsdWUgPSBpbnB1dFZhbHVlLnNwbGl0KFwiXCIpKVtjYXJldFBvcy5iZWdpbiAtIDFdID0gb3B0cy5yYWRpeFBvaW50LmNoYXJBdCgwKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IGlucHV0VmFsdWUuam9pbihcIlwiKSksIGlucHV0VmFsdWUuY2hhckF0KGNhcmV0UG9zLmJlZ2luIC0gMSkgPT09IG9wdHMucmFkaXhQb2ludCAmJiBpbnB1dFZhbHVlLmxlbmd0aCA+IGdldEJ1ZmZlcigpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcImtleXByZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5cHJlc3Mud2hpY2ggPSBvcHRzLnJhZGl4UG9pbnQuY2hhckNvZGVBdCgwKSwgRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzLCAhMCwgITAsICExLCBjYXJldFBvcy5iZWdpbiAtIDEpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfShpbnB1dCwgaW5wdXRWYWx1ZSwgY2FyZXRQb3MpKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSA9IGlucHV0VmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiKFwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSkgKyBcIikqXCIpLCBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAhMSA9PT0gZnVuY3Rpb24oaW5wdXQsIGlucHV0VmFsdWUsIGNhcmV0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGllbW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dENoYXIgPSBpbnB1dFZhbHVlLnJlcGxhY2UoZ2V0QnVmZmVyKCkuam9pbihcIlwiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgxID09PSBpbnB1dENoYXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcImtleXByZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleXByZXNzLndoaWNoID0gaW5wdXRDaGFyLmNoYXJDb2RlQXQoMCksIEV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcywgITAsICEwLCAhMSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2NhcmV0UG9zLmJlZ2luIC0gMV0gPyBjYXJldFBvcy5iZWdpbiA6IGNhcmV0UG9zLmJlZ2luIC0gMSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KGlucHV0LCBpbnB1dFZhbHVlLCBjYXJldFBvcykpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zLmJlZ2luID4gaW5wdXRWYWx1ZS5sZW5ndGggJiYgKGNhcmV0KGlucHV0LCBpbnB1dFZhbHVlLmxlbmd0aCksIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLCBmcm9udFBhcnQgPSBpbnB1dFZhbHVlLnN1YnN0cigwLCBjYXJldFBvcy5iZWdpbiksIGJhY2tQYXJ0ID0gaW5wdXRWYWx1ZS5zdWJzdHIoY2FyZXRQb3MuYmVnaW4pLCBmcm9udEJ1ZmZlclBhcnQgPSBidWZmZXIuc3Vic3RyKDAsIGNhcmV0UG9zLmJlZ2luKSwgYmFja0J1ZmZlclBhcnQgPSBidWZmZXIuc3Vic3RyKGNhcmV0UG9zLmJlZ2luKSwgc2VsZWN0aW9uID0gY2FyZXRQb3MsIGVudHJpZXMgPSBcIlwiLCBpc0VudHJ5ID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbnRQYXJ0ICE9PSBmcm9udEJ1ZmZlclBhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYmVnaW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGZwbCA9IChpc0VudHJ5ID0gZnJvbnRQYXJ0Lmxlbmd0aCA+PSBmcm9udEJ1ZmZlclBhcnQubGVuZ3RoKSA/IGZyb250UGFydC5sZW5ndGggOiBmcm9udEJ1ZmZlclBhcnQubGVuZ3RoLCBpID0gMDsgZnJvbnRQYXJ0LmNoYXJBdChpKSA9PT0gZnJvbnRCdWZmZXJQYXJ0LmNoYXJBdChpKSAmJiBpIDwgZnBsOyBpKyspIHNlbGVjdGlvbi5iZWdpbisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRW50cnkgJiYgKGVudHJpZXMgKz0gZnJvbnRQYXJ0LnNsaWNlKHNlbGVjdGlvbi5iZWdpbiwgc2VsZWN0aW9uLmVuZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja1BhcnQgIT09IGJhY2tCdWZmZXJQYXJ0ICYmIChiYWNrUGFydC5sZW5ndGggPiBiYWNrQnVmZmVyUGFydC5sZW5ndGggPyBpc0VudHJ5ICYmIChzZWxlY3Rpb24uZW5kID0gc2VsZWN0aW9uLmJlZ2luKSA6IGJhY2tQYXJ0Lmxlbmd0aCA8IGJhY2tCdWZmZXJQYXJ0Lmxlbmd0aCA/IHNlbGVjdGlvbi5lbmQgKz0gYmFja0J1ZmZlclBhcnQubGVuZ3RoIC0gYmFja1BhcnQubGVuZ3RoIDogYmFja1BhcnQuY2hhckF0KDApICE9PSBiYWNrQnVmZmVyUGFydC5jaGFyQXQoMCkgJiYgc2VsZWN0aW9uLmVuZCsrKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIHNlbGVjdGlvbiksIGVudHJpZXMubGVuZ3RoID4gMCA/ICQuZWFjaChlbnRyaWVzLnNwbGl0KFwiXCIpLCBmdW5jdGlvbihuZHgsIGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleXByZXNzID0gbmV3ICQuRXZlbnQoXCJrZXlwcmVzc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IGVudHJ5LmNoYXJDb2RlQXQoMCksIGlnbm9yYWJsZSA9ICExLCBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiAoc2VsZWN0aW9uLmJlZ2luID09PSBzZWxlY3Rpb24uZW5kIC0gMSAmJiBjYXJldChpbnB1dCwgc2Vla1ByZXZpb3VzKHNlbGVjdGlvbi5iZWdpbiArIDEpLCBzZWxlY3Rpb24uZW5kKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmtleUNvZGUgPSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUsIEV2ZW50SGFuZGxlcnMua2V5ZG93bkV2ZW50LmNhbGwoaW5wdXQsIGUpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldFZhbHVlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dG1hc2sucmVmcmVzaFZhbHVlID0gITE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIHZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCghMCk7XG4gICAgICAgICAgICAgICAgICAgICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgJiYgKHZhbHVlID0gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIHZhbHVlLCBvcHRzKSB8fCB2YWx1ZSksIFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNwbGl0KFwiXCIpLCBjaGVja1ZhbChpbnB1dCwgITAsICExLCBpc1JUTCA/IHZhbHVlLnJldmVyc2UoKSA6IHZhbHVlKSwgXG4gICAgICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIiksIChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzIHx8IG9wdHMuY2xlYXJJbmNvbXBsZXRlKSAmJiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSAmJiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KFwiXCIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZm9jdXNFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCBucHRWYWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5zaG93TWFza09uRm9jdXMgJiYgKCFvcHRzLnNob3dNYXNrT25Ib3ZlciB8fCBvcHRzLnNob3dNYXNrT25Ib3ZlciAmJiBcIlwiID09PSBucHRWYWx1ZSkgJiYgKGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSA/IHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSkpIDogITEgPT09IG1vdXNlRW50ZXIgJiYgY2FyZXQoaW5wdXQsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKSksIFxuICAgICAgICAgICAgICAgICAgICAhMCA9PT0gb3B0cy5wb3NpdGlvbkNhcmV0T25UYWIgJiYgITEgPT09IG1vdXNlRW50ZXIgJiYgXCJcIiAhPT0gbnB0VmFsdWUgJiYgKHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgY2FyZXQoaW5wdXQpKSwgXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudC5hcHBseShpbnB1dCwgWyBlLCAhMCBdKSksIHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtb3VzZWxlYXZlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vdXNlRW50ZXIgPSAhMSwgb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLnNsaWNlKCksIG5wdFZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbnB0VmFsdWUgIT09IGlucHV0LmdldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpICYmIFwiXCIgIT09IG5wdFZhbHVlICYmICgtMSA9PT0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSAmJiBucHRWYWx1ZSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpID8gYnVmZmVyID0gW10gOiBjbGVhck9wdGlvbmFsVGFpbChidWZmZXIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBidWZmZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2xpY2tFdmVudDogZnVuY3Rpb24oZSwgdGFiYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvUmFkaXhGb2N1cyhjbGlja1Bvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiXCIgIT09IG9wdHMucmFkaXhQb2ludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZwc1tjbGlja1Bvc10gPT09IHVuZGVmaW5lZCB8fCB2cHNbY2xpY2tQb3NdLmlucHV0ID09PSBnZXRQbGFjZWhvbGRlcihjbGlja1BvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrUG9zIDwgc2Vla05leHQoLTEpKSByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFBvcyA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGdldEJ1ZmZlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC0xICE9PSByYWRpeFBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdnAgaW4gdnBzKSBpZiAocmFkaXhQb3MgPCB2cCAmJiB2cHNbdnBdLmlucHV0ICE9PSBnZXRQbGFjZWhvbGRlcih2cCkpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ2FyZXQgPSBjYXJldChpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmJlZCAmJiAoaXNSVEwgPyBzZWxlY3RlZENhcmV0LmVuZCA9IHNlbGVjdGVkQ2FyZXQuYmVnaW4gOiBzZWxlY3RlZENhcmV0LmJlZ2luID0gc2VsZWN0ZWRDYXJldC5lbmQpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENhcmV0LmJlZ2luID09PSBzZWxlY3RlZENhcmV0LmVuZCkgc3dpdGNoIChvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm9uZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJhZGl4Rm9jdXNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvUmFkaXhGb2N1cyhzZWxlY3RlZENhcmV0LmJlZ2luKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgb3B0cy5udW1lcmljSW5wdXQgPyBzZWVrTmV4dChyYWRpeFBvcykgOiByYWRpeFBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xpY2tQb3NpdGlvbiA9IHNlbGVjdGVkQ2FyZXQuYmVnaW4sIGx2Y2xpY2tQb3NpdGlvbiA9IGdldExhc3RWYWxpZFBvc2l0aW9uKGNsaWNrUG9zaXRpb24sICEwKSwgbGFzdFBvc2l0aW9uID0gc2Vla05leHQobHZjbGlja1Bvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrUG9zaXRpb24gPCBsYXN0UG9zaXRpb24pIGNhcmV0KGlucHV0LCBpc01hc2soY2xpY2tQb3NpdGlvbiwgITApIHx8IGlzTWFzayhjbGlja1Bvc2l0aW9uIC0gMSwgITApID8gY2xpY2tQb3NpdGlvbiA6IHNlZWtOZXh0KGNsaWNrUG9zaXRpb24pKTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2Y2xpY2tQb3NpdGlvbl0sIHR0ID0gZ2V0VGVzdFRlbXBsYXRlKGxhc3RQb3NpdGlvbiwgbHZwID8gbHZwLm1hdGNoLmxvY2F0b3IgOiB1bmRlZmluZWQsIGx2cCksIHBsYWNlaG9sZGVyID0gZ2V0UGxhY2Vob2xkZXIobGFzdFBvc2l0aW9uLCB0dC5tYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJcIiAhPT0gcGxhY2Vob2xkZXIgJiYgZ2V0QnVmZmVyKClbbGFzdFBvc2l0aW9uXSAhPT0gcGxhY2Vob2xkZXIgJiYgITAgIT09IHR0Lm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAmJiAhMCAhPT0gdHQubWF0Y2gubmV3QmxvY2tNYXJrZXIgfHwgIWlzTWFzayhsYXN0UG9zaXRpb24sICEwKSAmJiB0dC5tYXRjaC5kZWYgPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1BvcyA9IHNlZWtOZXh0KGxhc3RQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWNrUG9zaXRpb24gPj0gbmV3UG9zIHx8IGNsaWNrUG9zaXRpb24gPT09IGxhc3RQb3NpdGlvbikgJiYgKGxhc3RQb3NpdGlvbiA9IG5ld1Bvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgbGFzdFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYmxjbGlja0V2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgMCwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSkpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGN1dEV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsICRpbnB1dCA9ICQoaW5wdXQpLCBwb3MgPSBjYXJldChpbnB1dCksIGV2ID0gZS5vcmlnaW5hbEV2ZW50IHx8IGUsIGNsaXBib2FyZERhdGEgPSB3aW5kb3cuY2xpcGJvYXJkRGF0YSB8fCBldi5jbGlwYm9hcmREYXRhLCBjbGlwRGF0YSA9IGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UocG9zLmVuZCwgcG9zLmJlZ2luKSA6IGdldEJ1ZmZlcigpLnNsaWNlKHBvcy5iZWdpbiwgcG9zLmVuZCk7XG4gICAgICAgICAgICAgICAgICAgIGNsaXBib2FyZERhdGEuc2V0RGF0YShcInRleHRcIiwgaXNSVEwgPyBjbGlwRGF0YS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IGNsaXBEYXRhLmpvaW4oXCJcIikpLCBcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQgJiYgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpLCBoYW5kbGVSZW1vdmUoaW5wdXQsIElucHV0bWFzay5rZXlDb2RlLkRFTEVURSwgcG9zKSwgXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgZ2V0TWFza1NldCgpLnAsIGUsIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSksIFxuICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSAmJiAkaW5wdXQudHJpZ2dlcihcImNsZWFyZWRcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBibHVyRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyksIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmlucHV0bWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5wdFZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLCBidWZmZXIgPSBnZXRCdWZmZXIoKS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJcIiAhPT0gbnB0VmFsdWUgJiYgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgJiYgKC0xID09PSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpICYmIG5wdFZhbHVlID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikgPyBidWZmZXIgPSBbXSA6IGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcikpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICExID09PSBpc0NvbXBsZXRlKGJ1ZmZlcikgJiYgKHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJpbmNvbXBsZXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCksIG9wdHMuY2xlYXJJbmNvbXBsZXRlICYmIChyZXNldE1hc2tTZXQoKSwgYnVmZmVyID0gb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyA/IFtdIDogZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZSgpKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgdW5kZWZpbmVkLCBlKSksIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAmJiAodW5kb1ZhbHVlID0gYnVmZmVyLmpvaW4oXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjaGFuZ2VcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtb3VzZWVudGVyRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgbW91c2VFbnRlciA9ICEwLCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBpbnB1dCAmJiBvcHRzLnNob3dNYXNrT25Ib3ZlciAmJiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikgJiYgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Ym1pdEV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAmJiAkZWwudHJpZ2dlcihcImNoYW5nZVwiKSwgb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiAtMSA9PT0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSAmJiBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0ICYmIGVsLmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpICYmIGVsLmlucHV0bWFzay5fdmFsdWVTZXQoXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICBvcHRzLnJlbW92ZU1hc2tPblN1Ym1pdCAmJiAoZWwuaW5wdXRtYXNrLl92YWx1ZVNldChlbC5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpLCAhMCksIFxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoZWwsIGdldEJ1ZmZlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVzZXRFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sucmVmcmVzaFZhbHVlID0gITAsIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkZWwudHJpZ2dlcihcInNldHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgSW5wdXRtYXNrLnByb3RvdHlwZS5wb3NpdGlvbkNvbG9yTWFzayA9IGZ1bmN0aW9uKGlucHV0LCB0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIGlucHV0LnN0eWxlLmxlZnQgPSB0ZW1wbGF0ZS5vZmZzZXRMZWZ0ICsgXCJweFwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciB2YWx1ZUJ1ZmZlcjtcbiAgICAgICAgICAgIGlmIChhY3Rpb25PYmogIT09IHVuZGVmaW5lZCkgc3dpdGNoIChhY3Rpb25PYmouYWN0aW9uKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJpc0NvbXBsZXRlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsID0gYWN0aW9uT2JqLmVsLCBpc0NvbXBsZXRlKGdldEJ1ZmZlcigpKTtcblxuICAgICAgICAgICAgICBjYXNlIFwidW5tYXNrZWR2YWx1ZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBlbCAhPT0gdW5kZWZpbmVkICYmIGFjdGlvbk9iai52YWx1ZSA9PT0gdW5kZWZpbmVkIHx8ICh2YWx1ZUJ1ZmZlciA9IGFjdGlvbk9iai52YWx1ZSwgXG4gICAgICAgICAgICAgICAgdmFsdWVCdWZmZXIgPSAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSA/IG9wdHMub25CZWZvcmVNYXNrLmNhbGwoaW5wdXRtYXNrLCB2YWx1ZUJ1ZmZlciwgb3B0cykgfHwgdmFsdWVCdWZmZXIgOiB2YWx1ZUJ1ZmZlcikuc3BsaXQoXCJcIiksIFxuICAgICAgICAgICAgICAgIGNoZWNrVmFsKHVuZGVmaW5lZCwgITEsICExLCBpc1JUTCA/IHZhbHVlQnVmZmVyLnJldmVyc2UoKSA6IHZhbHVlQnVmZmVyKSwgJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkgJiYgb3B0cy5vbkJlZm9yZVdyaXRlLmNhbGwoaW5wdXRtYXNrLCB1bmRlZmluZWQsIGdldEJ1ZmZlcigpLCAwLCBvcHRzKSksIFxuICAgICAgICAgICAgICAgIHVubWFza2VkdmFsdWUoZWwpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJtYXNrXCI6XG4gICAgICAgICAgICAgICAgIWZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vZmYoZWxlbSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1N1cHBvcnRlZCA9IGZ1bmN0aW9uKGlucHV0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFR5cGUgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpLCBpc1N1cHBvcnRlZCA9IFwiSU5QVVRcIiA9PT0gaW5wdXQudGFnTmFtZSAmJiAtMSAhPT0gJC5pbkFycmF5KGVsZW1lbnRUeXBlLCBvcHRzLnN1cHBvcnRzSW5wdXRUeXBlKSB8fCBpbnB1dC5pc0NvbnRlbnRFZGl0YWJsZSB8fCBcIlRFWFRBUkVBXCIgPT09IGlucHV0LnRhZ05hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzU3VwcG9ydGVkKSBpZiAoXCJJTlBVVFwiID09PSBpbnB1dC50YWdOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgZWxlbWVudFR5cGUpLCBpc1N1cHBvcnRlZCA9IFwidGV4dFwiID09PSBlbC50eXBlLCBlbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaXNTdXBwb3J0ZWQgPSBcInBhcnRpYWxcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMSAhPT0gaXNTdXBwb3J0ZWQgPyBmdW5jdGlvbihucHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXR0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0bWFzayA/IHRoaXMuaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzayA/IHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSA6IC0xICE9PSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpIHx8ICEwICE9PSBvcHRzLm51bGxhYmxlID8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gdGhpcyAmJiBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzID8gKGlzUlRMID8gY2xlYXJPcHRpb25hbFRhaWwoZ2V0QnVmZmVyKCkuc2xpY2UoKSkucmV2ZXJzZSgpIDogY2xlYXJPcHRpb25hbFRhaWwoZ2V0QnVmZmVyKCkuc2xpY2UoKSkpLmpvaW4oXCJcIikgOiB2YWx1ZUdldC5jYWxsKHRoaXMpIDogXCJcIiA6IHZhbHVlR2V0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldHRlcih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldC5jYWxsKHRoaXMsIHZhbHVlKSwgdGhpcy5pbnB1dG1hc2sgJiYgJCh0aGlzKS50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUdldCwgdmFsdWVTZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFucHQuaW5wdXRtYXNrLl9fdmFsdWVHZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEwICE9PSBvcHRzLm5vVmFsdWVQYXRjaGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiAoT2JqZWN0LmdldFByb3RvdHlwZU9mID0gXCJvYmplY3RcIiA9PT0gX3R5cGVvZihcInRlc3RcIi5fX3Byb3RvX18pID8gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3QuX19wcm90b19fO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlUHJvcGVydHkgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZihucHQpLCBcInZhbHVlXCIpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlUHJvcGVydHkgJiYgdmFsdWVQcm9wZXJ0eS5nZXQgJiYgdmFsdWVQcm9wZXJ0eS5zZXQgPyAodmFsdWVHZXQgPSB2YWx1ZVByb3BlcnR5LmdldCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQgPSB2YWx1ZVByb3BlcnR5LnNldCwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5wdCwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZ2V0dGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSA6IFwiSU5QVVRcIiAhPT0gbnB0LnRhZ05hbWUgJiYgKHZhbHVlR2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHZhbHVlU2V0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucHQsIFwidmFsdWVcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBzZXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZG9jdW1lbnQuX19sb29rdXBHZXR0ZXJfXyAmJiBucHQuX19sb29rdXBHZXR0ZXJfXyhcInZhbHVlXCIpICYmICh2YWx1ZUdldCA9IG5wdC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQgPSBucHQuX19sb29rdXBTZXR0ZXJfXyhcInZhbHVlXCIpLCBucHQuX19kZWZpbmVHZXR0ZXJfXyhcInZhbHVlXCIsIGdldHRlciksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0Ll9fZGVmaW5lU2V0dGVyX18oXCJ2YWx1ZVwiLCBzZXR0ZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5wdC5pbnB1dG1hc2suX192YWx1ZUdldCA9IHZhbHVlR2V0LCBucHQuaW5wdXRtYXNrLl9fdmFsdWVTZXQgPSB2YWx1ZVNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl92YWx1ZUdldCA9IGZ1bmN0aW9uKG92ZXJydWxlUlRMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNSVEwgJiYgITAgIT09IG92ZXJydWxlUlRMID8gdmFsdWVHZXQuY2FsbCh0aGlzLmVsKS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IHZhbHVlR2V0LmNhbGwodGhpcy5lbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG5wdC5pbnB1dG1hc2suX3ZhbHVlU2V0ID0gZnVuY3Rpb24odmFsdWUsIG92ZXJydWxlUlRMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldC5jYWxsKHRoaXMuZWwsIG51bGwgPT09IHZhbHVlIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBcIlwiIDogITAgIT09IG92ZXJydWxlUlRMICYmIGlzUlRMID8gdmFsdWUuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHZhbHVlR2V0ID09PSB1bmRlZmluZWQgJiYgKHZhbHVlR2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdmFsdWVTZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJC52YWxIb29rcyAmJiAoJC52YWxIb29rc1t0eXBlXSA9PT0gdW5kZWZpbmVkIHx8ICEwICE9PSAkLnZhbEhvb2tzW3R5cGVdLmlucHV0bWFza3BhdGNoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxob29rR2V0ID0gJC52YWxIb29rc1t0eXBlXSAmJiAkLnZhbEhvb2tzW3R5cGVdLmdldCA/ICQudmFsSG9va3NbdHlwZV0uZ2V0IDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB2YWxob29rU2V0ID0gJC52YWxIb29rc1t0eXBlXSAmJiAkLnZhbEhvb2tzW3R5cGVdLnNldCA/ICQudmFsSG9va3NbdHlwZV0uc2V0IDogZnVuY3Rpb24oZWxlbSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0udmFsdWUgPSB2YWx1ZSwgZWxlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQudmFsSG9va3NbdHlwZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uaW5wdXRtYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzaykgcmV0dXJuIGVsZW0uaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdmFsaG9va0dldChlbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTEgIT09IGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBlbGVtLmlucHV0bWFzay5tYXNrc2V0LnZhbGlkUG9zaXRpb25zKSB8fCAhMCAhPT0gb3B0cy5udWxsYWJsZSA/IHJlc3VsdCA6IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsaG9va0dldChlbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihlbGVtLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCwgJGVsZW0gPSAkKGVsZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCA9IHZhbGhvb2tTZXQoZWxlbSwgdmFsdWUpLCBlbGVtLmlucHV0bWFzayAmJiAkZWxlbS50cmlnZ2VyKFwic2V0dmFsdWVcIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dG1hc2twYXRjaDogITBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KG5wdC50eXBlKSwgZnVuY3Rpb24obnB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKG5wdCwgXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikgJiYgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KG5wdCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0oaW5wdXQpIDogaW5wdXQuaW5wdXRtYXNrID0gdW5kZWZpbmVkLCBpc1N1cHBvcnRlZDtcbiAgICAgICAgICAgICAgICAgICAgfShlbGVtLCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCExICE9PSBpc1N1cHBvcnRlZCAmJiAoZWwgPSBlbGVtLCAkZWwgPSAkKGVsKSwgLTEgPT09IChtYXhMZW5ndGggPSBlbCAhPT0gdW5kZWZpbmVkID8gZWwubWF4TGVuZ3RoIDogdW5kZWZpbmVkKSAmJiAobWF4TGVuZ3RoID0gdW5kZWZpbmVkKSwgXG4gICAgICAgICAgICAgICAgICAgICEwID09PSBvcHRzLmNvbG9yTWFzayAmJiBpbml0aWFsaXplQ29sb3JNYXNrKGVsKSwgYW5kcm9pZCAmJiAoZWwuaGFzT3duUHJvcGVydHkoXCJpbnB1dG1vZGVcIikgJiYgKGVsLmlucHV0bW9kZSA9IG9wdHMuaW5wdXRtb2RlLCBcbiAgICAgICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwiaW5wdXRtb2RlXCIsIG9wdHMuaW5wdXRtb2RlKSksIFwicnRmbVwiID09PSBvcHRzLmFuZHJvaWRIYWNrICYmICghMCAhPT0gb3B0cy5jb2xvck1hc2sgJiYgaW5pdGlhbGl6ZUNvbG9yTWFzayhlbCksIFxuICAgICAgICAgICAgICAgICAgICBlbC50eXBlID0gXCJwYXNzd29yZFwiKSksICEwID09PSBpc1N1cHBvcnRlZCAmJiAoRXZlbnRSdWxlci5vbihlbCwgXCJzdWJtaXRcIiwgRXZlbnRIYW5kbGVycy5zdWJtaXRFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcInJlc2V0XCIsIEV2ZW50SGFuZGxlcnMucmVzZXRFdmVudCksIEV2ZW50UnVsZXIub24oZWwsIFwibW91c2VlbnRlclwiLCBFdmVudEhhbmRsZXJzLm1vdXNlZW50ZXJFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImJsdXJcIiwgRXZlbnRIYW5kbGVycy5ibHVyRXZlbnQpLCBFdmVudFJ1bGVyLm9uKGVsLCBcImZvY3VzXCIsIEV2ZW50SGFuZGxlcnMuZm9jdXNFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcIm1vdXNlbGVhdmVcIiwgRXZlbnRIYW5kbGVycy5tb3VzZWxlYXZlRXZlbnQpLCAhMCAhPT0gb3B0cy5jb2xvck1hc2sgJiYgRXZlbnRSdWxlci5vbihlbCwgXCJjbGlja1wiLCBFdmVudEhhbmRsZXJzLmNsaWNrRXZlbnQpLCBcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJkYmxjbGlja1wiLCBFdmVudEhhbmRsZXJzLmRibGNsaWNrRXZlbnQpLCBFdmVudFJ1bGVyLm9uKGVsLCBcInBhc3RlXCIsIEV2ZW50SGFuZGxlcnMucGFzdGVFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImRyYWdkcm9wXCIsIEV2ZW50SGFuZGxlcnMucGFzdGVFdmVudCksIEV2ZW50UnVsZXIub24oZWwsIFwiZHJvcFwiLCBFdmVudEhhbmRsZXJzLnBhc3RlRXZlbnQpLCBcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJjdXRcIiwgRXZlbnRIYW5kbGVycy5jdXRFdmVudCksIEV2ZW50UnVsZXIub24oZWwsIFwiY29tcGxldGVcIiwgb3B0cy5vbmNvbXBsZXRlKSwgXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiaW5jb21wbGV0ZVwiLCBvcHRzLm9uaW5jb21wbGV0ZSksIEV2ZW50UnVsZXIub24oZWwsIFwiY2xlYXJlZFwiLCBvcHRzLm9uY2xlYXJlZCksIFxuICAgICAgICAgICAgICAgICAgICBhbmRyb2lkIHx8ICEwID09PSBvcHRzLmlucHV0RXZlbnRPbmx5ID8gZWwucmVtb3ZlQXR0cmlidXRlKFwibWF4TGVuZ3RoXCIpIDogKEV2ZW50UnVsZXIub24oZWwsIFwia2V5ZG93blwiLCBFdmVudEhhbmRsZXJzLmtleWRvd25FdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImtleXByZXNzXCIsIEV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudCkpLCBFdmVudFJ1bGVyLm9uKGVsLCBcImNvbXBvc2l0aW9uc3RhcnRcIiwgJC5ub29wKSwgXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiY29tcG9zaXRpb251cGRhdGVcIiwgJC5ub29wKSwgRXZlbnRSdWxlci5vbihlbCwgXCJjb21wb3NpdGlvbmVuZFwiLCAkLm5vb3ApLCBcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJrZXl1cFwiLCAkLm5vb3ApLCBFdmVudFJ1bGVyLm9uKGVsLCBcImlucHV0XCIsIEV2ZW50SGFuZGxlcnMuaW5wdXRGYWxsQmFja0V2ZW50KSwgXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiYmVmb3JlaW5wdXRcIiwgJC5ub29wKSksIEV2ZW50UnVsZXIub24oZWwsIFwic2V0dmFsdWVcIiwgRXZlbnRIYW5kbGVycy5zZXRWYWx1ZUV2ZW50KSwgXG4gICAgICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSwgXCJcIiAhPT0gZWwuaW5wdXRtYXNrLl92YWx1ZUdldCghMCkgfHwgITEgPT09IG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgfHwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbFZhbHVlID0gJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSA/IG9wdHMub25CZWZvcmVNYXNrLmNhbGwoaW5wdXRtYXNrLCBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKSwgb3B0cykgfHwgZWwuaW5wdXRtYXNrLl92YWx1ZUdldCghMCkgOiBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXCIgIT09IGluaXRpYWxWYWx1ZSAmJiBjaGVja1ZhbChlbCwgITAsICExLCBpc1JUTCA/IGluaXRpYWxWYWx1ZS5zcGxpdChcIlwiKS5yZXZlcnNlKCkgOiBpbml0aWFsVmFsdWUuc3BsaXQoXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBidWZmZXIuam9pbihcIlwiKSwgITEgPT09IGlzQ29tcGxldGUoYnVmZmVyKSAmJiBvcHRzLmNsZWFySW5jb21wbGV0ZSAmJiByZXNldE1hc2tTZXQoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsICYmICgtMSA9PT0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSA/IGJ1ZmZlciA9IFtdIDogY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoZWwsIGJ1ZmZlciksIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsICYmIGNhcmV0KGVsLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KGVsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwiZm9ybWF0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQnVmZmVyID0gKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKGlucHV0bWFzaywgYWN0aW9uT2JqLnZhbHVlLCBvcHRzKSB8fCBhY3Rpb25PYmoudmFsdWUgOiBhY3Rpb25PYmoudmFsdWUpLnNwbGl0KFwiXCIpLCBcbiAgICAgICAgICAgICAgICBjaGVja1ZhbCh1bmRlZmluZWQsICEwLCAhMSwgaXNSVEwgPyB2YWx1ZUJ1ZmZlci5yZXZlcnNlKCkgOiB2YWx1ZUJ1ZmZlciksIGFjdGlvbk9iai5tZXRhZGF0YSA/IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IGdldEJ1ZmZlcigpLmpvaW4oXCJcIiksXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0bWV0YWRhdGFcIlxuICAgICAgICAgICAgICAgICAgICB9LCBtYXNrc2V0LCBvcHRzKVxuICAgICAgICAgICAgICAgIH0gOiBpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJpc1ZhbGlkXCI6XG4gICAgICAgICAgICAgICAgYWN0aW9uT2JqLnZhbHVlID8gKHZhbHVlQnVmZmVyID0gYWN0aW9uT2JqLnZhbHVlLnNwbGl0KFwiXCIpLCBjaGVja1ZhbCh1bmRlZmluZWQsICEwLCAhMCwgaXNSVEwgPyB2YWx1ZUJ1ZmZlci5yZXZlcnNlKCkgOiB2YWx1ZUJ1ZmZlcikpIDogYWN0aW9uT2JqLnZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKSwgcmwgPSBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbigpLCBsbWliID0gYnVmZmVyLmxlbmd0aCAtIDE7IGxtaWIgPiBybCAmJiAhaXNNYXNrKGxtaWIpOyBsbWliLS0pIDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyLnNwbGljZShybCwgbG1pYiArIDEgLSBybCksIGlzQ29tcGxldGUoYnVmZmVyKSAmJiBhY3Rpb25PYmoudmFsdWUgPT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImdldGVtcHR5bWFza1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIik7XG5cbiAgICAgICAgICAgICAgY2FzZSBcInJlbW92ZVwiOlxuICAgICAgICAgICAgICAgIGlmIChlbCAmJiBlbC5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsID0gJChlbCksIGVsLmlucHV0bWFzay5fdmFsdWVTZXQob3B0cy5hdXRvVW5tYXNrID8gdW5tYXNrZWR2YWx1ZShlbCkgOiBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKSksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9mZihlbCk7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YoZWwpLCBcInZhbHVlXCIpICYmIGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0ICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBlbC5pbnB1dG1hc2suX192YWx1ZVNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICAgICAgICAgICAgICAgICAgfSkgOiBkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fICYmIGVsLl9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKSAmJiBlbC5pbnB1dG1hc2suX192YWx1ZUdldCAmJiAoZWwuX19kZWZpbmVHZXR0ZXJfXyhcInZhbHVlXCIsIGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0KSwgXG4gICAgICAgICAgICAgICAgICAgIGVsLl9fZGVmaW5lU2V0dGVyX18oXCJ2YWx1ZVwiLCBlbC5pbnB1dG1hc2suX192YWx1ZVNldCkpLCBlbC5pbnB1dG1hc2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlbDtcblxuICAgICAgICAgICAgICBjYXNlIFwiZ2V0bWV0YWRhdGFcIjpcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0FycmF5KG1hc2tzZXQubWV0YWRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrVGFyZ2V0ID0gZ2V0TWFza1RlbXBsYXRlKCEwLCAwLCAhMSkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuZWFjaChtYXNrc2V0Lm1ldGFkYXRhLCBmdW5jdGlvbihuZHgsIG10ZHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtdGR0Lm1hc2sgPT09IG1hc2tUYXJnZXQpIHJldHVybiBtYXNrVGFyZ2V0ID0gbXRkdCwgITE7XG4gICAgICAgICAgICAgICAgICAgIH0pLCBtYXNrVGFyZ2V0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWFza3NldC5tZXRhZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LCBtb2JpbGUgPSAvbW9iaWxlL2kudGVzdCh1YSksIGllbW9iaWxlID0gL2llbW9iaWxlL2kudGVzdCh1YSksIGlwaG9uZSA9IC9pcGhvbmUvaS50ZXN0KHVhKSAmJiAhaWVtb2JpbGUsIGFuZHJvaWQgPSAvYW5kcm9pZC9pLnRlc3QodWEpICYmICFpZW1vYmlsZTtcbiAgICAgICAgcmV0dXJuIElucHV0bWFzay5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBkYXRhQXR0cmlidXRlOiBcImRhdGEtaW5wdXRtYXNrXCIsXG4gICAgICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIl9cIixcbiAgICAgICAgICAgICAgICBvcHRpb25hbG1hcmtlcjoge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJbXCIsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogXCJdXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHF1YW50aWZpZXJtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFwie1wiLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFwifVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBncm91cG1hcmtlcjoge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogXCIoXCIsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogXCIpXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFsdGVybmF0b3JtYXJrZXI6IFwifFwiLFxuICAgICAgICAgICAgICAgIGVzY2FwZUNoYXI6IFwiXFxcXFwiLFxuICAgICAgICAgICAgICAgIG1hc2s6IG51bGwsXG4gICAgICAgICAgICAgICAgcmVnZXg6IG51bGwsXG4gICAgICAgICAgICAgICAgb25jb21wbGV0ZTogJC5ub29wLFxuICAgICAgICAgICAgICAgIG9uaW5jb21wbGV0ZTogJC5ub29wLFxuICAgICAgICAgICAgICAgIG9uY2xlYXJlZDogJC5ub29wLFxuICAgICAgICAgICAgICAgIHJlcGVhdDogMCxcbiAgICAgICAgICAgICAgICBncmVlZHk6ICEwLFxuICAgICAgICAgICAgICAgIGF1dG9Vbm1hc2s6ICExLFxuICAgICAgICAgICAgICAgIHJlbW92ZU1hc2tPblN1Ym1pdDogITEsXG4gICAgICAgICAgICAgICAgY2xlYXJNYXNrT25Mb3N0Rm9jdXM6ICEwLFxuICAgICAgICAgICAgICAgIGluc2VydE1vZGU6ICEwLFxuICAgICAgICAgICAgICAgIGNsZWFySW5jb21wbGV0ZTogITEsXG4gICAgICAgICAgICAgICAgYWxpYXM6IG51bGwsXG4gICAgICAgICAgICAgICAgb25LZXlEb3duOiAkLm5vb3AsXG4gICAgICAgICAgICAgICAgb25CZWZvcmVNYXNrOiBudWxsLFxuICAgICAgICAgICAgICAgIG9uQmVmb3JlUGFzdGU6IGZ1bmN0aW9uKHBhc3RlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbCh0aGlzLCBwYXN0ZWRWYWx1ZSwgb3B0cykgOiBwYXN0ZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQmVmb3JlV3JpdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgb25Vbk1hc2s6IG51bGwsXG4gICAgICAgICAgICAgICAgc2hvd01hc2tPbkZvY3VzOiAhMCxcbiAgICAgICAgICAgICAgICBzaG93TWFza09uSG92ZXI6ICEwLFxuICAgICAgICAgICAgICAgIG9uS2V5VmFsaWRhdGlvbjogJC5ub29wLFxuICAgICAgICAgICAgICAgIHNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI6IFwiIFwiLFxuICAgICAgICAgICAgICAgIG51bWVyaWNJbnB1dDogITEsXG4gICAgICAgICAgICAgICAgcmlnaHRBbGlnbjogITEsXG4gICAgICAgICAgICAgICAgdW5kb09uRXNjYXBlOiAhMCxcbiAgICAgICAgICAgICAgICByYWRpeFBvaW50OiBcIlwiLFxuICAgICAgICAgICAgICAgIHJhZGl4UG9pbnREZWZpbml0aW9uU3ltYm9sOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZ3JvdXBTZXBhcmF0b3I6IFwiXCIsXG4gICAgICAgICAgICAgICAga2VlcFN0YXRpYzogbnVsbCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbkNhcmV0T25UYWI6ICEwLFxuICAgICAgICAgICAgICAgIHRhYlRocm91Z2g6ICExLFxuICAgICAgICAgICAgICAgIHN1cHBvcnRzSW5wdXRUeXBlOiBbIFwidGV4dFwiLCBcInRlbFwiLCBcInBhc3N3b3JkXCIgXSxcbiAgICAgICAgICAgICAgICBpZ25vcmFibGVzOiBbIDgsIDksIDEzLCAxOSwgMjcsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDUsIDQ2LCA5MywgMTEyLCAxMTMsIDExNCwgMTE1LCAxMTYsIDExNywgMTE4LCAxMTksIDEyMCwgMTIxLCAxMjIsIDEyMywgMCwgMjI5IF0sXG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBjYW5DbGVhclBvc2l0aW9uOiAkLm5vb3AsXG4gICAgICAgICAgICAgICAgcHJlVmFsaWRhdGlvbjogbnVsbCxcbiAgICAgICAgICAgICAgICBwb3N0VmFsaWRhdGlvbjogbnVsbCxcbiAgICAgICAgICAgICAgICBzdGF0aWNEZWZpbml0aW9uU3ltYm9sOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgaml0TWFza2luZzogITEsXG4gICAgICAgICAgICAgICAgbnVsbGFibGU6ICEwLFxuICAgICAgICAgICAgICAgIGlucHV0RXZlbnRPbmx5OiAhMSxcbiAgICAgICAgICAgICAgICBub1ZhbHVlUGF0Y2hpbmc6ICExLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2FyZXRPbkNsaWNrOiBcImx2cFwiLFxuICAgICAgICAgICAgICAgIGNhc2luZzogbnVsbCxcbiAgICAgICAgICAgICAgICBpbnB1dG1vZGU6IFwidmVyYmF0aW1cIixcbiAgICAgICAgICAgICAgICBjb2xvck1hc2s6ICExLFxuICAgICAgICAgICAgICAgIGFuZHJvaWRIYWNrOiAhMSxcbiAgICAgICAgICAgICAgICBpbXBvcnREYXRhQXR0cmlidXRlczogITBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgIFwiOVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC0577yRLe+8mV1cIixcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25TeW1ib2w6IFwiKlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbQS1aYS160JAt0Y/QgdGRw4Atw7/CtV1cIixcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25TeW1ib2w6IFwiKlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIipcIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOe+8kS3vvJlBLVphLXrQkC3Rj9CB0ZHDgC3Dv8K1XVwiLFxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbGlhc2VzOiB7fSxcbiAgICAgICAgICAgIG1hc2tzQ2FjaGU6IHt9LFxuICAgICAgICAgICAgbWFzazogZnVuY3Rpb24oZWxlbXMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbXBvcnRBdHRyaWJ1dGVPcHRpb25zKG5wdCwgb3B0cywgdXNlck9wdGlvbnMsIGRhdGFBdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEwID09PSBvcHRzLmltcG9ydERhdGFBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9uLCBkYXRhb3B0aW9ucywgb3B0aW9uRGF0YSwgcCwgaW1wb3J0T3B0aW9uID0gZnVuY3Rpb24ob3B0aW9uLCBvcHRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gKG9wdGlvbkRhdGEgPSBvcHRpb25EYXRhICE9PSB1bmRlZmluZWQgPyBvcHRpb25EYXRhIDogbnB0LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlICsgXCItXCIgKyBvcHRpb24pKSAmJiAoXCJzdHJpbmdcIiA9PSB0eXBlb2Ygb3B0aW9uRGF0YSAmJiAoMCA9PT0gb3B0aW9uLmluZGV4T2YoXCJvblwiKSA/IG9wdGlvbkRhdGEgPSB3aW5kb3dbb3B0aW9uRGF0YV0gOiBcImZhbHNlXCIgPT09IG9wdGlvbkRhdGEgPyBvcHRpb25EYXRhID0gITEgOiBcInRydWVcIiA9PT0gb3B0aW9uRGF0YSAmJiAob3B0aW9uRGF0YSA9ICEwKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJPcHRpb25zW29wdGlvbl0gPSBvcHRpb25EYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGF0dHJPcHRpb25zID0gbnB0LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyT3B0aW9ucyAmJiBcIlwiICE9PSBhdHRyT3B0aW9ucyAmJiAoYXR0ck9wdGlvbnMgPSBhdHRyT3B0aW9ucy5yZXBsYWNlKG5ldyBSZWdFeHAoXCInXCIsIFwiZ1wiKSwgJ1wiJyksIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YW9wdGlvbnMgPSBKU09OLnBhcnNlKFwie1wiICsgYXR0ck9wdGlvbnMgKyBcIn1cIikpLCBkYXRhb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwIGluIGRhdGFvcHRpb25zKSBpZiAoXCJhbGlhc1wiID09PSBwLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IGRhdGFvcHRpb25zW3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnRPcHRpb24oXCJhbGlhc1wiLCBvcHRpb25EYXRhKSwgdXNlck9wdGlvbnMuYWxpYXMgJiYgcmVzb2x2ZUFsaWFzKHVzZXJPcHRpb25zLmFsaWFzLCB1c2VyT3B0aW9ucywgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG9wdGlvbiBpbiBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocCBpbiBkYXRhb3B0aW9ucykgaWYgKHAudG9Mb3dlckNhc2UoKSA9PT0gb3B0aW9uLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSBkYXRhb3B0aW9uc1twXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydE9wdGlvbihvcHRpb24sIG9wdGlvbkRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmV4dGVuZCghMCwgb3B0cywgdXNlck9wdGlvbnMpLCAoXCJydGxcIiA9PT0gbnB0LmRpciB8fCBvcHRzLnJpZ2h0QWxpZ24pICYmIChucHQuc3R5bGUudGV4dEFsaWduID0gXCJyaWdodFwiKSwgXG4gICAgICAgICAgICAgICAgICAgIChcInJ0bFwiID09PSBucHQuZGlyIHx8IG9wdHMubnVtZXJpY0lucHV0KSAmJiAobnB0LmRpciA9IFwibHRyXCIsIG5wdC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXJcIiksIFxuICAgICAgICAgICAgICAgICAgICBvcHRzLmlzUlRMID0gITApLCBvcHRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIGVsZW1zICYmIChlbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1zKSB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1zKSksIFxuICAgICAgICAgICAgICAgIGVsZW1zID0gZWxlbXMubm9kZU5hbWUgPyBbIGVsZW1zIF0gOiBlbGVtcywgJC5lYWNoKGVsZW1zLCBmdW5jdGlvbihuZHgsIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY29wZWRPcHRzID0gJC5leHRlbmQoITAsIHt9LCB0aGF0Lm9wdHMpO1xuICAgICAgICAgICAgICAgICAgICBpbXBvcnRBdHRyaWJ1dGVPcHRpb25zKGVsLCBzY29wZWRPcHRzLCAkLmV4dGVuZCghMCwge30sIHRoYXQudXNlck9wdGlvbnMpLCB0aGF0LmRhdGFBdHRyaWJ1dGUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza3NldCA9IGdlbmVyYXRlTWFza1NldChzY29wZWRPcHRzLCB0aGF0Lm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICAgICAgICAgIG1hc2tzZXQgIT09IHVuZGVmaW5lZCAmJiAoZWwuaW5wdXRtYXNrICE9PSB1bmRlZmluZWQgJiYgKGVsLmlucHV0bWFzay5vcHRzLmF1dG9Vbm1hc2sgPSAhMCwgXG4gICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5yZW1vdmUoKSksIGVsLmlucHV0bWFzayA9IG5ldyBJbnB1dG1hc2sodW5kZWZpbmVkLCB1bmRlZmluZWQsICEwKSwgXG4gICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5vcHRzID0gc2NvcGVkT3B0cywgZWwuaW5wdXRtYXNrLm5vTWFza3NDYWNoZSA9IHRoYXQubm9NYXNrc0NhY2hlLCBlbC5pbnB1dG1hc2sudXNlck9wdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHRoYXQudXNlck9wdGlvbnMpLCBcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLmlzUlRMID0gc2NvcGVkT3B0cy5pc1JUTCB8fCBzY29wZWRPcHRzLm51bWVyaWNJbnB1dCwgZWwuaW5wdXRtYXNrLmVsID0gZWwsIFxuICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2subWFza3NldCA9IG1hc2tzZXQsICQuZGF0YShlbCwgXCJfaW5wdXRtYXNrX29wdHNcIiwgc2NvcGVkT3B0cyksIG1hc2tTY29wZS5jYWxsKGVsLmlucHV0bWFzaywge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcIm1hc2tcIlxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSksIGVsZW1zICYmIGVsZW1zWzBdID8gZWxlbXNbMF0uaW5wdXRtYXNrIHx8IHRoaXMgOiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wdGlvbjogZnVuY3Rpb24ob3B0aW9ucywgbm9yZW1hc2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2Ygb3B0aW9ucyA/IHRoaXMub3B0c1tvcHRpb25zXSA6IFwib2JqZWN0XCIgPT09ICh2b2lkIDAgPT09IG9wdGlvbnMgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvcHRpb25zKSkgPyAoJC5leHRlbmQodGhpcy51c2VyT3B0aW9ucywgb3B0aW9ucyksIFxuICAgICAgICAgICAgICAgIHRoaXMuZWwgJiYgITAgIT09IG5vcmVtYXNrICYmIHRoaXMubWFzayh0aGlzLmVsKSwgdGhpcykgOiB2b2lkIDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5tYXNrZWR2YWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXNrc2V0ID0gdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKSwgXG4gICAgICAgICAgICAgICAgbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwidW5tYXNrZWR2YWx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZW1vdmVcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldGVtcHR5bWFzazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSksIFxuICAgICAgICAgICAgICAgIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImdldGVtcHR5bWFza1wiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzTWFza2VkVmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5vcHRzLmF1dG9Vbm1hc2s7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNDb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSksIFxuICAgICAgICAgICAgICAgIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImlzQ29tcGxldGVcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldG1ldGFkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXNrc2V0ID0gdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKSwgXG4gICAgICAgICAgICAgICAgbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0bWV0YWRhdGFcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzVmFsaWQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSksIFxuICAgICAgICAgICAgICAgIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImlzVmFsaWRcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9ybWF0OiBmdW5jdGlvbih2YWx1ZSwgbWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXNrc2V0ID0gdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKSwgXG4gICAgICAgICAgICAgICAgbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZm9ybWF0XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5hbHlzZU1hc2s6IGZ1bmN0aW9uKG1hc2ssIHJlZ2V4TWFzaywgb3B0cykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE1hc2tUb2tlbihpc0dyb3VwLCBpc09wdGlvbmFsLCBpc1F1YW50aWZpZXIsIGlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBbXSwgdGhpcy5vcGVuR3JvdXAgPSBpc0dyb3VwIHx8ICExLCB0aGlzLmFsdGVybmF0b3JHcm91cCA9ICExLCB0aGlzLmlzR3JvdXAgPSBpc0dyb3VwIHx8ICExLCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc09wdGlvbmFsID0gaXNPcHRpb25hbCB8fCAhMSwgdGhpcy5pc1F1YW50aWZpZXIgPSBpc1F1YW50aWZpZXIgfHwgITEsIHRoaXMuaXNBbHRlcm5hdG9yID0gaXNBbHRlcm5hdG9yIHx8ICExLCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWFudGlmaWVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiAxXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluc2VydFRlc3REZWZpbml0aW9uKG10b2tlbiwgZWxlbWVudCwgcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkID8gcG9zaXRpb24gOiBtdG9rZW4ubWF0Y2hlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2TWF0Y2ggPSBtdG9rZW4ubWF0Y2hlc1twb3NpdGlvbiAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXhNYXNrKSAwID09PSBlbGVtZW50LmluZGV4T2YoXCJbXCIpIHx8IGVzY2FwZWQgJiYgL1xcXFxkfFxcXFxzfFxcXFx3XS9pLnRlc3QoZWxlbWVudCkgfHwgXCIuXCIgPT09IGVsZW1lbnQgPyBtdG9rZW4ubWF0Y2hlcy5zcGxpY2UocG9zaXRpb24rKywgMCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm46IG5ldyBSZWdFeHAoZWxlbWVudCwgb3B0cy5jYXNpbmcgPyBcImlcIiA6IFwiXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogbXRva2VuLmlzT3B0aW9uYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdCbG9ja01hcmtlcjogcHJldk1hdGNoID09PSB1bmRlZmluZWQgfHwgcHJldk1hdGNoLmRlZiAhPT0gZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVEZWY6IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgfSkgOiAoZXNjYXBlZCAmJiAoZWxlbWVudCA9IGVsZW1lbnRbZWxlbWVudC5sZW5ndGggLSAxXSksICQuZWFjaChlbGVtZW50LnNwbGl0KFwiXCIpLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZNYXRjaCA9IG10b2tlbi5tYXRjaGVzW3Bvc2l0aW9uIC0gMV0sIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6IG10b2tlbi5pc09wdGlvbmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCB8fCBwcmV2TWF0Y2guZGVmICE9PSBsbW50ICYmIG51bGwgIT09IHByZXZNYXRjaC5mbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgfHwgbG1udCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogb3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sICE9PSB1bmRlZmluZWQgPyBsbW50IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogbG1udFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSwgZXNjYXBlZCA9ICExOyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXNrZGVmID0gKG9wdHMuZGVmaW5pdGlvbnMgPyBvcHRzLmRlZmluaXRpb25zW2VsZW1lbnRdIDogdW5kZWZpbmVkKSB8fCBJbnB1dG1hc2sucHJvdG90eXBlLmRlZmluaXRpb25zW2VsZW1lbnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tkZWYgJiYgIWVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwcmV2YWxpZGF0b3JzID0gbWFza2RlZi5wcmV2YWxpZGF0b3IsIHByZXZhbGlkYXRvcnNMID0gcHJldmFsaWRhdG9ycyA/IHByZXZhbGlkYXRvcnMubGVuZ3RoIDogMCwgaSA9IDE7IGkgPCBtYXNrZGVmLmNhcmRpbmFsaXR5OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZhbGlkYXRvciA9IHByZXZhbGlkYXRvcnNMID49IGkgPyBwcmV2YWxpZGF0b3JzW2kgLSAxXSA6IFtdLCB2YWxpZGF0b3IgPSBwcmV2YWxpZGF0b3IudmFsaWRhdG9yLCBjYXJkaW5hbGl0eSA9IHByZXZhbGlkYXRvci5jYXJkaW5hbGl0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiB2YWxpZGF0b3IgPyBcInN0cmluZ1wiID09IHR5cGVvZiB2YWxpZGF0b3IgPyBuZXcgUmVnRXhwKHZhbGlkYXRvciwgb3B0cy5jYXNpbmcgPyBcImlcIiA6IFwiXCIpIDogbmV3IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVzdCA9IHZhbGlkYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oKSA6IG5ldyBSZWdFeHAoXCIuXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IGNhcmRpbmFsaXR5IHx8IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogbXRva2VuLmlzT3B0aW9uYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdCbG9ja01hcmtlcjogcHJldk1hdGNoID09PSB1bmRlZmluZWQgfHwgcHJldk1hdGNoLmRlZiAhPT0gKG1hc2tkZWYuZGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbWFza2RlZi5jYXNpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG1hc2tkZWYuZGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1hc2tkZWYucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVEZWY6IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHByZXZNYXRjaCA9IG10b2tlbi5tYXRjaGVzW3Bvc2l0aW9uIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBtYXNrZGVmLnZhbGlkYXRvciA/IFwic3RyaW5nXCIgPT0gdHlwZW9mIG1hc2tkZWYudmFsaWRhdG9yID8gbmV3IFJlZ0V4cChtYXNrZGVmLnZhbGlkYXRvciwgb3B0cy5jYXNpbmcgPyBcImlcIiA6IFwiXCIpIDogbmV3IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXN0ID0gbWFza2RlZi52YWxpZGF0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oKSA6IG5ldyBSZWdFeHAoXCIuXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogbWFza2RlZi5jYXJkaW5hbGl0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6IG10b2tlbi5pc09wdGlvbmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdCbG9ja01hcmtlcjogcHJldk1hdGNoID09PSB1bmRlZmluZWQgfHwgcHJldk1hdGNoLmRlZiAhPT0gKG1hc2tkZWYuZGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBtYXNrZGVmLmNhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBtYXNrZGVmLmRlZmluaXRpb25TeW1ib2wgfHwgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1hc2tkZWYucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6IG10b2tlbi5pc09wdGlvbmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCB8fCBwcmV2TWF0Y2guZGVmICE9PSBlbGVtZW50ICYmIG51bGwgIT09IHByZXZNYXRjaC5mbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgfHwgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogb3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sICE9PSB1bmRlZmluZWQgPyBlbGVtZW50IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGVzY2FwZWQgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB2ZXJpZnlHcm91cE1hcmtlcihtYXNrVG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbWFza1Rva2VuICYmIG1hc2tUb2tlbi5tYXRjaGVzICYmICQuZWFjaChtYXNrVG9rZW4ubWF0Y2hlcywgZnVuY3Rpb24obmR4LCB0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRUb2tlbiA9IG1hc2tUb2tlbi5tYXRjaGVzW25keCArIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgKG5leHRUb2tlbiA9PT0gdW5kZWZpbmVkIHx8IG5leHRUb2tlbi5tYXRjaGVzID09PSB1bmRlZmluZWQgfHwgITEgPT09IG5leHRUb2tlbi5pc1F1YW50aWZpZXIpICYmIHRva2VuICYmIHRva2VuLmlzR3JvdXAgJiYgKHRva2VuLmlzR3JvdXAgPSAhMSwgXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdleE1hc2sgfHwgKGluc2VydFRlc3REZWZpbml0aW9uKHRva2VuLCBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0LCAwKSwgITAgIT09IHRva2VuLm9wZW5Hcm91cCAmJiBpbnNlcnRUZXN0RGVmaW5pdGlvbih0b2tlbiwgb3B0cy5ncm91cG1hcmtlci5lbmQpKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyaWZ5R3JvdXBNYXJrZXIodG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZGVmYXVsdENhc2UoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLCBpbnNlcnRUZXN0RGVmaW5pdGlvbihjdXJyZW50T3BlbmluZ1Rva2VuLCBtKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IgPSBvcGVuZW5pbmdzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgYWx0ZXJuYXRvci5tYXRjaGVzLmxlbmd0aDsgbW5keCsrKSBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCA9ICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MubGVuZ3RoID4gMCA/IChjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdKS5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcikgOiBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaW5zZXJ0VGVzdERlZmluaXRpb24oY3VycmVudFRva2VuLCBtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV2ZXJzZVRva2VucyhtYXNrVG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXMgPSBtYXNrVG9rZW4ubWF0Y2hlcy5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1hdGNoIGluIG1hc2tUb2tlbi5tYXRjaGVzKSBpZiAobWFza1Rva2VuLm1hdGNoZXMuaGFzT3duUHJvcGVydHkobWF0Y2gpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW50TWF0Y2ggPSBwYXJzZUludChtYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdLmlzUXVhbnRpZmllciAmJiBtYXNrVG9rZW4ubWF0Y2hlc1tpbnRNYXRjaCArIDFdICYmIG1hc2tUb2tlbi5tYXRjaGVzW2ludE1hdGNoICsgMV0uaXNHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdCA9IG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlcy5zcGxpY2UobWF0Y2gsIDEpLCBtYXNrVG9rZW4ubWF0Y2hlcy5zcGxpY2UoaW50TWF0Y2ggKyAxLCAwLCBxdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0ubWF0Y2hlcyAhPT0gdW5kZWZpbmVkID8gbWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdID0gcmV2ZXJzZVRva2VucyhtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0pIDogbWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdID0gZnVuY3Rpb24oc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3QgPT09IG9wdHMub3B0aW9uYWxtYXJrZXIuc3RhcnQgPyBzdCA9IG9wdHMub3B0aW9uYWxtYXJrZXIuZW5kIDogc3QgPT09IG9wdHMub3B0aW9uYWxtYXJrZXIuZW5kID8gc3QgPSBvcHRzLm9wdGlvbmFsbWFya2VyLnN0YXJ0IDogc3QgPT09IG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQgPyBzdCA9IG9wdHMuZ3JvdXBtYXJrZXIuZW5kIDogc3QgPT09IG9wdHMuZ3JvdXBtYXJrZXIuZW5kICYmIChzdCA9IG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0obWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFza1Rva2VuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2gsIG0sIG9wZW5pbmdUb2tlbiwgY3VycmVudE9wZW5pbmdUb2tlbiwgYWx0ZXJuYXRvciwgbGFzdE1hdGNoLCBncm91cFRva2VuLCB0b2tlbml6ZXIgPSAvKD86Wz8qK118XFx7WzAtOVxcK1xcKl0rKD86LFswLTlcXCtcXCpdKik/XFx9KXxbXi4/KiteJHtbXSgpfFxcXFxdK3wuL2csIHJlZ2V4VG9rZW5pemVyID0gL1xcW1xcXj9dPyg/OlteXFxcXFxcXV0rfFxcXFxbXFxTXFxzXT8pKl0/fFxcXFwoPzowKD86WzAtM11bMC03XXswLDJ9fFs0LTddWzAtN10/KT98WzEtOV1bMC05XSp8eFswLTlBLUZhLWZdezJ9fHVbMC05QS1GYS1mXXs0fXxjW0EtWmEtel18W1xcU1xcc10/KXxcXCgoPzpcXD9bOj0hXT8pP3woPzpbPyorXXxcXHtbMC05XSsoPzosWzAtOV0qKT9cXH0pXFw/P3xbXi4/KiteJHtbKCl8XFxcXF0rfC4vZywgZXNjYXBlZCA9ICExLCBjdXJyZW50VG9rZW4gPSBuZXcgTWFza1Rva2VuKCksIG9wZW5lbmluZ3MgPSBbXSwgbWFza1Rva2VucyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAocmVnZXhNYXNrICYmIChvcHRzLm9wdGlvbmFsbWFya2VyLnN0YXJ0ID0gdW5kZWZpbmVkLCBvcHRzLm9wdGlvbmFsbWFya2VyLmVuZCA9IHVuZGVmaW5lZCk7IG1hdGNoID0gcmVnZXhNYXNrID8gcmVnZXhUb2tlbml6ZXIuZXhlYyhtYXNrKSA6IHRva2VuaXplci5leGVjKG1hc2spOyApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG0gPSBtYXRjaFswXSwgcmVnZXhNYXNrKSBzd2l0Y2ggKG0uY2hhckF0KDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIj9cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBcInswLDF9XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIrXCI6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIipcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBcIntcIiArIG0gKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXNjYXBlZCkgZGVmYXVsdENhc2UoKTsgZWxzZSBzd2l0Y2ggKG0uY2hhckF0KDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmVzY2FwZUNoYXI6XG4gICAgICAgICAgICAgICAgICAgICAgICBlc2NhcGVkID0gITAsIHJlZ2V4TWFzayAmJiBkZWZhdWx0Q2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIG9wdHMub3B0aW9uYWxtYXJrZXIuZW5kOlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5ncm91cG1hcmtlci5lbmQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmluZ1Rva2VuID0gb3BlbmVuaW5ncy5wb3AoKSwgb3BlbmluZ1Rva2VuLm9wZW5Hcm91cCA9ICExLCBvcGVuaW5nVG9rZW4gIT09IHVuZGVmaW5lZCkgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXSkubWF0Y2hlcy5wdXNoKG9wZW5pbmdUb2tlbiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4uaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IgPSBvcGVuZW5pbmdzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtbmR4ID0gMDsgbW5keCA8IGFsdGVybmF0b3IubWF0Y2hlcy5sZW5ndGg7IG1uZHgrKykgYWx0ZXJuYXRvci5tYXRjaGVzW21uZHhdLmlzR3JvdXAgPSAhMSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5hbHRlcm5hdG9yR3JvdXAgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5sZW5ndGggPiAwID8gKGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0pLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKSA6IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKTsgZWxzZSBkZWZhdWx0Q2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIG9wdHMub3B0aW9uYWxtYXJrZXIuc3RhcnQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2gobmV3IE1hc2tUb2tlbighMSwgITApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0OlxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKG5ldyBNYXNrVG9rZW4oITApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLnF1YW50aWZpZXJtYXJrZXIuc3RhcnQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXVhbnRpZmllciA9IG5ldyBNYXNrVG9rZW4oITEsICExLCAhMCksIG1xID0gKG0gPSBtLnJlcGxhY2UoL1t7fV0vZywgXCJcIikpLnNwbGl0KFwiLFwiKSwgbXEwID0gaXNOYU4obXFbMF0pID8gbXFbMF0gOiBwYXJzZUludChtcVswXSksIG1xMSA9IDEgPT09IG1xLmxlbmd0aCA/IG1xMCA6IGlzTmFOKG1xWzFdKSA/IG1xWzFdIDogcGFyc2VJbnQobXFbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiKlwiICE9PSBtcTEgJiYgXCIrXCIgIT09IG1xMSB8fCAobXEwID0gXCIqXCIgPT09IG1xMSA/IDAgOiAxKSwgcXVhbnRpZmllci5xdWFudGlmaWVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogbXEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heDogbXExXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXS5tYXRjaGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYXRjaCA9IG1hdGNoZXMucG9wKCkpLmlzR3JvdXAgfHwgKChncm91cFRva2VuID0gbmV3IE1hc2tUb2tlbighMCkpLm1hdGNoZXMucHVzaChtYXRjaCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gZ3JvdXBUb2tlbiksIG1hdGNoZXMucHVzaChtYXRjaCksIG1hdGNoZXMucHVzaChxdWFudGlmaWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAobWF0Y2ggPSBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wb3AoKSkuaXNHcm91cCB8fCAocmVnZXhNYXNrICYmIG51bGwgPT09IG1hdGNoLmZuICYmIFwiLlwiID09PSBtYXRjaC5kZWYgJiYgKG1hdGNoLmZuID0gbmV3IFJlZ0V4cChtYXRjaC5kZWYsIG9wdHMuY2FzaW5nID8gXCJpXCIgOiBcIlwiKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgKGdyb3VwVG9rZW4gPSBuZXcgTWFza1Rva2VuKCEwKSkubWF0Y2hlcy5wdXNoKG1hdGNoKSwgbWF0Y2ggPSBncm91cFRva2VuKSwgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChtYXRjaCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChxdWFudGlmaWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmFsdGVybmF0b3JtYXJrZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YlRva2VuID0gKGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0pLm1hdGNoZXNbY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IGN1cnJlbnRPcGVuaW5nVG9rZW4ub3Blbkdyb3VwICYmIChzdWJUb2tlbi5tYXRjaGVzID09PSB1bmRlZmluZWQgfHwgITEgPT09IHN1YlRva2VuLmlzR3JvdXAgJiYgITEgPT09IHN1YlRva2VuLmlzQWx0ZXJuYXRvcikgPyBvcGVuZW5pbmdzLnBvcCgpIDogY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGxhc3RNYXRjaCA9IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RNYXRjaC5pc0FsdGVybmF0b3IpIG9wZW5lbmluZ3MucHVzaChsYXN0TWF0Y2gpOyBlbHNlIGlmIChsYXN0TWF0Y2guYWx0ZXJuYXRvckdyb3VwID8gKGFsdGVybmF0b3IgPSBvcGVuZW5pbmdzLnBvcCgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaC5hbHRlcm5hdG9yR3JvdXAgPSAhMSkgOiBhbHRlcm5hdG9yID0gbmV3IE1hc2tUb2tlbighMSwgITEsICExLCAhMCksIGFsdGVybmF0b3IubWF0Y2hlcy5wdXNoKGxhc3RNYXRjaCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKGFsdGVybmF0b3IpLCBsYXN0TWF0Y2gub3Blbkdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoLm9wZW5Hcm91cCA9ICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRlcm5hdG9yR3JvdXAgPSBuZXcgTWFza1Rva2VuKCEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yR3JvdXAuYWx0ZXJuYXRvckdyb3VwID0gITAsIG9wZW5lbmluZ3MucHVzaChhbHRlcm5hdG9yR3JvdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKDtvcGVuZW5pbmdzLmxlbmd0aCA+IDA7ICkgb3BlbmluZ1Rva2VuID0gb3BlbmVuaW5ncy5wb3AoKSwgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50VG9rZW4ubWF0Y2hlcy5sZW5ndGggPiAwICYmICh2ZXJpZnlHcm91cE1hcmtlcihjdXJyZW50VG9rZW4pLCBtYXNrVG9rZW5zLnB1c2goY3VycmVudFRva2VuKSksIFxuICAgICAgICAgICAgICAgIChvcHRzLm51bWVyaWNJbnB1dCB8fCBvcHRzLmlzUlRMKSAmJiByZXZlcnNlVG9rZW5zKG1hc2tUb2tlbnNbMF0pLCBtYXNrVG9rZW5zO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBJbnB1dG1hc2suZXh0ZW5kRGVmYXVsdHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgICAkLmV4dGVuZCghMCwgSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICAgIH0sIElucHV0bWFzay5leHRlbmREZWZpbml0aW9ucyA9IGZ1bmN0aW9uKGRlZmluaXRpb24pIHtcbiAgICAgICAgICAgICQuZXh0ZW5kKCEwLCBJbnB1dG1hc2sucHJvdG90eXBlLmRlZmluaXRpb25zLCBkZWZpbml0aW9uKTtcbiAgICAgICAgfSwgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMgPSBmdW5jdGlvbihhbGlhcykge1xuICAgICAgICAgICAgJC5leHRlbmQoITAsIElucHV0bWFzay5wcm90b3R5cGUuYWxpYXNlcywgYWxpYXMpO1xuICAgICAgICB9LCBJbnB1dG1hc2suZm9ybWF0ID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMsIG1ldGFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gSW5wdXRtYXNrKG9wdGlvbnMpLmZvcm1hdCh2YWx1ZSwgbWV0YWRhdGEpO1xuICAgICAgICB9LCBJbnB1dG1hc2sudW5tYXNrID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBJbnB1dG1hc2sob3B0aW9ucykudW5tYXNrZWR2YWx1ZSh2YWx1ZSk7XG4gICAgICAgIH0sIElucHV0bWFzay5pc1ZhbGlkID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBJbnB1dG1hc2sob3B0aW9ucykuaXNWYWxpZCh2YWx1ZSk7XG4gICAgICAgIH0sIElucHV0bWFzay5yZW1vdmUgPSBmdW5jdGlvbihlbGVtcykge1xuICAgICAgICAgICAgJC5lYWNoKGVsZW1zLCBmdW5jdGlvbihuZHgsIGVsKSB7XG4gICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrICYmIGVsLmlucHV0bWFzay5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBJbnB1dG1hc2suZXNjYXBlUmVnZXggPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgIHZhciBzcGVjaWFscyA9IFsgXCIvXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsIFwiP1wiLCBcInxcIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiLCBcIn1cIiwgXCJcXFxcXCIsIFwiJFwiLCBcIl5cIiBdO1xuICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXFxcXFwiICsgc3BlY2lhbHMuam9pbihcInxcXFxcXCIpICsgXCIpXCIsIFwiZ2ltXCIpLCBcIlxcXFwkMVwiKTtcbiAgICAgICAgfSwgSW5wdXRtYXNrLmtleUNvZGUgPSB7XG4gICAgICAgICAgICBBTFQ6IDE4LFxuICAgICAgICAgICAgQkFDS1NQQUNFOiA4LFxuICAgICAgICAgICAgQkFDS1NQQUNFX1NBRkFSSTogMTI3LFxuICAgICAgICAgICAgQ0FQU19MT0NLOiAyMCxcbiAgICAgICAgICAgIENPTU1BOiAxODgsXG4gICAgICAgICAgICBDT01NQU5EOiA5MSxcbiAgICAgICAgICAgIENPTU1BTkRfTEVGVDogOTEsXG4gICAgICAgICAgICBDT01NQU5EX1JJR0hUOiA5MyxcbiAgICAgICAgICAgIENPTlRST0w6IDE3LFxuICAgICAgICAgICAgREVMRVRFOiA0NixcbiAgICAgICAgICAgIERPV046IDQwLFxuICAgICAgICAgICAgRU5EOiAzNSxcbiAgICAgICAgICAgIEVOVEVSOiAxMyxcbiAgICAgICAgICAgIEVTQ0FQRTogMjcsXG4gICAgICAgICAgICBIT01FOiAzNixcbiAgICAgICAgICAgIElOU0VSVDogNDUsXG4gICAgICAgICAgICBMRUZUOiAzNyxcbiAgICAgICAgICAgIE1FTlU6IDkzLFxuICAgICAgICAgICAgTlVNUEFEX0FERDogMTA3LFxuICAgICAgICAgICAgTlVNUEFEX0RFQ0lNQUw6IDExMCxcbiAgICAgICAgICAgIE5VTVBBRF9ESVZJREU6IDExMSxcbiAgICAgICAgICAgIE5VTVBBRF9FTlRFUjogMTA4LFxuICAgICAgICAgICAgTlVNUEFEX01VTFRJUExZOiAxMDYsXG4gICAgICAgICAgICBOVU1QQURfU1VCVFJBQ1Q6IDEwOSxcbiAgICAgICAgICAgIFBBR0VfRE9XTjogMzQsXG4gICAgICAgICAgICBQQUdFX1VQOiAzMyxcbiAgICAgICAgICAgIFBFUklPRDogMTkwLFxuICAgICAgICAgICAgUklHSFQ6IDM5LFxuICAgICAgICAgICAgU0hJRlQ6IDE2LFxuICAgICAgICAgICAgU1BBQ0U6IDMyLFxuICAgICAgICAgICAgVEFCOiA5LFxuICAgICAgICAgICAgVVA6IDM4LFxuICAgICAgICAgICAgV0lORE9XUzogOTEsXG4gICAgICAgICAgICBYOiA4OFxuICAgICAgICB9LCBJbnB1dG1hc2s7XG4gICAgfSk7XG59LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX193ZWJwYWNrX3JlcXVpcmVfXyg0KSwgX193ZWJwYWNrX3JlcXVpcmVfXyg5KSwgX193ZWJwYWNrX3JlcXVpcmVfXygxMiksIF9fd2VicGFja19yZXF1aXJlX18oMTMpLCBcbiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KSwgX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG4gICAgdmFyIF9pbnB1dG1hc2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSwgX2lucHV0bWFzazQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMCkpLCBfanF1ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyKSk7XG4gICAgX2lucHV0bWFzazQuZGVmYXVsdCA9PT0gX2pxdWVyeTIuZGVmYXVsdCAmJiBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KSwgd2luZG93LklucHV0bWFzayA9IF9pbnB1dG1hc2syLmRlZmF1bHQ7XG59LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICB2YXIgY29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG4gICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgY29udGVudCAmJiAoY29udGVudCA9IFsgWyBtb2R1bGUuaSwgY29udGVudCwgXCJcIiBdIF0pO1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBobXI6ICEwXG4gICAgfTtcbiAgICBvcHRpb25zLnRyYW5zZm9ybSA9IHZvaWQgMDtcbiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpKGNvbnRlbnQsIG9wdGlvbnMpO1xuICAgIGNvbnRlbnQubG9jYWxzICYmIChtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzKTtcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgIChtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNikodm9pZCAwKSkucHVzaChbIG1vZHVsZS5pLCBcIi5pbS1jYXJldCB7XFxyXFxuXFx0LXdlYmtpdC1hbmltYXRpb246IDFzIGJsaW5rIHN0ZXAtZW5kIGluZmluaXRlO1xcclxcblxcdGFuaW1hdGlvbjogMXMgYmxpbmsgc3RlcC1lbmQgaW5maW5pdGU7XFxyXFxufVxcclxcblxcclxcbkBrZXlmcmFtZXMgYmxpbmsge1xcclxcblxcdGZyb20sIHRvIHtcXHJcXG5cXHRcXHRib3JkZXItcmlnaHQtY29sb3I6IGJsYWNrO1xcclxcblxcdH1cXHJcXG5cXHQ1MCUge1xcclxcblxcdFxcdGJvcmRlci1yaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuXFx0fVxcclxcbn1cXHJcXG5cXHJcXG5ALXdlYmtpdC1rZXlmcmFtZXMgYmxpbmsge1xcclxcblxcdGZyb20sIHRvIHtcXHJcXG5cXHRcXHRib3JkZXItcmlnaHQtY29sb3I6IGJsYWNrO1xcclxcblxcdH1cXHJcXG5cXHQ1MCUge1xcclxcblxcdFxcdGJvcmRlci1yaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuXFx0fVxcclxcbn1cXHJcXG5cXHJcXG4uaW0tc3RhdGljIHtcXHJcXG5cXHRjb2xvcjogZ3JleTtcXHJcXG59XFxyXFxuXCIsIFwiXCIgXSk7XG59LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICAgICAgICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgXCJcIiwgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gICAgICAgIGlmICghY3NzTWFwcGluZykgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgIGlmICh1c2VTb3VyY2VNYXAgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBidG9hKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKSwgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIiArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArIFwiICovXCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBbIGNvbnRlbnQgXS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFsgc291cmNlTWFwcGluZyBdKS5qb2luKFwiXFxuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbIGNvbnRlbnQgXS5qb2luKFwiXFxuXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybiBcIi8qIyBcIiArIChcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSkgKyBcIiAqL1wiO1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuICAgICAgICB2YXIgbGlzdCA9IFtdO1xuICAgICAgICByZXR1cm4gbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbVsyXSA/IFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiIDogY29udGVudDtcbiAgICAgICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgICAgIH0sIGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIG1vZHVsZXMgJiYgKG1vZHVsZXMgPSBbIFsgbnVsbCwgbW9kdWxlcywgXCJcIiBdIF0pO1xuICAgICAgICAgICAgZm9yICh2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9LCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuICAgICAgICAgICAgICAgIFwibnVtYmVyXCIgPT0gdHlwZW9mIGlkICYmIChhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9ICEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuICAgICAgICAgICAgICAgIFwibnVtYmVyXCIgPT0gdHlwZW9mIGl0ZW1bMF0gJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSB8fCAobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSA/IGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5IDogbWVkaWFRdWVyeSAmJiAoaXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiKSwgXG4gICAgICAgICAgICAgICAgbGlzdC5wdXNoKGl0ZW0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgbGlzdDtcbiAgICB9O1xufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXSwgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcbiAgICAgICAgICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgICAgICAgICAgIGRvbVN0eWxlLnJlZnMrKztcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuICAgICAgICAgICAgICAgIGZvciAoO2ogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcGFydHMgPSBbXSwgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSBwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICAgIHJlZnM6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBhcnRzOiBwYXJ0c1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgZm9yICh2YXIgc3R5bGVzID0gW10sIG5ld1N0eWxlcyA9IHt9LCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gbGlzdFtpXSwgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXSwgcGFydCA9IHtcbiAgICAgICAgICAgICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICAgICAgICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICAgICAgICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbmV3U3R5bGVzW2lkXSA/IG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KSA6IHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIHBhcnRzOiBbIHBhcnQgXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byk7XG4gICAgICAgIGlmICghdGFyZ2V0KSB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICAgICAgdmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoXCJ0b3BcIiA9PT0gb3B0aW9ucy5pbnNlcnRBdCkgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPyBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyA/IHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSA6IHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSkgOiB0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCksIFxuICAgICAgICBzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpOyBlbHNlIGlmIChcImJvdHRvbVwiID09PSBvcHRpb25zLmluc2VydEF0KSB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpOyBlbHNlIHtcbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiBvcHRpb25zLmluc2VydEF0IHx8ICFvcHRpb25zLmluc2VydEF0LmJlZm9yZSkgdGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG4gICAgICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuICAgICAgICAgICAgdGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAgICAgICBpZiAobnVsbCA9PT0gc3R5bGUucGFyZW50Tm9kZSkgcmV0dXJuICExO1xuICAgICAgICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbiAgICAgICAgdmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG4gICAgICAgIGlkeCA+PSAwICYmIHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIiwgYWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpLCBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpLCBcbiAgICAgICAgc3R5bGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIiwgb3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIiwgYWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyksIFxuICAgICAgICBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayksIGxpbms7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZEF0dHJzKGVsLCBhdHRycykge1xuICAgICAgICBPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcbiAgICAgICAgaWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcbiAgICAgICAgICAgIGlmICghKHJlc3VsdCA9IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpKSkgcmV0dXJuIGZ1bmN0aW9uKCkge307XG4gICAgICAgICAgICBvYmouY3NzID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgICAgICAgICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgICAgICAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKSwgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCAhMSksIFxuICAgICAgICAgICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCAhMCk7XG4gICAgICAgIH0gZWxzZSBvYmouc291cmNlTWFwICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgVVJMICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBCbG9iICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYnRvYSA/IChzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpLCBcbiAgICAgICAgdXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKSwgcmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpLCBzdHlsZS5ocmVmICYmIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG4gICAgICAgIH0pIDogKHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpLCB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpLCBcbiAgICAgICAgcmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZShvYmopLCBmdW5jdGlvbihuZXdPYmopIHtcbiAgICAgICAgICAgIGlmIChuZXdPYmopIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgICAgICAgICB9IGVsc2UgcmVtb3ZlKCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICAgICAgICB2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG4gICAgICAgIGlmIChzdHlsZS5zdHlsZVNoZWV0KSBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTsgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyksIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuICAgICAgICAgICAgY2hpbGROb2Rlc1tpbmRleF0gJiYgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pLCBjaGlsZE5vZGVzLmxlbmd0aCA/IHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSkgOiBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvYmopIHtcbiAgICAgICAgdmFyIGNzcyA9IG9iai5jc3MsIG1lZGlhID0gb2JqLm1lZGlhO1xuICAgICAgICBpZiAobWVkaWEgJiYgc3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpLCBzdHlsZS5zdHlsZVNoZWV0KSBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7IGVsc2Uge1xuICAgICAgICAgICAgZm9yICg7c3R5bGUuZmlyc3RDaGlsZDsgKSBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZUxpbmsobGluaywgb3B0aW9ucywgb2JqKSB7XG4gICAgICAgIHZhciBjc3MgPSBvYmouY3NzLCBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwLCBhdXRvRml4VXJscyA9IHZvaWQgMCA9PT0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgJiYgc291cmNlTWFwO1xuICAgICAgICAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpICYmIChjc3MgPSBmaXhVcmxzKGNzcykpLCBzb3VyY2VNYXAgJiYgKGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIik7XG4gICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoWyBjc3MgXSwge1xuICAgICAgICAgICAgdHlwZTogXCJ0ZXh0L2Nzc1wiXG4gICAgICAgIH0pLCBvbGRTcmMgPSBsaW5rLmhyZWY7XG4gICAgICAgIGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYiksIG9sZFNyYyAmJiBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG4gICAgfVxuICAgIHZhciBzdHlsZXNJbkRvbSA9IHt9LCBpc09sZElFID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgdmFyIG1lbW87XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IG1lbW8gJiYgKG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSwgbWVtbztcbiAgICAgICAgfTtcbiAgICB9KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG4gICAgfSksIGdldEVsZW1lbnQgPSBmdW5jdGlvbihmbikge1xuICAgICAgICB2YXIgbWVtbyA9IHt9O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IG1lbW9bc2VsZWN0b3JdKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZm4uY2FsbCh0aGlzLCBzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgaWYgKHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZW1vW3NlbGVjdG9yXSA9IHN0eWxlVGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lbW9bc2VsZWN0b3JdO1xuICAgICAgICB9O1xuICAgIH0oZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gICAgfSksIHNpbmdsZXRvbiA9IG51bGwsIHNpbmdsZXRvbkNvdW50ZXIgPSAwLCBzdHlsZXNJbnNlcnRlZEF0VG9wID0gW10sIGZpeFVybHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgREVCVUcgJiYgREVCVUcgJiYgXCJvYmplY3RcIiAhPSB0eXBlb2YgZG9jdW1lbnQpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcbiAgICAgICAgKG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9KS5hdHRycyA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPyBvcHRpb25zLmF0dHJzIDoge30sIFxuICAgICAgICBvcHRpb25zLnNpbmdsZXRvbiB8fCAob3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCkpLCBvcHRpb25zLmluc2VydEludG8gfHwgKG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiKSwgXG4gICAgICAgIG9wdGlvbnMuaW5zZXJ0QXQgfHwgKG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiKTtcbiAgICAgICAgdmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyksIGZ1bmN0aW9uKG5ld0xpc3QpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG1heVJlbW92ZSA9IFtdLCBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gc3R5bGVzW2ldO1xuICAgICAgICAgICAgICAgIChkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdKS5yZWZzLS0sIG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0xpc3QgJiYgYWRkU3R5bGVzVG9Eb20obGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IGRvbVN0eWxlLnJlZnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50LCB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIik7XG4gICAgICAgIH07XG4gICAgfSgpO1xufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjc3MpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ICYmIHdpbmRvdy5sb2NhdGlvbjtcbiAgICAgICAgaWYgKCFsb2NhdGlvbikgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gICAgICAgIGlmICghY3NzIHx8IFwic3RyaW5nXCIgIT0gdHlwZW9mIGNzcykgcmV0dXJuIGNzcztcbiAgICAgICAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3QsIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG4gICAgICAgIHJldHVybiBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuICAgICAgICAgICAgdmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmwudHJpbSgpLnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkMTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJDE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcLykvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHJldHVybiBmdWxsTWF0Y2g7XG4gICAgICAgICAgICB2YXIgbmV3VXJsO1xuICAgICAgICAgICAgcmV0dXJuIG5ld1VybCA9IDAgPT09IHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPyB1bnF1b3RlZE9yaWdVcmwgOiAwID09PSB1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPyBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsIDogY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIiksIFxuICAgICAgICAgICAgXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG4gICAgICAgIH0pO1xuICAgIH07XG59LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXztcbiAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gICAgIWZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAgICAgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFsgX193ZWJwYWNrX3JlcXVpcmVfXygwKSwgX193ZWJwYWNrX3JlcXVpcmVfXygxKSBdLCBcbiAgICAgICAgdm9pZCAwICE9PSAoX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSBmYWN0b3J5KSA/IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXykgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pO1xuICAgIH0oZnVuY3Rpb24oJCwgSW5wdXRtYXNrKSB7XG4gICAgICAgIGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgICAgICAgICAgcmV0dXJuIGlzTmFOKHllYXIpIHx8IDI5ID09PSBuZXcgRGF0ZSh5ZWFyLCAyLCAwKS5nZXREYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIElucHV0bWFzay5leHRlbmRBbGlhc2VzKHtcbiAgICAgICAgICAgIFwiZGQvbW0veXl5eVwiOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCIxLzIveVwiLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImRkL21tL3l5eXlcIixcbiAgICAgICAgICAgICAgICByZWdleDoge1xuICAgICAgICAgICAgICAgICAgICB2YWwxcHJlOiBuZXcgUmVnRXhwKFwiWzAtM11cIiksXG4gICAgICAgICAgICAgICAgICAgIHZhbDE6IG5ldyBSZWdFeHAoXCIwWzEtOV18WzEyXVswLTldfDNbMDFdXCIpLFxuICAgICAgICAgICAgICAgICAgICB2YWwycHJlOiBmdW5jdGlvbihzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkU2VwYXJhdG9yID0gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgc2VwYXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKCgwWzEtOV18WzEyXVswLTldfDNbMDFdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAxXSlcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbDI6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXxbMTJdWzAtOV0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIoMFsxLTldfDFbMDEyXSkpfCgzMFwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiKDBbMTMtOV18MVswMTJdKSl8KDMxXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIoMFsxMzU3OF18MVswMl0pKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGVhcGRheTogXCIyOS8wMi9cIixcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3I6IFwiL1wiLFxuICAgICAgICAgICAgICAgIHllYXJyYW5nZToge1xuICAgICAgICAgICAgICAgICAgICBtaW55ZWFyOiAxOTAwLFxuICAgICAgICAgICAgICAgICAgICBtYXh5ZWFyOiAyMDk5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpc0luWWVhclJhbmdlOiBmdW5jdGlvbihjaHJzLCBtaW55ZWFyLCBtYXh5ZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihjaHJzKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW50ZXJlZHllYXIgPSBwYXJzZUludChjaHJzLmNvbmNhdChtaW55ZWFyLnRvU3RyaW5nKCkuc2xpY2UoY2hycy5sZW5ndGgpKSksIGVudGVyZWR5ZWFyMiA9IHBhcnNlSW50KGNocnMuY29uY2F0KG1heHllYXIudG9TdHJpbmcoKS5zbGljZShjaHJzLmxlbmd0aCkpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFpc05hTihlbnRlcmVkeWVhcikgJiYgKG1pbnllYXIgPD0gZW50ZXJlZHllYXIgJiYgZW50ZXJlZHllYXIgPD0gbWF4eWVhcikgfHwgIWlzTmFOKGVudGVyZWR5ZWFyMikgJiYgKG1pbnllYXIgPD0gZW50ZXJlZHllYXIyICYmIGVudGVyZWR5ZWFyMiA8PSBtYXh5ZWFyKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRldGVybWluZWJhc2V5ZWFyOiBmdW5jdGlvbihtaW55ZWFyLCBtYXh5ZWFyLCBoaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50eWVhciA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1pbnllYXIgPiBjdXJyZW50eWVhcikgcmV0dXJuIG1pbnllYXI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXh5ZWFyIDwgY3VycmVudHllYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1heFllYXJQcmVmaXggPSBtYXh5ZWFyLnRvU3RyaW5nKCkuc2xpY2UoMCwgMiksIG1heFllYXJQb3N0Zml4ID0gbWF4eWVhci50b1N0cmluZygpLnNsaWNlKDIsIDQpOyBtYXh5ZWFyIDwgbWF4WWVhclByZWZpeCArIGhpbnQ7ICkgbWF4WWVhclByZWZpeC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1heHhZZWFyID0gbWF4WWVhclByZWZpeCArIG1heFllYXJQb3N0Zml4O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1pbnllYXIgPiBtYXh4WWVhciA/IG1pbnllYXIgOiBtYXh4WWVhcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWlueWVhciA8PSBjdXJyZW50eWVhciAmJiBjdXJyZW50eWVhciA8PSBtYXh5ZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjdXJyZW50WWVhclByZWZpeCA9IGN1cnJlbnR5ZWFyLnRvU3RyaW5nKCkuc2xpY2UoMCwgMik7IG1heHllYXIgPCBjdXJyZW50WWVhclByZWZpeCArIGhpbnQ7ICkgY3VycmVudFllYXJQcmVmaXgtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50WWVhckFuZEhpbnQgPSBjdXJyZW50WWVhclByZWZpeCArIGhpbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFllYXJBbmRIaW50IDwgbWlueWVhciA/IG1pbnllYXIgOiBjdXJyZW50WWVhckFuZEhpbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnR5ZWFyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbihlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUklHSFQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKHRvZGF5LmdldERhdGUoKS50b1N0cmluZygpICsgKHRvZGF5LmdldE1vbnRoKCkgKyAxKS50b1N0cmluZygpICsgdG9kYXkuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRGcm9udFZhbHVlOiBmdW5jdGlvbihtYXNrLCBidWZmZXIsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc3RhcnQgPSAwLCBsZW5ndGggPSAwLCBpID0gMDsgaSA8IG1hc2subGVuZ3RoICYmIFwiMlwiICE9PSBtYXNrLmNoYXJBdChpKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IG9wdHMuZGVmaW5pdGlvbnNbbWFzay5jaGFyQXQoaSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbiA/IChzdGFydCArPSBsZW5ndGgsIGxlbmd0aCA9IGRlZmluaXRpb24uY2FyZGluYWxpdHkpIDogbGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5qb2luKFwiXCIpLnN1YnN0cihzdGFydCwgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBmdW5jdGlvbihidWZmZXIsIGN1cnJlbnRSZXN1bHQsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRheU1vbnRoVmFsdWUsIHllYXIsIGJ1ZmZlclN0ciA9IGJ1ZmZlci5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCA9PT0gb3B0cy5tYXNrLmluZGV4T2YoXCJ5XCIpID8gKHllYXIgPSBidWZmZXJTdHIuc3Vic3RyKDAsIDQpLCBkYXlNb250aFZhbHVlID0gYnVmZmVyU3RyLnN1YnN0cmluZyg0LCAxMCkpIDogKHllYXIgPSBidWZmZXJTdHIuc3Vic3RyaW5nKDYsIDEwKSwgXG4gICAgICAgICAgICAgICAgICAgIGRheU1vbnRoVmFsdWUgPSBidWZmZXJTdHIuc3Vic3RyKDAsIDYpKSwgY3VycmVudFJlc3VsdCAmJiAoZGF5TW9udGhWYWx1ZSAhPT0gb3B0cy5sZWFwZGF5IHx8IGlzTGVhcFllYXIoeWVhcikpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgXCIxXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMS50ZXN0KGNocnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpY3QgfHwgaXNWYWxpZCB8fCBjaHJzLmNoYXJBdCgxKSAhPT0gb3B0cy5zZXBhcmF0b3IgJiYgLTEgPT09IFwiLS4vXCIuaW5kZXhPZihjaHJzLmNoYXJBdCgxKSkgfHwgIShpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwxLnRlc3QoXCIwXCIgKyBjaHJzLmNoYXJBdCgwKSkpID8gaXNWYWxpZCA6IChtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSA9IFwiMFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBjaHJzLmNoYXJBdCgwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBbIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwY2hycyA9IGNocnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTmFOKG1hc2tzZXQuYnVmZmVyW3BvcyArIDFdKSB8fCAocGNocnMgKz0gbWFza3NldC5idWZmZXJbcG9zICsgMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IDEgPT09IHBjaHJzLmxlbmd0aCA/IG9wdHMucmVnZXgudmFsMXByZS50ZXN0KHBjaHJzKSA6IG9wdHMucmVnZXgudmFsMS50ZXN0KHBjaHJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdICYmIChvcHRzLnJlZ2V4LnZhbDIob3B0cy5zZXBhcmF0b3IpLnRlc3QoY2hycyArIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXS5pbnB1dCkgfHwgKG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXS5pbnB1dCA9IFwiMFwiID09PSBjaHJzID8gXCIxXCIgOiBcIjBcIikpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIXN0cmljdCAmJiAhaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgPSBvcHRzLnJlZ2V4LnZhbDEudGVzdChjaHJzICsgXCIwXCIpKSByZXR1cm4gbWFza3NldC5idWZmZXJbcG9zXSA9IGNocnMsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC5idWZmZXJbKytwb3NdID0gXCIwXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBcIjBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwxLnRlc3QoXCIwXCIgKyBjaHJzKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3Bvc10gPSBcIjBcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MrKywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIjJcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcm9udFZhbHVlID0gb3B0cy5nZXRGcm9udFZhbHVlKG1hc2tzZXQubWFzaywgbWFza3NldC5idWZmZXIsIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0xICE9PSBmcm9udFZhbHVlLmluZGV4T2Yob3B0cy5wbGFjZWhvbGRlclswXSkgJiYgKGZyb250VmFsdWUgPSBcIjAxXCIgKyBvcHRzLnNlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLnJlZ2V4LnZhbDIob3B0cy5zZXBhcmF0b3IpLnRlc3QoZnJvbnRWYWx1ZSArIGNocnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpY3QgfHwgaXNWYWxpZCB8fCBjaHJzLmNoYXJBdCgxKSAhPT0gb3B0cy5zZXBhcmF0b3IgJiYgLTEgPT09IFwiLS4vXCIuaW5kZXhPZihjaHJzLmNoYXJBdCgxKSkgfHwgIShpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwyKG9wdHMuc2VwYXJhdG9yKS50ZXN0KGZyb250VmFsdWUgKyBcIjBcIiArIGNocnMuY2hhckF0KDApKSkgPyBpc1ZhbGlkIDogKG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdID0gXCIwXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IGNocnMuY2hhckF0KDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2YWxpZGF0b3I6IFsge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOYU4obWFza3NldC5idWZmZXJbcG9zICsgMV0pIHx8IChjaHJzICs9IG1hc2tzZXQuYnVmZmVyW3BvcyArIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZyb250VmFsdWUgPSBvcHRzLmdldEZyb250VmFsdWUobWFza3NldC5tYXNrLCBtYXNrc2V0LmJ1ZmZlciwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0xICE9PSBmcm9udFZhbHVlLmluZGV4T2Yob3B0cy5wbGFjZWhvbGRlclswXSkgJiYgKGZyb250VmFsdWUgPSBcIjAxXCIgKyBvcHRzLnNlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gMSA9PT0gY2hycy5sZW5ndGggPyBvcHRzLnJlZ2V4LnZhbDJwcmUob3B0cy5zZXBhcmF0b3IpLnRlc3QoZnJvbnRWYWx1ZSArIGNocnMpIDogb3B0cy5yZWdleC52YWwyKG9wdHMuc2VwYXJhdG9yKS50ZXN0KGZyb250VmFsdWUgKyBjaHJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQgJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdICYmIChvcHRzLnJlZ2V4LnZhbDIob3B0cy5zZXBhcmF0b3IpLnRlc3QoY2hycyArIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXS5pbnB1dCkgfHwgKG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXS5pbnB1dCA9IFwiMFwiID09PSBjaHJzID8gXCIxXCIgOiBcIjBcIikpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaWN0IHx8IGlzVmFsaWQgfHwgIShpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwyKG9wdHMuc2VwYXJhdG9yKS50ZXN0KGZyb250VmFsdWUgKyBcIjBcIiArIGNocnMpKSA/IGlzVmFsaWQgOiAobWFza3NldC5idWZmZXJbcG9zXSA9IFwiMFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zKyssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaXNJblllYXJSYW5nZShjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZhbGlkYXRvcjogWyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMuaXNJblllYXJSYW5nZShjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIWlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyUHJlZml4ID0gb3B0cy5kZXRlcm1pbmViYXNleWVhcihvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyLCBjaHJzICsgXCIwXCIpLnRvU3RyaW5nKCkuc2xpY2UoMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9IG9wdHMuaXNJblllYXJSYW5nZSh5ZWFyUHJlZml4ICsgY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcikpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltwb3MrK10gPSB5ZWFyUHJlZml4LmNoYXJBdCgwKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVhclByZWZpeCA9IG9wdHMuZGV0ZXJtaW5lYmFzZXllYXIob3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhciwgY2hycyArIFwiMFwiKS50b1N0cmluZygpLnNsaWNlKDAsIDIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBvcHRzLmlzSW5ZZWFyUmFuZ2UoeWVhclByZWZpeCArIGNocnMsIG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIpKSByZXR1cm4gbWFza3NldC5idWZmZXJbcG9zKytdID0geWVhclByZWZpeC5jaGFyQXQoMCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC5idWZmZXJbcG9zKytdID0geWVhclByZWZpeC5jaGFyQXQoMSksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMuaXNJblllYXJSYW5nZShjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIWlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyUHJlZml4ID0gb3B0cy5kZXRlcm1pbmViYXNleWVhcihvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyLCBjaHJzKS50b1N0cmluZygpLnNsaWNlKDAsIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgPSBvcHRzLmlzSW5ZZWFyUmFuZ2UoY2hyc1swXSArIHllYXJQcmVmaXhbMV0gKyBjaHJzWzFdLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3BvcysrXSA9IHllYXJQcmVmaXguY2hhckF0KDEpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ZWFyUHJlZml4ID0gb3B0cy5kZXRlcm1pbmViYXNleWVhcihvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyLCBjaHJzKS50b1N0cmluZygpLnNsaWNlKDAsIDIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBvcHRzLmlzSW5ZZWFyUmFuZ2UoeWVhclByZWZpeCArIGNocnMsIG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIpKSByZXR1cm4gbWFza3NldC5idWZmZXJbcG9zIC0gMV0gPSB5ZWFyUHJlZml4LmNoYXJBdCgwKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlcltwb3MrK10gPSB5ZWFyUHJlZml4LmNoYXJBdCgxKSwgbWFza3NldC5idWZmZXJbcG9zKytdID0gY2hycy5jaGFyQXQoMCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMlxuICAgICAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaXNJblllYXJSYW5nZShjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAzXG4gICAgICAgICAgICAgICAgICAgICAgICB9IF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5zZXJ0TW9kZTogITEsXG4gICAgICAgICAgICAgICAgYXV0b1VubWFzazogITFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIm1tL2RkL3l5eXlcIjoge1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIm1tL2RkL3l5eXlcIixcbiAgICAgICAgICAgICAgICBhbGlhczogXCJkZC9tbS95eXl5XCIsXG4gICAgICAgICAgICAgICAgcmVnZXg6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsMnByZTogZnVuY3Rpb24oc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxMy05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCJbMC0zXSl8KDAyXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCJbMC0yXSlcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbDI6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIoMFsxLTldfFsxMl1bMC05XSkpfCgoMFsxMy05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIzMCl8KCgwWzEzNTc4XXwxWzAyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIjMxKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsMXByZTogbmV3IFJlZ0V4cChcIlswMV1cIiksXG4gICAgICAgICAgICAgICAgICAgIHZhbDE6IG5ldyBSZWdFeHAoXCIwWzEtOV18MVswMTJdXCIpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsZWFwZGF5OiBcIjAyLzI5L1wiLFxuICAgICAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24oZSwgYnVmZmVyLCBjYXJldFBvcywgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT09IElucHV0bWFzay5rZXlDb2RlLlJJR0hUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbCgodG9kYXkuZ2V0TW9udGgoKSArIDEpLnRvU3RyaW5nKCkgKyB0b2RheS5nZXREYXRlKCkudG9TdHJpbmcoKSArIHRvZGF5LmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInl5eXkvbW0vZGRcIjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwieS8xLzJcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJ5eXl5L21tL2RkXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwibW0vZGQveXl5eVwiLFxuICAgICAgICAgICAgICAgIGxlYXBkYXk6IFwiLzAyLzI5XCIsXG4gICAgICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbihlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUklHSFQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKHRvZGF5LmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKSArICh0b2RheS5nZXRNb250aCgpICsgMSkudG9TdHJpbmcoKSArIHRvZGF5LmdldERhdGUoKS50b1N0cmluZygpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZGQubW0ueXl5eVwiOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCIxLjIueVwiLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImRkLm1tLnl5eXlcIixcbiAgICAgICAgICAgICAgICBsZWFwZGF5OiBcIjI5LjAyLlwiLFxuICAgICAgICAgICAgICAgIHNlcGFyYXRvcjogXCIuXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwiZGQvbW0veXl5eVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJkZC1tbS15eXl5XCI6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcIjEtMi15XCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiZGQtbW0teXl5eVwiLFxuICAgICAgICAgICAgICAgIGxlYXBkYXk6IFwiMjktMDItXCIsXG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi1cIixcbiAgICAgICAgICAgICAgICBhbGlhczogXCJkZC9tbS95eXl5XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIm1tLmRkLnl5eXlcIjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiMS4yLnlcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJtbS5kZC55eXl5XCIsXG4gICAgICAgICAgICAgICAgbGVhcGRheTogXCIwMi4yOS5cIixcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3I6IFwiLlwiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcIm1tL2RkL3l5eXlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwibW0tZGQteXl5eVwiOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCIxLTIteVwiLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIm1tLWRkLXl5eXlcIixcbiAgICAgICAgICAgICAgICBsZWFwZGF5OiBcIjAyLTI5LVwiLFxuICAgICAgICAgICAgICAgIHNlcGFyYXRvcjogXCItXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwibW0vZGQveXl5eVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ5eXl5Lm1tLmRkXCI6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcInkuMS4yXCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwieXl5eS5tbS5kZFwiLFxuICAgICAgICAgICAgICAgIGxlYXBkYXk6IFwiLjAyLjI5XCIsXG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi5cIixcbiAgICAgICAgICAgICAgICBhbGlhczogXCJ5eXl5L21tL2RkXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInl5eXktbW0tZGRcIjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwieS0xLTJcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJ5eXl5LW1tLWRkXCIsXG4gICAgICAgICAgICAgICAgbGVhcGRheTogXCItMDItMjlcIixcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3I6IFwiLVwiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcInl5eXkvbW0vZGRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGV0aW1lOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCIxLzIveSBoOnNcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJkZC9tbS95eXl5IGhoOm1tXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwiZGQvbW0veXl5eVwiLFxuICAgICAgICAgICAgICAgIHJlZ2V4OiB7XG4gICAgICAgICAgICAgICAgICAgIGhyc3ByZTogbmV3IFJlZ0V4cChcIlswMTJdXCIpLFxuICAgICAgICAgICAgICAgICAgICBocnMyNDogbmV3IFJlZ0V4cChcIjJbMC00XXwxWzMtOV1cIiksXG4gICAgICAgICAgICAgICAgICAgIGhyczogbmV3IFJlZ0V4cChcIlswMV1bMC05XXwyWzAtNF1cIiksXG4gICAgICAgICAgICAgICAgICAgIGFtcG06IG5ldyBSZWdFeHAoXCJeW2F8cHxBfFBdW218TV1cIiksXG4gICAgICAgICAgICAgICAgICAgIG1zcHJlOiBuZXcgUmVnRXhwKFwiWzAtNV1cIiksXG4gICAgICAgICAgICAgICAgICAgIG1zOiBuZXcgUmVnRXhwKFwiWzAtNV1bMC05XVwiKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGltZXNlcGFyYXRvcjogXCI6XCIsXG4gICAgICAgICAgICAgICAgaG91ckZvcm1hdDogXCIyNFwiLFxuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIGg6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCIyNFwiID09PSBvcHRzLmhvdXJGb3JtYXQgJiYgMjQgPT09IHBhcnNlSW50KGNocnMsIDEwKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdID0gXCIwXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyW3Bvc10gPSBcIjBcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHBvcyAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBcIjBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLnJlZ2V4Lmhycy50ZXN0KGNocnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICFpc1ZhbGlkICYmIChjaHJzLmNoYXJBdCgxKSA9PT0gb3B0cy50aW1lc2VwYXJhdG9yIHx8IC0xICE9PSBcIi0uOlwiLmluZGV4T2YoY2hycy5jaGFyQXQoMSkpKSAmJiAoaXNWYWxpZCA9IG9wdHMucmVnZXguaHJzLnRlc3QoXCIwXCIgKyBjaHJzLmNoYXJBdCgwKSkpKSByZXR1cm4gbWFza3NldC5idWZmZXJbcG9zIC0gMV0gPSBcIjBcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC5idWZmZXJbcG9zXSA9IGNocnMuY2hhckF0KDApLCBwb3MrKywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHBvcyAtIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogb3B0cy50aW1lc2VwYXJhdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCAmJiBcIjI0XCIgIT09IG9wdHMuaG91ckZvcm1hdCAmJiBvcHRzLnJlZ2V4LmhyczI0LnRlc3QoY2hycykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IHBhcnNlSW50KGNocnMsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDI0ID09PSB0bXAgPyAobWFza3NldC5idWZmZXJbcG9zICsgNV0gPSBcImFcIiwgbWFza3NldC5idWZmZXJbcG9zICsgNl0gPSBcIm1cIikgOiAobWFza3NldC5idWZmZXJbcG9zICsgNV0gPSBcInBcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyW3BvcyArIDZdID0gXCJtXCIpLCAodG1wIC09IDEyKSA8IDEwID8gKG1hc2tzZXQuYnVmZmVyW3Bvc10gPSB0bXAudG9TdHJpbmcoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdID0gXCIwXCIpIDogKG1hc2tzZXQuYnVmZmVyW3Bvc10gPSB0bXAudG9TdHJpbmcoKS5jaGFyQXQoMSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSA9IHRtcC50b1N0cmluZygpLmNoYXJBdCgwKSksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHBvcyAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBwb3MgKyA2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogbWFza3NldC5idWZmZXJbcG9zXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZhbGlkYXRvcjogWyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMucmVnZXguaHJzcHJlLnRlc3QoY2hycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpY3QgfHwgaXNWYWxpZCB8fCAhKGlzVmFsaWQgPSBvcHRzLnJlZ2V4Lmhycy50ZXN0KFwiMFwiICsgY2hycykpID8gaXNWYWxpZCA6IChtYXNrc2V0LmJ1ZmZlcltwb3NdID0gXCIwXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MrKywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBdXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC01XVswLTldXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZhbGlkYXRvcjogWyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMucmVnZXgubXNwcmUudGVzdChjaHJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmljdCB8fCBpc1ZhbGlkIHx8ICEoaXNWYWxpZCA9IG9wdHMucmVnZXgubXMudGVzdChcIjBcIiArIGNocnMpKSA/IGlzVmFsaWQgOiAobWFza3NldC5idWZmZXJbcG9zXSA9IFwiMFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zKyssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMucmVnZXguYW1wbS50ZXN0KGNocnMgKyBcIm1cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBcImxvd2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnNlcnRNb2RlOiAhMSxcbiAgICAgICAgICAgICAgICBhdXRvVW5tYXNrOiAhMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGV0aW1lMTI6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcIjEvMi95IGg6cyB0XFxcXG1cIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJkZC9tbS95eXl5IGhoOm1tIHhtXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICBob3VyRm9ybWF0OiBcIjEyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIm1tL2RkL3l5eXkgaGg6bW0geG1cIjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiMS8yL3kgaDpzIHRcXFxcbVwiLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIm1tL2RkL3l5eXkgaGg6bW0geG1cIixcbiAgICAgICAgICAgICAgICBhbGlhczogXCJkYXRldGltZTEyXCIsXG4gICAgICAgICAgICAgICAgcmVnZXg6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsMnByZTogZnVuY3Rpb24oc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxMy05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCJbMC0zXSl8KDAyXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCJbMC0yXSlcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbDI6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIoMFsxLTldfFsxMl1bMC05XSkpfCgoMFsxMy05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIzMCl8KCgwWzEzNTc4XXwxWzAyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIjMxKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsMXByZTogbmV3IFJlZ0V4cChcIlswMV1cIiksXG4gICAgICAgICAgICAgICAgICAgIHZhbDE6IG5ldyBSZWdFeHAoXCIwWzEtOV18MVswMTJdXCIpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsZWFwZGF5OiBcIjAyLzI5L1wiLFxuICAgICAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24oZSwgYnVmZmVyLCBjYXJldFBvcywgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT09IElucHV0bWFzay5rZXlDb2RlLlJJR0hUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbCgodG9kYXkuZ2V0TW9udGgoKSArIDEpLnRvU3RyaW5nKCkgKyB0b2RheS5nZXREYXRlKCkudG9TdHJpbmcoKSArIHRvZGF5LmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImhoOm1tIHRcIjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiaDpzIHRcXFxcbVwiLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImhoOm1tIHhtXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICBob3VyRm9ybWF0OiBcIjEyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImg6cyB0XCI6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcImg6cyB0XFxcXG1cIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJoaDptbSB4bVwiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICAgICAgaG91ckZvcm1hdDogXCIxMlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJoaDptbTpzc1wiOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCJoOnM6c1wiLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImhoOm1tOnNzXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICBhdXRvVW5tYXNrOiAhMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiaGg6bW1cIjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiaDpzXCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiaGg6bW1cIixcbiAgICAgICAgICAgICAgICBhbGlhczogXCJkYXRldGltZVwiLFxuICAgICAgICAgICAgICAgIGF1dG9Vbm1hc2s6ICExXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIGFsaWFzOiBcImRkL21tL3l5eXlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwibW0veXl5eVwiOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCIxL3lcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJtbS95eXl5XCIsXG4gICAgICAgICAgICAgICAgbGVhcGRheTogXCJkb25vdHVzZVwiLFxuICAgICAgICAgICAgICAgIHNlcGFyYXRvcjogXCIvXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwibW0vZGQveXl5eVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2hhbXNpOiB7XG4gICAgICAgICAgICAgICAgcmVnZXg6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsMnByZTogZnVuY3Rpb24oc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxLTldfDFbMDEyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIlswLTNdKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsMjogZnVuY3Rpb24oc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxLTldfDFbMDEyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIigwWzEtOV18WzEyXVswLTldKSl8KCgwWzEtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiMzApfCgoMFsxLTZdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiMzEpXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB2YWwxcHJlOiBuZXcgUmVnRXhwKFwiWzAxXVwiKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsMTogbmV3IFJlZ0V4cChcIjBbMS05XXwxWzAxMl1cIilcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHllYXJyYW5nZToge1xuICAgICAgICAgICAgICAgICAgICBtaW55ZWFyOiAxMzAwLFxuICAgICAgICAgICAgICAgICAgICBtYXh5ZWFyOiAxNDk5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYXNrOiBcInkvMS8yXCIsXG4gICAgICAgICAgICAgICAgbGVhcGRheTogXCIvMTIvMzBcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJ5eXl5L21tL2RkXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwibW0vZGQveXl5eVwiLFxuICAgICAgICAgICAgICAgIGNsZWFySW5jb21wbGV0ZTogITBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInl5eXktbW0tZGQgaGg6bW06c3NcIjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwieS0xLTIgaDpzOnNcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJ5eXl5LW1tLWRkIGhoOm1tOnNzXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3I6IFwiLVwiLFxuICAgICAgICAgICAgICAgIGxlYXBkYXk6IFwiLTAyLTI5XCIsXG4gICAgICAgICAgICAgICAgcmVnZXg6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsMnByZTogZnVuY3Rpb24oc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxMy05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCJbMC0zXSl8KDAyXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCJbMC0yXSlcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbDI6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIoMFsxLTldfFsxMl1bMC05XSkpfCgoMFsxMy05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIzMCl8KCgwWzEzNTc4XXwxWzAyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIjMxKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsMXByZTogbmV3IFJlZ0V4cChcIlswMV1cIiksXG4gICAgICAgICAgICAgICAgICAgIHZhbDE6IG5ldyBSZWdFeHAoXCIwWzEtOV18MVswMTJdXCIpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBJbnB1dG1hc2s7XG4gICAgfSk7XG59LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187XG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yO1xuICAgIHZvaWQgMCAhPT0gKF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18sIGV4cG9ydHMsIG1vZHVsZSkpICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKTtcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXztcbiAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gICAgdm9pZCAwICE9PSAoX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIH0uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fLCBleHBvcnRzLCBtb2R1bGUpKSAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyk7XG59LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXztcbiAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gICAgIWZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAgICAgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFsgX193ZWJwYWNrX3JlcXVpcmVfXygwKSwgX193ZWJwYWNrX3JlcXVpcmVfXygxKSBdLCBcbiAgICAgICAgdm9pZCAwICE9PSAoX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSBmYWN0b3J5KSA/IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXykgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pO1xuICAgIH0oZnVuY3Rpb24oJCwgSW5wdXRtYXNrKSB7XG4gICAgICAgIHJldHVybiBJbnB1dG1hc2suZXh0ZW5kRGVmaW5pdGlvbnMoe1xuICAgICAgICAgICAgQToge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbQS1aYS160JAt0Y/QgdGRw4Atw7/CtV1cIixcbiAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcbiAgICAgICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiJlwiOiB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXrQkC3Rj9CB0ZHDgC3Dv8K1XVwiLFxuICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxuICAgICAgICAgICAgICAgIGNhc2luZzogXCJ1cHBlclwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCIjXCI6IHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOUEtRmEtZl1cIixcbiAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcbiAgICAgICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xuICAgICAgICAgICAgdXJsOiB7XG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgaToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIi5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1hc2s6IFwiKFxcXFxodHRwOi8vKXwoXFxcXGh0dHBcXFxcczovLyl8KGZ0cDovLyl8KGZ0cFxcXFxzOi8vKWl7K31cIixcbiAgICAgICAgICAgICAgICBpbnNlcnRNb2RlOiAhMSxcbiAgICAgICAgICAgICAgICBhdXRvVW5tYXNrOiAhMSxcbiAgICAgICAgICAgICAgICBpbnB1dG1vZGU6IFwidXJsXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpcDoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiaVtpW2ldXS5pW2lbaV1dLmlbaVtpXV0uaVtpW2ldXVwiLFxuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIGk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zIC0gMSA+IC0xICYmIFwiLlwiICE9PSBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSA/IChjaHJzID0gbWFza3NldC5idWZmZXJbcG9zIC0gMV0gKyBjaHJzLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJzID0gcG9zIC0gMiA+IC0xICYmIFwiLlwiICE9PSBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAyXSA/IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDJdICsgY2hycyA6IFwiMFwiICsgY2hycykgOiBjaHJzID0gXCIwMFwiICsgY2hycywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChcIjI1WzAtNV18MlswLTRdWzAtOV18WzAxXVswLTldWzAtOV1cIikudGVzdChjaHJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvblVuTWFzazogZnVuY3Rpb24obWFza2VkVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tlZFZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5wdXRtb2RlOiBcIm51bWVyaWNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVtYWlsOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCIqezEsNjR9Wy4qezEsNjR9XVsuKnsxLDY0fV1bLip7MSw2M31dQC17MSw2M30uLXsxLDYzfVsuLXsxLDYzfV1bLi17MSw2M31dXCIsXG4gICAgICAgICAgICAgICAgZ3JlZWR5OiAhMSxcbiAgICAgICAgICAgICAgICBvbkJlZm9yZVBhc3RlOiBmdW5jdGlvbihwYXN0ZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHBhc3RlZFZhbHVlID0gcGFzdGVkVmFsdWUudG9Mb3dlckNhc2UoKSkucmVwbGFjZShcIm1haWx0bzpcIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBcIipcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXohIyQlJicqKy89P15fYHt8fX4tXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IFwibG93ZXJcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIi1cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXotXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IFwibG93ZXJcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvblVuTWFzazogZnVuY3Rpb24obWFza2VkVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tlZFZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5wdXRtb2RlOiBcImVtYWlsXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYWM6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcIiMjOiMjOiMjOiMjOiMjOiMjXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2aW46IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcIlZ7MTN9OXs0fVwiLFxuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIFY6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbQS1ISi1OUFItWmEtaGotbnByLXpcXFxcZF1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBcInVwcGVyXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2xlYXJJbmNvbXBsZXRlOiAhMCxcbiAgICAgICAgICAgICAgICBhdXRvVW5tYXNrOiAhMFxuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgSW5wdXRtYXNrO1xuICAgIH0pO1xufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187XG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yO1xuICAgICFmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgICAgIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbIF9fd2VicGFja19yZXF1aXJlX18oMCksIF9fd2VicGFja19yZXF1aXJlX18oMSkgXSwgXG4gICAgICAgIHZvaWQgMCAhPT0gKF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiAoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gZmFjdG9yeSkgPyBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKTtcbiAgICB9KGZ1bmN0aW9uKCQsIElucHV0bWFzaywgdW5kZWZpbmVkKSB7XG4gICAgICAgIGZ1bmN0aW9uIGF1dG9Fc2NhcGUodHh0LCBvcHRzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBlc2NhcGVkVHh0ID0gXCJcIiwgaSA9IDA7IGkgPCB0eHQubGVuZ3RoOyBpKyspIElucHV0bWFzay5wcm90b3R5cGUuZGVmaW5pdGlvbnNbdHh0LmNoYXJBdChpKV0gfHwgb3B0cy5kZWZpbml0aW9uc1t0eHQuY2hhckF0KGkpXSB8fCBvcHRzLm9wdGlvbmFsbWFya2VyLnN0YXJ0ID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMub3B0aW9uYWxtYXJrZXIuZW5kID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMucXVhbnRpZmllcm1hcmtlci5zdGFydCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLnF1YW50aWZpZXJtYXJrZXIuZW5kID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQgPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5ncm91cG1hcmtlci5lbmQgPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5hbHRlcm5hdG9ybWFya2VyID09PSB0eHQuY2hhckF0KGkpID8gZXNjYXBlZFR4dCArPSBcIlxcXFxcIiArIHR4dC5jaGFyQXQoaSkgOiBlc2NhcGVkVHh0ICs9IHR4dC5jaGFyQXQoaSk7XG4gICAgICAgICAgICByZXR1cm4gZXNjYXBlZFR4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xuICAgICAgICAgICAgbnVtZXJpYzoge1xuICAgICAgICAgICAgICAgIG1hc2s6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgIT09IG9wdHMucmVwZWF0ICYmIGlzTmFOKG9wdHMuaW50ZWdlckRpZ2l0cykgJiYgKG9wdHMuaW50ZWdlckRpZ2l0cyA9IG9wdHMucmVwZWF0KSwgXG4gICAgICAgICAgICAgICAgICAgIG9wdHMucmVwZWF0ID0gMCwgb3B0cy5ncm91cFNlcGFyYXRvciA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChcIi5cIiA9PT0gb3B0cy5yYWRpeFBvaW50ID8gb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiLFwiIDogXCIsXCIgPT09IG9wdHMucmFkaXhQb2ludCA/IG9wdHMuZ3JvdXBTZXBhcmF0b3IgPSBcIi5cIiA6IG9wdHMuZ3JvdXBTZXBhcmF0b3IgPSBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIFwiIFwiID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yICYmIChvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgPSB1bmRlZmluZWQpLCBvcHRzLmF1dG9Hcm91cCA9IG9wdHMuYXV0b0dyb3VwICYmIFwiXCIgIT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IsIFxuICAgICAgICAgICAgICAgICAgICBvcHRzLmF1dG9Hcm91cCAmJiAoXCJzdHJpbmdcIiA9PSB0eXBlb2Ygb3B0cy5ncm91cFNpemUgJiYgaXNGaW5pdGUob3B0cy5ncm91cFNpemUpICYmIChvcHRzLmdyb3VwU2l6ZSA9IHBhcnNlSW50KG9wdHMuZ3JvdXBTaXplKSksIFxuICAgICAgICAgICAgICAgICAgICBpc0Zpbml0ZShvcHRzLmludGVnZXJEaWdpdHMpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcHMgPSBNYXRoLmZsb29yKG9wdHMuaW50ZWdlckRpZ2l0cyAvIG9wdHMuZ3JvdXBTaXplKSwgbW9kID0gb3B0cy5pbnRlZ2VyRGlnaXRzICUgb3B0cy5ncm91cFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmludGVnZXJEaWdpdHMgPSBwYXJzZUludChvcHRzLmludGVnZXJEaWdpdHMpICsgKDAgPT09IG1vZCA/IHNlcHMgLSAxIDogc2VwcyksIFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnRlZ2VyRGlnaXRzIDwgMSAmJiAob3B0cy5pbnRlZ2VyRGlnaXRzID0gXCIqXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoID4gMSAmJiAob3B0cy5wbGFjZWhvbGRlciA9IG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApKSwgXG4gICAgICAgICAgICAgICAgICAgIFwicmFkaXhGb2N1c1wiID09PSBvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrICYmIFwiXCIgPT09IG9wdHMucGxhY2Vob2xkZXIgJiYgITEgPT09IG9wdHMuaW50ZWdlck9wdGlvbmFsICYmIChvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrID0gXCJsdnBcIiksIFxuICAgICAgICAgICAgICAgICAgICBvcHRzLmRlZmluaXRpb25zW1wiO1wiXSA9IG9wdHMuZGVmaW5pdGlvbnNbXCJ+XCJdLCBvcHRzLmRlZmluaXRpb25zW1wiO1wiXS5kZWZpbml0aW9uU3ltYm9sID0gXCJ+XCIsIFxuICAgICAgICAgICAgICAgICAgICAhMCA9PT0gb3B0cy5udW1lcmljSW5wdXQgJiYgKG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2sgPSBcInJhZGl4Rm9jdXNcIiA9PT0gb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljayA/IFwibHZwXCIgOiBvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrLCBcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5kaWdpdHNPcHRpb25hbCA9ICExLCBpc05hTihvcHRzLmRpZ2l0cykgJiYgKG9wdHMuZGlnaXRzID0gMiksIG9wdHMuZGVjaW1hbFByb3RlY3QgPSAhMSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrID0gXCJbK11cIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2sgKz0gYXV0b0VzY2FwZShvcHRzLnByZWZpeCwgb3B0cyksICEwID09PSBvcHRzLmludGVnZXJPcHRpb25hbCA/IG1hc2sgKz0gXCJ+ezEsXCIgKyBvcHRzLmludGVnZXJEaWdpdHMgKyBcIn1cIiA6IG1hc2sgKz0gXCJ+e1wiICsgb3B0cy5pbnRlZ2VyRGlnaXRzICsgXCJ9XCIsIFxuICAgICAgICAgICAgICAgICAgICBvcHRzLmRpZ2l0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLnJhZGl4UG9pbnREZWZpbml0aW9uU3ltYm9sID0gb3B0cy5kZWNpbWFsUHJvdGVjdCA/IFwiOlwiIDogb3B0cy5yYWRpeFBvaW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRxID0gb3B0cy5kaWdpdHMudG9TdHJpbmcoKS5zcGxpdChcIixcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0Zpbml0ZShkcVswXSAmJiBkcVsxXSAmJiBpc0Zpbml0ZShkcVsxXSkpID8gbWFzayArPSBvcHRzLnJhZGl4UG9pbnREZWZpbml0aW9uU3ltYm9sICsgXCI7e1wiICsgb3B0cy5kaWdpdHMgKyBcIn1cIiA6IChpc05hTihvcHRzLmRpZ2l0cykgfHwgcGFyc2VJbnQob3B0cy5kaWdpdHMpID4gMCkgJiYgKG9wdHMuZGlnaXRzT3B0aW9uYWwgPyBtYXNrICs9IFwiW1wiICsgb3B0cy5yYWRpeFBvaW50RGVmaW5pdGlvblN5bWJvbCArIFwiO3sxLFwiICsgb3B0cy5kaWdpdHMgKyBcIn1dXCIgOiBtYXNrICs9IG9wdHMucmFkaXhQb2ludERlZmluaXRpb25TeW1ib2wgKyBcIjt7XCIgKyBvcHRzLmRpZ2l0cyArIFwifVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFzayArPSBhdXRvRXNjYXBlKG9wdHMuc3VmZml4LCBvcHRzKSwgbWFzayArPSBcIlstXVwiLCBvcHRzLmdyZWVkeSA9ICExLCBtYXNrO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCIsXG4gICAgICAgICAgICAgICAgZ3JlZWR5OiAhMSxcbiAgICAgICAgICAgICAgICBkaWdpdHM6IFwiKlwiLFxuICAgICAgICAgICAgICAgIGRpZ2l0c09wdGlvbmFsOiAhMCxcbiAgICAgICAgICAgICAgICBlbmZvcmNlRGlnaXRzT25CbHVyOiAhMSxcbiAgICAgICAgICAgICAgICByYWRpeFBvaW50OiBcIi5cIixcbiAgICAgICAgICAgICAgICBwb3NpdGlvbkNhcmV0T25DbGljazogXCJyYWRpeEZvY3VzXCIsXG4gICAgICAgICAgICAgICAgZ3JvdXBTaXplOiAzLFxuICAgICAgICAgICAgICAgIGdyb3VwU2VwYXJhdG9yOiBcIlwiLFxuICAgICAgICAgICAgICAgIGF1dG9Hcm91cDogITEsXG4gICAgICAgICAgICAgICAgYWxsb3dNaW51czogITAsXG4gICAgICAgICAgICAgICAgbmVnYXRpb25TeW1ib2w6IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbnQ6IFwiLVwiLFxuICAgICAgICAgICAgICAgICAgICBiYWNrOiBcIlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnRlZ2VyRGlnaXRzOiBcIitcIixcbiAgICAgICAgICAgICAgICBpbnRlZ2VyT3B0aW9uYWw6ICEwLFxuICAgICAgICAgICAgICAgIHByZWZpeDogXCJcIixcbiAgICAgICAgICAgICAgICBzdWZmaXg6IFwiXCIsXG4gICAgICAgICAgICAgICAgcmlnaHRBbGlnbjogITAsXG4gICAgICAgICAgICAgICAgZGVjaW1hbFByb3RlY3Q6ICEwLFxuICAgICAgICAgICAgICAgIG1pbjogbnVsbCxcbiAgICAgICAgICAgICAgICBtYXg6IG51bGwsXG4gICAgICAgICAgICAgICAgc3RlcDogMSxcbiAgICAgICAgICAgICAgICBpbnNlcnRNb2RlOiAhMCxcbiAgICAgICAgICAgICAgICBhdXRvVW5tYXNrOiAhMSxcbiAgICAgICAgICAgICAgICB1bm1hc2tBc051bWJlcjogITEsXG4gICAgICAgICAgICAgICAgaW5wdXRtb2RlOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgICAgICBwcmVWYWxpZGF0aW9uOiBmdW5jdGlvbihidWZmZXIsIHBvcywgYywgaXNTZWxlY3Rpb24sIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiLVwiID09PSBjIHx8IGMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpIHJldHVybiAhMCA9PT0gb3B0cy5hbGxvd01pbnVzICYmIChvcHRzLmlzTmVnYXRpdmUgPSBvcHRzLmlzTmVnYXRpdmUgPT09IHVuZGVmaW5lZCB8fCAhb3B0cy5pc05lZ2F0aXZlLCBcbiAgICAgICAgICAgICAgICAgICAgXCJcIiA9PT0gYnVmZmVyLmpvaW4oXCJcIikgfHwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvcG9zdDogITBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghMSA9PT0gaXNTZWxlY3Rpb24gJiYgYyA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIG9wdHMuZGlnaXRzICE9PSB1bmRlZmluZWQgJiYgKGlzTmFOKG9wdHMuZGlnaXRzKSB8fCBwYXJzZUludChvcHRzLmRpZ2l0cykgPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtMSAhPT0gcmFkaXhQb3MpIHJldHVybiAhMCA9PT0gb3B0cy5udW1lcmljSW5wdXQgPyBwb3MgPT09IHJhZGl4UG9zIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiByYWRpeFBvcyArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcG9zdFZhbGlkYXRpb246IGZ1bmN0aW9uKGJ1ZmZlciwgY3VycmVudFJlc3VsdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3VmZml4ID0gb3B0cy5zdWZmaXguc3BsaXQoXCJcIiksIHByZWZpeCA9IG9wdHMucHJlZml4LnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFJlc3VsdC5wb3MgPT09IHVuZGVmaW5lZCAmJiBjdXJyZW50UmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgJiYgITAgIT09IGN1cnJlbnRSZXN1bHQuZG9wb3N0KSByZXR1cm4gY3VycmVudFJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY3VycmVudFJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkID8gY3VycmVudFJlc3VsdC5jYXJldCA6IGN1cnJlbnRSZXN1bHQucG9zLCBtYXNrZWRWYWx1ZSA9IGJ1ZmZlci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICBvcHRzLm51bWVyaWNJbnB1dCAmJiAoY2FyZXRQb3MgPSBtYXNrZWRWYWx1ZS5sZW5ndGggLSBjYXJldFBvcyAtIDEsIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmV2ZXJzZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoYXJBdFBvcyA9IG1hc2tlZFZhbHVlW2NhcmV0UG9zXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyA9PT0gb3B0cy5ncm91cFNlcGFyYXRvciAmJiAoY2hhckF0UG9zID0gbWFza2VkVmFsdWVbY2FyZXRQb3MgKz0gMV0pLCBcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPT09IG1hc2tlZFZhbHVlLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtIDEgJiYgY2hhckF0UG9zID09PSBvcHRzLnJhZGl4UG9pbnQpIHJldHVybiBjdXJyZW50UmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBjaGFyQXRQb3MgIT09IHVuZGVmaW5lZCAmJiBjaGFyQXRQb3MgIT09IG9wdHMucmFkaXhQb2ludCAmJiBjaGFyQXRQb3MgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgJiYgY2hhckF0UG9zICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2sgJiYgKG1hc2tlZFZhbHVlW2NhcmV0UG9zXSA9IFwiP1wiLCBcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5wcmVmaXgubGVuZ3RoID4gMCAmJiBjYXJldFBvcyA+PSAoITEgPT09IG9wdHMuaXNOZWdhdGl2ZSA/IDEgOiAwKSAmJiBjYXJldFBvcyA8IG9wdHMucHJlZml4Lmxlbmd0aCAtIDEgKyAoITEgPT09IG9wdHMuaXNOZWdhdGl2ZSA/IDEgOiAwKSA/IHByZWZpeFtjYXJldFBvcyAtICghMSA9PT0gb3B0cy5pc05lZ2F0aXZlID8gMSA6IDApXSA9IFwiP1wiIDogb3B0cy5zdWZmaXgubGVuZ3RoID4gMCAmJiBjYXJldFBvcyA+PSBtYXNrZWRWYWx1ZS5sZW5ndGggLSBvcHRzLnN1ZmZpeC5sZW5ndGggLSAoITEgPT09IG9wdHMuaXNOZWdhdGl2ZSA/IDEgOiAwKSAmJiAoc3VmZml4W2NhcmV0UG9zIC0gKG1hc2tlZFZhbHVlLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtICghMSA9PT0gb3B0cy5pc05lZ2F0aXZlID8gMSA6IDApKV0gPSBcIj9cIikpLCBcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4ID0gcHJlZml4LmpvaW4oXCJcIiksIHN1ZmZpeCA9IHN1ZmZpeC5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc1ZhbHVlID0gbWFza2VkVmFsdWUuam9pbihcIlwiKS5yZXBsYWNlKHByZWZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShzdWZmaXgsIFwiXCIpLCBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJbLVwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpICsgXCJdXCIsIFwiZ1wiKSwgXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spICsgXCIkXCIpLCBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIGlzTmFOKG9wdHMucGxhY2Vob2xkZXIpICYmIChwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnBsYWNlaG9sZGVyKSwgXCJnXCIpLCBcIlwiKSksIFxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUubGVuZ3RoID4gMSAmJiAxICE9PSBwcm9jZXNzVmFsdWUuaW5kZXhPZihvcHRzLnJhZGl4UG9pbnQpICYmIChcIjBcIiA9PT0gY2hhckF0UG9zICYmIChwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZSgvXlxcPy9nLCBcIlwiKSksIFxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZSgvXjAvZywgXCJcIikpLCBwcm9jZXNzVmFsdWUuY2hhckF0KDApID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgXCJcIiAhPT0gb3B0cy5yYWRpeFBvaW50ICYmICEwICE9PSBvcHRzLm51bWVyaWNJbnB1dCAmJiAocHJvY2Vzc1ZhbHVlID0gXCIwXCIgKyBwcm9jZXNzVmFsdWUpLCBcbiAgICAgICAgICAgICAgICAgICAgXCJcIiAhPT0gcHJvY2Vzc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnNwbGl0KFwiXCIpLCAoIW9wdHMuZGlnaXRzT3B0aW9uYWwgfHwgb3B0cy5lbmZvcmNlRGlnaXRzT25CbHVyICYmIFwiYmx1clwiID09PSBjdXJyZW50UmVzdWx0LmV2ZW50KSAmJiBpc0Zpbml0ZShvcHRzLmRpZ2l0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3NpdGlvbiA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIHByb2Nlc3NWYWx1ZSksIHJwYiA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIG1hc2tlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtMSA9PT0gcmFkaXhQb3NpdGlvbiAmJiAocHJvY2Vzc1ZhbHVlLnB1c2gob3B0cy5yYWRpeFBvaW50KSwgcmFkaXhQb3NpdGlvbiA9IHByb2Nlc3NWYWx1ZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBvcHRzLmRpZ2l0czsgaSsrKSBvcHRzLmRpZ2l0c09wdGlvbmFsICYmICghb3B0cy5lbmZvcmNlRGlnaXRzT25CbHVyIHx8IFwiYmx1clwiICE9PSBjdXJyZW50UmVzdWx0LmV2ZW50KSB8fCBwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldICE9PSB1bmRlZmluZWQgJiYgcHJvY2Vzc1ZhbHVlW3JhZGl4UG9zaXRpb24gKyBpXSAhPT0gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkgPyAtMSAhPT0gcnBiICYmIG1hc2tlZFZhbHVlW3JwYiArIGldICE9PSB1bmRlZmluZWQgJiYgKHByb2Nlc3NWYWx1ZVtyYWRpeFBvc2l0aW9uICsgaV0gPSBwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldIHx8IG1hc2tlZFZhbHVlW3JwYiArIGldKSA6IHByb2Nlc3NWYWx1ZVtyYWRpeFBvc2l0aW9uICsgaV0gPSBjdXJyZW50UmVzdWx0LnBsYWNlaG9sZGVyIHx8IG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEwICE9PSBvcHRzLmF1dG9Hcm91cCB8fCBcIlwiID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yIHx8IGNoYXJBdFBvcyA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIGN1cnJlbnRSZXN1bHQucG9zID09PSB1bmRlZmluZWQgJiYgIWN1cnJlbnRSZXN1bHQuZG9wb3N0KSBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUuam9pbihcIlwiKTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZFJhZGl4ID0gcHJvY2Vzc1ZhbHVlW3Byb2Nlc3NWYWx1ZS5sZW5ndGggLSAxXSA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIGN1cnJlbnRSZXN1bHQuYyA9PT0gb3B0cy5yYWRpeFBvaW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IElucHV0bWFzayhmdW5jdGlvbihidWZmZXIsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3RNYXNrID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc3RNYXNrICs9IFwiKFwiICsgb3B0cy5ncm91cFNlcGFyYXRvciArIFwiKntcIiArIG9wdHMuZ3JvdXBTaXplICsgXCJ9KXsqfVwiLCBcIlwiICE9PSBvcHRzLnJhZGl4UG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFNwbGl0ID0gYnVmZmVyLmpvaW4oXCJcIikuc3BsaXQob3B0cy5yYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl4U3BsaXRbMV0gJiYgKHBvc3RNYXNrICs9IG9wdHMucmFkaXhQb2ludCArIFwiKntcIiArIHJhZGl4U3BsaXRbMV0ubWF0Y2goL15cXGQqXFw/P1xcZCovKVswXS5sZW5ndGggKyBcIn1cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvc3RNYXNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0ocHJvY2Vzc1ZhbHVlLCBvcHRzKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmljSW5wdXQ6ICEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqaXRNYXNraW5nOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKlwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTk/XVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5mb3JtYXQocHJvY2Vzc1ZhbHVlLmpvaW4oXCJcIikpLCBhZGRSYWRpeCAmJiAocHJvY2Vzc1ZhbHVlICs9IG9wdHMucmFkaXhQb2ludCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZS5jaGFyQXQoMCkgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgJiYgcHJvY2Vzc1ZhbHVlLnN1YnN0cigxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5pc05lZ2F0aXZlICYmIFwiYmx1clwiID09PSBjdXJyZW50UmVzdWx0LmV2ZW50ICYmIChvcHRzLmlzTmVnYXRpdmUgPSBcIjBcIiAhPT0gcHJvY2Vzc1ZhbHVlKSwgXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByZWZpeCArIHByb2Nlc3NWYWx1ZSwgcHJvY2Vzc1ZhbHVlICs9IHN1ZmZpeCwgb3B0cy5pc05lZ2F0aXZlICYmIChwcm9jZXNzVmFsdWUgPSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250ICsgcHJvY2Vzc1ZhbHVlLCBcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlICs9IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjayksIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5zcGxpdChcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIGNoYXJBdFBvcyAhPT0gdW5kZWZpbmVkKSBpZiAoY2hhckF0UG9zICE9PSBvcHRzLnJhZGl4UG9pbnQgJiYgY2hhckF0UG9zICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250ICYmIGNoYXJBdFBvcyAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSAoY2FyZXRQb3MgPSAkLmluQXJyYXkoXCI/XCIsIHByb2Nlc3NWYWx1ZSkpID4gLTEgPyBwcm9jZXNzVmFsdWVbY2FyZXRQb3NdID0gY2hhckF0UG9zIDogY2FyZXRQb3MgPSBjdXJyZW50UmVzdWx0LmNhcmV0IHx8IDA7IGVsc2UgaWYgKGNoYXJBdFBvcyA9PT0gb3B0cy5yYWRpeFBvaW50IHx8IGNoYXJBdFBvcyA9PT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCB8fCBjaGFyQXRQb3MgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0NhcmV0UG9zID0gJC5pbkFycmF5KGNoYXJBdFBvcywgcHJvY2Vzc1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC0xICE9PSBuZXdDYXJldFBvcyAmJiAoY2FyZXRQb3MgPSBuZXdDYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3B0cy5udW1lcmljSW5wdXQgJiYgKGNhcmV0UG9zID0gcHJvY2Vzc1ZhbHVlLmxlbmd0aCAtIGNhcmV0UG9zIC0gMSwgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJldmVyc2UoKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByc2x0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNoYXJBdFBvcyA9PT0gdW5kZWZpbmVkIHx8IGN1cnJlbnRSZXN1bHQucG9zICE9PSB1bmRlZmluZWQgPyBjYXJldFBvcyArIChvcHRzLm51bWVyaWNJbnB1dCA/IC0xIDogMSkgOiBjYXJldFBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogcHJvY2Vzc1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IGN1cnJlbnRSZXN1bHQuZG9wb3N0IHx8IGJ1ZmZlci5qb2luKFwiXCIpICE9PSBwcm9jZXNzVmFsdWUuam9pbihcIlwiKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnNsdC5yZWZyZXNoRnJvbUJ1ZmZlciA/IHJzbHQgOiBjdXJyZW50UmVzdWx0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25CZWZvcmVXcml0ZTogZnVuY3Rpb24oZSwgYnVmZmVyLCBjYXJldFBvcywgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZSkgc3dpdGNoIChlLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMucG9zdFZhbGlkYXRpb24oYnVmZmVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvcG9zdDogITBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wdHMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJsdXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY2hlY2t2YWxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bm1hc2tlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5wYXJzZU1pbk1heE9wdGlvbnMgPT09IHVuZGVmaW5lZCAmJiAobnVsbCAhPT0gb3B0cy5taW4gJiYgKG9wdHMubWluID0gb3B0cy5taW4udG9TdHJpbmcoKS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIixcIiA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChvcHRzLm1pbiA9IG9wdHMubWluLnJlcGxhY2Uob3B0cy5yYWRpeFBvaW50LCBcIi5cIikpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLm1pbiA9IGlzRmluaXRlKG9wdHMubWluKSA/IHBhcnNlRmxvYXQob3B0cy5taW4pIDogTmFOLCBpc05hTihvcHRzLm1pbikgJiYgKG9wdHMubWluID0gTnVtYmVyLk1JTl9WQUxVRSkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9PSBvcHRzLm1heCAmJiAob3B0cy5tYXggPSBvcHRzLm1heC50b1N0cmluZygpLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLFwiID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgKG9wdHMubWF4ID0gb3B0cy5tYXgucmVwbGFjZShvcHRzLnJhZGl4UG9pbnQsIFwiLlwiKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMubWF4ID0gaXNGaW5pdGUob3B0cy5tYXgpID8gcGFyc2VGbG9hdChvcHRzLm1heCkgOiBOYU4sIGlzTmFOKG9wdHMubWF4KSAmJiAob3B0cy5tYXggPSBOdW1iZXIuTUFYX1ZBTFVFKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMucGFyc2VNaW5NYXhPcHRpb25zID0gXCJkb25lXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfShvcHRzKSwgbnVsbCAhPT0gb3B0cy5taW4gfHwgbnVsbCAhPT0gb3B0cy5tYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5tYXNrZWQgPSBvcHRzLm9uVW5NYXNrKGJ1ZmZlci5qb2luKFwiXCIpLCB1bmRlZmluZWQsICQuZXh0ZW5kKHt9LCBvcHRzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVubWFza0FzTnVtYmVyOiAhMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgbnVsbCAhPT0gb3B0cy5taW4gJiYgdW5tYXNrZWQgPCBvcHRzLm1pbikgcmV0dXJuIG9wdHMuaXNOZWdhdGl2ZSA9IG9wdHMubWluIDwgMCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5wb3N0VmFsaWRhdGlvbihvcHRzLm1pbi50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsIG9wdHMucmFkaXhQb2ludCkuc3BsaXQoXCJcIiksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3Bvc3Q6ICEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gb3B0cy5tYXggJiYgdW5tYXNrZWQgPiBvcHRzLm1heCkgcmV0dXJuIG9wdHMuaXNOZWdhdGl2ZSA9IG9wdHMubWF4IDwgMCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5wb3N0VmFsaWRhdGlvbihvcHRzLm1heC50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsIG9wdHMucmFkaXhQb2ludCkuc3BsaXQoXCJcIiksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3Bvc3Q6ICEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBvc3RWYWxpZGF0aW9uKGJ1ZmZlciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBjYXJldFBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IFwiYmx1clwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBvcHRzKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJfY2hlY2t2YWxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZWdleDoge1xuICAgICAgICAgICAgICAgICAgICBpbnRlZ2VyUGFydDogZnVuY3Rpb24ob3B0cywgZW1wdHlDaGVjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5Q2hlY2sgPyBuZXcgUmVnRXhwKFwiW1wiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpICsgXCIrXT9cIikgOiBuZXcgUmVnRXhwKFwiW1wiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpICsgXCIrXT9cXFxcZCtcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGludGVnZXJOUGFydDogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCJbXFxcXGRcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSkgKyBcIl0rXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBcIn5cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cywgaXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IHN0cmljdCA/IG5ldyBSZWdFeHAoXCJbMC05XCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvcikgKyBcIl1cIikudGVzdChjaHJzKSA6IG5ldyBSZWdFeHAoXCJbMC05XVwiKS50ZXN0KGNocnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghMCA9PT0gaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoITAgIT09IG9wdHMubnVtZXJpY0lucHV0ICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSAhPT0gdW5kZWZpbmVkICYmIFwiflwiID09PSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10ubWF0Y2guZGVmICYmICFpc1NlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NWYWx1ZSA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oXCJcIiksIHB2UmFkaXhTcGxpdCA9IChwcm9jZXNzVmFsdWUgPSAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChcIlstXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkgKyBcIl1cIiwgXCJnXCIpLCBcIlwiKSkucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spICsgXCIkXCIpLCBcIlwiKSkuc3BsaXQob3B0cy5yYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB2UmFkaXhTcGxpdC5sZW5ndGggPiAxICYmIChwdlJhZGl4U3BsaXRbMV0gPSBwdlJhZGl4U3BsaXRbMV0ucmVwbGFjZSgvMC9nLCBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiMFwiID09PSBwdlJhZGl4U3BsaXRbMF0gJiYgKHB2UmFkaXhTcGxpdFswXSA9IHB2UmFkaXhTcGxpdFswXS5yZXBsYWNlKC8wL2csIG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHZSYWRpeFNwbGl0WzBdICsgb3B0cy5yYWRpeFBvaW50ICsgcHZSYWRpeFNwbGl0WzFdIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyVGVtcGxhdGUgPSBtYXNrc2V0Ll9idWZmZXIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocHJvY2Vzc1ZhbHVlID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgKHByb2Nlc3NWYWx1ZSA9IGJ1ZmZlclRlbXBsYXRlKTsgbnVsbCA9PT0gcHJvY2Vzc1ZhbHVlLm1hdGNoKElucHV0bWFzay5lc2NhcGVSZWdleChidWZmZXJUZW1wbGF0ZSkgKyBcIiRcIik7ICkgYnVmZmVyVGVtcGxhdGUgPSBidWZmZXJUZW1wbGF0ZS5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSAocHJvY2Vzc1ZhbHVlID0gKHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKGJ1ZmZlclRlbXBsYXRlLCBcIlwiKSkuc3BsaXQoXCJcIikpW3Bvc10gPT09IHVuZGVmaW5lZCA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmU6IHBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBzdHJpY3QgfHwgY2hycyAhPT0gb3B0cy5yYWRpeFBvaW50IHx8IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV0gIT09IHVuZGVmaW5lZCB8fCAobWFza3NldC5idWZmZXJbcG9zXSA9IFwiMFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIitcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmFsbG93TWludXMgJiYgKFwiLVwiID09PSBjaHJzIHx8IGNocnMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCItXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5hbGxvd01pbnVzICYmIGNocnMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiOlwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4ID0gXCJbXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5yYWRpeFBvaW50KSArIFwiXVwiLCBpc1ZhbGlkID0gbmV3IFJlZ0V4cChyYWRpeCkudGVzdChjaHJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoLnBsYWNlaG9sZGVyID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgKGlzVmFsaWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBwb3MgKyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnJhZGl4UG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJcIiA9PT0gdW5tYXNrZWRWYWx1ZSAmJiAhMCA9PT0gb3B0cy5udWxsYWJsZSkgcmV0dXJuIHVubWFza2VkVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMucHJlZml4LCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG9wdHMuc3VmZml4LCBcIlwiKSwgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICBcIlwiICE9PSBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSAmJiAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSwgXCJnXCIpLCBcIjBcIikpLCBcbiAgICAgICAgICAgICAgICAgICAgb3B0cy51bm1hc2tBc051bWJlciA/IChcIlwiICE9PSBvcHRzLnJhZGl4UG9pbnQgJiYgLTEgIT09IHByb2Nlc3NWYWx1ZS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCkgJiYgKHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIG9wdHMucmFkaXhQb2ludCksIFwiLlwiKSksIFxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiXlwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpKSwgXCItXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSArIFwiJFwiKSwgXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICBOdW1iZXIocHJvY2Vzc1ZhbHVlKSkgOiBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpc0NvbXBsZXRlOiBmdW5jdGlvbihidWZmZXIsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2tlZFZhbHVlID0gYnVmZmVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXIuc2xpY2UoKS5qb2luKFwiXCIpICE9PSBtYXNrZWRWYWx1ZSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc1ZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShvcHRzLnByZWZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShvcHRzLnN1ZmZpeCwgXCJcIiksIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgXCIsXCIgPT09IG9wdHMucmFkaXhQb2ludCAmJiAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMucmFkaXhQb2ludCksIFwiLlwiKSksIFxuICAgICAgICAgICAgICAgICAgICBpc0Zpbml0ZShwcm9jZXNzVmFsdWUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25CZWZvcmVNYXNrOiBmdW5jdGlvbihpbml0aWFsVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuaXNOZWdhdGl2ZSA9IHVuZGVmaW5lZCwgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnRvU3RyaW5nKCkuY2hhckF0KGluaXRpYWxWYWx1ZS5sZW5ndGggLSAxKSA9PT0gb3B0cy5yYWRpeFBvaW50ID8gaW5pdGlhbFZhbHVlLnRvU3RyaW5nKCkuc3Vic3RyKDAsIGluaXRpYWxWYWx1ZS5sZW5ndGggLSAxKSA6IGluaXRpYWxWYWx1ZS50b1N0cmluZygpLCBcbiAgICAgICAgICAgICAgICAgICAgXCJcIiAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIGlzRmluaXRlKGluaXRpYWxWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2cyA9IGluaXRpYWxWYWx1ZS5zcGxpdChcIi5cIiksIGdyb3VwU2l6ZSA9IFwiXCIgIT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgPyBwYXJzZUludChvcHRzLmdyb3VwU2l6ZSkgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgMiA9PT0gdnMubGVuZ3RoICYmICh2c1swXS5sZW5ndGggPiBncm91cFNpemUgfHwgdnNbMV0ubGVuZ3RoID4gZ3JvdXBTaXplIHx8IHZzWzBdLmxlbmd0aCA8PSBncm91cFNpemUgJiYgdnNbMV0ubGVuZ3RoIDwgZ3JvdXBTaXplKSAmJiAoaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnJlcGxhY2UoXCIuXCIsIG9wdHMucmFkaXhQb2ludCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBrb21tYU1hdGNoZXMgPSBpbml0aWFsVmFsdWUubWF0Y2goLywvZyksIGRvdE1hdGNoZXMgPSBpbml0aWFsVmFsdWUubWF0Y2goL1xcLi9nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSA9IGRvdE1hdGNoZXMgJiYga29tbWFNYXRjaGVzID8gZG90TWF0Y2hlcy5sZW5ndGggPiBrb21tYU1hdGNoZXMubGVuZ3RoID8gKGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5yZXBsYWNlKC9cXC4vZywgXCJcIikpLnJlcGxhY2UoXCIsXCIsIG9wdHMucmFkaXhQb2ludCkgOiBrb21tYU1hdGNoZXMubGVuZ3RoID4gZG90TWF0Y2hlcy5sZW5ndGggPyAoaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnJlcGxhY2UoLywvZywgXCJcIikpLnJlcGxhY2UoXCIuXCIsIG9wdHMucmFkaXhQb2ludCkgOiBpbml0aWFsVmFsdWUuaW5kZXhPZihcIi5cIikgPCBpbml0aWFsVmFsdWUuaW5kZXhPZihcIixcIikgPyBpbml0aWFsVmFsdWUucmVwbGFjZSgvXFwuL2csIFwiXCIpIDogaW5pdGlhbFZhbHVlLnJlcGxhY2UoLywvZywgXCJcIikgOiBpbml0aWFsVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIDAgPT09IG9wdHMuZGlnaXRzICYmICgtMSAhPT0gaW5pdGlhbFZhbHVlLmluZGV4T2YoXCIuXCIpID8gaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnN1YnN0cmluZygwLCBpbml0aWFsVmFsdWUuaW5kZXhPZihcIi5cIikpIDogLTEgIT09IGluaXRpYWxWYWx1ZS5pbmRleE9mKFwiLFwiKSAmJiAoaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnN1YnN0cmluZygwLCBpbml0aWFsVmFsdWUuaW5kZXhPZihcIixcIikpKSksIFxuICAgICAgICAgICAgICAgICAgICBcIlwiICE9PSBvcHRzLnJhZGl4UG9pbnQgJiYgaXNGaW5pdGUob3B0cy5kaWdpdHMpICYmIC0xICE9PSBpbml0aWFsVmFsdWUuaW5kZXhPZihvcHRzLnJhZGl4UG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVjUGFydCA9IGluaXRpYWxWYWx1ZS5zcGxpdChvcHRzLnJhZGl4UG9pbnQpWzFdLm1hdGNoKG5ldyBSZWdFeHAoXCJcXFxcZCpcIikpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KG9wdHMuZGlnaXRzKSA8IGRlY1BhcnQudG9TdHJpbmcoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlnaXRzRmFjdG9yID0gTWF0aC5wb3coMTAsIHBhcnNlSW50KG9wdHMuZGlnaXRzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnJlcGxhY2UoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMucmFkaXhQb2ludCksIFwiLlwiKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gKGluaXRpYWxWYWx1ZSA9IE1hdGgucm91bmQocGFyc2VGbG9hdChpbml0aWFsVmFsdWUpICogZGlnaXRzRmFjdG9yKSAvIGRpZ2l0c0ZhY3RvcikudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBvcHRzLnJhZGl4UG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0aWFsVmFsdWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYW5DbGVhclBvc2l0aW9uOiBmdW5jdGlvbihtYXNrc2V0LCBwb3NpdGlvbiwgbHZwLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZwID0gbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NpdGlvbl0sIGNhbkNsZWFyID0gdnAuaW5wdXQgIT09IG9wdHMucmFkaXhQb2ludCB8fCBudWxsICE9PSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc2l0aW9uXS5tYXRjaC5mbiAmJiAhMSA9PT0gb3B0cy5kZWNpbWFsUHJvdGVjdCB8fCB2cC5pbnB1dCA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zaXRpb24gKyAxXSAmJiBudWxsID09PSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc2l0aW9uICsgMV0ubWF0Y2guZm4gfHwgaXNGaW5pdGUodnAuaW5wdXQpIHx8IHBvc2l0aW9uID09PSBsdnAgfHwgdnAuaW5wdXQgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgfHwgdnAuaW5wdXQgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgfHwgdnAuaW5wdXQgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFjYW5DbGVhciB8fCBcIitcIiAhPT0gdnAubWF0Y2gubmF0aXZlRGVmICYmIFwiLVwiICE9PSB2cC5tYXRjaC5uYXRpdmVEZWYgfHwgKG9wdHMuaXNOZWdhdGl2ZSA9ICExKSwgXG4gICAgICAgICAgICAgICAgICAgIGNhbkNsZWFyO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbihlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5KSBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgSW5wdXRtYXNrLmtleUNvZGUuVVA6XG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKHBhcnNlRmxvYXQodGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpKSArIHBhcnNlSW50KG9wdHMuc3RlcCkpLCAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIElucHV0bWFzay5rZXlDb2RlLkRPV046XG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKHBhcnNlRmxvYXQodGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpKSAtIHBhcnNlSW50KG9wdHMuc3RlcCkpLCAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGN1cnJlbmN5OiB7XG4gICAgICAgICAgICAgICAgcHJlZml4OiBcIiQgXCIsXG4gICAgICAgICAgICAgICAgZ3JvdXBTZXBhcmF0b3I6IFwiLFwiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCIsXG4gICAgICAgICAgICAgICAgYXV0b0dyb3VwOiAhMCxcbiAgICAgICAgICAgICAgICBkaWdpdHM6IDIsXG4gICAgICAgICAgICAgICAgZGlnaXRzT3B0aW9uYWw6ICExLFxuICAgICAgICAgICAgICAgIGNsZWFyTWFza09uTG9zdEZvY3VzOiAhMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlY2ltYWw6IHtcbiAgICAgICAgICAgICAgICBhbGlhczogXCJudW1lcmljXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnRlZ2VyOiB7XG4gICAgICAgICAgICAgICAgYWxpYXM6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgICAgIGRpZ2l0czogMCxcbiAgICAgICAgICAgICAgICByYWRpeFBvaW50OiBcIlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGVyY2VudGFnZToge1xuICAgICAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgICAgICBkaWdpdHM6IDIsXG4gICAgICAgICAgICAgICAgZGlnaXRzT3B0aW9uYWw6ICEwLFxuICAgICAgICAgICAgICAgIHJhZGl4UG9pbnQ6IFwiLlwiLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIjBcIixcbiAgICAgICAgICAgICAgICBhdXRvR3JvdXA6ICExLFxuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDEwMCxcbiAgICAgICAgICAgICAgICBzdWZmaXg6IFwiICVcIixcbiAgICAgICAgICAgICAgICBhbGxvd01pbnVzOiAhMVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgSW5wdXRtYXNrO1xuICAgIH0pO1xufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187XG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yO1xuICAgICFmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgICAgIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbIF9fd2VicGFja19yZXF1aXJlX18oMCksIF9fd2VicGFja19yZXF1aXJlX18oMSkgXSwgXG4gICAgICAgIHZvaWQgMCAhPT0gKF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiAoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gZmFjdG9yeSkgPyBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKTtcbiAgICB9KGZ1bmN0aW9uKCQsIElucHV0bWFzaykge1xuICAgICAgICBmdW5jdGlvbiBtYXNrU29ydChhLCBiKSB7XG4gICAgICAgICAgICB2YXIgbWFza2EgPSAoYS5tYXNrIHx8IGEpLnJlcGxhY2UoLyMvZywgXCI5XCIpLnJlcGxhY2UoL1xcKS8sIFwiOVwiKS5yZXBsYWNlKC9bKygpIy1dL2csIFwiXCIpLCBtYXNrYiA9IChiLm1hc2sgfHwgYikucmVwbGFjZSgvIy9nLCBcIjlcIikucmVwbGFjZSgvXFwpLywgXCI5XCIpLnJlcGxhY2UoL1srKCkjLV0vZywgXCJcIiksIG1hc2thcyA9IChhLm1hc2sgfHwgYSkuc3BsaXQoXCIjXCIpWzBdLCBtYXNrYnMgPSAoYi5tYXNrIHx8IGIpLnNwbGl0KFwiI1wiKVswXTtcbiAgICAgICAgICAgIHJldHVybiAwID09PSBtYXNrYnMuaW5kZXhPZihtYXNrYXMpID8gLTEgOiAwID09PSBtYXNrYXMuaW5kZXhPZihtYXNrYnMpID8gMSA6IG1hc2thLmxvY2FsZUNvbXBhcmUobWFza2IpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbmFseXNlTWFza0Jhc2UgPSBJbnB1dG1hc2sucHJvdG90eXBlLmFuYWx5c2VNYXNrO1xuICAgICAgICByZXR1cm4gSW5wdXRtYXNrLnByb3RvdHlwZS5hbmFseXNlTWFzayA9IGZ1bmN0aW9uKG1hc2ssIHJlZ2V4TWFzaywgb3B0cykge1xuICAgICAgICAgICAgZnVuY3Rpb24gcmVkdWNlVmFyaWF0aW9ucyhtYXNrcywgcHJldmlvdXNWYXJpYXRpb24sIHByZXZpb3VzbWFza0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNWYXJpYXRpb24gPSBwcmV2aW91c1ZhcmlhdGlvbiB8fCBcIlwiLCBwcmV2aW91c21hc2tHcm91cCA9IHByZXZpb3VzbWFza0dyb3VwIHx8IG1hc2tHcm91cHMsIFxuICAgICAgICAgICAgICAgIFwiXCIgIT09IHByZXZpb3VzVmFyaWF0aW9uICYmIChwcmV2aW91c21hc2tHcm91cFtwcmV2aW91c1ZhcmlhdGlvbl0gPSB7fSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdmFyaWF0aW9uID0gXCJcIiwgbWFza0dyb3VwID0gcHJldmlvdXNtYXNrR3JvdXBbcHJldmlvdXNWYXJpYXRpb25dIHx8IHByZXZpb3VzbWFza0dyb3VwLCBpID0gbWFza3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIG1hc2tHcm91cFt2YXJpYXRpb24gPSAobWFzayA9IG1hc2tzW2ldLm1hc2sgfHwgbWFza3NbaV0pLnN1YnN0cigwLCAxKV0gPSBtYXNrR3JvdXBbdmFyaWF0aW9uXSB8fCBbXSwgXG4gICAgICAgICAgICAgICAgbWFza0dyb3VwW3ZhcmlhdGlvbl0udW5zaGlmdChtYXNrLnN1YnN0cigxKSksIG1hc2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuZHggaW4gbWFza0dyb3VwKSBtYXNrR3JvdXBbbmR4XS5sZW5ndGggPiA1MDAgJiYgcmVkdWNlVmFyaWF0aW9ucyhtYXNrR3JvdXBbbmR4XS5zbGljZSgpLCBuZHgsIG1hc2tHcm91cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiByZWJ1aWxkKG1hc2tHcm91cCkge1xuICAgICAgICAgICAgICAgIHZhciBtYXNrID0gXCJcIiwgc3VibWFza3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuZHggaW4gbWFza0dyb3VwKSAkLmlzQXJyYXkobWFza0dyb3VwW25keF0pID8gMSA9PT0gbWFza0dyb3VwW25keF0ubGVuZ3RoID8gc3VibWFza3MucHVzaChuZHggKyBtYXNrR3JvdXBbbmR4XSkgOiBzdWJtYXNrcy5wdXNoKG5keCArIG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQgKyBtYXNrR3JvdXBbbmR4XS5qb2luKG9wdHMuZ3JvdXBtYXJrZXIuZW5kICsgb3B0cy5hbHRlcm5hdG9ybWFya2VyICsgb3B0cy5ncm91cG1hcmtlci5zdGFydCkgKyBvcHRzLmdyb3VwbWFya2VyLmVuZCkgOiBzdWJtYXNrcy5wdXNoKG5keCArIHJlYnVpbGQobWFza0dyb3VwW25keF0pKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMSA9PT0gc3VibWFza3MubGVuZ3RoID8gbWFzayArPSBzdWJtYXNrc1swXSA6IG1hc2sgKz0gb3B0cy5ncm91cG1hcmtlci5zdGFydCArIHN1Ym1hc2tzLmpvaW4ob3B0cy5ncm91cG1hcmtlci5lbmQgKyBvcHRzLmFsdGVybmF0b3JtYXJrZXIgKyBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0KSArIG9wdHMuZ3JvdXBtYXJrZXIuZW5kLCBcbiAgICAgICAgICAgICAgICBtYXNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hc2tHcm91cHMgPSB7fTtcbiAgICAgICAgICAgIHJldHVybiBvcHRzLnBob25lQ29kZXMgJiYgKG9wdHMucGhvbmVDb2RlcyAmJiBvcHRzLnBob25lQ29kZXMubGVuZ3RoID4gMWUzICYmIChyZWR1Y2VWYXJpYXRpb25zKChtYXNrID0gbWFzay5zdWJzdHIoMSwgbWFzay5sZW5ndGggLSAyKSkuc3BsaXQob3B0cy5ncm91cG1hcmtlci5lbmQgKyBvcHRzLmFsdGVybmF0b3JtYXJrZXIgKyBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0KSksIFxuICAgICAgICAgICAgbWFzayA9IHJlYnVpbGQobWFza0dyb3VwcykpLCBtYXNrID0gbWFzay5yZXBsYWNlKC85L2csIFwiXFxcXDlcIikpLCBhbmFseXNlTWFza0Jhc2UuY2FsbCh0aGlzLCBtYXNrLCByZWdleE1hc2ssIG9wdHMpO1xuICAgICAgICB9LCBJbnB1dG1hc2suZXh0ZW5kQWxpYXNlcyh7XG4gICAgICAgICAgICBhYnN0cmFjdHBob25lOiB7XG4gICAgICAgICAgICAgICAgZ3JvdXBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFwiPFwiLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFwiPlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb3VudHJ5Y29kZTogXCJcIixcbiAgICAgICAgICAgICAgICBwaG9uZUNvZGVzOiBbXSxcbiAgICAgICAgICAgICAgICBtYXNrOiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmRlZmluaXRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIjXCI6IElucHV0bWFzay5wcm90b3R5cGUuZGVmaW5pdGlvbnNbOV1cbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0cy5waG9uZUNvZGVzLnNvcnQobWFza1NvcnQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAga2VlcFN0YXRpYzogITAsXG4gICAgICAgICAgICAgICAgb25CZWZvcmVNYXNrOiBmdW5jdGlvbih2YWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc2VkVmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eMHsxLDJ9LywgXCJcIikucmVwbGFjZSgvW1xcc10vZywgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAocHJvY2Vzc2VkVmFsdWUuaW5kZXhPZihvcHRzLmNvdW50cnljb2RlKSA+IDEgfHwgLTEgPT09IHByb2Nlc3NlZFZhbHVlLmluZGV4T2Yob3B0cy5jb3VudHJ5Y29kZSkpICYmIChwcm9jZXNzZWRWYWx1ZSA9IFwiK1wiICsgb3B0cy5jb3VudHJ5Y29kZSArIHByb2Nlc3NlZFZhbHVlKSwgXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NlZFZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25Vbk1hc2s6IGZ1bmN0aW9uKG1hc2tlZFZhbHVlLCB1bm1hc2tlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZS5yZXBsYWNlKC9bKCkjLV0vZywgXCJcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnB1dG1vZGU6IFwidGVsXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIElucHV0bWFzaztcbiAgICB9KTtcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fO1xuICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcjtcbiAgICAhZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgICAgICBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gWyBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpIF0sIFxuICAgICAgICB2b2lkIDAgIT09IChfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IGZhY3RvcnkpID8gX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyk7XG4gICAgfShmdW5jdGlvbigkLCBJbnB1dG1hc2spIHtcbiAgICAgICAgcmV0dXJuIElucHV0bWFzay5leHRlbmRBbGlhc2VzKHtcbiAgICAgICAgICAgIFJlZ2V4OiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCJyXCIsXG4gICAgICAgICAgICAgICAgZ3JlZWR5OiAhMSxcbiAgICAgICAgICAgICAgICByZXBlYXQ6IFwiKlwiLFxuICAgICAgICAgICAgICAgIHJlZ2V4OiBudWxsLFxuICAgICAgICAgICAgICAgIHJlZ2V4VG9rZW5zOiBudWxsLFxuICAgICAgICAgICAgICAgIHRva2VuaXplcjogL1xcW1xcXj9dPyg/OlteXFxcXFxcXV0rfFxcXFxbXFxTXFxzXT8pKl0/fFxcXFwoPzowKD86WzAtM11bMC03XXswLDJ9fFs0LTddWzAtN10/KT98WzEtOV1bMC05XSp8eFswLTlBLUZhLWZdezJ9fHVbMC05QS1GYS1mXXs0fXxjW0EtWmEtel18W1xcU1xcc10/KXxcXCgoPzpcXD9bOj0hXT8pP3woPzpbPyorXXxcXHtbMC05XSsoPzosWzAtOV0qKT9cXH0pXFw/P3xbXi4/KiteJHtbKCl8XFxcXF0rfC4vZyxcbiAgICAgICAgICAgICAgICBxdWFudGlmaWVyRmlsdGVyOiAvWzAtOV0rW14sXS8sXG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZTogZnVuY3Rpb24oYnVmZmVyLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG9wdHMucmVnZXgsIG9wdHMuY2FzaW5nID8gXCJpXCIgOiBcIlwiKS50ZXN0KGJ1ZmZlci5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBSZWdleFRva2VuKGlzR3JvdXAsIGlzUXVhbnRpZmllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBbXSwgdGhpcy5pc0dyb3VwID0gaXNHcm91cCB8fCAhMSwgdGhpcy5pc1F1YW50aWZpZXIgPSBpc1F1YW50aWZpZXIgfHwgITEsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1YW50aWZpZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXg6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5yZXBlYXRlclBhcnQgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlUmVnZXhUb2tlbih0b2tlbiwgZnJvbUdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc3ZhbGlkID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21Hcm91cCAmJiAocmVnZXhQYXJ0ICs9IFwiKFwiLCBvcGVuR3JvdXBDb3VudCsrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbW5keCA9IDA7IG1uZHggPCB0b2tlbi5tYXRjaGVzLmxlbmd0aDsgbW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hUb2tlbiA9IHRva2VuLm1hdGNoZXNbbW5keF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoITAgPT09IG1hdGNoVG9rZW4uaXNHcm91cCkgaXN2YWxpZCA9IHZhbGlkYXRlUmVnZXhUb2tlbihtYXRjaFRva2VuLCAhMCk7IGVsc2UgaWYgKCEwID09PSBtYXRjaFRva2VuLmlzUXVhbnRpZmllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcnJudG5keCA9ICQuaW5BcnJheShtYXRjaFRva2VuLCB0b2tlbi5tYXRjaGVzKSwgbWF0Y2hHcm91cCA9IHRva2VuLm1hdGNoZXNbY3JybnRuZHggLSAxXSwgcmVnZXhQYXJ0QmFrID0gcmVnZXhQYXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihtYXRjaFRva2VuLnF1YW50aWZpZXIubWF4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDttYXRjaFRva2VuLnJlcGVhdGVyUGFydCAmJiBtYXRjaFRva2VuLnJlcGVhdGVyUGFydCAhPT0gcmVnZXhQYXJ0ICYmIG1hdGNoVG9rZW4ucmVwZWF0ZXJQYXJ0Lmxlbmd0aCA+IHJlZ2V4UGFydC5sZW5ndGggJiYgIShpc3ZhbGlkID0gdmFsaWRhdGVSZWdleFRva2VuKG1hdGNoR3JvdXAsICEwKSk7ICkgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaXN2YWxpZCA9IGlzdmFsaWQgfHwgdmFsaWRhdGVSZWdleFRva2VuKG1hdGNoR3JvdXAsICEwKSkgJiYgKG1hdGNoVG9rZW4ucmVwZWF0ZXJQYXJ0ID0gcmVnZXhQYXJ0KSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4UGFydCA9IHJlZ2V4UGFydEJhayArIG1hdGNoVG9rZW4ucXVhbnRpZmllci5tYXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHFtID0gbWF0Y2hUb2tlbi5xdWFudGlmaWVyLm1heCAtIDE7IGkgPCBxbSAmJiAhKGlzdmFsaWQgPSB2YWxpZGF0ZVJlZ2V4VG9rZW4obWF0Y2hHcm91cCwgITApKTsgaSsrKSA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4UGFydCA9IHJlZ2V4UGFydEJhayArIFwie1wiICsgbWF0Y2hUb2tlbi5xdWFudGlmaWVyLm1pbiArIFwiLFwiICsgbWF0Y2hUb2tlbi5xdWFudGlmaWVyLm1heCArIFwifVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodm9pZCAwICE9PSBtYXRjaFRva2VuLm1hdGNoZXMpIGZvciAodmFyIGsgPSAwOyBrIDwgbWF0Y2hUb2tlbi5sZW5ndGggJiYgIShpc3ZhbGlkID0gdmFsaWRhdGVSZWdleFRva2VuKG1hdGNoVG9rZW5ba10sIGZyb21Hcm91cCkpOyBrKyspIDsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RFeHA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiW1wiID09IG1hdGNoVG9rZW4uY2hhckF0KDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RFeHAgPSByZWdleFBhcnQsIHRlc3RFeHAgKz0gbWF0Y2hUb2tlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IG9wZW5Hcm91cENvdW50OyBqKyspIHRlc3RFeHAgKz0gXCIpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzdmFsaWQgPSAoZXhwID0gbmV3IFJlZ0V4cChcIl4oXCIgKyB0ZXN0RXhwICsgXCIpJFwiLCBvcHRzLmNhc2luZyA/IFwiaVwiIDogXCJcIikpLnRlc3QoYnVmZmVyU3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZm9yICh2YXIgbCA9IDAsIHRsID0gbWF0Y2hUb2tlbi5sZW5ndGg7IGwgPCB0bDsgbCsrKSBpZiAoXCJcXFxcXCIgIT09IG1hdGNoVG9rZW4uY2hhckF0KGwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RFeHAgPSByZWdleFBhcnQsIHRlc3RFeHAgPSAodGVzdEV4cCArPSBtYXRjaFRva2VuLnN1YnN0cigwLCBsICsgMSkpLnJlcGxhY2UoL1xcfCQvLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvcGVuR3JvdXBDb3VudDsgaisrKSB0ZXN0RXhwICs9IFwiKVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwID0gbmV3IFJlZ0V4cChcIl4oXCIgKyB0ZXN0RXhwICsgXCIpJFwiLCBvcHRzLmNhc2luZyA/IFwiaVwiIDogXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3ZhbGlkID0gZXhwLnRlc3QoYnVmZmVyU3RyKSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4UGFydCArPSBtYXRjaFRva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzdmFsaWQpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmcm9tR3JvdXAgJiYgKHJlZ2V4UGFydCArPSBcIilcIiwgb3Blbkdyb3VwQ291bnQtLSksIGlzdmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJTdHIsIGdyb3VwVG9rZW4sIGNidWZmZXIgPSBtYXNrc2V0LmJ1ZmZlci5zbGljZSgpLCByZWdleFBhcnQgPSBcIlwiLCBpc1ZhbGlkID0gITEsIG9wZW5Hcm91cENvdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsID09PSBvcHRzLnJlZ2V4VG9rZW5zICYmIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2gsIG0sIGN1cnJlbnRUb2tlbiA9IG5ldyBSZWdleFRva2VuKCksIG9wZW5ncm91cHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChvcHRzLnJlZ2V4VG9rZW5zID0gW107IG1hdGNoID0gb3B0cy50b2tlbml6ZXIuZXhlYyhvcHRzLnJlZ2V4KTsgKSBzd2l0Y2ggKChtID0gbWF0Y2hbMF0pLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIoXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZ3JvdXBzLnB1c2gobmV3IFJlZ2V4VG9rZW4oITApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIilcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwVG9rZW4gPSBvcGVuZ3JvdXBzLnBvcCgpLCBvcGVuZ3JvdXBzLmxlbmd0aCA+IDAgPyBvcGVuZ3JvdXBzW29wZW5ncm91cHMubGVuZ3RoIC0gMV0ubWF0Y2hlcy5wdXNoKGdyb3VwVG9rZW4pIDogY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChncm91cFRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIntcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiK1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIqXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXVhbnRpZmllclRva2VuID0gbmV3IFJlZ2V4VG9rZW4oITEsICEwKSwgbXEgPSAobSA9IG0ucmVwbGFjZSgvW3t9XS9nLCBcIlwiKSkuc3BsaXQoXCIsXCIpLCBtcTAgPSBpc05hTihtcVswXSkgPyBtcVswXSA6IHBhcnNlSW50KG1xWzBdKSwgbXExID0gMSA9PT0gbXEubGVuZ3RoID8gbXEwIDogaXNOYU4obXFbMV0pID8gbXFbMV0gOiBwYXJzZUludChtcVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVhbnRpZmllclRva2VuLnF1YW50aWZpZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluOiBtcTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBtcTFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wZW5ncm91cHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gb3Blbmdyb3Vwc1tvcGVuZ3JvdXBzLmxlbmd0aCAtIDFdLm1hdGNoZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1hdGNoID0gbWF0Y2hlcy5wb3AoKSkuaXNHcm91cCB8fCAoKGdyb3VwVG9rZW4gPSBuZXcgUmVnZXhUb2tlbighMCkpLm1hdGNoZXMucHVzaChtYXRjaCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gZ3JvdXBUb2tlbiksIG1hdGNoZXMucHVzaChtYXRjaCksIG1hdGNoZXMucHVzaChxdWFudGlmaWVyVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIChtYXRjaCA9IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnBvcCgpKS5pc0dyb3VwIHx8ICgoZ3JvdXBUb2tlbiA9IG5ldyBSZWdleFRva2VuKCEwKSkubWF0Y2hlcy5wdXNoKG1hdGNoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGdyb3VwVG9rZW4pLCBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKG1hdGNoKSwgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChxdWFudGlmaWVyVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Blbmdyb3Vwcy5sZW5ndGggPiAwID8gb3Blbmdyb3Vwc1tvcGVuZ3JvdXBzLmxlbmd0aCAtIDFdLm1hdGNoZXMucHVzaChtKSA6IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gobSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoID4gMCAmJiBvcHRzLnJlZ2V4VG9rZW5zLnB1c2goY3VycmVudFRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KCksIGNidWZmZXIuc3BsaWNlKHBvcywgMCwgY2hycyksIGJ1ZmZlclN0ciA9IGNidWZmZXIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdHMucmVnZXhUb2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4VG9rZW4gPSBvcHRzLnJlZ2V4VG9rZW5zW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9IHZhbGlkYXRlUmVnZXhUb2tlbihyZWdleFRva2VuLCByZWdleFRva2VuLmlzR3JvdXApKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIElucHV0bWFzaztcbiAgICB9KTtcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fLCBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH0gOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICAgICFmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgICAgIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbIF9fd2VicGFja19yZXF1aXJlX18oMiksIF9fd2VicGFja19yZXF1aXJlX18oMSkgXSwgXG4gICAgICAgIHZvaWQgMCAhPT0gKF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiAoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gZmFjdG9yeSkgPyBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKTtcbiAgICB9KGZ1bmN0aW9uKCQsIElucHV0bWFzaykge1xuICAgICAgICByZXR1cm4gdm9pZCAwID09PSAkLmZuLmlucHV0bWFzayAmJiAoJC5mbi5pbnB1dG1hc2sgPSBmdW5jdGlvbihmbiwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIG5wdG1hc2ssIGlucHV0ID0gdGhpc1swXTtcbiAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IG9wdGlvbnMgJiYgKG9wdGlvbnMgPSB7fSksIFwic3RyaW5nXCIgPT0gdHlwZW9mIGZuKSBzd2l0Y2ggKGZuKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJ1bm1hc2tlZHZhbHVlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ICYmIGlucHV0LmlucHV0bWFzayA/IGlucHV0LmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCkgOiAkKGlucHV0KS52YWwoKTtcblxuICAgICAgICAgICAgICBjYXNlIFwicmVtb3ZlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dG1hc2sgJiYgdGhpcy5pbnB1dG1hc2sucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImdldGVtcHR5bWFza1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCAmJiBpbnB1dC5pbnB1dG1hc2sgPyBpbnB1dC5pbnB1dG1hc2suZ2V0ZW1wdHltYXNrKCkgOiBcIlwiO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJoYXNNYXNrZWRWYWx1ZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAhKCFpbnB1dCB8fCAhaW5wdXQuaW5wdXRtYXNrKSAmJiBpbnB1dC5pbnB1dG1hc2suaGFzTWFza2VkVmFsdWUoKTtcblxuICAgICAgICAgICAgICBjYXNlIFwiaXNDb21wbGV0ZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAhaW5wdXQgfHwgIWlucHV0LmlucHV0bWFzayB8fCBpbnB1dC5pbnB1dG1hc2suaXNDb21wbGV0ZSgpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJnZXRtZXRhZGF0YVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCAmJiBpbnB1dC5pbnB1dG1hc2sgPyBpbnB1dC5pbnB1dG1hc2suZ2V0bWV0YWRhdGEoKSA6IHZvaWQgMDtcblxuICAgICAgICAgICAgICBjYXNlIFwic2V0dmFsdWVcIjpcbiAgICAgICAgICAgICAgICAkKGlucHV0KS52YWwob3B0aW9ucyksIGlucHV0ICYmIHZvaWQgMCA9PT0gaW5wdXQuaW5wdXRtYXNrICYmICQoaW5wdXQpLnRyaWdnZXJIYW5kbGVyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBcIm9wdGlvblwiOlxuICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiICE9IHR5cGVvZiBvcHRpb25zKSByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSB0aGlzLmlucHV0bWFzaykgcmV0dXJuIHRoaXMuaW5wdXRtYXNrLm9wdGlvbihvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgJiYgdm9pZCAwICE9PSBpbnB1dC5pbnB1dG1hc2spIHJldHVybiBpbnB1dC5pbnB1dG1hc2sub3B0aW9uKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuYWxpYXMgPSBmbiwgbnB0bWFzayA9IG5ldyBJbnB1dG1hc2sob3B0aW9ucyksIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgbnB0bWFzay5tYXNrKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJvYmplY3RcIiA9PSAodm9pZCAwID09PSBmbiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGZuKSkpIHJldHVybiBucHRtYXNrID0gbmV3IElucHV0bWFzayhmbiksIFxuICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gZm4ubWFzayAmJiB2b2lkIDAgPT09IGZuLmFsaWFzID8gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSB0aGlzLmlucHV0bWFzaykgcmV0dXJuIHRoaXMuaW5wdXRtYXNrLm9wdGlvbihmbik7XG4gICAgICAgICAgICAgICAgICAgIG5wdG1hc2subWFzayh0aGlzKTtcbiAgICAgICAgICAgICAgICB9KSA6IHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgbnB0bWFzay5tYXNrKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGZuKSByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAobnB0bWFzayA9IG5ldyBJbnB1dG1hc2sob3B0aW9ucykpLm1hc2sodGhpcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCAkLmZuLmlucHV0bWFzaztcbiAgICB9KTtcbn0gXSk7IiwiKGZ1bmN0aW9uKCkge1xuICAgIC8vaHR0cHM6Ly9jaG1sbi5naXRodWIuaW8vZmxhdHBpY2tyL1xuXG4gICAgJCgnW2RhdGEtZmxhdHBpY2tyXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIGxvY2FsZTogJ3J1JyxcbiAgICAgICAgICAgICAgICBkYXRlRm9ybWF0OiAnZC5tLlknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWx0T3B0aW9ucyA9ICQodGhpcykuZGF0YSgnZmxhdHBpY2tyJyk7XG5cbiAgICAgICAgZm9yICh2YXIgb3B0aW9uIGluIGFsdE9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdGlvbnNbb3B0aW9uXSA9IGFsdE9wdGlvbnNbb3B0aW9uXTtcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcykuZmxhdHBpY2tyKG9wdGlvbnMpO1xuICAgIH0pXG59KSgpO1xuIiwiLyogZmxhdHBpY2tyIHY0LjEuMiwgQGxpY2Vuc2UgTUlUICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG5cdChmYWN0b3J5KChnbG9iYWwucnUgPSB7fSkpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIGZwID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuZmxhdHBpY2tyICE9PSB1bmRlZmluZWRcclxuICAgID8gd2luZG93LmZsYXRwaWNrclxyXG4gICAgOiB7XHJcbiAgICAgICAgbDEwbnM6IHt9LFxyXG4gICAgfTtcclxudmFyIFJ1c3NpYW4gPSB7XHJcbiAgICBmaXJzdERheU9mV2VlazogMSxcclxuICAgIHdlZWtkYXlzOiB7XHJcbiAgICAgICAgc2hvcnRoYW5kOiBbXCLQktGBXCIsIFwi0J/QvVwiLCBcItCS0YJcIiwgXCLQodGAXCIsIFwi0KfRglwiLCBcItCf0YJcIiwgXCLQodCxXCJdLFxyXG4gICAgICAgIGxvbmdoYW5kOiBbXHJcbiAgICAgICAgICAgIFwi0JLQvtGB0LrRgNC10YHQtdC90YzQtVwiLFxyXG4gICAgICAgICAgICBcItCf0L7QvdC10LTQtdC70YzQvdC40LpcIixcclxuICAgICAgICAgICAgXCLQktGC0L7RgNC90LjQulwiLFxyXG4gICAgICAgICAgICBcItCh0YDQtdC00LBcIixcclxuICAgICAgICAgICAgXCLQp9C10YLQstC10YDQs1wiLFxyXG4gICAgICAgICAgICBcItCf0Y/RgtC90LjRhtCwXCIsXHJcbiAgICAgICAgICAgIFwi0KHRg9Cx0LHQvtGC0LBcIixcclxuICAgICAgICBdLFxyXG4gICAgfSxcclxuICAgIG1vbnRoczoge1xyXG4gICAgICAgIHNob3J0aGFuZDogW1xyXG4gICAgICAgICAgICBcItCv0L3QslwiLFxyXG4gICAgICAgICAgICBcItCk0LXQslwiLFxyXG4gICAgICAgICAgICBcItCc0LDRgNGCXCIsXHJcbiAgICAgICAgICAgIFwi0JDQv9GAXCIsXHJcbiAgICAgICAgICAgIFwi0JzQsNC5XCIsXHJcbiAgICAgICAgICAgIFwi0JjRjtC90YxcIixcclxuICAgICAgICAgICAgXCLQmNGO0LvRjFwiLFxyXG4gICAgICAgICAgICBcItCQ0LLQs1wiLFxyXG4gICAgICAgICAgICBcItCh0LXQvVwiLFxyXG4gICAgICAgICAgICBcItCe0LrRglwiLFxyXG4gICAgICAgICAgICBcItCd0L7Rj1wiLFxyXG4gICAgICAgICAgICBcItCU0LXQulwiLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgbG9uZ2hhbmQ6IFtcclxuICAgICAgICAgICAgXCLQr9C90LLQsNGA0YxcIixcclxuICAgICAgICAgICAgXCLQpNC10LLRgNCw0LvRjFwiLFxyXG4gICAgICAgICAgICBcItCc0LDRgNGCXCIsXHJcbiAgICAgICAgICAgIFwi0JDQv9GA0LXQu9GMXCIsXHJcbiAgICAgICAgICAgIFwi0JzQsNC5XCIsXHJcbiAgICAgICAgICAgIFwi0JjRjtC90YxcIixcclxuICAgICAgICAgICAgXCLQmNGO0LvRjFwiLFxyXG4gICAgICAgICAgICBcItCQ0LLQs9GD0YHRglwiLFxyXG4gICAgICAgICAgICBcItCh0LXQvdGC0Y/QsdGA0YxcIixcclxuICAgICAgICAgICAgXCLQntC60YLRj9Cx0YDRjFwiLFxyXG4gICAgICAgICAgICBcItCd0L7Rj9Cx0YDRjFwiLFxyXG4gICAgICAgICAgICBcItCU0LXQutCw0LHRgNGMXCIsXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbiAgICByYW5nZVNlcGFyYXRvcjogXCIg4oCUIFwiLFxyXG4gICAgc2Nyb2xsVGl0bGU6IFwi0J/RgNC+0LrRgNGD0YLQuNGC0LUg0LTQu9GPINGD0LLQtdC70LjRh9C10L3QuNGPXCIsXHJcbiAgICB0b2dnbGVUaXRsZTogXCLQndCw0LbQvNC40YLQtSDQtNC70Y8g0L/QtdGA0LXQutC70Y7Rh9C10L3QuNGPXCIsXHJcbn07XHJcbmZwLmwxMG5zLnJ1ID0gUnVzc2lhbjtcclxudmFyIHJ1ID0gZnAubDEwbnM7XG5cbmV4cG9ydHMuUnVzc2lhbiA9IFJ1c3NpYW47XG5leHBvcnRzWydkZWZhdWx0J10gPSBydTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC50aXBweSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIEJyb3dzZXIgPSB7fTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIEJyb3dzZXIuU1VQUE9SVEVEID0gJ3JlcXVlc3RBbmltYXRpb25GcmFtZScgaW4gd2luZG93O1xuICBCcm93c2VyLlNVUFBPUlRTX1RPVUNIID0gJ29udG91Y2hzdGFydCcgaW4gd2luZG93O1xuICBCcm93c2VyLnRvdWNoID0gZmFsc2U7XG4gIEJyb3dzZXIuZHluYW1pY0lucHV0RGV0ZWN0aW9uID0gdHJ1ZTtcbiAgLy8gQ2hyb21lIGRldmljZS90b3VjaCBlbXVsYXRpb24gY2FuIG1ha2UgdGhpcyBkeW5hbWljXG4gIEJyb3dzZXIuaU9TID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoL2lQaG9uZXxpUGFkfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgIXdpbmRvdy5NU1N0cmVhbVxuICAgICk7XG4gIH07XG59XG5cbi8qKlxuKiBUaGUgZ2xvYmFsIHN0b3JhZ2UgYXJyYXkgd2hpY2ggaG9sZHMgYWxsIGRhdGEgcmVmZXJlbmNlIG9iamVjdHNcbiogZnJvbSBldmVyeSBpbnN0YW5jZVxuKiBUaGlzIGFsbG93cyB1cyB0byBoaWRlIHRvb2x0aXBzIGZyb20gYWxsIGluc3RhbmNlcywgZmluZGluZyB0aGUgcmVmIHdoZW5cbiogY2xpY2tpbmcgb24gdGhlIGJvZHksIGFuZCBmb3IgZm9sbG93Q3Vyc29yXG4qL1xudmFyIFN0b3JlID0gW107XG5cbi8qKlxuKiBTZWxlY3RvciBjb25zdGFudHMgdXNlZCBmb3IgZ3JhYmJpbmcgZWxlbWVudHNcbiovXG52YXIgU2VsZWN0b3JzID0ge1xuICBQT1BQRVI6ICcudGlwcHktcG9wcGVyJyxcbiAgVE9PTFRJUDogJy50aXBweS10b29sdGlwJyxcbiAgQ09OVEVOVDogJy50aXBweS10b29sdGlwLWNvbnRlbnQnLFxuICBDSVJDTEU6ICdbeC1jaXJjbGVdJyxcbiAgQVJST1c6ICdbeC1hcnJvd10nLFxuICBUT09MVElQUEVEX0VMOiAnW2RhdGEtdG9vbHRpcHBlZF0nLFxuICBDT05UUk9MTEVSOiAnW2RhdGEtdGlwcHktY29udHJvbGxlcl0nXG5cbiAgLyoqXG4gICogVGhlIGRlZmF1bHQgc2V0dGluZ3MgYXBwbGllZCB0byBlYWNoIGluc3RhbmNlXG4gICovXG59O3ZhciBEZWZhdWx0cyA9IHtcbiAgaHRtbDogZmFsc2UsXG4gIHBvc2l0aW9uOiAndG9wJyxcbiAgYW5pbWF0aW9uOiAnc2hpZnQnLFxuICBhbmltYXRlRmlsbDogdHJ1ZSxcbiAgYXJyb3c6IGZhbHNlLFxuICBhcnJvd1NpemU6ICdyZWd1bGFyJyxcbiAgZGVsYXk6IDAsXG4gIHRyaWdnZXI6ICdtb3VzZWVudGVyIGZvY3VzJyxcbiAgZHVyYXRpb246IDM1MCxcbiAgaW50ZXJhY3RpdmU6IGZhbHNlLFxuICBpbnRlcmFjdGl2ZUJvcmRlcjogMixcbiAgdGhlbWU6ICdkYXJrJyxcbiAgc2l6ZTogJ3JlZ3VsYXInLFxuICBkaXN0YW5jZTogMTAsXG4gIG9mZnNldDogMCxcbiAgaGlkZU9uQ2xpY2s6IHRydWUsXG4gIG11bHRpcGxlOiBmYWxzZSxcbiAgZm9sbG93Q3Vyc29yOiBmYWxzZSxcbiAgaW5lcnRpYTogZmFsc2UsXG4gIGZsaXBEdXJhdGlvbjogMzUwLFxuICBzdGlja3k6IGZhbHNlLFxuICBzdGlja3lEdXJhdGlvbjogMjAwLFxuICBhcHBlbmRUbzogZnVuY3Rpb24gYXBwZW5kVG8oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH0sXG4gIHpJbmRleDogOTk5OSxcbiAgdG91Y2hIb2xkOiBmYWxzZSxcbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuICBkeW5hbWljVGl0bGU6IGZhbHNlLFxuICBwb3BwZXJPcHRpb25zOiB7fVxuXG4gIC8qKlxuICAqIFRoZSBrZXlzIG9mIHRoZSBkZWZhdWx0cyBvYmplY3QgZm9yIHJlZHVjaW5nIGRvd24gaW50byBhIG5ldyBvYmplY3RcbiAgKiBVc2VkIGluIGBnZXRJbmRpdmlkdWFsU2V0dGluZ3MoKWBcbiAgKi9cbn07dmFyIERlZmF1bHRzS2V5cyA9IEJyb3dzZXIuU1VQUE9SVEVEICYmIE9iamVjdC5rZXlzKERlZmF1bHRzKTtcblxuLyoqXG4qIEhpZGVzIGFsbCBwb3BwZXJzXG4qIEBwYXJhbSB7T2JqZWN0fSBleGNsdWRlIC0gcmVmRGF0YSB0byBleGNsdWRlIGlmIG5lZWRlZFxuKi9cbmZ1bmN0aW9uIGhpZGVBbGxQb3BwZXJzKGV4Y2x1ZGUpIHtcbiAgU3RvcmUuZm9yRWFjaChmdW5jdGlvbiAocmVmRGF0YSkge1xuICAgIHZhciBwb3BwZXIgPSByZWZEYXRhLnBvcHBlcixcbiAgICAgICAgdGlwcHlJbnN0YW5jZSA9IHJlZkRhdGEudGlwcHlJbnN0YW5jZSxcbiAgICAgICAgX3JlZkRhdGEkc2V0dGluZ3MgPSByZWZEYXRhLnNldHRpbmdzLFxuICAgICAgICBhcHBlbmRUbyA9IF9yZWZEYXRhJHNldHRpbmdzLmFwcGVuZFRvLFxuICAgICAgICBoaWRlT25DbGljayA9IF9yZWZEYXRhJHNldHRpbmdzLmhpZGVPbkNsaWNrLFxuICAgICAgICB0cmlnZ2VyID0gX3JlZkRhdGEkc2V0dGluZ3MudHJpZ2dlcjtcblxuICAgIC8vIERvbid0IGhpZGUgYWxyZWFkeSBoaWRkZW4gb25lc1xuXG4gICAgaWYgKCFhcHBlbmRUby5jb250YWlucyhwb3BwZXIpKSByZXR1cm47XG5cbiAgICAvLyBoaWRlT25DbGljayBjYW4gaGF2ZSB0aGUgdHJ1dGh5IHZhbHVlIG9mICdwZXJzaXN0ZW50Jywgc28gc3RyaWN0IGNoZWNrIGlzIG5lZWRlZFxuICAgIHZhciBpc0hpZGVPbkNsaWNrID0gaGlkZU9uQ2xpY2sgPT09IHRydWUgfHwgdHJpZ2dlci5pbmRleE9mKCdmb2N1cycpICE9PSAtMTtcbiAgICB2YXIgaXNOb3RDdXJyZW50UmVmID0gIWV4Y2x1ZGUgfHwgcG9wcGVyICE9PSBleGNsdWRlLnBvcHBlcjtcblxuICAgIGlmIChpc0hpZGVPbkNsaWNrICYmIGlzTm90Q3VycmVudFJlZikge1xuICAgICAgdGlwcHlJbnN0YW5jZS5oaWRlKHBvcHBlcik7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIG1hdGNoZXMgPSB7fTtcblxuaWYgKHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICB2YXIgZSA9IEVsZW1lbnQucHJvdG90eXBlO1xuICBtYXRjaGVzID0gZS5tYXRjaGVzIHx8IGUubWF0Y2hlc1NlbGVjdG9yIHx8IGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGUubW96TWF0Y2hlc1NlbGVjdG9yIHx8IGUubXNNYXRjaGVzU2VsZWN0b3IgfHwgZnVuY3Rpb24gKHMpIHtcbiAgICB2YXIgbWF0Y2hlcyA9ICh0aGlzLmRvY3VtZW50IHx8IHRoaXMub3duZXJEb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChzKSxcbiAgICAgICAgaSA9IG1hdGNoZXMubGVuZ3RoO1xuICAgIHdoaWxlICgtLWkgPj0gMCAmJiBtYXRjaGVzLml0ZW0oaSkgIT09IHRoaXMpIHt9XG4gICAgcmV0dXJuIGkgPiAtMTtcbiAgfTtcbn1cblxudmFyIG1hdGNoZXMkMSA9IG1hdGNoZXM7XG5cbi8qKlxuKiBQb255ZmlsbCB0byBnZXQgdGhlIGNsb3Nlc3QgcGFyZW50IGVsZW1lbnRcbiogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gY2hpbGQgb2YgcGFyZW50IHRvIGJlIHJldHVybmVkXG4qIEBwYXJhbSB7U3RyaW5nfSBwYXJlbnRTZWxlY3RvciAtIHNlbGVjdG9yIHRvIG1hdGNoIHRoZSBwYXJlbnQgaWYgZm91bmRcbiogQHJldHVybiB7RWxlbWVudH1cbiovXG5mdW5jdGlvbiBjbG9zZXN0KGVsZW1lbnQsIHBhcmVudFNlbGVjdG9yKSB7XG4gIHZhciBfY2xvc2VzdCA9IEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgfHwgZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgdmFyIGVsID0gdGhpcztcbiAgICB3aGlsZSAoZWwpIHtcbiAgICAgIGlmIChtYXRjaGVzJDEuY2FsbChlbCwgc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICAgIH1cbiAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIF9jbG9zZXN0LmNhbGwoZWxlbWVudCwgcGFyZW50U2VsZWN0b3IpO1xufVxuXG4vKipcbiogUG9ueWZpbGwgZm9yIEFycmF5LnByb3RvdHlwZS5maW5kXG4qIEBwYXJhbSB7QXJyYXl9IGFyclxuKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGVja0ZuXG4qIEByZXR1cm4gaXRlbSBpbiB0aGUgYXJyYXlcbiovXG5mdW5jdGlvbiBmaW5kKGFyciwgY2hlY2tGbikge1xuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2tGbik7XG4gIH1cblxuICAvLyB1c2UgYGZpbHRlcmAgYXMgZmFsbGJhY2tcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2tGbilbMF07XG59XG5cbi8qKlxuKiBBZGRzIHRoZSBuZWVkZWQgZXZlbnQgbGlzdGVuZXJzXG4qL1xuZnVuY3Rpb24gYmluZEV2ZW50TGlzdGVuZXJzKCkge1xuICB2YXIgdG91Y2hIYW5kbGVyID0gZnVuY3Rpb24gdG91Y2hIYW5kbGVyKCkge1xuICAgIEJyb3dzZXIudG91Y2ggPSB0cnVlO1xuXG4gICAgaWYgKEJyb3dzZXIuaU9TKCkpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgndGlwcHktdG91Y2gnKTtcbiAgICB9XG5cbiAgICBpZiAoQnJvd3Nlci5keW5hbWljSW5wdXREZXRlY3Rpb24gJiYgd2luZG93LnBlcmZvcm1hbmNlKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3VzZW1vdmVIYW5kbGVyKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG1vdXNlbW92ZUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRpbWUgPSB2b2lkIDA7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgICAvLyBDaHJvbWUgNjArIGlzIDEgbW91c2Vtb3ZlIHBlciByQUYsIHVzZSAyMG1zIHRpbWUgZGlmZmVyZW5jZVxuICAgICAgaWYgKG5vdyAtIHRpbWUgPCAyMCkge1xuICAgICAgICBCcm93c2VyLnRvdWNoID0gZmFsc2U7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdXNlbW92ZUhhbmRsZXIpO1xuICAgICAgICBpZiAoIUJyb3dzZXIuaU9TKCkpIHtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ3RpcHB5LXRvdWNoJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGltZSA9IG5vdztcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIGNsaWNrSGFuZGxlcihldmVudCkge1xuICAgIC8vIFNpbXVsYXRlZCBldmVudHMgZGlzcGF0Y2hlZCBvbiB0aGUgZG9jdW1lbnRcbiAgICBpZiAoIShldmVudC50YXJnZXQgaW5zdGFuY2VvZiBFbGVtZW50KSkge1xuICAgICAgcmV0dXJuIGhpZGVBbGxQb3BwZXJzKCk7XG4gICAgfVxuXG4gICAgdmFyIGVsID0gY2xvc2VzdChldmVudC50YXJnZXQsIFNlbGVjdG9ycy5UT09MVElQUEVEX0VMKTtcbiAgICB2YXIgcG9wcGVyID0gY2xvc2VzdChldmVudC50YXJnZXQsIFNlbGVjdG9ycy5QT1BQRVIpO1xuXG4gICAgaWYgKHBvcHBlcikge1xuICAgICAgdmFyIHJlZiA9IGZpbmQoU3RvcmUsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgcmV0dXJuIHJlZi5wb3BwZXIgPT09IHBvcHBlcjtcbiAgICAgIH0pO1xuICAgICAgdmFyIGludGVyYWN0aXZlID0gcmVmLnNldHRpbmdzLmludGVyYWN0aXZlO1xuXG4gICAgICBpZiAoaW50ZXJhY3RpdmUpIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWwpIHtcbiAgICAgIHZhciBfcmVmID0gZmluZChTdG9yZSwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICByZXR1cm4gcmVmLmVsID09PSBlbDtcbiAgICAgIH0pO1xuICAgICAgdmFyIF9yZWYkc2V0dGluZ3MgPSBfcmVmLnNldHRpbmdzLFxuICAgICAgICAgIGhpZGVPbkNsaWNrID0gX3JlZiRzZXR0aW5ncy5oaWRlT25DbGljayxcbiAgICAgICAgICBtdWx0aXBsZSA9IF9yZWYkc2V0dGluZ3MubXVsdGlwbGUsXG4gICAgICAgICAgdHJpZ2dlciA9IF9yZWYkc2V0dGluZ3MudHJpZ2dlcjtcblxuICAgICAgLy8gSGlkZSBhbGwgcG9wcGVycyBleGNlcHQgdGhlIG9uZSBiZWxvbmdpbmcgdG8gdGhlIGVsZW1lbnQgdGhhdCB3YXMgY2xpY2tlZCBJRlxuICAgICAgLy8gYG11bHRpcGxlYCBpcyBmYWxzZSBBTkQgdGhleSBhcmUgYSB0b3VjaCB1c2VyLCBPUlxuICAgICAgLy8gYG11bHRpcGxlYCBpcyBmYWxzZSBBTkQgaXQncyB0cmlnZ2VyZWQgYnkgYSBjbGlja1xuXG4gICAgICBpZiAoIW11bHRpcGxlICYmIEJyb3dzZXIudG91Y2ggfHwgIW11bHRpcGxlICYmIHRyaWdnZXIuaW5kZXhPZignY2xpY2snKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGhpZGVBbGxQb3BwZXJzKF9yZWYpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBoaWRlT25DbGljayBpcyBub3Qgc3RyaWN0bHkgdHJ1ZSBvciB0cmlnZ2VyZWQgYnkgYSBjbGljayBkb24ndCBoaWRlIHBvcHBlcnNcbiAgICAgIGlmIChoaWRlT25DbGljayAhPT0gdHJ1ZSB8fCB0cmlnZ2VyLmluZGV4T2YoJ2NsaWNrJykgIT09IC0xKSByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRG9uJ3QgdHJpZ2dlciBhIGhpZGUgZm9yIHRpcHB5IGNvbnRyb2xsZXJzLCBhbmQgZG9uJ3QgbmVlZGxlc3NseSBydW4gbG9vcFxuICAgIGlmIChjbG9zZXN0KGV2ZW50LnRhcmdldCwgU2VsZWN0b3JzLkNPTlRST0xMRVIpIHx8ICFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5QT1BQRVIpKSByZXR1cm47XG5cbiAgICBoaWRlQWxsUG9wcGVycygpO1xuICB9O1xuXG4gIHZhciBibHVySGFuZGxlciA9IGZ1bmN0aW9uIGJsdXJIYW5kbGVyKGV2ZW50KSB7XG4gICAgdmFyIF9kb2N1bWVudCA9IGRvY3VtZW50LFxuICAgICAgICBlbCA9IF9kb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gICAgaWYgKGVsICYmIGVsLmJsdXIgJiYgbWF0Y2hlcyQxLmNhbGwoZWwsIFNlbGVjdG9ycy5UT09MVElQUEVEX0VMKSkge1xuICAgICAgZWwuYmx1cigpO1xuICAgIH1cbiAgfTtcblxuICAvLyBIb29rIGV2ZW50c1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsaWNrSGFuZGxlcik7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0b3VjaEhhbmRsZXIpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGJsdXJIYW5kbGVyKTtcblxuICBpZiAoIUJyb3dzZXIuU1VQUE9SVFNfVE9VQ0ggJiYgKG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDAgfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAwKSkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdG91Y2hIYW5kbGVyKTtcbiAgfVxufVxuXG4vKipcbiogVG8gcnVuIGEgc2luZ2xlIHRpbWUsIG9uY2UgRE9NIGlzIHByZXN1bWVkIHRvIGJlIHJlYWR5XG4qIEByZXR1cm4ge0Jvb2xlYW59IHdoZXRoZXIgdGhlIGZ1bmN0aW9uIGhhcyBydW4gb3Igbm90XG4qL1xuZnVuY3Rpb24gaW5pdCgpIHtcbiAgaWYgKGluaXQuZG9uZSkgcmV0dXJuIGZhbHNlO1xuICBpbml0LmRvbmUgPSB0cnVlO1xuXG4gIGJpbmRFdmVudExpc3RlbmVycygpO1xuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiogV2FpdHMgdW50aWwgbmV4dCByZXBhaW50IHRvIGV4ZWN1dGUgYSBmblxuKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuKi9cbmZ1bmN0aW9uIGRlZmVyKGZuKSB7XG4gIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICB9KTtcbn1cblxuLyoqXG4qIFJldHVybnMgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCBwcm9wZXJ0eSAtIG9ubHkgYHdlYmtpdGAgaXMgbmVlZGVkLCBgbW96YCwgYG1zYCBhbmQgYG9gIGFyZSBvYnNvbGV0ZVxuKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiogQHJldHVybiB7U3RyaW5nfSAtIGJyb3dzZXIgc3VwcG9ydGVkIHByZWZpeGVkIHByb3BlcnR5XG4qL1xuZnVuY3Rpb24gcHJlZml4KHByb3BlcnR5KSB7XG4gIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ3dlYmtpdCddO1xuICB2YXIgdXBwZXJQcm9wID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9wcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgcHJlZml4ZWRQcm9wID0gX3ByZWZpeCA/ICcnICsgX3ByZWZpeCArIHVwcGVyUHJvcCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2Ygd2luZG93LmRvY3VtZW50LmJvZHkuc3R5bGVbcHJlZml4ZWRQcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBwcmVmaXhlZFByb3A7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuKiBQb255ZmlsbCBmb3IgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuKiBAcGFyYW0ge0FycmF5fSBhcnJcbiogQHBhcmFtIHtGdW5jdGlvbn0gY2hlY2tGblxuKiBAcmV0dXJuIGluZGV4IG9mIHRoZSBpdGVtIGluIHRoZSBhcnJheVxuKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIGNoZWNrRm4pIHtcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChjaGVja0ZuKTtcbiAgfVxuXG4gIC8vIGZhbGxiYWNrXG4gIHJldHVybiBhcnIuaW5kZXhPZihmaW5kKGFyciwgY2hlY2tGbikpO1xufVxuXG4vKipcbiogUmVtb3ZlcyB0aGUgdGl0bGUgZnJvbSB0aGUgdG9vbHRpcHBlZCBlbGVtZW50LCBzZXR0aW5nIGBkYXRhLW9yaWdpbmFsLXRpdGxlYFxuKiBhcHByb3ByaWF0ZWx5XG4qIEBwYXJhbSB7RWxlbWVudH0gZWxcbiovXG5mdW5jdGlvbiByZW1vdmVUaXRsZShlbCkge1xuICB2YXIgdGl0bGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG5cbiAgLy8gT25seSBzZXQgYGRhdGEtb3JpZ2luYWwtdGl0bGVgIGF0dHIgaWYgdGhlcmUgaXMgYSB0aXRsZVxuICBpZiAodGl0bGUpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnLCB0aXRsZSk7XG4gIH1cblxuICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3RpdGxlJyk7XG59XG5cbi8qKlxuKiBEZXRlcm1pbmVzIGlmIGFuIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiB0aGUgdmlld3BvcnRcbiogQHBhcmFtIHtFbGVtZW50fSBlbFxuKiBAcmV0dXJuIHtCb29sZWFufVxuKi9cbmZ1bmN0aW9uIGVsZW1lbnRJc0luVmlld3BvcnQoZWwpIHtcbiAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICByZXR1cm4gcmVjdC50b3AgPj0gMCAmJiByZWN0LmxlZnQgPj0gMCAmJiByZWN0LmJvdHRvbSA8PSAod2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpICYmIHJlY3QucmlnaHQgPD0gKHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCk7XG59XG5cbi8qKlxuKiBUcmlnZ2VycyBhIGRvY3VtZW50IHJlcGFpbnQgb3IgcmVmbG93IGZvciBDU1MgdHJhbnNpdGlvblxuKiBAcGFyYW0ge0VsZW1lbnR9IHRvb2x0aXBcbiogQHBhcmFtIHtFbGVtZW50fSBjaXJjbGVcbiovXG5mdW5jdGlvbiB0cmlnZ2VyUmVmbG93KHRvb2x0aXAsIGNpcmNsZSkge1xuICAvLyBTYWZhcmkgbmVlZHMgdGhlIHNwZWNpZmljICd0cmFuc2Zvcm0nIHByb3BlcnR5IHRvIGJlIGFjY2Vzc2VkXG4gIGNpcmNsZSA/IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNpcmNsZSlbcHJlZml4KCd0cmFuc2Zvcm0nKV0gOiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0b29sdGlwKS5vcGFjaXR5O1xufVxuXG4vKipcbiogTW9kaWZpZXMgZWxlbWVudHMnIGNsYXNzIGxpc3RzXG4qIEBwYXJhbSB7RWxlbWVudFtdfSBlbHMgLSBBcnJheSBvZiBlbGVtZW50c1xuKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuKi9cbmZ1bmN0aW9uIG1vZGlmeUNsYXNzTGlzdChlbHMsIGNhbGxiYWNrKSB7XG4gIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmICghZWwpIHJldHVybjtcbiAgICBjYWxsYmFjayhlbC5jbGFzc0xpc3QpO1xuICB9KTtcbn1cblxuLyoqXG4qIFJldHVybnMgaW5uZXIgZWxlbWVudHMgb2YgdGhlIHBvcHBlciBlbGVtZW50XG4qIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyXG4qIEByZXR1cm4ge09iamVjdH1cbiovXG5mdW5jdGlvbiBnZXRJbm5lckVsZW1lbnRzKHBvcHBlcikge1xuICByZXR1cm4ge1xuICAgIHRvb2x0aXA6IHBvcHBlci5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5UT09MVElQKSxcbiAgICBjaXJjbGU6IHBvcHBlci5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5DSVJDTEUpLFxuICAgIGNvbnRlbnQ6IHBvcHBlci5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5DT05URU5UKVxuICB9O1xufVxuXG4vKipcbiogQXBwbGllcyB0aGUgdHJhbnNpdGlvbiBkdXJhdGlvbiB0byBlYWNoIGVsZW1lbnRcbiogQHBhcmFtIHtFbGVtZW50W119IGVscyAtIEFycmF5IG9mIGVsZW1lbnRzXG4qIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuKi9cbmZ1bmN0aW9uIGFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uKGVscywgZHVyYXRpb24pIHtcbiAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuXG4gICAgdmFyIGlzQ29udGVudCA9IG1hdGNoZXMkMS5jYWxsKGVsLCBTZWxlY3RvcnMuQ09OVEVOVCk7XG5cbiAgICB2YXIgX2R1cmF0aW9uID0gaXNDb250ZW50ID8gTWF0aC5yb3VuZChkdXJhdGlvbiAvIDEuMykgOiBkdXJhdGlvbjtcblxuICAgIGVsLnN0eWxlW3ByZWZpeCgndHJhbnNpdGlvbkR1cmF0aW9uJyldID0gX2R1cmF0aW9uICsgJ21zJztcbiAgfSk7XG59XG5cbi8qKlxuKiBEZXRlcm1pbmVzIGlmIGEgcG9wcGVyIGlzIGN1cnJlbnRseSB2aXNpYmxlXG4qIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyXG4qIEByZXR1cm4ge0Jvb2xlYW59XG4qL1xuZnVuY3Rpb24gaXNWaXNpYmxlKHBvcHBlcikge1xuICByZXR1cm4gcG9wcGVyLnN0eWxlLnZpc2liaWxpdHkgPT09ICd2aXNpYmxlJztcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGlzT2JqZWN0TGl0ZXJhbChpbnB1dCkge1xuICByZXR1cm4gISFpbnB1dCAmJiBpbnB1dC50b1N0cmluZygpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuLyoqXG4qIFJldHVybnMgdGhlIG5vbi1zaGlmdGVkIHBsYWNlbWVudCAoZS5nLiwgJ2JvdHRvbS1zdGFydCcgPT4gJ2JvdHRvbScpXG4qIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnRcbiogQHJldHVybiB7U3RyaW5nfVxuKi9cbmZ1bmN0aW9uIGdldENvcmVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvLS4rLywgJycpO1xufVxuXG4vKipcbiogTW91c2Vtb3ZlIGV2ZW50IGxpc3RlbmVyIGNhbGxiYWNrIG1ldGhvZCBmb3IgZm9sbG93IGN1cnNvciBzZXR0aW5nXG4qIEBwYXJhbSB7TW91c2VFdmVudH0gZVxuKi9cbmZ1bmN0aW9uIGZvbGxvd0N1cnNvckhhbmRsZXIoZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBkYXRhID0gZmluZChTdG9yZSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YS5lbCA9PT0gX3RoaXM7XG4gIH0pO1xuXG4gIHZhciBwb3BwZXIgPSBkYXRhLnBvcHBlcixcbiAgICAgIG9mZnNldCA9IGRhdGEuc2V0dGluZ3Mub2Zmc2V0O1xuXG5cbiAgdmFyIHBvc2l0aW9uID0gZ2V0Q29yZVBsYWNlbWVudChwb3BwZXIuZ2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcpKTtcbiAgdmFyIGhhbGZQb3BwZXJXaWR0aCA9IE1hdGgucm91bmQocG9wcGVyLm9mZnNldFdpZHRoIC8gMik7XG4gIHZhciBoYWxmUG9wcGVySGVpZ2h0ID0gTWF0aC5yb3VuZChwb3BwZXIub2Zmc2V0SGVpZ2h0IC8gMik7XG4gIHZhciB2aWV3cG9ydFBhZGRpbmcgPSA1O1xuICB2YXIgcGFnZVdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldFdpZHRoIHx8IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGg7XG5cbiAgdmFyIHBhZ2VYID0gZS5wYWdlWCxcbiAgICAgIHBhZ2VZID0gZS5wYWdlWTtcblxuXG4gIHZhciB4ID0gdm9pZCAwLFxuICAgICAgeSA9IHZvaWQgMDtcblxuICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHggPSBwYWdlWCAtIGhhbGZQb3BwZXJXaWR0aCArIG9mZnNldDtcbiAgICAgIHkgPSBwYWdlWSAtIDIgKiBoYWxmUG9wcGVySGVpZ2h0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIHggPSBwYWdlWCAtIGhhbGZQb3BwZXJXaWR0aCArIG9mZnNldDtcbiAgICAgIHkgPSBwYWdlWSArIDEwO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICB4ID0gcGFnZVggLSAyICogaGFsZlBvcHBlcldpZHRoO1xuICAgICAgeSA9IHBhZ2VZIC0gaGFsZlBvcHBlckhlaWdodCArIG9mZnNldDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHggPSBwYWdlWCArIDU7XG4gICAgICB5ID0gcGFnZVkgLSBoYWxmUG9wcGVySGVpZ2h0ICsgb2Zmc2V0O1xuICAgICAgYnJlYWs7XG4gIH1cblxuICB2YXIgaXNSaWdodE92ZXJmbG93aW5nID0gcGFnZVggKyB2aWV3cG9ydFBhZGRpbmcgKyBoYWxmUG9wcGVyV2lkdGggKyBvZmZzZXQgPiBwYWdlV2lkdGg7XG4gIHZhciBpc0xlZnRPdmVyZmxvd2luZyA9IHBhZ2VYIC0gdmlld3BvcnRQYWRkaW5nIC0gaGFsZlBvcHBlcldpZHRoICsgb2Zmc2V0IDwgMDtcblxuICAvLyBQcmV2ZW50IGxlZnQvcmlnaHQgb3ZlcmZsb3dcbiAgaWYgKHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICBpZiAoaXNSaWdodE92ZXJmbG93aW5nKSB7XG4gICAgICB4ID0gcGFnZVdpZHRoIC0gdmlld3BvcnRQYWRkaW5nIC0gMiAqIGhhbGZQb3BwZXJXaWR0aDtcbiAgICB9XG5cbiAgICBpZiAoaXNMZWZ0T3ZlcmZsb3dpbmcpIHtcbiAgICAgIHggPSB2aWV3cG9ydFBhZGRpbmc7XG4gICAgfVxuICB9XG5cbiAgcG9wcGVyLnN0eWxlW3ByZWZpeCgndHJhbnNmb3JtJyldID0gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJ3B4LCAnICsgeSArICdweCwgMCknO1xufVxuXG4vKipcbiogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyBiYXNlZCBvbiB0aGUgc2VsZWN0b3IgaW5wdXRcbiogQHBhcmFtIHtTdHJpbmd8RWxlbWVudHxFbGVtZW50W119IHNlbGVjdG9yXG4qIEByZXR1cm4ge0VsZW1lbnRbXX1cbiovXG5mdW5jdGlvbiBnZXRBcnJheU9mRWxlbWVudHMoc2VsZWN0b3IpIHtcbiAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgRWxlbWVudCB8fCBpc09iamVjdExpdGVyYWwoc2VsZWN0b3IpKSB7XG4gICAgcmV0dXJuIFtzZWxlY3Rvcl07XG4gIH1cblxuICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBOb2RlTGlzdCkge1xuICAgIHJldHVybiBbXS5zbGljZS5jYWxsKHNlbGVjdG9yKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdG9yKSkge1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbi8qKlxuKiBQcmVwYXJlcyB0aGUgY2FsbGJhY2sgZnVuY3Rpb25zIGZvciBgc2hvd2AgYW5kIGBoaWRlYCBtZXRob2RzXG4qIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4qIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgb25jZSB0cmFuc2l0aW9ucyBjb21wbGV0ZVxuKi9cbmZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChkYXRhLCBkdXJhdGlvbiwgY2FsbGJhY2spIHtcbiAgLy8gTWFrZSBjYWxsYmFjayBzeW5jaHJvbm91cyBpZiBkdXJhdGlvbiBpcyAwXG4gIGlmICghZHVyYXRpb24pIHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfVxuXG4gIHZhciBfZ2V0SW5uZXJFbGVtZW50cyA9IGdldElubmVyRWxlbWVudHMoZGF0YS5wb3BwZXIpLFxuICAgICAgdG9vbHRpcCA9IF9nZXRJbm5lckVsZW1lbnRzLnRvb2x0aXA7XG5cbiAgdmFyIHRyYW5zaXRpb25lbmRGaXJlZCA9IGZhbHNlO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoYWN0aW9uKSB7XG4gICAgdG9vbHRpcFthY3Rpb24gKyAnRXZlbnRMaXN0ZW5lciddKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgbGlzdGVuZXJDYWxsYmFjayk7XG4gICAgdG9vbHRpcFthY3Rpb24gKyAnRXZlbnRMaXN0ZW5lciddKCd0cmFuc2l0aW9uZW5kJywgbGlzdGVuZXJDYWxsYmFjayk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ2FsbGJhY2sgPSBmdW5jdGlvbiBsaXN0ZW5lckNhbGxiYWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IHRvb2x0aXAgJiYgIXRyYW5zaXRpb25lbmRGaXJlZCkge1xuICAgICAgdHJhbnNpdGlvbmVuZEZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVycygncmVtb3ZlJyk7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfTtcblxuICAvLyBGaXJlIGNhbGxiYWNrIHVwb24gdHJhbnNpdGlvbiBjb21wbGV0aW9uXG4gIGxpc3RlbmVycygnYWRkJyk7XG5cbiAgLy8gRmFsbGJhY2s6IHRyYW5zaXRpb25lbmQgbGlzdGVuZXIgc29tZXRpbWVzIG1heSBub3QgZmlyZVxuICBjbGVhclRpbWVvdXQoZGF0YS5fdHJhbnNpdGlvbmVuZFRpbWVvdXQpO1xuICBkYXRhLl90cmFuc2l0aW9uZW5kVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmICghdHJhbnNpdGlvbmVuZEZpcmVkKSB7XG4gICAgICBsaXN0ZW5lcnMoJ3JlbW92ZScpO1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH0sIGR1cmF0aW9uKTtcbn1cblxuLyoqIVxuICogQGZpbGVPdmVydmlldyBLaWNrYXNzIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBwbGFjZSBwb3BwZXJzIG5lYXIgdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnRzLlxuICogQHZlcnNpb24gMS4xMi45XG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IEZlZGVyaWNvIFppdm9sbyBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqL1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddO1xudmFyIHRpbWVvdXREdXJhdGlvbiA9IDA7XG5mb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICBpZiAoaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihsb25nZXJUaW1lb3V0QnJvd3NlcnNbaV0pID49IDApIHtcbiAgICB0aW1lb3V0RHVyYXRpb24gPSAxO1xuICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gZmFsc2U7XG4gICAgICBmbigpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBzdXBwb3J0c01pY3JvVGFza3MgPSBpc0Jyb3dzZXIgJiYgd2luZG93LlByb21pc2U7XG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG52YXIgZGVib3VuY2UgPSBzdXBwb3J0c01pY3JvVGFza3MgPyBtaWNyb3Rhc2tEZWJvdW5jZSA6IHRhc2tEZWJvdW5jZTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcblxuICB2YXIgX2dldFN0eWxlQ29tcHV0ZWRQcm9wID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WTtcblxuICBpZiAoLyhhdXRvfHNjcm9sbCkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQgJiYgZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gIHZhciBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEQgb3IgVEFCTEUgaW4gY2FzZVxuICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uXG4gIGlmIChbJ1REJywgJ1RBQkxFJ10uaW5kZXhPZihvZmZzZXRQYXJlbnQubm9kZU5hbWUpICE9PSAtMSAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufVxuXG5mdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZVxuICovXG5mdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgdmFyIHN0YXJ0ID0gb3JkZXIgPyBlbGVtZW50MSA6IGVsZW1lbnQyO1xuICB2YXIgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIHZhciBjb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcblxuICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5mdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCkge1xuICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3RvcCc7XG5cbiAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCkge1xuICB2YXIgc3VidHJhY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbi8qXG4gKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xuICogUmVzdWx0IG9mIGBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHlgIG9uIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYXhpcyAtIGB4YCBvciBgeWBcbiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXNcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHtcbiAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIHZhciBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUEgKyAnV2lkdGgnXSwgMTApICsgcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQiArICdXaWR0aCddLCAxMCk7XG59XG5cbi8qKlxuICogVGVsbHMgaWYgeW91IGFyZSBydW5uaW5nIEludGVybmV0IEV4cGxvcmVyIDEwXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRTEwXG4gKi9cbnZhciBpc0lFMTAgPSB1bmRlZmluZWQ7XG5cbnZhciBpc0lFMTAkMSA9IGZ1bmN0aW9uIGlzSUUxMCQxKCkge1xuICBpZiAoaXNJRTEwID09PSB1bmRlZmluZWQpIHtcbiAgICBpc0lFMTAgPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdNU0lFIDEwJykgIT09IC0xO1xuICB9XG4gIHJldHVybiBpc0lFMTA7XG59O1xuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFMTAkMSgpID8gaHRtbFsnb2Zmc2V0JyArIGF4aXNdICsgY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdUb3AnIDogJ0xlZnQnKV0gKyBjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ0JvdHRvbScgOiAnUmlnaHQnKV0gOiAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoKSB7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gaXNJRTEwJDEoKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxuICB9O1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiBjbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChvZmZzZXRzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb2Zmc2V0cywge1xuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdFxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IHt9O1xuXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcbiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uXG4gIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTFcbiAgaWYgKGlzSUUxMCQxKCkpIHtcbiAgICB0cnkge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDtcbiAgICB9IGNhdGNoIChlcnIpIHt9XG4gIH0gZWxzZSB7XG4gICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgdmFyIHNpemVzID0gZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnID8gZ2V0V2luZG93U2l6ZXMoKSA6IHt9O1xuICB2YXIgd2lkdGggPSBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC5yaWdodCAtIHJlc3VsdC5sZWZ0O1xuICB2YXIgaGVpZ2h0ID0gc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5ib3R0b20gLSByZXN1bHQudG9wO1xuXG4gIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgdmFyIHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCkge1xuICB2YXIgaXNJRTEwID0gaXNJRTEwJDEoKTtcbiAgdmFyIGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgdmFyIHBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocGFyZW50KTtcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCwgMTApO1xuICB2YXIgYm9yZGVyTGVmdFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoLCAxMCk7XG5cbiAgdmFyIG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0XG4gIH0pO1xuICBvZmZzZXRzLm1hcmdpblRvcCA9IDA7XG4gIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7XG5cbiAgLy8gU3VidHJhY3QgbWFyZ2lucyBvZiBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBpdCdzIGJlaW5nIHVzZWQgYXMgcGFyZW50XG4gIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlc1xuICAvLyBkaWZmZXJlbnRseSB3aGVuIG1hcmdpbnMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoZSBtYXJnaW5zIGFyZSBpbmNsdWRlZCBpblxuICAvLyB0aGUgYm94IG9mIHRoZSBkb2N1bWVudEVsZW1lbnQsIGluIHRoZSBvdGhlciBjYXNlcyBub3QuXG4gIGlmICghaXNJRTEwICYmIGlzSFRNTCkge1xuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AsIDEwKTtcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQsIDEwKTtcblxuICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMuYm90dG9tIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubGVmdCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcblxuICAgIC8vIEF0dGFjaCBtYXJnaW5Ub3AgYW5kIG1hcmdpbkxlZnQgYmVjYXVzZSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgd2UgbWF5IG5lZWQgdGhlbVxuICAgIG9mZnNldHMubWFyZ2luVG9wID0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gIH1cblxuICBpZiAoaXNJRTEwID8gcGFyZW50LmNvbnRhaW5zKHNjcm9sbFBhcmVudCkgOiBwYXJlbnQgPT09IHNjcm9sbFBhcmVudCAmJiBzY3JvbGxQYXJlbnQubm9kZU5hbWUgIT09ICdCT0RZJykge1xuICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHtcbiAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoZWxlbWVudCwgaHRtbCk7XG4gIHZhciB3aWR0aCA9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGh0bWwpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChodG1sLCAnbGVmdCcpO1xuXG4gIHZhciBvZmZzZXQgPSB7XG4gICAgdG9wOiBzY3JvbGxUb3AgLSByZWxhdGl2ZU9mZnNldC50b3AgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5Ub3AsXG4gICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZml4ZWQgb3IgaXMgaW5zaWRlIGEgZml4ZWQgcGFyZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvIFwiaXNGaXhlZD9cIlxuICovXG5mdW5jdGlvbiBpc0ZpeGVkKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGlzRml4ZWQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbi8qKlxuICogQ29tcHV0ZWQgdGhlIGJvdW5kYXJpZXMgbGltaXRzIGFuZCByZXR1cm4gdGhlbVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudCAtIEVsZW1lbnQgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kYXJpZXNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzXG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBib3VuZGFyaWVzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgdmFyIGJvdW5kYXJpZXNOb2RlID0gdm9pZCAwO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCk7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMoKSxcbiAgICAgICAgICBoZWlnaHQgPSBfZ2V0V2luZG93U2l6ZXMuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoO1xuXG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIGJvdW5kYXJpZXMubGVmdCArPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLnRvcCArPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLnJpZ2h0IC09IHBhZGRpbmc7XG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IHBhZGRpbmc7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFyZWEoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xuXG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfVxuICB9O1xuXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICB2YXIgc3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3ApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tKTtcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0KSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblJpZ2h0KTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHhcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudFxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgdmFyIGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIHZhciBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgdmFyIHBvcHBlck9mZnNldHMgPSB7XG4gICAgd2lkdGg6IHBvcHBlclJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBwb3BwZXJSZWN0LmhlaWdodFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIHZhciBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICsgcmVmZXJlbmNlT2Zmc2V0c1ttZWFzdXJlbWVudF0gLyAyIC0gcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gLSBwb3BwZXJSZWN0W3NlY29uZGFyeU1lYXN1cmVtZW50XTtcbiAgfSBlbHNlIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cblxuLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZCQxKGFyciwgY2hlY2spIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2spO1xuICB9XG5cbiAgLy8gdXNlIGBmaWx0ZXJgIHRvIG9idGFpbiB0aGUgc2FtZSBiZWhhdmlvciBvZiBgZmluZGBcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2spWzBdO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgkMShhcnIsIHByb3AsIHZhbHVlKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHtcbiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gdXNlIGBmaW5kYCArIGBpbmRleE9mYCBpZiBgZmluZEluZGV4YCBpc24ndCBzdXBwb3J0ZWRcbiAgdmFyIG1hdGNoID0gZmluZCQxKGFyciwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGFyci5pbmRleE9mKG1hdGNoKTtcbn1cblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4JDEobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmIChtb2RpZmllclsnZnVuY3Rpb24nXSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgdmFyIGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3RcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxuICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlc1xuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcblxuICAgICAgZGF0YSA9IGZuKGRhdGEsIG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nXG4gKiB0aGUgbmV3IHN0eWxlLjxiciAvPlxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGVcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGF0YSA9IHtcbiAgICBpbnN0YW5jZTogdGhpcyxcbiAgICBzdHlsZXM6IHt9LFxuICAgIGFycm93U3R5bGVzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBmbGlwcGVkOiBmYWxzZSxcbiAgICBvZmZzZXRzOiB7fVxuICB9O1xuXG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyh0aGlzLnN0YXRlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHModGhpcy5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cbiAgLy8gcnVuIHRoZSBtb2RpZmllcnNcbiAgZGF0YSA9IHJ1bk1vZGlmaWVycyh0aGlzLm1vZGlmaWVycywgZGF0YSk7XG5cbiAgLy8gdGhlIGZpcnN0IGB1cGRhdGVgIHdpbGwgY2FsbCBgb25DcmVhdGVgIGNhbGxiYWNrXG4gIC8vIHRoZSBvdGhlciBvbmVzIHdpbGwgY2FsbCBgb25VcGRhdGVgIGNhbGxiYWNrXG4gIGlmICghdGhpcy5zdGF0ZS5pc0NyZWF0ZWQpIHtcbiAgICB0aGlzLnN0YXRlLmlzQ3JlYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZShkYXRhKTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgIGVuYWJsZWQgPSBfcmVmLmVuYWJsZWQ7XG4gICAgcmV0dXJuIGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByZWZpeGVkIHN1cHBvcnRlZCBwcm9wZXJ0eSBuYW1lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHkgKGNhbWVsQ2FzZSlcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHByZWZpeGVkIHByb3BlcnR5IChjYW1lbENhc2Ugb3IgUGFzY2FsQ2FzZSwgZGVwZW5kaW5nIG9uIHRoZSB2ZW5kb3IgcHJlZml4KVxuICovXG5mdW5jdGlvbiBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUocHJvcGVydHkpIHtcbiAgdmFyIHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIHZhciB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgIHZhciB0b0NoZWNrID0gcHJlZml4ID8gJycgKyBwcmVmaXggKyB1cHBlclByb3AgOiBwcm9wZXJ0eTtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbdG9DaGVja10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdG9DaGVjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRGVzdHJveSB0aGUgcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuXG4gIC8vIHRvdWNoIERPTSBvbmx5IGlmIGBhcHBseVN0eWxlYCBtb2RpZmllciBpcyBlbmFibGVkXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZCh0aGlzLm1vZGlmaWVycywgJ2FwcGx5U3R5bGUnKSkge1xuICAgIHRoaXMucG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKTtcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZVtnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpXSA9ICcnO1xuICB9XG5cbiAgdGhpcy5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAvLyByZW1vdmUgdGhlIHBvcHBlciBpZiB1c2VyIGV4cGxpY2l0eSBhc2tlZCBmb3IgdGhlIGRlbGV0aW9uIG9uIGRlc3Ryb3lcbiAgLy8gZG8gbm90IHVzZSBgcmVtb3ZlYCBiZWNhdXNlIElFMTEgZG9lc24ndCBzdXBwb3J0IGl0XG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95KSB7XG4gICAgdGhpcy5wb3BwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBvcHBlcik7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogR2V0IHRoZSB3aW5kb3cgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtXaW5kb3d9XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtZW50KSB7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxQYXJlbnQsIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cykge1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50Lm5vZGVOYW1lID09PSAnQk9EWSc7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBzY3JvbGxQYXJlbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHNjcm9sbFBhcmVudDtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgaWYgKCFpc0JvZHkpIHtcbiAgICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoZ2V0U2Nyb2xsUGFyZW50KHRhcmdldC5wYXJlbnROb2RlKSwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKTtcbiAgfVxuICBzY3JvbGxQYXJlbnRzLnB1c2godGFyZ2V0KTtcbn1cblxuLyoqXG4gKiBTZXR1cCBuZWVkZWQgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldHVwRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBvcHRpb25zLCBzdGF0ZSwgdXBkYXRlQm91bmQpIHtcbiAgLy8gUmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBzdGF0ZS51cGRhdGVCb3VuZCA9IHVwZGF0ZUJvdW5kO1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIC8vIFNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICB2YXIgc2Nyb2xsRWxlbWVudCA9IGdldFNjcm9sbFBhcmVudChyZWZlcmVuY2UpO1xuICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsRWxlbWVudCwgJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kLCBzdGF0ZS5zY3JvbGxQYXJlbnRzKTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IHNjcm9sbEVsZW1lbnQ7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSB0cnVlO1xuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIGFkZCByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgc3RhcnQgcmVjYWxjdWxhdGluZ1xuICogcG9zaXRpb24gb2YgdGhlIHBvcHBlciBlbGVtZW50IHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICB0aGlzLnN0YXRlID0gc2V0dXBFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLCB0aGlzLnN0YXRlLCB0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBzdGF0ZSkge1xuICAvLyBSZW1vdmUgcmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG5cbiAgLy8gUmVtb3ZlIHNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG4gIH0pO1xuXG4gIC8vIFJlc2V0IHN0YXRlXG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gbnVsbDtcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IFtdO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gbnVsbDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGZhbHNlO1xuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCByZW1vdmUgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHdvbid0IHJlY2FsY3VsYXRlIHBvcHBlciBwb3NpdGlvblxuICogd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuIEl0IGFsc28gd29uJ3QgdHJpZ2dlciBvblVwZGF0ZSBjYWxsYmFjayBhbnltb3JlLFxuICogdW5sZXNzIHlvdSBjYWxsIGB1cGRhdGVgIG1ldGhvZCBtYW51YWxseS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRlbGxzIGlmIGEgZ2l2ZW4gaW5wdXQgaXMgYSBudW1iZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gY2hlY2tcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTnVtZXJpYyhuKSB7XG4gIHJldHVybiBuICE9PSAnJyAmJiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5cbi8qKlxuICogU2V0IHRoZSBzdHlsZSB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBzdHlsZSB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0U3R5bGVzKGVsZW1lbnQsIHN0eWxlcykge1xuICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdW5pdCA9ICcnO1xuICAgIC8vIGFkZCB1bml0IGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljIGFuZCBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5pbmRleE9mKHByb3ApICE9PSAtMSAmJiBpc051bWVyaWMoc3R5bGVzW3Byb3BdKSkge1xuICAgICAgdW5pdCA9ICdweCc7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGF0dHJpYnV0ZXMgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgYXR0cmlidXRlcyB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3AsIGF0dHJpYnV0ZXNbcHJvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7XG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIGluIHRoaXMgd2F5IHdlIGNhbiBtYWtlIHRoZSAzcmQgcGFydHkgbW9kaWZpZXJzIGFkZCBjdXN0b20gc3R5bGVzIHRvIGl0XG4gIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXNcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcbiAgc2V0U3R5bGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLnN0eWxlcyk7XG5cbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIHRoZXkgd2lsbCBiZSBzZXQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gIHNldEF0dHJpYnV0ZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuYXR0cmlidXRlcyk7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXNcbiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkge1xuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZFxuICogdG8gYWRkIG1hcmdpbnMgdG8gdGhlIHBvcHBlciBtYXJnaW5zIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgdG8gZ2V0IHRoZVxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIubW9kaWZpZXJzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgdmFyIHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KG9wdGlvbnMucGxhY2VtZW50LCByZWZlcmVuY2VPZmZzZXRzLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcsIHBsYWNlbWVudCk7XG5cbiAgLy8gQXBwbHkgYHBvc2l0aW9uYCB0byBwb3BwZXIgYmVmb3JlIGFueXRoaW5nIGVsc2UgYmVjYXVzZVxuICAvLyB3aXRob3V0IHRoZSBwb3NpdGlvbiBhcHBsaWVkIHdlIGNhbid0IGd1YXJhbnRlZSBjb3JyZWN0IGNvbXB1dGF0aW9uc1xuICBzZXRTdHlsZXMocG9wcGVyLCB7IHBvc2l0aW9uOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgeCA9IG9wdGlvbnMueCxcbiAgICAgIHkgPSBvcHRpb25zLnk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kJDEoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZSc7XG4gIH0pLmdwdUFjY2VsZXJhdGlvbjtcbiAgaWYgKGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzIScpO1xuICB9XG4gIHZhciBncHVBY2NlbGVyYXRpb24gPSBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCA/IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA6IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uO1xuXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgb2Zmc2V0UGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuXG4gIC8vIFN0eWxlc1xuICB2YXIgc3R5bGVzID0ge1xuICAgIHBvc2l0aW9uOiBwb3BwZXIucG9zaXRpb25cbiAgfTtcblxuICAvLyBmbG9vciBzaWRlcyB0byBhdm9pZCBibHVycnkgdGV4dFxuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICBsZWZ0OiBNYXRoLmZsb29yKHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IE1hdGguZmxvb3IocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiBNYXRoLmZsb29yKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBNYXRoLmZsb29yKHBvcHBlci5yaWdodClcbiAgfTtcblxuICB2YXIgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIHZhciBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLFxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcbiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZFxuICB2YXIgcHJlZml4ZWRQcm9wZXJ0eSA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG5cbiAgLy8gbm93LCBsZXQncyBtYWtlIGEgc3RlcCBiYWNrIGFuZCBsb29rIGF0IHRoaXMgY29kZSBjbG9zZWx5ICh3dGY/KVxuICAvLyBJZiB0aGUgY29udGVudCBvZiB0aGUgcG9wcGVyIGdyb3dzIG9uY2UgaXQncyBiZWVuIHBvc2l0aW9uZWQsIGl0XG4gIC8vIG1heSBoYXBwZW4gdGhhdCB0aGUgcG9wcGVyIGdldHMgbWlzcGxhY2VkIGJlY2F1c2Ugb2YgdGhlIG5ldyBjb250ZW50XG4gIC8vIG92ZXJmbG93aW5nIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUbyBhdm9pZCB0aGlzIHByb2JsZW0sIHdlIHByb3ZpZGUgdHdvIG9wdGlvbnMgKHggYW5kIHkpLCB3aGljaCBhbGxvd1xuICAvLyB0aGUgY29uc3VtZXIgdG8gZGVmaW5lIHRoZSBvZmZzZXQgb3JpZ2luLlxuICAvLyBJZiB3ZSBwb3NpdGlvbiBhIHBvcHBlciBvbiB0b3Agb2YgYSByZWZlcmVuY2UgZWxlbWVudCwgd2UgY2FuIHNldFxuICAvLyBgeGAgdG8gYHRvcGAgdG8gbWFrZSB0aGUgcG9wcGVyIGdyb3cgdG93YXJkcyBpdHMgdG9wIGluc3RlYWQgb2ZcbiAgLy8gaXRzIGJvdHRvbS5cbiAgdmFyIGxlZnQgPSB2b2lkIDAsXG4gICAgICB0b3AgPSB2b2lkIDA7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LCAnICsgdG9wICsgJ3B4LCAwKSc7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIHZhciBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTtcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHtcbiAgdmFyIHJlcXVlc3RpbmcgPSBmaW5kJDEobW9kaWZpZXJzLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgIHJldHVybiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZTtcbiAgfSk7XG5cbiAgdmFyIGlzUmVxdWlyZWQgPSAhIXJlcXVlc3RpbmcgJiYgbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09IHJlcXVlc3RlZE5hbWUgJiYgbW9kaWZpZXIuZW5hYmxlZCAmJiBtb2RpZmllci5vcmRlciA8IHJlcXVlc3Rpbmcub3JkZXI7XG4gIH0pO1xuXG4gIGlmICghaXNSZXF1aXJlZCkge1xuICAgIHZhciBfcmVxdWVzdGluZyA9ICdgJyArIHJlcXVlc3RpbmdOYW1lICsgJ2AnO1xuICAgIHZhciByZXF1ZXN0ZWQgPSAnYCcgKyByZXF1ZXN0ZWROYW1lICsgJ2AnO1xuICAgIGNvbnNvbGUud2FybihyZXF1ZXN0ZWQgKyAnIG1vZGlmaWVyIGlzIHJlcXVpcmVkIGJ5ICcgKyBfcmVxdWVzdGluZyArICcgbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSAnICsgX3JlcXVlc3RpbmcgKyAnIScpO1xuICB9XG4gIHJldHVybiBpc1JlcXVpcmVkO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gYXJyb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyRhcnJvdztcblxuICAvLyBhcnJvdyBkZXBlbmRzIG9uIGtlZXBUb2dldGhlciBpbiBvcmRlciB0byB3b3JrXG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnYXJyb3cnLCAna2VlcFRvZ2V0aGVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGEgc3RyaW5nLCBzdXBwb3NlIGl0J3MgYSBDU1Mgc2VsZWN0b3JcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllclxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlIGFycm93RWxlbWVudCBpc24ndCBhIHF1ZXJ5IHNlbGVjdG9yIHdlIG11c3QgY2hlY2sgdGhhdCB0aGVcbiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGVcbiAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGFycm93LmVsZW1lbnRgIG11c3QgYmUgY2hpbGQgb2YgaXRzIHBvcHBlciBlbGVtZW50IScpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzaWRlQ2FwaXRhbGl6ZWQgPSBpc1ZlcnRpY2FsID8gJ1RvcCcgOiAnTGVmdCc7XG4gIHZhciBzaWRlID0gc2lkZUNhcGl0YWxpemVkLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBhbHRTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdib3R0b20nIDogJ3JpZ2h0JztcbiAgdmFyIGFycm93RWxlbWVudFNpemUgPSBnZXRPdXRlclNpemVzKGFycm93RWxlbWVudClbbGVuXTtcblxuICAvL1xuICAvLyBleHRlbmRzIGtlZXBUb2dldGhlciBiZWhhdmlvciBtYWtpbmcgc3VyZSB0aGUgcG9wcGVyIGFuZCBpdHNcbiAgLy8gcmVmZXJlbmNlIGhhdmUgZW5vdWdoIHBpeGVscyBpbiBjb25qdWN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPSByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSwgMTApO1xuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10sIDEwKTtcbiAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0gKF9kYXRhJG9mZnNldHMkYXJyb3cgPSB7fSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgc2lkZSwgTWF0aC5yb3VuZChzaWRlVmFsdWUpKSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgYWx0U2lkZSwgJycpLCBfZGF0YSRvZmZzZXRzJGFycm93KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tcmlnaHRgIChvbiB0aGUgc2lkZSB3aXRoIG1vcmUgc3BhY2UgYXZhaWxhYmxlLCBhbGlnbm1lbnQgZGVwZW5kcyBieSBwbGFjZW1lbnQpXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge0FycmF5fVxuICogQGVudW0ge1N0cmluZ31cbiAqIEByZWFkb25seVxuICogQG1ldGhvZCBwbGFjZW1lbnRzXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBwbGFjZW1lbnRzID0gWydhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYXV0by1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCcsICd0b3AtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3JpZ2h0LWVuZCcsICdib3R0b20tZW5kJywgJ2JvdHRvbScsICdib3R0b20tc3RhcnQnLCAnbGVmdC1lbmQnLCAnbGVmdCcsICdsZWZ0LXN0YXJ0J107XG5cbi8vIEdldCByaWQgb2YgYGF1dG9gIGBhdXRvLXN0YXJ0YCBhbmQgYGF1dG8tZW5kYFxudmFyIHZhbGlkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuc2xpY2UoMyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHNcbiAqIGNsb2Nrd2lzZSAob3IgY291bnRlci1jbG9ja3dpc2UpLlxuICpcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgLSBBIHZhbGlkIHBsYWNlbWVudCAoaXQgYWNjZXB0cyB2YXJpYXRpb25zKVxuICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlXG4gKiBAcmV0dXJucyB7QXJyYXl9IHBsYWNlbWVudHMgaW5jbHVkaW5nIHRoZWlyIHZhcmlhdGlvbnNcbiAqL1xuZnVuY3Rpb24gY2xvY2t3aXNlKHBsYWNlbWVudCkge1xuICB2YXIgY291bnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGluZGV4ID0gdmFsaWRQbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KTtcbiAgdmFyIGFyciA9IHZhbGlkUGxhY2VtZW50cy5zbGljZShpbmRleCArIDEpLmNvbmNhdCh2YWxpZFBsYWNlbWVudHMuc2xpY2UoMCwgaW5kZXgpKTtcbiAgcmV0dXJuIGNvdW50ZXIgPyBhcnIucmV2ZXJzZSgpIDogYXJyO1xufVxuXG52YXIgQkVIQVZJT1JTID0ge1xuICBGTElQOiAnZmxpcCcsXG4gIENMT0NLV0lTRTogJ2Nsb2Nrd2lzZScsXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJ1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGZsaXAoZGF0YSwgb3B0aW9ucykge1xuICAvLyBpZiBgaW5uZXJgIG1vZGlmaWVyIGlzIGVuYWJsZWQsIHdlIGNhbid0IHVzZSB0aGUgYGZsaXBgIG1vZGlmaWVyXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2lubmVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGlmIChkYXRhLmZsaXBwZWQgJiYgZGF0YS5wbGFjZW1lbnQgPT09IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQpIHtcbiAgICAvLyBzZWVtcyBsaWtlIGZsaXAgaXMgdHJ5aW5nIHRvIGxvb3AsIHByb2JhYmx5IHRoZXJlJ3Mgbm90IGVub3VnaCBzcGFjZSBvbiBhbnkgb2YgdGhlIGZsaXBwYWJsZSBzaWRlc1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZCQxKGZyYWdtZW50cywgZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy5zZWFyY2goLyx8XFxzLykgIT09IC0xO1xuICB9KSk7XG5cbiAgaWYgKGZyYWdtZW50c1tkaXZpZGVyXSAmJiBmcmFnbWVudHNbZGl2aWRlcl0uaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpO1xuICB9XG5cbiAgLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlXG4gIC8vIHRoZW0gYnkgb2ZzZXQgWCBhbmQgWS5cbiAgdmFyIHNwbGl0UmVnZXggPSAvXFxzKixcXHMqfFxccysvO1xuICB2YXIgb3BzID0gZGl2aWRlciAhPT0gLTEgPyBbZnJhZ21lbnRzLnNsaWNlKDAsIGRpdmlkZXIpLmNvbmNhdChbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzBdXSksIFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMV1dLmNvbmNhdChmcmFnbWVudHMuc2xpY2UoZGl2aWRlciArIDEpKV0gOiBbZnJhZ21lbnRzXTtcblxuICAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgd2l0aCB1bml0cyB0byBhYnNvbHV0ZSBwaXhlbHMgdG8gYWxsb3cgb3VyIGNvbXB1dGF0aW9uc1xuICBvcHMgPSBvcHMubWFwKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICAvLyBNb3N0IG9mIHRoZSB1bml0cyByZWx5IG9uIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgcG9wcGVyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodCkgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgcmV0dXJuIG9wXG4gICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnNcbiAgICAvLyBlLmcuOiAxMCArICs1ID0+IFsxMCwgKywgKzVdXG4gICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IHRydWU7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIGlmIChtZXJnZVdpdGhQcmV2aW91cykge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gKz0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICB9XG4gICAgfSwgW10pXG4gICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpXG4gICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7XG4gICAgICByZXR1cm4gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gTG9vcCB0cm91Z2ggdGhlIG9mZnNldHMgYXJyYXlzIGFuZCBleGVjdXRlIHRoZSBvcGVyYXRpb25zXG4gIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICBvcC5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnLCBpbmRleDIpIHtcbiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHtcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxuICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIG9mZnNldChkYXRhLCBfcmVmKSB7XG4gIHZhciBvZmZzZXQgPSBfcmVmLm9mZnNldDtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LFxuICAgICAgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICB2YXIgb2Zmc2V0cyA9IHZvaWQgMDtcbiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkge1xuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpO1xuICB9XG5cbiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07XG4gIH1cblxuICBkYXRhLnBvcHBlciA9IHBvcHBlcjtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBib3VuZGFyaWVzRWxlbWVudCA9IG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQgfHwgZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcblxuICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0b1xuICAvLyBnbyBvbmUgc3RlcCB1cCBhbmQgdXNlIHRoZSBuZXh0IG9mZnNldFBhcmVudCBhcyByZWZlcmVuY2UgdG9cbiAgLy8gYXZvaWQgdG8gbWFrZSB0aGlzIG1vZGlmaWVyIGNvbXBsZXRlbHkgdXNlbGVzcyBhbmQgbG9vayBsaWtlIGJyb2tlblxuICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpO1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCk7XG4gIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7XG5cbiAgdmFyIG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgdmFyIGNoZWNrID0ge1xuICAgIHByaW1hcnk6IGZ1bmN0aW9uIHByaW1hcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbcGxhY2VtZW50XTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgocG9wcGVyW3BsYWNlbWVudF0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIHBsYWNlbWVudCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5OiBmdW5jdGlvbiBzZWNvbmRhcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHBvcHBlclttYWluU2lkZV0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIG1haW5TaWRlLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JztcbiAgICBwb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBjaGVja1tzaWRlXShwbGFjZW1lbnQpKTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gc2hpZnQoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxuICBpZiAoc2hpZnR2YXJpYXRpb24pIHtcbiAgICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyO1xuXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ2JvdHRvbScsICd0b3AnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gICAgdmFyIHNoaWZ0T2Zmc2V0cyA9IHtcbiAgICAgIHN0YXJ0OiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdKSxcbiAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdKVxuICAgIH07XG5cbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGhpZGUoZGF0YSkge1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2hpZGUnLCAncHJldmVudE92ZXJmbG93JykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciByZWZSZWN0ID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIGJvdW5kID0gZmluZCQxKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gIH0pLmJvdW5kYXJpZXM7XG5cbiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gdHJ1ZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGlubmVyKGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7XG5cbiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLSAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG52YXIgbW9kaWZpZXJzID0ge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnRcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0bGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgaGVpZ2h0LlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gTW9yZSBvbiB0aGlzIFtyZWFkaW5nIHRoaXMgaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEFuIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIgdGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgaGFzIGFsd2F5cyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLCBjYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNob3RoZXJzXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXhwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gYXNzdXJlIGl0IHRvIHBvaW50IHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcywgeW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXJcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVjdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpLlxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLFxuICAgICAqIHRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBrZWVwVG9nZXRoZXIgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxuICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBpbm5lcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDcwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9ZmFsc2UgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaW5uZXJcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM2QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdSBvd24gdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcHBseVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTkwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogOTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXBwbHlTdHlsZSxcbiAgICAvKiogQHByb3Age0Z1bmN0aW9ufSAqL1xuICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMTAuMCwgdGhlIHByb3BlcnR5IG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNkIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkXG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9ucyB1c2VkIGJ5IFBvcHBlci5qc1xuICogdGhpcyBvYmplY3QgZ2V0IHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXIuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciwgaXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LCBpdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50cy5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYXMgM3JkIGFyZ3VtZW50IGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhpcyBvYmplY3QsIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIERlZmF1bHRzJDEgPSB7XG4gIC8qKlxuICAgKiBQb3BwZXIncyBwbGFjZW1lbnRcbiAgICogQHByb3Age1BvcHBlci5wbGFjZW1lbnRzfSBwbGFjZW1lbnQ9J2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQsIHRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qc1xuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5qcXVlcnkgPyByZWZlcmVuY2VbMF0gOiByZWZlcmVuY2U7XG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XG4gICAgfSlcbiAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG5cblxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlIGFuIHVwZGF0ZSwgaXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZVxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB1c2VmdWwgd2hlbiB3cml0aW5nIGN1c3RvbSBtb2RpZmllcnMuXG4gICAgICogU3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDEuNywgdGhpcyBtZXRob2QgaXMgYXZhaWxhYmxlIG9ubHkgaWYgeW91XG4gICAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXG4gICAgICpcbiAgICAgKiAqKkRFUFJFQ0FUSU9OKio6IFRoaXMgd2F5IHRvIGFjY2VzcyBQb3BwZXJVdGlscyBpcyBkZXByZWNhdGVkXG4gICAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICAgKiBEdWUgdG8gdGhlIGhpZ2ggaW5zdGFiaWxpdHkgb2YgdGhlIG1ldGhvZHMgY29udGFpbmVkIGluIFV0aWxzLCB3ZSBjYW4ndFxuICAgICAqIGd1YXJhbnRlZSB0aGVtIHRvIGZvbGxvdyBzZW12ZXIuIFVzZSB0aGVtIGF0IHlvdXIgb3duIHJpc2shXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxuICAgICAqIEBtZW1iZXIgVXRpbHNcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cbiAgfV0pO1xuICByZXR1cm4gUG9wcGVyO1xufSgpO1xuXG4vKipcbiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qc1xuICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+XG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXG4gKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS5cbiAqXG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTtcbiAqIGBgYFxuICpcbiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuUG9wcGVyLlV0aWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKS5Qb3BwZXJVdGlscztcblBvcHBlci5wbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblBvcHBlci5EZWZhdWx0cyA9IERlZmF1bHRzJDE7XG5cbi8qKlxuKiBSZXR1cm5zIHRoZSBkaXN0YW5jZSB0YWtpbmcgaW50byBhY2NvdW50IHRoZSBkZWZhdWx0IGRpc3RhbmNlIGR1ZSB0b1xuKiB0aGUgdHJhbnNmb3JtOiB0cmFuc2xhdGUgc2V0dGluZyBpbiBDU1NcbiogQHBhcmFtIHtOdW1iZXJ9IGRpc3RhbmNlXG4qIEByZXR1cm4ge1N0cmluZ31cbiovXG5mdW5jdGlvbiBnZXRPZmZzZXREaXN0YW5jZUluUHgoZGlzdGFuY2UpIHtcbiAgcmV0dXJuIC0oZGlzdGFuY2UgLSBEZWZhdWx0cy5kaXN0YW5jZSkgKyAncHgnO1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2skMSA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MkMSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG5cblxuXG5cblxudmFyIF9leHRlbmRzJDEgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4qIENyZWF0ZXMgYSBuZXcgcG9wcGVyIGluc3RhbmNlXG4qIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4qIEByZXR1cm4ge09iamVjdH0gLSB0aGUgcG9wcGVyIGluc3RhbmNlXG4qL1xuZnVuY3Rpb24gY3JlYXRlUG9wcGVySW5zdGFuY2UoZGF0YSkge1xuICB2YXIgZWwgPSBkYXRhLmVsLFxuICAgICAgcG9wcGVyID0gZGF0YS5wb3BwZXIsXG4gICAgICBfZGF0YSRzZXR0aW5ncyA9IGRhdGEuc2V0dGluZ3MsXG4gICAgICBwb3NpdGlvbiA9IF9kYXRhJHNldHRpbmdzLnBvc2l0aW9uLFxuICAgICAgcG9wcGVyT3B0aW9ucyA9IF9kYXRhJHNldHRpbmdzLnBvcHBlck9wdGlvbnMsXG4gICAgICBvZmZzZXQgPSBfZGF0YSRzZXR0aW5ncy5vZmZzZXQsXG4gICAgICBkaXN0YW5jZSA9IF9kYXRhJHNldHRpbmdzLmRpc3RhbmNlLFxuICAgICAgZmxpcER1cmF0aW9uID0gX2RhdGEkc2V0dGluZ3MuZmxpcER1cmF0aW9uO1xuXG4gIHZhciBfZ2V0SW5uZXJFbGVtZW50cyA9IGdldElubmVyRWxlbWVudHMocG9wcGVyKSxcbiAgICAgIHRvb2x0aXAgPSBfZ2V0SW5uZXJFbGVtZW50cy50b29sdGlwO1xuXG4gIHZhciBjb25maWcgPSBfZXh0ZW5kcyQxKHtcbiAgICBwbGFjZW1lbnQ6IHBvc2l0aW9uXG4gIH0sIHBvcHBlck9wdGlvbnMgfHwge30sIHtcbiAgICBtb2RpZmllcnM6IF9leHRlbmRzJDEoe30sIHBvcHBlck9wdGlvbnMgPyBwb3BwZXJPcHRpb25zLm1vZGlmaWVycyA6IHt9LCB7XG4gICAgICBmbGlwOiBfZXh0ZW5kcyQxKHtcbiAgICAgICAgcGFkZGluZzogZGlzdGFuY2UgKyA1IC8qIDVweCBmcm9tIHZpZXdwb3J0IGJvdW5kYXJ5ICovXG4gICAgICB9LCBwb3BwZXJPcHRpb25zICYmIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzID8gcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMuZmxpcCA6IHt9KSxcbiAgICAgIG9mZnNldDogX2V4dGVuZHMkMSh7XG4gICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgICB9LCBwb3BwZXJPcHRpb25zICYmIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzID8gcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMub2Zmc2V0IDoge30pXG4gICAgfSksXG4gICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKCkge1xuICAgICAgdmFyIHN0eWxlcyA9IHRvb2x0aXAuc3R5bGU7XG4gICAgICBzdHlsZXMudG9wID0gJyc7XG4gICAgICBzdHlsZXMuYm90dG9tID0gJyc7XG4gICAgICBzdHlsZXMubGVmdCA9ICcnO1xuICAgICAgc3R5bGVzLnJpZ2h0ID0gJyc7XG4gICAgICBzdHlsZXNbZ2V0Q29yZVBsYWNlbWVudChwb3BwZXIuZ2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcpKV0gPSBnZXRPZmZzZXREaXN0YW5jZUluUHgoZGlzdGFuY2UpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gVXBkYXRlIHRoZSBwb3BwZXIncyBwb3NpdGlvbiB3aGVuZXZlciBpdHMgY29udGVudCBjaGFuZ2VzXG4gIC8vIE5vdCBzdXBwb3J0ZWQgaW4gSUUxMCB1bmxlc3MgcG9seWZpbGxlZFxuICBpZiAod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICB2YXIgc3R5bGVzID0gcG9wcGVyLnN0eWxlO1xuXG4gICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgc3R5bGVzW3ByZWZpeCgndHJhbnNpdGlvbkR1cmF0aW9uJyldID0gJzBtcyc7XG4gICAgICBkYXRhLnBvcHBlckluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBzdHlsZXNbcHJlZml4KCd0cmFuc2l0aW9uRHVyYXRpb24nKV0gPSBmbGlwRHVyYXRpb24gKyAnbXMnO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBvYnNlcnZlci5vYnNlcnZlKHBvcHBlciwge1xuICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgICB9KTtcblxuICAgIGRhdGEuX211dGF0aW9uT2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQb3BwZXIoZWwsIHBvcHBlciwgY29uZmlnKTtcbn1cblxuLyoqXG4qIEFwcGVuZHMgdGhlIHBvcHBlciBhbmQgY3JlYXRlcyBhIHBvcHBlciBpbnN0YW5jZSBpZiBvbmUgZG9lcyBub3QgZXhpc3RcbiogQWxzbyB1cGRhdGVzIGl0cyBwb3NpdGlvbiBpZiBuZWVkIGJlIGFuZCBlbmFibGVzIGV2ZW50IGxpc3RlbmVyc1xuKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtICB0aGUgZWxlbWVudC9wb3BwZXIgcmVmZXJlbmNlIGRhdGFcbiovXG5mdW5jdGlvbiBtb3VudFBvcHBlcihkYXRhKSB7XG4gIHZhciBlbCA9IGRhdGEuZWwsXG4gICAgICBwb3BwZXIgPSBkYXRhLnBvcHBlcixcbiAgICAgIF9kYXRhJHNldHRpbmdzID0gZGF0YS5zZXR0aW5ncyxcbiAgICAgIGFwcGVuZFRvID0gX2RhdGEkc2V0dGluZ3MuYXBwZW5kVG8sXG4gICAgICBmb2xsb3dDdXJzb3IgPSBfZGF0YSRzZXR0aW5ncy5mb2xsb3dDdXJzb3I7XG5cbiAgLy8gQWxyZWFkeSBvbiB0aGUgRE9NXG5cbiAgaWYgKGFwcGVuZFRvLmNvbnRhaW5zKHBvcHBlcikpIHJldHVybjtcblxuICBhcHBlbmRUby5hcHBlbmRDaGlsZChwb3BwZXIpO1xuXG4gIGlmICghZGF0YS5wb3BwZXJJbnN0YW5jZSkge1xuICAgIGRhdGEucG9wcGVySW5zdGFuY2UgPSBjcmVhdGVQb3BwZXJJbnN0YW5jZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhLnBvcHBlckluc3RhbmNlLnVwZGF0ZSgpO1xuICAgIGlmICghZm9sbG93Q3Vyc29yIHx8IEJyb3dzZXIudG91Y2gpIHtcbiAgICAgIGRhdGEucG9wcGVySW5zdGFuY2UuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH1cblxuICAvLyBTaW5jZSB0b3VjaCBpcyBkZXRlcm1pbmVkIGR5bmFtaWNhbGx5LCBmb2xsb3dDdXJzb3IgaXMgc2V0IG9uIG1vdW50XG4gIGlmIChmb2xsb3dDdXJzb3IgJiYgIUJyb3dzZXIudG91Y2gpIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmb2xsb3dDdXJzb3JIYW5kbGVyKTtcbiAgICBkYXRhLnBvcHBlckluc3RhbmNlLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuICB9XG59XG5cbi8qKlxuKiBVcGRhdGVzIGEgcG9wcGVyJ3MgcG9zaXRpb24gb24gZWFjaCBhbmltYXRpb24gZnJhbWUgdG8gbWFrZSBpdCBzdGljayB0byBhIG1vdmluZyBlbGVtZW50XG4qIEBwYXJhbSB7T2JqZWN0fSByZWZEYXRhXG4qL1xuZnVuY3Rpb24gbWFrZVN0aWNreShyZWZEYXRhKSB7XG4gIHZhciBwb3BwZXIgPSByZWZEYXRhLnBvcHBlcixcbiAgICAgIHBvcHBlckluc3RhbmNlID0gcmVmRGF0YS5wb3BwZXJJbnN0YW5jZSxcbiAgICAgIHN0aWNreUR1cmF0aW9uID0gcmVmRGF0YS5zZXR0aW5ncy5zdGlja3lEdXJhdGlvbjtcblxuXG4gIHZhciBhcHBseVRyYW5zaXRpb25EdXJhdGlvbiA9IGZ1bmN0aW9uIGFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uKCkge1xuICAgIHJldHVybiBwb3BwZXIuc3R5bGVbcHJlZml4KCd0cmFuc2l0aW9uRHVyYXRpb24nKV0gPSBzdGlja3lEdXJhdGlvbiArICdtcyc7XG4gIH07XG5cbiAgdmFyIHJlbW92ZVRyYW5zaXRpb25EdXJhdGlvbiA9IGZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25EdXJhdGlvbigpIHtcbiAgICByZXR1cm4gcG9wcGVyLnN0eWxlW3ByZWZpeCgndHJhbnNpdGlvbkR1cmF0aW9uJyldID0gJyc7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgcG9wcGVySW5zdGFuY2UgJiYgcG9wcGVySW5zdGFuY2Uuc2NoZWR1bGVVcGRhdGUoKTtcblxuICAgIGFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uKCk7XG5cbiAgICBpc1Zpc2libGUocG9wcGVyKSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlUG9zaXRpb24pIDogcmVtb3ZlVHJhbnNpdGlvbkR1cmF0aW9uKCk7XG4gIH07XG5cbiAgLy8gV2FpdCB1bnRpbCBQb3BwZXIncyBwb3NpdGlvbiBoYXMgYmVlbiB1cGRhdGVkIGluaXRpYWxseVxuICBkZWZlcih1cGRhdGVQb3NpdGlvbik7XG59XG5cbi8qKlxuKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBzZXR0aW5ncyB0byBvdmVycmlkZSBnbG9iYWwgc2V0dGluZ3NcbiogQHBhcmFtIHtFbGVtZW50fSBlbCAtIHRoZSB0b29sdGlwcGVkIGVsZW1lbnRcbiogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlU2V0dGluZ3NcbiogQHJldHVybiB7T2JqZWN0fSAtIGluZGl2aWR1YWwgc2V0dGluZ3NcbiovXG5mdW5jdGlvbiBnZXRJbmRpdmlkdWFsU2V0dGluZ3MoZWwsIGluc3RhbmNlU2V0dGluZ3MpIHtcbiAgdmFyIHNldHRpbmdzID0gRGVmYXVsdHNLZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICB2YXIgdmFsID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLScgKyBrZXkudG9Mb3dlckNhc2UoKSkgfHwgaW5zdGFuY2VTZXR0aW5nc1trZXldO1xuXG4gICAgLy8gQ29udmVydCBzdHJpbmdzIHRvIGJvb2xlYW5zXG4gICAgaWYgKHZhbCA9PT0gJ2ZhbHNlJykgdmFsID0gZmFsc2U7XG4gICAgaWYgKHZhbCA9PT0gJ3RydWUnKSB2YWwgPSB0cnVlO1xuXG4gICAgLy8gQ29udmVydCBudW1iZXIgc3RyaW5ncyB0byB0cnVlIG51bWJlcnNcbiAgICBpZiAoaXNGaW5pdGUodmFsKSAmJiAhaXNOYU4ocGFyc2VGbG9hdCh2YWwpKSkge1xuICAgICAgdmFsID0gcGFyc2VGbG9hdCh2YWwpO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnQgYXJyYXkgc3RyaW5ncyB0byBhY3R1YWwgYXJyYXlzXG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnICYmIHZhbC50cmltKCkuY2hhckF0KDApID09PSAnWycpIHtcbiAgICAgIHZhbCA9IEpTT04ucGFyc2UodmFsKTtcbiAgICB9XG5cbiAgICBhY2Nba2V5XSA9IHZhbDtcblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gX2V4dGVuZHMkMSh7fSwgaW5zdGFuY2VTZXR0aW5ncywgc2V0dGluZ3MpO1xufVxuXG4vKipcbiogQ3JlYXRlcyBhIHBvcHBlciBlbGVtZW50IHRoZW4gcmV0dXJucyBpdFxuKiBAcGFyYW0ge051bWJlcn0gaWQgLSB0aGUgcG9wcGVyIGlkXG4qIEBwYXJhbSB7U3RyaW5nfSB0aXRsZSAtIHRoZSB0b29sdGlwJ3MgYHRpdGxlYCBhdHRyaWJ1dGVcbiogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzIC0gaW5kaXZpZHVhbCBzZXR0aW5nc1xuKiBAcmV0dXJuIHtFbGVtZW50fSAtIHRoZSBwb3BwZXIgZWxlbWVudFxuKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvcHBlckVsZW1lbnQoaWQsIHRpdGxlLCBzZXR0aW5ncykge1xuICB2YXIgcG9zaXRpb24gPSBzZXR0aW5ncy5wb3NpdGlvbixcbiAgICAgIGRpc3RhbmNlID0gc2V0dGluZ3MuZGlzdGFuY2UsXG4gICAgICBhcnJvdyA9IHNldHRpbmdzLmFycm93LFxuICAgICAgYW5pbWF0ZUZpbGwgPSBzZXR0aW5ncy5hbmltYXRlRmlsbCxcbiAgICAgIGluZXJ0aWEgPSBzZXR0aW5ncy5pbmVydGlhLFxuICAgICAgYW5pbWF0aW9uID0gc2V0dGluZ3MuYW5pbWF0aW9uLFxuICAgICAgYXJyb3dTaXplID0gc2V0dGluZ3MuYXJyb3dTaXplLFxuICAgICAgc2l6ZSA9IHNldHRpbmdzLnNpemUsXG4gICAgICB0aGVtZSA9IHNldHRpbmdzLnRoZW1lLFxuICAgICAgaHRtbCA9IHNldHRpbmdzLmh0bWwsXG4gICAgICB6SW5kZXggPSBzZXR0aW5ncy56SW5kZXgsXG4gICAgICBpbnRlcmFjdGl2ZSA9IHNldHRpbmdzLmludGVyYWN0aXZlO1xuXG5cbiAgdmFyIHBvcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwb3BwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICd0aXBweS1wb3BwZXInKTtcbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgncm9sZScsICd0b29sdGlwJyk7XG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgnaWQnLCAndGlwcHktdG9vbHRpcC0nICsgaWQpO1xuICBwb3BwZXIuc3R5bGUuekluZGV4ID0gekluZGV4O1xuXG4gIHZhciB0b29sdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdjbGFzcycsICd0aXBweS10b29sdGlwIHRpcHB5LXRvb2x0aXAtLScgKyBzaXplICsgJyBsZWF2ZScpO1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRpb24nLCBhbmltYXRpb24pO1xuXG4gIHRoZW1lLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgIHRvb2x0aXAuY2xhc3NMaXN0LmFkZCh0ICsgJy10aGVtZScpO1xuICB9KTtcblxuICBpZiAoYXJyb3cpIHtcbiAgICAvLyBBZGQgYW4gYXJyb3dcbiAgICB2YXIgX2Fycm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgX2Fycm93LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnYXJyb3ctJyArIGFycm93U2l6ZSk7XG4gICAgX2Fycm93LnNldEF0dHJpYnV0ZSgneC1hcnJvdycsICcnKTtcbiAgICB0b29sdGlwLmFwcGVuZENoaWxkKF9hcnJvdyk7XG4gIH1cblxuICBpZiAoYW5pbWF0ZUZpbGwpIHtcbiAgICAvLyBDcmVhdGUgYW5pbWF0ZUZpbGwgY2lyY2xlIGVsZW1lbnQgZm9yIGFuaW1hdGlvblxuICAgIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGVmaWxsJywgJycpO1xuICAgIHZhciBjaXJjbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjaXJjbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdsZWF2ZScpO1xuICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoJ3gtY2lyY2xlJywgJycpO1xuICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQoY2lyY2xlKTtcbiAgfVxuXG4gIGlmIChpbmVydGlhKSB7XG4gICAgLy8gQ2hhbmdlIHRyYW5zaXRpb24gdGltaW5nIGZ1bmN0aW9uIGN1YmljIGJlemllclxuICAgIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWluZXJ0aWEnLCAnJyk7XG4gIH1cblxuICBpZiAoaW50ZXJhY3RpdmUpIHtcbiAgICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1pbnRlcmFjdGl2ZScsICcnKTtcbiAgfVxuXG4gIC8vIFRvb2x0aXAgY29udGVudCAodGV4dCBvciBIVE1MKVxuICB2YXIgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb250ZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAndGlwcHktdG9vbHRpcC1jb250ZW50Jyk7XG5cbiAgaWYgKGh0bWwpIHtcbiAgICB2YXIgdGVtcGxhdGVJZCA9IHZvaWQgMDtcblxuICAgIGlmIChodG1sIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgY29udGVudC5hcHBlbmRDaGlsZChodG1sKTtcbiAgICAgIHRlbXBsYXRlSWQgPSAnIycgKyBodG1sLmlkIHx8ICd0aXBweS1odG1sLXRlbXBsYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudC5pbm5lckhUTUwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChodG1sLnJlcGxhY2UoJyMnLCAnJykpLmlubmVySFRNTDtcbiAgICAgIHRlbXBsYXRlSWQgPSBodG1sO1xuICAgIH1cblxuICAgIHBvcHBlci5jbGFzc0xpc3QuYWRkKCdodG1sLXRlbXBsYXRlJyk7XG4gICAgaW50ZXJhY3RpdmUgJiYgcG9wcGVyLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcbiAgICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS10ZW1wbGF0ZS1pZCcsIHRlbXBsYXRlSWQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnRlbnQuaW5uZXJIVE1MID0gdGl0bGU7XG4gIH1cblxuICAvLyBJbml0IGRpc3RhbmNlLiBGdXJ0aGVyIHVwZGF0ZXMgYXJlIG1hZGUgaW4gdGhlIHBvcHBlciBpbnN0YW5jZSdzIGBvblVwZGF0ZSgpYCBtZXRob2RcbiAgdG9vbHRpcC5zdHlsZVtnZXRDb3JlUGxhY2VtZW50KHBvc2l0aW9uKV0gPSBnZXRPZmZzZXREaXN0YW5jZUluUHgoZGlzdGFuY2UpO1xuXG4gIHRvb2x0aXAuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gIHBvcHBlci5hcHBlbmRDaGlsZCh0b29sdGlwKTtcblxuICByZXR1cm4gcG9wcGVyO1xufVxuXG4vKipcbiogQ3JlYXRlcyBhIHRyaWdnZXJcbiogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gdGhlIGN1c3RvbSBldmVudCBzcGVjaWZpZWQgaW4gdGhlIGB0cmlnZ2VyYCBzZXR0aW5nXG4qIEBwYXJhbSB7RWxlbWVudH0gZWwgLSB0b29sdGlwcGVkIGVsZW1lbnRcbiogQHBhcmFtIHtPYmplY3R9IGhhbmRsZXJzIC0gdGhlIGhhbmRsZXJzIGZvciBlYWNoIGxpc3RlbmVyXG4qIEBwYXJhbSB7Qm9vbGVhbn0gdG91Y2hIb2xkXG4qIEByZXR1cm4ge0FycmF5fSAtIGFycmF5IG9mIGxpc3RlbmVyIG9iamVjdHNcbiovXG5mdW5jdGlvbiBjcmVhdGVUcmlnZ2VyKGV2ZW50LCBlbCwgaGFuZGxlcnMsIHRvdWNoSG9sZCkge1xuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgaWYgKGV2ZW50ID09PSAnbWFudWFsJykgcmV0dXJuIGxpc3RlbmVycztcblxuICAvLyBFbnRlclxuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVycy5oYW5kbGVUcmlnZ2VyKTtcbiAgbGlzdGVuZXJzLnB1c2goe1xuICAgIGV2ZW50OiBldmVudCxcbiAgICBoYW5kbGVyOiBoYW5kbGVycy5oYW5kbGVUcmlnZ2VyXG4gIH0pO1xuXG4gIC8vIExlYXZlXG4gIGlmIChldmVudCA9PT0gJ21vdXNlZW50ZXInKSB7XG4gICAgaWYgKEJyb3dzZXIuU1VQUE9SVFNfVE9VQ0ggJiYgdG91Y2hIb2xkKSB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlcnMuaGFuZGxlVHJpZ2dlcik7XG4gICAgICBsaXN0ZW5lcnMucHVzaCh7XG4gICAgICAgIGV2ZW50OiAndG91Y2hzdGFydCcsXG4gICAgICAgIGhhbmRsZXI6IGhhbmRsZXJzLmhhbmRsZVRyaWdnZXJcbiAgICAgIH0pO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBoYW5kbGVycy5oYW5kbGVNb3VzZWxlYXZlKTtcbiAgICAgIGxpc3RlbmVycy5wdXNoKHtcbiAgICAgICAgZXZlbnQ6ICd0b3VjaGVuZCcsXG4gICAgICAgIGhhbmRsZXI6IGhhbmRsZXJzLmhhbmRsZU1vdXNlbGVhdmVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBoYW5kbGVycy5oYW5kbGVNb3VzZWxlYXZlKTtcbiAgICBsaXN0ZW5lcnMucHVzaCh7XG4gICAgICBldmVudDogJ21vdXNlbGVhdmUnLFxuICAgICAgaGFuZGxlcjogaGFuZGxlcnMuaGFuZGxlTW91c2VsZWF2ZVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGV2ZW50ID09PSAnZm9jdXMnKSB7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGhhbmRsZXJzLmhhbmRsZUJsdXIpO1xuICAgIGxpc3RlbmVycy5wdXNoKHtcbiAgICAgIGV2ZW50OiAnYmx1cicsXG4gICAgICBoYW5kbGVyOiBoYW5kbGVycy5oYW5kbGVCbHVyXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbGlzdGVuZXJzO1xufVxuXG4vKipcbiogRGV0ZXJtaW5lcyBpZiB0aGUgbW91c2UncyBjdXJzb3IgaXMgb3V0c2lkZSB0aGUgaW50ZXJhY3RpdmUgYm9yZGVyXG4qIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXJcbiogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4qIEByZXR1cm4ge0Jvb2xlYW59XG4qL1xuZnVuY3Rpb24gY3Vyc29ySXNPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIoZXZlbnQsIHBvcHBlciwgc2V0dGluZ3MpIHtcbiAgaWYgKCFwb3BwZXIuZ2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcpKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeCA9IGV2ZW50LmNsaWVudFgsXG4gICAgICB5ID0gZXZlbnQuY2xpZW50WTtcbiAgdmFyIGludGVyYWN0aXZlQm9yZGVyID0gc2V0dGluZ3MuaW50ZXJhY3RpdmVCb3JkZXIsXG4gICAgICBkaXN0YW5jZSA9IHNldHRpbmdzLmRpc3RhbmNlO1xuXG5cbiAgdmFyIHJlY3QgPSBwb3BwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBjb3JlUG9zaXRpb24gPSBnZXRDb3JlUGxhY2VtZW50KHBvcHBlci5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JykpO1xuICB2YXIgYm9yZGVyV2l0aERpc3RhbmNlID0gaW50ZXJhY3RpdmVCb3JkZXIgKyBkaXN0YW5jZTtcblxuICB2YXIgZXhjZWVkcyA9IHtcbiAgICB0b3A6IHJlY3QudG9wIC0geSA+IGludGVyYWN0aXZlQm9yZGVyLFxuICAgIGJvdHRvbTogeSAtIHJlY3QuYm90dG9tID4gaW50ZXJhY3RpdmVCb3JkZXIsXG4gICAgbGVmdDogcmVjdC5sZWZ0IC0geCA+IGludGVyYWN0aXZlQm9yZGVyLFxuICAgIHJpZ2h0OiB4IC0gcmVjdC5yaWdodCA+IGludGVyYWN0aXZlQm9yZGVyXG4gIH07XG5cbiAgc3dpdGNoIChjb3JlUG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgZXhjZWVkcy50b3AgPSByZWN0LnRvcCAtIHkgPiBib3JkZXJXaXRoRGlzdGFuY2U7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgZXhjZWVkcy5ib3R0b20gPSB5IC0gcmVjdC5ib3R0b20gPiBib3JkZXJXaXRoRGlzdGFuY2U7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIGV4Y2VlZHMubGVmdCA9IHJlY3QubGVmdCAtIHggPiBib3JkZXJXaXRoRGlzdGFuY2U7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICBleGNlZWRzLnJpZ2h0ID0geCAtIHJlY3QucmlnaHQgPiBib3JkZXJXaXRoRGlzdGFuY2U7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBleGNlZWRzLnRvcCB8fCBleGNlZWRzLmJvdHRvbSB8fCBleGNlZWRzLmxlZnQgfHwgZXhjZWVkcy5yaWdodDtcbn1cblxuLyoqXG4qIFJldHVybnMgcmVsZXZhbnQgbGlzdGVuZXIgY2FsbGJhY2tzIGZvciBlYWNoIHJlZlxuKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4qIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyXG4qIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuKiBAcmV0dXJuIHtPYmplY3R9IC0gcmVsZXZhbnQgbGlzdGVuZXIgaGFuZGxlcnNcbiovXG5mdW5jdGlvbiBnZXRFdmVudExpc3RlbmVySGFuZGxlcnMoZWwsIHBvcHBlciwgc2V0dGluZ3MpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgcG9zaXRpb24gPSBzZXR0aW5ncy5wb3NpdGlvbixcbiAgICAgIGRlbGF5ID0gc2V0dGluZ3MuZGVsYXksXG4gICAgICBkdXJhdGlvbiA9IHNldHRpbmdzLmR1cmF0aW9uLFxuICAgICAgaW50ZXJhY3RpdmUgPSBzZXR0aW5ncy5pbnRlcmFjdGl2ZSxcbiAgICAgIGludGVyYWN0aXZlQm9yZGVyID0gc2V0dGluZ3MuaW50ZXJhY3RpdmVCb3JkZXIsXG4gICAgICBkaXN0YW5jZSA9IHNldHRpbmdzLmRpc3RhbmNlLFxuICAgICAgaGlkZU9uQ2xpY2sgPSBzZXR0aW5ncy5oaWRlT25DbGljayxcbiAgICAgIHRyaWdnZXIgPSBzZXR0aW5ncy50cmlnZ2VyLFxuICAgICAgdG91Y2hIb2xkID0gc2V0dGluZ3MudG91Y2hIb2xkLFxuICAgICAgdG91Y2hXYWl0ID0gc2V0dGluZ3MudG91Y2hXYWl0O1xuXG5cbiAgdmFyIHNob3dEZWxheSA9IHZvaWQgMCxcbiAgICAgIGhpZGVEZWxheSA9IHZvaWQgMDtcblxuICB2YXIgY2xlYXJUaW1lb3V0cyA9IGZ1bmN0aW9uIGNsZWFyVGltZW91dHMoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHNob3dEZWxheSk7XG4gICAgY2xlYXJUaW1lb3V0KGhpZGVEZWxheSk7XG4gIH07XG5cbiAgdmFyIF9zaG93ID0gZnVuY3Rpb24gX3Nob3coKSB7XG4gICAgY2xlYXJUaW1lb3V0cygpO1xuXG4gICAgLy8gTm90IGhpZGRlbi4gRm9yIGNsaWNraW5nIHdoZW4gaXQgYWxzbyBoYXMgYSBgZm9jdXNgIGV2ZW50IGxpc3RlbmVyXG4gICAgaWYgKGlzVmlzaWJsZShwb3BwZXIpKSByZXR1cm47XG5cbiAgICB2YXIgX2RlbGF5ID0gQXJyYXkuaXNBcnJheShkZWxheSkgPyBkZWxheVswXSA6IGRlbGF5O1xuXG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICBzaG93RGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnNob3cocG9wcGVyKTtcbiAgICAgIH0sIF9kZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLnNob3cocG9wcGVyKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNob3cgPSBmdW5jdGlvbiBzaG93KGV2ZW50KSB7XG4gICAgcmV0dXJuIF90aGlzLmNhbGxiYWNrcy53YWl0ID8gX3RoaXMuY2FsbGJhY2tzLndhaXQuY2FsbChwb3BwZXIsIF9zaG93LCBldmVudCkgOiBfc2hvdygpO1xuICB9O1xuXG4gIHZhciBoaWRlID0gZnVuY3Rpb24gaGlkZSgpIHtcbiAgICBjbGVhclRpbWVvdXRzKCk7XG5cbiAgICB2YXIgX2RlbGF5ID0gQXJyYXkuaXNBcnJheShkZWxheSkgPyBkZWxheVsxXSA6IGRlbGF5O1xuXG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICBoaWRlRGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhpZGUocG9wcGVyKTtcbiAgICAgIH0sIF9kZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLmhpZGUocG9wcGVyKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVRyaWdnZXIgPSBmdW5jdGlvbiBoYW5kbGVUcmlnZ2VyKGV2ZW50KSB7XG4gICAgdmFyIG1vdXNlZW50ZXJUb3VjaCA9IGV2ZW50LnR5cGUgPT09ICdtb3VzZWVudGVyJyAmJiBCcm93c2VyLlNVUFBPUlRTX1RPVUNIICYmIEJyb3dzZXIudG91Y2g7XG5cbiAgICBpZiAobW91c2VlbnRlclRvdWNoICYmIHRvdWNoSG9sZCkgcmV0dXJuO1xuXG4gICAgLy8gVG9nZ2xlIHNob3cvaGlkZSB3aGVuIGNsaWNraW5nIGNsaWNrLXRyaWdnZXJlZCB0b29sdGlwc1xuICAgIHZhciBpc0NsaWNrID0gZXZlbnQudHlwZSA9PT0gJ2NsaWNrJztcbiAgICB2YXIgaXNOb3RQZXJzaXN0ZW50ID0gaGlkZU9uQ2xpY2sgIT09ICdwZXJzaXN0ZW50JztcblxuICAgIGlzQ2xpY2sgJiYgaXNWaXNpYmxlKHBvcHBlcikgJiYgaXNOb3RQZXJzaXN0ZW50ID8gaGlkZSgpIDogc2hvdyhldmVudCk7XG5cbiAgICBpZiAobW91c2VlbnRlclRvdWNoICYmIEJyb3dzZXIuaU9TKCkgJiYgZWwuY2xpY2spIHtcbiAgICAgIGVsLmNsaWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVNb3VzZWxlYXZlID0gZnVuY3Rpb24gaGFuZGxlTW91c2VsZWF2ZShldmVudCkge1xuXG4gICAgLy8gRG9uJ3QgZmlyZSAnbW91c2VsZWF2ZScsIHVzZSB0aGUgJ3RvdWNoZW5kJ1xuICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2VsZWF2ZScgJiYgQnJvd3Nlci5TVVBQT1JUU19UT1VDSCAmJiBCcm93c2VyLnRvdWNoICYmIHRvdWNoSG9sZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnRlcmFjdGl2ZSkge1xuICAgICAgLy8gVGVtcG9yYXJpbHkgaGFuZGxlIG1vdXNlbW92ZSB0byBjaGVjayBpZiB0aGUgbW91c2UgbGVmdCBzb21ld2hlcmVcbiAgICAgIC8vIG90aGVyIHRoYW4gaXRzIHBvcHBlclxuICAgICAgdmFyIGhhbmRsZU1vdXNlbW92ZSA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlbW92ZShldmVudCkge1xuXG4gICAgICAgIHZhciB0cmlnZ2VySGlkZSA9IGZ1bmN0aW9uIHRyaWdnZXJIaWRlKCkge1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGhpZGUpO1xuICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZU1vdXNlbW92ZSk7XG4gICAgICAgICAgaGlkZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjbG9zZXN0VG9vbHRpcHBlZEVsID0gY2xvc2VzdChldmVudC50YXJnZXQsIFNlbGVjdG9ycy5UT09MVElQUEVEX0VMKTtcblxuICAgICAgICB2YXIgaXNPdmVyUG9wcGVyID0gY2xvc2VzdChldmVudC50YXJnZXQsIFNlbGVjdG9ycy5QT1BQRVIpID09PSBwb3BwZXI7XG4gICAgICAgIHZhciBpc092ZXJFbCA9IGNsb3Nlc3RUb29sdGlwcGVkRWwgPT09IGVsO1xuICAgICAgICB2YXIgaXNDbGlja1RyaWdnZXJlZCA9IHRyaWdnZXIuaW5kZXhPZignY2xpY2snKSAhPT0gLTE7XG4gICAgICAgIHZhciBpc092ZXJPdGhlclRvb2x0aXBwZWRFbCA9IGNsb3Nlc3RUb29sdGlwcGVkRWwgJiYgY2xvc2VzdFRvb2x0aXBwZWRFbCAhPT0gZWw7XG5cbiAgICAgICAgaWYgKGlzT3Zlck90aGVyVG9vbHRpcHBlZEVsKSB7XG4gICAgICAgICAgcmV0dXJuIHRyaWdnZXJIaWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNPdmVyUG9wcGVyIHx8IGlzT3ZlckVsIHx8IGlzQ2xpY2tUcmlnZ2VyZWQpIHJldHVybjtcblxuICAgICAgICBpZiAoY3Vyc29ySXNPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIoZXZlbnQsIHBvcHBlciwgc2V0dGluZ3MpKSB7XG4gICAgICAgICAgdHJpZ2dlckhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgaGlkZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3VzZW1vdmUpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgaXQncyBub3QgaW50ZXJhY3RpdmUsIGp1c3QgaGlkZSBpdFxuICAgIGhpZGUoKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgYmx1ciBvbiB0b3VjaCBkZXZpY2VzLCBpZiB0aGVyZSBpcyBubyBgcmVsYXRlZFRhcmdldGAsIGhpZGVcbiAgICAvLyBJZiB0aGUgcmVsYXRlZCB0YXJnZXQgaXMgYSBwb3BwZXIsIGlnbm9yZVxuICAgIGlmICghZXZlbnQucmVsYXRlZFRhcmdldCB8fCBCcm93c2VyLnRvdWNoKSByZXR1cm47XG4gICAgaWYgKGNsb3Nlc3QoZXZlbnQucmVsYXRlZFRhcmdldCwgU2VsZWN0b3JzLlBPUFBFUikpIHJldHVybjtcblxuICAgIGhpZGUoKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGhhbmRsZVRyaWdnZXI6IGhhbmRsZVRyaWdnZXIsXG4gICAgaGFuZGxlTW91c2VsZWF2ZTogaGFuZGxlTW91c2VsZWF2ZSxcbiAgICBoYW5kbGVCbHVyOiBoYW5kbGVCbHVyXG4gIH07XG59XG5cbi8qKlxuKiBFdmFsdWF0ZXMvbW9kaWZpZXMgdGhlIHNldHRpbmdzIG9iamVjdCBmb3IgYXBwcm9wcmlhdGUgYmVoYXZpb3JcbiogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXG4qIEByZXR1cm4ge09iamVjdH0gbW9kaWZpZWQvZXZhbHVhdGVkIHNldHRpbmdzXG4qL1xuZnVuY3Rpb24gZXZhbHVhdGVTZXR0aW5ncyhzZXR0aW5ncykge1xuICAvLyBhbmltYXRlRmlsbCBpcyBkaXNhYmxlZCBpZiBhbiBhcnJvdyBpcyB0cnVlXG4gIGlmIChzZXR0aW5ncy5hcnJvdykge1xuICAgIHNldHRpbmdzLmFuaW1hdGVGaWxsID0gZmFsc2U7XG4gIH1cblxuICAvLyByZWFzc2lnbiBhcHBlbmRUbyBpbnRvIHRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyBhcHBlbmRUb1xuICAvLyBpZiBpdCdzIHNldCBhcyBhIGZ1bmN0aW9uIGluc3RlYWQgb2YgRWxlbWVudFxuICBpZiAoc2V0dGluZ3MuYXBwZW5kVG8gJiYgdHlwZW9mIHNldHRpbmdzLmFwcGVuZFRvID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2V0dGluZ3MuYXBwZW5kVG8gPSBzZXR0aW5ncy5hcHBlbmRUbygpO1xuICB9XG5cbiAgcmV0dXJuIHNldHRpbmdzO1xufVxuXG52YXIgaWRDb3VudGVyID0gMTtcblxuLyoqXG4qIENyZWF0ZXMgdG9vbHRpcHMgZm9yIGFsbCBlbCBlbGVtZW50cyB0aGF0IG1hdGNoIHRoZSBpbnN0YW5jZSdzIHNlbGVjdG9yXG4qIEBwYXJhbSB7RWxlbWVudFtdfSBlbHNcbiogQHJldHVybiB7T2JqZWN0W119IEFycmF5IG9mIHJlZiBkYXRhIG9iamVjdHNcbiovXG5mdW5jdGlvbiBjcmVhdGVUb29sdGlwcyhlbHMpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICByZXR1cm4gZWxzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBlbCkge1xuICAgIHZhciBpZCA9IGlkQ291bnRlcjtcblxuICAgIHZhciBzZXR0aW5ncyA9IF9leHRlbmRzJDEoe30sIGV2YWx1YXRlU2V0dGluZ3MoX3RoaXMuc2V0dGluZ3MucGVyZm9ybWFuY2UgPyBfdGhpcy5zZXR0aW5ncyA6IGdldEluZGl2aWR1YWxTZXR0aW5ncyhlbCwgX3RoaXMuc2V0dGluZ3MpKSk7XG5cbiAgICBpZiAodHlwZW9mIHNldHRpbmdzLmh0bWwgPT09ICdmdW5jdGlvbicpIHNldHRpbmdzLmh0bWwgPSBzZXR0aW5ncy5odG1sKGVsKTtcblxuICAgIHZhciBodG1sID0gc2V0dGluZ3MuaHRtbCxcbiAgICAgICAgdHJpZ2dlciA9IHNldHRpbmdzLnRyaWdnZXIsXG4gICAgICAgIHRvdWNoSG9sZCA9IHNldHRpbmdzLnRvdWNoSG9sZCxcbiAgICAgICAgZHluYW1pY1RpdGxlID0gc2V0dGluZ3MuZHluYW1pY1RpdGxlO1xuXG5cbiAgICB2YXIgdGl0bGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gICAgaWYgKCF0aXRsZSAmJiAhaHRtbCkgcmV0dXJuIGFjYztcblxuICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwcGVkJywgJycpO1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsICd0aXBweS10b29sdGlwLScgKyBpZCk7XG4gICAgcmVtb3ZlVGl0bGUoZWwpO1xuXG4gICAgdmFyIHBvcHBlciA9IGNyZWF0ZVBvcHBlckVsZW1lbnQoaWQsIHRpdGxlLCBzZXR0aW5ncyk7XG4gICAgdmFyIGhhbmRsZXJzID0gZ2V0RXZlbnRMaXN0ZW5lckhhbmRsZXJzLmNhbGwoX3RoaXMsIGVsLCBwb3BwZXIsIHNldHRpbmdzKTtcblxuICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICAgIHRyaWdnZXIudHJpbSgpLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29uY2F0KGNyZWF0ZVRyaWdnZXIoZXZlbnQsIGVsLCBoYW5kbGVycywgdG91Y2hIb2xkKSk7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYSBtdXRhdGlvbiBvYnNlcnZlciB0byBvYnNlcnZlIHRoZSByZWZlcmVuY2UgZWxlbWVudCBmb3IgYHRpdGxlYFxuICAgIC8vIGF0dHJpYnV0ZSBjaGFuZ2VzLCB0aGVuIGF1dG9tYXRpY2FsbHkgdXBkYXRlIHRvb2x0aXAgY29udGVudFxuICAgIHZhciBvYnNlcnZlciA9IHZvaWQgMDtcblxuICAgIGlmIChkeW5hbWljVGl0bGUgJiYgd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIHZhciBfZ2V0SW5uZXJFbGVtZW50cyA9IGdldElubmVyRWxlbWVudHMocG9wcGVyKSxcbiAgICAgICAgICBjb250ZW50ID0gX2dldElubmVyRWxlbWVudHMuY29udGVudDtcblxuICAgICAgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aXRsZSA9IGVsLmdldEF0dHJpYnV0ZSgndGl0bGUnKTtcbiAgICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgICAgY29udGVudC5pbm5lckhUTUwgPSB0aXRsZTtcbiAgICAgICAgICByZW1vdmVUaXRsZShlbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBvYnNlcnZlci5vYnNlcnZlKGVsLCB7IGF0dHJpYnV0ZXM6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgYWNjLnB1c2goe1xuICAgICAgaWQ6IGlkLFxuICAgICAgZWw6IGVsLFxuICAgICAgcG9wcGVyOiBwb3BwZXIsXG4gICAgICBzZXR0aW5nczogc2V0dGluZ3MsXG4gICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVycyxcbiAgICAgIHRpcHB5SW5zdGFuY2U6IF90aGlzLFxuICAgICAgX211dGF0aW9uT2JzZXJ2ZXJzOiBbb2JzZXJ2ZXJdXG4gICAgfSk7XG5cbiAgICBpZENvdW50ZXIrKztcblxuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKTtcbn1cblxuLyogVXRpbGl0eSBmdW5jdGlvbnMgKi9cbi8qIENvcmUgbGlicmFyeSBmdW5jdGlvbnMgKi9cbi8qKlxuKiBAcGFyYW0ge1N0cmluZ3xFbGVtZW50fEVsZW1lbnRbXX0gc2VsZWN0b3JcbiogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzIChvcHRpb25hbCkgLSB0aGUgb2JqZWN0IG9mIHNldHRpbmdzIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGluc3RhbmNlXG4qL1xuXG52YXIgVGlwcHkgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRpcHB5KHNlbGVjdG9yKSB7XG4gICAgdmFyIHNldHRpbmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayQxKHRoaXMsIFRpcHB5KTtcblxuICAgIC8vIFVzZSBkZWZhdWx0IGJyb3dzZXIgdG9vbHRpcCBvbiB1bnN1cHBvcnRlZCBicm93c2Vyc1xuICAgIGlmICghQnJvd3Nlci5TVVBQT1JURUQpIHJldHVybjtcblxuICAgIGluaXQoKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBkZXN0cm95ZWQ6IGZhbHNlXG4gICAgfTtcblxuICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuICAgIHRoaXMuc2V0dGluZ3MgPSBfZXh0ZW5kcyQxKHt9LCBEZWZhdWx0cywgc2V0dGluZ3MpO1xuXG4gICAgaWYgKHNldHRpbmdzLnNob3cgfHwgc2V0dGluZ3Muc2hvd24gfHwgc2V0dGluZ3MuaGlkZSB8fCBzZXR0aW5ncy5oaWRkZW4pIHtcbiAgICAgIGNvbnNvbGUud2FybignQ2FsbGJhY2tzIHdpdGhvdXQgdGhlIGBvbmAgcHJlZml4IGFyZSBkZXByZWNhdGVkICh3aXRoIHRoZSBleGNlcHRpb24gb2YgYHdhaXRgKS4nICsgJyBVc2Ugb25TaG93LCBvblNob3duLCBvbkhpZGUsIGFuZCBvbkhpZGRlbiBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIHRoaXMuY2FsbGJhY2tzID0ge1xuICAgICAgd2FpdDogc2V0dGluZ3Mud2FpdCxcbiAgICAgIHNob3c6IHNldHRpbmdzLm9uU2hvdyB8fCBzZXR0aW5ncy5zaG93IHx8IG5vb3AsXG4gICAgICBzaG93bjogc2V0dGluZ3Mub25TaG93biB8fCBzZXR0aW5ncy5zaG93biB8fCBub29wLFxuICAgICAgaGlkZTogc2V0dGluZ3Mub25IaWRlIHx8IHNldHRpbmdzLmhpZGUgfHwgbm9vcCxcbiAgICAgIGhpZGRlbjogc2V0dGluZ3Mub25IaWRkZW4gfHwgc2V0dGluZ3MuaGlkZGVuIHx8IG5vb3BcbiAgICB9O1xuXG4gICAgdGhpcy5zdG9yZSA9IGNyZWF0ZVRvb2x0aXBzLmNhbGwodGhpcywgZ2V0QXJyYXlPZkVsZW1lbnRzKHNlbGVjdG9yKSk7XG4gICAgU3RvcmUucHVzaC5hcHBseShTdG9yZSwgdGhpcy5zdG9yZSk7XG4gIH1cblxuICAvKipcbiAgKiBSZXR1cm5zIHRoZSByZWZlcmVuY2UgZWxlbWVudCdzIHBvcHBlciBlbGVtZW50XG4gICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICovXG5cblxuICBjcmVhdGVDbGFzcyQxKFRpcHB5LCBbe1xuICAgIGtleTogJ2dldFBvcHBlckVsZW1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQb3BwZXJFbGVtZW50KGVsKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZmluZCh0aGlzLnN0b3JlLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHJldHVybiBkYXRhLmVsID09PSBlbDtcbiAgICAgICAgfSkucG9wcGVyO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbZ2V0UG9wcGVyRWxlbWVudF06IEVsZW1lbnQgcGFzc2VkIGFzIHRoZSBhcmd1bWVudCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgaW5zdGFuY2UnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFJldHVybnMgYSBwb3BwZXIncyByZWZlcmVuY2UgZWxlbWVudFxuICAgICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXJcbiAgICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0UmVmZXJlbmNlRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlZmVyZW5jZUVsZW1lbnQocG9wcGVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZmluZCh0aGlzLnN0b3JlLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHJldHVybiBkYXRhLnBvcHBlciA9PT0gcG9wcGVyO1xuICAgICAgICB9KS5lbDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignW2dldFJlZmVyZW5jZUVsZW1lbnRdOiBQb3BwZXIgcGFzc2VkIGFzIHRoZSBhcmd1bWVudCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgaW5zdGFuY2UnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFJldHVybnMgdGhlIHJlZmVyZW5jZSBkYXRhIG9iamVjdCBmcm9tIGVpdGhlciB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgb3IgcG9wcGVyIGVsZW1lbnRcbiAgICAqIEBwYXJhbSB7RWxlbWVudH0geCAocmVmZXJlbmNlIGVsZW1lbnQgb3IgcG9wcGVyKVxuICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldFJlZmVyZW5jZURhdGEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZWZlcmVuY2VEYXRhKHgpIHtcbiAgICAgIHJldHVybiBmaW5kKHRoaXMuc3RvcmUsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhLmVsID09PSB4IHx8IGRhdGEucG9wcGVyID09PSB4O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBTaG93cyBhIHBvcHBlclxuICAgICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXJcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBjdXN0b21EdXJhdGlvbiAob3B0aW9uYWwpXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2hvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3cocG9wcGVyLCBjdXN0b21EdXJhdGlvbikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuc3RhdGUuZGVzdHJveWVkKSByZXR1cm47XG5cbiAgICAgIHZhciBkYXRhID0gZmluZCh0aGlzLnN0b3JlLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YS5wb3BwZXIgPT09IHBvcHBlcjtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX2dldElubmVyRWxlbWVudHMgPSBnZXRJbm5lckVsZW1lbnRzKHBvcHBlciksXG4gICAgICAgICAgdG9vbHRpcCA9IF9nZXRJbm5lckVsZW1lbnRzLnRvb2x0aXAsXG4gICAgICAgICAgY2lyY2xlID0gX2dldElubmVyRWxlbWVudHMuY2lyY2xlLFxuICAgICAgICAgIGNvbnRlbnQgPSBfZ2V0SW5uZXJFbGVtZW50cy5jb250ZW50O1xuXG4gICAgICAvLyBEZXN0cm95IHBvcHBlciBpZiBpdHMgcmVmZXJlbmNlIGlzIG5vIGxvbmdlciBvbiB0aGUgRE9NIChleGNsdWRpbmcgcmVmT2JqcylcblxuXG4gICAgICBpZiAoIXRoaXMuc2VsZWN0b3IucmVmT2JqICYmICFkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGRhdGEuZWwpKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveShwb3BwZXIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FsbGJhY2tzLnNob3cuY2FsbChwb3BwZXIpO1xuXG4gICAgICB2YXIgZWwgPSBkYXRhLmVsLFxuICAgICAgICAgIF9kYXRhJHNldHRpbmdzID0gZGF0YS5zZXR0aW5ncyxcbiAgICAgICAgICBhcHBlbmRUbyA9IF9kYXRhJHNldHRpbmdzLmFwcGVuZFRvLFxuICAgICAgICAgIHN0aWNreSA9IF9kYXRhJHNldHRpbmdzLnN0aWNreSxcbiAgICAgICAgICBpbnRlcmFjdGl2ZSA9IF9kYXRhJHNldHRpbmdzLmludGVyYWN0aXZlLFxuICAgICAgICAgIGZvbGxvd0N1cnNvciA9IF9kYXRhJHNldHRpbmdzLmZvbGxvd0N1cnNvcixcbiAgICAgICAgICBmbGlwRHVyYXRpb24gPSBfZGF0YSRzZXR0aW5ncy5mbGlwRHVyYXRpb24sXG4gICAgICAgICAgZHVyYXRpb24gPSBfZGF0YSRzZXR0aW5ncy5kdXJhdGlvbjtcblxuXG4gICAgICB2YXIgX2R1cmF0aW9uID0gY3VzdG9tRHVyYXRpb24gIT09IHVuZGVmaW5lZCA/IGN1c3RvbUR1cmF0aW9uIDogQXJyYXkuaXNBcnJheShkdXJhdGlvbikgPyBkdXJhdGlvblswXSA6IGR1cmF0aW9uO1xuXG4gICAgICAvLyBQcmV2ZW50IGEgdHJhbnNpdGlvbiB3aGVuIHBvcHBlciBjaGFuZ2VzIHBvc2l0aW9uXG4gICAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihbcG9wcGVyLCB0b29sdGlwLCBjaXJjbGVdLCAwKTtcblxuICAgICAgbW91bnRQb3BwZXIoZGF0YSk7XG5cbiAgICAgIHBvcHBlci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgcG9wcGVyLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgLy8gV2FpdCBmb3IgcG9wcGVyJ3MgcG9zaXRpb24gdG8gdXBkYXRlXG4gICAgICBkZWZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNWaXNpYmxlKHBvcHBlcikpIHJldHVybjtcblxuICAgICAgICAvLyBTb21ldGltZXMgdGhlIGFycm93IHdpbGwgbm90IGJlIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uLCBmb3JjZSBhbm90aGVyIHVwZGF0ZVxuICAgICAgICBpZiAoIWZvbGxvd0N1cnNvciB8fCBCcm93c2VyLnRvdWNoKSB7XG4gICAgICAgICAgZGF0YS5wb3BwZXJJbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihbcG9wcGVyXSwgZmxpcER1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlLWFwcGx5IHRyYW5zaXRpb24gZHVyYXRpb25zXG4gICAgICAgIGFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uKFt0b29sdGlwLCBjaXJjbGVdLCBfZHVyYXRpb24pO1xuXG4gICAgICAgIC8vIE1ha2UgY29udGVudCBmYWRlIG91dCBhIGJpdCBmYXN0ZXIgdGhhbiB0aGUgdG9vbHRpcCBpZiBgYW5pbWF0ZUZpbGxgXG4gICAgICAgIGlmIChjaXJjbGUpIGNvbnRlbnQuc3R5bGUub3BhY2l0eSA9IDE7XG5cbiAgICAgICAgLy8gSW50ZXJhY3RpdmUgdG9vbHRpcHMgcmVjZWl2ZSBhIGNsYXNzIG9mICdhY3RpdmUnXG4gICAgICAgIGludGVyYWN0aXZlICYmIGVsLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBwb3BwZXIncyBwb3NpdGlvbiBvbiBldmVyeSBhbmltYXRpb24gZnJhbWVcbiAgICAgICAgc3RpY2t5ICYmIG1ha2VTdGlja3koZGF0YSk7XG5cbiAgICAgICAgLy8gUmVwYWludC9yZWZsb3cgaXMgcmVxdWlyZWQgZm9yIENTUyB0cmFuc2l0aW9uIHdoZW4gYXBwZW5kaW5nXG4gICAgICAgIHRyaWdnZXJSZWZsb3codG9vbHRpcCwgY2lyY2xlKTtcblxuICAgICAgICBtb2RpZnlDbGFzc0xpc3QoW3Rvb2x0aXAsIGNpcmNsZV0sIGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgICAgICAgbGlzdC5jb250YWlucygndGlwcHktbm90cmFuc2l0aW9uJykgJiYgbGlzdC5yZW1vdmUoJ3RpcHB5LW5vdHJhbnNpdGlvbicpO1xuICAgICAgICAgIGxpc3QucmVtb3ZlKCdsZWF2ZScpO1xuICAgICAgICAgIGxpc3QuYWRkKCdlbnRlcicpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBXYWl0IGZvciB0cmFuc2l0aW9ucyB0byBjb21wbGV0ZVxuICAgICAgICBvblRyYW5zaXRpb25FbmQoZGF0YSwgX2R1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFpc1Zpc2libGUocG9wcGVyKSB8fCBkYXRhLl9vblNob3duRmlyZWQpIHJldHVybjtcblxuICAgICAgICAgIC8vIEZvY3VzIGludGVyYWN0aXZlIHRvb2x0aXBzIG9ubHlcbiAgICAgICAgICBpbnRlcmFjdGl2ZSAmJiBwb3BwZXIuZm9jdXMoKTtcbiAgICAgICAgICAvLyBSZW1vdmUgdHJhbnNpdGlvbnMgZnJvbSB0b29sdGlwXG4gICAgICAgICAgdG9vbHRpcC5jbGFzc0xpc3QuYWRkKCd0aXBweS1ub3RyYW5zaXRpb24nKTtcbiAgICAgICAgICAvLyBQcmV2ZW50cyBzaG93bigpIGZyb20gZmlyaW5nIG1vcmUgdGhhbiBvbmNlIGZyb20gZWFybHkgdHJhbnNpdGlvbiBjYW5jZWxsYXRpb25zXG4gICAgICAgICAgZGF0YS5fb25TaG93bkZpcmVkID0gdHJ1ZTtcblxuICAgICAgICAgIF90aGlzLmNhbGxiYWNrcy5zaG93bi5jYWxsKHBvcHBlcik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBIaWRlcyBhIHBvcHBlclxuICAgICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXJcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBjdXN0b21EdXJhdGlvbiAob3B0aW9uYWwpXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaGlkZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUocG9wcGVyLCBjdXN0b21EdXJhdGlvbikge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLnN0YXRlLmRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgICB0aGlzLmNhbGxiYWNrcy5oaWRlLmNhbGwocG9wcGVyKTtcblxuICAgICAgdmFyIGRhdGEgPSBmaW5kKHRoaXMuc3RvcmUsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhLnBvcHBlciA9PT0gcG9wcGVyO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBfZ2V0SW5uZXJFbGVtZW50czIgPSBnZXRJbm5lckVsZW1lbnRzKHBvcHBlciksXG4gICAgICAgICAgdG9vbHRpcCA9IF9nZXRJbm5lckVsZW1lbnRzMi50b29sdGlwLFxuICAgICAgICAgIGNpcmNsZSA9IF9nZXRJbm5lckVsZW1lbnRzMi5jaXJjbGUsXG4gICAgICAgICAgY29udGVudCA9IF9nZXRJbm5lckVsZW1lbnRzMi5jb250ZW50O1xuXG4gICAgICB2YXIgZWwgPSBkYXRhLmVsLFxuICAgICAgICAgIF9kYXRhJHNldHRpbmdzMiA9IGRhdGEuc2V0dGluZ3MsXG4gICAgICAgICAgYXBwZW5kVG8gPSBfZGF0YSRzZXR0aW5nczIuYXBwZW5kVG8sXG4gICAgICAgICAgc3RpY2t5ID0gX2RhdGEkc2V0dGluZ3MyLnN0aWNreSxcbiAgICAgICAgICBpbnRlcmFjdGl2ZSA9IF9kYXRhJHNldHRpbmdzMi5pbnRlcmFjdGl2ZSxcbiAgICAgICAgICBmb2xsb3dDdXJzb3IgPSBfZGF0YSRzZXR0aW5nczIuZm9sbG93Q3Vyc29yLFxuICAgICAgICAgIGh0bWwgPSBfZGF0YSRzZXR0aW5nczIuaHRtbCxcbiAgICAgICAgICB0cmlnZ2VyID0gX2RhdGEkc2V0dGluZ3MyLnRyaWdnZXIsXG4gICAgICAgICAgZHVyYXRpb24gPSBfZGF0YSRzZXR0aW5nczIuZHVyYXRpb247XG5cblxuICAgICAgdmFyIF9kdXJhdGlvbiA9IGN1c3RvbUR1cmF0aW9uICE9PSB1bmRlZmluZWQgPyBjdXN0b21EdXJhdGlvbiA6IEFycmF5LmlzQXJyYXkoZHVyYXRpb24pID8gZHVyYXRpb25bMV0gOiBkdXJhdGlvbjtcblxuICAgICAgZGF0YS5fb25TaG93bkZpcmVkID0gZmFsc2U7XG4gICAgICBpbnRlcmFjdGl2ZSAmJiBlbC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcblxuICAgICAgcG9wcGVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgICAgYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24oW3Rvb2x0aXAsIGNpcmNsZSwgY2lyY2xlID8gY29udGVudCA6IG51bGxdLCBfZHVyYXRpb24pO1xuXG4gICAgICBpZiAoY2lyY2xlKSBjb250ZW50LnN0eWxlLm9wYWNpdHkgPSAwO1xuXG4gICAgICBtb2RpZnlDbGFzc0xpc3QoW3Rvb2x0aXAsIGNpcmNsZV0sIGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgICAgIGxpc3QuY29udGFpbnMoJ3RpcHB5LXRvb2x0aXAnKSAmJiBsaXN0LnJlbW92ZSgndGlwcHktbm90cmFuc2l0aW9uJyk7XG4gICAgICAgIGxpc3QucmVtb3ZlKCdlbnRlcicpO1xuICAgICAgICBsaXN0LmFkZCgnbGVhdmUnKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZS1mb2N1cyBjbGljay10cmlnZ2VyZWQgaHRtbCBlbGVtZW50c1xuICAgICAgLy8gYW5kIHRoZSB0b29sdGlwcGVkIGVsZW1lbnQgSVMgaW4gdGhlIHZpZXdwb3J0IChvdGhlcndpc2UgaXQgY2F1c2VzIHVuc2lnaHRseSBzY3JvbGxpbmdcbiAgICAgIC8vIGlmIHRoZSB0b29sdGlwIGlzIGNsb3NlZCBhbmQgdGhlIGVsZW1lbnQgaXNuJ3QgaW4gdGhlIHZpZXdwb3J0IGFueW1vcmUpXG4gICAgICBpZiAoaHRtbCAmJiB0cmlnZ2VyLmluZGV4T2YoJ2NsaWNrJykgIT09IC0xICYmIGVsZW1lbnRJc0luVmlld3BvcnQoZWwpKSB7XG4gICAgICAgIGVsLmZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdhaXQgZm9yIHRyYW5zaXRpb25zIHRvIGNvbXBsZXRlXG4gICAgICBvblRyYW5zaXRpb25FbmQoZGF0YSwgX2R1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGBpc1Zpc2libGVgIGlzIG5vdCBjb21wbGV0ZWx5IHJlbGlhYmxlIHRvIGRldGVybWluZSBpZiB3ZSBzaG91bGRuJ3RcbiAgICAgICAgLy8gcnVuIHRoZSBoaWRkZW4gY2FsbGJhY2ssIHdlIG5lZWQgdG8gY2hlY2sgdGhlIGNvbXB1dGVkIG9wYWNpdHkgc3R5bGUuXG4gICAgICAgIC8vIFRoaXMgcHJldmVudHMgZ2xpdGNoeSBiZWhhdmlvciBvZiB0aGUgdHJhbnNpdGlvbiB3aGVuIHF1aWNrbHkgc2hvd2luZ1xuICAgICAgICAvLyBhbmQgaGlkaW5nIGEgdG9vbHRpcC5cbiAgICAgICAgaWYgKGlzVmlzaWJsZShwb3BwZXIpIHx8ICFhcHBlbmRUby5jb250YWlucyhwb3BwZXIpIHx8IGdldENvbXB1dGVkU3R5bGUodG9vbHRpcCkub3BhY2l0eSA9PT0gJzEnKSByZXR1cm47XG5cbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZm9sbG93Q3Vyc29ySGFuZGxlcik7XG4gICAgICAgIGRhdGEucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIGFwcGVuZFRvLnJlbW92ZUNoaWxkKHBvcHBlcik7XG5cbiAgICAgICAgX3RoaXMyLmNhbGxiYWNrcy5oaWRkZW4uY2FsbChwb3BwZXIpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBVcGRhdGVzIGEgcG9wcGVyIHdpdGggbmV3IGNvbnRlbnRcbiAgICAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKHBvcHBlcikge1xuICAgICAgaWYgKHRoaXMuc3RhdGUuZGVzdHJveWVkKSByZXR1cm47XG5cbiAgICAgIHZhciBkYXRhID0gZmluZCh0aGlzLnN0b3JlLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YS5wb3BwZXIgPT09IHBvcHBlcjtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX2dldElubmVyRWxlbWVudHMzID0gZ2V0SW5uZXJFbGVtZW50cyhwb3BwZXIpLFxuICAgICAgICAgIGNvbnRlbnQgPSBfZ2V0SW5uZXJFbGVtZW50czMuY29udGVudDtcblxuICAgICAgdmFyIGVsID0gZGF0YS5lbCxcbiAgICAgICAgICBodG1sID0gZGF0YS5zZXR0aW5ncy5odG1sO1xuXG5cbiAgICAgIGlmIChodG1sIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0Fib3J0ZWQ6IHVwZGF0ZSgpIHNob3VsZCBub3QgYmUgdXNlZCBpZiBgaHRtbGAgaXMgYSBET00gZWxlbWVudCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQuaW5uZXJIVE1MID0gaHRtbCA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGh0bWwucmVwbGFjZSgnIycsICcnKSkuaW5uZXJIVE1MIDogZWwuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpO1xuXG4gICAgICBpZiAoIWh0bWwpIHJlbW92ZVRpdGxlKGVsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIERlc3Ryb3lzIGEgcG9wcGVyXG4gICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlclxuICAgICogQHBhcmFtIHtCb29sZWFufSBfaXNMYXN0IC0gcHJpdmF0ZSBwYXJhbSB1c2VkIGJ5IGRlc3Ryb3lBbGwgdG8gb3B0aW1pemVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveShwb3BwZXIsIF9pc0xhc3QpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5zdGF0ZS5kZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgdmFyIGRhdGEgPSBmaW5kKHRoaXMuc3RvcmUsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhLnBvcHBlciA9PT0gcG9wcGVyO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBlbCA9IGRhdGEuZWwsXG4gICAgICAgICAgcG9wcGVySW5zdGFuY2UgPSBkYXRhLnBvcHBlckluc3RhbmNlLFxuICAgICAgICAgIGxpc3RlbmVycyA9IGRhdGEubGlzdGVuZXJzLFxuICAgICAgICAgIF9tdXRhdGlvbk9ic2VydmVycyA9IGRhdGEuX211dGF0aW9uT2JzZXJ2ZXJzO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIHBvcHBlciBpcyBoaWRkZW5cblxuICAgICAgaWYgKGlzVmlzaWJsZShwb3BwZXIpKSB7XG4gICAgICAgIHRoaXMuaGlkZShwb3BwZXIsIDApO1xuICAgICAgfVxuXG4gICAgICAvLyBSZW1vdmUgVGlwcHktb25seSBldmVudCBsaXN0ZW5lcnMgZnJvbSB0b29sdGlwcGVkIGVsZW1lbnRcbiAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihsaXN0ZW5lci5ldmVudCwgbGlzdGVuZXIuaGFuZGxlcik7XG4gICAgICB9KTtcblxuICAgICAgLy8gUmVzdG9yZSBvcmlnaW5hbCB0aXRsZVxuICAgICAgZWwuc2V0QXR0cmlidXRlKCd0aXRsZScsIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpKTtcblxuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJyk7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcHBlZCcpO1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5Jyk7XG5cbiAgICAgIHBvcHBlckluc3RhbmNlICYmIHBvcHBlckluc3RhbmNlLmRlc3Ryb3koKTtcblxuICAgICAgX211dGF0aW9uT2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIG9ic2VydmVyICYmIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZW1vdmUgZnJvbSBzdG9yZVxuICAgICAgU3RvcmUuc3BsaWNlKGZpbmRJbmRleChTdG9yZSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEucG9wcGVyID09PSBwb3BwZXI7XG4gICAgICB9KSwgMSk7XG5cbiAgICAgIC8vIEVuc3VyZSBmaWx0ZXIgaXMgY2FsbGVkIG9ubHkgb25jZVxuICAgICAgaWYgKF9pc0xhc3QgPT09IHVuZGVmaW5lZCB8fCBfaXNMYXN0KSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBTdG9yZS5maWx0ZXIoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS50aXBweUluc3RhbmNlID09PSBfdGhpczM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogRGVzdHJveXMgYWxsIHRvb2x0aXBzIGNyZWF0ZWQgYnkgdGhlIGluc3RhbmNlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveUFsbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lBbGwoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuc3RhdGUuZGVzdHJveWVkKSByZXR1cm47XG5cbiAgICAgIHZhciBzdG9yZUxlbmd0aCA9IHRoaXMuc3RvcmUubGVuZ3RoO1xuXG4gICAgICB0aGlzLnN0b3JlLmZvckVhY2goZnVuY3Rpb24gKF9yZWYsIGluZGV4KSB7XG4gICAgICAgIHZhciBwb3BwZXIgPSBfcmVmLnBvcHBlcjtcblxuICAgICAgICBfdGhpczQuZGVzdHJveShwb3BwZXIsIGluZGV4ID09PSBzdG9yZUxlbmd0aCAtIDEpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc3RvcmUgPSBudWxsO1xuICAgICAgdGhpcy5zdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGlwcHk7XG59KCk7XG5cbmZ1bmN0aW9uIHRpcHB5JDIoc2VsZWN0b3IsIHNldHRpbmdzKSB7XG4gIC8vIENyZWF0ZSBhIHZpcnR1YWwgb2JqZWN0IGZvciBjdXN0b20gcG9zaXRpb25pbmdcbiAgaWYgKGlzT2JqZWN0TGl0ZXJhbChzZWxlY3RvcikpIHtcbiAgICBzZWxlY3RvciA9IHtcbiAgICAgIHJlZk9iajogdHJ1ZSxcbiAgICAgIGF0dHJpYnV0ZXM6IHNlbGVjdG9yLmF0dHJpYnV0ZXMgfHwge30sXG4gICAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6IHNlbGVjdG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCxcbiAgICAgIGNsaWVudFdpZHRoOiBzZWxlY3Rvci5jbGllbnRXaWR0aCxcbiAgICAgIGNsaWVudEhlaWdodDogc2VsZWN0b3IuY2xpZW50SGVpZ2h0LFxuICAgICAgc2V0QXR0cmlidXRlOiBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUoa2V5LCB2YWwpIHtcbiAgICAgICAgc2VsZWN0b3IuYXR0cmlidXRlc1trZXldID0gdmFsO1xuICAgICAgfSxcbiAgICAgIGdldEF0dHJpYnV0ZTogZnVuY3Rpb24gZ2V0QXR0cmlidXRlKGtleSkge1xuICAgICAgICByZXR1cm4gc2VsZWN0b3IuYXR0cmlidXRlc1trZXldO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZUF0dHJpYnV0ZTogZnVuY3Rpb24gcmVtb3ZlQXR0cmlidXRlKGtleSkge1xuICAgICAgICBkZWxldGUgc2VsZWN0b3IuYXR0cmlidXRlc1trZXldO1xuICAgICAgfSxcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICAgIGNsYXNzTGlzdDoge1xuICAgICAgICBjbGFzc05hbWVzOiB7fSxcbiAgICAgICAgYWRkOiBmdW5jdGlvbiBhZGQoa2V5KSB7XG4gICAgICAgICAgc2VsZWN0b3IuY2xhc3NMaXN0LmNsYXNzTmFtZXNba2V5XSA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGtleSkge1xuICAgICAgICAgIHNlbGVjdG9yLmNsYXNzTGlzdC5jbGFzc05hbWVzW2tleV0gPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgY29udGFpbnM6IGZ1bmN0aW9uIGNvbnRhaW5zKGtleSkge1xuICAgICAgICAgIHJldHVybiAhIXNlbGVjdG9yLmNsYXNzTGlzdC5jbGFzc05hbWVzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUaXBweShzZWxlY3Rvciwgc2V0dGluZ3MpO1xufVxuXG50aXBweSQyLkJyb3dzZXIgPSBCcm93c2VyO1xudGlwcHkkMi5EZWZhdWx0cyA9IERlZmF1bHRzO1xudGlwcHkkMi5kaXNhYmxlRHluYW1pY0lucHV0RGV0ZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gQnJvd3Nlci5keW5hbWljSW5wdXREZXRlY3Rpb24gPSBmYWxzZTtcbn07XG50aXBweSQyLmVuYWJsZUR5bmFtaWNJbnB1dERldGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIEJyb3dzZXIuZHluYW1pY0lucHV0RGV0ZWN0aW9uID0gdHJ1ZTtcbn07XG5cbnJldHVybiB0aXBweSQyO1xuXG59KSkpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICQoJ1tkYXRhLWVudGVyLWRhdGVdJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgXHR2YXIgcm93ID0gJCh0aGlzKS5wYXJlbnRzKCcuY2FiaW5ldC1yaXNrcy1yZWNvbW1lbmRhdGlvbicpO1xuICAgIFx0cm93LmZpbmQoJy5jYWJpbmV0LXJpc2tzLXJlY29tbWVuZGF0aW9uLWRlZmF1bHQtc3RhdGUnKS5oaWRlKCk7XG4gICAgXHRyb3cuZmluZCgnLmNhYmluZXQtcmlza3MtcmVjb21tZW5kYXRpb24tZW50ZXItZGF0ZS1zdGF0ZScpLnNob3coKTtcbiAgICBcdHJldHVybiBmYWxzZTtcbiAgICB9KTtcblxuICAgICQoJ1tkYXRhLXNhdmUtZGF0ZV0nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICBcdHZhciBwcm9jZWR1cmUgPSAkKHRoaXMpLmRhdGEoJ3NhdmUtZGF0ZScpO1xuICAgIFx0dmFyIHJvdyA9ICQodGhpcykucGFyZW50cygnLmNhYmluZXQtcmlza3MtcmVjb21tZW5kYXRpb24nKTtcbiAgICBcdHZhciBkYXRlID0gcm93LmZpbmQoJy5jYWJpbmV0LXJpc2tzLXJlY29tbWVuZGF0aW9uLWVudGVyLWRhdGUgaW5wdXQnKS52YWwoKTtcblxuICAgIFx0aWYgKCEgZGF0ZSkge1xuXHRcdFx0cm93LmZpbmQoJy5jYWJpbmV0LXJpc2tzLXJlY29tbWVuZGF0aW9uLWVudGVyLWRhdGUgaW5wdXQnKS5mb2N1cygpO1xuXHRcdFx0cmV0dXJuIGZhbHNlOyAgXHRcdFxuICAgIFx0fVxuICAgIFx0XG4gICAgXHQkLmFqYXgoe1xuICAgIFx0XHRtZXRob2Q6ICdQT1NUJyxcbiAgICBcdFx0dXJsOiAnL3Byb2NlZHVyZScsXG4gICAgXHRcdGRhdGFUeXBlOiAnanNvbicsXG4gICAgXHRcdGRhdGE6IHtcbiAgICBcdFx0XHRkYXRlOiBkYXRlLFxuICAgIFx0XHRcdHByb2NlZHVyZTogcHJvY2VkdXJlLFxuICAgIFx0XHRcdF90b2tlbjogJCgnaW5wdXRbbmFtZT1fdG9rZW5dJykudmFsKClcbiAgICBcdFx0fSxcbiAgICBcdFx0c3VjY2VzczogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICBcdFx0XHRyb3cuZmluZCgnLmNhYmluZXQtcmlza3MtcmVjb21tZW5kYXRpb24tZGF0ZScpLnRleHQocmVzcG9uc2UubmV4dERhdGUpO1xuICAgIFx0XHRcdHJvdy5maW5kKCcuY2FiaW5ldC1yaXNrcy1yZWNvbW1lbmRhdGlvbi1lbnRlci1kYXRlLXN0YXRlJykuaGlkZSgpO1xuICAgIFx0XHRcdHJvdy5maW5kKCcuY2FiaW5ldC1yaXNrcy1yZWNvbW1lbmRhdGlvbi1kZWZhdWx0LXN0YXRlJykuc2hvdygpO1xuICAgIFx0XHR9XG4gICAgXHR9KTtcblxuICAgIFx0cmV0dXJuIGZhbHNlO1xuICAgIH0pXG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICAkKCcuanMtaGVhZGVyLXNsaWRlcicpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGVhZGVyU2xpZGVyID0gJCh0aGlzKS5ieFNsaWRlcih7XG4gICAgICAgICAgICBpbmZpbml0ZUxvb3A6IHRydWUsXG4gICAgICAgICAgICBwYWdlcjogZmFsc2UsXG4gICAgICAgICAgICBjb250cm9sczogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnLmpzLWhlYWRlci1zbGlkZXItbmV4dCcpLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBoZWFkZXJTbGlkZXIuZ29Ub05leHRTbGlkZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKCcuanMtaGVhZGVyLXNsaWRlci1wcmV2JykuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGhlYWRlclNsaWRlci5nb1RvUHJldlNsaWRlKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGhlYWRlclNsaWRlci5yZWxvYWRTbGlkZXIoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAkKCcuanMtaGVhZGVyLWFib3V0LXNsaWRlcicpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGVhZGVyU2xpZGVyQWJvdXQgPSAkKHRoaXMpLmJ4U2xpZGVyKHtcbiAgICAgICAgICAgIGluZmluaXRlTG9vcDogdHJ1ZSxcbiAgICAgICAgICAgIHBhZ2VyOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbnRyb2xzOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGhlYWRlclNsaWRlckFib3V0LnJlbG9hZFNsaWRlcigpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICQoJy5qcy1sb2dvdHlwZXMtc2xpZGVyJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsb2dvdHlwZXNTbGlkZXIgPSAkKHRoaXMpLmJ4U2xpZGVyKHtcbiAgICAgICAgICAgIGluZmluaXRlTG9vcDogdHJ1ZSxcbiAgICAgICAgICAgIHBhZ2VyOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5sb2dvdHlwZXMtYmxvY2stc2xpZGVyJykuZmluZCgnLmpzLWxvZ290eXBlcy1zbGlkZXItbmV4dCcpLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBsb2dvdHlwZXNTbGlkZXIuZ29Ub05leHRTbGlkZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5sb2dvdHlwZXMtYmxvY2stc2xpZGVyJykuZmluZCgnLmpzLWxvZ290eXBlcy1zbGlkZXItcHJldicpLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBsb2dvdHlwZXNTbGlkZXIuZ29Ub1ByZXZTbGlkZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBsb2dvdHlwZXNTbGlkZXIucmVsb2FkU2xpZGVyKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJCgnI3JlY29tbWVuZGF0aW9ucy1zdWJzY3JpYmUnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGZvcm0gPSAkKHRoaXMpLnBhcmVudHMoJ2Zvcm0nKTtcblxuICAgICAgICBpZiAod2luZG93LnJlY29tbWVuZGF0aW9uVGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHdpbmRvdy5yZWNvbW1lbmRhdGlvblRpbWVvdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2luZG93LnJlY29tbWVuZGF0aW9uVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGZvcm0uc3VibWl0KCk7XG4gICAgICAgIH0sIDEzMDApO1xuICAgIH0pXG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBoaWRlRXZlbnQoZSwgY2xvc2VzdEVsLCBoaWRlRnVuYykge1xuICAgICAgICBpZighJChlLnRhcmdldCkuY2xvc2VzdChjbG9zZXN0RWwpLmxlbmd0aCkge1xuICAgICAgICAgICAgaGlkZUZ1bmMoKTtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZignY2xpY2snLCAnYm9keScsIGhpZGVFdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkKCcuanMtb2ZmY2FudmFzJykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2ZmY2FudmFzT3ZlcmxheSA9ICcjb2ZmY2FudmFzJyxcbiAgICAgICAgICAgIG9mZmNhbnZhcyA9ICcjb2ZmY2FudmFzID4gLm1haW4tb2ZmY2FudmFzJztcblxuICAgICAgICBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgICAgICAgJCgnLmpzLW9mZmNhbnZhcycpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICQob2ZmY2FudmFzT3ZlcmxheSkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnYm9keScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaGlkZUV2ZW50KGUsIG9mZmNhbnZhcywgaGlkZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgICAgICAkKCcuanMtb2ZmY2FudmFzLCAnICsgb2ZmY2FudmFzT3ZlcmxheSkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaG93KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG59KSgpOyIsIihmdW5jdGlvbiggJCApIHtcbiAgICAkLmZuLnRvZ2dsZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciB0b2dnbGVUYXJnZXQgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZScpIHx8ICQodGhpcykuYXR0cignaHJlZicpLFxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyA9ICQodGhpcykuZGF0YSgndG9nZ2xlLWNsYXNzJykgfHwgJ2FjdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUdyb3VwID0gJCh0aGlzKS5kYXRhKCd0b2dnbGUtZ3JvdXAnKSxcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlU2VsZkRlYWN0aXZlID0gJCh0aGlzKS5pcygnW2RhdGEtdG9nZ2xlLXNlbGYtZGVhY3RpdmVdJyk7XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0b2dnbGVUYXJnZXQsIHRvZ2dsZUNsYXNzLCB0b2dnbGVHcm91cCk7XG5cbiAgICAgICAgICAgICAgICAkKCdbZGF0YS10b2dnbGUtZ3JvdXA9XCInICsgdG9nZ2xlR3JvdXAgKyAnXCJdJykubm90KHRoaXMpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzKS5kYXRhKCd0b2dnbGUnKSB8fCAkKHRoaXMpLmF0dHIoJ2hyZWYnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENsYXNzID0gJCh0aGlzKS5kYXRhKCd0b2dnbGUtY2xhc3MnKSB8fCAnYWN0aXZlJztcblxuICAgICAgICAgICAgICAgICAgICAkKHRhcmdldCkucmVtb3ZlQ2xhc3ModGFyZ2V0Q2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKHRhcmdldENsYXNzKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKHRvZ2dsZUNsYXNzKSAmJiB0b2dnbGVTZWxmRGVhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyh0b2dnbGVDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICQodG9nZ2xlVGFyZ2V0KS5yZW1vdmVDbGFzcyh0b2dnbGVDbGFzcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyh0b2dnbGVDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICQodG9nZ2xlVGFyZ2V0KS5hZGRDbGFzcyh0b2dnbGVDbGFzcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59KCBqUXVlcnkgKSk7IiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXRvZ2dsZV0nKS50b2dnbGVyKCk7XG4gICAgJCgnOmlucHV0JykuaW5wdXRtYXNrKCk7XG4gICAgdGlwcHkoJ1tkYXRhLXRvb2x0aXBdJywge1xuICAgICAgICB0aGVtZTogJ2xpZ2h0J1xuICAgIH0pO1xufSk7Il19
