!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";var n=[],i=e.document,r=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,l=n.indexOf,c={},u=c.toString,d=c.hasOwnProperty,f=d.toString,p=f.call(Object),h={};function g(e,t){var n=(t=t||i).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}var m=function(e,t){return new m.fn.init(e,t)},v=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,y=/^-ms-/,b=/-([a-z])/g,x=function(e,t){return t.toUpperCase()};m.fn=m.prototype={jquery:"3.2.1",constructor:m,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=m.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return m.each(this,e)},map:function(e){return this.pushStack(m.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},m.extend=m.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||m.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(i=e[t])&&(c&&i&&(m.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&m.isPlainObject(n)?n:{},a[t]=m.extend(c,o,i)):void 0!==i&&(a[t]=i));return a},m.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===m.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=m.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==u.call(e))&&(!(t=r(e))||"function"==typeof(n=d.call(t,"constructor")&&t.constructor)&&f.call(n)===p)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[u.call(e)]||"object":typeof e},globalEval:function(e){g(e)},camelCase:function(e){return e.replace(y,"ms-").replace(b,x)},each:function(e,t){var n,i=0;if(w(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(v,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(w(Object(e))?m.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:l.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(w(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return a.apply([],s)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),m.isFunction(e))return i=o.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(o.call(arguments)))}).guid=e.guid=e.guid||m.guid++,r},now:Date.now,support:h}),"function"==typeof Symbol&&(m.fn[Symbol.iterator]=n[Symbol.iterator]),m.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){c["[object "+t+"]"]=t.toLowerCase()});function w(e){var t=!!e&&"length"in e&&e.length,n=m.type(e);return"function"!==n&&!m.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}var k=function(e){var t,n,i,r,o,a,s,l,c,u,d,f,p,h,g,m,v,y,b,x="sizzle"+1*new Date,w=e.document,k=0,C=0,S=ae(),E=ae(),T=ae(),D=function(e,t){return e===t&&(d=!0),0},P={}.hasOwnProperty,M=[],A=M.pop,O=M.push,L=M.push,N=M.slice,I=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},j="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",$="\\["+F+"*("+R+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+F+"*\\]",_=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+$+")*)|.*)\\)|)",H=new RegExp(F+"+","g"),B=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),q=new RegExp("^"+F+"*,"+F+"*"),W=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),Y=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),z=new RegExp(_),U=new RegExp("^"+R+"$"),G={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+$),PSEUDO:new RegExp("^"+_),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+j+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,V=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,J=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig"),ee=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){f()},re=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{L.apply(M=N.call(w.childNodes),w.childNodes),M[w.childNodes.length].nodeType}catch(e){L={apply:M.length?function(e,t){O.apply(e,N.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(e,t,i,r){var o,s,c,u,d,h,v,y=t&&t.ownerDocument,k=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return i;if(!r&&((t?t.ownerDocument||t:w)!==p&&f(t),t=t||p,g)){if(11!==k&&(d=Z.exec(e)))if(o=d[1]){if(9===k){if(!(c=t.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(y&&(c=y.getElementById(o))&&b(t,c)&&c.id===o)return i.push(c),i}else{if(d[2])return L.apply(i,t.getElementsByTagName(e)),i;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!T[e+" "]&&(!m||!m.test(e))){if(1!==k)y=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((u=t.getAttribute("id"))?u=u.replace(te,ne):t.setAttribute("id",u=x),s=(h=a(e)).length;s--;)h[s]="#"+u+" "+ve(h[s]);v=h.join(","),y=Q.test(e)&&pe(t.parentNode)||t}if(v)try{return L.apply(i,y.querySelectorAll(v)),i}catch(e){}finally{u===x&&t.removeAttribute("id")}}}return l(e.replace(B,"$1"),t,i,r)}function ae(){var e=[];function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}return t}function se(e){return e[x]=!0,e}function le(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function ue(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function fe(e){return se(function(t){return t=+t,se(function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))})})}function pe(e){return e&&void 0!==e.getElementsByTagName&&e}n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},f=oe.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:w;return a!==p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,g=!o(p),w!==p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=le(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=K.test(p.getElementsByClassName),n.getById=le(function(e){return h.appendChild(e).id=x,!p.getElementsByName||!p.getElementsByName(x).length}),n.getById?(i.filter.ID=function(e){var t=e.replace(J,ee);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(J,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=K.test(p.querySelectorAll))&&(le(function(e){h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+F+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+F+"*(?:value|"+j+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+F+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=K.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&le(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",_)}),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=K.test(h.compareDocumentPosition),b=t||K.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===p||e.ownerDocument===w&&b(w,e)?-1:t===p||t.ownerDocument===w&&b(w,t)?1:u?I(u,e)-I(u,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!r||!o)return e===p?-1:t===p?1:r?-1:o?1:u?I(u,e)-I(u,t):0;if(r===o)return ue(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?ue(a[i],s[i]):a[i]===w?-1:s[i]===w?1:0},p):p},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&f(e),t=t.replace(Y,"='$1']"),n.matchesSelector&&g&&!T[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return oe(t,p,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==p&&f(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==p&&f(e);var r=i.attrHandle[t.toLowerCase()],o=r&&P.call(i.attrHandle,t.toLowerCase())?r(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],r=0,o=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(D),d){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return u=null,e},r=oe.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=oe.selectors={cacheLength:50,createPseudo:se,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(J,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(J,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(J,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=S[e+" "];return t||(t=new RegExp("(^|"+F+")"+e+"("+F+"|$)"))&&S(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=oe.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(H," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,f,p,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(m){if(o){for(;g;){for(f=t;f=f[g];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(b=(p=(c=(u=(d=(f=m)[x]||(f[x]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===k&&c[1])&&c[2],f=p&&m.childNodes[p];f=++p&&f&&f[g]||(b=p=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){u[e]=[k,p,b];break}}else if(y&&(b=p=(c=(u=(d=(f=t)[x]||(f[x]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===k&&c[1]),!1===b)for(;(f=++p&&f&&f[g]||(b=p=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++b||(y&&((u=(d=f[x]||(f[x]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[k,b]),f!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[x]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var i,o=r(e,t),a=o.length;a--;)e[i=I(e,o[a])]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:se(function(e){var t=[],n=[],i=s(e.replace(B,"$1"));return i[x]?se(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(J,ee),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:se(function(e){return U.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(J,ee).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return V.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:fe(function(){return[0]}),last:fe(function(e,t){return[t-1]}),eq:fe(function(e,t,n){return[n<0?n+t:n]}),even:fe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:fe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:fe(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:fe(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=(he=t,function(e){return"input"===e.nodeName.toLowerCase()&&e.type===he});var he;for(t in{submit:!0,reset:!0})i.pseudos[t]=(ge=t,function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===ge});var ge;function me(){}me.prototype=i.filters=i.pseudos,i.setFilters=new me,a=oe.tokenize=function(e,t){var n,r,o,a,s,l,c,u=E[e+" "];if(u)return t?0:u.slice(0);for(s=e,l=[],c=i.preFilter;s;){n&&!(r=q.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),n=!1,(r=W.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(B," ")}),s=s.slice(n.length));for(a in i.filter)!(r=G[a].exec(s))||c[a]&&!(r=c[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):E(e,l).slice(0)};function ve(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ye(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&"parentNode"===o,s=C++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,l){var c,u,d,f=[k,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(u=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[o])&&c[0]===k&&c[1]===s)return f[2]=c[2];if(u[o]=f,f[2]=e(t,n,l))return!0}return!1}}function be(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function xe(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),c&&t.push(s)));return a}function we(e,t,n,i,r,o){return i&&!i[x]&&(i=we(i)),r&&!r[x]&&(r=we(r,o)),se(function(o,a,s,l){var c,u,d,f=[],p=[],h=a.length,g=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)oe(e,t[i],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:xe(g,f,e,s,l),v=n?r||(o?e:h||i)?[]:a:m;if(n&&n(m,v,s,l),i)for(c=xe(v,p),i(c,[],s,l),u=c.length;u--;)(d=c[u])&&(v[p[u]]=!(m[p[u]]=d));if(o){if(r||e){if(r){for(c=[],u=v.length;u--;)(d=v[u])&&c.push(m[u]=d);r(null,v=[],c,l)}for(u=v.length;u--;)(d=v[u])&&(c=r?I(o,d):f[u])>-1&&(o[c]=!(a[c]=d))}}else v=xe(v===a?v.splice(h,v.length):v),r?r(null,a,v,l):L.apply(a,v)})}function ke(e){for(var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,u=ye(function(e){return e===t},s,!0),d=ye(function(e){return I(t,e)>-1},s,!0),f=[function(e,n,i){var r=!a&&(i||n!==c)||((t=n).nodeType?u(e,n,i):d(e,n,i));return t=null,r}];l<o;l++)if(n=i.relative[e[l].type])f=[ye(be(f),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[x]){for(r=++l;r<o&&!i.relative[e[r].type];r++);return we(l>1&&be(f),l>1&&ve(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(B,"$1"),n,l<r&&ke(e.slice(l,r)),r<o&&ke(e=e.slice(r)),r<o&&ve(e))}f.push(n)}return be(f)}return s=oe.compile=function(e,t){var n,r=[],o=[],s=T[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=ke(t[n]))[x]?r.push(s):o.push(s);(s=T(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,a,s,l,u){var d,h,m,v=0,y="0",b=o&&[],x=[],w=c,C=o||r&&i.find.TAG("*",u),S=k+=null==w?1:Math.random()||.1,E=C.length;for(u&&(c=a===p||a||u);y!==E&&null!=(d=C[y]);y++){if(r&&d){for(h=0,a||d.ownerDocument===p||(f(d),s=!g);m=e[h++];)if(m(d,a||p,s)){l.push(d);break}u&&(k=S)}n&&((d=!m&&d)&&v--,o&&b.push(d))}if(v+=y,n&&y!==v){for(h=0;m=t[h++];)m(b,x,a,s);if(o){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=A.call(l));x=xe(x)}L.apply(l,x),u&&!o&&x.length>0&&v+t.length>1&&oe.uniqueSort(l)}return u&&(k=S,c=w),b};return n?se(o):o}(o,r))).selector=e}return s},l=oe.select=function(e,t,n,r){var o,l,c,u,d,f="function"==typeof e&&e,p=!r&&a(e=f.selector||e);if(n=n||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&g&&i.relative[l[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(J,ee),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=G.needsContext.test(e)?0:l.length;o--&&(c=l[o],!i.relative[u=c.type]);)if((d=i.find[u])&&(r=d(c.matches[0].replace(J,ee),Q.test(l[0].type)&&pe(t.parentNode)||t))){if(l.splice(o,1),!(e=r.length&&ve(l)))return L.apply(n,r),n;break}}return(f||s(e,p))(r,t,!g,n,!t||Q.test(e)&&pe(t.parentNode)||t),n},n.sortStable=x.split("").sort(D).join("")===x,n.detectDuplicates=!!d,f(),n.sortDetached=le(function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||ce(j,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(e);m.find=k,m.expr=k.selectors,m.expr[":"]=m.expr.pseudos,m.uniqueSort=m.unique=k.uniqueSort,m.text=k.getText,m.isXMLDoc=k.isXML,m.contains=k.contains,m.escapeSelector=k.escape;var C=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&m(e).is(n))break;i.push(e)}return i},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},E=m.expr.match.needsContext;function T(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,P=/^.[^:#\[\.,]*$/;function M(e,t,n){return m.isFunction(t)?m.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?m.grep(e,function(e){return e===t!==n}):"string"!=typeof t?m.grep(e,function(e){return l.call(t,e)>-1!==n}):P.test(t)?m.filter(t,e,n):(t=m.filter(t,e),m.grep(e,function(e){return l.call(t,e)>-1!==n&&1===e.nodeType}))}m.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?m.find.matchesSelector(i,e)?[i]:[]:m.find.matches(e,m.grep(t,function(e){return 1===e.nodeType}))},m.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(m(e).filter(function(){for(t=0;t<i;t++)if(m.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)m.find(e,r[t],n);return i>1?m.uniqueSort(n):n},filter:function(e){return this.pushStack(M(this,e||[],!1))},not:function(e){return this.pushStack(M(this,e||[],!0))},is:function(e){return!!M(this,"string"==typeof e&&E.test(e)?m(e):e||[],!1).length}});var A,O=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(m.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||A,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:O.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof m?t[0]:t,m.merge(this,m.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:i,!0)),D.test(r[1])&&m.isPlainObject(t))for(r in t)m.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=i.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m.isFunction(e)?void 0!==n.ready?n.ready(e):e(m):m.makeArray(e,this)}).prototype=m.fn,A=m(i);var L=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};m.fn.extend({has:function(e){var t=m(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(m.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&m(e);if(!E.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&m.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?m.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?l.call(m(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(m.uniqueSort(m.merge(this.get(),m(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function I(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}m.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,n){return C(e,"parentNode",n)},next:function(e){return I(e,"nextSibling")},prev:function(e){return I(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,n){return C(e,"nextSibling",n)},prevUntil:function(e,t,n){return C(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return T(e,"iframe")?e.contentDocument:(T(e,"template")&&(e=e.content||e),m.merge([],e.childNodes))}},function(e,t){m.fn[e]=function(n,i){var r=m.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=m.filter(i,r)),this.length>1&&(N[e]||m.uniqueSort(r),L.test(e)&&r.reverse()),this.pushStack(r)}});var j=/[^\x20\t\r\n\f]+/g;m.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return m.each(e.match(j)||[],function(e,n){t[n]=!0}),t}(e):m.extend({},e);var t,n,i,r,o=[],a=[],s=-1,l=function(){for(r=r||e.once,i=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){m.each(n,function(n,i){m.isFunction(i)?e.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==m.type(i)&&t(i)})}(arguments),n&&!t&&l()),this},remove:function(){return m.each(arguments,function(e,t){for(var n;(n=m.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?m.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=a=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c};function F(e){return e}function R(e){throw e}function $(e,t,n,i){var r;try{e&&m.isFunction(r=e.promise)?r.call(e).done(t).fail(n):e&&m.isFunction(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}m.extend({Deferred:function(t){var n=[["notify","progress",m.Callbacks("memory"),m.Callbacks("memory"),2],["resolve","done",m.Callbacks("once memory"),m.Callbacks("once memory"),0,"resolved"],["reject","fail",m.Callbacks("once memory"),m.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return m.Deferred(function(t){m.each(n,function(n,i){var r=m.isFunction(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&m.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(t,i,r){var o=0;function a(t,n,i,r){return function(){var s=this,l=arguments,c=function(){var e,c;if(!(t<o)){if((e=i.apply(s,l))===n.promise())throw new TypeError("Thenable self-resolution");c=e&&("object"==typeof e||"function"==typeof e)&&e.then,m.isFunction(c)?r?c.call(e,a(o,n,F,r),a(o,n,R,r)):(o++,c.call(e,a(o,n,F,r),a(o,n,R,r),a(o,n,F,n.notifyWith))):(i!==F&&(s=void 0,l=[e]),(r||n.resolveWith)(s,l))}},u=r?c:function(){try{c()}catch(e){m.Deferred.exceptionHook&&m.Deferred.exceptionHook(e,u.stackTrace),t+1>=o&&(i!==R&&(s=void 0,l=[e]),n.rejectWith(s,l))}};t?u():(m.Deferred.getStackHook&&(u.stackTrace=m.Deferred.getStackHook()),e.setTimeout(u))}}return m.Deferred(function(e){n[0][3].add(a(0,e,m.isFunction(r)?r:F,e.notifyWith)),n[1][3].add(a(0,e,m.isFunction(t)?t:F)),n[2][3].add(a(0,e,m.isFunction(i)?i:R))}).promise()},promise:function(e){return null!=e?m.extend(e,r):r}},o={};return m.each(n,function(e,t){var a=t[2],s=t[5];r[t[1]]=a.add,s&&a.add(function(){i=s},n[3-e][2].disable,n[0][2].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=o.call(arguments),a=m.Deferred(),s=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?o.call(arguments):n,--t||a.resolveWith(i,r)}};if(t<=1&&($(e,a.done(s(n)).resolve,a.reject,!t),"pending"===a.state()||m.isFunction(r[n]&&r[n].then)))return a.then();for(;n--;)$(r[n],s(n),a.reject);return a.promise()}});var _=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;m.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&_.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},m.readyException=function(t){e.setTimeout(function(){throw t})};var H=m.Deferred();m.fn.ready=function(e){return H.then(e).catch(function(e){m.readyException(e)}),this},m.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--m.readyWait:m.isReady)||(m.isReady=!0,!0!==e&&--m.readyWait>0||H.resolveWith(i,[m]))}}),m.ready.then=H.then;function B(){i.removeEventListener("DOMContentLoaded",B),e.removeEventListener("load",B),m.ready()}"complete"===i.readyState||"loading"!==i.readyState&&!i.documentElement.doScroll?e.setTimeout(m.ready):(i.addEventListener("DOMContentLoaded",B),e.addEventListener("load",B));var q=function(e,t,n,i,r,o,a){var s=0,l=e.length,c=null==n;if("object"===m.type(n)){r=!0;for(s in n)q(e,t,s,n[s],!0,o,a)}else if(void 0!==i&&(r=!0,m.isFunction(i)||(a=!0),c&&(a?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(m(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:c?t.call(e):l?t(e[0],n):o},W=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=m.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},W(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[m.camelCase(t)]=n;else for(i in t)r[m.camelCase(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][m.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(m.camelCase):(t=m.camelCase(t))in i?[t]:t.match(j)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||m.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!m.isEmptyObject(t)}};var z=new Y,U=new Y,G=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,X=/[A-Z]/g;function V(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(X,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:G.test(r)?JSON.parse(r):r)}catch(e){}U.set(e,t,n)}else n=void 0;var r;return n}m.extend({hasData:function(e){return U.hasData(e)||z.hasData(e)},data:function(e,t,n){return U.access(e,t,n)},removeData:function(e,t){U.remove(e,t)},_data:function(e,t,n){return z.access(e,t,n)},_removeData:function(e,t){z.remove(e,t)}}),m.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=U.get(o),1===o.nodeType&&!z.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=m.camelCase(i.slice(5)),V(o,i,r[i]));z.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){U.set(this,e)}):q(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=U.get(o,e)))return n;if(void 0!==(n=V(o,e)))return n}else this.each(function(){U.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){U.remove(this,e)})}}),m.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=z.get(e,t),n&&(!i||Array.isArray(n)?i=z.access(e,t,m.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=m.queue(e,t),i=n.length,r=n.shift(),o=m._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){m.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return z.get(e,n)||z.access(e,n,{empty:m.Callbacks("once memory").add(function(){z.remove(e,[t+"queue",n])})})}}),m.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?m.queue(this[0],e):void 0===t?this:this.each(function(){var n=m.queue(this,e,t);m._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&m.dequeue(this,e)})},dequeue:function(e){return this.each(function(){m.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=m.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=z.get(o[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var K=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Z=new RegExp("^(?:([+-])=|)("+K+")([a-z%]*)$","i"),Q=["Top","Right","Bottom","Left"],J=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&m.contains(e.ownerDocument,e)&&"none"===m.css(e,"display")},ee=function(e,t,n,i){var r,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];r=n.apply(e,i||[]);for(o in t)e.style[o]=a[o];return r};function te(e,t,n,i){var r,o=1,a=20,s=i?function(){return i.cur()}:function(){return m.css(e,t,"")},l=s(),c=n&&n[3]||(m.cssNumber[t]?"":"px"),u=(m.cssNumber[t]||"px"!==c&&+l)&&Z.exec(m.css(e,t));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{u/=o=o||".5",m.style(e,t,u+c)}while(o!==(o=s()/l)&&1!==o&&--a)}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var ne={};function ie(e){var t,n=e.ownerDocument,i=e.nodeName,r=ne[i];return r||(t=n.body.appendChild(n.createElement(i)),r=m.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ne[i]=r,r)}function re(e,t){for(var n,i,r=[],o=0,a=e.length;o<a;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=z.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&J(i)&&(r[o]=ie(i))):"none"!==n&&(r[o]="none",z.set(i,"display",n)));for(o=0;o<a;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}m.fn.extend({show:function(){return re(this,!0)},hide:function(){return re(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){J(this)?m(this).show():m(this).hide()})}});var oe=/^(?:checkbox|radio)$/i,ae=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,se=/^$|\/(?:java|ecma)script/i,le={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};le.optgroup=le.option,le.tbody=le.tfoot=le.colgroup=le.caption=le.thead,le.th=le.td;function ce(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&T(e,t)?m.merge([e],n):n}function ue(e,t){for(var n=0,i=e.length;n<i;n++)z.set(e[n],"globalEval",!t||z.get(t[n],"globalEval"))}var de=/<|&#?\w+;/;function fe(e,t,n,i,r){for(var o,a,s,l,c,u,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===m.type(o))m.merge(f,o.nodeType?[o]:o);else if(de.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(ae.exec(o)||["",""])[1].toLowerCase(),l=le[s]||le._default,a.innerHTML=l[1]+m.htmlPrefilter(o)+l[2],u=l[0];u--;)a=a.lastChild;m.merge(f,a.childNodes),(a=d.firstChild).textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",p=0;o=f[p++];)if(i&&m.inArray(o,i)>-1)r&&r.push(o);else if(c=m.contains(o.ownerDocument,o),a=ce(d.appendChild(o),"script"),c&&ue(a),n)for(u=0;o=a[u++];)se.test(o.type||"")&&n.push(o);return d}!function(){var e=i.createDocumentFragment().appendChild(i.createElement("div")),t=i.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),h.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var pe=i.documentElement,he=/^key/,ge=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,me=/^([^.]*)(?:\.(.+)|)/;function ve(){return!0}function ye(){return!1}function be(){try{return i.activeElement}catch(e){}}function xe(e,t,n,i,r,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(s in t)xe(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=ye;else if(!r)return e;return 1===o&&(a=r,(r=function(e){return m().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=m.guid++)),e.each(function(){m.event.add(this,t,r,i,n)})}m.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,c,u,d,f,p,h,g,v=z.get(e);if(v)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&m.find.matchesSelector(pe,r),n.guid||(n.guid=m.guid++),(l=v.events)||(l=v.events={}),(a=v.handle)||(a=v.handle=function(t){return void 0!==m&&m.event.triggered!==t.type?m.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(j)||[""]).length;c--;)p=g=(s=me.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p&&(d=m.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=m.event.special[p]||{},u=m.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&m.expr.match.needsContext.test(r),namespace:h.join(".")},o),(f=l[p])||((f=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,h,a)||e.addEventListener&&e.addEventListener(p,a)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,u):f.push(u),m.event.global[p]=!0)},remove:function(e,t,n,i,r){var o,a,s,l,c,u,d,f,p,h,g,v=z.hasData(e)&&z.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(j)||[""]).length;c--;)if(p=g=(s=me.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p){for(d=m.event.special[p]||{},f=l[p=(i?d.delegateType:d.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)u=f[o],!r&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(o,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(e,u));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,v.handle)||m.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)m.event.remove(e,p+t[c],n,i,!0);m.isEmptyObject(l)&&z.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=m.event.fix(e),l=new Array(arguments.length),c=(z.get(this,"events")||{})[s.type]||[],u=m.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,s)){for(a=m.event.handlers.call(this,s,c),t=0;(r=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(i=((m.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(s.result=i)&&(s.preventDefault(),s.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[r=(i=t[n]).selector+" "]&&(a[r]=i.needsContext?m(r,this).index(c)>-1:m.find(r,this,null,[c]).length),a[r]&&o.push(i);o.length&&s.push({elem:c,handlers:o})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(m.Event.prototype,e,{enumerable:!0,configurable:!0,get:m.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[m.expando]?e:new m.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==be()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===be()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&T(this,"input"))return this.click(),!1},_default:function(e){return T(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},m.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},m.Event=function(e,t){if(!(this instanceof m.Event))return new m.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ve:ye,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&m.extend(this,t),this.timeStamp=e&&e.timeStamp||m.now(),this[m.expando]=!0},m.Event.prototype={constructor:m.Event,isDefaultPrevented:ye,isPropagationStopped:ye,isImmediatePropagationStopped:ye,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ve,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ve,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ve,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},m.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&he.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&ge.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},m.event.addProp),m.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){m.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||m.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),m.fn.extend({on:function(e,t,n,i){return xe(this,e,t,n,i)},one:function(e,t,n,i){return xe(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,m(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ye),this.each(function(){m.event.remove(this,e,n,t)})}});var we=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ke=/<script|<style|<link/i,Ce=/checked\s*(?:[^=]|=\s*.checked.)/i,Se=/^true\/(.*)/,Ee=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Te(e,t){return T(e,"table")&&T(11!==t.nodeType?t:t.firstChild,"tr")?m(">tbody",e)[0]||e:e}function De(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){var t=Se.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function Me(e,t){var n,i,r,o,a,s,l,c;if(1===t.nodeType){if(z.hasData(e)&&(o=z.access(e),a=z.set(t,o),c=o.events)){delete a.handle,a.events={};for(r in c)for(n=0,i=c[r].length;n<i;n++)m.event.add(t,r,c[r][n])}U.hasData(e)&&(s=U.access(e),l=m.extend({},s),U.set(t,l))}}function Ae(e,t){var n=t.nodeName.toLowerCase();"input"===n&&oe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Oe(e,t,n,i){t=a.apply([],t);var r,o,s,l,c,u,d=0,f=e.length,p=f-1,v=t[0],y=m.isFunction(v);if(y||f>1&&"string"==typeof v&&!h.checkClone&&Ce.test(v))return e.each(function(r){var o=e.eq(r);y&&(t[0]=v.call(this,r,o.html())),Oe(o,t,n,i)});if(f&&(o=(r=fe(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(l=(s=m.map(ce(r,"script"),De)).length;d<f;d++)c=r,d!==p&&(c=m.clone(c,!0,!0),l&&m.merge(s,ce(c,"script"))),n.call(e[d],c,d);if(l)for(u=s[s.length-1].ownerDocument,m.map(s,Pe),d=0;d<l;d++)c=s[d],se.test(c.type||"")&&!z.access(c,"globalEval")&&m.contains(u,c)&&(c.src?m._evalUrl&&m._evalUrl(c.src):g(c.textContent.replace(Ee,""),u))}return e}function Le(e,t,n){for(var i,r=t?m.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||m.cleanData(ce(i)),i.parentNode&&(n&&m.contains(i.ownerDocument,i)&&ue(ce(i,"script")),i.parentNode.removeChild(i));return e}m.extend({htmlPrefilter:function(e){return e.replace(we,"<$1></$2>")},clone:function(e,t,n){var i,r,o,a,s=e.cloneNode(!0),l=m.contains(e.ownerDocument,e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||m.isXMLDoc(e)))for(a=ce(s),i=0,r=(o=ce(e)).length;i<r;i++)Ae(o[i],a[i]);if(t)if(n)for(o=o||ce(e),a=a||ce(s),i=0,r=o.length;i<r;i++)Me(o[i],a[i]);else Me(e,s);return(a=ce(s,"script")).length>0&&ue(a,!l&&ce(e,"script")),s},cleanData:function(e){for(var t,n,i,r=m.event.special,o=0;void 0!==(n=e[o]);o++)if(W(n)){if(t=n[z.expando]){if(t.events)for(i in t.events)r[i]?m.event.remove(n,i):m.removeEvent(n,i,t.handle);n[z.expando]=void 0}n[U.expando]&&(n[U.expando]=void 0)}}}),m.fn.extend({detach:function(e){return Le(this,e,!0)},remove:function(e){return Le(this,e)},text:function(e){return q(this,function(e){return void 0===e?m.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Oe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){Te(this,e).appendChild(e)}})},prepend:function(){return Oe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Te(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(m.cleanData(ce(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return m.clone(this,e,t)})},html:function(e){return q(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ke.test(e)&&!le[(ae.exec(e)||["",""])[1].toLowerCase()]){e=m.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(m.cleanData(ce(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Oe(this,arguments,function(t){var n=this.parentNode;m.inArray(this,e)<0&&(m.cleanData(ce(this)),n&&n.replaceChild(t,this))},e)}}),m.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){m.fn[e]=function(e){for(var n,i=[],r=m(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),m(r[a])[t](n),s.apply(i,n.get());return this.pushStack(i)}});var Ne=/^margin/,Ie=new RegExp("^("+K+")(?!px)[a-z%]+$","i"),je=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(l){l.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",l.innerHTML="",pe.appendChild(s);var t=e.getComputedStyle(l);n="1%"!==t.top,a="2px"===t.marginLeft,r="4px"===t.width,l.style.marginRight="50%",o="4px"===t.marginRight,pe.removeChild(s),l=null}}var n,r,o,a,s=i.createElement("div"),l=i.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===l.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(l),m.extend(h,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),o},reliableMarginLeft:function(){return t(),a}}))}();function Fe(e,t,n){var i,r,o,a,s=e.style;return(n=n||je(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||m.contains(e.ownerDocument,e)||(a=m.style(e,t)),!h.pixelMarginRight()&&Ie.test(a)&&Ne.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function Re(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}var $e=/^(none|table(?!-c[ea]).+)/,_e=/^--/,He={position:"absolute",visibility:"hidden",display:"block"},Be={letterSpacing:"0",fontWeight:"400"},qe=["Webkit","Moz","ms"],We=i.createElement("div").style;function Ye(e){var t=m.cssProps[e];return t||(t=m.cssProps[e]=function(e){if(e in We)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=qe.length;n--;)if((e=qe[n]+t)in We)return e}(e)||e),t}function ze(e,t,n){var i=Z.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Ue(e,t,n,i,r){var o,a=0;for(o=n===(i?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(a+=m.css(e,n+Q[o],!0,r)),i?("content"===n&&(a-=m.css(e,"padding"+Q[o],!0,r)),"margin"!==n&&(a-=m.css(e,"border"+Q[o]+"Width",!0,r))):(a+=m.css(e,"padding"+Q[o],!0,r),"padding"!==n&&(a+=m.css(e,"border"+Q[o]+"Width",!0,r)));return a}function Ge(e,t,n){var i,r=je(e),o=Fe(e,t,r),a="border-box"===m.css(e,"boxSizing",!1,r);return Ie.test(o)?o:(i=a&&(h.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+Ue(e,t,n||(a?"border":"content"),i,r)+"px")}m.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=m.camelCase(t),l=_e.test(t),c=e.style;if(l||(t=Ye(s)),a=m.cssHooks[t]||m.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:c[t];"string"===(o=typeof n)&&(r=Z.exec(n))&&r[1]&&(n=te(e,t,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(m.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,a,s=m.camelCase(t);return _e.test(t)||(t=Ye(s)),(a=m.cssHooks[t]||m.cssHooks[s])&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=Fe(e,t,i)),"normal"===r&&t in Be&&(r=Be[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),m.each(["height","width"],function(e,t){m.cssHooks[t]={get:function(e,n,i){if(n)return!$e.test(m.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Ge(e,t,i):ee(e,He,function(){return Ge(e,t,i)})},set:function(e,n,i){var r,o=i&&je(e),a=i&&Ue(e,t,i,"border-box"===m.css(e,"boxSizing",!1,o),o);return a&&(r=Z.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=m.css(e,t)),ze(0,n,a)}}}),m.cssHooks.marginLeft=Re(h.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-ee(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),m.each({margin:"",padding:"",border:"Width"},function(e,t){m.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+Q[i]+t]=o[i]||o[i-2]||o[0];return r}},Ne.test(e)||(m.cssHooks[e+t].set=ze)}),m.fn.extend({css:function(e,t){return q(this,function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){for(i=je(e),r=t.length;a<r;a++)o[t[a]]=m.css(e,t[a],!1,i);return o}return void 0!==n?m.style(e,t,n):m.css(e,t)},e,t,arguments.length>1)}});function Xe(e,t,n,i,r){return new Xe.prototype.init(e,t,n,i,r)}m.Tween=Xe,(Xe.prototype={constructor:Xe,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||m.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(m.cssNumber[n]?"":"px")},cur:function(){var e=Xe.propHooks[this.prop];return e&&e.get?e.get(this):Xe.propHooks._default.get(this)},run:function(e){var t,n=Xe.propHooks[this.prop];return this.options.duration?this.pos=t=m.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Xe.propHooks._default.set(this),this}}).init.prototype=Xe.prototype,(Xe.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=m.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){m.fx.step[e.prop]?m.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[m.cssProps[e.prop]]&&!m.cssHooks[e.prop]?e.elem[e.prop]=e.now:m.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=Xe.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},m.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},m.fx=Xe.prototype.init,m.fx.step={};var Ve,Ke,Ze=/^(?:toggle|show|hide)$/,Qe=/queueHooks$/;function Je(){Ke&&(!1===i.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(Je):e.setTimeout(Je,m.fx.interval),m.fx.tick())}function et(){return e.setTimeout(function(){Ve=void 0}),Ve=m.now()}function tt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=Q[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function nt(e,t,n){for(var i,r=(it.tweeners[t]||[]).concat(it.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function it(e,t,n){var i,r,o=0,a=it.prefilters.length,s=m.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=Ve||et(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(i);return s.notifyWith(e,[c,i,n]),i<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:m.extend({},t),opts:m.extend(!0,{specialEasing:{},easing:m.easing._default},n),originalProperties:t,originalOptions:n,startTime:Ve||et(),duration:n.duration,tweens:[],createTween:function(t,n){var i=m.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,i,r,o,a;for(n in e)if(r=t[i=m.camelCase(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=m.cssHooks[i])&&"expand"in a){o=a.expand(o),delete e[i];for(n in o)n in e||(e[n]=o[n],t[n]=r)}else t[i]=r}(u,c.opts.specialEasing);o<a;o++)if(i=it.prefilters[o].call(c,e,u,c.opts))return m.isFunction(i.stop)&&(m._queueHooks(c.elem,c.opts.queue).stop=m.proxy(i.stop,i)),i;return m.map(u,nt,c),m.isFunction(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),m.fx.timer(m.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}m.Animation=m.extend(it,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return te(n.elem,e,Z.exec(t),n),n}]},tweener:function(e,t){m.isFunction(e)?(t=e,e=["*"]):e=e.match(j);for(var n,i=0,r=e.length;i<r;i++)n=e[i],it.tweeners[n]=it.tweeners[n]||[],it.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,a,s,l,c,u,d="width"in t||"height"in t,f=this,p={},h=e.style,g=e.nodeType&&J(e),v=z.get(e,"fxshow");n.queue||(null==(a=m._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,m.queue(e,"fx").length||a.empty.fire()})}));for(i in t)if(r=t[i],Ze.test(r)){if(delete t[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;g=!0}p[i]=v&&v[i]||m.style(e,i)}if((l=!m.isEmptyObject(t))||!m.isEmptyObject(p)){d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=v&&v.display)&&(c=z.get(e,"display")),"none"===(u=m.css(e,"display"))&&(c?u=c:(re([e],!0),c=e.style.display||c,u=m.css(e,"display"),re([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===m.css(e,"float")&&(l||(f.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1;for(i in p)l||(v?"hidden"in v&&(g=v.hidden):v=z.access(e,"fxshow",{display:c}),o&&(v.hidden=!g),g&&re([e],!0),f.done(function(){g||re([e]),z.remove(e,"fxshow");for(i in p)m.style(e,i,p[i])})),l=nt(g?v[i]:0,i,f),i in v||(v[i]=l.start,g&&(l.end=l.start,l.start=0))}}],prefilter:function(e,t){t?it.prefilters.unshift(e):it.prefilters.push(e)}}),m.speed=function(e,t,n){var i=e&&"object"==typeof e?m.extend({},e):{complete:n||!n&&t||m.isFunction(e)&&e,duration:e,easing:n&&t||t&&!m.isFunction(t)&&t};return m.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in m.fx.speeds?i.duration=m.fx.speeds[i.duration]:i.duration=m.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){m.isFunction(i.old)&&i.old.call(this),i.queue&&m.dequeue(this,i.queue)},i},m.fn.extend({fadeTo:function(e,t,n,i){return this.filter(J).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=m.isEmptyObject(e),o=m.speed(t,n,i),a=function(){var t=it(this,m.extend({},e),o);(r||z.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=m.timers,a=z.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&Qe.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||m.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=z.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=m.timers,a=i?i.length:0;for(n.finish=!0,m.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),m.each(["toggle","show","hide"],function(e,t){var n=m.fn[t];m.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(tt(t,!0),e,i,r)}}),m.each({slideDown:tt("show"),slideUp:tt("hide"),slideToggle:tt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){m.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),m.timers=[],m.fx.tick=function(){var e,t=0,n=m.timers;for(Ve=m.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||m.fx.stop(),Ve=void 0},m.fx.timer=function(e){m.timers.push(e),m.fx.start()},m.fx.interval=13,m.fx.start=function(){Ke||(Ke=!0,Je())},m.fx.stop=function(){Ke=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(t,n){return t=m.fx?m.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})},function(){var e=i.createElement("input"),t=i.createElement("select").appendChild(i.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=i.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var rt,ot=m.expr.attrHandle;m.fn.extend({attr:function(e,t){return q(this,m.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){m.removeAttr(this,e)})}}),m.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?m.prop(e,t,n):(1===o&&m.isXMLDoc(e)||(r=m.attrHooks[t.toLowerCase()]||(m.expr.match.bool.test(t)?rt:void 0)),void 0!==n?null===n?void m.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=m.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&T(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(j);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),rt={set:function(e,t,n){return!1===t?m.removeAttr(e,n):e.setAttribute(n,n),n}},m.each(m.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ot[t]||m.find.attr;ot[t]=function(e,t,i){var r,o,a=t.toLowerCase();return i||(o=ot[a],ot[a]=r,r=null!=n(e,t,i)?a:null,ot[a]=o),r}});var at=/^(?:input|select|textarea|button)$/i,st=/^(?:a|area)$/i;m.fn.extend({prop:function(e,t){return q(this,m.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[m.propFix[e]||e]})}}),m.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&m.isXMLDoc(e)||(t=m.propFix[t]||t,r=m.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=m.find.attr(e,"tabindex");return t?parseInt(t,10):at.test(e.nodeName)||st.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.optSelected||(m.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),m.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){m.propFix[this.toLowerCase()]=this});function lt(e){return(e.match(j)||[]).join(" ")}function ct(e){return e.getAttribute&&e.getAttribute("class")||""}m.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(m.isFunction(e))return this.each(function(t){m(this).addClass(e.call(this,t,ct(this)))});if("string"==typeof e&&e)for(t=e.match(j)||[];n=this[l++];)if(r=ct(n),i=1===n.nodeType&&" "+lt(r)+" "){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(s=lt(i))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(m.isFunction(e))return this.each(function(t){m(this).removeClass(e.call(this,t,ct(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(j)||[];n=this[l++];)if(r=ct(n),i=1===n.nodeType&&" "+lt(r)+" "){for(a=0;o=t[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(s=lt(i))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):m.isFunction(e)?this.each(function(n){m(this).toggleClass(e.call(this,n,ct(this),t),t)}):this.each(function(){var t,i,r,o;if("string"===n)for(i=0,r=m(this),o=e.match(j)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=ct(this))&&z.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":z.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+lt(ct(n))+" ").indexOf(t)>-1)return!0;return!1}});var ut=/\r/g;m.fn.extend({val:function(e){var t,n,i,r=this[0];{if(arguments.length)return i=m.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,m(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=m.map(r,function(e){return null==e?"":e+""})),(t=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return(t=m.valHooks[r.type]||m.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(ut,""):null==n?"":n}}}),m.extend({valHooks:{option:{get:function(e){var t=m.find.attr(e,"value");return null!=t?t:lt(m.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:r.length;for(i=o<0?l:a?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!T(n.parentNode,"optgroup"))){if(t=m(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=m.makeArray(t),a=r.length;a--;)((i=r[a]).selected=m.inArray(m.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),m.each(["radio","checkbox"],function(){m.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=m.inArray(m(e).val(),t)>-1}},h.checkOn||(m.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var dt=/^(?:focusinfocus|focusoutblur)$/;m.extend(m.event,{trigger:function(t,n,r,o){var a,s,l,c,u,f,p,h=[r||i],g=d.call(t,"type")?t.type:t,v=d.call(t,"namespace")?t.namespace.split("."):[];if(s=l=r=r||i,3!==r.nodeType&&8!==r.nodeType&&!dt.test(g+m.event.triggered)&&(g.indexOf(".")>-1&&(g=(v=g.split(".")).shift(),v.sort()),u=g.indexOf(":")<0&&"on"+g,(t=t[m.expando]?t:new m.Event(g,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:m.makeArray(n,[t]),p=m.event.special[g]||{},o||!p.trigger||!1!==p.trigger.apply(r,n))){if(!o&&!p.noBubble&&!m.isWindow(r)){for(c=p.delegateType||g,dt.test(c+g)||(s=s.parentNode);s;s=s.parentNode)h.push(s),l=s;l===(r.ownerDocument||i)&&h.push(l.defaultView||l.parentWindow||e)}for(a=0;(s=h[a++])&&!t.isPropagationStopped();)t.type=a>1?c:p.bindType||g,(f=(z.get(s,"events")||{})[t.type]&&z.get(s,"handle"))&&f.apply(s,n),(f=u&&s[u])&&f.apply&&W(s)&&(t.result=f.apply(s,n),!1===t.result&&t.preventDefault());return t.type=g,o||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(h.pop(),n)||!W(r)||u&&m.isFunction(r[g])&&!m.isWindow(r)&&((l=r[u])&&(r[u]=null),m.event.triggered=g,r[g](),m.event.triggered=void 0,l&&(r[u]=l)),t.result}},simulate:function(e,t,n){var i=m.extend(new m.Event,n,{type:e,isSimulated:!0});m.event.trigger(i,null,t)}}),m.fn.extend({trigger:function(e,t){return this.each(function(){m.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return m.event.trigger(e,t,n,!0)}}),m.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){m.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),m.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),h.focusin="onfocusin"in e,h.focusin||m.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){m.event.simulate(t,e.target,m.event.fix(e))};m.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=z.access(i,t);r||i.addEventListener(e,n,!0),z.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=z.access(i,t)-1;r?z.access(i,t,r):(i.removeEventListener(e,n,!0),z.remove(i,t))}}});var ft=e.location,pt=m.now(),ht=/\?/;m.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||m.error("Invalid XML: "+t),n};var gt=/\[\]$/,mt=/\r?\n/g,vt=/^(?:submit|button|image|reset|file)$/i,yt=/^(?:input|select|textarea|keygen)/i;function bt(e,t,n,i){var r;if(Array.isArray(t))m.each(t,function(t,r){n||gt.test(e)?i(e,r):bt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==m.type(t))i(e,t);else for(r in t)bt(e+"["+r+"]",t[r],n,i)}m.param=function(e,t){var n,i=[],r=function(e,t){var n=m.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!m.isPlainObject(e))m.each(e,function(){r(this.name,this.value)});else for(n in e)bt(n,e[n],t,r);return i.join("&")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=m.prop(this,"elements");return e?m.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!m(this).is(":disabled")&&yt.test(this.nodeName)&&!vt.test(e)&&(this.checked||!oe.test(e))}).map(function(e,t){var n=m(this).val();return null==n?null:Array.isArray(n)?m.map(n,function(e){return{name:t.name,value:e.replace(mt,"\r\n")}}):{name:t.name,value:n.replace(mt,"\r\n")}}).get()}});var xt=/%20/g,wt=/#.*$/,kt=/([?&])_=[^&]*/,Ct=/^(.*?):[ \t]*([^\r\n]*)$/gm,St=/^(?:GET|HEAD)$/,Et=/^\/\//,Tt={},Dt={},Pt="*/".concat("*"),Mt=i.createElement("a");Mt.href=ft.href;function At(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(j)||[];if(m.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Ot(e,t,n,i){var r={},o=e===Dt;function a(s){var l;return r[s]=!0,m.each(e[s]||[],function(e,s){var c=s(t,n,i);return"string"!=typeof c||o||r[c]?o?!(l=c):void 0:(t.dataTypes.unshift(c),a(c),!1)}),l}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Lt(e,t){var n,i,r=m.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&m.extend(!0,e,i),e}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ft.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ft.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Pt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Lt(Lt(e,m.ajaxSettings),t):Lt(m.ajaxSettings,e)},ajaxPrefilter:At(Tt),ajaxTransport:At(Dt),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,o,a,s,l,c,u,d,f,p,h=m.ajaxSetup({},n),g=h.context||h,v=h.context&&(g.nodeType||g.jquery)?m(g):m.event,y=m.Deferred(),b=m.Callbacks("once memory"),x=h.statusCode||{},w={},k={},C="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=Ct.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?a:null},setRequestHeader:function(e,t){return null==u&&(e=k[e.toLowerCase()]=k[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)S.always(e[S.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||C;return r&&r.abort(t),E(0,t),this}};if(y.promise(S),h.url=((t||h.url||ft.href)+"").replace(Et,ft.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(j)||[""],null==h.crossDomain){c=i.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Mt.protocol+"//"+Mt.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=m.param(h.data,h.traditional)),Ot(Tt,h,n,S),u)return S;(d=m.event&&h.global)&&0==m.active++&&m.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!St.test(h.type),o=h.url.replace(wt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(xt,"+")):(p=h.url.slice(o.length),h.data&&(o+=(ht.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(kt,"$1"),p=(ht.test(o)?"&":"?")+"_="+pt+++p),h.url=o+p),h.ifModified&&(m.lastModified[o]&&S.setRequestHeader("If-Modified-Since",m.lastModified[o]),m.etag[o]&&S.setRequestHeader("If-None-Match",m.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&S.setRequestHeader("Content-Type",h.contentType),S.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Pt+"; q=0.01":""):h.accepts["*"]);for(f in h.headers)S.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(g,S,h)||u))return S.abort();if(C="abort",b.add(h.complete),S.done(h.success),S.fail(h.error),r=Ot(Dt,h,n,S)){if(S.readyState=1,d&&v.trigger("ajaxSend",[S,h]),u)return S;h.async&&h.timeout>0&&(l=e.setTimeout(function(){S.abort("timeout")},h.timeout));try{u=!1,r.send(w,E)}catch(e){if(u)throw e;E(-1,e)}}else E(-1,"No Transport");function E(t,n,i,s){var c,f,p,w,k,C=n;u||(u=!0,l&&e.clearTimeout(l),r=void 0,a=s||"",S.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(w=function(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(h,S,i)),w=function(e,t,n,i){var r,o,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=c[l+" "+o]||c["* "+o]))for(r in c)if((s=r.split(" "))[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[r]:!0!==c[r]&&(o=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(h,w,S,c),c?(h.ifModified&&((k=S.getResponseHeader("Last-Modified"))&&(m.lastModified[o]=k),(k=S.getResponseHeader("etag"))&&(m.etag[o]=k)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=w.state,f=w.data,c=!(p=w.error))):(p=C,!t&&C||(C="error",t<0&&(t=0))),S.status=t,S.statusText=(n||C)+"",c?y.resolveWith(g,[f,C,S]):y.rejectWith(g,[S,C,p]),S.statusCode(x),x=void 0,d&&v.trigger(c?"ajaxSuccess":"ajaxError",[S,h,c?f:p]),b.fireWith(g,[S,C]),d&&(v.trigger("ajaxComplete",[S,h]),--m.active||m.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return m.get(e,t,n,"json")},getScript:function(e,t){return m.get(e,void 0,t,"script")}}),m.each(["get","post"],function(e,t){m[t]=function(e,n,i,r){return m.isFunction(n)&&(r=r||i,i=n,n=void 0),m.ajax(m.extend({url:e,type:t,dataType:r,data:n,success:i},m.isPlainObject(e)&&e))}}),m._evalUrl=function(e){return m.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},m.fn.extend({wrapAll:function(e){var t;return this[0]&&(m.isFunction(e)&&(e=e.call(this[0])),t=m(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return m.isFunction(e)?this.each(function(t){m(this).wrapInner(e.call(this,t))}):this.each(function(){var t=m(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=m.isFunction(e);return this.each(function(n){m(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){m(this).replaceWith(this.childNodes)}),this}}),m.expr.pseudos.hidden=function(e){return!m.expr.pseudos.visible(e)},m.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},m.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Nt={0:200,1223:204},It=m.ajaxSettings.xhr();h.cors=!!It&&"withCredentials"in It,h.ajax=It=!!It,m.ajaxTransport(function(t){var n,i;if(h.cors||It&&!t.crossDomain)return{send:function(r,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(a in r)s.setRequestHeader(a,r[a]);n=function(e){return function(){n&&(n=i=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Nt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),i=s.onerror=n("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),m.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),m.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return m.globalEval(e),e}}}),m.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),m.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,o){t=m("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),i.head.appendChild(t[0])},abort:function(){n&&n()}}}});var jt=[],Ft=/(=)\?(?=&|$)|\?\?/;m.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=jt.pop()||m.expando+"_"+pt++;return this[e]=!0,e}}),m.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,a,s=!1!==t.jsonp&&(Ft.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ft.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=m.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Ft,"$1"+r):!1!==t.jsonp&&(t.url+=(ht.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return a||m.error(r+" was not called"),a[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){a=arguments},i.always(function(){void 0===o?m(e).removeProp(r):e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,jt.push(r)),a&&m.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),h.createHTMLDocument=function(){var e=i.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),m.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,o,a;return t||(h.createHTMLDocument?((r=(t=i.implementation.createHTMLDocument("")).createElement("base")).href=i.location.href,t.head.appendChild(r)):t=i),o=D.exec(e),a=!n&&[],o?[t.createElement(o[1])]:(o=fe([e],t,a),a&&a.length&&m(a).remove(),m.merge([],o.childNodes))},m.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return s>-1&&(i=lt(e.slice(s)),e=e.slice(0,s)),m.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&m.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(i?m("<div>").append(m.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},m.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){m.fn[t]=function(e){return this.on(t,e)}}),m.expr.pseudos.animated=function(e){return m.grep(m.timers,function(t){return e===t.elem}).length},m.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,c=m.css(e,"position"),u=m(e),d={};"static"===c&&(e.style.position="relative"),s=u.offset(),o=m.css(e,"top"),l=m.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(a=(i=u.position()).top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),m.isFunction(t)&&(t=t.call(e,n,m.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+r),"using"in t?t.using.call(e,d):u.css(d)}},m.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){m.offset.setOffset(this,e,t)});var t,n,i,r,o=this[0];if(o)return o.getClientRects().length?(i=o.getBoundingClientRect(),n=(t=o.ownerDocument).documentElement,r=t.defaultView,{top:i.top+r.pageYOffset-n.clientTop,left:i.left+r.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===m.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),T(e[0],"html")||(i=e.offset()),i={top:i.top+m.css(e[0],"borderTopWidth",!0),left:i.left+m.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-m.css(n,"marginTop",!0),left:t.left-i.left-m.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===m.css(e,"position");)e=e.offsetParent;return e||pe})}}),m.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;m.fn[e]=function(i){return q(this,function(e,i,r){var o;if(m.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r},e,i,arguments.length)}}),m.each(["top","left"],function(e,t){m.cssHooks[t]=Re(h.pixelPosition,function(e,n){if(n)return n=Fe(e,t),Ie.test(n)?m(e).position()[t]+"px":n})}),m.each({Height:"height",Width:"width"},function(e,t){m.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){m.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===o?"margin":"border");return q(this,function(t,n,r){var o;return m.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?m.css(t,n,s):m.style(t,n,r,s)},t,a?r:void 0,a)}})}),m.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),m.holdReady=function(e){e?m.readyWait++:m.ready(!0)},m.isArray=Array.isArray,m.parseJSON=JSON.parse,m.nodeName=T,"function"==typeof define&&define.amd&&define("jquery",[],function(){return m});var Rt=e.jQuery,$t=e.$;return m.noConflict=function(t){return e.$===m&&(e.$=$t),t&&e.jQuery===m&&(e.jQuery=Rt),m},t||(e.jQuery=e.$=m),m}),function(e){var t={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};e.fn.bxSlider=function(n){if(0===this.length)return this;if(this.length>1)return this.each(function(){e(this).bxSlider(n)}),this;var r={},o=this,a=e(window).width(),s=e(window).height();if(!e(o).data("bxSlider")){var l=function(){e(o).data("bxSlider")||(r.settings=e.extend({},t,n),r.settings.slideWidth=parseInt(r.settings.slideWidth),r.children=o.children(r.settings.slideSelector),r.children.length<r.settings.minSlides&&(r.settings.minSlides=r.children.length),r.children.length<r.settings.maxSlides&&(r.settings.maxSlides=r.children.length),r.settings.randomStart&&(r.settings.startSlide=Math.floor(Math.random()*r.children.length)),r.active={index:r.settings.startSlide},r.carousel=r.settings.minSlides>1||r.settings.maxSlides>1,r.carousel&&(r.settings.preloadImages="all"),r.minThreshold=r.settings.minSlides*r.settings.slideWidth+(r.settings.minSlides-1)*r.settings.slideMargin,r.maxThreshold=r.settings.maxSlides*r.settings.slideWidth+(r.settings.maxSlides-1)*r.settings.slideMargin,r.working=!1,r.controls={},r.interval=null,r.animProp="vertical"===r.settings.mode?"top":"left",r.usingCSS=r.settings.useCSS&&"fade"!==r.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return r.cssPrefix=t[n].replace("Perspective","").toLowerCase(),r.animProp="-"+r.cssPrefix+"-transform",!0;return!1}(),"vertical"===r.settings.mode&&(r.settings.maxSlides=r.settings.minSlides),o.data("origStyle",o.attr("style")),o.children(r.settings.slideSelector).each(function(){e(this).data("origStyle",e(this).attr("style"))}),c())},c=function(){var t=r.children.eq(r.settings.startSlide);o.wrap('<div class="'+r.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),r.viewport=o.parent(),r.settings.ariaLive&&!r.settings.ticker&&r.viewport.attr("aria-live","polite"),r.loader=e('<div class="bx-loading" />'),r.viewport.prepend(r.loader),o.css({width:"horizontal"===r.settings.mode?1e3*r.children.length+215+"%":"auto",position:"relative"}),r.usingCSS&&r.settings.easing?o.css("-"+r.cssPrefix+"-transition-timing-function",r.settings.easing):r.settings.easing||(r.settings.easing="swing"),r.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),r.viewport.parent().css({maxWidth:p()}),r.children.css({float:"horizontal"===r.settings.mode?"left":"none",listStyle:"none",position:"relative"}),r.children.css("width",h()),"horizontal"===r.settings.mode&&r.settings.slideMargin>0&&r.children.css("marginRight",r.settings.slideMargin),"vertical"===r.settings.mode&&r.settings.slideMargin>0&&r.children.css("marginBottom",r.settings.slideMargin),"fade"===r.settings.mode&&(r.children.css({position:"absolute",zIndex:0,display:"none"}),r.children.eq(r.settings.startSlide).css({zIndex:r.settings.slideZIndex,display:"block"})),r.controls.el=e('<div class="bx-controls" />'),r.settings.captions&&S(),r.active.last=r.settings.startSlide===m()-1,r.settings.video&&o.fitVids(),("all"===r.settings.preloadImages||r.settings.ticker)&&(t=r.children),r.settings.ticker?r.settings.pager=!1:(r.settings.controls&&k(),r.settings.auto&&r.settings.autoControls&&C(),r.settings.pager&&w(),(r.settings.controls||r.settings.autoControls||r.settings.pager)&&r.viewport.after(r.controls.el)),u(t,d)},u=function(t,n){var i=t.find('img:not([src=""]), iframe').length,r=0;0!==i?t.find('img:not([src=""]), iframe').each(function(){e(this).one("load error",function(){++r===i&&n()}).each(function(){(this.complete||""==this.src)&&e(this).trigger("load")})}):n()},d=function(){if(r.settings.infiniteLoop&&"fade"!==r.settings.mode&&!r.settings.ticker){var t="vertical"===r.settings.mode?r.settings.minSlides:r.settings.maxSlides,n=r.children.slice(0,t).clone(!0).addClass("bx-clone"),i=r.children.slice(-t).clone(!0).addClass("bx-clone");r.settings.ariaHidden&&(n.attr("aria-hidden",!0),i.attr("aria-hidden",!0)),o.append(n).prepend(i)}r.loader.remove(),y(),"vertical"===r.settings.mode&&(r.settings.adaptiveHeight=!0),r.viewport.height(f()),o.redrawSlider(),r.settings.onSliderLoad.call(o,r.active.index),r.initialized=!0,r.settings.responsive&&e(window).bind("resize",z),r.settings.auto&&r.settings.autoStart&&(m()>1||r.settings.autoSlideForOnePage)&&F(),r.settings.ticker&&R(),r.settings.pager&&A(r.settings.startSlide),r.settings.controls&&N(),r.settings.touchEnabled&&!r.settings.ticker&&H(),r.settings.keyboardEnabled&&!r.settings.ticker&&e(document).keydown(_)},f=function(){var t=0,n=e();if("vertical"===r.settings.mode||r.settings.adaptiveHeight)if(r.carousel){var o=1===r.settings.moveSlides?r.active.index:r.active.index*v();for(n=r.children.eq(o),i=1;i<=r.settings.maxSlides-1;i++)n=o+i>=r.children.length?n.add(r.children.eq(i-1)):n.add(r.children.eq(o+i))}else n=r.children.eq(r.active.index);else n=r.children;return"vertical"===r.settings.mode?(n.each(function(n){t+=e(this).outerHeight()}),r.settings.slideMargin>0&&(t+=r.settings.slideMargin*(r.settings.minSlides-1))):t=Math.max.apply(Math,n.map(function(){return e(this).outerHeight(!1)}).get()),"border-box"===r.viewport.css("box-sizing")?t+=parseFloat(r.viewport.css("padding-top"))+parseFloat(r.viewport.css("padding-bottom"))+parseFloat(r.viewport.css("border-top-width"))+parseFloat(r.viewport.css("border-bottom-width")):"padding-box"===r.viewport.css("box-sizing")&&(t+=parseFloat(r.viewport.css("padding-top"))+parseFloat(r.viewport.css("padding-bottom"))),t},p=function(){var e="100%";return r.settings.slideWidth>0&&(e="horizontal"===r.settings.mode?r.settings.maxSlides*r.settings.slideWidth+(r.settings.maxSlides-1)*r.settings.slideMargin:r.settings.slideWidth),e},h=function(){var e=r.settings.slideWidth,t=r.viewport.width();if(0===r.settings.slideWidth||r.settings.slideWidth>t&&!r.carousel||"vertical"===r.settings.mode)e=t;else if(r.settings.maxSlides>1&&"horizontal"===r.settings.mode){if(t>r.maxThreshold)return e;t<r.minThreshold?e=(t-r.settings.slideMargin*(r.settings.minSlides-1))/r.settings.minSlides:r.settings.shrinkItems&&(e=Math.floor((t+r.settings.slideMargin)/Math.ceil((t+r.settings.slideMargin)/(e+r.settings.slideMargin))-r.settings.slideMargin))}return e},g=function(){var e=1,t=null;return"horizontal"===r.settings.mode&&r.settings.slideWidth>0?r.viewport.width()<r.minThreshold?e=r.settings.minSlides:r.viewport.width()>r.maxThreshold?e=r.settings.maxSlides:(t=r.children.first().width()+r.settings.slideMargin,e=Math.floor((r.viewport.width()+r.settings.slideMargin)/t)||1):"vertical"===r.settings.mode&&(e=r.settings.minSlides),e},m=function(){var e=0,t=0,n=0;if(r.settings.moveSlides>0){if(!r.settings.infiniteLoop){for(;t<r.children.length;)++e,t=n+g(),n+=r.settings.moveSlides<=g()?r.settings.moveSlides:g();return n}e=Math.ceil(r.children.length/v())}else e=Math.ceil(r.children.length/g());return e},v=function(){return r.settings.moveSlides>0&&r.settings.moveSlides<=g()?r.settings.moveSlides:g()},y=function(){var e,t,n;r.children.length>r.settings.maxSlides&&r.active.last&&!r.settings.infiniteLoop?"horizontal"===r.settings.mode?(e=(t=r.children.last()).position(),b(-(e.left-(r.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===r.settings.mode&&(n=r.children.length-r.settings.minSlides,e=r.children.eq(n).position(),b(-e.top,"reset",0)):(e=r.children.eq(r.active.index*v()).position(),r.active.index===m()-1&&(r.active.last=!0),void 0!==e&&("horizontal"===r.settings.mode?b(-e.left,"reset",0):"vertical"===r.settings.mode&&b(-e.top,"reset",0)))},b=function(t,n,i,a){var s,l;r.usingCSS?(l="vertical"===r.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)",o.css("-"+r.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"===n?(o.css(r.animProp,l),0!==i?o.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){e(t.target).is(o)&&(o.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),O())}):O()):"reset"===n?o.css(r.animProp,l):"ticker"===n&&(o.css("-"+r.cssPrefix+"-transition-timing-function","linear"),o.css(r.animProp,l),0!==i?o.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){e(t.target).is(o)&&(o.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),b(a.resetValue,"reset",0),$())}):(b(a.resetValue,"reset",0),$()))):((s={})[r.animProp]=t,"slide"===n?o.animate(s,i,r.settings.easing,function(){O()}):"reset"===n?o.css(r.animProp,t):"ticker"===n&&o.animate(s,i,"linear",function(){b(a.resetValue,"reset",0),$()}))},x=function(){for(var t="",n="",i=m(),o=0;o<i;o++)n="",r.settings.buildPager&&e.isFunction(r.settings.buildPager)||r.settings.pagerCustom?(n=r.settings.buildPager(o),r.pagerEl.addClass("bx-custom-pager")):(n=o+1,r.pagerEl.addClass("bx-default-pager")),t+='<div class="bx-pager-item"><a href="" data-slide-index="'+o+'" class="bx-pager-link">'+n+"</a></div>";r.pagerEl.html(t)},w=function(){r.settings.pagerCustom?r.pagerEl=e(r.settings.pagerCustom):(r.pagerEl=e('<div class="bx-pager" />'),r.settings.pagerSelector?e(r.settings.pagerSelector).html(r.pagerEl):r.controls.el.addClass("bx-has-pager").append(r.pagerEl),x()),r.pagerEl.on("click touchend","a",M)},k=function(){r.controls.next=e('<a class="bx-next" href="">'+r.settings.nextText+"</a>"),r.controls.prev=e('<a class="bx-prev" href="">'+r.settings.prevText+"</a>"),r.controls.next.bind("click touchend",E),r.controls.prev.bind("click touchend",T),r.settings.nextSelector&&e(r.settings.nextSelector).append(r.controls.next),r.settings.prevSelector&&e(r.settings.prevSelector).append(r.controls.prev),r.settings.nextSelector||r.settings.prevSelector||(r.controls.directionEl=e('<div class="bx-controls-direction" />'),r.controls.directionEl.append(r.controls.prev).append(r.controls.next),r.controls.el.addClass("bx-has-controls-direction").append(r.controls.directionEl))},C=function(){r.controls.start=e('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+r.settings.startText+"</a></div>"),r.controls.stop=e('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+r.settings.stopText+"</a></div>"),r.controls.autoEl=e('<div class="bx-controls-auto" />'),r.controls.autoEl.on("click",".bx-start",D),r.controls.autoEl.on("click",".bx-stop",P),r.settings.autoControlsCombine?r.controls.autoEl.append(r.controls.start):r.controls.autoEl.append(r.controls.start).append(r.controls.stop),r.settings.autoControlsSelector?e(r.settings.autoControlsSelector).html(r.controls.autoEl):r.controls.el.addClass("bx-has-controls-auto").append(r.controls.autoEl),L(r.settings.autoStart?"stop":"start")},S=function(){r.children.each(function(t){var n=e(this).find("img:first").attr("title");void 0!==n&&(""+n).length&&e(this).append('<div class="bx-caption"><span>'+n+"</span></div>")})},E=function(e){e.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),o.goToNextSlide())},T=function(e){e.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),o.goToPrevSlide())},D=function(e){o.startAuto(),e.preventDefault()},P=function(e){o.stopAuto(),e.preventDefault()},M=function(t){var n,i;t.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),void 0!==(n=e(t.currentTarget)).attr("data-slide-index")&&(i=parseInt(n.attr("data-slide-index")))!==r.active.index&&o.goToSlide(i))},A=function(t){var n=r.children.length;if("short"===r.settings.pagerType)return r.settings.maxSlides>1&&(n=Math.ceil(r.children.length/r.settings.maxSlides)),void r.pagerEl.html(t+1+r.settings.pagerShortSeparator+n);r.pagerEl.find("a").removeClass("active"),r.pagerEl.each(function(n,i){e(i).find("a").eq(t).addClass("active")})},O=function(){if(r.settings.infiniteLoop){var e="";0===r.active.index?e=r.children.eq(0).position():r.active.index===m()-1&&r.carousel?e=r.children.eq((m()-1)*v()).position():r.active.index===r.children.length-1&&(e=r.children.eq(r.children.length-1).position()),e&&("horizontal"===r.settings.mode?b(-e.left,"reset",0):"vertical"===r.settings.mode&&b(-e.top,"reset",0))}r.working=!1,r.settings.onSlideAfter.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)},L=function(e){r.settings.autoControlsCombine?r.controls.autoEl.html(r.controls[e]):(r.controls.autoEl.find("a").removeClass("active"),r.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},N=function(){1===m()?(r.controls.prev.addClass("disabled"),r.controls.next.addClass("disabled")):!r.settings.infiniteLoop&&r.settings.hideControlOnEnd&&(0===r.active.index?(r.controls.prev.addClass("disabled"),r.controls.next.removeClass("disabled")):r.active.index===m()-1?(r.controls.next.addClass("disabled"),r.controls.prev.removeClass("disabled")):(r.controls.prev.removeClass("disabled"),r.controls.next.removeClass("disabled")))},I=function(){o.startAuto()},j=function(){o.stopAuto()},F=function(){if(r.settings.autoDelay>0)setTimeout(o.startAuto,r.settings.autoDelay);else o.startAuto(),e(window).focus(I).blur(j);r.settings.autoHover&&o.hover(function(){r.interval&&(o.stopAuto(!0),r.autoPaused=!0)},function(){r.autoPaused&&(o.startAuto(!0),r.autoPaused=null)})},R=function(){var t,n,i,a,s,l,c,u,d=0;"next"===r.settings.autoDirection?o.append(r.children.clone().addClass("bx-clone")):(o.prepend(r.children.clone().addClass("bx-clone")),t=r.children.first().position(),d="horizontal"===r.settings.mode?-t.left:-t.top),b(d,"reset",0),r.settings.pager=!1,r.settings.controls=!1,r.settings.autoControls=!1,r.settings.tickerHover&&(r.usingCSS?(a="horizontal"===r.settings.mode?4:5,r.viewport.hover(function(){n=o.css("-"+r.cssPrefix+"-transform"),i=parseFloat(n.split(",")[a]),b(i,"reset",0)},function(){u=0,r.children.each(function(t){u+="horizontal"===r.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),s=r.settings.speed/u,l="horizontal"===r.settings.mode?"left":"top",c=s*(u-Math.abs(parseInt(i))),$(c)})):r.viewport.hover(function(){o.stop()},function(){u=0,r.children.each(function(t){u+="horizontal"===r.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),s=r.settings.speed/u,l="horizontal"===r.settings.mode?"left":"top",c=s*(u-Math.abs(parseInt(o.css(l)))),$(c)})),$()},$=function(e){var t,n,i=e||r.settings.speed,a={left:0,top:0},s={left:0,top:0};"next"===r.settings.autoDirection?a=o.find(".bx-clone").first().position():s=r.children.first().position(),t="horizontal"===r.settings.mode?-a.left:-a.top,n="horizontal"===r.settings.mode?-s.left:-s.top,b(t,"ticker",i,{resetValue:n})},_=function(t){var n=document.activeElement.tagName.toLowerCase();if(null==new RegExp(n,["i"]).exec("input|textarea")&&function(t){var n=e(window),i={top:n.scrollTop(),left:n.scrollLeft()},r=t.offset();return i.right=i.left+n.width(),i.bottom=i.top+n.height(),r.right=r.left+t.outerWidth(),r.bottom=r.top+t.outerHeight(),!(i.right<r.left||i.left>r.right||i.bottom<r.top||i.top>r.bottom)}(o)){if(39===t.keyCode)return E(t),!1;if(37===t.keyCode)return T(t),!1}},H=function(){r.touch={start:{x:0,y:0},end:{x:0,y:0}},r.viewport.bind("touchstart MSPointerDown pointerdown",B),r.viewport.on("click",".bxslider a",function(e){r.viewport.hasClass("click-disabled")&&(e.preventDefault(),r.viewport.removeClass("click-disabled"))})},B=function(e){if(r.controls.el.addClass("disabled"),r.working)e.preventDefault(),r.controls.el.removeClass("disabled");else{r.touch.originalPos=o.position();var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t];r.touch.start.x=n[0].pageX,r.touch.start.y=n[0].pageY,r.viewport.get(0).setPointerCapture&&(r.pointerId=t.pointerId,r.viewport.get(0).setPointerCapture(r.pointerId)),r.viewport.bind("touchmove MSPointerMove pointermove",W),r.viewport.bind("touchend MSPointerUp pointerup",Y),r.viewport.bind("MSPointerCancel pointercancel",q)}},q=function(e){b(r.touch.originalPos.left,"reset",0),r.controls.el.removeClass("disabled"),r.viewport.unbind("MSPointerCancel pointercancel",q),r.viewport.unbind("touchmove MSPointerMove pointermove",W),r.viewport.unbind("touchend MSPointerUp pointerup",Y),r.viewport.get(0).releasePointerCapture&&r.viewport.get(0).releasePointerCapture(r.pointerId)},W=function(e){var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-r.touch.start.x),o=Math.abs(n[0].pageY-r.touch.start.y),a=0,s=0;3*i>o&&r.settings.preventDefaultSwipeX?e.preventDefault():3*o>i&&r.settings.preventDefaultSwipeY&&e.preventDefault(),"fade"!==r.settings.mode&&r.settings.oneToOneTouch&&("horizontal"===r.settings.mode?(s=n[0].pageX-r.touch.start.x,a=r.touch.originalPos.left+s):(s=n[0].pageY-r.touch.start.y,a=r.touch.originalPos.top+s),b(a,"reset",0))},Y=function(e){r.viewport.unbind("touchmove MSPointerMove pointermove",W),r.controls.el.removeClass("disabled");var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=0,a=0;r.touch.end.x=n[0].pageX,r.touch.end.y=n[0].pageY,"fade"===r.settings.mode?(a=Math.abs(r.touch.start.x-r.touch.end.x))>=r.settings.swipeThreshold&&(r.touch.start.x>r.touch.end.x?o.goToNextSlide():o.goToPrevSlide(),o.stopAuto()):("horizontal"===r.settings.mode?(a=r.touch.end.x-r.touch.start.x,i=r.touch.originalPos.left):(a=r.touch.end.y-r.touch.start.y,i=r.touch.originalPos.top),!r.settings.infiniteLoop&&(0===r.active.index&&a>0||r.active.last&&a<0)?b(i,"reset",200):Math.abs(a)>=r.settings.swipeThreshold?(a<0?o.goToNextSlide():o.goToPrevSlide(),o.stopAuto()):b(i,"reset",200)),r.viewport.unbind("touchend MSPointerUp pointerup",Y),r.viewport.get(0).releasePointerCapture&&r.viewport.get(0).releasePointerCapture(r.pointerId)},z=function(t){if(r.initialized)if(r.working)window.setTimeout(z,10);else{var n=e(window).width(),i=e(window).height();a===n&&s===i||(a=n,s=i,o.redrawSlider(),r.settings.onSliderResize.call(o,r.active.index))}},U=function(e){var t=g();r.settings.ariaHidden&&!r.settings.ticker&&(r.children.attr("aria-hidden","true"),r.children.slice(e,e+t).attr("aria-hidden","false"))};return o.goToSlide=function(t,n){var i,a,s,l,c=!0,u=0,d={left:0,top:0},p=null;r.oldIndex=r.active.index,r.active.index=(h=t,h<0?r.settings.infiniteLoop?m()-1:r.active.index:h>=m()?r.settings.infiniteLoop?0:r.active.index:h);var h;if(!r.working&&r.active.index!==r.oldIndex){if(r.working=!0,void 0!==(c=r.settings.onSlideBefore.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index))&&!c)return r.active.index=r.oldIndex,void(r.working=!1);"next"===n?r.settings.onSlideNext.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)||(c=!1):"prev"===n&&(r.settings.onSlidePrev.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)||(c=!1)),r.active.last=r.active.index>=m()-1,(r.settings.pager||r.settings.pagerCustom)&&A(r.active.index),r.settings.controls&&N(),"fade"===r.settings.mode?(r.settings.adaptiveHeight&&r.viewport.height()!==f()&&r.viewport.animate({height:f()},r.settings.adaptiveHeightSpeed),r.children.filter(":visible").fadeOut(r.settings.speed).css({zIndex:0}),r.children.eq(r.active.index).css("zIndex",r.settings.slideZIndex+1).fadeIn(r.settings.speed,function(){e(this).css("zIndex",r.settings.slideZIndex),O()})):(r.settings.adaptiveHeight&&r.viewport.height()!==f()&&r.viewport.animate({height:f()},r.settings.adaptiveHeightSpeed),!r.settings.infiniteLoop&&r.carousel&&r.active.last?"horizontal"===r.settings.mode?(d=(p=r.children.eq(r.children.length-1)).position(),u=r.viewport.width()-p.outerWidth()):(i=r.children.length-r.settings.minSlides,d=r.children.eq(i).position()):r.carousel&&r.active.last&&"prev"===n?(a=1===r.settings.moveSlides?r.settings.maxSlides-v():(m()-1)*v()-(r.children.length-r.settings.maxSlides),d=(p=o.children(".bx-clone").eq(a)).position()):"next"===n&&0===r.active.index?(d=o.find("> .bx-clone").eq(r.settings.maxSlides).position(),r.active.last=!1):t>=0&&(l=t*parseInt(v()),d=r.children.eq(l).position()),void 0!==d&&(s="horizontal"===r.settings.mode?-(d.left-u):-d.top,b(s,"slide",r.settings.speed)),r.working=!1),r.settings.ariaHidden&&U(r.active.index*v())}},o.goToNextSlide=function(){if((r.settings.infiniteLoop||!r.active.last)&&1!=r.working){var e=parseInt(r.active.index)+1;o.goToSlide(e,"next")}},o.goToPrevSlide=function(){if((r.settings.infiniteLoop||0!==r.active.index)&&1!=r.working){var e=parseInt(r.active.index)-1;o.goToSlide(e,"prev")}},o.startAuto=function(e){r.interval||(r.interval=setInterval(function(){"next"===r.settings.autoDirection?o.goToNextSlide():o.goToPrevSlide()},r.settings.pause),r.settings.onAutoChange.call(o,!0),r.settings.autoControls&&!0!==e&&L("stop"))},o.stopAuto=function(e){r.interval&&(clearInterval(r.interval),r.interval=null,r.settings.onAutoChange.call(o,!1),r.settings.autoControls&&!0!==e&&L("start"))},o.getCurrentSlide=function(){return r.active.index},o.getCurrentSlideElement=function(){return r.children.eq(r.active.index)},o.getSlideElement=function(e){return r.children.eq(e)},o.getSlideCount=function(){return r.children.length},o.isWorking=function(){return r.working},o.redrawSlider=function(){r.children.add(o.find(".bx-clone")).outerWidth(h()),r.viewport.css("height",f()),r.settings.ticker||y(),r.active.last&&(r.active.index=m()-1),r.active.index>=m()&&(r.active.last=!0),r.settings.pager&&!r.settings.pagerCustom&&(x(),A(r.active.index)),r.settings.ariaHidden&&U(r.active.index*v())},o.destroySlider=function(){r.initialized&&(r.initialized=!1,e(".bx-clone",this).remove(),r.children.each(function(){void 0!==e(this).data("origStyle")?e(this).attr("style",e(this).data("origStyle")):e(this).removeAttr("style")}),void 0!==e(this).data("origStyle")?this.attr("style",e(this).data("origStyle")):e(this).removeAttr("style"),e(this).unwrap().unwrap(),r.controls.el&&r.controls.el.remove(),r.controls.next&&r.controls.next.remove(),r.controls.prev&&r.controls.prev.remove(),r.pagerEl&&r.settings.controls&&!r.settings.pagerCustom&&r.pagerEl.remove(),e(".bx-caption",this).remove(),r.controls.autoEl&&r.controls.autoEl.remove(),clearInterval(r.interval),r.settings.responsive&&e(window).unbind("resize",z),r.settings.keyboardEnabled&&e(document).unbind("keydown",_),e(this).removeData("bxSlider"),e(window).off("blur",j).off("focus",I))},o.reloadSlider=function(t){void 0!==t&&(n=t),o.destroySlider(),l(),e(o).data("bxSlider",this)},l(),e(o).data("bxSlider",this),this}}}(jQuery),function(e,t,n,i){"use strict";if(n)if(n.fn.fancybox)"console"in e&&console.log("fancyBox already initialized");else{var r={loop:!1,margin:[44,0],gutter:50,keyboard:!0,arrows:!0,infobar:!0,toolbar:!0,buttons:["slideShow","fullScreen","thumbs","share","close"],idleTime:3,smallBtn:"auto",protect:!1,modal:!1,image:{preload:"auto"},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},defaultType:"image",animationEffect:"zoom",animationDuration:500,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}<p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}"><svg viewBox="0 0 40 40"><path d="M20,23 L20,8 L20,23 L13,16 L20,23 L27,16 L20,23 M26,28 L13,28 L27,28 L14,28" /></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg viewBox="0 0 40 40"><path d="M 18,17 m-8,0 a 8,8 0 1,0 16,0 a 8,8 0 1,0 -16,0 M25,23 L31,29 L25,23" /></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg viewBox="0 0 40 40"><path d="M10,10 L30,30 M30,10 L10,30" /></svg></button>',smallBtn:'<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><svg viewBox="0 0 40 40"><path d="M10,20 L30,20 L10,20 L18,28 L10,20 L18,12 L10,20"></path></svg></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><svg viewBox="0 0 40 40"><path d="M30,20 L10,20 L30,20 L22,28 L30,20 L22,12 L30,20"></path></svg></button>'},parentEl:"body",autoFocus:!1,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:4e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{margin:0,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"ZurÃ¼ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es spÃ¤ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"MaÃstab"}}},o=n(e),a=n(t),s=0,l=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)},c=function(){var e,n=t.createElement("fakeelement"),r={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in r)if(n.style[e]!==i)return r[e];return"transitionend"}(),u=function(e){return e&&e.length&&e[0].offsetHeight},d=function(e,i,r){this.opts=n.extend(!0,{index:r},n.fancybox.defaults,i||{}),n.fancybox.isMobile&&(this.opts=n.extend(!0,{},this.opts,this.opts.mobile)),i&&n.isArray(i.buttons)&&(this.opts.buttons=i.buttons),this.id=this.opts.id||++s,this.group=[],this.currIndex=parseInt(this.opts.index,10)||0,this.prevIndex=null,this.prevPos=null,this.currPos=0,this.firstRun=null,this.createGroup(e),this.group.length&&(this.$lastFocus=n(t.activeElement).blur(),this.slides={},this.init())};n.extend(d.prototype,{init:function(){var r,o,s,l=this,c=l.group[l.currIndex],u=c.opts,d=n.fancybox.scrollbarWidth;l.scrollTop=a.scrollTop(),l.scrollLeft=a.scrollLeft(),n.fancybox.getInstance()||(n("body").addClass("fancybox-active"),/iPad|iPhone|iPod/.test(navigator.userAgent)&&!e.MSStream?"image"!==c.type&&n("body").css("top",-1*n("body").scrollTop()).addClass("fancybox-iosfix"):!n.fancybox.isMobile&&t.body.scrollHeight>e.innerHeight&&(d===i&&(r=n('<div style="width:50px;height:50px;overflow:scroll;" />').appendTo("body"),d=n.fancybox.scrollbarWidth=r[0].offsetWidth-r[0].clientWidth,r.remove()),n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar { margin-right: '+d+"px; }</style>"),n("body").addClass("compensate-for-scrollbar"))),s="",n.each(u.buttons,function(e,t){s+=u.btnTpl[t]||""}),o=n(l.translate(l,u.baseTpl.replace("{{buttons}}",s).replace("{{arrows}}",u.btnTpl.arrowLeft+u.btnTpl.arrowRight))).attr("id","fancybox-container-"+l.id).addClass("fancybox-is-hidden").addClass(u.baseClass).data("FancyBox",l).appendTo(u.parentEl),l.$refs={container:o},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){l.$refs[e]=o.find(".fancybox-"+e)}),l.trigger("onInit"),l.activate(),l.jumpTo(l.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang];return t.replace(/\{\{(\w+)\}\}/g,function(e,t){var r=n[t];return r===i?e:r})},createGroup:function(e){var t=this,r=n.makeArray(e);n.each(r,function(e,r){var o,a,s,l,c={},u={};n.isPlainObject(r)?(c=r,u=r.opts||r):"object"===n.type(r)&&n(r).length?(u=(o=n(r)).data(),(u=n.extend({},u,u.options||{})).$orig=o,c.src=u.src||o.attr("href"),c.type||c.src||(c.type="inline",c.src=r)):c={type:"html",src:r+""},c.opts=n.extend(!0,{},t.opts,u),n.isArray(u.buttons)&&(c.opts.buttons=u.buttons),a=c.type||c.opts.type,s=c.src||"",!a&&s&&(s.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?a="image":s.match(/\.(pdf)((\?|#).*)?$/i)?a="pdf":"#"===s.charAt(0)&&(a="inline")),a?c.type=a:t.trigger("objectNeedsType",c),c.index=t.group.length,c.opts.$orig&&!c.opts.$orig.length&&delete c.opts.$orig,!c.opts.$thumb&&c.opts.$orig&&(c.opts.$thumb=c.opts.$orig.find("img:first")),c.opts.$thumb&&!c.opts.$thumb.length&&delete c.opts.$thumb,"function"===n.type(c.opts.caption)&&(c.opts.caption=c.opts.caption.apply(r,[t,c])),"function"===n.type(t.opts.caption)&&(c.opts.caption=t.opts.caption.apply(r,[t,c])),c.opts.caption instanceof n||(c.opts.caption=c.opts.caption===i?"":c.opts.caption+""),"ajax"===a&&(l=s.split(/\s+/,2)).length>1&&(c.src=l.shift(),c.opts.filter=l.shift()),"auto"==c.opts.smallBtn&&(n.inArray(a,["html","inline","ajax"])>-1?(c.opts.toolbar=!1,c.opts.smallBtn=!0):c.opts.smallBtn=!1),"pdf"===a&&(c.type="iframe",c.opts.iframe.preload=!1),c.opts.modal&&(c.opts=n.extend(!0,c.opts,{infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),t.group.push(c)})},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("click.fb-prev touchend.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("click.fb-next touchend.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}).on("click.fb","[data-fancybox-zoom]",function(e){i[i.isScaledDown()?"scaleToActual":"scaleToFit"]()}),o.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?l(function(){i.update()}):(i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update()},600))}),a.on("focusin.fb",function(e){var r=n.fancybox?n.fancybox.getInstance():null;r.isClosing||!r.current||!r.current.opts.trapFocus||n(e.target).hasClass("fancybox-container")||n(e.target).is(t)||r&&"fixed"!==n(e.target).css("position")&&!r.$refs.container.has(e.target).length&&(e.stopPropagation(),r.focus(),o.scrollTop(i.scrollTop).scrollLeft(i.scrollLeft))}),a.on("keydown.fb",function(e){var t=i.current,r=e.keyCode||e.which;if(t&&t.opts.keyboard&&!n(e.target).is("input")&&!n(e.target).is("textarea"))return 8===r||27===r?(e.preventDefault(),void i.close(e)):37===r||38===r?(e.preventDefault(),void i.previous()):39===r||40===r?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,r)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,a.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=e.setInterval(function(){i.idleSecondsCounter++,i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){o.off("orientationchange.fb resize.fb"),a.off("focusin.fb keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(e.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,t,r){var o,a,s,l,c,d,f,p=this,h=p.group.length;if(!(p.isSliding||p.isClosing||p.isAnimating&&p.firstRun)){if(e=parseInt(e,10),!(a=p.current?p.current.opts.loop:p.opts.loop)&&(e<0||e>=h))return!1;if(o=p.firstRun=null===p.firstRun,!(h<2&&!o&&p.isSliding)){if(l=p.current,p.prevIndex=p.currIndex,p.prevPos=p.currPos,s=p.createSlide(e),h>1&&((a||s.index>0)&&p.createSlide(e-1),(a||s.index<h-1)&&p.createSlide(e+1)),p.current=s,p.currIndex=s.index,p.currPos=s.pos,p.trigger("beforeShow",o),p.updateControls(),d=n.fancybox.getTranslate(s.$slide),s.isMoved=(0!==d.left||0!==d.top)&&!s.$slide.hasClass("fancybox-animated"),s.forcedDuration=i,n.isNumeric(t)?s.forcedDuration=t:t=s.opts[o?"animationDuration":"transitionDuration"],t=parseInt(t,10),o)return s.opts.animationEffect&&t&&p.$refs.container.css("transition-duration",t+"ms"),p.$refs.container.removeClass("fancybox-is-hidden"),u(p.$refs.container),p.$refs.container.addClass("fancybox-is-open"),s.$slide.addClass("fancybox-slide--current"),p.loadSlide(s),void p.preload();n.each(p.slides,function(e,t){n.fancybox.stop(t.$slide)}),s.$slide.removeClass("fancybox-slide--next fancybox-slide--previous").addClass("fancybox-slide--current"),s.isMoved?(c=Math.round(s.$slide.width()),n.each(p.slides,function(e,i){var r=i.pos-s.pos;n.fancybox.animate(i.$slide,{top:0,left:r*c+r*i.opts.gutter},t,function(){i.$slide.removeAttr("style").removeClass("fancybox-slide--next fancybox-slide--previous"),i.pos===p.currPos&&(s.isMoved=!1,p.complete())})})):p.$refs.stage.children().removeAttr("style"),s.isLoaded?p.revealContent(s):p.loadSlide(s),p.preload(),l.pos!==s.pos&&(f="fancybox-slide--"+(l.pos>s.pos?"next":"previous"),l.$slide.removeClass("fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous"),l.isComplete=!1,t&&(s.isMoved||s.opts.transitionEffect)&&(s.isMoved?l.$slide.addClass(f):(f="fancybox-animated "+f+" fancybox-fx-"+s.opts.transitionEffect,n.fancybox.animate(l.$slide,f,t,function(){l.$slide.removeClass(f).removeAttr("style")}))))}}},createSlide:function(e){var t,i;return i=(i=e%this.group.length)<0?this.group.length+i:i,!this.slides[e]&&this.group[i]&&(t=n('<div class="fancybox-slide"></div>').appendTo(this.$refs.stage),this.slides[e]=n.extend(!0,{},this.group[i],{pos:e,$slide:t,isLoaded:!1}),this.updateSlide(this.slides[e])),this.slides[e]},scaleToActual:function(e,t,r){var o,a,s,l,c,u=this,d=u.current,f=d.$content,p=parseInt(d.$slide.width(),10),h=parseInt(d.$slide.height(),10),g=d.width,m=d.height;"image"!=d.type||d.hasError||!f||u.isAnimating||(n.fancybox.stop(f),u.isAnimating=!0,e=e===i?.5*p:e,t=t===i?.5*h:t,l=g/(o=n.fancybox.getTranslate(f)).width,c=m/o.height,a=.5*p-.5*g,s=.5*h-.5*m,g>p&&((a=o.left*l-(e*l-e))>0&&(a=0),a<p-g&&(a=p-g)),m>h&&((s=o.top*c-(t*c-t))>0&&(s=0),s<h-m&&(s=h-m)),u.updateCursor(g,m),n.fancybox.animate(f,{top:s,left:a,scaleX:l,scaleY:c},r||330,function(){u.isAnimating=!1}),u.SlideShow&&u.SlideShow.isActive&&u.SlideShow.stop())},scaleToFit:function(e){var t,i=this,r=i.current,o=r.$content;"image"!=r.type||r.hasError||!o||i.isAnimating||(n.fancybox.stop(o),i.isAnimating=!0,t=i.getFitPos(r),i.updateCursor(t.width,t.height),n.fancybox.animate(o,{top:t.top,left:t.left,scaleX:t.width/o.width(),scaleY:t.height/o.height()},e||330,function(){i.isAnimating=!1}))},getFitPos:function(e){var t,i,r,o,a,s=e.$content,l=e.width,c=e.height,u=e.opts.margin;return!(!s||!s.length||!l&&!c)&&("number"===n.type(u)&&(u=[u,u]),2==u.length&&(u=[u[0],u[1],u[0],u[1]]),t=parseInt(this.$refs.stage.width(),10)-(u[1]+u[3]),i=parseInt(this.$refs.stage.height(),10)-(u[0]+u[2]),r=Math.min(1,t/l,i/c),o=Math.floor(r*l),a=Math.floor(r*c),{top:Math.floor(.5*(i-a))+u[0],left:Math.floor(.5*(t-o))+u[3],width:o,height:a})},update:function(){var e=this;n.each(e.slides,function(t,n){e.updateSlide(n)})},updateSlide:function(e){var t=e.$content;t&&(e.width||e.height)&&(this.isAnimating=!1,n.fancybox.stop(t),n.fancybox.setTranslate(t,this.getFitPos(e)),e.pos===this.currPos&&this.updateCursor()),e.$slide.trigger("refresh"),this.trigger("onUpdate",e)},updateCursor:function(e,t){var n=this.$refs.container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut");this.current&&!this.isClosing&&(this.isZoomable()?(n.addClass("fancybox-is-zoomable"),(e!==i&&t!==i?e<this.current.width&&t<this.current.height:this.isScaledDown())?n.addClass("fancybox-can-zoomIn"):this.current.opts.touch?n.addClass("fancybox-can-drag"):n.addClass("fancybox-can-zoomOut")):this.current.opts.touch&&n.addClass("fancybox-can-drag"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing)return!!("image"===t.type&&t.isLoaded&&!t.hasError&&("zoom"===t.opts.clickContent||n.isFunction(t.opts.clickContent)&&"zoom"===t.opts.clickContent(t))&&(e=this.getFitPos(t),t.width>e.width||t.height>e.height))},isScaledDown:function(){var e=this.current,t=e.$content,i=!1;return t&&(i=(i=n.fancybox.getTranslate(t)).width<e.width||i.height<e.height),i},canPan:function(){var e=this.current,t=e.$content,n=!1;return t&&(n=this.getFitPos(e),n=Math.abs(t.width()-n.width)>1||Math.abs(t.height()-n.height)>1),n},loadSlide:function(e){var t,i,r,o=this;if(!e.isLoading&&!e.isLoaded){switch(e.isLoading=!0,o.trigger("beforeLoad",e),t=e.type,(i=e.$slide).off("refresh").trigger("onReset").addClass("fancybox-slide--"+(t||"unknown")).addClass(e.opts.slideClass),t){case"image":o.setImage(e);break;case"iframe":o.setIframe(e);break;case"html":o.setContent(e,e.src||e.content);break;case"inline":n(e.src).length?o.setContent(e,n(e.src)):o.setError(e);break;case"ajax":o.showLoading(e),r=n.ajax(n.extend({},e.opts.ajax.settings,{url:e.src,success:function(t,n){"success"===n&&o.setContent(e,t)},error:function(t,n){t&&"abort"!==n&&o.setError(e)}})),i.one("onReset",function(){r.abort()});break;default:o.setError(e)}return!0}},setImage:function(t){var i,r,o,a,s=this,l=t.opts.srcset||t.opts.image.srcset;if(l){o=e.devicePixelRatio||1,a=e.innerWidth*o,(r=l.split(",").map(function(e){var t={};return e.trim().split(/\s+/).forEach(function(e,n){var i=parseInt(e.substring(0,e.length-1),10);if(0===n)return t.url=e;i&&(t.value=i,t.postfix=e[e.length-1])}),t})).sort(function(e,t){return e.value-t.value});for(var c=0;c<r.length;c++){var u=r[c];if("w"===u.postfix&&u.value>=a||"x"===u.postfix&&u.value>=o){i=u;break}}!i&&r.length&&(i=r[r.length-1]),i&&(t.src=i.url,t.width&&t.height&&"w"==i.postfix&&(t.height=t.width/t.height*i.value,t.width=i.value))}t.$content=n('<div class="fancybox-image-wrap"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&(t.opts.thumb||t.opts.$thumb)?(t.width=t.opts.width,t.height=t.opts.height,t.$ghost=n("<img />").one("error",function(){n(this).remove(),t.$ghost=null,s.setBigImage(t)}).one("load",function(){s.afterLoad(t),s.setBigImage(t)}).addClass("fancybox-image").appendTo(t.$content).attr("src",t.opts.thumb||t.opts.$thumb.attr("src"))):s.setBigImage(t)},setBigImage:function(e){var t=this,i=n("<img />");e.$image=i.one("error",function(){t.setError(e)}).one("load",function(){clearTimeout(e.timouts),e.timouts=null,t.isClosing||(e.width=this.naturalWidth,e.height=this.naturalHeight,e.opts.image.srcset&&i.attr("sizes","100vw").attr("srcset",e.opts.image.srcset),t.hideLoading(e),e.$ghost?e.timouts=setTimeout(function(){e.timouts=null,e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))):t.afterLoad(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),(i[0].complete||"complete"==i[0].readyState)&&i[0].naturalWidth&&i[0].naturalHeight?i.trigger("load"):i[0].error?i.trigger("error"):e.timouts=setTimeout(function(){i[0].complete||e.hasError||t.showLoading(e)},100)},setIframe:function(e){var t,r=this,o=e.opts.iframe,a=e.$slide;e.$content=n('<div class="fancybox-content'+(o.preload?" fancybox-is-hidden":"")+'"></div>').css(o.css).appendTo(a),t=n(o.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(o.attr).appendTo(e.$content),o.preload?(r.showLoading(e),t.on("load.fb error.fb",function(t){this.isReady=1,e.$slide.trigger("refresh"),r.afterLoad(e)}),a.on("refresh.fb",function(){var n,r,a=e.$content,s=o.css.width,l=o.css.height;if(1===t[0].isReady){try{r=t.contents().find("body")}catch(e){}r&&r.length&&(s===i&&(n=t[0].contentWindow.document.documentElement.scrollWidth,s=Math.ceil(r.outerWidth(!0)+(a.width()-n)),s+=a.outerWidth()-a.innerWidth()),l===i&&(l=Math.ceil(r.outerHeight(!0)),l+=a.outerHeight()-a.innerHeight()),s&&a.width(s),l&&a.height(l)),a.removeClass("fancybox-is-hidden")}})):this.afterLoad(e),t.attr("src",e.src),!0===e.opts.smallBtn&&e.$content.prepend(r.translate(e,e.opts.btnTpl.smallBtn)),a.one("onReset",function(){try{n(this).find("iframe").hide().attr("src","//about:blank")}catch(e){}n(this).empty(),e.isLoaded=!1})},setContent:function(e,t){if(!this.isClosing){this.hideLoading(e),e.$slide.empty(),(i=t)&&i.hasOwnProperty&&i instanceof n&&t.parent().length?(t.parent(".fancybox-slide--inline").trigger("onReset"),e.$placeholder=n("<div></div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===n.type(t)&&3===(t=n("<div>").append(n.trim(t)).contents())[0].nodeType&&(t=n("<div>").html(t)),e.opts.filter&&(t=n("<div>").html(t).find(e.opts.filter)));var i;e.$slide.one("onReset",function(){e.$placeholder&&(e.$placeholder.after(t.hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(n(this).empty(),e.isLoaded=!1)}),e.$content=n(t).appendTo(e.$slide),this.afterLoad(e)}},setError:function(e){e.hasError=!0,e.$slide.removeClass("fancybox-slide--"+e.type),this.setContent(e,this.translate(e,e.opts.errorTpl))},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=n(this.opts.spinnerTpl).appendTo(e.$slide))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.remove(),delete e.$spinner)},afterLoad:function(e){this.isClosing||(e.isLoading=!1,e.isLoaded=!0,this.trigger("afterLoad",e),this.hideLoading(e),e.opts.smallBtn&&!e.$smallBtn&&(e.$smallBtn=n(this.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content.filter("div,form").first())),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&n('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),this.revealContent(e))},revealContent:function(e){var t,r,o,a,s,l=this,c=e.$slide,d=!1;return t=e.opts[l.firstRun?"animationEffect":"transitionEffect"],o=e.opts[l.firstRun?"animationDuration":"transitionDuration"],o=parseInt(e.forcedDuration===i?o:e.forcedDuration,10),!e.isMoved&&e.pos===l.currPos&&o||(t=!1),"zoom"!==t||e.pos===l.currPos&&o&&"image"===e.type&&!e.hasError&&(d=l.getThumbPos(e))||(t="fade"),"zoom"===t?((s=l.getFitPos(e)).scaleX=s.width/d.width,s.scaleY=s.height/d.height,delete s.width,delete s.height,"auto"==(a=e.opts.zoomOpacity)&&(a=Math.abs(e.width/e.height-d.width/d.height)>.1),a&&(d.opacity=.1,s.opacity=1),n.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),d),u(e.$content),void n.fancybox.animate(e.$content,s,o,function(){l.complete()})):(l.updateSlide(e),t?(n.fancybox.stop(c),r="fancybox-animated fancybox-slide--"+(e.pos>=l.prevPos?"next":"previous")+" fancybox-fx-"+t,c.removeAttr("style").removeClass("fancybox-slide--current fancybox-slide--next fancybox-slide--previous").addClass(r),e.$content.removeClass("fancybox-is-hidden"),u(c),void n.fancybox.animate(c,"fancybox-slide--current",o,function(t){c.removeClass(r).removeAttr("style"),e.pos===l.currPos&&l.complete()},!0)):(u(c),e.$content.removeClass("fancybox-is-hidden"),void(e.pos===l.currPos&&l.complete())))},getThumbPos:function(i){var r,o=!1,a=i.opts.$thumb,s=a?a.offset():0;return s&&a[0].ownerDocument===t&&function(t){for(var i=t[0],r=i.getBoundingClientRect(),o=[];null!==i.parentElement;)"hidden"!==n(i.parentElement).css("overflow")&&"auto"!==n(i.parentElement).css("overflow")||o.push(i.parentElement.getBoundingClientRect()),i=i.parentElement;return o.every(function(e){var t=Math.min(r.right,e.right)-Math.max(r.left,e.left),n=Math.min(r.bottom,e.bottom)-Math.max(r.top,e.top);return t>0&&n>0})&&r.bottom>0&&r.right>0&&r.left<n(e).width()&&r.top<n(e).height()}(a)&&(r=this.$refs.stage.offset(),o={top:s.top-r.top+parseFloat(a.css("border-top-width")||0),left:s.left-r.left+parseFloat(a.css("border-left-width")||0),width:a.width(),height:a.height(),scaleX:1,scaleY:1}),o},complete:function(){var e=this,i=e.current,r={};i.isMoved||!i.isLoaded||i.isComplete||(i.isComplete=!0,i.$slide.siblings().trigger("onReset"),u(i.$slide),i.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,i){i.pos>=e.currPos-1&&i.pos<=e.currPos+1?r[i.pos]=i:i&&(n.fancybox.stop(i.$slide),i.$slide.off().remove())}),e.slides=r,e.updateCursor(),e.trigger("afterShow"),(n(t.activeElement).is("[disabled]")||i.opts.autoFocus&&"image"!=i.type&&"iframe"!==i.type)&&e.focus())},preload:function(){var e,t;this.group.length<2||(e=this.slides[this.currPos+1],t=this.slides[this.currPos-1],e&&"image"===e.type&&this.loadSlide(e),t&&"image"===t.type&&this.loadSlide(t))},focus:function(){var e,t=this.current;this.isClosing||(t&&t.isComplete&&((e=t.$slide.find("input[autofocus]:enabled:visible:first")).length||(e=t.$slide.find("button,:input,[tabindex],a").filter(":enabled:visible:first"))),(e=e&&e.length?e:this.$refs.container).focus())},activate:function(){var e=this;n(".fancybox-container").each(function(){var t=n(this).data("FancyBox");t&&t.id!==e.id&&!t.isClosing&&(t.trigger("onDeactivate"),t.removeEvents(),t.isVisible=!1)}),e.isVisible=!0,(e.current||e.isIdle)&&(e.update(),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(e,t){var i,r,o,a,s,d,f=this,p=f.current,h=function(){f.cleanUp(e)};return!f.isClosing&&(f.isClosing=!0,!1===f.trigger("beforeClose",e)?(f.isClosing=!1,l(function(){f.update()}),!1):(f.removeEvents(),p.timouts&&clearTimeout(p.timouts),o=p.$content,i=p.opts.animationEffect,r=n.isNumeric(t)?t:i?p.opts.animationDuration:0,p.$slide.off(c).removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),p.$slide.siblings().trigger("onReset").remove(),r&&f.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing"),f.hideLoading(p),f.hideControls(),f.updateCursor(),"zoom"!==i||!0!==e&&o&&r&&"image"===p.type&&!p.hasError&&(d=f.getThumbPos(p))||(i="fade"),"zoom"===i?(n.fancybox.stop(o),(s=n.fancybox.getTranslate(o)).width=s.width*s.scaleX,s.height=s.height*s.scaleY,"auto"==(a=p.opts.zoomOpacity)&&(a=Math.abs(p.width/p.height-d.width/d.height)>.1),a&&(d.opacity=0),s.scaleX=s.width/d.width,s.scaleY=s.height/d.height,s.width=d.width,s.height=d.height,n.fancybox.setTranslate(p.$content,s),u(p.$content),n.fancybox.animate(p.$content,d,r,h),!0):(i&&r?!0===e?setTimeout(h,r):n.fancybox.animate(p.$slide.removeClass("fancybox-slide--current"),"fancybox-animated fancybox-slide--previous fancybox-fx-"+i,r,h):h(),!0)))},cleanUp:function(e){var i,r,a=n("body");this.current.$slide.trigger("onReset"),this.$refs.container.empty().remove(),this.trigger("afterClose",e),this.$lastFocus&&this.current.opts.backFocus&&this.$lastFocus.focus(),this.current=null,(i=n.fancybox.getInstance())?i.activate():(o.scrollTop(this.scrollTop).scrollLeft(this.scrollLeft),a.removeClass("fancybox-active compensate-for-scrollbar"),a.hasClass("fancybox-iosfix")&&(r=parseInt(t.body.style.top,10),a.removeClass("fancybox-iosfix").css("top","").scrollTop(-1*r)),n("#fancybox-style-noscroll").remove())},trigger:function(e,t){var i,r=Array.prototype.slice.call(arguments,1),o=t&&t.opts?t:this.current;if(o?r.unshift(o):o=this,r.unshift(this),n.isFunction(o.opts[e])&&(i=o.opts[e].apply(o,r)),!1===i)return i;"afterClose"!==e&&this.$refs?this.$refs.container.trigger(e+".fb",r):a.trigger(e+".fb",r)},updateControls:function(e){var t=this.current,n=t.index,i=t.opts.caption,r=this.$refs.container,o=this.$refs.caption;t.$slide.trigger("refresh"),this.$caption=i&&i.length?o.html(i):null,this.isHiddenControls||this.isIdle||this.showControls(),r.find("[data-fancybox-count]").html(this.group.length),r.find("[data-fancybox-index]").html(n+1),r.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&n<=0),r.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&n>=this.group.length-1),"image"===t.type?r.find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():r.find("[data-fancybox-download],[data-fancybox-zoom]").hide()},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav")},showControls:function(){var e=this.current?this.current.opts:this.opts,t=this.$refs.container;this.isHiddenControls=!1,this.idleSecondsCounter=0,t.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&this.group.length>1)).toggleClass("fancybox-show-nav",!!(e.arrows&&this.group.length>1)).toggleClass("fancybox-is-modal",!!e.modal),this.$caption?t.addClass("fancybox-show-caption "):t.removeClass("fancybox-show-caption")},toggleControls:function(){this.isHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.2.5",defaults:r,getInstance:function(e){var t=n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return t instanceof d&&("string"===n.type(e)?t[e].apply(t,i):"function"===n.type(e)&&e.apply(t,i),t)},open:function(e,t,n){return new d(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close())},destroy:function(){this.close(!0),a.off("click.fb-start")},isMobile:t.createTouch!==i&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:function(){var n=t.createElement("div");return e.getComputedStyle&&e.getComputedStyle(n).getPropertyValue("transform")&&!(t.documentMode&&t.documentMode<11)}(),getTranslate:function(e){var t;if(!e||!e.length)return!1;if((t=(t=e.eq(0).css("transform"))&&-1!==t.indexOf("matrix")?(t=(t=t.split("(")[1]).split(")")[0]).split(","):[]).length)t=(t=t.length>10?[t[13],t[12],t[0],t[5]]:[t[5],t[4],t[0],t[3]]).map(parseFloat);else{t=[0,0,1,1];var n=/\.*translate\((.*)px,(.*)px\)/i.exec(e.eq(0).attr("style"));n&&(t[0]=parseFloat(n[2]),t[1]=parseFloat(n[1]))}return{top:t[0],left:t[1],scaleX:t[2],scaleY:t[3],opacity:parseFloat(e.css("opacity")),width:e.width(),height:e.height()}},setTranslate:function(e,t){var n="",r={};if(e&&t)return t.left===i&&t.top===i||(n=(t.left===i?e.position().left:t.left)+"px, "+(t.top===i?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),t.scaleX!==i&&t.scaleY!==i&&(n=(n.length?n+" ":"")+"scale("+t.scaleX+", "+t.scaleY+")"),n.length&&(r.transform=n),t.opacity!==i&&(r.opacity=t.opacity),t.width!==i&&(r.width=t.width),t.height!==i&&(r.height=t.height),e.css(r)},animate:function(e,t,r,o,a){n.isFunction(r)&&(o=r,r=null),n.isPlainObject(t)||e.removeAttr("style"),e.on(c,function(r){(!r||!r.originalEvent||e.is(r.originalEvent.target)&&"z-index"!=r.originalEvent.propertyName)&&(n.fancybox.stop(e),n.isPlainObject(t)?t.scaleX!==i&&t.scaleY!==i&&(e.css("transition-duration",""),t.width=Math.round(e.width()*t.scaleX),t.height=Math.round(e.height()*t.scaleY),t.scaleX=1,t.scaleY=1,n.fancybox.setTranslate(e,t)):!0!==a&&e.removeClass(t),n.isFunction(o)&&o(r))}),n.isNumeric(r)&&e.css("transition-duration",r+"ms"),n.isPlainObject(t)?n.fancybox.setTranslate(e,t):e.addClass(t),t.scaleX&&e.hasClass("fancybox-image-wrap")&&e.parent().addClass("fancybox-is-scaling"),e.data("timer",setTimeout(function(){e.trigger("transitionend")},r+16))},stop:function(e){clearTimeout(e.data("timer")),e.off("transitionend").css("transition-duration",""),e.hasClass("fancybox-image-wrap")&&e.parent().removeClass("fancybox-is-scaling")}},n.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?n("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},f):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},f),this},a.on("click.fb-start","[data-fancybox]",f)}function f(e){var t=n(e.currentTarget),i=e.data?e.data.options:{},r=t.attr("data-fancybox")||"",o=0,a=[];e.isDefaultPrevented()||(e.preventDefault(),r?(o=(a=(a=i.selector?n(i.selector):e.data?e.data.items:[]).length?a.filter('[data-fancybox="'+r+'"]'):n('[data-fancybox="'+r+'"]')).index(t))<0&&(o=0):a=[t],n.fancybox.open(a,i,o))}}(window,document,window.jQuery||jQuery),function(e){"use strict";var t=function(t,n,i){if(t)return i=i||"","object"===e.type(i)&&(i=e.param(i,!0)),e.each(n,function(e,n){t=t.replace("$"+e,n||"")}),i.length&&(t+=(t.indexOf("?")>0?"&":"?")+i),t},n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12])+"&output="+(e[12]&&e[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};e(document).on("objectNeedsType.fb",function(i,r,o){var a,s,l,c,u,d,f=o.src||"",p=!1;a=e.extend(!0,{},n,o.opts.media),e.each(a,function(n,i){if(l=f.match(i.matcher)){if(p=i.type,d={},i.paramPlace&&l[i.paramPlace]){"?"==(u=l[i.paramPlace])[0]&&(u=u.substring(1)),u=u.split("&");for(var r=0;r<u.length;++r){var a=u[r].split("=",2);2==a.length&&(d[a[0]]=decodeURIComponent(a[1].replace(/\+/g," ")))}}return c=e.extend(!0,{},i.params,o.opts[n],d),f="function"===e.type(i.url)?i.url.call(this,l,c,o):t(i.url,l,c),s="function"===e.type(i.thumb)?i.thumb.call(this,l,c,o):t(i.thumb,l),"vimeo"===n&&(f=f.replace("&%23","#")),!1}}),p?(o.src=f,o.type=p,o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=s),"iframe"===p&&(e.extend(!0,o.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}}),o.contentProvider=void 0,o.opts.slideClass+=" fancybox-slide--video")):f&&(o.type=o.opts.defaultType)})}(window.jQuery||jQuery),function(e,t,n){"use strict";var i=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)},r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.mozCancelAnimationFrame||e.oCancelAnimationFrame||function(t){e.clearTimeout(t)},o=function(t){var n=[];t=(t=t.originalEvent||t||e.e).touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t];for(var i in t)t[i].pageX?n.push({x:t[i].pageX,y:t[i].pageY}):t[i].clientX&&n.push({x:t[i].clientX,y:t[i].clientY});return n},a=function(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0},s=function(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea')||n.isFunction(e.get(0).onclick)||e.data("selectable"))return!0;for(var t=0,i=e[0].attributes,r=i.length;t<r;t++)if("data-fancybox-"===i[t].nodeName.substr(0,14))return!0;return!1},l=function(t){var n=e.getComputedStyle(t)["overflow-y"],i=e.getComputedStyle(t)["overflow-x"],r=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,o=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth;return r||o},c=function(e){for(var t=!1;!(t=l(e.get(0)))&&(e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body"););return t},u=function(e){this.instance=e,this.$bg=e.$refs.bg,this.$stage=e.$refs.stage,this.$container=e.$refs.container,this.destroy(),this.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(this,"ontouchstart"))};u.prototype.destroy=function(){this.$container.off(".fb.touch")},u.prototype.ontouchstart=function(i){var r=n(i.target),l=this.instance,u=l.current,d=u.$content,f="touchstart"==i.type;if(f&&this.$container.off("mousedown.fb.touch"),!u||this.instance.isAnimating||this.instance.isClosing)return i.stopPropagation(),void i.preventDefault();i.originalEvent&&2==i.originalEvent.button||!r.length||s(r)||s(r.parent())||i.originalEvent.clientX>r[0].clientWidth+r.offset().left||(this.startPoints=o(i),!this.startPoints||this.startPoints.length>1&&l.isSliding||(this.$target=r,this.$content=d,this.canTap=!0,this.opts=u.opts.touch,n(t).off(".fb.touch"),n(t).on(f?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(this,"ontouchend")),n(t).on(f?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(this,"ontouchmove")),(this.opts||l.canPan())&&(r.is(this.$stage)||this.$stage.find(r).length)?(i.stopPropagation(),n.fancybox.isMobile&&(c(this.$target)||c(this.$target.parent()))||i.preventDefault(),this.canvasWidth=Math.round(u.$slide[0].clientWidth),this.canvasHeight=Math.round(u.$slide[0].clientHeight),this.startTime=(new Date).getTime(),this.distanceX=this.distanceY=this.distance=0,this.isPanning=!1,this.isSwiping=!1,this.isZooming=!1,this.sliderStartPos=this.sliderLastPos||{top:0,left:0},this.contentStartPos=n.fancybox.getTranslate(this.$content),this.contentLastPos=null,1!==this.startPoints.length||this.isZooming||(this.canTap=!l.isSliding,"image"===u.type&&(this.contentStartPos.width>this.canvasWidth+1||this.contentStartPos.height>this.canvasHeight+1)?(n.fancybox.stop(this.$content),this.$content.css("transition-duration","0ms"),this.isPanning=!0):this.isSwiping=!0,this.$container.addClass("fancybox-controls--isGrabbing")),2!==this.startPoints.length||l.isAnimating||u.hasError||"image"!==u.type||!u.isLoaded&&!u.$ghost||(this.isZooming=!0,this.isSwiping=!1,this.isPanning=!1,n.fancybox.stop(this.$content),this.$content.css("transition-duration","0ms"),this.centerPointStartX=.5*(this.startPoints[0].x+this.startPoints[1].x)-n(e).scrollLeft(),this.centerPointStartY=.5*(this.startPoints[0].y+this.startPoints[1].y)-n(e).scrollTop(),this.percentageOfImageAtPinchPointX=(this.centerPointStartX-this.contentStartPos.left)/this.contentStartPos.width,this.percentageOfImageAtPinchPointY=(this.centerPointStartY-this.contentStartPos.top)/this.contentStartPos.height,this.startDistanceBetweenFingers=a(this.startPoints[0],this.startPoints[1]))):r.is("img")&&i.preventDefault()))},u.prototype.ontouchmove=function(e){if(this.newPoints=o(e),n.fancybox.isMobile&&(c(this.$target)||c(this.$target.parent())))return e.stopPropagation(),void(this.canTap=!1);if((this.opts||this.instance.canPan())&&this.newPoints&&this.newPoints.length&&(this.distanceX=a(this.newPoints[0],this.startPoints[0],"x"),this.distanceY=a(this.newPoints[0],this.startPoints[0],"y"),this.distance=a(this.newPoints[0],this.startPoints[0]),this.distance>0)){if(!this.$target.is(this.$stage)&&!this.$stage.find(this.$target).length)return;e.stopPropagation(),e.preventDefault(),this.isSwiping?this.onSwipe():this.isPanning?this.onPan():this.isZooming&&this.onZoom()}},u.prototype.onSwipe=function(){var t,o=this,a=o.isSwiping,s=o.sliderStartPos.left||0;!0===a?Math.abs(o.distance)>10&&(o.canTap=!1,o.instance.group.length<2&&o.opts.vertical?o.isSwiping="y":o.instance.isSliding||!1===o.opts.vertical||"auto"===o.opts.vertical&&n(e).width()>800?o.isSwiping="x":(t=Math.abs(180*Math.atan2(o.distanceY,o.distanceX)/Math.PI),o.isSwiping=t>45&&t<135?"y":"x"),o.instance.isSliding=o.isSwiping,o.startPoints=o.newPoints,n.each(o.instance.slides,function(e,t){n.fancybox.stop(t.$slide),t.$slide.css("transition-duration","0ms"),t.inTransition=!1,t.pos===o.instance.current.pos&&(o.sliderStartPos.left=n.fancybox.getTranslate(t.$slide).left)}),o.instance.SlideShow&&o.instance.SlideShow.isActive&&o.instance.SlideShow.stop()):("x"==a&&(o.distanceX>0&&(o.instance.group.length<2||0===o.instance.current.index&&!o.instance.current.opts.loop)?s+=Math.pow(o.distanceX,.8):o.distanceX<0&&(o.instance.group.length<2||o.instance.current.index===o.instance.group.length-1&&!o.instance.current.opts.loop)?s-=Math.pow(-o.distanceX,.8):s+=o.distanceX),o.sliderLastPos={top:"x"==a?0:o.sliderStartPos.top+o.distanceY,left:s},o.requestId&&(r(o.requestId),o.requestId=null),o.requestId=i(function(){o.sliderLastPos&&(n.each(o.instance.slides,function(e,t){var i=t.pos-o.instance.currPos;n.fancybox.setTranslate(t.$slide,{top:o.sliderLastPos.top,left:o.sliderLastPos.left+i*o.canvasWidth+i*t.opts.gutter})}),o.$container.addClass("fancybox-is-sliding"))}))},u.prototype.onPan=function(){var e,t,o,a=this;a.canTap=!1,e=a.contentStartPos.width>a.canvasWidth?a.contentStartPos.left+a.distanceX:a.contentStartPos.left,t=a.contentStartPos.top+a.distanceY,(o=a.limitMovement(e,t,a.contentStartPos.width,a.contentStartPos.height)).scaleX=a.contentStartPos.scaleX,o.scaleY=a.contentStartPos.scaleY,a.contentLastPos=o,a.requestId&&(r(a.requestId),a.requestId=null),a.requestId=i(function(){n.fancybox.setTranslate(a.$content,a.contentLastPos)})},u.prototype.limitMovement=function(e,t,n,i){var r,o,a,s,l=this.canvasWidth,c=this.canvasHeight,u=this.contentStartPos.left,d=this.contentStartPos.top,f=this.distanceX,p=this.distanceY;return r=Math.max(0,.5*l-.5*n),o=Math.max(0,.5*c-.5*i),a=Math.min(l-n,.5*l-.5*n),s=Math.min(c-i,.5*c-.5*i),n>l&&(f>0&&e>r&&(e=r-1+Math.pow(-r+u+f,.8)||0),f<0&&e<a&&(e=a+1-Math.pow(a-u-f,.8)||0)),i>c&&(p>0&&t>o&&(t=o-1+Math.pow(-o+d+p,.8)||0),p<0&&t<s&&(t=s+1-Math.pow(s-d-p,.8)||0)),{top:t,left:e}},u.prototype.limitPosition=function(e,t,n,i){var r=this.canvasWidth,o=this.canvasHeight;return e=n>r?(e=e>0?0:e)<r-n?r-n:e:Math.max(0,r/2-n/2),{top:t=i>o?(t=t>0?0:t)<o-i?o-i:t:Math.max(0,o/2-i/2),left:e}},u.prototype.onZoom=function(){var t=this,o=t.contentStartPos.width,s=t.contentStartPos.height,l=t.contentStartPos.left,c=t.contentStartPos.top,u=a(t.newPoints[0],t.newPoints[1])/t.startDistanceBetweenFingers,d=Math.floor(o*u),f=Math.floor(s*u),p=(o-d)*t.percentageOfImageAtPinchPointX,h=(s-f)*t.percentageOfImageAtPinchPointY,g=(t.newPoints[0].x+t.newPoints[1].x)/2-n(e).scrollLeft(),m=(t.newPoints[0].y+t.newPoints[1].y)/2-n(e).scrollTop(),v=g-t.centerPointStartX,y={top:c+(h+(m-t.centerPointStartY)),left:l+(p+v),scaleX:t.contentStartPos.scaleX*u,scaleY:t.contentStartPos.scaleY*u};t.canTap=!1,t.newWidth=d,t.newHeight=f,t.contentLastPos=y,t.requestId&&(r(t.requestId),t.requestId=null),t.requestId=i(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})},u.prototype.ontouchend=function(e){var i=Math.max((new Date).getTime()-this.startTime,1),a=this.isSwiping,s=this.isPanning,l=this.isZooming;if(this.endPoints=o(e),this.$container.removeClass("fancybox-controls--isGrabbing"),n(t).off(".fb.touch"),this.requestId&&(r(this.requestId),this.requestId=null),this.isSwiping=!1,this.isPanning=!1,this.isZooming=!1,this.canTap)return this.onTap(e);this.speed=366,this.velocityX=this.distanceX/i*.5,this.velocityY=this.distanceY/i*.5,this.speedX=Math.max(.5*this.speed,Math.min(1.5*this.speed,1/Math.abs(this.velocityX)*this.speed)),s?this.endPanning():l?this.endZooming():this.endSwiping(a)},u.prototype.endSwiping=function(e){var t=!1;this.instance.isSliding=!1,this.sliderLastPos=null,"y"==e&&Math.abs(this.distanceY)>50?(n.fancybox.animate(this.instance.current.$slide,{top:this.sliderStartPos.top+this.distanceY+150*this.velocityY,opacity:0},150),t=this.instance.close(!0,300)):"x"==e&&this.distanceX>50&&this.instance.group.length>1?t=this.instance.previous(this.speedX):"x"==e&&this.distanceX<-50&&this.instance.group.length>1&&(t=this.instance.next(this.speedX)),!1!==t||"x"!=e&&"y"!=e||this.instance.jumpTo(this.instance.current.index,150),this.$container.removeClass("fancybox-is-sliding")},u.prototype.endPanning=function(){var e,t,i;this.contentLastPos&&(!1===this.opts.momentum?(e=this.contentLastPos.left,t=this.contentLastPos.top):(e=this.contentLastPos.left+this.velocityX*this.speed,t=this.contentLastPos.top+this.velocityY*this.speed),(i=this.limitPosition(e,t,this.contentStartPos.width,this.contentStartPos.height)).width=this.contentStartPos.width,i.height=this.contentStartPos.height,n.fancybox.animate(this.$content,i,330))},u.prototype.endZooming=function(){var e,t,i,r,o=this.instance.current,a=this.newWidth,s=this.newHeight;this.contentLastPos&&(e=this.contentLastPos.left,r={top:t=this.contentLastPos.top,left:e,width:a,height:s,scaleX:1,scaleY:1},n.fancybox.setTranslate(this.$content,r),a<this.canvasWidth&&s<this.canvasHeight?this.instance.scaleToFit(150):a>o.width||s>o.height?this.instance.scaleToActual(this.centerPointStartX,this.centerPointStartY,150):(i=this.limitPosition(e,t,a,s),n.fancybox.setTranslate(this.content,n.fancybox.getTranslate(this.$content)),n.fancybox.animate(this.$content,i,150)))},u.prototype.onTap=function(e){var t,i=this,r=n(e.target),a=i.instance,s=a.current,l=e&&o(e)||i.startPoints,c=l[0]?l[0].x-i.$stage.offset().left:0,u=l[0]?l[0].y-i.$stage.offset().top:0,d=function(t){var r=s.opts[t];if(n.isFunction(r)&&(r=r.apply(a,[s,e])),r)switch(r){case"close":a.close(i.startEvent);break;case"toggleControls":a.toggleControls(!0);break;case"next":a.next();break;case"nextOrClose":a.group.length>1?a.next():a.close(i.startEvent);break;case"zoom":"image"==s.type&&(s.isLoaded||s.$ghost)&&(a.canPan()?a.scaleToFit():a.isScaledDown()?a.scaleToActual(c,u):a.group.length<2&&a.close(i.startEvent))}};if(!(e.originalEvent&&2==e.originalEvent.button||a.isSliding||c>r[0].clientWidth+r.offset().left)){if(r.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(r.is(".fancybox-slide"))t="Slide";else{if(!a.current.$content||!a.current.$content.has(e.target).length)return;t="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,Math.abs(c-i.tapX)>50||Math.abs(u-i.tapY)>50||a.isSliding)return this;d("dblclick"+t)}else i.tapX=c,i.tapY=u,s.opts["dblclick"+t]&&s.opts["dblclick"+t]!==s.opts["click"+t]?i.tapped=setTimeout(function(){i.tapped=null,d("click"+t)},300):d("click"+t);return this}},n(t).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new u(t))}),n(t).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,window.jQuery||jQuery),function(e,t){"use strict";t.extend(!0,t.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg viewBox="0 0 40 40"><path d="M13,12 L27,20 L13,27 Z" /><path d="M15,10 v19 M23,10 v19" /></svg></button>'},slideShow:{autoStart:!1,speed:3e3}});var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this;e.$button=e.instance.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),(e.instance.group.length<2||!e.instance.group[e.instance.currIndex].opts.slideShow)&&e.$button.hide()},set:function(e){var t=this;t.instance&&t.instance.current&&(!0===e||t.instance.current.opts.loop||t.instance.currIndex<t.instance.group.length-1)?t.timer=setTimeout(function(){t.isActive&&t.instance.jumpTo((t.instance.currIndex+1)%t.instance.group.length)},t.instance.current.opts.slideShow.speed):(t.stop(),t.instance.idleSecondsCounter=0,t.instance.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null},start:function(){var e=this.instance.current;e&&(this.isActive=!0,this.$button.attr("title",e.opts.i18n[e.opts.lang].PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),this.set(!0))},stop:function(){var e=this.instance.current;this.clear(),this.$button.attr("title",e.opts.i18n[e.opts.lang].PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),this.isActive=!1},toggle:function(){this.isActive?this.stop():this.start()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,i){var r=t&&t.SlideShow;i?r&&n.opts.slideShow.autoStart&&r.start():r&&r.isActive&&r.clear()},"afterShow.fb":function(e,t,n){var i=t&&t.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(n,i,r,o,a){var s=i&&i.SlideShow;!s||!r.opts.slideShow||80!==a&&32!==a||t(e.activeElement).is("button,a,input")||(o.preventDefault(),s.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),t(e).on("visibilitychange",function(){var n=t.fancybox.getInstance(),i=n&&n.SlideShow;i&&i.isActive&&(e.hidden?i.clear():i.set())})}(document,window.jQuery||jQuery),function(e,t){"use strict";var n=function(){var t,n,i,r=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],o={};for(n=0;n<r.length;n++)if((t=r[n])&&t[1]in e){for(i=0;i<t.length;i++)o[r[0][i]]=t[i];return o}return!1}();if(n){var i={request:function(t){(t=t||e.documentElement)[n.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){e[n.exitFullscreen]()},toggle:function(t){t=t||e.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(e[n.fullscreenElement])},enabled:function(){return Boolean(e[n.fullscreenEnabled])}};t.extend(!0,t.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}"><svg viewBox="0 0 40 40"><path d="M9,12 h22 v16 h-22 v-16 v16 h22 v-16 Z" /></svg></button>'},fullScreen:{autoStart:!1}}),t(e).on({"onInit.fb":function(e,t){var n;t&&t.group[t.currIndex].opts.fullScreen?((n=t.$refs.container).on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle(n[0])}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(n[0]),t.FullScreen=i):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide()},"afterKeydown.fb":function(e,t,n,i,r){t&&t.FullScreen&&70===r&&(i.preventDefault(),t.FullScreen.toggle(t.$refs.container[0]))},"beforeClose.fb":function(e){e&&e.FullScreen&&i.exit()}}),t(e).on(n.fullscreenchange,function(){var e=i.isFullscreen(),n=t.fancybox.getInstance();n&&(n.current&&"image"===n.current.type&&n.isAnimating&&(n.current.$content.css("transition","none"),n.isAnimating=!1,n.update(!0,!0,0)),n.trigger("onFullscreenChange",e),n.$refs.container.toggleClass("fancybox-is-fullscreen",e))})}else t&&t.fancybox&&(t.fancybox.defaults.btnTpl.fullScreen=!1)}(document,window.jQuery||jQuery),function(e,t){"use strict";t.fancybox.defaults=t.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg viewBox="0 0 120 120"><path d="M30,30 h14 v14 h-14 Z M50,30 h14 v14 h-14 Z M70,30 h14 v14 h-14 Z M30,50 h14 v14 h-14 Z M50,50 h14 v14 h-14 Z M70,50 h14 v14 h-14 Z M30,70 h14 v14 h-14 Z M50,70 h14 v14 h-14 Z M70,70 h14 v14 h-14 Z" /></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},t.fancybox.defaults);var n=function(e){this.init(e)};t.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this;t.instance=e,e.Thumbs=t;var n=e.group[0],i=e.group[1];t.opts=e.group[e.currIndex].opts.thumbs,t.$button=e.$refs.toolbar.find("[data-fancybox-thumbs]"),t.opts&&n&&i&&("image"==n.type||n.opts.thumb||n.opts.$thumb)&&("image"==i.type||i.opts.thumb||i.opts.$thumb)?(t.$button.show().on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var e,n,i=this.instance,r=this.opts.parentEl;this.$grid=t('<div class="fancybox-thumbs fancybox-thumbs-'+this.opts.axis+'"></div>').appendTo(i.$refs.container.find(r).addBack().filter(r)),e="<ul>",t.each(i.group,function(t,i){(n=i.opts.thumb||(i.opts.$thumb?i.opts.$thumb.attr("src"):null))||"image"!==i.type||(n=i.src),n&&n.length&&(e+='<li data-index="'+t+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+n+'" /></li>')}),e+="</ul>",this.$list=t(e).appendTo(this.$grid).on("click","li",function(){i.jumpTo(t(this).data("index"))}),this.$list.find("img").hide().one("load",function(){var e,n,i,r,o=t(this).parent().removeClass("fancybox-thumbs-loading"),a=o.outerWidth(),s=o.outerHeight();e=this.naturalWidth||this.width,r=(n=this.naturalHeight||this.height)/s,(i=e/a)>=1&&r>=1&&(i>r?(e/=r,n=s):(e=a,n/=i)),t(this).css({width:Math.floor(e),height:Math.floor(n),"margin-top":n>s?Math.floor(.3*s-.3*n):Math.floor(.5*s-.5*n),"margin-left":Math.floor(.5*a-.5*e)}).show()}).each(function(){this.src=t(this).data("src")}),"x"===this.opts.axis&&this.$list.width(parseInt(this.$grid.css("padding-right"))+i.group.length*this.$list.children().eq(0).outerWidth(!0)+"px")},focus:function(e){var t,n,i=this.$list;this.instance.current&&(n=(t=i.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active")).position(),"y"===this.opts.axis&&(n.top<0||n.top>i.height()-t.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},e):"x"===this.opts.axis&&(n.left<i.parent().scrollLeft()||n.left>i.parent().scrollLeft()+(i.parent().width()-t.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},e))},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus(0)):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),t(e).on({"onInit.fb":function(e,t){var i;t&&!t.Thumbs&&(i=new n(t)).isActive&&!0===i.opts.autoStart&&i.show()},"beforeShow.fb":function(e,t,n,i){var r=t&&t.Thumbs;r&&r.isVisible&&r.focus(i?0:250)},"afterKeydown.fb":function(e,t,n,i,r){var o=t&&t.Thumbs;o&&o.isActive&&71===r&&(i.preventDefault(),o.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,window.jQuery),function(e,t){"use strict";t.extend(!0,t.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg viewBox="0 0 40 40"><path d="M6,30 C8,18 19,16 23,16 L23,16 L23,10 L33,20 L23,29 L23,24 C19,24 8,27 6,30 Z"></svg></button>'},share:{tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a href="https://www.facebook.com/sharer/sharer.php?u={{src}}" target="_blank" class="fancybox-share_button"><svg version="1.1" viewBox="0 0 32 32" fill="#3b5998"><path d="M27.6 3h-23.2c-.8 0-1.4.6-1.4 1.4v23.1c0 .9.6 1.5 1.4 1.5h12.5v-10.1h-3.4v-3.9h3.4v-2.9c0-3.4 2.1-5.2 5-5.2 1.4 0 2.7.1 3 .2v3.5h-2.1c-1.6 0-1.9.8-1.9 1.9v2.5h3.9l-.5 3.9h-3.4v10.1h6.6c.8 0 1.4-.6 1.4-1.4v-23.2c.1-.8-.5-1.4-1.3-1.4z"></path></svg><span>Facebook</span></a><a href="https://www.pinterest.com/pin/create/button/?url={{src}}&amp;description={{descr}}" target="_blank" class="fancybox-share_button"><svg version="1.1" viewBox="0 0 32 32" fill="#c92228"><path d="M16 3c-7.2 0-13 5.8-13 13 0 5.5 3.4 10.2 8.3 12.1-.1-1-.2-2.6 0-3.7.2-1 1.5-6.5 1.5-6.5s-.4-.8-.4-1.9c0-1.8 1-3.2 2.4-3.2 1.1 0 1.6.8 1.6 1.8 0 1.1-.7 2.8-1.1 4.3-.3 1.3.6 2.3 1.9 2.3 2.3 0 4.1-2.4 4.1-6 0-3.1-2.2-5.3-5.4-5.3-3.7 0-5.9 2.8-5.9 5.6 0 1.1.4 2.3 1 3 .1.1.1.2.1.4-.1.4-.3 1.3-.4 1.5-.1.2-.2.3-.4.2-1.6-.8-2.6-3.1-2.6-5 0-4.1 3-7.9 8.6-7.9 4.5 0 8 3.2 8 7.5 0 4.5-2.8 8.1-6.7 8.1-1.3 0-2.6-.7-3-1.5 0 0-.7 2.5-.8 3.1-.3 1.1-1.1 2.5-1.6 3.4 1.2.4 2.5.6 3.8.6 7.2 0 13-5.8 13-13 0-7.1-5.8-12.9-13-12.9z"></path></svg><span>Pinterest</span></a><a href="https://twitter.com/intent/tweet?url={{src}}&amp;text={{descr}}" target="_blank" class="fancybox-share_button"><svg version="1.1" viewBox="0 0 32 32" fill="#1da1f2"><path d="M30 7.3c-1 .5-2.1.8-3.3.9 1.2-.7 2.1-1.8 2.5-3.2-1.1.7-2.3 1.1-3.6 1.4-1-1.1-2.5-1.8-4.2-1.8-3.2 0-5.7 2.6-5.7 5.7 0 .5.1.9.1 1.3-4.8-.2-9-2.5-11.8-6-.5.9-.8 1.9-.8 3 0 2 1 3.8 2.6 4.8-.9 0-1.8-.3-2.6-.7v.1c0 2.8 2 5.1 4.6 5.6-.5.1-1 .2-1.5.2-.4 0-.7 0-1.1-.1.7 2.3 2.9 3.9 5.4 4-2 1.5-4.4 2.5-7.1 2.5-.5 0-.9 0-1.4-.1 2.5 1.6 5.6 2.6 8.8 2.6 10.6 0 16.3-8.8 16.3-16.3v-.7c1.1-1 2-2 2.8-3.2z"></path></svg><span>Twitter</span></a></p><p><input type="text" value="{{src_raw}}" onfocus="this.select()" /></p></div>'}});t(e).on("click","[data-fancybox-share]",function(){var e,n,i=t.fancybox.getInstance();i&&(e=!1===i.current.opts.hash?i.current.src:window.location,n=i.current.opts.share.tpl.replace(/\{\{src\}\}/g,encodeURIComponent(e)).replace(/\{\{src_raw\}\}/g,function(e){var t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(e).replace(/[&<>"'`=\/]/g,function(e){return t[e]})}(e)).replace(/\{\{descr\}\}/g,i.$caption?encodeURIComponent(i.$caption.text()):""),t.fancybox.open({src:i.translate(i,n),type:"html",opts:{animationEffect:"fade",animationDuration:250}}))})}(document,window.jQuery||jQuery),function(e,t,n){"use strict";n.escapeSelector||(n.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})});var i=!0,r=null,o=null;function a(){var e=t.location.hash.substr(1),n=e.split("-"),i=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,r=n.join("-");return i<1&&(i=1),{hash:e,index:i,gallery:r}}function s(e){var t;""!==e.gallery&&((t=n("[data-fancybox='"+n.escapeSelector(e.gallery)+"']").eq(e.index-1)).length||(t=n("#"+n.escapeSelector(e.gallery))),t.length&&(i=!1,t.trigger("click")))}function l(e){var t;return!!e&&((t=e.current?e.current.opts:e.opts).hash||(t.$orig?t.$orig.data("fancybox"):""))}n(function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function(e,t){var n,i;!1!==t.group[t.currIndex].opts.hash&&(n=a(),(i=l(t))&&n.gallery&&i==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(n,a,s){var c;s&&!1!==s.opts.hash&&(c=l(a))&&""!==c&&(t.location.hash.indexOf(c)<0&&(a.opts.origHash=t.location.hash),r=c+(a.group.length>1?"-"+(s.index+1):""),"replaceState"in t.history?(o&&clearTimeout(o),o=setTimeout(function(){t.history[i?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+r),o=null,i=!1},300)):t.location.hash=r)},"beforeClose.fb":function(i,a,s){var c,u;o&&clearTimeout(o),!1!==s.opts.hash&&(c=l(a),u=a&&a.opts.origHash?a.opts.origHash:"",c&&""!==c&&("replaceState"in history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+u):(t.location.hash=u,n(t).scrollTop(a.scrollTop).scrollLeft(a.scrollLeft))),r=null)}}),n(t).on("hashchange.fb",function(){var e=a();n.fancybox.getInstance()?!r||r===e.gallery+"-"+e.index||1===e.index&&r==e.gallery||(r=null,n.fancybox.close()):""!==e.gallery&&s(e)}),setTimeout(function(){s(a())},50))})}(document,window,window.jQuery||jQuery),function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=3)}([function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,r=[n(2)],void 0!==(o="function"==typeof(i=function(e){return e})?i.apply(t,r):i)&&(e.exports=o)},function(e,t,n){"use strict";var i,r,o,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};r=[n(0),n(10),n(11)],void 0!==(o="function"==typeof(i=function(e,t,n,i){function r(t,n,a){if(!(this instanceof r))return new r(t,n,a);this.el=i,this.events={},this.maskset=i,this.refreshValue=!1,!0!==a&&(e.isPlainObject(t)?n=t:(n=n||{}).alias=t,this.opts=e.extend(!0,{},this.defaults,n),this.noMasksCache=n&&n.definitions!==i,this.userOptions=n||{},this.isRTL=this.opts.numericInput,o(this.opts.alias,n,this.opts))}function o(t,n,a){var s=r.prototype.aliases[t];return s?(s.alias&&o(s.alias,i,a),e.extend(!0,a,s),e.extend(!0,a,n),!0):(null===a.mask&&(a.mask=t),!1)}function s(t,n){function o(t,o,a){var s=!1;if(null!==t&&""!==t||((s=null!==a.regex)?t=(t=a.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(s=!0,t=".*")),1===t.length&&!1===a.greedy&&0!==a.repeat&&(a.placeholder=""),a.repeat>0||"*"===a.repeat||"+"===a.repeat){var l="*"===a.repeat?0:"+"===a.repeat?1:a.repeat;t=a.groupmarker.start+t+a.groupmarker.end+a.quantifiermarker.start+l+","+a.repeat+a.quantifiermarker.end}var c,u=s?"regex_"+a.regex:a.numericInput?t.split("").reverse().join(""):t;return r.prototype.masksCache[u]===i||!0===n?(c={mask:t,maskToken:r.prototype.analyseMask(t,s,a),validPositions:{},_buffer:i,buffer:i,tests:{},metadata:o,maskLength:i},!0!==n&&(r.prototype.masksCache[u]=c,c=e.extend(!0,{},r.prototype.masksCache[u]))):c=e.extend(!0,{},r.prototype.masksCache[u]),c}if(e.isFunction(t.mask)&&(t.mask=t.mask(t)),e.isArray(t.mask)){if(t.mask.length>1){t.keepStatic=null===t.keepStatic||t.keepStatic;var a=t.groupmarker.start;return e.each(t.numericInput?t.mask.reverse():t.mask,function(n,r){a.length>1&&(a+=t.groupmarker.end+t.alternatormarker+t.groupmarker.start),r.mask===i||e.isFunction(r.mask)?a+=r:a+=r.mask}),o(a+=t.groupmarker.end,t.mask,t)}t.mask=t.mask.pop()}return t.mask&&t.mask.mask!==i&&!e.isFunction(t.mask.mask)?o(t.mask.mask,t.mask,t):o(t.mask,t.mask,t)}function l(o,s,c){function h(e,t,n){t=t||0;var r,o,a,s=[],l=0,u=v();do{!0===e&&g().validPositions[l]?(o=(a=g().validPositions[l]).match,r=a.locator.slice(),s.push(!0===n?a.input:!1===n?o.nativeDef:N(l,o))):(o=(a=x(l,r,l-1)).match,r=a.locator.slice(),(!1===c.jitMasking||l<u||"number"==typeof c.jitMasking&&isFinite(c.jitMasking)&&c.jitMasking>l)&&s.push(!1===n?o.nativeDef:N(l,o))),l++}while((z===i||l<z)&&(null!==o.fn||""!==o.def)||t>l);return""===s[s.length-1]&&s.pop(),g().maskLength=l+1,s}function g(){return s}function m(e){var t=g();t.buffer=i,!0!==e&&(t.validPositions={},t.p=0)}function v(e,t,n){var r=-1,o=-1,a=n||g().validPositions;e===i&&(e=-1);for(var s in a){var l=parseInt(s);a[l]&&(t||!0!==a[l].generatedInput)&&(l<=e&&(r=l),l>=e&&(o=l))}return-1!==r&&e-r>1||o<e?r:o}function y(t,n,r,o){var a,s=t,l=e.extend(!0,{},g().validPositions),u=!1;for(g().p=t,a=n-1;a>=s;a--)g().validPositions[a]!==i&&(!0!==r&&(!g().validPositions[a].match.optionality&&function(e){var t=g().validPositions[e];if(t!==i&&null===t.match.fn){var n=g().validPositions[e-1],r=g().validPositions[e+1];return n!==i&&r!==i}return!1}(a)||!1===c.canClearPosition(g(),a,v(),o,c))||delete g().validPositions[a]);for(m(!0),a=s+1;a<=v();){for(;g().validPositions[s]!==i;)s++;if(a<s&&(a=s+1),g().validPositions[a]===i&&M(a))a++;else{var d=x(a);!1===u&&l[s]&&l[s].match.def===d.match.def?(g().validPositions[s]=e.extend(!0,{},l[s]),g().validPositions[s].input=d.input,delete g().validPositions[a],a++):k(s,d.match.def)?!1!==P(s,d.input||N(a),!0)&&(delete g().validPositions[a],a++,u=!0):M(a)||(a++,s--),s++}}m(!0)}function b(e,t){for(var n,r=e,o=v(),a=g().validPositions[o]||C(0)[0],s=a.alternation!==i?a.locator[a.alternation].toString().split(","):[],l=0;l<r.length&&(!((n=r[l]).match&&(c.greedy&&!0!==n.match.optionalQuantifier||(!1===n.match.optionality||!1===n.match.newBlockMarker)&&!0!==n.match.optionalQuantifier)&&(a.alternation===i||a.alternation!==n.alternation||n.locator[a.alternation]!==i&&D(n.locator[a.alternation].toString().split(","),s)))||!0===t&&(null!==n.match.fn||/[0-9a-bA-Z]/.test(n.match.def)));l++);return n}function x(e,t,n){return g().validPositions[e]||b(C(e,t?t.slice():t,n))}function w(e){return g().validPositions[e]?g().validPositions[e]:C(e)[0]}function k(e,t){for(var n=!1,i=C(e),r=0;r<i.length;r++)if(i[r].match&&i[r].match.def===t){n=!0;break}return n}function C(t,n,r){function o(n,r,a,l){function d(a,l,m){function v(t,n){var i=0===e.inArray(t,n.matches);return i||e.each(n.matches,function(e,r){if(!0===r.isQuantifier&&(i=v(t,n.matches[e-1])))return!1}),i}function y(t,n,r){var o,a;if(g().validPositions[t-1]&&r&&g().tests[t])for(var s=g().validPositions[t-1].locator,l=g().tests[t][0].locator,c=0;c<r;c++)if(s[c]!==l[c])return s.slice(r+1);return(g().tests[t]||g().validPositions[t])&&e.each(g().tests[t]||[g().validPositions[t]],function(e,t){var s=r!==i?r:t.alternation,l=t.locator[s]!==i?t.locator[s].toString().indexOf(n):-1;(a===i||l<a)&&-1!==l&&(o=t,a=l)}),o?o.locator.slice((r!==i?r:o.alternation)+1):r!==i?y(t,n):i}if(u>1e4)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+g().mask;if(u===t&&a.matches===i)return f.push({match:a,locator:l.reverse(),cd:h}),!0;if(a.matches!==i){if(a.isGroup&&m!==a){if(a=d(n.matches[e.inArray(a,n.matches)+1],l))return!0}else if(a.isOptional){var b=a;if(a=o(a,r,l,m)){if(!v(s=f[f.length-1].match,b))return!0;p=!0,u=t}}else if(a.isAlternator){var x,w=a,k=[],C=f.slice(),S=l.length,E=r.length>0?r.shift():-1;if(-1===E||"string"==typeof E){var T,D=u,P=r.slice(),M=[];if("string"==typeof E)M=E.split(",");else for(T=0;T<w.matches.length;T++)M.push(T);for(var A=0;A<M.length;A++){if(T=parseInt(M[A]),f=[],r=y(u,T,S)||P.slice(),!0!==(a=d(w.matches[T]||n.matches[T],[T].concat(l),m)||a)&&a!==i&&M[M.length-1]<w.matches.length){var O=e.inArray(a,n.matches)+1;n.matches.length>O&&(a=d(n.matches[O],[O].concat(l.slice(1,l.length)),m))&&(M.push(O.toString()),e.each(f,function(e,t){t.alternation=l.length-1}))}x=f.slice(),u=D,f=[];for(var L=0;L<x.length;L++){var N=x[L],I=!1;N.alternation=N.alternation||S;for(var j=0;j<k.length;j++){var F=k[j];if("string"!=typeof E||-1!==e.inArray(N.locator[N.alternation].toString(),M)){if(z=F,(Y=N).match.nativeDef===z.match.nativeDef||Y.match.def===z.match.nativeDef||Y.match.nativeDef===z.match.def){I=!0,N.alternation===F.alternation&&-1===F.locator[F.alternation].toString().indexOf(N.locator[N.alternation])&&(F.locator[F.alternation]=F.locator[F.alternation]+","+N.locator[N.alternation],F.alternation=N.alternation),N.match.nativeDef===F.match.def&&(N.locator[N.alternation]=F.locator[F.alternation],k.splice(k.indexOf(F),1,N));break}if(N.match.def===F.match.def){I=!1;break}if(W=F,null===(q=N).match.fn&&null!==W.match.fn&&W.match.fn.test(q.match.def,g(),t,!1,c,!1)||(H=N,B=F,null!==H.match.fn&&null!==B.match.fn&&B.match.fn.test(H.match.def.replace(/[\[\]]/g,""),g(),t,!1,c,!1))){N.alternation===F.alternation&&-1===N.locator[N.alternation].toString().indexOf(F.locator[F.alternation].toString().split("")[0])&&(N.na=N.na||N.locator[N.alternation].toString(),-1===N.na.indexOf(N.locator[N.alternation].toString().split("")[0])&&(N.na=N.na+","+N.locator[F.alternation].toString().split("")[0]),I=!0,N.locator[N.alternation]=F.locator[F.alternation].toString().split("")[0]+","+N.locator[N.alternation],k.splice(k.indexOf(F),0,N));break}}}I||k.push(N)}}"string"==typeof E&&(k=e.map(k,function(t,n){if(isFinite(n)){var r=t.alternation,o=t.locator[r].toString().split(",");t.locator[r]=i,t.alternation=i;for(var a=0;a<o.length;a++)-1!==e.inArray(o[a],M)&&(t.locator[r]!==i?(t.locator[r]+=",",t.locator[r]+=o[a]):t.locator[r]=parseInt(o[a]),t.alternation=r);if(t.locator[r]!==i)return t}})),f=C.concat(k),u=t,p=f.length>0,a=k.length>0,r=P.slice()}else a=d(w.matches[E]||n.matches[E],[E].concat(l),m);if(a)return!0}else if(a.isQuantifier&&m!==n.matches[e.inArray(a,n.matches)-1])for(var R=a,$=r.length>0?r.shift():0;$<(isNaN(R.quantifier.max)?$+1:R.quantifier.max)&&u<=t;$++){var _=n.matches[e.inArray(R,n.matches)-1];if(a=d(_,[$].concat(l),_)){if((s=f[f.length-1].match).optionalQuantifier=$>R.quantifier.min-1,v(s,_)){if($>R.quantifier.min-1){p=!0,u=t;break}return!0}return!0}}else if(a=o(a,r,l,m))return!0}else u++;var H,B,q,W,Y,z}for(var m=r.length>0?r.shift():0;m<n.matches.length;m++)if(!0!==n.matches[m].isQuantifier){var v=d(n.matches[m],[m].concat(a),l);if(v&&u===t)return v;if(u>t)break}}function a(e){if(c.keepStatic&&t>0&&e.length>1+(""===e[e.length-1].match.def?1:0)&&!0!==e[0].match.optionality&&!0!==e[0].match.optionalQuantifier&&null===e[0].match.fn&&!/[0-9a-bA-Z]/.test(e[0].match.def)){if(g().validPositions[t-1]===i)return[b(e)];if(g().validPositions[t-1].alternation===e[0].alternation)return[b(e)];if(g().validPositions[t-1])return[b(e)]}return e}var s,l=g().maskToken,u=n?r:0,d=n?n.slice():[0],f=[],p=!1,h=n?n.join(""):"";if(t>-1){if(n===i){for(var m,v=t-1;(m=g().validPositions[v]||g().tests[v])===i&&v>-1;)v--;m!==i&&v>-1&&(d=function(t){var n=[];return e.isArray(t)||(t=[t]),t.length>0&&(t[0].alternation===i?0===(n=b(t.slice()).locator.slice()).length&&(n=t[0].locator.slice()):e.each(t,function(e,t){if(""!==t.def)if(0===n.length)n=t.locator.slice();else for(var i=0;i<n.length;i++)t.locator[i]&&-1===n[i].toString().indexOf(t.locator[i])&&(n[i]+=","+t.locator[i])})),n}(m),h=d.join(""),u=v)}if(g().tests[t]&&g().tests[t][0].cd===h)return a(g().tests[t]);for(var y=d.shift();y<l.length&&!(o(l[y],d,[y])&&u===t||u>t);y++);}return(0===f.length||p)&&f.push({match:{fn:null,cardinality:0,optionality:!0,casing:null,def:"",placeholder:""},locator:[],cd:h}),n!==i&&g().tests[t]?a(e.extend(!0,[],f)):(g().tests[t]=e.extend(!0,[],f),a(g().tests[t]))}function S(){return g()._buffer===i&&(g()._buffer=h(!1,1),g().buffer===i&&(g().buffer=g()._buffer.slice())),g()._buffer}function E(e){return g().buffer!==i&&!0!==e||(g().buffer=h(!0,v(),!0)),g().buffer}function T(e,t,n){var r,o;if(!0===e)m(),e=0,t=n.length;else for(r=e;r<t;r++)delete g().validPositions[r];for(o=e,r=e;r<t;r++)if(m(!0),n[r]!==c.skipOptionalPartCharacter){var a=P(o,n[r],!0,!0);!1!==a&&(m(!0),o=a.caret!==i?a.caret:a.pos+1)}}function D(t,n,r){for(var o,a=c.greedy?n:n.slice(0,1),s=!1,l=r!==i?r.split(","):[],u=0;u<l.length;u++)-1!==(o=t.indexOf(l[u]))&&t.splice(o,1);for(var d=0;d<t.length;d++)if(-1!==e.inArray(t[d],a)){s=!0;break}return s}function P(t,n,o,a,s,l){function u(e){var t=V?e.begin-e.end>1||e.begin-e.end==1:e.end-e.begin>1||e.end-e.begin==1;return t&&0===e.begin&&e.end===g().maskLength?"full":t}function d(n,o,s){var l=!1;return e.each(C(n),function(d,p){for(var h=p.match,b=o?1:0,x="",w=h.cardinality;w>b;w--)x+=(k=n-(w-1),g().validPositions[k]===i?N(k):g().validPositions[k].input);var k;if(o&&(x+=o),E(!0),!1!==(l=null!=h.fn?h.fn.test(x,g(),n,s,c,u(t)):(o===h.def||o===c.skipOptionalPartCharacter)&&""!==h.def&&{c:N(n,h,!0)||h.def,pos:n})){var C=l.c!==i?l.c:o;C=C===c.skipOptionalPartCharacter&&null===h.fn?N(n,h,!0)||h.def:C;var S=n,D=E();if(l.remove!==i&&(e.isArray(l.remove)||(l.remove=[l.remove]),e.each(l.remove.sort(function(e,t){return t-e}),function(e,t){y(t,t+1,!0)})),l.insert!==i&&(e.isArray(l.insert)||(l.insert=[l.insert]),e.each(l.insert.sort(function(e,t){return e-t}),function(e,t){P(t.pos,t.c,!0,a)})),l.refreshFromBuffer){var M=l.refreshFromBuffer;if(T(!0===M?M:M.start,M.end,D),l.pos===i&&l.c===i)return l.pos=v(),!1;if((S=l.pos!==i?l.pos:n)!==n)return l=e.extend(l,P(S,C,!0,a)),!1}else if(!0!==l&&l.pos!==i&&l.pos!==n&&(S=l.pos,T(n,S,E().slice()),S!==n))return l=e.extend(l,P(S,C,!0)),!1;return(!0===l||l.pos!==i||l.c!==i)&&(d>0&&m(!0),f(S,e.extend({},p,{input:function(t,n,i){switch(c.casing||n.casing){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase();break;case"title":var o=g().validPositions[i-1];t=0===i||o&&o.input===String.fromCharCode(r.keyCode.SPACE)?t.toUpperCase():t.toLowerCase();break;default:if(e.isFunction(c.casing)){var a=Array.prototype.slice.call(arguments);a.push(g().validPositions),t=c.casing.apply(this,a)}}return t}(C,h,S)}),a,u(t))||(l=!1),!1)}}),l}function f(t,n,r,o){if(o||c.insertMode&&g().validPositions[t]!==i&&r===i){var a,s=e.extend(!0,{},g().validPositions),l=v(i,!0);for(a=t;a<=l;a++)delete g().validPositions[a];g().validPositions[t]=e.extend(!0,{},n);var u,d=!0,f=g().validPositions,h=!1,y=g().maskLength;for(a=u=t;a<=l;a++){var b=s[a];if(b!==i)for(var x=u;x<g().maskLength&&(null===b.match.fn&&f[a]&&(!0===f[a].match.optionalQuantifier||!0===f[a].match.optionality)||null!=b.match.fn);){if(x++,!1===h&&s[x]&&s[x].match.def===b.match.def)g().validPositions[x]=e.extend(!0,{},s[x]),g().validPositions[x].input=b.input,p(x),u=x,d=!0;else if(k(x,b.match.def)){var w=P(x,b.input,!0,!0);d=!1!==w,u=w.caret||w.insert?v():x,h=!0}else if(!(d=!0===b.generatedInput)&&x>=g().maskLength-1)break;if(g().maskLength<y&&(g().maskLength=y),d)break}if(!d)break}if(!d)return g().validPositions=e.extend(!0,{},s),m(!0),!1}else g().validPositions[t]=e.extend(!0,{},n);return m(!0),!0}function p(t){for(var n=t-1;n>-1&&!g().validPositions[n];n--);var r,o;for(n++;n<t;n++)g().validPositions[n]===i&&(!1===c.jitMasking||c.jitMasking>n)&&(""===(o=C(n,x(n-1).locator,n-1).slice())[o.length-1].match.def&&o.pop(),(r=b(o))&&(r.match.def===c.radixPointDefinitionSymbol||!M(n,!0)||e.inArray(c.radixPoint,E())<n&&r.match.fn&&r.match.fn.test(N(n),g(),n,!1,c))&&!1!==(w=d(n,N(n,r.match,!0)||(null==r.match.fn?r.match.def:""!==N(n)?N(n):E()[n]),!0))&&(g().validPositions[w.pos||n].generatedInput=!0))}o=!0===o;var h=t;t.begin!==i&&(h=V&&!u(t)?t.end:t.begin);var w=!0,S=e.extend(!0,{},g().validPositions);if(e.isFunction(c.preValidation)&&!o&&!0!==a&&!0!==l&&(w=c.preValidation(E(),h,n,u(t),c)),!0===w){if(p(h),u(t)&&(H(i,r.keyCode.DELETE,t,!0,!0),h=g().p),h<g().maskLength&&(z===i||h<z)&&(w=d(h,n,o),(!o||!0===a)&&!1===w&&!0!==l)){var O=g().validPositions[h];if(!O||null!==O.match.fn||O.match.def!==n&&n!==c.skipOptionalPartCharacter){if((c.insertMode||g().validPositions[A(h)]===i)&&!M(h,!0))for(var L=h+1,I=A(h);L<=I;L++)if(!1!==(w=d(L,n,o))){!function(t,n){var r=g().validPositions[n];if(r)for(var o=r.locator,a=o.length,s=t;s<n;s++)if(g().validPositions[s]===i&&!M(s,!0)){var l=C(s).slice(),c=b(l,!0),u=-1;""===l[l.length-1].match.def&&l.pop(),e.each(l,function(e,t){for(var n=0;n<a;n++){if(t.locator[n]===i||!D(t.locator[n].toString().split(","),o[n].toString().split(","),t.na)){var r=o[n],s=c.locator[n],l=t.locator[n];r-s>Math.abs(r-l)&&(c=t);break}u<n&&(u=n,c=t)}}),(c=e.extend({},c,{input:N(s,c.match,!0)||c.match.def})).generatedInput=!0,f(s,c,!0),g().validPositions[n]=i,d(n,r.input,!0)}}(h,w.pos!==i?w.pos:L),h=L;break}}else w={caret:A(h)}}!1===w&&c.keepStatic&&!o&&!0!==s&&(w=function(t,n,r){var o,s,l,u,d,f,p,h,y=e.extend(!0,{},g().validPositions),b=!1,x=v();for(u=g().validPositions[x];x>=0;x--)if((l=g().validPositions[x])&&l.alternation!==i){if(o=x,s=g().validPositions[o].alternation,u.locator[l.alternation]!==l.locator[l.alternation])break;u=l}if(s!==i){h=parseInt(o);var w=u.locator[u.alternation||s]!==i?u.locator[u.alternation||s]:p[0];w.length>0&&(w=w.split(",")[0]);var k=g().validPositions[h],S=g().validPositions[h-1];e.each(C(h,S?S.locator:i,h-1),function(o,l){p=l.locator[s]?l.locator[s].toString().split(","):[];for(var u=0;u<p.length;u++){var x=[],C=0,S=0,E=!1;if(w<p[u]&&(l.na===i||-1===e.inArray(p[u],l.na.split(","))||-1===e.inArray(w.toString(),p))){g().validPositions[h]=e.extend(!0,{},l);var T=g().validPositions[h].locator;for(g().validPositions[h].locator[s]=parseInt(p[u]),null==l.match.fn?(k.input!==l.match.def&&(E=!0,!0!==k.generatedInput&&x.push(k.input)),S++,g().validPositions[h].generatedInput=!/[0-9a-bA-Z]/.test(l.match.def),g().validPositions[h].input=l.match.def):g().validPositions[h].input=k.input,d=h+1;d<v(i,!0)+1;d++)(f=g().validPositions[d])&&!0!==f.generatedInput&&/[0-9a-bA-Z]/.test(f.input)?x.push(f.input):d<t&&C++,delete g().validPositions[d];for(E&&x[0]===l.match.def&&x.shift(),m(!0),b=!0;x.length>0;){var D=x.shift();if(D!==c.skipOptionalPartCharacter&&!(b=P(v(i,!0)+1,D,!1,a,!0)))break}if(b){g().validPositions[h].locator=T;var M=v(t)+1;for(d=h+1;d<v()+1;d++)((f=g().validPositions[d])===i||null==f.match.fn)&&d<t+(S-C)&&S++;b=P((t+=S-C)>M?M:t,n,r,a,!0)}if(b)return!1;m(),g().validPositions=e.extend(!0,{},y)}}})}return b}(h,n,o)),!0===w&&(w={pos:h})}if(e.isFunction(c.postValidation)&&!1!==w&&!o&&!0!==a&&!0!==l){var j=c.postValidation(E(!0),w,c);if(j.refreshFromBuffer&&j.buffer){var F=j.refreshFromBuffer;T(!0===F?F:F.start,F.end,j.buffer)}w=!0===j?w:j}return w&&w.pos===i&&(w.pos=h),!1!==w&&!0!==l||(m(!0),g().validPositions=e.extend(!0,{},S)),w}function M(e,t){var n=x(e).match;if(""===n.def&&(n=w(e).match),null!=n.fn)return n.fn;if(!0!==t&&e>-1){var i=C(e);return i.length>1+(""===i[i.length-1].match.def?1:0)}return!1}function A(e,t){var n=g().maskLength;if(e>=n)return n;var i=e;for(C(n+1).length>1&&(h(!0,n+1,!0),n=g().maskLength);++i<n&&(!0===t&&(!0!==w(i).match.newBlockMarker||!M(i))||!0!==t&&!M(i)););return i}function O(e,t){var n,i=e;if(i<=0)return 0;for(;--i>0&&(!0===t&&!0!==w(i).match.newBlockMarker||!0!==t&&!M(i)&&((n=C(i)).length<2||2===n.length&&""===n[1].match.def)););return i}function L(t,n,r,o,a){if(o&&e.isFunction(c.onBeforeWrite)){var s=c.onBeforeWrite.call(G,o,n,r,c);if(s){if(s.refreshFromBuffer){var l=s.refreshFromBuffer;T(!0===l?l:l.start,l.end,s.buffer||n),n=E(!0)}r!==i&&(r=s.caret!==i?s.caret:r)}}t!==i&&(t.inputmask._valueSet(n.join("")),r===i||o!==i&&"blur"===o.type?q(t,r,0===n.length):p&&o&&"input"===o.type?setTimeout(function(){F(t,r)},0):F(t,r),!0===a&&(Z=!0,e(t).trigger("input")))}function N(t,n,r){if((n=n||w(t).match).placeholder!==i||!0===r)return e.isFunction(n.placeholder)?n.placeholder(c):n.placeholder;if(null===n.fn){if(t>-1&&g().validPositions[t]===i){var o,a=C(t),s=[];if(a.length>1+(""===a[a.length-1].match.def?1:0))for(var l=0;l<a.length;l++)if(!0!==a[l].match.optionality&&!0!==a[l].match.optionalQuantifier&&(null===a[l].match.fn||o===i||!1!==a[l].match.fn.test(o.match.def,g(),t,!0,c))&&(s.push(a[l]),null===a[l].match.fn&&(o=a[l]),s.length>1&&/[0-9a-bA-Z]/.test(s[0].match.def)))return c.placeholder.charAt(t%c.placeholder.length)}return n.def}return c.placeholder.charAt(t%c.placeholder.length)}function I(t,o,a,s,l){var u=s.slice(),d="",f=-1,p=i;if(m(),a||!0===c.autoUnmask)f=A(f);else{var h=S().slice(0,A(-1)).join(""),y=u.join("").match(new RegExp("^"+r.escapeRegex(h),"g"));y&&y.length>0&&(u.splice(0,y.length*h.length),f=A(f))}if(-1===f?(g().p=A(f),f=0):g().p=f,e.each(u,function(n,r){if(r!==i)if(g().validPositions[n]===i&&u[n]===N(n)&&M(n,!0)&&!1===P(n,u[n],!0,i,i,!0))g().p++;else{var o=new e.Event("_checkval");o.which=r.charCodeAt(0),d+=r;var s=v(i,!0),l=g().validPositions[s],h=x(s+1,l?l.locator.slice():i,s);if(C=f,D=d,-1===S().slice(C,A(C)).join("").indexOf(D)||M(C)||w(C).match.nativeDef!==D.charAt(D.length-1)||a||c.autoUnmask){var y=a?n:null==h.match.fn&&h.match.optionality&&s+1<g().p?s+1:g().p;p=te.keypressEvent.call(t,o,!0,!1,a,y),f=y+1,d=""}else p=te.keypressEvent.call(t,o,!0,!1,!0,s+1);if(!1!==p&&!a&&e.isFunction(c.onBeforeWrite)){var b=p;if(p=c.onBeforeWrite.call(G,o,E(),p.forwardPosition,c),(p=e.extend(b,p))&&p.refreshFromBuffer){var k=p.refreshFromBuffer;T(!0===k?k:k.start,k.end,p.buffer),m(!0),p.caret&&(g().p=p.caret,p.forwardPosition=p.caret)}}}var C,D}),o){var b=i;n.activeElement===t&&p&&(b=c.numericInput?O(p.forwardPosition):p.forwardPosition),L(t,E(),b,l||new e.Event("checkval"),l&&"input"===l.type)}}function j(t){if(t){if(t.inputmask===i)return t.value;t.inputmask&&t.inputmask.refreshValue&&te.setValueEvent.call(t)}var n=[],r=g().validPositions;for(var o in r)r[o].match&&null!=r[o].match.fn&&n.push(r[o].input);var a=0===n.length?"":(V?n.reverse():n).join("");if(e.isFunction(c.onUnMask)){var s=(V?E().slice().reverse():E()).join("");a=c.onUnMask.call(G,s,a,c)}return a}function F(e,r,o,a){function s(e){return!0===a||!V||"number"!=typeof e||c.greedy&&""===c.placeholder||(e=E().join("").length-e),e}var l;if(r===i)return e.setSelectionRange?(r=e.selectionStart,o=e.selectionEnd):t.getSelection?(l=t.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==e&&l.commonAncestorContainer!==e||(r=l.startOffset,o=l.endOffset):n.selection&&n.selection.createRange&&(o=(r=0-(l=n.selection.createRange()).duplicate().moveStart("character",-e.inputmask._valueGet().length))+l.text.length),{begin:s(r),end:s(o)};if(r.begin!==i&&(o=r.end,r=r.begin),"number"==typeof r){r=s(r),o="number"==typeof(o=s(o))?o:r;var d=parseInt(((e.ownerDocument.defaultView||t).getComputedStyle?(e.ownerDocument.defaultView||t).getComputedStyle(e,null):e.currentStyle).fontSize)*o;if(e.scrollLeft=d>e.scrollWidth?d:0,u||!1!==c.insertMode||r!==o||o++,e.setSelectionRange)e.selectionStart=r,e.selectionEnd=o;else if(t.getSelection){if(l=n.createRange(),e.firstChild===i||null===e.firstChild){var f=n.createTextNode("");e.appendChild(f)}l.setStart(e.firstChild,r<e.inputmask._valueGet().length?r:e.inputmask._valueGet().length),l.setEnd(e.firstChild,o<e.inputmask._valueGet().length?o:e.inputmask._valueGet().length),l.collapse(!0);var p=t.getSelection();p.removeAllRanges(),p.addRange(l)}else e.createTextRange&&((l=e.createTextRange()).collapse(!0),l.moveEnd("character",o),l.moveStart("character",r),l.select());q(e,{begin:r,end:o})}}function R(t){var n,r,o=E(),a=o.length,s=v(),l={},c=g().validPositions[s],u=c!==i?c.locator.slice():i;for(n=s+1;n<o.length;n++)u=(r=x(n,u,n-1)).locator.slice(),l[n]=e.extend(!0,{},r);var d=c&&c.alternation!==i?c.locator[c.alternation]:i;for(n=a-1;n>s&&((r=l[n]).match.optionality||r.match.optionalQuantifier&&r.match.newBlockMarker||d&&(d!==l[n].locator[c.alternation]&&null!=r.match.fn||null===r.match.fn&&r.locator[c.alternation]&&D(r.locator[c.alternation].toString().split(","),d.toString().split(","))&&""!==C(n)[0].def))&&o[n]===N(n,r.match);n--)a--;return t?{l:a,def:l[a]?l[a].match:i}:a}function $(e){for(var t,n=R(),r=e.length,o=g().validPositions[v()];n<r&&!M(n,!0)&&(t=o!==i?x(n,o.locator.slice(""),o):w(n))&&!0!==t.match.optionality&&(!0!==t.match.optionalQuantifier&&!0!==t.match.newBlockMarker||n+1===r&&""===(o!==i?x(n+1,o.locator.slice(""),o):w(n+1)).match.def);)n++;for(;(t=g().validPositions[n-1])&&t&&t.match.optionality&&t.input===c.skipOptionalPartCharacter;)n--;return e.splice(n),e}function _(t){if(e.isFunction(c.isComplete))return c.isComplete(t,c);if("*"===c.repeat)return i;var n=!1,r=R(!0),o=O(r.l);if(r.def===i||r.def.newBlockMarker||r.def.optionality||r.def.optionalQuantifier){n=!0;for(var a=0;a<=o;a++){var s=x(a).match;if(null!==s.fn&&g().validPositions[a]===i&&!0!==s.optionality&&!0!==s.optionalQuantifier||null===s.fn&&t[a]!==N(a,s)){n=!1;break}}}return n}function H(t,n,o,a,s){if((c.numericInput||V)&&(n===r.keyCode.BACKSPACE?n=r.keyCode.DELETE:n===r.keyCode.DELETE&&(n=r.keyCode.BACKSPACE),V)){var l=o.end;o.end=o.begin,o.begin=l}n===r.keyCode.BACKSPACE&&(o.end-o.begin<1||!1===c.insertMode)?(o.begin=O(o.begin),g().validPositions[o.begin]!==i&&g().validPositions[o.begin].input===c.groupSeparator&&o.begin--):n===r.keyCode.DELETE&&o.begin===o.end&&(o.end=M(o.end,!0)&&g().validPositions[o.end]&&g().validPositions[o.end].input!==c.radixPoint?o.end+1:A(o.end)+1,g().validPositions[o.begin]!==i&&g().validPositions[o.begin].input===c.groupSeparator&&o.end++),y(o.begin,o.end,!1,a),!0!==a&&function(){if(c.keepStatic){for(var n=[],r=v(-1,!0),o=e.extend(!0,{},g().validPositions),a=g().validPositions[r];r>=0;r--){var s=g().validPositions[r];if(s){if(!0!==s.generatedInput&&/[0-9a-bA-Z]/.test(s.input)&&n.push(s.input),delete g().validPositions[r],s.alternation!==i&&s.locator[s.alternation]!==a.locator[s.alternation])break;a=s}}if(r>-1)for(g().p=A(v(-1,!0));n.length>0;){var l=new e.Event("keypress");l.which=n.pop().charCodeAt(0),te.keypressEvent.call(t,l,!0,!1,!1,g().p)}else g().validPositions=e.extend(!0,{},o)}}();var u=v(o.begin,!0);if(u<o.begin)g().p=A(u);else if(!0!==a&&(g().p=o.begin,!0!==s))for(;g().p<u&&g().validPositions[g().p]===i;)g().p++}function B(i){var r=(i.ownerDocument.defaultView||t).getComputedStyle(i,null),o=n.createElement("div");o.style.width=r.width,o.style.textAlign=r.textAlign,(U=n.createElement("div")).className="im-colormask",i.parentNode.insertBefore(U,i),i.parentNode.removeChild(i),U.appendChild(o),U.appendChild(i),i.style.left=o.offsetLeft+"px",e(i).on("click",function(e){return F(i,function(e){var t,o=n.createElement("span");for(var a in r)isNaN(a)&&-1!==a.indexOf("font")&&(o.style[a]=r[a]);o.style.textTransform=r.textTransform,o.style.letterSpacing=r.letterSpacing,o.style.position="absolute",o.style.height="auto",o.style.width="auto",o.style.visibility="hidden",o.style.whiteSpace="nowrap",n.body.appendChild(o);var s,l=i.inputmask._valueGet(),c=0;for(t=0,s=l.length;t<=s;t++){if(o.innerHTML+=l.charAt(t)||"_",o.offsetWidth>=e){var u=e-c,d=o.offsetWidth-e;o.innerHTML=l.charAt(t),t=(u-=o.offsetWidth/3)<d?t-1:t;break}c=o.offsetWidth}return n.body.removeChild(o),t}(e.clientX)),te.clickEvent.call(i,[e])}),e(i).on("keydown",function(e){e.shiftKey||!1===c.insertMode||setTimeout(function(){q(i)},0)})}function q(e,t,r){function o(){f||null!==s.fn&&l.input!==i?f&&(null!==s.fn&&l.input!==i||""===s.def)&&(f=!1,d+="</span>"):(f=!0,d+="<span class='im-static'>")}function a(i){!0!==i&&p!==t.begin||n.activeElement!==e||(d+="<span class='im-caret' style='border-right-width: 1px;border-right-style: solid;'></span>")}var s,l,u,d="",f=!1,p=0;if(U!==i){var h=E();if(t===i?t=F(e):t.begin===i&&(t={begin:t,end:t}),!0!==r){var m=v();do{a(),g().validPositions[p]?(l=g().validPositions[p],s=l.match,u=l.locator.slice(),o(),d+=h[p]):(l=x(p,u,p-1),s=l.match,u=l.locator.slice(),(!1===c.jitMasking||p<m||"number"==typeof c.jitMasking&&isFinite(c.jitMasking)&&c.jitMasking>p)&&(o(),d+=N(p,s))),p++}while((z===i||p<z)&&(null!==s.fn||""!==s.def)||m>p||f);-1===d.indexOf("im-caret")&&a(!0),f&&o()}var y=U.getElementsByTagName("div")[0];y.innerHTML=d,e.inputmask.positionColorMask(e,y)}}s=s||this.maskset,c=c||this.opts;var W,Y,z,U,G=this,X=this.el,V=this.isRTL,K=!1,Z=!1,Q=!1,J=!1,ee={on:function(t,n,o){var a=function(t){if(this.inputmask===i&&"FORM"!==this.nodeName){var n=e.data(this,"_inputmask_opts");n?new r(n).mask(this):ee.off(this)}else{if("setvalue"===t.type||"FORM"===this.nodeName||!(this.disabled||this.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||!1===c.tabThrough&&t.keyCode===r.keyCode.TAB))){switch(t.type){case"input":if(!0===Z)return Z=!1,t.preventDefault();break;case"keydown":K=!1,Z=!1;break;case"keypress":if(!0===K)return t.preventDefault();K=!0;break;case"click":if(d||f){var a=this,s=arguments;return setTimeout(function(){o.apply(a,s)},0),!1}}var l=o.apply(this,arguments);return!1===l&&(t.preventDefault(),t.stopPropagation()),l}t.preventDefault()}};t.inputmask.events[n]=t.inputmask.events[n]||[],t.inputmask.events[n].push(a),-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).on(n,a):e(t).on(n,a)},off:function(t,n){if(t.inputmask&&t.inputmask.events){var i;n?(i=[])[n]=t.inputmask.events[n]:i=t.inputmask.events,e.each(i,function(n,i){for(;i.length>0;){var r=i.pop();-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).off(n,r):e(t).off(n,r)}delete t.inputmask.events[n]})}}},te={keydownEvent:function(t){var i=this,o=e(i),a=t.keyCode,s=F(i);if(a===r.keyCode.BACKSPACE||a===r.keyCode.DELETE||f&&a===r.keyCode.BACKSPACE_SAFARI||t.ctrlKey&&a===r.keyCode.X&&!function(e){var t=n.createElement("input"),i="oncut"in t;return i||(t.setAttribute("oncut","return;"),i="function"==typeof t.oncut),t=null,i}())t.preventDefault(),H(i,a,s),L(i,E(!0),g().p,t,i.inputmask._valueGet()!==E().join("")),i.inputmask._valueGet()===S().join("")?o.trigger("cleared"):!0===_(E())&&o.trigger("complete");else if(a===r.keyCode.END||a===r.keyCode.PAGE_DOWN){t.preventDefault();var l=A(v());c.insertMode||l!==g().maskLength||t.shiftKey||l--,F(i,t.shiftKey?s.begin:l,l,!0)}else a===r.keyCode.HOME&&!t.shiftKey||a===r.keyCode.PAGE_UP?(t.preventDefault(),F(i,0,t.shiftKey?s.begin:0,!0)):(c.undoOnEscape&&a===r.keyCode.ESCAPE||90===a&&t.ctrlKey)&&!0!==t.altKey?(I(i,!0,!1,W.split("")),o.trigger("click")):a!==r.keyCode.INSERT||t.shiftKey||t.ctrlKey?!0===c.tabThrough&&a===r.keyCode.TAB?(!0===t.shiftKey?(null===w(s.begin).match.fn&&(s.begin=A(s.begin)),s.end=O(s.begin,!0),s.begin=O(s.end,!0)):(s.begin=A(s.begin,!0),s.end=A(s.begin,!0),s.end<g().maskLength&&s.end--),s.begin<g().maskLength&&(t.preventDefault(),F(i,s.begin,s.end))):t.shiftKey||!1===c.insertMode&&(a===r.keyCode.RIGHT?setTimeout(function(){var e=F(i);F(i,e.begin)},0):a===r.keyCode.LEFT&&setTimeout(function(){var e=F(i);F(i,V?e.begin+1:e.begin-1)},0)):(c.insertMode=!c.insertMode,F(i,c.insertMode||s.begin!==g().maskLength?s.begin:s.begin-1));c.onKeyDown.call(this,t,E(),F(i).begin,c),Q=-1!==e.inArray(a,c.ignorables)},keypressEvent:function(t,n,o,a,s){var l=this,u=e(l),d=t.which||t.charCode||t.keyCode;if(!(!0===n||t.ctrlKey&&t.altKey)&&(t.ctrlKey||t.metaKey||Q))return d===r.keyCode.ENTER&&W!==E().join("")&&(W=E().join(""),setTimeout(function(){u.trigger("change")},0)),!0;if(d){46===d&&!1===t.shiftKey&&""!==c.radixPoint&&(d=c.radixPoint.charCodeAt(0));var f,p=n?{begin:s,end:s}:F(l),h=String.fromCharCode(d);g().writeOutBuffer=!0;var v=P(p,h,a);if(!1!==v&&(m(!0),f=v.caret!==i?v.caret:n?v.pos+1:A(v.pos),g().p=f),!1!==o&&(setTimeout(function(){c.onKeyValidation.call(l,d,v,c)},0),g().writeOutBuffer&&!1!==v)){var y=E();L(l,y,c.numericInput&&v.caret===i?O(f):f,t,!0!==n),!0!==n&&setTimeout(function(){!0===_(y)&&u.trigger("complete")},0)}if(t.preventDefault(),n)return!1!==v&&(v.forwardPosition=f),v}},pasteEvent:function(n){var i,r=n.originalEvent||n,o=e(this),a=this.inputmask._valueGet(!0),s=F(this);V&&(i=s.end,s.end=s.begin,s.begin=i);var l=a.substr(0,s.begin),u=a.substr(s.end,a.length);if(l===(V?S().reverse():S()).slice(0,s.begin).join("")&&(l=""),u===(V?S().reverse():S()).slice(s.end).join("")&&(u=""),V&&(i=l,l=u,u=i),t.clipboardData&&t.clipboardData.getData)a=l+t.clipboardData.getData("Text")+u;else{if(!r.clipboardData||!r.clipboardData.getData)return!0;a=l+r.clipboardData.getData("text/plain")+u}var d=a;if(e.isFunction(c.onBeforePaste)){if(!1===(d=c.onBeforePaste.call(G,a,c)))return n.preventDefault();d||(d=a)}return I(this,!1,!1,V?d.split("").reverse():d.toString().split("")),L(this,E(),A(v()),n,W!==E().join("")),!0===_(E())&&o.trigger("complete"),n.preventDefault()},inputFallBackEvent:function(t){var n=this,i=n.inputmask._valueGet();if(E().join("")!==i){var o=F(n);if(!1===function(t,n,i){if("."===n.charAt(i.begin-1)&&""!==c.radixPoint&&((n=n.split(""))[i.begin-1]=c.radixPoint.charAt(0),n=n.join("")),n.charAt(i.begin-1)===c.radixPoint&&n.length>E().length){var r=new e.Event("keypress");return r.which=c.radixPoint.charCodeAt(0),te.keypressEvent.call(t,r,!0,!0,!1,i.begin-1),!1}}(n,i,o))return!1;if(i=i.replace(new RegExp("("+r.escapeRegex(S().join(""))+")*"),""),!1===function(t,n,i){if(d){var r=n.replace(E().join(""),"");if(1===r.length){var o=new e.Event("keypress");return o.which=r.charCodeAt(0),te.keypressEvent.call(t,o,!0,!0,!1,g().validPositions[i.begin-1]?i.begin:i.begin-1),!1}}}(n,i,o))return!1;o.begin>i.length&&(F(n,i.length),o=F(n));var a=E().join(""),s=i.substr(0,o.begin),l=i.substr(o.begin),u=a.substr(0,o.begin),f=a.substr(o.begin),p=o,h="",m=!1;if(s!==u){p.begin=0;for(var v=(m=s.length>=u.length)?s.length:u.length,y=0;s.charAt(y)===u.charAt(y)&&y<v;y++)p.begin++;m&&(h+=s.slice(p.begin,p.end))}l!==f&&(l.length>f.length?m&&(p.end=p.begin):l.length<f.length?p.end+=f.length-l.length:l.charAt(0)!==f.charAt(0)&&p.end++),L(n,E(),p),h.length>0?e.each(h.split(""),function(t,i){var r=new e.Event("keypress");r.which=i.charCodeAt(0),Q=!1,te.keypressEvent.call(n,r)}):(p.begin===p.end-1&&F(n,O(p.begin+1),p.end),t.keyCode=r.keyCode.DELETE,te.keydownEvent.call(n,t)),t.preventDefault()}},setValueEvent:function(t){this.inputmask.refreshValue=!1;var n=this.inputmask._valueGet(!0);e.isFunction(c.onBeforeMask)&&(n=c.onBeforeMask.call(G,n,c)||n),n=n.split(""),I(this,!0,!1,V?n.reverse():n),W=E().join(""),(c.clearMaskOnLostFocus||c.clearIncomplete)&&this.inputmask._valueGet()===S().join("")&&this.inputmask._valueSet("")},focusEvent:function(e){var t=this.inputmask._valueGet();c.showMaskOnFocus&&(!c.showMaskOnHover||c.showMaskOnHover&&""===t)&&(this.inputmask._valueGet()!==E().join("")?L(this,E(),A(v())):!1===J&&F(this,A(v()))),!0===c.positionCaretOnTab&&!1===J&&""!==t&&(L(this,E(),F(this)),te.clickEvent.apply(this,[e,!0])),W=E().join("")},mouseleaveEvent:function(e){if(J=!1,c.clearMaskOnLostFocus&&n.activeElement!==this){var t=E().slice(),i=this.inputmask._valueGet();i!==this.getAttribute("placeholder")&&""!==i&&(-1===v()&&i===S().join("")?t=[]:$(t),L(this,t))}},clickEvent:function(t,r){var o=this;setTimeout(function(){if(n.activeElement===o){var t=F(o);if(r&&(V?t.end=t.begin:t.begin=t.end),t.begin===t.end)switch(c.positionCaretOnClick){case"none":break;case"radixFocus":if(function(t){if(""!==c.radixPoint){var n=g().validPositions;if(n[t]===i||n[t].input===N(t)){if(t<A(-1))return!0;var r=e.inArray(c.radixPoint,E());if(-1!==r){for(var o in n)if(r<o&&n[o].input!==N(o))return!1;return!0}}}return!1}(t.begin)){var a=E().join("").indexOf(c.radixPoint);F(o,c.numericInput?A(a):a);break}default:var s=t.begin,l=v(s,!0),u=A(l);if(s<u)F(o,M(s,!0)||M(s-1,!0)?s:A(s));else{var d=g().validPositions[l],f=x(u,d?d.match.locator:i,d),p=N(u,f.match);if(""!==p&&E()[u]!==p&&!0!==f.match.optionalQuantifier&&!0!==f.match.newBlockMarker||!M(u,!0)&&f.match.def===p){var h=A(u);(s>=h||s===u)&&(u=h)}F(o,u)}}}},0)},dblclickEvent:function(e){var t=this;setTimeout(function(){F(t,0,A(v()))},0)},cutEvent:function(i){var o=e(this),a=F(this),s=i.originalEvent||i,l=t.clipboardData||s.clipboardData,c=V?E().slice(a.end,a.begin):E().slice(a.begin,a.end);l.setData("text",V?c.reverse().join(""):c.join("")),n.execCommand&&n.execCommand("copy"),H(this,r.keyCode.DELETE,a),L(this,E(),g().p,i,W!==E().join("")),this.inputmask._valueGet()===S().join("")&&o.trigger("cleared")},blurEvent:function(t){var n=e(this);if(this.inputmask){var r=this.inputmask._valueGet(),o=E().slice();""!==r&&(c.clearMaskOnLostFocus&&(-1===v()&&r===S().join("")?o=[]:$(o)),!1===_(o)&&(setTimeout(function(){n.trigger("incomplete")},0),c.clearIncomplete&&(m(),o=c.clearMaskOnLostFocus?[]:S().slice())),L(this,o,i,t)),W!==E().join("")&&(W=o.join(""),n.trigger("change"))}},mouseenterEvent:function(e){J=!0,n.activeElement!==this&&c.showMaskOnHover&&this.inputmask._valueGet()!==E().join("")&&L(this,E())},submitEvent:function(e){W!==E().join("")&&Y.trigger("change"),c.clearMaskOnLostFocus&&-1===v()&&X.inputmask._valueGet&&X.inputmask._valueGet()===S().join("")&&X.inputmask._valueSet(""),c.removeMaskOnSubmit&&(X.inputmask._valueSet(X.inputmask.unmaskedvalue(),!0),setTimeout(function(){L(X,E())},0))},resetEvent:function(e){X.inputmask.refreshValue=!0,setTimeout(function(){Y.trigger("setvalue")},0)}};r.prototype.positionColorMask=function(e,t){e.style.left=t.offsetLeft+"px"};var ne;if(o!==i)switch(o.action){case"isComplete":return X=o.el,_(E());case"unmaskedvalue":return X!==i&&o.value===i||(ne=o.value,ne=(e.isFunction(c.onBeforeMask)?c.onBeforeMask.call(G,ne,c)||ne:ne).split(""),I(i,!1,!1,V?ne.reverse():ne),e.isFunction(c.onBeforeWrite)&&c.onBeforeWrite.call(G,i,E(),0,c)),j(X);case"mask":!function(t){ee.off(t);var r=function(t,r){var o=t.getAttribute("type"),s="INPUT"===t.tagName&&-1!==e.inArray(o,r.supportsInputType)||t.isContentEditable||"TEXTAREA"===t.tagName;if(!s)if("INPUT"===t.tagName){var l=n.createElement("input");l.setAttribute("type",o),s="text"===l.type,l=null}else s="partial";return!1!==s?function(t){function o(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==v()||!0!==r.nullable?n.activeElement===this&&r.clearMaskOnLostFocus?(V?$(E().slice()).reverse():$(E().slice())).join(""):l.call(this):"":l.call(this)}function s(t){c.call(this,t),this.inputmask&&e(this).trigger("setvalue")}var l,c;if(!t.inputmask.__valueGet){if(!0!==r.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"===a("test".__proto__)?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var u=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):i;u&&u.get&&u.set?(l=u.get,c=u.set,Object.defineProperty(t,"value",{get:o,set:s,configurable:!0})):"INPUT"!==t.tagName&&(l=function(){return this.textContent},c=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:o,set:s,configurable:!0}))}else n.__lookupGetter__&&t.__lookupGetter__("value")&&(l=t.__lookupGetter__("value"),c=t.__lookupSetter__("value"),t.__defineGetter__("value",o),t.__defineSetter__("value",s));t.inputmask.__valueGet=l,t.inputmask.__valueSet=c}t.inputmask._valueGet=function(e){return V&&!0!==e?l.call(this.el).split("").reverse().join(""):l.call(this.el)},t.inputmask._valueSet=function(e,t){c.call(this.el,null===e||e===i?"":!0!==t&&V?e.split("").reverse().join(""):e)},l===i&&(l=function(){return this.value},c=function(e){this.value=e},function(t){if(e.valHooks&&(e.valHooks[t]===i||!0!==e.valHooks[t].inputmaskpatch)){var n=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},o=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=n(e);return-1!==v(i,i,e.inputmask.maskset.validPositions)||!0!==r.nullable?t:""}return n(e)},set:function(t,n){var i,r=e(t);return i=o(t,n),t.inputmask&&r.trigger("setvalue"),i},inputmaskpatch:!0}}}(t.type),d=t,ee.on(d,"mouseenter",function(t){var n=e(this);this.inputmask._valueGet()!==E().join("")&&n.trigger("setvalue")}))}var d}(t):t.inputmask=i,s}(t,c);if(!1!==r&&(X=t,Y=e(X),-1===(z=X!==i?X.maxLength:i)&&(z=i),!0===c.colorMask&&B(X),p&&(X.hasOwnProperty("inputmode")&&(X.inputmode=c.inputmode,X.setAttribute("inputmode",c.inputmode)),"rtfm"===c.androidHack&&(!0!==c.colorMask&&B(X),X.type="password")),!0===r&&(ee.on(X,"submit",te.submitEvent),ee.on(X,"reset",te.resetEvent),ee.on(X,"mouseenter",te.mouseenterEvent),ee.on(X,"blur",te.blurEvent),ee.on(X,"focus",te.focusEvent),ee.on(X,"mouseleave",te.mouseleaveEvent),!0!==c.colorMask&&ee.on(X,"click",te.clickEvent),ee.on(X,"dblclick",te.dblclickEvent),ee.on(X,"paste",te.pasteEvent),ee.on(X,"dragdrop",te.pasteEvent),ee.on(X,"drop",te.pasteEvent),ee.on(X,"cut",te.cutEvent),ee.on(X,"complete",c.oncomplete),ee.on(X,"incomplete",c.onincomplete),ee.on(X,"cleared",c.oncleared),p||!0===c.inputEventOnly?X.removeAttribute("maxLength"):(ee.on(X,"keydown",te.keydownEvent),ee.on(X,"keypress",te.keypressEvent)),ee.on(X,"compositionstart",e.noop),ee.on(X,"compositionupdate",e.noop),ee.on(X,"compositionend",e.noop),ee.on(X,"keyup",e.noop),ee.on(X,"input",te.inputFallBackEvent),ee.on(X,"beforeinput",e.noop)),ee.on(X,"setvalue",te.setValueEvent),W=S().join(""),""!==X.inputmask._valueGet(!0)||!1===c.clearMaskOnLostFocus||n.activeElement===X)){var o=e.isFunction(c.onBeforeMask)?c.onBeforeMask.call(G,X.inputmask._valueGet(!0),c)||X.inputmask._valueGet(!0):X.inputmask._valueGet(!0);""!==o&&I(X,!0,!1,V?o.split("").reverse():o.split(""));var s=E().slice();W=s.join(""),!1===_(s)&&c.clearIncomplete&&m(),c.clearMaskOnLostFocus&&n.activeElement!==X&&(-1===v()?s=[]:$(s)),L(X,s),n.activeElement===X&&F(X,A(v()))}}(X);break;case"format":return ne=(e.isFunction(c.onBeforeMask)?c.onBeforeMask.call(G,o.value,c)||o.value:o.value).split(""),I(i,!0,!1,V?ne.reverse():ne),o.metadata?{value:V?E().slice().reverse().join(""):E().join(""),metadata:l.call(this,{action:"getmetadata"},s,c)}:V?E().slice().reverse().join(""):E().join("");case"isValid":o.value?(ne=o.value.split(""),I(i,!0,!0,V?ne.reverse():ne)):o.value=E().join("");for(var ie=E(),re=R(),oe=ie.length-1;oe>re&&!M(oe);oe--);return ie.splice(re,oe+1-re),_(ie)&&o.value===E().join("");case"getemptymask":return S().join("");case"remove":return X&&X.inputmask&&(Y=e(X),X.inputmask._valueSet(c.autoUnmask?j(X):X.inputmask._valueGet(!0)),ee.off(X),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(X),"value")&&X.inputmask.__valueGet&&Object.defineProperty(X,"value",{get:X.inputmask.__valueGet,set:X.inputmask.__valueSet,configurable:!0}):n.__lookupGetter__&&X.__lookupGetter__("value")&&X.inputmask.__valueGet&&(X.__defineGetter__("value",X.inputmask.__valueGet),X.__defineSetter__("value",X.inputmask.__valueSet)),X.inputmask=i),X;case"getmetadata":if(e.isArray(s.metadata)){var ae=h(!0,0,!1).join("");return e.each(s.metadata,function(e,t){if(t.mask===ae)return ae=t,!1}),ae}return s.metadata}}var c=navigator.userAgent,u=/mobile/i.test(c),d=/iemobile/i.test(c),f=/iphone/i.test(c)&&!d,p=/android/i.test(c)&&!d;return r.prototype={dataAttribute:"data-inputmask",defaults:{placeholder:"_",optionalmarker:{start:"[",end:"]"},quantifiermarker:{start:"{",end:"}"},groupmarker:{start:"(",end:")"},alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!0,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,n){return e.isFunction(n.onBeforeMask)?n.onBeforeMask.call(this,t,n):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:e.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",radixPointDefinitionSymbol:i,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","password"],ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,canClearPosition:e.noop,preValidation:null,postValidation:null,staticDefinitionSymbol:i,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"verbatim",colorMask:!1,androidHack:!1,importDataAttributes:!0},definitions:{9:{validator:"[0-9ï¼-ï¼]",cardinality:1,definitionSymbol:"*"},a:{validator:"[A-Za-zÐ-ÑÐÑÃ-Ã¿Âµ]",cardinality:1,definitionSymbol:"*"},"*":{validator:"[0-9ï¼-ï¼A-Za-zÐ-ÑÐÑÃ-Ã¿Âµ]",cardinality:1}},aliases:{},masksCache:{},mask:function(a){var c=this;return"string"==typeof a&&(a=n.getElementById(a)||n.querySelectorAll(a)),a=a.nodeName?[a]:a,e.each(a,function(n,a){var u=e.extend(!0,{},c.opts);!function(n,r,a,s){if(!0===r.importDataAttributes){var l,c,u,d,f=function(e,r){null!==(r=r!==i?r:n.getAttribute(s+"-"+e))&&("string"==typeof r&&(0===e.indexOf("on")?r=t[r]:"false"===r?r=!1:"true"===r&&(r=!0)),a[e]=r)},p=n.getAttribute(s);if(p&&""!==p&&(p=p.replace(new RegExp("'","g"),'"'),c=JSON.parse("{"+p+"}")),c){u=i;for(d in c)if("alias"===d.toLowerCase()){u=c[d];break}}f("alias",u),a.alias&&o(a.alias,a,r);for(l in r){if(c){u=i;for(d in c)if(d.toLowerCase()===l.toLowerCase()){u=c[d];break}}f(l,u)}}e.extend(!0,r,a),("rtl"===n.dir||r.rightAlign)&&(n.style.textAlign="right"),("rtl"===n.dir||r.numericInput)&&(n.dir="ltr",n.removeAttribute("dir"),r.isRTL=!0)}(a,u,e.extend(!0,{},c.userOptions),c.dataAttribute);var d=s(u,c.noMasksCache);d!==i&&(a.inputmask!==i&&(a.inputmask.opts.autoUnmask=!0,a.inputmask.remove()),a.inputmask=new r(i,i,!0),a.inputmask.opts=u,a.inputmask.noMasksCache=c.noMasksCache,a.inputmask.userOptions=e.extend(!0,{},c.userOptions),a.inputmask.isRTL=u.isRTL||u.numericInput,a.inputmask.el=a,a.inputmask.maskset=d,e.data(a,"_inputmask_opts",u),l.call(a.inputmask,{action:"mask"}))}),a&&a[0]?a[0].inputmask||this:this},option:function(t,n){return"string"==typeof t?this.opts[t]:"object"===(void 0===t?"undefined":a(t))?(e.extend(this.userOptions,t),this.el&&!0!==n&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return l.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"format",value:e,metadata:t})},analyseMask:function(t,n,o){function a(e,t,n,i){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=i||!1,this.quantifier={min:1,max:1}}function s(t,a,s){s=s!==i?s:t.matches.length;var l=t.matches[s-1];if(n)0===a.indexOf("[")||x&&/\\d|\\s|\\w]/i.test(a)||"."===a?t.matches.splice(s++,0,{fn:new RegExp(a,o.casing?"i":""),cardinality:1,optionality:t.isOptional,newBlockMarker:l===i||l.def!==a,casing:null,def:a,placeholder:i,nativeDef:a}):(x&&(a=a[a.length-1]),e.each(a.split(""),function(e,n){l=t.matches[s-1],t.matches.splice(s++,0,{fn:null,cardinality:0,optionality:t.isOptional,newBlockMarker:l===i||l.def!==n&&null!==l.fn,casing:null,def:o.staticDefinitionSymbol||n,placeholder:o.staticDefinitionSymbol!==i?n:i,nativeDef:n})})),x=!1;else{var c=(o.definitions?o.definitions[a]:i)||r.prototype.definitions[a];if(c&&!x){for(var u=c.prevalidator,d=u?u.length:0,f=1;f<c.cardinality;f++){var p=d>=f?u[f-1]:[],h=p.validator,g=p.cardinality;t.matches.splice(s++,0,{fn:h?"string"==typeof h?new RegExp(h,o.casing?"i":""):new function(){this.test=h}:new RegExp("."),cardinality:g||1,optionality:t.isOptional,newBlockMarker:l===i||l.def!==(c.definitionSymbol||a),casing:c.casing,def:c.definitionSymbol||a,placeholder:c.placeholder,nativeDef:a}),l=t.matches[s-1]}t.matches.splice(s++,0,{fn:c.validator?"string"==typeof c.validator?new RegExp(c.validator,o.casing?"i":""):new function(){this.test=c.validator}:new RegExp("."),cardinality:c.cardinality,optionality:t.isOptional,newBlockMarker:l===i||l.def!==(c.definitionSymbol||a),casing:c.casing,def:c.definitionSymbol||a,placeholder:c.placeholder,nativeDef:a})}else t.matches.splice(s++,0,{fn:null,cardinality:0,optionality:t.isOptional,newBlockMarker:l===i||l.def!==a&&null!==l.fn,casing:null,def:o.staticDefinitionSymbol||a,placeholder:o.staticDefinitionSymbol!==i?a:i,nativeDef:a}),x=!1}}function l(t){t&&t.matches&&e.each(t.matches,function(e,r){var a=t.matches[e+1];(a===i||a.matches===i||!1===a.isQuantifier)&&r&&r.isGroup&&(r.isGroup=!1,n||(s(r,o.groupmarker.start,0),!0!==r.openGroup&&s(r,o.groupmarker.end))),l(r)})}function c(){if(k.length>0){if(s(h=k[k.length-1],f),h.isAlternator){g=k.pop();for(var e=0;e<g.matches.length;e++)g.matches[e].isGroup=!1;k.length>0?(h=k[k.length-1]).matches.push(g):w.matches.push(g)}}else s(w,f)}function u(e){e.matches=e.matches.reverse();for(var t in e.matches)if(e.matches.hasOwnProperty(t)){var n=parseInt(t);if(e.matches[t].isQuantifier&&e.matches[n+1]&&e.matches[n+1].isGroup){var r=e.matches[t];e.matches.splice(t,1),e.matches.splice(n+1,0,r)}e.matches[t].matches!==i?e.matches[t]=u(e.matches[t]):e.matches[t]=(a=e.matches[t],a===o.optionalmarker.start?a=o.optionalmarker.end:a===o.optionalmarker.end?a=o.optionalmarker.start:a===o.groupmarker.start?a=o.groupmarker.end:a===o.groupmarker.end&&(a=o.groupmarker.start),a)}var a;return e}var d,f,p,h,g,m,v,y=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,b=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,x=!1,w=new a,k=[],C=[];for(n&&(o.optionalmarker.start=i,o.optionalmarker.end=i);d=n?b.exec(t):y.exec(t);){if(f=d[0],n)switch(f.charAt(0)){case"?":f="{0,1}";break;case"+":case"*":f="{"+f+"}"}if(x)c();else switch(f.charAt(0)){case o.escapeChar:x=!0,n&&c();break;case o.optionalmarker.end:case o.groupmarker.end:if((p=k.pop()).openGroup=!1,p!==i)if(k.length>0){if((h=k[k.length-1]).matches.push(p),h.isAlternator){g=k.pop();for(var S=0;S<g.matches.length;S++)g.matches[S].isGroup=!1,g.matches[S].alternatorGroup=!1;k.length>0?(h=k[k.length-1]).matches.push(g):w.matches.push(g)}}else w.matches.push(p);else c();break;case o.optionalmarker.start:k.push(new a(!1,!0));break;case o.groupmarker.start:k.push(new a(!0));break;case o.quantifiermarker.start:var E=new a(!1,!1,!0),T=(f=f.replace(/[{}]/g,"")).split(","),D=isNaN(T[0])?T[0]:parseInt(T[0]),P=1===T.length?D:isNaN(T[1])?T[1]:parseInt(T[1]);if("*"!==P&&"+"!==P||(D="*"===P?0:1),E.quantifier={min:D,max:P},k.length>0){var M=k[k.length-1].matches;(d=M.pop()).isGroup||((v=new a(!0)).matches.push(d),d=v),M.push(d),M.push(E)}else(d=w.matches.pop()).isGroup||(n&&null===d.fn&&"."===d.def&&(d.fn=new RegExp(d.def,o.casing?"i":"")),(v=new a(!0)).matches.push(d),d=v),w.matches.push(d),w.matches.push(E);break;case o.alternatormarker:if(k.length>0){var A=(h=k[k.length-1]).matches[h.matches.length-1];m=h.openGroup&&(A.matches===i||!1===A.isGroup&&!1===A.isAlternator)?k.pop():h.matches.pop()}else m=w.matches.pop();if(m.isAlternator)k.push(m);else if(m.alternatorGroup?(g=k.pop(),m.alternatorGroup=!1):g=new a(!1,!1,!1,!0),g.matches.push(m),k.push(g),m.openGroup){m.openGroup=!1;var O=new a(!0);O.alternatorGroup=!0,k.push(O)}break;default:c()}}for(;k.length>0;)p=k.pop(),w.matches.push(p);return w.matches.length>0&&(l(w),C.push(w)),(o.numericInput||o.isRTL)&&u(C[0]),C}},r.extendDefaults=function(t){e.extend(!0,r.prototype.defaults,t)},r.extendDefinitions=function(t){e.extend(!0,r.prototype.definitions,t)},r.extendAliases=function(t){e.extend(!0,r.prototype.aliases,t)},r.format=function(e,t,n){return r(t).format(e,n)},r.unmask=function(e,t){return r(t).unmaskedvalue(e)},r.isValid=function(e,t){return r(t).isValid(e)},r.remove=function(t){e.each(t,function(e,t){t.inputmask&&t.inputmask.remove()})},r.escapeRegex=function(e){return e.replace(new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim"),"\\$1")},r.keyCode={ALT:18,BACKSPACE:8,BACKSPACE_SAFARI:127,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91,X:88},r})?i.apply(t,r):i)&&(e.exports=o)},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}n(4),n(9),n(12),n(13),n(14),n(15);var r=i(n(1)),o=i(n(0)),a=i(n(2));o.default===a.default&&n(16),window.Inputmask=r.default},function(e,t,n){var i=n(5);"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0};r.transform=void 0,n(7)(i,r),i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(6)(void 0)).push([e.i,"span.im-caret {\r\n    -webkit-animation: 1s blink step-end infinite;\r\n    animation: 1s blink step-end infinite;\r\n}\r\n\r\n@keyframes blink {\r\n    from, to {\r\n        border-right-color: black;\r\n    }\r\n    50% {\r\n        border-right-color: transparent;\r\n    }\r\n}\r\n\r\n@-webkit-keyframes blink {\r\n    from, to {\r\n        border-right-color: black;\r\n    }\r\n    50% {\r\n        border-right-color: transparent;\r\n    }\r\n}\r\n\r\nspan.im-static {\r\n    color: grey;\r\n}\r\n\r\ndiv.im-colormask {\r\n    display: inline-block;\r\n    border-style: inset;\r\n    border-width: 2px;\r\n    -webkit-appearance: textfield;\r\n    -moz-appearance: textfield;\r\n    appearance: textfield;\r\n}\r\n\r\ndiv.im-colormask > input {\r\n    position: absolute;\r\n    display: inline-block;\r\n    background-color: transparent;\r\n    color: transparent;\r\n    -webkit-appearance: caret;\r\n    -moz-appearance: caret;\r\n    appearance: caret;\r\n    border-style: none;\r\n    left: 0; /*calculated*/\r\n}\r\n\r\ndiv.im-colormask > input:focus {\r\n    outline: none;\r\n}\r\n\r\ndiv.im-colormask > input::-moz-selection{\r\n    background: none;\r\n}\r\n\r\ndiv.im-colormask > input::selection{\r\n    background: none;\r\n}\r\ndiv.im-colormask > input::-moz-selection{\r\n    background: none;\r\n}\r\n\r\ndiv.im-colormask > div {\r\n    color: black;\r\n    display: inline-block;\r\n    width: 100px; /*calculated*/\r\n}",""])},function(e,t){function n(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var r=(a=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=i.sources.map(function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"});return[n].concat(o).concat([r]).join("\n")}var a;return[n].join("\n")}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var i=n(t,e);return t[2]?"@media "+t[2]+"{"+i+"}":i}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},r=0;r<this.length;r++){var o=this[r][0];"number"==typeof o&&(i[o]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&i[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){function i(e,t){for(var n=0;n<e.length;n++){var i=e[n],r=d[i.id];if(r){for(r.refs++,a=0;a<r.parts.length;a++)r.parts[a](i.parts[a]);for(;a<i.parts.length;a++)r.parts.push(c(i.parts[a],t))}else{for(var o=[],a=0;a<i.parts.length;a++)o.push(c(i.parts[a],t));d[i.id]={id:i.id,refs:1,parts:o}}}}function r(e,t){for(var n=[],i={},r=0;r<e.length;r++){var o=e[r],a=t.base?o[0]+t.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};i[a]?i[a].parts.push(s):n.push(i[a]={id:a,parts:[s]})}return n}function o(e,t){var n=p(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=m[m.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),m.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=p(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=m.indexOf(e);t>=0&&m.splice(t,1)}function s(e){var t=document.createElement("style");return e.attrs.type="text/css",l(t,e.attrs),o(e,t),t}function l(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function c(e,t){var n,i,r,c;if(t.transform&&e.css){if(!(c=t.transform(e.css)))return function(){};e.css=c}if(t.singleton){var d=g++;n=h||(h=s(t)),i=u.bind(null,n,d,!1),r=u.bind(null,n,d,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",l(t,e.attrs),o(e,t),t}(t),i=function(e,t,n){var i=n.css,r=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||o)&&(i=v(i)),r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([i],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),r=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(t),i=function(e,t){var n=t.css,i=t.media;if(i&&e.setAttribute("media",i),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){a(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}function u(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=y(t,r);else{var o=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}var d={},f=function(e){var t;return function(){return void 0===t&&(t=function(){return window&&document&&document.all&&!window.atob}.apply(this,arguments)),t}}(),p=function(e){var t={};return function(e){if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),h=null,g=0,m=[],v=n(8);e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=f()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=r(e,t);return i(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var s=n[a];(l=d[s.id]).refs--,o.push(l)}for(e&&i(r(e,t),t),a=0;a<o.length;a++){var l=o[a];if(0===l.refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete d[l.id]}}}};var y=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(r))return e;var o;return o=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(o)+")"})}},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,r=[n(0),n(1)],void 0!==(o="function"==typeof(i=function(e,t){return t.extendAliases({"dd/mm/yyyy":{mask:"1/2/y",placeholder:"dd/mm/yyyy",regex:{val1pre:new RegExp("[0-3]"),val1:new RegExp("0[1-9]|[12][0-9]|3[01]"),val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9]|3[01])"+n+"[01])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9])"+n+"(0[1-9]|1[012]))|(30"+n+"(0[13-9]|1[012]))|(31"+n+"(0[13578]|1[02]))")}},leapday:"29/02/",separator:"/",yearrange:{minyear:1900,maxyear:2099},isInYearRange:function(e,t,n){if(isNaN(e))return!1;var i=parseInt(e.concat(t.toString().slice(e.length))),r=parseInt(e.concat(n.toString().slice(e.length)));return!isNaN(i)&&t<=i&&i<=n||!isNaN(r)&&t<=r&&r<=n},determinebaseyear:function(e,t,n){var i=(new Date).getFullYear();if(e>i)return e;if(t<i){for(var r=t.toString().slice(0,2),o=t.toString().slice(2,4);t<r+n;)r--;var a=r+o;return e>a?e:a}if(e<=i&&i<=t){for(var s=i.toString().slice(0,2);t<s+n;)s--;var l=s+n;return l<e?e:l}return i},onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val(s.getDate().toString()+(s.getMonth()+1).toString()+s.getFullYear().toString()),a.trigger("setvalue")}},getFrontValue:function(e,t,n){for(var i=0,r=0,o=0;o<e.length&&"2"!==e.charAt(o);o++){var a=n.definitions[e.charAt(o)];a?(i+=r,r=a.cardinality):r++}return t.join("").substr(i,r)},postValidation:function(e,t,n){var i,r,o=e.join("");return 0===n.mask.indexOf("y")?(r=o.substr(0,4),i=o.substring(4,10)):(r=o.substring(6,10),i=o.substr(0,6)),t&&(i!==n.leapday||(a=r,isNaN(a)||29===new Date(a,2,0).getDate()));var a},definitions:{1:{validator:function(e,t,n,i,r){var o=r.regex.val1.test(e);return i||o||e.charAt(1)!==r.separator&&-1==="-./".indexOf(e.charAt(1))||!(o=r.regex.val1.test("0"+e.charAt(0)))?o:(t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)})},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=e;isNaN(t.buffer[n+1])||(o+=t.buffer[n+1]);var a=1===o.length?r.regex.val1pre.test(o):r.regex.val1.test(o);if(a&&t.validPositions[n]&&(r.regex.val2(r.separator).test(e+t.validPositions[n].input)||(t.validPositions[n].input="0"===e?"1":"0")),!i&&!a){if(a=r.regex.val1.test(e+"0"))return t.buffer[n]=e,t.buffer[++n]="0",{pos:n,c:"0"};if(a=r.regex.val1.test("0"+e))return t.buffer[n]="0",n++,{pos:n}}return a},cardinality:1}]},2:{validator:function(e,t,n,i,r){var o=r.getFrontValue(t.mask,t.buffer,r);-1!==o.indexOf(r.placeholder[0])&&(o="01"+r.separator);var a=r.regex.val2(r.separator).test(o+e);return i||a||e.charAt(1)!==r.separator&&-1==="-./".indexOf(e.charAt(1))||!(a=r.regex.val2(r.separator).test(o+"0"+e.charAt(0)))?a:(t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)})},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){isNaN(t.buffer[n+1])||(e+=t.buffer[n+1]);var o=r.getFrontValue(t.mask,t.buffer,r);-1!==o.indexOf(r.placeholder[0])&&(o="01"+r.separator);var a=1===e.length?r.regex.val2pre(r.separator).test(o+e):r.regex.val2(r.separator).test(o+e);return a&&t.validPositions[n]&&(r.regex.val2(r.separator).test(e+t.validPositions[n].input)||(t.validPositions[n].input="0"===e?"1":"0")),i||a||!(a=r.regex.val2(r.separator).test(o+"0"+e))?a:(t.buffer[n]="0",{pos:++n})},cardinality:1}]},y:{validator:function(e,t,n,i,r){return r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear)},cardinality:4,prevalidator:[{validator:function(e,t,n,i,r){var o=r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear);if(!i&&!o){var a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e+"0").toString().slice(0,1);if(o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(0),{pos:n};if(a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e+"0").toString().slice(0,2),o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(0),t.buffer[n++]=a.charAt(1),{pos:n}}return o},cardinality:1},{validator:function(e,t,n,i,r){var o=r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear);if(!i&&!o){var a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e).toString().slice(0,2);if(o=r.isInYearRange(e[0]+a[1]+e[1],r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(1),{pos:n};if(a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e).toString().slice(0,2),o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n-1]=a.charAt(0),t.buffer[n++]=a.charAt(1),t.buffer[n++]=e.charAt(0),{refreshFromBuffer:{start:n-3,end:n},pos:n}}return o},cardinality:2},{validator:function(e,t,n,i,r){return r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear)},cardinality:3}]}},insertMode:!1,autoUnmask:!1},"mm/dd/yyyy":{placeholder:"mm/dd/yyyy",alias:"dd/mm/yyyy",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val((s.getMonth()+1).toString()+s.getDate().toString()+s.getFullYear().toString()),a.trigger("setvalue")}}},"yyyy/mm/dd":{mask:"y/1/2",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",leapday:"/02/29",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val(s.getFullYear().toString()+(s.getMonth()+1).toString()+s.getDate().toString()),a.trigger("setvalue")}}},"dd.mm.yyyy":{mask:"1.2.y",placeholder:"dd.mm.yyyy",leapday:"29.02.",separator:".",alias:"dd/mm/yyyy"},"dd-mm-yyyy":{mask:"1-2-y",placeholder:"dd-mm-yyyy",leapday:"29-02-",separator:"-",alias:"dd/mm/yyyy"},"mm.dd.yyyy":{mask:"1.2.y",placeholder:"mm.dd.yyyy",leapday:"02.29.",separator:".",alias:"mm/dd/yyyy"},"mm-dd-yyyy":{mask:"1-2-y",placeholder:"mm-dd-yyyy",leapday:"02-29-",separator:"-",alias:"mm/dd/yyyy"},"yyyy.mm.dd":{mask:"y.1.2",placeholder:"yyyy.mm.dd",leapday:".02.29",separator:".",alias:"yyyy/mm/dd"},"yyyy-mm-dd":{mask:"y-1-2",placeholder:"yyyy-mm-dd",leapday:"-02-29",separator:"-",alias:"yyyy/mm/dd"},datetime:{mask:"1/2/y h:s",placeholder:"dd/mm/yyyy hh:mm",alias:"dd/mm/yyyy",regex:{hrspre:new RegExp("[012]"),hrs24:new RegExp("2[0-4]|1[3-9]"),hrs:new RegExp("[01][0-9]|2[0-4]"),ampm:new RegExp("^[a|p|A|P][m|M]"),mspre:new RegExp("[0-5]"),ms:new RegExp("[0-5][0-9]")},timeseparator:":",hourFormat:"24",definitions:{h:{validator:function(e,t,n,i,r){if("24"===r.hourFormat&&24===parseInt(e,10))return t.buffer[n-1]="0",t.buffer[n]="0",{refreshFromBuffer:{start:n-1,end:n},c:"0"};var o=r.regex.hrs.test(e);if(!i&&!o&&(e.charAt(1)===r.timeseparator||-1!=="-.:".indexOf(e.charAt(1)))&&(o=r.regex.hrs.test("0"+e.charAt(0))))return t.buffer[n-1]="0",t.buffer[n]=e.charAt(0),n++,{refreshFromBuffer:{start:n-2,end:n},pos:n,c:r.timeseparator};if(o&&"24"!==r.hourFormat&&r.regex.hrs24.test(e)){var a=parseInt(e,10);return 24===a?(t.buffer[n+5]="a",t.buffer[n+6]="m"):(t.buffer[n+5]="p",t.buffer[n+6]="m"),(a-=12)<10?(t.buffer[n]=a.toString(),t.buffer[n-1]="0"):(t.buffer[n]=a.toString().charAt(1),t.buffer[n-1]=a.toString().charAt(0)),{refreshFromBuffer:{start:n-1,end:n+6},c:t.buffer[n]}}return o},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=r.regex.hrspre.test(e);return i||o||!(o=r.regex.hrs.test("0"+e))?o:(t.buffer[n]="0",{pos:++n})},cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=r.regex.mspre.test(e);return i||o||!(o=r.regex.ms.test("0"+e))?o:(t.buffer[n]="0",{pos:++n})},cardinality:1}]},t:{validator:function(e,t,n,i,r){return r.regex.ampm.test(e+"m")},casing:"lower",cardinality:1}},insertMode:!1,autoUnmask:!1},datetime12:{mask:"1/2/y h:s t\\m",placeholder:"dd/mm/yyyy hh:mm xm",alias:"datetime",hourFormat:"12"},"mm/dd/yyyy hh:mm xm":{mask:"1/2/y h:s t\\m",placeholder:"mm/dd/yyyy hh:mm xm",alias:"datetime12",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val((s.getMonth()+1).toString()+s.getDate().toString()+s.getFullYear().toString()),a.trigger("setvalue")}}},"hh:mm t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"h:s t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"hh:mm:ss":{mask:"h:s:s",placeholder:"hh:mm:ss",alias:"datetime",autoUnmask:!1},"hh:mm":{mask:"h:s",placeholder:"hh:mm",alias:"datetime",autoUnmask:!1},date:{alias:"dd/mm/yyyy"},"mm/yyyy":{mask:"1/y",placeholder:"mm/yyyy",leapday:"donotuse",separator:"/",alias:"mm/dd/yyyy"},shamsi:{regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"[0-3])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[1-9]|1[012])"+n+"30)|((0[1-6])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},yearrange:{minyear:1300,maxyear:1499},mask:"y/1/2",leapday:"/12/30",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",clearIncomplete:!0},"yyyy-mm-dd hh:mm:ss":{mask:"y-1-2 h:s:s",placeholder:"yyyy-mm-dd hh:mm:ss",alias:"datetime",separator:"-",leapday:"-02-29",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},onKeyDown:function(e,t,n,i){}}}),t})?i.apply(t,r):i)&&(e.exports=o)},function(e,t,n){"use strict";var i;"function"==typeof Symbol&&Symbol.iterator,void 0!==(i=function(){return window}.call(t,n,t,e))&&(e.exports=i)},function(e,t,n){"use strict";var i;"function"==typeof Symbol&&Symbol.iterator,void 0!==(i=function(){return document}.call(t,n,t,e))&&(e.exports=i)},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,r=[n(0),n(1)],void 0!==(o="function"==typeof(i=function(e,t){return t.extendDefinitions({A:{validator:"[A-Za-zÐ-ÑÐÑÃ-Ã¿Âµ]",cardinality:1,casing:"upper"},"&":{validator:"[0-9A-Za-zÐ-ÑÐÑÃ-Ã¿Âµ]",cardinality:1,casing:"upper"},"#":{validator:"[0-9A-Fa-f]",cardinality:1,casing:"upper"}}),t.extendAliases({url:{definitions:{i:{validator:".",cardinality:1}},mask:"(\\http://)|(\\http\\s://)|(ftp://)|(ftp\\s://)i{+}",insertMode:!1,autoUnmask:!1,inputmode:"url"},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,n,i,r){return n-1>-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,e=n-2>-1&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):e="00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)},cardinality:1}},onUnMask:function(e,t,n){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",cardinality:1,casing:"lower"},"-":{validator:"[0-9A-Za-z-]",cardinality:1,casing:"lower"}},onUnMask:function(e,t,n){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",cardinality:1,casing:"upper"}},clearIncomplete:!0,autoUnmask:!0}}),t})?i.apply(t,r):i)&&(e.exports=o)},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,r=[n(0),n(1)],void 0!==(o="function"==typeof(i=function(e,t,n){function i(e,n){for(var i="",r=0;r<e.length;r++)t.prototype.definitions[e.charAt(r)]||n.definitions[e.charAt(r)]||n.optionalmarker.start===e.charAt(r)||n.optionalmarker.end===e.charAt(r)||n.quantifiermarker.start===e.charAt(r)||n.quantifiermarker.end===e.charAt(r)||n.groupmarker.start===e.charAt(r)||n.groupmarker.end===e.charAt(r)||n.alternatormarker===e.charAt(r)?i+="\\"+e.charAt(r):i+=e.charAt(r);return i}return t.extendAliases({numeric:{mask:function(e){if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=n),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var t=Math.floor(e.integerDigits/e.groupSize),r=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===r?t-1:t),e.integerDigits<1&&(e.integerDigits="*")}e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&!1===e.integerOptional&&(e.positionCaretOnClick="lvp"),e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",!0===e.numericInput&&(e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var o="[+]";if(o+=i(e.prefix,e),!0===e.integerOptional?o+="~{1,"+e.integerDigits+"}":o+="~{"+e.integerDigits+"}",e.digits!==n){e.radixPointDefinitionSymbol=e.decimalProtect?":":e.radixPoint;var a=e.digits.toString().split(",");isFinite(a[0]&&a[1]&&isFinite(a[1]))?o+=e.radixPointDefinitionSymbol+";{"+e.digits+"}":(isNaN(e.digits)||parseInt(e.digits)>0)&&(e.digitsOptional?o+="["+e.radixPointDefinitionSymbol+";{1,"+e.digits+"}]":o+=e.radixPointDefinitionSymbol+";{"+e.digits+"}")}return o+=i(e.suffix,e),o+="[-]",e.greedy=!1,o},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",groupSize:3,groupSeparator:"",autoGroup:!1,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,inputmode:"numeric",preValidation:function(t,i,r,o,a){if("-"===r||r===a.negationSymbol.front)return!0===a.allowMinus&&(a.isNegative=a.isNegative===n||!a.isNegative,""===t.join("")||{caret:i,dopost:!0});if(!1===o&&r===a.radixPoint&&a.digits!==n&&(isNaN(a.digits)||parseInt(a.digits)>0)){var s=e.inArray(a.radixPoint,t);if(-1!==s)return!0===a.numericInput?i===s:{caret:s+1}}return!0},postValidation:function(i,r,o){var a=o.suffix.split(""),s=o.prefix.split("");if(r.pos===n&&r.caret!==n&&!0!==r.dopost)return r;var l=r.caret!==n?r.caret:r.pos,c=i.slice();o.numericInput&&(l=c.length-l-1,c=c.reverse());var u=c[l];if(u===o.groupSeparator&&(u=c[l+=1]),l===c.length-o.suffix.length-1&&u===o.radixPoint)return r;u!==n&&u!==o.radixPoint&&u!==o.negationSymbol.front&&u!==o.negationSymbol.back&&(c[l]="?",o.prefix.length>0&&l>=(!1===o.isNegative?1:0)&&l<o.prefix.length-1+(!1===o.isNegative?1:0)?s[l-(!1===o.isNegative?1:0)]="?":o.suffix.length>0&&l>=c.length-o.suffix.length-(!1===o.isNegative?1:0)&&(a[l-(c.length-o.suffix.length-(!1===o.isNegative?1:0))]="?")),s=s.join(""),a=a.join("");var d=c.join("").replace(s,"");if(d=(d=(d=(d=d.replace(a,"")).replace(new RegExp(t.escapeRegex(o.groupSeparator),"g"),"")).replace(new RegExp("[-"+t.escapeRegex(o.negationSymbol.front)+"]","g"),"")).replace(new RegExp(t.escapeRegex(o.negationSymbol.back)+"$"),""),isNaN(o.placeholder)&&(d=d.replace(new RegExp(t.escapeRegex(o.placeholder),"g"),"")),d.length>1&&1!==d.indexOf(o.radixPoint)&&("0"===u&&(d=d.replace(/^\?/g,"")),d=d.replace(/^0/g,"")),d.charAt(0)===o.radixPoint&&""!==o.radixPoint&&!0!==o.numericInput&&(d="0"+d),""!==d){if(d=d.split(""),(!o.digitsOptional||o.enforceDigitsOnBlur&&"blur"===r.event)&&isFinite(o.digits)){var f=e.inArray(o.radixPoint,d),p=e.inArray(o.radixPoint,c);-1===f&&(d.push(o.radixPoint),f=d.length-1);for(var h=1;h<=o.digits;h++)o.digitsOptional&&(!o.enforceDigitsOnBlur||"blur"!==r.event)||d[f+h]!==n&&d[f+h]!==o.placeholder.charAt(0)?-1!==p&&c[p+h]!==n&&(d[f+h]=d[f+h]||c[p+h]):d[f+h]=r.placeholder||o.placeholder.charAt(0)}if(!0!==o.autoGroup||""===o.groupSeparator||u===o.radixPoint&&r.pos===n&&!r.dopost)d=d.join("");else{var g=d[d.length-1]===o.radixPoint&&r.c===o.radixPoint;d=t(function(e,t){var n="";if(n+="("+t.groupSeparator+"*{"+t.groupSize+"}){*}",""!==t.radixPoint){var i=e.join("").split(t.radixPoint);i[1]&&(n+=t.radixPoint+"*{"+i[1].match(/^\d*\??\d*/)[0].length+"}")}return n}(d,o),{numericInput:!0,jitMasking:!0,definitions:{"*":{validator:"[0-9?]",cardinality:1}}}).format(d.join("")),g&&(d+=o.radixPoint),d.charAt(0)===o.groupSeparator&&d.substr(1)}}if(o.isNegative&&"blur"===r.event&&(o.isNegative="0"!==d),d=s+d,d+=a,o.isNegative&&(d=o.negationSymbol.front+d,d+=o.negationSymbol.back),d=d.split(""),u!==n)if(u!==o.radixPoint&&u!==o.negationSymbol.front&&u!==o.negationSymbol.back)(l=e.inArray("?",d))>-1?d[l]=u:l=r.caret||0;else if(u===o.radixPoint||u===o.negationSymbol.front||u===o.negationSymbol.back){var m=e.inArray(u,d);-1!==m&&(l=m)}o.numericInput&&(l=d.length-l-1,d=d.reverse());var v={caret:u===n||r.pos!==n?l+(o.numericInput?-1:1):l,buffer:d,refreshFromBuffer:r.dopost||i.join("")!==d.join("")};return v.refreshFromBuffer?v:r},onBeforeWrite:function(i,r,o,a){if(i)switch(i.type){case"keydown":return a.postValidation(r,{caret:o,dopost:!0},a);case"blur":case"checkval":var s;if((l=a).parseMinMaxOptions===n&&(null!==l.min&&(l.min=l.min.toString().replace(new RegExp(t.escapeRegex(l.groupSeparator),"g"),""),","===l.radixPoint&&(l.min=l.min.replace(l.radixPoint,".")),l.min=isFinite(l.min)?parseFloat(l.min):NaN,isNaN(l.min)&&(l.min=Number.MIN_VALUE)),null!==l.max&&(l.max=l.max.toString().replace(new RegExp(t.escapeRegex(l.groupSeparator),"g"),""),","===l.radixPoint&&(l.max=l.max.replace(l.radixPoint,".")),l.max=isFinite(l.max)?parseFloat(l.max):NaN,isNaN(l.max)&&(l.max=Number.MAX_VALUE)),l.parseMinMaxOptions="done"),null!==a.min||null!==a.max){if(s=a.onUnMask(r.join(""),n,e.extend({},a,{unmaskAsNumber:!0})),null!==a.min&&s<a.min)return a.isNegative=a.min<0,a.postValidation(a.min.toString().replace(".",a.radixPoint).split(""),{caret:o,dopost:!0,placeholder:"0"},a);if(null!==a.max&&s>a.max)return a.isNegative=a.max<0,a.postValidation(a.max.toString().replace(".",a.radixPoint).split(""),{caret:o,dopost:!0,placeholder:"0"},a)}return a.postValidation(r,{caret:o,placeholder:"0",event:"blur"},a);case"_checkval":return{caret:o}}var l},regex:{integerPart:function(e,n){return n?new RegExp("["+t.escapeRegex(e.negationSymbol.front)+"+]?"):new RegExp("["+t.escapeRegex(e.negationSymbol.front)+"+]?\\d+")},integerNPart:function(e){return new RegExp("[\\d"+t.escapeRegex(e.groupSeparator)+t.escapeRegex(e.placeholder.charAt(0))+"]+")}},definitions:{"~":{validator:function(e,i,r,o,a,s){var l=o?new RegExp("[0-9"+t.escapeRegex(a.groupSeparator)+"]").test(e):new RegExp("[0-9]").test(e);if(!0===l){if(!0!==a.numericInput&&i.validPositions[r]!==n&&"~"===i.validPositions[r].match.def&&!s){var c=i.buffer.join(""),u=(c=(c=c.replace(new RegExp("[-"+t.escapeRegex(a.negationSymbol.front)+"]","g"),"")).replace(new RegExp(t.escapeRegex(a.negationSymbol.back)+"$"),"")).split(a.radixPoint);u.length>1&&(u[1]=u[1].replace(/0/g,a.placeholder.charAt(0))),"0"===u[0]&&(u[0]=u[0].replace(/0/g,a.placeholder.charAt(0))),c=u[0]+a.radixPoint+u[1]||"";var d=i._buffer.join("");for(c===a.radixPoint&&(c=d);null===c.match(t.escapeRegex(d)+"$");)d=d.slice(1);l=(c=(c=c.replace(d,"")).split(""))[r]===n?{pos:r,remove:r}:{pos:r}}}else o||e!==a.radixPoint||i.validPositions[r-1]!==n||(i.buffer[r]="0",l={pos:r+1});return l},cardinality:1},"+":{validator:function(e,t,n,i,r){return r.allowMinus&&("-"===e||e===r.negationSymbol.front)},cardinality:1,placeholder:""},"-":{validator:function(e,t,n,i,r){return r.allowMinus&&e===r.negationSymbol.back},cardinality:1,placeholder:""},":":{validator:function(e,n,i,r,o){var a="["+t.escapeRegex(o.radixPoint)+"]",s=new RegExp(a).test(e);return s&&n.validPositions[i]&&n.validPositions[i].match.placeholder===o.radixPoint&&(s={caret:i+1}),s},cardinality:1,placeholder:function(e){return e.radixPoint}}},onUnMask:function(e,n,i){if(""===n&&!0===i.nullable)return n;var r=e.replace(i.prefix,"");return r=(r=r.replace(i.suffix,"")).replace(new RegExp(t.escapeRegex(i.groupSeparator),"g"),""),""!==i.placeholder.charAt(0)&&(r=r.replace(new RegExp(i.placeholder.charAt(0),"g"),"0")),i.unmaskAsNumber?(""!==i.radixPoint&&-1!==r.indexOf(i.radixPoint)&&(r=r.replace(t.escapeRegex.call(this,i.radixPoint),".")),r=(r=r.replace(new RegExp("^"+t.escapeRegex(i.negationSymbol.front)),"-")).replace(new RegExp(t.escapeRegex(i.negationSymbol.back)+"$"),""),Number(r)):r},isComplete:function(e,n){var i=e.join("");if(e.slice().join("")!==i)return!1;var r=i.replace(n.prefix,"");return r=(r=r.replace(n.suffix,"")).replace(new RegExp(t.escapeRegex(n.groupSeparator),"g"),""),","===n.radixPoint&&(r=r.replace(t.escapeRegex(n.radixPoint),".")),isFinite(r)},onBeforeMask:function(e,i){if(i.isNegative=n,e=e.toString().charAt(e.length-1)===i.radixPoint?e.toString().substr(0,e.length-1):e.toString(),""!==i.radixPoint&&isFinite(e)){var r=e.split("."),o=""!==i.groupSeparator?parseInt(i.groupSize):0;2===r.length&&(r[0].length>o||r[1].length>o||r[0].length<=o&&r[1].length<o)&&(e=e.replace(".",i.radixPoint))}var a=e.match(/,/g),s=e.match(/\./g);if(e=s&&a?s.length>a.length?(e=e.replace(/\./g,"")).replace(",",i.radixPoint):a.length>s.length?(e=e.replace(/,/g,"")).replace(".",i.radixPoint):e.indexOf(".")<e.indexOf(",")?e.replace(/\./g,""):e.replace(/,/g,""):e.replace(new RegExp(t.escapeRegex(i.groupSeparator),"g"),""),0===i.digits&&(-1!==e.indexOf(".")?e=e.substring(0,e.indexOf(".")):-1!==e.indexOf(",")&&(e=e.substring(0,e.indexOf(",")))),""!==i.radixPoint&&isFinite(i.digits)&&-1!==e.indexOf(i.radixPoint)){var l=e.split(i.radixPoint)[1].match(new RegExp("\\d*"))[0];if(parseInt(i.digits)<l.toString().length){var c=Math.pow(10,parseInt(i.digits));e=e.replace(t.escapeRegex(i.radixPoint),"."),e=(e=Math.round(parseFloat(e)*c)/c).toString().replace(".",i.radixPoint)}}return e},canClearPosition:function(e,t,n,i,r){var o=e.validPositions[t],a=o.input!==r.radixPoint||null!==e.validPositions[t].match.fn&&!1===r.decimalProtect||o.input===r.radixPoint&&e.validPositions[t+1]&&null===e.validPositions[t+1].match.fn||isFinite(o.input)||t===n||o.input===r.groupSeparator||o.input===r.negationSymbol.front||o.input===r.negationSymbol.back;return!a||"+"!==o.match.nativeDef&&"-"!==o.match.nativeDef||(r.isNegative=!1),a},onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey)switch(n.keyCode){case t.keyCode.UP:a.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(o.step)),a.trigger("setvalue");break;case t.keyCode.DOWN:a.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(o.step)),a.trigger("setvalue")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,digitsOptional:!0,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowMinus:!1}}),t})?i.apply(t,r):i)&&(e.exports=o)},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,r=[n(0),n(1)],void 0!==(o="function"==typeof(i=function(e,t){function n(e,t){var n=(e.mask||e).replace(/#/g,"9").replace(/\)/,"9").replace(/[+()#-]/g,""),i=(t.mask||t).replace(/#/g,"9").replace(/\)/,"9").replace(/[+()#-]/g,""),r=(e.mask||e).split("#")[0],o=(t.mask||t).split("#")[0];return 0===o.indexOf(r)?-1:0===r.indexOf(o)?1:n.localeCompare(i)}var i=t.prototype.analyseMask;return t.prototype.analyseMask=function(t,n,r){function o(e,n,i){n=n||"",i=i||s,""!==n&&(i[n]={});for(var r="",a=i[n]||i,l=e.length-1;l>=0;l--)a[r=(t=e[l].mask||e[l]).substr(0,1)]=a[r]||[],a[r].unshift(t.substr(1)),e.splice(l,1);for(var c in a)a[c].length>500&&o(a[c].slice(),c,a)}function a(t){var n="",i=[];for(var o in t)e.isArray(t[o])?1===t[o].length?i.push(o+t[o]):i.push(o+r.groupmarker.start+t[o].join(r.groupmarker.end+r.alternatormarker+r.groupmarker.start)+r.groupmarker.end):i.push(o+a(t[o]));return 1===i.length?n+=i[0]:n+=r.groupmarker.start+i.join(r.groupmarker.end+r.alternatormarker+r.groupmarker.start)+r.groupmarker.end,n}var s={};return r.phoneCodes&&(r.phoneCodes&&r.phoneCodes.length>1e3&&(o((t=t.substr(1,t.length-2)).split(r.groupmarker.end+r.alternatormarker+r.groupmarker.start)),t=a(s)),t=t.replace(/9/g,"\\9")),i.call(this,t,n,r)},t.extendAliases({abstractphone:{groupmarker:{start:"<",end:">"},countrycode:"",phoneCodes:[],mask:function(e){return e.definitions={"#":t.prototype.definitions[9]},e.phoneCodes.sort(n)},keepStatic:!0,onBeforeMask:function(e,t){var n=e.replace(/^0{1,2}/,"").replace(/[\s]/g,"");return(n.indexOf(t.countrycode)>1||-1===n.indexOf(t.countrycode))&&(n="+"+t.countrycode+n),n},onUnMask:function(e,t,n){return e.replace(/[()#-]/g,"")},inputmode:"tel"}}),t})?i.apply(t,r):i)&&(e.exports=o)},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,r=[n(0),n(1)],void 0!==(o="function"==typeof(i=function(e,t){return t.extendAliases({Regex:{mask:"r",greedy:!1,repeat:"*",regex:null,regexTokens:null,tokenizer:/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,quantifierFilter:/[0-9]+[^,]/,isComplete:function(e,t){return new RegExp(t.regex,t.casing?"i":"").test(e.join(""))},definitions:{r:{validator:function(t,n,i,r,o){function a(e,t){this.matches=[],this.isGroup=e||!1,this.isQuantifier=t||!1,this.quantifier={min:1,max:1},this.repeaterPart=void 0}function s(t,n){var i=!1;n&&(d+="(",p++);for(var r=0;r<t.matches.length;r++){var a=t.matches[r];if(!0===a.isGroup)i=s(a,!0);else if(!0===a.isQuantifier){var c=e.inArray(a,t.matches),u=t.matches[c-1],f=d;if(isNaN(a.quantifier.max)){for(;a.repeaterPart&&a.repeaterPart!==d&&a.repeaterPart.length>d.length&&!(i=s(u,!0)););(i=i||s(u,!0))&&(a.repeaterPart=d),d=f+a.quantifier.max}else{for(var h=0,g=a.quantifier.max-1;h<g&&!(i=s(u,!0));h++);d=f+"{"+a.quantifier.min+","+a.quantifier.max+"}"}}else if(void 0!==a.matches)for(var m=0;m<a.length&&!(i=s(a[m],n));m++);else{var v;if("["==a.charAt(0)){for(v=d,v+=a,x=0;x<p;x++)v+=")";i=(w=new RegExp("^("+v+")$",o.casing?"i":"")).test(l)}else for(var y=0,b=a.length;y<b;y++)if("\\"!==a.charAt(y)){v=d,v=(v+=a.substr(0,y+1)).replace(/\|$/,"");for(var x=0;x<p;x++)v+=")";var w=new RegExp("^("+v+")$",o.casing?"i":"");if(i=w.test(l))break}d+=a}if(i)break}return n&&(d+=")",p--),i}var l,c,u=n.buffer.slice(),d="",f=!1,p=0;null===o.regexTokens&&function(){var e,t,n=new a,i=[];for(o.regexTokens=[];e=o.tokenizer.exec(o.regex);)switch((t=e[0]).charAt(0)){case"(":i.push(new a(!0));break;case")":c=i.pop(),i.length>0?i[i.length-1].matches.push(c):n.matches.push(c);break;case"{":case"+":case"*":var r=new a(!1,!0),s=(t=t.replace(/[{}]/g,"")).split(","),l=isNaN(s[0])?s[0]:parseInt(s[0]),u=1===s.length?l:isNaN(s[1])?s[1]:parseInt(s[1]);if(r.quantifier={min:l,max:u},i.length>0){var d=i[i.length-1].matches;(e=d.pop()).isGroup||((c=new a(!0)).matches.push(e),e=c),d.push(e),d.push(r)}else(e=n.matches.pop()).isGroup||((c=new a(!0)).matches.push(e),e=c),n.matches.push(e),n.matches.push(r);break;default:i.length>0?i[i.length-1].matches.push(t):n.matches.push(t)}n.matches.length>0&&o.regexTokens.push(n)}(),u.splice(i,0,t),l=u.join("");for(var h=0;h<o.regexTokens.length;h++){var g=o.regexTokens[h];if(f=s(g,g.isGroup))break}return f},cardinality:1}}}}),t})?i.apply(t,r):i)&&(e.exports=o)},function(e,t,n){"use strict";var i,r,o,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};r=[n(2),n(1)],void 0!==(o="function"==typeof(i=function(e,t){return void 0===e.fn.inputmask&&(e.fn.inputmask=function(n,i){var r,o=this[0];if(void 0===i&&(i={}),"string"==typeof n)switch(n){case"unmaskedvalue":return o&&o.inputmask?o.inputmask.unmaskedvalue():e(o).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return o&&o.inputmask?o.inputmask.getemptymask():"";case"hasMaskedValue":return!(!o||!o.inputmask)&&o.inputmask.hasMaskedValue();case"isComplete":return!o||!o.inputmask||o.inputmask.isComplete();case"getmetadata":return o&&o.inputmask?o.inputmask.getmetadata():void 0;case"setvalue":e(o).val(i),o&&void 0===o.inputmask&&e(o).triggerHandler("setvalue");break;case"option":if("string"!=typeof i)return this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(i)});if(o&&void 0!==o.inputmask)return o.inputmask.option(i);break;default:return i.alias=n,r=new t(i),this.each(function(){r.mask(this)})}else{if("object"==(void 0===n?"undefined":a(n)))return r=new t(n),void 0===n.mask&&void 0===n.alias?this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(n);r.mask(this)}):this.each(function(){r.mask(this)});if(void 0===n)return this.each(function(){(r=new t(i)).mask(this)})}}),e.fn.inputmask})?i.apply(t,r):i)&&(e.exports=o)}]),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.flatpickr=t()}(this,function(){"use strict";var e=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};function t(e,t,n){return!1!==n?new Date(e.getTime()).setHours(0,0,0,0)-new Date(t.getTime()).setHours(0,0,0,0):e.getTime()-t.getTime()}var n=function(e,t,n){return n.months[t?"shorthand":"longhand"][e]},i={DAY:864e5},r={_disable:[],_enable:[],allowInput:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enable:[],enableSeconds:!1,enableTime:!1,errorHandler:console.warn,getWeek:function(e){var t=new Date(e.getFullYear(),0,1);return Math.ceil(((e.getTime()-t.getTime())/864e5+t.getDay()+1)/7)},hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1},o={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function(e){var t=e%100;if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"]},a=function(e){return("0"+e).slice(-2)},s=function(e){return!0===e?1:0};function l(e,t,n){void 0===n&&(n=!1);var i;return function(){var r=this,o=arguments;null!==i&&clearTimeout(i),i=window.setTimeout(function(){i=null,n||e.apply(r,o)},t),n&&!i&&e.apply(r,o)}}var c=function(e){return e instanceof Array?e:[e]};function u(e,t,n){if(!0===n)return e.classList.add(t);e.classList.remove(t)}function d(e,t,n){var i=window.document.createElement(e);return t=t||"",n=n||"",i.className=t,void 0!==n&&(i.textContent=n),i}function f(e,t){return t(e)?e:e.parentNode?f(e.parentNode,t):void 0}function p(e){var t=d("div","numInputWrapper"),n=d("input","numInput "+e),i=d("span","arrowUp"),r=d("span","arrowDown");return n.type="text",n.pattern="\\d*",t.appendChild(n),t.appendChild(i),t.appendChild(r),t}var h=function(){},g={D:h,F:function(e,t,n){e.setMonth(n.months.longhand.indexOf(t))},G:function(e,t){e.setHours(parseFloat(t))},H:function(e,t){e.setHours(parseFloat(t))},J:function(e,t){e.setDate(parseFloat(t))},K:function(e,t,n){e.setHours(e.getHours()%12+12*s(new RegExp(n.amPM[1],"i").test(t)))},M:function(e,t,n){e.setMonth(n.months.shorthand.indexOf(t))},S:function(e,t){e.setSeconds(parseFloat(t))},U:function(e,t){return new Date(1e3*parseFloat(t))},W:function(e,t){var n=parseInt(t);return new Date(e.getFullYear(),0,2+7*(n-1),0,0,0,0)},Y:function(e,t){e.setFullYear(parseFloat(t))},Z:function(e,t){return new Date(t)},d:function(e,t){e.setDate(parseFloat(t))},h:function(e,t){e.setHours(parseFloat(t))},i:function(e,t){e.setMinutes(parseFloat(t))},j:function(e,t){e.setDate(parseFloat(t))},l:h,m:function(e,t){e.setMonth(parseFloat(t)-1)},n:function(e,t){e.setMonth(parseFloat(t)-1)},s:function(e,t){e.setSeconds(parseFloat(t))},w:h,y:function(e,t){e.setFullYear(2e3+parseFloat(t))}},m={D:"(\\w+)",F:"(\\w+)",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"",M:"(\\w+)",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"(\\w+)",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},v={Z:function(e){return e.toISOString()},D:function(e,t,n){return t.weekdays.shorthand[v.w(e,t,n)]},F:function(e,t,i){return n(v.n(e,t,i)-1,!1,t)},G:function(e,t,n){return a(v.h(e,t,n))},H:function(e){return a(e.getHours())},J:function(e,t){return void 0!==t.ordinal?e.getDate()+t.ordinal(e.getDate()):e.getDate()},K:function(e,t){return t.amPM[s(e.getHours()>11)]},M:function(e,t){return n(e.getMonth(),!0,t)},S:function(e){return a(e.getSeconds())},U:function(e){return e.getTime()/1e3},W:function(e,t,n){return n.getWeek(e)},Y:function(e){return e.getFullYear()},d:function(e){return a(e.getDate())},h:function(e){return e.getHours()%12?e.getHours()%12:12},i:function(e){return a(e.getMinutes())},j:function(e){return e.getDate()},l:function(e,t){return t.weekdays.longhand[e.getDay()]},m:function(e){return a(e.getMonth()+1)},n:function(e){return e.getMonth()+1},s:function(e){return e.getSeconds()},w:function(e){return e.getDay()},y:function(e){return String(e.getFullYear()).substring(2)}};"function"!=typeof Object.assign&&(Object.assign=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(!e)throw TypeError("Cannot convert undefined or null to object");for(var i=0,r=t;i<r.length;i++){var o=r[i];(a=o)&&Object.keys(a).forEach(function(t){return e[t]=a[t]})}var a;return e});function y(r,o){var h={};h.parseDate=J,h.formatDate=function(e,t){return void 0!==h.config&&void 0!==h.config.formatDate?h.config.formatDate(e,t):t.split("").map(function(t,n,i){return v[t]&&"\\"!==i[n-1]?v[t](e,h.l10n,h.config):"\\"!==t?t:""}).join("")},h._animationLoop=[],h._handlers=[],h._bind=E,h._setHoursFromDate=k,h.changeMonth=_,h.changeYear=q,h.clear=function(e){void 0===e&&(e=!0);h.input.value="",h.altInput&&(h.altInput.value="");h.mobileInput&&(h.mobileInput.value="");h.selectedDates=[],h.latestSelectedDateObj=void 0,h.showTimeInput=!1,h.redraw(),e&&ee("onChange")},h.close=function(){h.isOpen=!1,h.isMobile||(h.calendarContainer.classList.remove("open"),h._input.classList.remove("active"));ee("onClose")},h._createElement=d,h.destroy=function(){void 0!==h.config&&ee("onDestroy");for(var e=h._handlers.length;e--;){var t=h._handlers[e];t.element.removeEventListener(t.event,t.handler)}h._handlers=[],h.mobileInput?(h.mobileInput.parentNode&&h.mobileInput.parentNode.removeChild(h.mobileInput),h.mobileInput=void 0):h.calendarContainer&&h.calendarContainer.parentNode&&h.calendarContainer.parentNode.removeChild(h.calendarContainer);h.altInput&&(h.input.type="text",h.altInput.parentNode&&h.altInput.parentNode.removeChild(h.altInput),delete h.altInput);h.input&&(h.input.type=h.input._type,h.input.classList.remove("flatpickr-input"),h.input.removeAttribute("readonly"),h.input.value="");["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach(function(e){try{delete h[e]}catch(e){}})},h.isEnabled=W,h.jumpToDate=O,h.open=function(e,t){void 0===t&&(t=h._input);if(h.isMobile)return e&&(e.preventDefault(),e.target&&e.target.blur()),setTimeout(function(){void 0!==h.mobileInput&&h.mobileInput.click()},0),void ee("onOpen");if(h._input.disabled||h.config.inline)return;var n=h.isOpen;h.isOpen=!0,X(t),h.calendarContainer.classList.add("open"),h._input.classList.add("active"),!n&&ee("onOpen")},h.redraw=V,h.set=function(e,t){null!==e&&"object"==typeof e?Object.assign(h.config,e):h.config[e]=t;h.redraw(),O()},h.setDate=function(e,t,n){void 0===t&&(t=!1);if(0!==e&&!e)return h.clear(t);Z(e,n),h.showTimeInput=h.selectedDates.length>0,h.latestSelectedDateObj=h.selectedDates[0],h.redraw(),O(),k(),re(t),t&&ee("onChange")},h.toggle=function(){if(h.isOpen)return h.close();h.open()};function y(e){return e.bind(h)}function b(e){if(h.config.noCalendar&&0===h.selectedDates.length){var t=h.config.minDate;h.setDate((new Date).setHours(t?t.getHours():h.config.defaultHour,t?t.getMinutes():h.config.defaultMinute,t&&h.config.enableSeconds?t.getSeconds():h.config.defaultSeconds),!1),w(),re()}!function(e){e.preventDefault();var t="keydown"===e.type,n=e.target;void 0!==h.amPM&&e.target===h.amPM&&(h.amPM.textContent=h.l10n.amPM[s(h.amPM.textContent===h.l10n.amPM[0])]);var i=Number(n.min),r=Number(n.max),o=Number(n.step),l=parseInt(n.value,10),c=e.delta||(t?38===e.which?1:-1:Math.max(-1,Math.min(1,e.wheelDelta||-e.deltaY))||0),u=l+o*c;if(void 0!==n.value&&2===n.value.length){var d=n===h.hourElement,f=n===h.minuteElement;u<i?(u=r+u+s(!d)+(s(d)&&s(!h.amPM)),f&&N(void 0,-1,h.hourElement)):u>r&&(u=n===h.hourElement?u-r-s(!h.amPM):i,f&&N(void 0,1,h.hourElement)),h.amPM&&d&&(1===o?u+l===23:Math.abs(u-l)>o)&&(h.amPM.textContent=h.l10n.amPM[s(h.amPM.textContent===h.l10n.amPM[0])]),n.value=a(u)}}(e),0!==h.selectedDates.length&&(!h.minDateHasTime||"input"!==e.type||e.target.value.length>=2?(w(),re()):setTimeout(function(){w(),re()},1e3))}function w(){if(void 0!==h.hourElement&&void 0!==h.minuteElement){var e=(parseInt(h.hourElement.value.slice(-2),10)||0)%24,n=(parseInt(h.minuteElement.value,10)||0)%60,i=void 0!==h.secondElement?(parseInt(h.secondElement.value,10)||0)%60:0;void 0!==h.amPM&&(r=e,o=h.amPM.textContent,e=r%12+12*s(o===h.l10n.amPM[1]));var r,o;h.config.minDate&&h.minDateHasTime&&h.latestSelectedDateObj&&0===t(h.latestSelectedDateObj,h.config.minDate)&&(e=Math.max(e,h.config.minDate.getHours()))===h.config.minDate.getHours()&&(n=Math.max(n,h.config.minDate.getMinutes())),h.config.maxDate&&h.maxDateHasTime&&h.latestSelectedDateObj&&0===t(h.latestSelectedDateObj,h.config.maxDate)&&(e=Math.min(e,h.config.maxDate.getHours()))===h.config.maxDate.getHours()&&(n=Math.min(n,h.config.maxDate.getMinutes())),C(e,n,i)}}function k(e){var t=e||h.latestSelectedDateObj;t&&C(t.getHours(),t.getMinutes(),t.getSeconds())}function C(e,t,n){void 0!==h.latestSelectedDateObj&&h.latestSelectedDateObj.setHours(e%24,t,n||0,0),h.hourElement&&h.minuteElement&&!h.isMobile&&(h.hourElement.value=a(h.config.time_24hr?e:(12+e)%12+12*s(e%12==0)),h.minuteElement.value=a(t),void 0!==h.amPM&&(h.amPM.textContent=h.l10n.amPM[s(e>=12)]),void 0!==h.secondElement&&(h.secondElement.value=a(n)))}function S(e){var t=parseInt(e.target.value)+(e.delta||0);4!==t.toString().length&&"Enter"!==e.key||(h.currentYearElement.blur(),/[^\d]/.test(t.toString())||q(t))}function E(e,t,n){return t instanceof Array?t.forEach(function(t){return E(e,t,n)}):e instanceof Array?e.forEach(function(e){return E(e,t,n)}):(e.addEventListener(t,n),void h._handlers.push({element:e,event:t,handler:n}))}function T(e){return function(t){1===t.which&&e(t)}}function D(){ee("onChange")}function P(){h._animationLoop.forEach(function(e){return e()}),h._animationLoop=[]}function M(e){if(h.daysContainer&&h.daysContainer.childNodes.length>1)switch(e.animationName){case"fpSlideLeft":h.daysContainer.lastChild&&h.daysContainer.lastChild.classList.remove("slideLeftNew"),h.daysContainer.removeChild(h.daysContainer.firstChild),h.days=h.daysContainer.firstChild,P();break;case"fpSlideRight":h.daysContainer.firstChild&&h.daysContainer.firstChild.classList.remove("slideRightNew"),h.daysContainer.removeChild(h.daysContainer.lastChild),h.days=h.daysContainer.firstChild,P()}}function A(e){switch(e.animationName){case"fpSlideLeftNew":case"fpSlideRightNew":h.navigationCurrentMonth.classList.remove("slideLeftNew"),h.navigationCurrentMonth.classList.remove("slideRightNew");for(var t=h.navigationCurrentMonth;t.nextSibling&&/curr/.test(t.nextSibling.className);)h.monthNav.removeChild(t.nextSibling);for(;t.previousSibling&&/curr/.test(t.previousSibling.className);)h.monthNav.removeChild(t.previousSibling);h.oldCurMonth=void 0}}function O(e){var t=void 0!==e?J(e):h.latestSelectedDateObj||(h.config.minDate&&h.config.minDate>h.now?h.config.minDate:h.config.maxDate&&h.config.maxDate<h.now?h.config.maxDate:h.now);try{void 0!==t&&(h.currentYear=t.getFullYear(),h.currentMonth=t.getMonth())}catch(e){e.message="Invalid date supplied: "+t,h.config.errorHandler(e)}h.redraw()}function L(e){~e.target.className.indexOf("arrow")&&N(e,e.target.classList.contains("arrowUp")?1:-1)}function N(e,t,n){var i=e&&e.target,r=n||i&&i.parentNode&&i.parentNode.firstChild,o=te("increment");o.delta=t,r&&r.dispatchEvent(o)}function I(e,n,i,r){var o=W(n,!0),a=d("span","flatpickr-day "+e,n.getDate().toString());a.dateObj=n,a.$i=r,a.setAttribute("aria-label",h.formatDate(n,h.config.ariaDateFormat)),0===t(n,h.now)&&(h.todayDateElem=a,a.classList.add("today")),o?(a.tabIndex=-1,ne(n)&&(a.classList.add("selected"),h.selectedDateElem=a,"range"===h.config.mode&&(u(a,"startRange",h.selectedDates[0]&&0===t(n,h.selectedDates[0])),u(a,"endRange",h.selectedDates[1]&&0===t(n,h.selectedDates[1]))))):(a.classList.add("disabled"),h.selectedDates[0]&&h.minRangeDate&&n>h.minRangeDate&&n<h.selectedDates[0]?h.minRangeDate=n:h.selectedDates[0]&&h.maxRangeDate&&n<h.maxRangeDate&&n>h.selectedDates[0]&&(h.maxRangeDate=n)),"range"===h.config.mode&&(s=n,!("range"!==h.config.mode||h.selectedDates.length<2)&&t(s,h.selectedDates[0])>=0&&t(s,h.selectedDates[1])<=0&&!ne(n)&&a.classList.add("inRange"),1===h.selectedDates.length&&void 0!==h.minRangeDate&&void 0!==h.maxRangeDate&&(n<h.minRangeDate||n>h.maxRangeDate)&&a.classList.add("notAllowed"));var s;return h.weekNumbers&&"prevMonthDay"!==e&&i%7==1&&h.weekNumbers.insertAdjacentHTML("beforeend","<span class='disabled flatpickr-day'>"+h.config.getWeek(n)+"</span>"),ee("onDayCreate",a),a}function j(e,t){var n=e+t||0,i=void 0!==e?h.days.childNodes[n]:h.selectedDateElem||h.todayDateElem||h.days.childNodes[0],r=function(){(i=i||h.days.childNodes[n]).focus(),"range"===h.config.mode&&z(i)};if(void 0===i&&0!==t)return t>0?(h.changeMonth(1,!0,void 0,!0),n%=42):t<0&&(h.changeMonth(-1,!0,void 0,!0),n+=42),F(r);r()}function F(e){!0===h.config.animate?h._animationLoop.push(e):e()}function R(e){if(void 0!==h.daysContainer){var t=(new Date(h.currentYear,h.currentMonth,1).getDay()-h.l10n.firstDayOfWeek+7)%7,n="range"===h.config.mode,i=h.utils.getDaysInMonth((h.currentMonth-1+12)%12),r=h.utils.getDaysInMonth(),o=window.document.createDocumentFragment(),a=i+1-t,s=0;for(h.weekNumbers&&h.weekNumbers.firstChild&&(h.weekNumbers.textContent=""),n&&(h.minRangeDate=new Date(h.currentYear,h.currentMonth-1,a),h.maxRangeDate=new Date(h.currentYear,h.currentMonth+1,(42-t)%r));a<=i;a++,s++)o.appendChild(I("prevMonthDay",new Date(h.currentYear,h.currentMonth-1,a),a,s));for(a=1;a<=r;a++,s++)o.appendChild(I("",new Date(h.currentYear,h.currentMonth,a),a,s));for(var l=r+1;l<=42-t;l++,s++)o.appendChild(I("nextMonthDay",new Date(h.currentYear,h.currentMonth+1,l%r),l,s));n&&1===h.selectedDates.length&&o.childNodes[0]?(h._hidePrevMonthArrow=h._hidePrevMonthArrow||!!h.minRangeDate&&h.minRangeDate>o.childNodes[0].dateObj,h._hideNextMonthArrow=h._hideNextMonthArrow||!!h.maxRangeDate&&h.maxRangeDate<new Date(h.currentYear,h.currentMonth+1,1)):ie();var c=d("div","dayContainer");if(c.appendChild(o),h.config.animate&&void 0!==e)for(;h.daysContainer.childNodes.length>1;)h.daysContainer.removeChild(h.daysContainer.firstChild);else!function(e){for(;e.firstChild;)e.removeChild(e.firstChild)}(h.daysContainer);e&&e>=0?h.daysContainer.appendChild(c):h.daysContainer.insertBefore(c,h.daysContainer.firstChild),h.days=h.daysContainer.childNodes[0]}}function $(){h.weekdayContainer||(h.weekdayContainer=d("div","flatpickr-weekdays"));var e=h.l10n.firstDayOfWeek,t=h.l10n.weekdays.shorthand.slice();return e>0&&e<t.length&&(t=t.splice(e,t.length).concat(t.splice(0,e))),h.weekdayContainer.innerHTML="\n    <span class=flatpickr-weekday>\n      "+t.join("</span><span class=flatpickr-weekday>")+"\n    </span>\n    ",h.weekdayContainer}function _(e,t,i,r){void 0===t&&(t=!0),void 0===i&&(i=h.config.animate),void 0===r&&(r=!1);var o=t?e:e-h.currentMonth;if(!(o<0&&h._hidePrevMonthArrow||o>0&&h._hideNextMonthArrow)){if(h.currentMonth+=o,(h.currentMonth<0||h.currentMonth>11)&&(h.currentYear+=h.currentMonth>11?1:-1,h.currentMonth=(h.currentMonth+12)%12,ee("onYearChange")),R(i?o:void 0),!i)return ee("onMonthChange"),ie();var a=h.navigationCurrentMonth;if(o<0)for(;a.nextSibling&&/curr/.test(a.nextSibling.className);)h.monthNav.removeChild(a.nextSibling);else if(o>0)for(;a.previousSibling&&/curr/.test(a.previousSibling.className);)h.monthNav.removeChild(a.previousSibling);h.oldCurMonth=h.navigationCurrentMonth,h.navigationCurrentMonth=h.monthNav.insertBefore(h.oldCurMonth.cloneNode(!0),o>0?h.oldCurMonth.nextSibling:h.oldCurMonth);var s=h.daysContainer;if(s.firstChild&&s.lastChild&&(o>0?(s.firstChild.classList.add("slideLeft"),s.lastChild.classList.add("slideLeftNew"),h.oldCurMonth.classList.add("slideLeft"),h.navigationCurrentMonth.classList.add("slideLeftNew")):o<0&&(s.firstChild.classList.add("slideRightNew"),s.lastChild.classList.add("slideRight"),h.oldCurMonth.classList.add("slideRight"),h.navigationCurrentMonth.classList.add("slideRightNew"))),h.currentMonthElement=h.navigationCurrentMonth.firstChild,h.currentYearElement=h.navigationCurrentMonth.lastChild.childNodes[0],ie(),h.oldCurMonth.firstChild&&(h.oldCurMonth.firstChild.textContent=n(h.currentMonth-o,h.config.shorthandCurrentMonth,h.l10n)),F(function(){return ee("onMonthChange")}),r&&document.activeElement&&document.activeElement.$i){var l=document.activeElement.$i;F(function(){j(l,0)})}}}function H(e){return!(!h.config.appendTo||!h.config.appendTo.contains(e))||h.calendarContainer.contains(e)}function B(e){if(h.isOpen&&!h.config.inline){var t=H(e.target),n=e.target===h.input||e.target===h.altInput||h.element.contains(e.target)||e.path&&e.path.indexOf&&(~e.path.indexOf(h.input)||~e.path.indexOf(h.altInput));("blur"===e.type?n&&e.relatedTarget&&!H(e.relatedTarget):!n&&!t)&&-1===h.config.ignoredFocusElements.indexOf(e.target)&&(h.close(),"range"===h.config.mode&&1===h.selectedDates.length&&(h.clear(!1),h.redraw()))}}function q(e){if(!(!e||h.currentYearElement.min&&e<parseInt(h.currentYearElement.min)||h.currentYearElement.max&&e>parseInt(h.currentYearElement.max))){var t=e,n=h.currentYear!==t;h.currentYear=t||h.currentYear,h.config.maxDate&&h.currentYear===h.config.maxDate.getFullYear()?h.currentMonth=Math.min(h.config.maxDate.getMonth(),h.currentMonth):h.config.minDate&&h.currentYear===h.config.minDate.getFullYear()&&(h.currentMonth=Math.max(h.config.minDate.getMonth(),h.currentMonth)),n&&(h.redraw(),ee("onYearChange"))}}function W(e,n){void 0===n&&(n=!0);var i=h.parseDate(e,void 0,n);if(h.config.minDate&&i&&t(i,h.config.minDate,void 0!==n?n:!h.minDateHasTime)<0||h.config.maxDate&&i&&t(i,h.config.maxDate,void 0!==n?n:!h.maxDateHasTime)>0)return!1;if(!h.config.enable.length&&!h.config.disable.length)return!0;if(void 0===i)return!1;for(var r=h.config.enable.length>0,o=r?h.config.enable:h.config.disable,a=0,s=void 0;a<o.length;a++){if("function"==typeof(s=o[a])&&s(i))return r;if(s instanceof Date&&void 0!==i&&s.getTime()===i.getTime())return r;if("string"==typeof s&&void 0!==i){var l=h.parseDate(s,void 0,!0);return l&&l.getTime()===i.getTime()?r:!r}if("object"==typeof s&&void 0!==i&&s.from&&s.to&&i.getTime()>=s.from.getTime()&&i.getTime()<=s.to.getTime())return r}return!r}function Y(e){var t=e.target===h._input,n=H(e.target),i=h.config.allowInput,r=h.isOpen&&(!i||!t),o=h.config.inline&&t&&!i;if("Enter"===e.key&&t){if(i)return h.setDate(h._input.value,!0,e.target===h.altInput?h.config.altFormat:h.config.dateFormat),e.target.blur();h.open()}else if(n||r||o){var a=!!h.timeContainer&&h.timeContainer.contains(e.target);switch(e.key){case"Enter":a?re():K(e);break;case"Escape":e.preventDefault(),h.close();break;case"Backspace":case"Delete":t&&!h.config.allowInput&&h.clear();break;case"ArrowLeft":case"ArrowRight":if(a)h.hourElement&&h.hourElement.focus();else if(e.preventDefault(),h.daysContainer){var s="ArrowRight"===e.key?1:-1;e.ctrlKey?_(s,!0,void 0,!0):j(e.target.$i,s)}break;case"ArrowUp":case"ArrowDown":e.preventDefault();var l="ArrowDown"===e.key?1:-1;h.daysContainer&&void 0!==e.target.$i?e.ctrlKey?(q(h.currentYear-l),j(e.target.$i,0)):a||j(e.target.$i,7*l):h.config.enableTime&&(!a&&h.hourElement&&h.hourElement.focus(),b(e),h._debouncedChange());break;case"Tab":e.target===h.hourElement?(e.preventDefault(),h.minuteElement.select()):e.target===h.minuteElement&&(h.secondElement||h.amPM)?(e.preventDefault(),void 0!==h.secondElement?h.secondElement.focus():void 0!==h.amPM&&h.amPM.focus()):e.target===h.secondElement&&h.amPM&&(e.preventDefault(),h.amPM.focus());break;case h.l10n.amPM[0].charAt(0):void 0!==h.amPM&&e.target===h.amPM&&(h.amPM.textContent=h.l10n.amPM[0],w(),re());break;case h.l10n.amPM[1].charAt(0):void 0!==h.amPM&&e.target===h.amPM&&(h.amPM.textContent=h.l10n.amPM[1],w(),re())}ee("onKeyDown",e)}}function z(e){if(1===h.selectedDates.length&&e.classList.contains("flatpickr-day")&&void 0!==h.minRangeDate&&void 0!==h.maxRangeDate){for(var t=e.dateObj,n=h.parseDate(h.selectedDates[0],void 0,!0),r=Math.min(t.getTime(),h.selectedDates[0].getTime()),o=Math.max(t.getTime(),h.selectedDates[0].getTime()),a=!1,s=r;s<o;s+=i.DAY)if(!W(new Date(s))){a=!0;break}for(var l=function(i,s){var l=s.getTime(),c=l<h.minRangeDate.getTime()||l>h.maxRangeDate.getTime(),u=h.days.childNodes[i];if(c)return u.classList.add("notAllowed"),["inRange","startRange","endRange"].forEach(function(e){u.classList.remove(e)}),"continue";if(a&&!c)return"continue";["startRange","inRange","endRange","notAllowed"].forEach(function(e){u.classList.remove(e)});var d=Math.max(h.minRangeDate.getTime(),r),f=Math.min(h.maxRangeDate.getTime(),o);e.classList.add(t<h.selectedDates[0]?"startRange":"endRange"),n<t&&l===n.getTime()?u.classList.add("startRange"):n>t&&l===n.getTime()&&u.classList.add("endRange"),l>=d&&l<=f&&u.classList.add("inRange")},c=0,u=h.days.childNodes[c].dateObj;c<42;c++,u=h.days.childNodes[c]&&h.days.childNodes[c].dateObj)l(c,u)}}function U(){!h.isOpen||h.config.static||h.config.inline||X()}function G(e){return function(t){var n=h.config["_"+e+"Date"]=h.parseDate(t),i=h.config["_"+("min"===e?"max":"min")+"Date"];void 0!==n&&(h["min"===e?"minDateHasTime":"maxDateHasTime"]=n.getHours()>0||n.getMinutes()>0||n.getSeconds()>0),h.selectedDates&&(h.selectedDates=h.selectedDates.filter(function(e){return W(e)}),h.selectedDates.length||"min"!==e||k(n),re()),h.daysContainer&&(V(),void 0!==n?h.currentYearElement[e]=n.getFullYear().toString():h.currentYearElement.removeAttribute(e),h.currentYearElement.disabled=!!i&&void 0!==n&&i.getFullYear()===n.getFullYear())}}function X(e){if(void 0===e&&(e=h._positionElement),void 0!==h.calendarContainer){var t=h.calendarContainer.offsetHeight,n=h.calendarContainer.offsetWidth,i=h.config.position,r=e.getBoundingClientRect(),o=window.innerHeight-r.bottom,a="above"===i||"below"!==i&&o<t&&r.top>t,s=window.pageYOffset+r.top+(a?-t-2:e.offsetHeight+2);if(u(h.calendarContainer,"arrowTop",!a),u(h.calendarContainer,"arrowBottom",a),!h.config.inline){var l=window.pageXOffset+r.left,c=window.document.body.offsetWidth-r.right,d=l+n>window.document.body.offsetWidth;u(h.calendarContainer,"rightMost",d),h.config.static||(h.calendarContainer.style.top=s+"px",d?(h.calendarContainer.style.left="auto",h.calendarContainer.style.right=c+"px"):(h.calendarContainer.style.left=l+"px",h.calendarContainer.style.right="auto"))}}}function V(){h.config.noCalendar||h.isMobile||($(),ie(),R())}function K(e){e.preventDefault(),e.stopPropagation();var n=f(e.target,function(e){return e.classList&&e.classList.contains("flatpickr-day")&&!e.classList.contains("disabled")&&!e.classList.contains("notAllowed")});if(void 0!==n){var i=n,r=h.latestSelectedDateObj=new Date(i.dateObj.getTime()),o=r.getMonth()!==h.currentMonth&&"range"!==h.config.mode;if(h.selectedDateElem=i,"single"===h.config.mode)h.selectedDates=[r];else if("multiple"===h.config.mode){var a=ne(r);a?h.selectedDates.splice(parseInt(a),1):h.selectedDates.push(r)}else"range"===h.config.mode&&(2===h.selectedDates.length&&h.clear(),h.selectedDates.push(r),0!==t(r,h.selectedDates[0],!0)&&h.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()}));if(w(),o){var s=h.currentYear!==r.getFullYear();h.currentYear=r.getFullYear(),h.currentMonth=r.getMonth(),s&&ee("onYearChange"),ee("onMonthChange")}if(R(),h.config.minDate&&h.minDateHasTime&&h.config.enableTime&&0===t(r,h.config.minDate)&&k(h.config.minDate),re(),h.config.enableTime&&setTimeout(function(){return h.showTimeInput=!0},50),"range"===h.config.mode&&(1===h.selectedDates.length?(z(i),h._hidePrevMonthArrow=h._hidePrevMonthArrow||void 0!==h.minRangeDate&&h.minRangeDate>h.days.childNodes[0].dateObj,h._hideNextMonthArrow=h._hideNextMonthArrow||void 0!==h.maxRangeDate&&h.maxRangeDate<new Date(h.currentYear,h.currentMonth+1,1)):ie()),ee("onChange"),o?F(function(){return h.selectedDateElem&&h.selectedDateElem.focus()}):j(i.$i,0),void 0!==h.hourElement&&setTimeout(function(){return void 0!==h.hourElement&&h.hourElement.select()},451),h.config.closeOnSelect){var l="single"===h.config.mode&&!h.config.enableTime,c="range"===h.config.mode&&2===h.selectedDates.length&&!h.config.enableTime;(l||c)&&h.close()}}}function Z(e,t){var n=[];if(e instanceof Array)n=e.map(function(e){return h.parseDate(e,t)});else if(e instanceof Date||"number"==typeof e)n=[h.parseDate(e,t)];else if("string"==typeof e)switch(h.config.mode){case"single":n=[h.parseDate(e,t)];break;case"multiple":n=e.split(h.config.conjunction).map(function(e){return h.parseDate(e,t)});break;case"range":n=e.split(h.l10n.rangeSeparator).map(function(e){return h.parseDate(e,t)})}else h.config.errorHandler(new Error("Invalid date supplied: "+JSON.stringify(e)));h.selectedDates=n.filter(function(e){return e instanceof Date&&W(e,!1)}),h.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()})}function Q(e){return e.map(function(e){return"string"==typeof e||"number"==typeof e||e instanceof Date?h.parseDate(e,void 0,!0):e&&"object"==typeof e&&e.from&&e.to?{from:h.parseDate(e.from,void 0),to:h.parseDate(e.to,void 0)}:e}).filter(function(e){return e})}function J(e,t,n){if(0===e||e){var i,r=e;if(e instanceof Date)i=new Date(e.getTime());else if("string"!=typeof e&&void 0!==e.toFixed)i=new Date(e);else if("string"==typeof e){var o=t||(h.config||x.defaultConfig).dateFormat,a=String(e).trim();if("today"===a)i=new Date,n=!0;else if(/Z$/.test(a)||/GMT$/.test(a))i=new Date(e);else if(h.config&&h.config.parseDate)i=h.config.parseDate(e,o);else{i=h.config&&h.config.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0);for(var s=void 0,l=[],c=0,u=0,d="";c<o.length;c++){var f=o[c],p="\\"===f,v="\\"===o[c-1]||p;if(m[f]&&!v){d+=m[f];var y=new RegExp(d).exec(e);y&&(s=!0)&&l["Y"!==f?"push":"unshift"]({fn:g[f],val:y[++u]})}else p||(d+=".");l.forEach(function(e){var t=e.fn,n=e.val;return i=t(i,n,h.l10n)||i})}i=s?i:void 0}}if(i instanceof Date)return!0===n&&i.setHours(0,0,0,0),i;h.config.errorHandler(new Error("Invalid date provided: "+r))}}function ee(e,t){var n=h.config[e];if(void 0!==n&&n.length>0)for(var i=0;n[i]&&i<n.length;i++)n[i](h.selectedDates,h.input.value,h,t);"onChange"===e&&(h.input.dispatchEvent(te("change")),h.input.dispatchEvent(te("input")))}function te(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}function ne(e){for(var n=0;n<h.selectedDates.length;n++)if(0===t(h.selectedDates[n],e))return""+n;return!1}function ie(){h.config.noCalendar||h.isMobile||!h.monthNav||(h.currentMonthElement.textContent=n(h.currentMonth,h.config.shorthandCurrentMonth,h.l10n)+" ",h.currentYearElement.value=h.currentYear.toString(),h._hidePrevMonthArrow=void 0!==h.config.minDate&&(h.currentYear===h.config.minDate.getFullYear()?h.currentMonth<=h.config.minDate.getMonth():h.currentYear<h.config.minDate.getFullYear()),h._hideNextMonthArrow=void 0!==h.config.maxDate&&(h.currentYear===h.config.maxDate.getFullYear()?h.currentMonth+1>h.config.maxDate.getMonth():h.currentYear>h.config.maxDate.getFullYear()))}function re(e){if(void 0===e&&(e=!0),!h.selectedDates.length)return h.clear(e);void 0!==h.mobileInput&&h.mobileFormatStr&&(h.mobileInput.value=void 0!==h.latestSelectedDateObj?h.formatDate(h.latestSelectedDateObj,h.mobileFormatStr):"");var t="range"!==h.config.mode?h.config.conjunction:h.l10n.rangeSeparator;h.input.value=h.selectedDates.map(function(e){return h.formatDate(e,h.config.dateFormat)}).join(t),void 0!==h.altInput&&(h.altInput.value=h.selectedDates.map(function(e){return h.formatDate(e,h.config.altFormat)}).join(t)),!1!==e&&ee("onValueUpdate")}function oe(e){e.preventDefault();var t=h.currentYearElement.parentNode&&h.currentYearElement.parentNode.contains(e.target);if(e.target===h.currentMonthElement||t){var n=(i=e,(i.wheelDelta||-i.deltaY)>=0?1:-1);t?(q(h.currentYear+n),e.target.value=h.currentYear.toString()):h.changeMonth(n,!0,!1)}var i}function ae(e){var t=h.prevMonthNav.contains(e.target),n=h.nextMonthNav.contains(e.target);t||n?_(t?-1:1):e.target===h.currentYearElement?(e.preventDefault(),h.currentYearElement.select()):"arrowUp"===e.target.className?h.changeYear(h.currentYear+1):"arrowDown"===e.target.className&&h.changeYear(h.currentYear-1)}return h.element=h.input=r,h.isOpen=!1,function(){var t=["wrap","weekNumbers","allowInput","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],n=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange"];h.config=e({},x.defaultConfig);var i=e({},o,JSON.parse(JSON.stringify(r.dataset||{}))),a={};Object.defineProperty(h.config,"enable",{get:function(){return h.config._enable||[]},set:function(e){h.config._enable=Q(e)}}),Object.defineProperty(h.config,"disable",{get:function(){return h.config._disable||[]},set:function(e){h.config._disable=Q(e)}}),!i.dateFormat&&i.enableTime&&(a.dateFormat=i.noCalendar?"H:i"+(i.enableSeconds?":S":""):x.defaultConfig.dateFormat+" H:i"+(i.enableSeconds?":S":"")),i.altInput&&i.enableTime&&!i.altFormat&&(a.altFormat=i.noCalendar?"h:i"+(i.enableSeconds?":S K":" K"):x.defaultConfig.altFormat+" h:i"+(i.enableSeconds?":S":"")+" K"),Object.defineProperty(h.config,"minDate",{get:function(){return h.config._minDate},set:G("min")}),Object.defineProperty(h.config,"maxDate",{get:function(){return h.config._maxDate},set:G("max")}),Object.assign(h.config,a,i);for(var s=0;s<t.length;s++)h.config[t[s]]=!0===h.config[t[s]]||"true"===h.config[t[s]];for(var s=n.length;s--;)void 0!==h.config[n[s]]&&(h.config[n[s]]=c(h.config[n[s]]||[]).map(y));for(var s=0;s<h.config.plugins.length;s++){var l=h.config.plugins[s](h)||{};for(var u in l)~n.indexOf(u)?h.config[u]=c(l[u]).map(y).concat(h.config[u]):void 0===i[u]&&(h.config[u]=l[u])}h.isMobile=!h.config.disableMobile&&!h.config.inline&&"single"===h.config.mode&&!h.config.disable.length&&!h.config.enable.length&&!h.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),ee("onParseConfig")}(),"object"!=typeof h.config.locale&&void 0===x.l10ns[h.config.locale]&&h.config.errorHandler(new Error("flatpickr: invalid locale "+h.config.locale)),h.l10n=e({},x.l10ns.default,"object"==typeof h.config.locale?h.config.locale:"default"!==h.config.locale?x.l10ns[h.config.locale]:void 0),m.K="("+h.l10n.amPM[0]+"|"+h.l10n.amPM[1]+"|"+h.l10n.amPM[0].toLowerCase()+"|"+h.l10n.amPM[1].toLowerCase()+")",h.input=h.config.wrap?r.querySelector("[data-input]"):r,h.input?(h.input._type=h.input.type,h.input.type="text",h.input.classList.add("flatpickr-input"),h._input=h.input,h.config.altInput&&(h.altInput=d(h.input.nodeName,h.input.className+" "+h.config.altInputClass),h._input=h.altInput,h.altInput.placeholder=h.input.placeholder,h.altInput.disabled=h.input.disabled,h.altInput.required=h.input.required,h.altInput.type="text",h.input.type="hidden",!h.config.static&&h.input.parentNode&&h.input.parentNode.insertBefore(h.altInput,h.input.nextSibling)),h.config.allowInput||h._input.setAttribute("readonly","readonly"),h._positionElement=h.config.positionElement||h._input):h.config.errorHandler(new Error("Invalid input element specified")),function(){h.selectedDates=[],h.now=new Date;var e=h.config.defaultDate||h.input.value;e&&Z(e,h.config.dateFormat);var t=h.selectedDates.length?h.selectedDates[0]:h.config.minDate&&h.config.minDate.getTime()>h.now.getTime()?h.config.minDate:h.config.maxDate&&h.config.maxDate.getTime()<h.now.getTime()?h.config.maxDate:h.now;h.currentYear=t.getFullYear(),h.currentMonth=t.getMonth(),h.selectedDates.length&&(h.latestSelectedDateObj=h.selectedDates[0]),h.minDateHasTime=!!h.config.minDate&&(h.config.minDate.getHours()>0||h.config.minDate.getMinutes()>0||h.config.minDate.getSeconds()>0),h.maxDateHasTime=!!h.config.maxDate&&(h.config.maxDate.getHours()>0||h.config.maxDate.getMinutes()>0||h.config.maxDate.getSeconds()>0),Object.defineProperty(h,"showTimeInput",{get:function(){return h._showTimeInput},set:function(e){h._showTimeInput=e,h.calendarContainer&&u(h.calendarContainer,"showTimeInput",e),X()}})}(),h.utils={getDaysInMonth:function(e,t){return void 0===e&&(e=h.currentMonth),void 0===t&&(t=h.currentYear),1===e&&(t%4==0&&t%100!=0||t%400==0)?29:h.l10n.daysInMonth[e]}},h.isMobile||function(){var e=window.document.createDocumentFragment();if(h.calendarContainer=d("div","flatpickr-calendar"),h.calendarContainer.tabIndex=-1,!h.config.noCalendar){if(e.appendChild(function(){var e=window.document.createDocumentFragment();h.monthNav=d("div","flatpickr-month"),h.prevMonthNav=d("span","flatpickr-prev-month"),h.prevMonthNav.innerHTML=h.config.prevArrow,h.currentMonthElement=d("span","cur-month"),h.currentMonthElement.title=h.l10n.scrollTitle;var t=p("cur-year");return h.currentYearElement=t.childNodes[0],h.currentYearElement.title=h.l10n.scrollTitle,h.config.minDate&&(h.currentYearElement.min=h.config.minDate.getFullYear().toString()),h.config.maxDate&&(h.currentYearElement.max=h.config.maxDate.getFullYear().toString(),h.currentYearElement.disabled=!!h.config.minDate&&h.config.minDate.getFullYear()===h.config.maxDate.getFullYear()),h.nextMonthNav=d("span","flatpickr-next-month"),h.nextMonthNav.innerHTML=h.config.nextArrow,h.navigationCurrentMonth=d("div","flatpickr-current-month"),h.navigationCurrentMonth.appendChild(h.currentMonthElement),h.navigationCurrentMonth.appendChild(t),e.appendChild(h.prevMonthNav),e.appendChild(h.navigationCurrentMonth),e.appendChild(h.nextMonthNav),h.monthNav.appendChild(e),Object.defineProperty(h,"_hidePrevMonthArrow",{get:function(){return h.__hidePrevMonthArrow},set:function(e){h.__hidePrevMonthArrow!==e&&(h.prevMonthNav.style.display=e?"none":"block"),h.__hidePrevMonthArrow=e}}),Object.defineProperty(h,"_hideNextMonthArrow",{get:function(){return h.__hideNextMonthArrow},set:function(e){h.__hideNextMonthArrow!==e&&(h.nextMonthNav.style.display=e?"none":"block"),h.__hideNextMonthArrow=e}}),ie(),h.monthNav}()),h.innerContainer=d("div","flatpickr-innerContainer"),h.config.weekNumbers){var t=function(){h.calendarContainer.classList.add("hasWeeks");var e=d("div","flatpickr-weekwrapper");e.appendChild(d("span","flatpickr-weekday",h.l10n.weekAbbreviation));var t=d("div","flatpickr-weeks");return e.appendChild(t),{weekWrapper:e,weekNumbers:t}}(),n=t.weekWrapper,i=t.weekNumbers;h.innerContainer.appendChild(n),h.weekNumbers=i,h.weekWrapper=n}h.rContainer=d("div","flatpickr-rContainer"),h.rContainer.appendChild($()),h.daysContainer||(h.daysContainer=d("div","flatpickr-days"),h.daysContainer.tabIndex=-1),R(),h.rContainer.appendChild(h.daysContainer),h.innerContainer.appendChild(h.rContainer),e.appendChild(h.innerContainer)}h.config.enableTime&&e.appendChild(function(){h.calendarContainer.classList.add("hasTime"),h.config.noCalendar&&h.calendarContainer.classList.add("noCalendar"),h.timeContainer=d("div","flatpickr-time"),h.timeContainer.tabIndex=-1;var e=d("span","flatpickr-time-separator",":"),t=p("flatpickr-hour");h.hourElement=t.childNodes[0];var n=p("flatpickr-minute");if(h.minuteElement=n.childNodes[0],h.hourElement.tabIndex=h.minuteElement.tabIndex=-1,h.hourElement.value=a(h.latestSelectedDateObj?h.latestSelectedDateObj.getHours():h.config.time_24hr?h.config.defaultHour:function(e){switch(e%24){case 0:case 12:return 12;default:return e%12}}(h.config.defaultHour)),h.minuteElement.value=a(h.latestSelectedDateObj?h.latestSelectedDateObj.getMinutes():h.config.defaultMinute),h.hourElement.step=h.config.hourIncrement.toString(),h.minuteElement.step=h.config.minuteIncrement.toString(),h.hourElement.min=h.config.time_24hr?"0":"1",h.hourElement.max=h.config.time_24hr?"23":"12",h.minuteElement.min="0",h.minuteElement.max="59",h.hourElement.title=h.minuteElement.title=h.l10n.scrollTitle,h.timeContainer.appendChild(t),h.timeContainer.appendChild(e),h.timeContainer.appendChild(n),h.config.time_24hr&&h.timeContainer.classList.add("time24hr"),h.config.enableSeconds){h.timeContainer.classList.add("hasSeconds");var i=p("flatpickr-second");h.secondElement=i.childNodes[0],h.secondElement.value=a(h.latestSelectedDateObj?h.latestSelectedDateObj.getSeconds():h.config.defaultSeconds),h.secondElement.step=h.minuteElement.step,h.secondElement.min=h.minuteElement.min,h.secondElement.max=h.minuteElement.max,h.timeContainer.appendChild(d("span","flatpickr-time-separator",":")),h.timeContainer.appendChild(i)}return h.config.time_24hr||(h.amPM=d("span","flatpickr-am-pm",h.l10n.amPM[s((h.latestSelectedDateObj?h.hourElement.value:h.config.defaultHour)>11)]),h.amPM.title=h.l10n.toggleTitle,h.amPM.tabIndex=-1,h.timeContainer.appendChild(h.amPM)),h.timeContainer}()),u(h.calendarContainer,"rangeMode","range"===h.config.mode),u(h.calendarContainer,"animate",h.config.animate),h.calendarContainer.appendChild(e);var r=void 0!==h.config.appendTo&&h.config.appendTo.nodeType;if((h.config.inline||h.config.static)&&(h.calendarContainer.classList.add(h.config.inline?"inline":"static"),h.config.inline&&(!r&&h.element.parentNode?h.element.parentNode.insertBefore(h.calendarContainer,h._input.nextSibling):void 0!==h.config.appendTo&&h.config.appendTo.appendChild(h.calendarContainer)),h.config.static)){var o=d("div","flatpickr-wrapper");h.element.parentNode&&h.element.parentNode.insertBefore(o,h.element),o.appendChild(h.element),h.altInput&&o.appendChild(h.altInput),o.appendChild(h.calendarContainer)}h.config.static||h.config.inline||(void 0!==h.config.appendTo?h.config.appendTo:window.document.body).appendChild(h.calendarContainer)}(),function(){if(h.config.wrap&&["open","close","toggle","clear"].forEach(function(e){Array.prototype.forEach.call(h.element.querySelectorAll("[data-"+e+"]"),function(t){return E(t,"click",h[e])})}),h.isMobile)!function(){var e=h.config.enableTime?h.config.noCalendar?"time":"datetime-local":"date";h.mobileInput=d("input",h.input.className+" flatpickr-mobile"),h.mobileInput.step=h.input.getAttribute("step")||"any",h.mobileInput.tabIndex=1,h.mobileInput.type=e,h.mobileInput.disabled=h.input.disabled,h.mobileInput.placeholder=h.input.placeholder,h.mobileFormatStr="datetime-local"===e?"Y-m-d\\TH:i:S":"date"===e?"Y-m-d":"H:i:S",h.selectedDates.length&&(h.mobileInput.defaultValue=h.mobileInput.value=h.formatDate(h.selectedDates[0],h.mobileFormatStr)),h.config.minDate&&(h.mobileInput.min=h.formatDate(h.config.minDate,"Y-m-d")),h.config.maxDate&&(h.mobileInput.max=h.formatDate(h.config.maxDate,"Y-m-d")),h.input.type="hidden",void 0!==h.altInput&&(h.altInput.type="hidden");try{h.input.parentNode&&h.input.parentNode.insertBefore(h.mobileInput,h.input.nextSibling)}catch(e){}E(h.mobileInput,"change",function(e){h.setDate(e.target.value,!1,h.mobileFormatStr),ee("onChange"),ee("onClose")})}();else{var e=l(U,50);h._debouncedChange=l(D,300),"range"===h.config.mode&&h.daysContainer&&!/iPhone|iPad|iPod/i.test(navigator.userAgent)&&E(h.daysContainer,"mouseover",function(e){return z(e.target)}),E(window.document.body,"keydown",Y),h.config.static||E(h._input,"keydown",Y),h.config.inline||h.config.static||E(window,"resize",e),void 0!==window.ontouchstart&&E(window.document.body,"touchstart",B),E(window.document.body,"mousedown",T(B)),E(h._input,"blur",B),!0===h.config.clickOpens&&(E(h._input,"focus",h.open),E(h._input,"mousedown",T(h.open))),void 0!==h.daysContainer&&(h.monthNav.addEventListener("wheel",function(e){return e.preventDefault()}),E(h.monthNav,"wheel",l(oe,10)),E(h.monthNav,"mousedown",T(ae)),E(h.monthNav,["keyup","increment"],S),E(h.daysContainer,"mousedown",T(K)),h.config.animate&&(E(h.daysContainer,["webkitAnimationEnd","animationend"],M),E(h.monthNav,["webkitAnimationEnd","animationend"],A))),void 0!==h.timeContainer&&void 0!==h.minuteElement&&void 0!==h.hourElement&&(E(h.timeContainer,["wheel","input","increment"],b),E(h.timeContainer,"mousedown",T(L)),E(h.timeContainer,["wheel","increment"],h._debouncedChange),E(h.timeContainer,"input",D),E([h.hourElement,h.minuteElement],["focus","click"],function(e){return e.target.select()}),void 0!==h.secondElement&&E(h.secondElement,"focus",function(){return h.secondElement&&h.secondElement.select()}),void 0!==h.amPM&&E(h.amPM,"mousedown",T(function(e){b(e),D()})))}}(),(h.selectedDates.length||h.config.noCalendar)&&(h.config.enableTime&&k(h.config.noCalendar?h.latestSelectedDateObj||h.config.minDate:void 0),re(!1)),h.showTimeInput=h.selectedDates.length>0||h.config.noCalendar,void 0!==h.weekWrapper&&void 0!==h.daysContainer&&(h.calendarContainer.style.width=h.daysContainer.offsetWidth+h.weekWrapper.offsetWidth+"px"),h.isMobile||X(),ee("onReady"),h}function b(e,t){for(var n=Array.prototype.slice.call(e),i=[],r=0;r<n.length;r++){var o=n[r];try{if(null!==o.getAttribute("data-fp-omit"))continue;void 0!==o._flatpickr&&(o._flatpickr.destroy(),o._flatpickr=void 0),o._flatpickr=y(o,t||{}),i.push(o._flatpickr)}catch(e){console.error(e)}}return 1===i.length?i[0]:i}"undefined"!=typeof HTMLElement&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(e){return b(this,e)},HTMLElement.prototype.flatpickr=function(e){return b([this],e)});var x;x=function(e,t){return e instanceof NodeList?b(e,t):b("string"==typeof e?window.document.querySelectorAll(e):[e],t)},"object"==typeof window&&(window.flatpickr=x),x.defaultConfig=r,x.l10ns={en:e({},o),default:e({},o)},x.localize=function(t){x.l10ns.default=e({},x.l10ns.default,t)},x.setDefaults=function(t){x.defaultConfig=e({},x.defaultConfig,t)},"undefined"!=typeof jQuery&&(jQuery.fn.flatpickr=function(e){return b(this,e)}),Date.prototype.fp_incr=function(e){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof e?parseInt(e,10):e))};return x}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.ru={})}(this,function(e){"use strict";var t="undefined"!=typeof window&&void 0!==window.flatpickr?window.flatpickr:{l10ns:{}},n={firstDayOfWeek:1,weekdays:{shorthand:["ÐÑ","ÐÐ½","ÐÑ","Ð¡Ñ","Ð§Ñ","ÐÑ","Ð¡Ð±"],longhand:["ÐÐ¾ÑÐºÑÐµÑÐµÐ½ÑÐµ","ÐÐ¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº","ÐÑÐ¾ÑÐ½Ð¸Ðº","Ð¡ÑÐµÐ´Ð°","Ð§ÐµÑÐ²ÐµÑÐ³","ÐÑÑÐ½Ð¸ÑÐ°","Ð¡ÑÐ±Ð±Ð¾ÑÐ°"]},months:{shorthand:["Ð¯Ð½Ð²","Ð¤ÐµÐ²","ÐÐ°ÑÑ","ÐÐ¿Ñ","ÐÐ°Ð¹","ÐÑÐ½Ñ","ÐÑÐ»Ñ","ÐÐ²Ð³","Ð¡ÐµÐ½","ÐÐºÑ","ÐÐ¾Ñ","ÐÐµÐº"],longhand:["Ð¯Ð½Ð²Ð°ÑÑ","Ð¤ÐµÐ²ÑÐ°Ð»Ñ","ÐÐ°ÑÑ","ÐÐ¿ÑÐµÐ»Ñ","ÐÐ°Ð¹","ÐÑÐ½Ñ","ÐÑÐ»Ñ","ÐÐ²Ð³ÑÑÑ","Ð¡ÐµÐ½ÑÑÐ±ÑÑ","ÐÐºÑÑÐ±ÑÑ","ÐÐ¾ÑÐ±ÑÑ","ÐÐµÐºÐ°Ð±ÑÑ"]},rangeSeparator:" â ",scrollTitle:"ÐÑÐ¾ÐºÑÑÑÐ¸ÑÐµ Ð´Ð»Ñ ÑÐ²ÐµÐ»Ð¸ÑÐµÐ½Ð¸Ñ",toggleTitle:"ÐÐ°Ð¶Ð¼Ð¸ÑÐµ Ð´Ð»Ñ Ð¿ÐµÑÐµÐºÐ»ÑÑÐµÐ½Ð¸Ñ"};t.l10ns.ru=n;var i=t.l10ns;e.Russian=n,e.default=i,Object.defineProperty(e,"__esModule",{value:!0})}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.tippy=t()}(this,function(){"use strict";var e="undefined"!=typeof window,t={};e&&(t.supported="requestAnimationFrame"in window,t.supportsTouch="ontouchstart"in window,t.usingTouch=!1,t.dynamicInputDetection=!0,t.iOS=/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,t.onUserInputChange=function(){},t._eventListenersBound=!1);var n={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow",REFERENCE:"[data-tippy]"},i={placement:"top",trigger:"mouseenter focus",animation:"shift-away",html:!1,animateFill:!0,arrow:!1,delay:0,duration:[350,300],interactive:!1,interactiveBorder:2,theme:"dark",size:"regular",distance:10,offset:0,hideOnClick:!0,multiple:!1,followCursor:!1,inertia:!1,updateDuration:350,sticky:!1,appendTo:function(){return document.body},zIndex:9999,touchHold:!1,performance:!1,dynamicTitle:!1,flip:!0,flipBehavior:"flip",arrowType:"sharp",arrowTransform:"",maxWidth:"",popperOptions:{},createPopperInstanceOnInit:!1,onShow:function(){},onShown:function(){},onHide:function(){},onHidden:function(){}},r=t.supported&&Object.keys(i);function o(e){return"[object Object]"===Object.prototype.toString.call(e)}function a(e){for(var t=[!1,"webkit"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length;i++){var r=t[i],o=r?""+r+n:e;if(void 0!==document.body.style[o])return o}return null}var s=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e};function u(e){return{tooltip:e.querySelector(n.TOOLTIP),backdrop:e.querySelector(n.BACKDROP),content:e.querySelector(n.CONTENT)}}function d(e){var t=e.getAttribute("title");t&&e.setAttribute("data-original-title",t),e.removeAttribute("title")}for(var f="undefined"!=typeof window&&"undefined"!=typeof document,p=["Edge","Trident","Firefox"],h=0,g=0;g<p.length;g+=1)if(f&&navigator.userAgent.indexOf(p[g])>=0){h=1;break}var m=f&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},h))}};function v(e){return e&&"[object Function]"==={}.toString.call(e)}function y(e,t){if(1!==e.nodeType)return[];var n=getComputedStyle(e,null);return t?n[t]:n}function b(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function x(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=y(e),n=t.overflow,i=t.overflowX,r=t.overflowY;return/(auto|scroll)/.test(n+r+i)?e:x(b(e))}function w(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(t.nodeName)&&"static"===y(t,"position")?w(t):t:e?e.ownerDocument.documentElement:document.documentElement}function k(e){return null!==e.parentNode?k(e.parentNode):e}function C(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,r=n?t:e,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var a=o.commonAncestorContainer;if(e!==a&&t!==a||i.contains(r))return function(e){var t=e.nodeName;return"BODY"!==t&&("HTML"===t||w(e.firstElementChild)===e)}(a)?a:w(a);var s=k(e);return s.host?C(s.host,t):C(e,k(t).host)}function S(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var i=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||i)[t]}return e[t]}function E(e,t){var n="x"===t?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+i+"Width"],10)}var T=void 0,D=function(){return void 0===T&&(T=-1!==navigator.appVersion.indexOf("MSIE 10")),T};function P(e,t,n,i){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],D()?n["offset"+e]+i["margin"+("Height"===e?"Top":"Left")]+i["margin"+("Height"===e?"Bottom":"Right")]:0)}function M(){var e=document.body,t=document.documentElement,n=D()&&getComputedStyle(t);return{height:P("Height",e,t,n),width:P("Width",e,t,n)}}var A=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},O=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),L=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},N=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e};function I(e){return N({},e,{right:e.left+e.width,bottom:e.top+e.height})}function j(e){var t={};if(D())try{t=e.getBoundingClientRect();var n=S(e,"top"),i=S(e,"left");t.top+=n,t.left+=i,t.bottom+=n,t.right+=i}catch(e){}else t=e.getBoundingClientRect();var r={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?M():{},a=o.width||e.clientWidth||r.right-r.left,s=o.height||e.clientHeight||r.bottom-r.top,l=e.offsetWidth-a,c=e.offsetHeight-s;if(l||c){var u=y(e);l-=E(u,"x"),c-=E(u,"y"),r.width-=l,r.height-=c}return I(r)}function F(e,t){var n=D(),i="HTML"===t.nodeName,r=j(e),o=j(t),a=x(e),s=y(t),l=parseFloat(s.borderTopWidth,10),c=parseFloat(s.borderLeftWidth,10),u=I({top:r.top-o.top-l,left:r.left-o.left-c,width:r.width,height:r.height});if(u.marginTop=0,u.marginLeft=0,!n&&i){var d=parseFloat(s.marginTop,10),f=parseFloat(s.marginLeft,10);u.top-=l-d,u.bottom-=l-d,u.left-=c-f,u.right-=c-f,u.marginTop=d,u.marginLeft=f}return(n?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=S(t,"top"),r=S(t,"left"),o=n?-1:1;return e.top+=i*o,e.bottom+=i*o,e.left+=r*o,e.right+=r*o,e}(u,t)),u}function R(e){var t=e.nodeName;return"BODY"!==t&&"HTML"!==t&&("fixed"===y(e,"position")||R(b(e)))}function $(e,t,n,i){var r={top:0,left:0},o=C(e,t);if("viewport"===i)r=function(e){var t=e.ownerDocument.documentElement,n=F(e,t),i=Math.max(t.clientWidth,window.innerWidth||0),r=Math.max(t.clientHeight,window.innerHeight||0),o=S(t),a=S(t,"left");return I({top:o-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:i,height:r})}(o);else{var a=void 0;"scrollParent"===i?"BODY"===(a=x(b(t))).nodeName&&(a=e.ownerDocument.documentElement):a="window"===i?e.ownerDocument.documentElement:i;var s=F(a,o);if("HTML"!==a.nodeName||R(o))r=s;else{var l=M(),c=l.height,u=l.width;r.top+=s.top-s.marginTop,r.bottom=c+s.top,r.left+=s.left-s.marginLeft,r.right=u+s.left}}return r.left+=n,r.top+=n,r.right-=n,r.bottom-=n,r}function _(e,t,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=$(n,i,o,r),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(s).map(function(e){return N({key:e},s[e],{area:(t=s[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),c=l.filter(function(e){var t=e.width,i=e.height;return t>=n.clientWidth&&i>=n.clientHeight}),u=c.length>0?c[0].key:l[0].key,d=e.split("-")[1];return u+(d?"-"+d:"")}function H(e,t,n){return F(n,C(t,n))}function B(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),i=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+i,height:e.offsetHeight+n}}function q(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function W(e,t,n){n=n.split("-")[0];var i=B(e),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",l=o?"height":"width",c=o?"width":"height";return r[a]=t[a]+t[l]/2-i[l]/2,r[s]=n===s?t[s]-i[c]:t[q(s)],r}function Y(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function z(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var i=Y(e,function(e){return e[t]===n});return e.indexOf(i)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&v(n)&&(t.offsets.popper=I(t.offsets.popper),t.offsets.reference=I(t.offsets.reference),t=n(t,e))}),t}function U(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function G(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length-1;i++){var r=t[i],o=r?""+r+n:e;if(void 0!==document.body.style[o])return o}return null}function X(e){var t=e.ownerDocument;return t?t.defaultView:window}function V(e,t,n,i){var r="BODY"===e.nodeName,o=r?e.ownerDocument.defaultView:e;o.addEventListener(t,n,{passive:!0}),r||V(x(o.parentNode),t,n,i),i.push(o)}function K(){this.state.eventsEnabled||(this.state=function(e,t,n,i){n.updateBound=i,X(e).addEventListener("resize",n.updateBound,{passive:!0});var r=x(e);return V(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}(this.reference,this.options,this.state,this.scheduleUpdate))}function Z(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,X(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t));var e,t}function Q(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function J(e,t){Object.keys(t).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&Q(t[n])&&(i="px"),e.style[n]=t[n]+i})}function ee(e,t,n){var i=Y(e,function(e){return e.name===t}),r=!!i&&e.some(function(e){return e.name===n&&e.enabled&&e.order<i.order});if(!r){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}var te=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],ne=te.slice(3);function ie(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=ne.indexOf(e),i=ne.slice(n+1).concat(ne.slice(0,n));return t?i.reverse():i}var re={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function oe(e,t,n,i){var r=[0,0],o=-1!==["right","left"].indexOf(i),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=a.indexOf(Y(a,function(e){return-1!==e.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(c=c.map(function(e,i){var r=(1===i?!o:o)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,i){var r=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],a=r[2];if(!o)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=i}return I(s)[t]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(e,r,t,n)})})).forEach(function(e,t){e.forEach(function(n,i){Q(n)&&(r[t]+=n*("-"===e[i-1]?-1:1))})}),r}var ae={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],i=t.split("-")[1];if(i){var r=e.offsets,o=r.reference,a=r.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",c=s?"width":"height",u={start:L({},l,o[l]),end:L({},l,o[l]+o[c]-a[c])};e.offsets.popper=N({},a,u[i])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,i=e.placement,r=e.offsets,o=r.popper,a=r.reference,s=i.split("-")[0],l=void 0;return l=Q(+n)?[+n,0]:oe(n,o,a,s),"left"===s?(o.top+=l[0],o.left-=l[1]):"right"===s?(o.top+=l[0],o.left+=l[1]):"top"===s?(o.left+=l[0],o.top-=l[1]):"bottom"===s&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||w(e.instance.popper);e.instance.reference===n&&(n=w(n));var i=$(e.instance.popper,e.instance.reference,t.padding,n);t.boundaries=i;var r=t.priority,o=e.offsets.popper,a={primary:function(e){var n=o[e];return o[e]<i[e]&&!t.escapeWithReference&&(n=Math.max(o[e],i[e])),L({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=o[n];return o[e]>i[e]&&!t.escapeWithReference&&(r=Math.min(o[n],i[e]-("right"===e?o.width:o.height))),L({},n,r)}};return r.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";o=N({},o,a[t](e))}),e.offsets.popper=o,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,i=t.reference,r=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(r),s=a?"right":"bottom",l=a?"left":"top",c=a?"width":"height";return n[s]<o(i[l])&&(e.offsets.popper[l]=o(i[l])-n[c]),n[l]>o(i[s])&&(e.offsets.popper[l]=o(i[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!ee(e.instance.modifiers,"arrow","keepTogether"))return e;var i=t.element;if("string"==typeof i){if(!(i=e.instance.popper.querySelector(i)))return e}else if(!e.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var r=e.placement.split("-")[0],o=e.offsets,a=o.popper,s=o.reference,l=-1!==["left","right"].indexOf(r),c=l?"height":"width",u=l?"Top":"Left",d=u.toLowerCase(),f=l?"left":"top",p=l?"bottom":"right",h=B(i)[c];s[p]-h<a[d]&&(e.offsets.popper[d]-=a[d]-(s[p]-h)),s[d]+h>a[p]&&(e.offsets.popper[d]+=s[d]+h-a[p]),e.offsets.popper=I(e.offsets.popper);var g=s[d]+s[c]/2-h/2,m=y(e.instance.popper),v=parseFloat(m["margin"+u],10),b=parseFloat(m["border"+u+"Width"],10),x=g-e.offsets.popper[d]-v-b;return x=Math.max(Math.min(a[c]-h,x),0),e.arrowElement=i,e.offsets.arrow=(n={},L(n,d,Math.round(x)),L(n,f,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(U(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=$(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),i=e.placement.split("-")[0],r=q(i),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case re.FLIP:a=[i,r];break;case re.CLOCKWISE:a=ie(i);break;case re.COUNTERCLOCKWISE:a=ie(i,!0);break;default:a=t.behavior}return a.forEach(function(s,l){if(i!==s||a.length===l+1)return e;i=e.placement.split("-")[0],r=q(i);var c=e.offsets.popper,u=e.offsets.reference,d=Math.floor,f="left"===i&&d(c.right)>d(u.left)||"right"===i&&d(c.left)<d(u.right)||"top"===i&&d(c.bottom)>d(u.top)||"bottom"===i&&d(c.top)<d(u.bottom),p=d(c.left)<d(n.left),h=d(c.right)>d(n.right),g=d(c.top)<d(n.top),m=d(c.bottom)>d(n.bottom),v="left"===i&&p||"right"===i&&h||"top"===i&&g||"bottom"===i&&m,y=-1!==["top","bottom"].indexOf(i),b=!!t.flipVariations&&(y&&"start"===o&&p||y&&"end"===o&&h||!y&&"start"===o&&g||!y&&"end"===o&&m);(f||v||b)&&(e.flipped=!0,(f||v)&&(i=a[l+1]),b&&(o="end"===(x=o)?"start":"start"===x?"end":x),e.placement=i+(o?"-"+o:""),e.offsets.popper=N({},e.offsets.popper,W(e.instance.popper,e.offsets.reference,e.placement)),e=z(e.instance.modifiers,e,"flip"));var x}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],i=e.offsets,r=i.popper,o=i.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return r[a?"left":"top"]=o[n]-(s?r[a?"width":"height"]:0),e.placement=q(t),e.offsets.popper=I(r),e}},hide:{order:800,enabled:!0,fn:function(e){if(!ee(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=Y(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,i=t.y,r=e.offsets.popper,o=Y(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,s=j(w(e.instance.popper)),l={position:r.position},c={left:Math.floor(r.left),top:Math.floor(r.top),bottom:Math.floor(r.bottom),right:Math.floor(r.right)},u="bottom"===n?"top":"bottom",d="right"===i?"left":"right",f=G("transform"),p=void 0,h=void 0;if(h="bottom"===u?-s.height+c.bottom:c.top,p="right"===d?-s.width+c.right:c.left,a&&f)l[f]="translate3d("+p+"px, "+h+"px, 0)",l[u]=0,l[d]=0,l.willChange="transform";else{var g="bottom"===u?-1:1,m="right"===d?-1:1;l[u]=h*g,l[d]=p*m,l.willChange=u+", "+d}var v={"x-placement":e.placement};return e.attributes=N({},v,e.attributes),e.styles=N({},l,e.styles),e.arrowStyles=N({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){J(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)});var t,n;return e.arrowElement&&Object.keys(e.arrowStyles).length&&J(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,i,r){var o=H(0,t,e),a=_(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),J(t,{position:"absolute"}),n},gpuAcceleration:void 0}}},se=function(){function e(t,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};A(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=m(this.update.bind(this)),this.options=N({},e.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(N({},e.Defaults.modifiers,r.modifiers)).forEach(function(t){i.options.modifiers[t]=N({},e.Defaults.modifiers[t]||{},r.modifiers?r.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return N({name:e},i.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&v(e.onLoad)&&e.onLoad(i.reference,i.popper,i.options,e,i.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return O(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=H(this.state,this.popper,this.reference),e.placement=_(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=W(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=z(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,U(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[G("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return K.call(this)}},{key:"disableEventListeners",value:function(){return Z.call(this)}}]),e}();se.Utils=("undefined"!=typeof window?window:global).PopperUtils,se.placements=te,se.Defaults=ae;function le(e){return e.getAttribute("x-placement").replace(/-.+/,"")}function ce(e,t,n,i){if(!t.length)return"";return{scale:1===t.length?""+t[0]:n?t[0]+", "+t[1]:t[1]+", "+t[0],translate:1===t.length?i?-t[0]+"px":t[0]+"px":n?i?t[0]+"px, "+-t[1]+"px":t[0]+"px, "+t[1]+"px":i?-t[1]+"px, "+t[0]+"px":t[1]+"px, "+t[0]+"px"}[e]}function ue(e,t){if(!e)return"";return t?e:{X:"Y",Y:"X"}[e]}function de(e,t,n){var i=le(e),r="top"===i||"bottom"===i,o="right"===i||"bottom"===i,s=function(e){var t=n.match(e);return t?t[1]:""},l=function(e){var t=n.match(e);return t?t[1].split(",").map(parseFloat):[]},c=/translateX?Y?\(([^)]+)\)/,u=/scaleX?Y?\(([^)]+)\)/,d={translate:{axis:s(/translate([XY])/),numbers:l(c)},scale:{axis:s(/scale([XY])/),numbers:l(u)}},f=n.replace(c,"translate"+ue(d.translate.axis,r)+"("+ce("translate",d.translate.numbers,r,o)+")").replace(u,"scale"+ue(d.scale.axis,r)+"("+ce("scale",d.scale.numbers,r,o)+")");t.style[a("transform")]=f}function fe(e){return-(e-i.distance)+"px"}function pe(e){requestAnimationFrame(function(){setTimeout(e)})}var he={};if(e){var ge=Element.prototype;he=ge.matches||ge.matchesSelector||ge.webkitMatchesSelector||ge.mozMatchesSelector||ge.msMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}}var me=he;function ve(e,t){return(Element.prototype.closest||function(e){for(var t=this;t;){if(me.call(t,e))return t;t=t.parentElement}}).call(e,t)}function ye(e,t){return Array.isArray(e)?e[t]:e}function be(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function xe(e,t){e.forEach(function(e){e&&(e.style[a("transitionDuration")]=t+"ms")})}var we=function(){var e={},i=function(t){return function(n){return n===e&&t}};function r(n){var i=this;if(f.call(this),!this.state.visible)if(this._(e).isPreparingToShow=!0,this.options.wait)this.options.wait.call(this.popper,this.show.bind(this),n);else{this.options.followCursor&&!t.usingTouch&&(this._(e).followCursorListener||function(){var t=this;this._(e).followCursorListener=function(n){if(!t._(e).lastTriggerEvent||"focus"!==t._(e).lastTriggerEvent.type){t._(e).lastMouseMoveEvent=n;var i=document.documentElement.offsetWidth||document.body.offsetWidth,r=Math.round(t.popper.offsetWidth/2),o=Math.round(t.popper.offsetHeight/2),s=t.options.offset,l=n.pageX,c=n.pageY,u=t.options.placement.replace(/-.+/,"");t.popper.getAttribute("x-placement")&&(u=le(t.popper));var d=void 0,f=void 0;switch(u){case"top":d=l-r+s,f=c-2*o;break;case"bottom":d=l-r+s,f=c+10;break;case"left":d=l-2*r,f=c-o+s;break;case"right":d=l+5,f=c-o+s}var p=l+5+r+s>i,h=l-5-r+s<0;"top"!==u&&"bottom"!==u||(p&&(d=i-5-2*r),h&&(d=5)),t.popper.style[a("transform")]="translate3d("+d+"px, "+f+"px, 0)"}}}.call(this),document.addEventListener("mousemove",this._(e).followCursorListener));var r=Array.isArray(this.options.delay)?this.options.delay[0]:this.options.delay;r?this._(e).showTimeout=setTimeout(function(){i.show()},r):this.show()}}function o(){var t=this;if(f.call(this),this.state.visible){this._(e).isPreparingToShow=!1;var n=Array.isArray(this.options.delay)?this.options.delay[1]:this.options.delay;n?this._(e).hideTimeout=setTimeout(function(){t.state.visible&&t.hide()},n):this.hide()}}function d(){var e=this,t=this.popper,i=this.reference,r=this.options,o=u(t).tooltip,s=r.popperOptions,l="round"===r.arrowType?n.ROUND_ARROW:n.ARROW,d=o.querySelector(l),f=c({placement:r.placement},s||{},{modifiers:c({},s?s.modifiers:{},{arrow:c({element:l},s&&s.modifiers?s.modifiers.arrow:{}),flip:c({enabled:r.flip,padding:r.distance+5,behavior:r.flipBehavior},s&&s.modifiers?s.modifiers.flip:{}),offset:c({offset:r.offset},s&&s.modifiers?s.modifiers.offset:{})}),onCreate:function(){o.style[le(t)]=fe(r.distance),d&&r.arrowTransform&&de(t,d,r.arrowTransform)},onUpdate:function(){var e=o.style;e.top="",e.bottom="",e.left="",e.right="",e[le(t)]=fe(r.distance),d&&r.arrowTransform&&de(t,d,r.arrowTransform)}});return p.call(this,{target:t,callback:function(){var n=t.style;n[a("transitionDuration")]=null;var i=e.popperInstance.options.onUpdate;e.popperInstance.options.onUpdate=function(){e.popper.offsetHeight,n[a("transitionDuration")]=r.updateDuration+"ms",e.popperInstance.options.onUpdate=i},e.popperInstance.update()},options:{childList:!0,subtree:!0,characterData:!0}}),new se(i,t,f)}function f(){var t=this._(e),n=t.showTimeout,i=t.hideTimeout;clearTimeout(n),clearTimeout(i)}function p(t){var n=t.target,i=t.callback,r=t.options;if(window.MutationObserver){var o=new MutationObserver(i);o.observe(n,r),this._(e).mutationObservers.push(o)}}function h(t,n){if(!t)return n();var i=u(this.popper).tooltip,r=function(e,t){t&&i[e+"EventListener"]("ontransitionend"in window?"transitionend":"webkitTransitionEnd",t)},o=function e(t){t.target===i&&(r("remove",e),n())};r("remove",this._(e).transitionendListener),r("add",o),this._(e).transitionendListener=o}return{Tippy:function(){function n(e){s(this,n);for(var t in e)this[t]=e[t];this.state={destroyed:!1,visible:!1,enabled:!0},this._=i({mutationObservers:[]})}return l(n,[{key:"enable",value:function(){this.state.enabled=!0}},{key:"disable",value:function(){this.state.enabled=!1}},{key:"show",value:function(n){var i=this;if(!this.state.destroyed&&this.state.enabled){var r=this.popper,o=this.reference,s=this.options,l=u(r),c=l.tooltip,f=l.backdrop,p=l.content;o.refObj||document.documentElement.contains(o)?(s.onShow.call(r),n=ye(void 0!==n?n:s.duration,0),xe([r,c,f],0),r.style.visibility="visible",this.state.visible=!0,function(e){var n=this;this.popperInstance?(this.popper.style[a("transform")]=null,this.popperInstance.scheduleUpdate(),this.options.followCursor&&!t.usingTouch||this.popperInstance.enableEventListeners()):this.popperInstance=d.call(this);var i=this.popperInstance.options.onCreate,r=this.popperInstance.options.onUpdate;this.popperInstance.options.onCreate=this.popperInstance.options.onUpdate=function(){n.popper.offsetHeight,e(),n.popperInstance.options.onUpdate=r,n.popperInstance.options.onCreate=i},this.options.appendTo.contains(this.popper)||this.options.appendTo.appendChild(this.popper)}.call(this,function(){if(i.state.visible){if(s.followCursor&&!t.usingTouch||(i.popperInstance.scheduleUpdate(),xe([r],s.updateDuration)),s.followCursor&&!t.usingTouch){i.popperInstance.disableEventListeners();var l=Array.isArray(s.delay)?s.delay[0]:s.delay;i._(e).lastTriggerEvent&&i._(e).followCursorListener(l&&i._(e).lastMouseMoveEvent?i._(e).lastMouseMoveEvent:i._(e).lastTriggerEvent)}xe([c,f,f?p:null],n),f&&getComputedStyle(f)[a("transform")],s.interactive&&o.classList.add("tippy-active"),s.sticky&&function(){var e=this;pe(function t(){e.popperInstance&&e.popperInstance.scheduleUpdate(),e.popper.style[a("transitionDuration")]=e.options.updateDuration+"ms",e.state.visible?requestAnimationFrame(t):e.popper.style[a("transitionDuration")]=""})}.call(i),be([c,f],"visible"),h.call(i,n,function(){s.updateDuration||c.classList.add("tippy-notransition"),s.interactive&&r.focus(),s.onShown.call(r)})}})):this.destroy()}}},{key:"hide",value:function(t){var n=this;if(!this.state.destroyed&&this.state.enabled){var i=this.popper,r=this.reference,o=this.options,a=u(i),s=a.tooltip,l=a.backdrop,c=a.content;o.onHide.call(i),t=ye(void 0!==t?t:o.duration,1),o.updateDuration||s.classList.remove("tippy-notransition"),o.interactive&&r.classList.remove("tippy-active"),i.style.visibility="hidden",this.state.visible=!1,xe([s,l,l?c:null],t),be([s,l],"hidden"),o.interactive&&o.trigger.indexOf("click")>-1&&function(e){var t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)}(r)&&r.focus(),pe(function(){h.call(n,t,function(){!n.state.visible&&o.appendTo.contains(i)&&(n._(e).isPreparingToShow||(document.removeEventListener("mousemove",n._(e).followCursorListener),n._(e).lastMouseMoveEvent=null),n.popperInstance.disableEventListeners(),o.appendTo.removeChild(i),o.onHidden.call(i))})})}}},{key:"destroy",value:function(){var t=this;this.state.destroyed||(this.state.visible&&this.hide(0),this.listeners.forEach(function(e){t.reference.removeEventListener(e.event,e.handler)}),this.reference.setAttribute("title",this.reference.getAttribute("data-original-title")),delete this.reference._tippy,["data-original-title","data-tippy","aria-describedby"].forEach(function(e){t.reference.removeAttribute(e)}),this.popperInstance&&this.popperInstance.destroy(),this._(e).mutationObservers.forEach(function(e){e.disconnect()}),this.state.destroyed=!0)}}]),n}(),_getEventListeners:function(){var i=this;return{handleTrigger:function(n){if(i.state.enabled){var a=t.supportsTouch&&t.usingTouch&&("mouseenter"===n.type||"focus"===n.type);a&&i.options.touchHold||(i._(e).lastTriggerEvent=n,"click"===n.type&&"persistent"!==i.options.hideOnClick&&i.state.visible?o.call(i):r.call(i,n),a&&t.iOS&&i.reference.click&&i.reference.click())}},handleMouseleave:function(e){if(!("mouseleave"===e.type&&t.supportsTouch&&t.usingTouch&&i.options.touchHold)){if(i.options.interactive){var r=o.bind(i);return document.body.addEventListener("mouseleave",r),void document.addEventListener("mousemove",function e(t){var a=ve(t.target,n.REFERENCE),s=ve(t.target,n.POPPER)===i.popper,l=a===i.reference;s||l||function(e,t,n){if(!t.getAttribute("x-placement"))return!0;var i=e.clientX,r=e.clientY,o=n.interactiveBorder,a=n.distance,s=t.getBoundingClientRect(),l=le(t),c=o+a,u={top:s.top-r>o,bottom:r-s.bottom>o,left:s.left-i>o,right:i-s.right>o};switch(l){case"top":u.top=s.top-r>c;break;case"bottom":u.bottom=r-s.bottom>c;break;case"left":u.left=s.left-i>c;break;case"right":u.right=i-s.right>c}return u.top||u.bottom||u.left||u.right}(t,i.popper,i.options)&&(document.body.removeEventListener("mouseleave",r),document.removeEventListener("mousemove",e),o.call(i))})}o.call(i)}},handleBlur:function(e){e.relatedTarget&&!t.usingTouch&&(ve(e.relatedTarget,n.POPPER)||o.call(i))}}},_addMutationObserver:p,_createPopperInstance:d,_onTransitionEnd:h}}(),ke=we.Tippy,Ce=we._getEventListeners,Se=we._createPopperInstance,Ee=we._addMutationObserver,Te=1;function De(e,n){return e.reduce(function(e,i){var o,s,l=Te,f=(o=i,s=n.performance?n:function(e,t){var n=r.reduce(function(n,i){var r=e.getAttribute("data-tippy-"+i.toLowerCase())||t[i];return"false"===r&&(r=!1),"true"===r&&(r=!0),isFinite(r)&&!isNaN(parseFloat(r))&&(r=parseFloat(r)),"string"==typeof r&&"["===r.trim().charAt(0)&&(r=JSON.parse(r)),n[i]=r,n},{});return c({},t,n)}(i,n),s.arrow&&(s.animateFill=!1),s.appendTo&&"function"==typeof s.appendTo&&(s.appendTo=s.appendTo()),"function"==typeof s.html&&(s.html=s.html(o)),s),p=i.getAttribute("title");if(!p&&!f.html)return e;i.setAttribute("data-tippy",""),i.setAttribute("aria-describedby","tippy-"+l),d(i);var h=function(e,t,n){n.placement,n.distance;var i=n.arrow,r=n.arrowType,o=n.arrowTransform,s=n.animateFill,l=n.inertia,c=n.animation,u=n.size,d=n.theme,f=n.html,p=n.zIndex,h=n.interactive,g=n.maxWidth,m=document.createElement("div");m.setAttribute("class","tippy-popper"),m.setAttribute("role","tooltip"),m.setAttribute("id","tippy-"+e),m.style.zIndex=p,m.style.maxWidth=g;var v=document.createElement("div");if(v.setAttribute("class","tippy-tooltip"),v.setAttribute("data-size",u),v.setAttribute("data-animation",c),v.setAttribute("data-state","hidden"),d.split(" ").forEach(function(e){v.classList.add(e+"-theme")}),i){var y=document.createElement("div");y.style[a("transform")]=o,"round"===r?(y.classList.add("tippy-roundarrow"),y.innerHTML='\n      <svg width="100%" height="100%" viewBox="0 0 64 20" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">\n        <g transform="matrix(1.04009,0,0,1.45139,-1.26297,-65.9145)">\n          <path d="M1.214,59.185C1.214,59.185 12.868,59.992 21.5,51.55C29.887,43.347 33.898,43.308 42.5,51.55C51.352,60.031 62.747,59.185 62.747,59.185L1.214,59.185Z"/>\n        </g>\n      </svg>'):y.classList.add("tippy-arrow"),v.appendChild(y)}if(s){v.setAttribute("data-animatefill","");var b=document.createElement("div");b.setAttribute("data-state","hidden"),b.classList.add("tippy-backdrop"),v.appendChild(b)}l&&v.setAttribute("data-inertia",""),h&&v.setAttribute("data-interactive","");var x=document.createElement("div");if(x.setAttribute("class","tippy-content"),f){var w=void 0;f instanceof Element?(x.appendChild(f),w="#"+f.id||"tippy-html-template"):(x.innerHTML=document.querySelector(f).innerHTML,w=f),m.setAttribute("data-html",""),h&&m.setAttribute("tabindex","-1"),v.setAttribute("data-template-id",w)}else x.innerHTML=t;return v.appendChild(x),m.appendChild(v),m}(l,p,f),g=new ke({id:l,reference:i,popper:h,options:f,popperInstance:null});f.createPopperInstanceOnInit&&(g.popperInstance=Se.call(g),g.popperInstance.disableEventListeners());var m=Ce.call(g);return g.listeners=f.trigger.trim().split(" ").reduce(function(e,n){return e.concat(function(e,n,i,r){var o=[];return"manual"===e?o:(n.addEventListener(e,i.handleTrigger),o.push({event:e,handler:i.handleTrigger}),"mouseenter"===e&&(t.supportsTouch&&r&&(n.addEventListener("touchstart",i.handleTrigger),o.push({event:"touchstart",handler:i.handleTrigger}),n.addEventListener("touchend",i.handleMouseleave),o.push({event:"touchend",handler:i.handleMouseleave})),n.addEventListener("mouseleave",i.handleMouseleave),o.push({event:"mouseleave",handler:i.handleMouseleave})),"focus"===e&&(n.addEventListener("blur",i.handleBlur),o.push({event:"blur",handler:i.handleBlur})),o)}(n,i,m,f.touchHold))},[]),f.dynamicTitle&&Ee.call(g,{target:i,callback:function(){var e=u(h).content,t=i.getAttribute("title");t&&(e.innerHTML=t,d(i))},options:{attributes:!0}}),i._tippy=g,h._reference=i,e.push(g),Te++,e},[])}function Pe(e){[].slice.call(document.querySelectorAll(n.POPPER)).forEach(function(t){var n=t._reference._tippy,i=n.options;!(!0===i.hideOnClick||i.trigger.indexOf("focus")>-1)||e&&t===e.popper||n.hide()})}function Me(e,r){return t.supported&&!t._eventListenersBound&&(!function(){var e=function(){t.usingTouch||(t.usingTouch=!0,t.iOS&&document.body.classList.add("tippy-touch"),t.dynamicInputDetection&&window.performance&&document.addEventListener("mousemove",i),t.onUserInputChange("touch"))},i=function(){var e=void 0;return function(){var n=performance.now();n-e<20&&(t.usingTouch=!1,document.removeEventListener("mousemove",i),t.iOS||document.body.classList.remove("tippy-touch"),t.onUserInputChange("mouse")),e=n}}();document.addEventListener("click",function(e){if(!(e.target instanceof Element))return Pe();var i=ve(e.target,n.REFERENCE),r=ve(e.target,n.POPPER);if(!r||!r._reference._tippy.options.interactive){if(i){var o=i._tippy.options;if(!o.multiple&&t.usingTouch||!o.multiple&&o.trigger.indexOf("click")>-1)return Pe(i._tippy);if(!0!==o.hideOnClick||o.trigger.indexOf("click")>-1)return}Pe()}}),document.addEventListener("touchstart",e),window.addEventListener("blur",function(e){var t=document.activeElement;t&&t.blur&&me.call(t,n.REFERENCE)&&t.blur()}),t.supportsTouch||!navigator.maxTouchPoints&&!navigator.msMaxTouchPoints||document.addEventListener("pointerdown",e)}(),t._eventListenersBound=!0),o(e)&&(e.refObj=!0,e.attributes=e.attributes||{},e.setAttribute=function(t,n){e.attributes[t]=n},e.getAttribute=function(t){return e.attributes[t]},e.removeAttribute=function(t){delete e.attributes[t]},e.addEventListener=function(){},e.removeEventListener=function(){},e.classList={classNames:{},add:function(t){return e.classList.classNames[t]=!0},remove:function(t){return delete e.classList.classNames[t],!0},contains:function(t){return!!e.classList.classNames[t]}}),r=c({},i,r),{selector:e,options:r,tooltips:t.supported?De(function(e){if(e instanceof Element||o(e))return[e];if(e instanceof NodeList)return[].slice.call(e);if(Array.isArray(e))return e;try{return[].slice.call(document.querySelectorAll(e))}catch(e){return[]}}(e),r):[],destroyAll:function(){this.tooltips.forEach(function(e){return e.destroy()}),this.tooltips=[]}}}return Me.browser=t,Me.defaults=i,Me}),function(){var e=function(e){var t=$(e).parents(".cabinet-risks-recommendation");return t.find(".cabinet-risks-recommendation-default-state").show(),t.find(".cabinet-risks-recommendation-enter-date-state").hide(),!1};$("[data-enter-date]").on("click",function(){return!$(this).attr("disabled")&&function(e){var t=$(e).parents(".cabinet-risks-recommendation");return t.find(".cabinet-risks-recommendation-default-state").hide(),t.find(".cabinet-risks-recommendation-enter-date-state").show(),!1}(this)}),$("[data-save-date]").on("click",function(){var t=this,n=$(this).data("save-date"),i=$(this).parents(".cabinet-risks-recommendation"),r=i.find(".cabinet-risks-recommendation-enter-date input").val();return r?($.ajax({method:"POST",url:"/procedure",dataType:"json",data:{date:r,procedure:n,_token:$("input[name=_token]").val()},success:function(n){i.find(".cabinet-risks-recommendation-date").text(n.nextDate),e(t)}}),!1):(i.find(".cabinet-risks-recommendation-enter-date input").focus(),!1)}),$("[data-close-enter-date]").on("click",function(){return e(this)})}(),$("[data-flatpickr]").each(function(){var e={locale:"ru",dateFormat:"d.m.Y"},t=$(this).data("flatpickr");for(var n in t)e[n]=t[n];$(this).data("untiltoday")&&(e.disable=[function(e){return e>new Date}]),$(this).flatpickr(e)}),$(".js-header-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(".js-header-slider-next").click(function(){return e.goToNextSlide(),!1}),$(".js-header-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})}),$(".js-header-about-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!0});$(window).resize(function(){e.reloadSlider()})}),$(".js-logotypes-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-next").click(function(){return e.goToNextSlide(),!1}),$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})}),$("#recommendations-subscribe").on("change",function(){var e=$(this).parents("form");window.recommendationTimeout&&clearTimeout(window.recommendationTimeout),window.recommendationTimeout=setTimeout(function(){e.submit()},1300)}),function(){function e(t,n,i){$(t.target).closest(n).length||(i(),$(document).off("click","body",e))}$(".js-offcanvas").click(function(){var t="#offcanvas",n="#offcanvas > .main-offcanvas";function i(){$(".js-offcanvas, "+t).removeClass("active")}return $(this).hasClass("active")?i():($(".js-offcanvas").addClass("active"),$(t).addClass("active"),$(document).on("click","body",function(t){e(t,n,i)})),!1})}(),function(e){e.fn.toggler=function(){return this.each(function(){e(this).on("click",function(t){var n=e(this).data("toggle")||e(this).attr("href"),i=e(this).data("toggle-class")||"active",r=e(this).data("toggle-group"),o=e(this).is("[data-toggle-self-deactive]");return console.log(n,i,r),e('[data-toggle-group="'+r+'"]').not(this).each(function(){var t=e(this).data("toggle")||e(this).attr("href"),n=e(this).data("toggle-class")||"active";e(t).removeClass(n),e(this).removeClass(n)}),e(this).hasClass(i)&&o?(e(this).removeClass(i),e(n).removeClass(i)):(e(this).addClass(i),e(n).addClass(i)),!1})}),this}}(jQuery),$(document).ready(function(){$("[data-toggle]").toggler(),$(":input").inputmask(),tippy("[data-tooltip]",{theme:"light"})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsImpxdWVyeS5ieHNsaWRlci5qcyIsImpxdWVyeS5mYW5jeWJveC5qcyIsImpxdWVyeS5pbnB1dG1hc2suYnVuZGxlLmpzIiwiZmxhdHBpY2tyLmpzIiwicnUuanMiLCJ0aXBweS5qcyIsImVudGVyLWRhdGUuanMiLCJoZWFkZXItc2xpZGVyLmpzIiwibG9nb3R5cGVzLXNsaWRlci5qcyIsIm5vdGlmaWNhdG9ucy1jaGVjay5qcyIsIm9mZmNhbnZhcy5qcyIsInRvZ2dsZXIuanMiLCJzY3JpcHRzLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJhcnIiLCJnZXRQcm90byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwic2xpY2UiLCJjb25jYXQiLCJwdXNoIiwiaW5kZXhPZiIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImhhc093biIsImhhc093blByb3BlcnR5IiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwiY2FsbCIsInN1cHBvcnQiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJsZW5ndGgiLCJ0b0FycmF5IiwiZ2V0IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiaSIsImFwcGx5IiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsIm9wdGlvbnMiLCJuYW1lIiwic3JjIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwib2JqIiwidHlwZSIsImlzV2luZG93IiwiaXNOdW1lcmljIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJpc0FycmF5TGlrZSIsInRyaW0iLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJ2YWx1ZSIsImd1aWQiLCJwcm94eSIsInRtcCIsImFyZ3MiLCJub3ciLCJEYXRlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdCIsInRvTG93ZXJDYXNlIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hfbmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiXyIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImRpc2FibGVkQW5jZXN0b3IiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJkaXIiLCJuZXh0IiwiY2hpbGROb2RlcyIsIm5vZGVUeXBlIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0Iiwibm9kZU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b1NlbGVjdG9yIiwiam9pbiIsInRlc3RDb250ZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwia2V5IiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwiZG9jdW1lbnRFbGVtZW50Iiwibm9kZSIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsImlubmVySFRNTCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInZhbCIsInNwZWNpZmllZCIsImVzY2FwZSIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsIj4iLCIgIiwiKyIsIn4iLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJub3QiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5IiwidG9rZW5zIiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0Iiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsInRva2VuIiwiY29tcGlsZWQiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyaXNTaW1wbGUiLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2IiwidGFyZ2V0cyIsImwiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInNpYmxpbmciLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsIkNhbGxiYWNrcyIsIm9iamVjdCIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsIndhaXQiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsIkpTT04iLCJwYXJzZSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwic3R5bGUiLCJkaXNwbGF5IiwiY3NzIiwic3dhcCIsIm9sZCIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0Iiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImRpdiIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImVyciIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50IiwiZW51bWVyYWJsZSIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsImh0bWwiLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybWFyZ2luIiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImNvbnRhaW5lciIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsIm1hcmdpbkxlZnQiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsIndpZHRoIiwibWFyZ2luUmlnaHQiLCJwaXhlbE1hcmdpblJpZ2h0VmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbE1hcmdpblJpZ2h0IiwicmVsaWFibGVNYXJnaW5MZWZ0IiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZsb2F0Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJUd2VlbiIsImVhc2luZyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwiKiIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwiZ2V0dGVyIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsInBhcnNlSW50IiwiZm9yIiwiY2xhc3MiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsInJmb2N1c01vcnBoIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImV2ZW50UGF0aCIsImlzVHJpZ2dlciIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwiZm9jdXNpbiIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJzIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsImNsaWVudFRvcCIsInBhZ2VYT2Zmc2V0IiwiY2xpZW50TGVmdCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJkZWZhdWx0cyIsIm1vZGUiLCJzbGlkZVNlbGVjdG9yIiwiaW5maW5pdGVMb29wIiwiaGlkZUNvbnRyb2xPbkVuZCIsInNsaWRlTWFyZ2luIiwic3RhcnRTbGlkZSIsInJhbmRvbVN0YXJ0IiwiY2FwdGlvbnMiLCJ0aWNrZXIiLCJ0aWNrZXJIb3ZlciIsImFkYXB0aXZlSGVpZ2h0IiwiYWRhcHRpdmVIZWlnaHRTcGVlZCIsInZpZGVvIiwidXNlQ1NTIiwicHJlbG9hZEltYWdlcyIsInJlc3BvbnNpdmUiLCJzbGlkZVpJbmRleCIsIndyYXBwZXJDbGFzcyIsInRvdWNoRW5hYmxlZCIsInN3aXBlVGhyZXNob2xkIiwib25lVG9PbmVUb3VjaCIsInByZXZlbnREZWZhdWx0U3dpcGVYIiwicHJldmVudERlZmF1bHRTd2lwZVkiLCJhcmlhTGl2ZSIsImFyaWFIaWRkZW4iLCJrZXlib2FyZEVuYWJsZWQiLCJwYWdlciIsInBhZ2VyVHlwZSIsInBhZ2VyU2hvcnRTZXBhcmF0b3IiLCJwYWdlclNlbGVjdG9yIiwiYnVpbGRQYWdlciIsInBhZ2VyQ3VzdG9tIiwiY29udHJvbHMiLCJuZXh0VGV4dCIsInByZXZUZXh0IiwibmV4dFNlbGVjdG9yIiwicHJldlNlbGVjdG9yIiwiYXV0b0NvbnRyb2xzIiwic3RhcnRUZXh0Iiwic3RvcFRleHQiLCJhdXRvQ29udHJvbHNDb21iaW5lIiwiYXV0b0NvbnRyb2xzU2VsZWN0b3IiLCJhdXRvIiwicGF1c2UiLCJhdXRvU3RhcnQiLCJhdXRvRGlyZWN0aW9uIiwic3RvcEF1dG9PbkNsaWNrIiwiYXV0b0hvdmVyIiwiYXV0b0RlbGF5IiwiYXV0b1NsaWRlRm9yT25lUGFnZSIsIm1pblNsaWRlcyIsIm1heFNsaWRlcyIsIm1vdmVTbGlkZXMiLCJzbGlkZVdpZHRoIiwic2hyaW5rSXRlbXMiLCJvblNsaWRlckxvYWQiLCJvblNsaWRlQmVmb3JlIiwib25TbGlkZUFmdGVyIiwib25TbGlkZU5leHQiLCJvblNsaWRlUHJldiIsIm9uU2xpZGVyUmVzaXplIiwib25BdXRvQ2hhbmdlIiwiYnhTbGlkZXIiLCJzbGlkZXIiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsImZsb29yIiwiY2Fyb3VzZWwiLCJtaW5UaHJlc2hvbGQiLCJtYXhUaHJlc2hvbGQiLCJ3b3JraW5nIiwiYW5pbVByb3AiLCJ1c2luZ0NTUyIsImNzc1ByZWZpeCIsInByZWxvYWRTZWxlY3RvciIsInZpZXdwb3J0IiwibG9hZGVyIiwiZ2V0Vmlld3BvcnRNYXhXaWR0aCIsImxpc3RTdHlsZSIsImdldFNsaWRlV2lkdGgiLCJhcHBlbmRDYXB0aW9ucyIsImdldFBhZ2VyUXR5IiwiZml0VmlkcyIsImFwcGVuZENvbnRyb2xzIiwiYXBwZW5kQ29udHJvbHNBdXRvIiwiYXBwZW5kUGFnZXIiLCJsb2FkRWxlbWVudHMiLCJ0b3RhbCIsInNsaWNlQXBwZW5kIiwic2xpY2VQcmVwZW5kIiwic2V0U2xpZGVQb3NpdGlvbiIsImdldFZpZXdwb3J0SGVpZ2h0IiwicmVkcmF3U2xpZGVyIiwiaW5pdGlhbGl6ZWQiLCJyZXNpemVXaW5kb3ciLCJpbml0QXV0byIsImluaXRUaWNrZXIiLCJ1cGRhdGVQYWdlckFjdGl2ZSIsInVwZGF0ZURpcmVjdGlvbkNvbnRyb2xzIiwiaW5pdFRvdWNoIiwia2V5ZG93biIsImtleVByZXNzIiwiY3VycmVudEluZGV4IiwiZ2V0TW92ZUJ5Iiwib3V0ZXJIZWlnaHQiLCJuZXdFbFdpZHRoIiwid3JhcFdpZHRoIiwiY2VpbCIsImdldE51bWJlclNsaWRlc1Nob3dpbmciLCJzbGlkZXNTaG93aW5nIiwiY2hpbGRXaWR0aCIsInBhZ2VyUXR5IiwiYnJlYWtQb2ludCIsImNvdW50ZXIiLCJsYXN0U2hvd2luZ0luZGV4Iiwic2V0UG9zaXRpb25Qcm9wZXJ0eSIsIm91dGVyV2lkdGgiLCJhbmltYXRlT2JqIiwicHJvcFZhbHVlIiwidXBkYXRlQWZ0ZXJTbGlkZVRyYW5zaXRpb24iLCJyZXNldFZhbHVlIiwidGlja2VyTG9vcCIsInBvcHVsYXRlUGFnZXIiLCJwYWdlckh0bWwiLCJsaW5rQ29udGVudCIsInBhZ2VyRWwiLCJjbGlja1BhZ2VyQmluZCIsImNsaWNrTmV4dEJpbmQiLCJjbGlja1ByZXZCaW5kIiwiZGlyZWN0aW9uRWwiLCJhdXRvRWwiLCJjbGlja1N0YXJ0QmluZCIsImNsaWNrU3RvcEJpbmQiLCJ1cGRhdGVBdXRvQ29udHJvbHMiLCJ0aXRsZSIsInN0b3BBdXRvIiwiZ29Ub05leHRTbGlkZSIsImdvVG9QcmV2U2xpZGUiLCJzdGFydEF1dG8iLCJwYWdlckxpbmsiLCJwYWdlckluZGV4IiwiZ29Ub1NsaWRlIiwic2xpZGVJbmRleCIsIm9sZEluZGV4Iiwid2luZG93Rm9jdXNIYW5kbGVyIiwid2luZG93Qmx1ckhhbmRsZXIiLCJhdXRvUGF1c2VkIiwidHJhbnNmb3JtIiwicmF0aW8iLCJwcm9wZXJ0eSIsIm5ld1NwZWVkIiwidG90YWxEaW1lbnMiLCJzdGFydFBvc2l0aW9uIiwiYWJzIiwicmVzdW1lU3BlZWQiLCJhbmltYXRlUHJvcGVydHkiLCJhY3RpdmVFbGVtZW50VGFnIiwidGFnTmFtZSIsImJvdW5kcyIsInJpZ2h0IiwiYm90dG9tIiwiaXNPblNjcmVlbiIsInRvdWNoIiwieCIsInkiLCJvblRvdWNoU3RhcnQiLCJvcmlnaW5hbFBvcyIsInRvdWNoUG9pbnRzIiwic2V0UG9pbnRlckNhcHR1cmUiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hFbmQiLCJvblBvaW50ZXJDYW5jZWwiLCJyZWxlYXNlUG9pbnRlckNhcHR1cmUiLCJ4TW92ZW1lbnQiLCJ5TW92ZW1lbnQiLCJjaGFuZ2UiLCJkaXN0YW5jZSIsIndpbmRvd1dpZHRoTmV3Iiwid2luZG93SGVpZ2h0TmV3IiwiYXBwbHlBcmlhSGlkZGVuQXR0cmlidXRlcyIsInN0YXJ0VmlzaWJsZUluZGV4IiwibnVtYmVyT2ZTbGlkZXNTaG93aW5nIiwiZGlyZWN0aW9uIiwicmVxdWVzdEVsIiwicGVyZm9ybVRyYW5zaXRpb24iLCJtb3ZlQnkiLCJwcmV2ZW50Q29udHJvbFVwZGF0ZSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImdldEN1cnJlbnRTbGlkZSIsImdldEN1cnJlbnRTbGlkZUVsZW1lbnQiLCJnZXRTbGlkZUVsZW1lbnQiLCJnZXRTbGlkZUNvdW50IiwiaXNXb3JraW5nIiwiZGVzdHJveVNsaWRlciIsInJlbG9hZFNsaWRlciIsImZhbmN5Ym94IiwibG9nIiwibG9vcCIsImd1dHRlciIsImtleWJvYXJkIiwiYXJyb3dzIiwiaW5mb2JhciIsInRvb2xiYXIiLCJpZGxlVGltZSIsInNtYWxsQnRuIiwicHJvdGVjdCIsIm1vZGFsIiwicHJlbG9hZCIsImlmcmFtZSIsInRwbCIsInNjcm9sbGluZyIsImRlZmF1bHRUeXBlIiwiYW5pbWF0aW9uRWZmZWN0IiwiYW5pbWF0aW9uRHVyYXRpb24iLCJ6b29tT3BhY2l0eSIsInRyYW5zaXRpb25FZmZlY3QiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJzbGlkZUNsYXNzIiwiYmFzZUNsYXNzIiwiYmFzZVRwbCIsInNwaW5uZXJUcGwiLCJlcnJvclRwbCIsImJ0blRwbCIsImRvd25sb2FkIiwiY2xvc2UiLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwicGFyZW50RWwiLCJhdXRvRm9jdXMiLCJiYWNrRm9jdXMiLCJ0cmFwRm9jdXMiLCJmdWxsU2NyZWVuIiwidmVydGljYWwiLCJtb21lbnR1bSIsIm1lZGlhIiwic2xpZGVTaG93IiwidGh1bWJzIiwiaGlkZU9uQ2xvc2UiLCJheGlzIiwib25Jbml0IiwiYmVmb3JlTG9hZCIsImFmdGVyTG9hZCIsImJlZm9yZVNob3ciLCJhZnRlclNob3ciLCJiZWZvcmVDbG9zZSIsImFmdGVyQ2xvc2UiLCJvbkFjdGl2YXRlIiwib25EZWFjdGl2YXRlIiwiY2xpY2tDb250ZW50IiwiY2xpY2tTbGlkZSIsImNsaWNrT3V0c2lkZSIsImRibGNsaWNrQ29udGVudCIsImRibGNsaWNrU2xpZGUiLCJkYmxjbGlja091dHNpZGUiLCJtb2JpbGUiLCJpMThuIiwiZW4iLCJDTE9TRSIsIk5FWFQiLCJQUkVWIiwiRVJST1IiLCJQTEFZX1NUQVJUIiwiUExBWV9TVE9QIiwiRlVMTF9TQ1JFRU4iLCJUSFVNQlMiLCJET1dOTE9BRCIsIlNIQVJFIiwiWk9PTSIsImRlIiwiJFciLCIkRCIsImNhbGxlZCIsInJlcXVlc3RBRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidHJhbnNpdGlvbkVuZCIsInRyYW5zaXRpb25zIiwidHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb24iLCJmb3JjZVJlZHJhdyIsIiRlbCIsIkZhbmN5Qm94IiwiaXNNb2JpbGUiLCJncm91cCIsImN1cnJJbmRleCIsInByZXZJbmRleCIsInByZXZQb3MiLCJjdXJyUG9zIiwiZmlyc3RSdW4iLCJjcmVhdGVHcm91cCIsIiRsYXN0Rm9jdXMiLCJzbGlkZXMiLCIkc2Nyb2xsRGl2IiwiJGNvbnRhaW5lciIsImJ1dHRvblN0ciIsImZpcnN0SXRlbSIsImZpcnN0SXRlbU9wdHMiLCJzY3JvbGxiYXJXaWR0aCIsImdldEluc3RhbmNlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiTVNTdHJlYW0iLCJzY3JvbGxIZWlnaHQiLCJpbm5lckhlaWdodCIsImNsaWVudFdpZHRoIiwidHJhbnNsYXRlIiwiJHJlZnMiLCJmb3JFYWNoIiwiaXRlbSIsImFjdGl2YXRlIiwianVtcFRvIiwic3RyIiwiaXRlbXMiLCIkaXRlbSIsInNyY1BhcnRzIiwiJG9yaWciLCJjaGFyQXQiLCIkdGh1bWIiLCJhZGRFdmVudHMiLCJyZW1vdmVFdmVudHMiLCJwcmV2aW91cyIsImlzU2NhbGVkRG93biIsInVwZGF0ZSIsInN0YWdlIiwiaW5zdGFuY2UiLCJpc0Nsb3NpbmciLCJrZXljb2RlIiwiaWRsZVNlY29uZHNDb3VudGVyIiwiaXNJZGxlIiwic2hvd0NvbnRyb2xzIiwiaWRsZUludGVydmFsIiwiaGlkZUNvbnRyb2xzIiwic2xpZGUiLCJjYW52YXNXaWR0aCIsImN1cnJlbnRQb3MiLCJ0cmFuc2l0aW9uUHJvcHMiLCJncm91cExlbiIsImlzU2xpZGluZyIsImlzQW5pbWF0aW5nIiwiY3JlYXRlU2xpZGUiLCJ1cGRhdGVDb250cm9scyIsImdldFRyYW5zbGF0ZSIsIiRzbGlkZSIsImlzTW92ZWQiLCJmb3JjZWREdXJhdGlvbiIsImxvYWRTbGlkZSIsInJvdW5kIiwiaXNMb2FkZWQiLCJyZXZlYWxDb250ZW50IiwiaXNDb21wbGV0ZSIsInVwZGF0ZVNsaWRlIiwic2NhbGVUb0FjdHVhbCIsImltZ1BvcyIsInBvc1giLCJwb3NZIiwic2NhbGVYIiwic2NhbGVZIiwiJHdoYXQiLCIkY29udGVudCIsImNhbnZhc0hlaWdodCIsIm5ld0ltZ1dpZHRoIiwibmV3SW1nSGVpZ2h0IiwiaGFzRXJyb3IiLCJ1cGRhdGVDdXJzb3IiLCJTbGlkZVNob3ciLCJpc0FjdGl2ZSIsInNjYWxlVG9GaXQiLCJnZXRGaXRQb3MiLCJtaW5SYXRpbyIsImltZ1dpZHRoIiwiaW1nSGVpZ2h0IiwibWluIiwic2V0VHJhbnNsYXRlIiwibmV4dFdpZHRoIiwibmV4dEhlaWdodCIsImlzWm9vbWFibGUiLCJmaXRQb3MiLCJyZXoiLCJjYW5QYW4iLCJhamF4TG9hZCIsImlzTG9hZGluZyIsInNldEltYWdlIiwic2V0SWZyYW1lIiwic2V0Q29udGVudCIsInNldEVycm9yIiwic2hvd0xvYWRpbmciLCJ0ZXh0U3RhdHVzIiwiZm91bmQiLCJweFJhdGlvIiwic3Jjc2V0IiwiZGV2aWNlUGl4ZWxSYXRpbyIsImlubmVyV2lkdGgiLCJzdWJzdHJpbmciLCJwb3N0Zml4IiwidGh1bWIiLCIkZ2hvc3QiLCJzZXRCaWdJbWFnZSIsIiRpbWciLCIkaW1hZ2UiLCJ0aW1vdXRzIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsImhpZGVMb2FkaW5nIiwiJGlmcmFtZSIsImdldFRpbWUiLCJzY3JvbGxXaWR0aCIsIiRib2R5IiwiJHdyYXAiLCJmcmFtZVdpZHRoIiwiZnJhbWVIZWlnaHQiLCJpZ25vcmUiLCJjb250ZW50V2luZG93IiwiJHBsYWNlaG9sZGVyIiwiJHNtYWxsQnRuIiwiJHNwaW5uZXIiLCJlZmZlY3QiLCJlZmZlY3RDbGFzc05hbWUiLCJnZXRUaHVtYlBvcyIsInNsaWRlUG9zIiwidGh1bWJQb3MiLCJlbGVtZW50IiwiZWxlbWVudFJlY3QiLCJwYXJlbnRSZWN0cyIsInBhcmVudEVsZW1lbnQiLCJldmVyeSIsInBhcmVudFJlY3QiLCJ2aXNpYmxlUGl4ZWxYIiwidmlzaWJsZVBpeGVsWSIsImlzRWxlbWVudFZpc2libGUiLCJpc1Zpc2libGUiLCJkIiwiY2xlYW5VcCIsImZvcmNlIiwiJGNhcHRpb24iLCJpc0hpZGRlbkNvbnRyb2xzIiwidG9nZ2xlQ29udHJvbHMiLCJ2ZXJzaW9uIiwiY29tbWFuZCIsImRlc3Ryb3kiLCJjcmVhdGVUb3VjaCIsInVzZTNkIiwiZG9jdW1lbnRNb2RlIiwibWF0cml4IiwidHJhbnNSZXoiLCJsZWF2ZUFuaW1hdGlvbk5hbWUiLCJwcm9wZXJ0eU5hbWUiLCJfcnVuIiwiJHRhcmdldCIsImZvcm1hdCIsInlvdXR1YmUiLCJhdXRvcGxheSIsImF1dG9oaWRlIiwiZnMiLCJyZWwiLCJoZCIsIndtb2RlIiwiZW5hYmxlanNhcGkiLCJodG1sNSIsInBhcmFtUGxhY2UiLCJ2aW1lbyIsInNob3dfdGl0bGUiLCJzaG93X2J5bGluZSIsInNob3dfcG9ydHJhaXQiLCJmdWxsc2NyZWVuIiwiYXBpIiwibWV0YWNhZmUiLCJkYWlseW1vdGlvbiIsImFkZGl0aW9uYWxJbmZvcyIsInZpbmUiLCJpbnN0YWdyYW0iLCJnbWFwX3BsYWNlIiwiZ21hcF9zZWFyY2giLCJ1cmxQYXJhbXMiLCJwYXJhbU9iaiIsInByb3ZpZGVyTmFtZSIsInByb3ZpZGVyT3B0cyIsImRlY29kZVVSSUNvbXBvbmVudCIsImNvbnRlbnRQcm92aWRlciIsInByb3ZpZGVyIiwiY2FuY2VsQUZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIiwib0NhbmNlbEFuaW1hdGlvbkZyYW1lIiwicG9pbnRlcnMiLCJwb2ludDIiLCJwb2ludDEiLCJzcXJ0IiwicG93IiwiaXNDbGlja2FibGUiLCJvbmNsaWNrIiwiYXR0cyIsInN1YnN0ciIsImhhc1Njcm9sbGJhcnMiLCJjbGllbnRIZWlnaHQiLCJob3Jpem9udGFsIiwiaXNTY3JvbGxhYmxlIiwiR3Vlc3R1cmVzIiwiJGJnIiwiYmciLCIkc3RhZ2UiLCJvbnRvdWNoc3RhcnQiLCJpc1RvdWNoRGV2aWNlIiwic3RhcnRQb2ludHMiLCJjYW5UYXAiLCJkaXN0YW5jZVgiLCJkaXN0YW5jZVkiLCJpc1Bhbm5pbmciLCJpc1N3aXBpbmciLCJpc1pvb21pbmciLCJzbGlkZXJTdGFydFBvcyIsInNsaWRlckxhc3RQb3MiLCJjb250ZW50U3RhcnRQb3MiLCJjb250ZW50TGFzdFBvcyIsImNlbnRlclBvaW50U3RhcnRYIiwiY2VudGVyUG9pbnRTdGFydFkiLCJwZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFgiLCJwZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFkiLCJzdGFydERpc3RhbmNlQmV0d2VlbkZpbmdlcnMiLCJvbnRvdWNobW92ZSIsIm5ld1BvaW50cyIsIm9uU3dpcGUiLCJvblBhbiIsIm9uWm9vbSIsImFuZ2xlIiwic3dpcGluZyIsImF0YW4yIiwiaW5UcmFuc2l0aW9uIiwicmVxdWVzdElkIiwibmV3T2Zmc2V0WCIsIm5ld09mZnNldFkiLCJuZXdQb3MiLCJsaW1pdE1vdmVtZW50IiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJtaW5UcmFuc2xhdGVYIiwibWluVHJhbnNsYXRlWSIsIm1heFRyYW5zbGF0ZVgiLCJtYXhUcmFuc2xhdGVZIiwiY3VycmVudE9mZnNldFgiLCJjdXJyZW50T2Zmc2V0WSIsImxpbWl0UG9zaXRpb24iLCJjdXJyZW50V2lkdGgiLCJjdXJyZW50SGVpZ2h0IiwicGluY2hSYXRpbyIsInRyYW5zbGF0ZUZyb21ab29taW5nWCIsInRyYW5zbGF0ZUZyb21ab29taW5nWSIsImNlbnRlclBvaW50RW5kWCIsImNlbnRlclBvaW50RW5kWSIsInRyYW5zbGF0ZUZyb21UcmFuc2xhdGluZ1giLCJvbnRvdWNoZW5kIiwiZE1zIiwicGFubmluZyIsInpvb21pbmciLCJlbmRQb2ludHMiLCJvblRhcCIsInZlbG9jaXR5WCIsInZlbG9jaXR5WSIsInNwZWVkWCIsImVuZFBhbm5pbmciLCJlbmRab29taW5nIiwiZW5kU3dpcGluZyIsIndoZXJlIiwidGFwWCIsInRhcFkiLCJhY3Rpb24iLCJzdGFydEV2ZW50IiwidGFwcGVkIiwiJGJ1dHRvbiIsImNsZWFyIiwib25Jbml0LmZiIiwiYmVmb3JlU2hvdy5mYiIsImFmdGVyU2hvdy5mYiIsImFmdGVyS2V5ZG93bi5mYiIsImtleXByZXNzIiwiYmVmb3JlQ2xvc2UuZmIgb25EZWFjdGl2YXRlLmZiIiwiZm5NYXAiLCJGdWxsU2NyZWVuIiwicmVxdWVzdCIsInJlcXVlc3RGdWxsc2NyZWVuIiwiQUxMT1dfS0VZQk9BUkRfSU5QVVQiLCJleGl0IiwiZXhpdEZ1bGxzY3JlZW4iLCJpc0Z1bGxzY3JlZW4iLCJCb29sZWFuIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJmdWxsc2NyZWVuRW5hYmxlZCIsImJlZm9yZUNsb3NlLmZiIiwiZnVsbHNjcmVlbmNoYW5nZSIsIkZhbmN5VGh1bWJzIiwiJGdyaWQiLCIkbGlzdCIsIlRodW1icyIsImNyZWF0ZSIsIndpZHRoUmF0aW8iLCJoZWlnaHRSYXRpbyIsIiRwYXJlbnQiLCJ0aHVtYldpZHRoIiwidGh1bWJIZWlnaHQiLCJtYXJnaW4tdG9wIiwibWFyZ2luLWxlZnQiLCJzaGFyZSIsImYiLCJlbnRpdHlNYXAiLCImIiwiPCIsIlwiIiwiJyIsIi8iLCJgIiwiPSIsImVzY2FwZUh0bWwiLCJzaG91bGRDcmVhdGVIaXN0b3J5IiwiY3VycmVudEhhc2giLCJ0aW1lcklEIiwicGFyc2VVcmwiLCJnYWxsZXJ5IiwidHJpZ2dlckZyb21VcmwiLCJnZXRHYWxsZXJ5SUQiLCJvcmlnSGFzaCIsImhpc3RvcnkiLCJwYXRobmFtZSIsInNlYXJjaCIsInJlcGxhY2VTdGF0ZSIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiYyIsIm8iLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsIl90eXBlb2YiLCJJbnB1dG1hc2siLCJhbGlhcyIsImludGVybmFsIiwibWFza3NldCIsInJlZnJlc2hWYWx1ZSIsIm5vTWFza3NDYWNoZSIsImRlZmluaXRpb25zIiwidXNlck9wdGlvbnMiLCJpc1JUTCIsIm51bWVyaWNJbnB1dCIsInJlc29sdmVBbGlhcyIsImFsaWFzU3RyIiwiYWxpYXNEZWZpbml0aW9uIiwiYWxpYXNlcyIsIm1hc2siLCJnZW5lcmF0ZU1hc2tTZXQiLCJub2NhY2hlIiwiZ2VuZXJhdGVNYXNrIiwibWV0YWRhdGEiLCJyZWdleE1hc2siLCJyZWdleCIsImdyZWVkeSIsInJlcGVhdCIsInBsYWNlaG9sZGVyIiwicmVwZWF0U3RhcnQiLCJncm91cG1hcmtlciIsInF1YW50aWZpZXJtYXJrZXIiLCJtYXNrc2V0RGVmaW5pdGlvbiIsIm1hc2tkZWZLZXkiLCJtYXNrc0NhY2hlIiwibWFza1Rva2VuIiwiYW5hbHlzZU1hc2siLCJ2YWxpZFBvc2l0aW9ucyIsIl9idWZmZXIiLCJidWZmZXIiLCJ0ZXN0cyIsIm1hc2tMZW5ndGgiLCJrZWVwU3RhdGljIiwiYWx0TWFzayIsIm5keCIsIm1zayIsImFsdGVybmF0b3JtYXJrZXIiLCJtYXNrU2NvcGUiLCJhY3Rpb25PYmoiLCJnZXRNYXNrVGVtcGxhdGUiLCJiYXNlT25JbnB1dCIsIm1pbmltYWxQb3MiLCJpbmNsdWRlTW9kZSIsIm5keEludGx6ciIsInRlc3RQb3MiLCJtYXNrVGVtcGxhdGUiLCJsdnAiLCJnZXRMYXN0VmFsaWRQb3NpdGlvbiIsImdldE1hc2tTZXQiLCJsb2NhdG9yIiwibmF0aXZlRGVmIiwiZ2V0UGxhY2Vob2xkZXIiLCJnZXRUZXN0VGVtcGxhdGUiLCJqaXRNYXNraW5nIiwibWF4TGVuZ3RoIiwiZGVmIiwicmVzZXRNYXNrU2V0Iiwic29mdCIsImNsb3Nlc3RUbyIsInN0cmljdCIsInZhbGlkcyIsInBvc05keCIsInBzTmR4IiwiZ2VuZXJhdGVkSW5wdXQiLCJzdHJpcFZhbGlkUG9zaXRpb25zIiwibm9jaGVjayIsInN0YXJ0UG9zIiwicG9zaXRpb25zQ2xvbmUiLCJuZWVkc1ZhbGlkYXRpb24iLCJvcHRpb25hbGl0eSIsInBvc01hdGNoIiwicHJldk1hdGNoIiwibmV4dE1hdGNoIiwiY2FuQ2xlYXJQb3NpdGlvbiIsImlzTWFzayIsInBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uIiwiaXNWYWxpZCIsImRldGVybWluZVRlc3RUZW1wbGF0ZSIsImd1ZXNzTmV4dEJlc3QiLCJ0ZXN0UG9zaXRpb25zIiwibHZUZXN0IiwiZ2V0VGVzdHMiLCJsdlRlc3RBbHRBcnIiLCJhbHRlcm5hdGlvbiIsIm9wdGlvbmFsUXVhbnRpZmllciIsIm5ld0Jsb2NrTWFya2VyIiwiY2hlY2tBbHRlcm5hdGlvbk1hdGNoIiwidHN0UHMiLCJnZXRUZXN0IiwidmFsaWQiLCJ0bmR4IiwicmVzb2x2ZVRlc3RGcm9tVG9rZW4iLCJuZHhJbml0aWFsaXplciIsImxvb3BOZHgiLCJxdWFudGlmaWVyUmVjdXJzZSIsImhhbmRsZU1hdGNoIiwiaXNGaXJzdE1hdGNoIiwibGF0ZXN0TWF0Y2giLCJ0b2tlbkdyb3VwIiwiZmlyc3RNYXRjaCIsImlzUXVhbnRpZmllciIsInJlc29sdmVOZHhJbml0aWFsaXplciIsImFsdGVybmF0ZU5keCIsInRhcmdldEFsdGVybmF0aW9uIiwiYmVzdE1hdGNoIiwiaW5kZXhQb3MiLCJ2cEFsdGVybmF0aW9uIiwidHBBbHRlcm5hdGlvbiIsImxtbnQiLCJuZHhQb3MiLCJjZCIsImNhY2hlRGVwZW5kZW5jeSIsImlzR3JvdXAiLCJpc09wdGlvbmFsIiwib3B0aW9uYWxUb2tlbiIsImluc2VydFN0b3AiLCJpc0FsdGVybmF0b3IiLCJtYWx0TWF0Y2hlcyIsImFsdGVybmF0ZVRva2VuIiwibWFsdGVybmF0ZU1hdGNoZXMiLCJjdXJyZW50TWF0Y2hlcyIsImxvb3BOZHhDbnQiLCJhbHRJbmRleCIsImFtbmR4IiwibmR4SW5pdGlhbGl6ZXJDbG9uZSIsImFsdEluZGV4QXJyIiwibnRuZHgiLCJuZHgxIiwiYWx0TWF0Y2giLCJkcm9wTWF0Y2giLCJuZHgyIiwiYWx0TWF0Y2gyIiwibmEiLCJhbHRMb2NBcnIiLCJhbG5keCIsInF0IiwicW5keCIsInF1YW50aWZpZXIiLCJmaWx0ZXJUZXN0cyIsIm1hc2tUb2tlbnMiLCJwcmV2aW91c1BvcyIsInRzdCIsIm10bmR4IiwiY2FyZGluYWxpdHkiLCJjYXNpbmciLCJnZXRCdWZmZXJUZW1wbGF0ZSIsImdldEJ1ZmZlciIsIm5vQ2FjaGUiLCJyZWZyZXNoRnJvbUJ1ZmZlciIsInNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIiLCJ2YWxSZXN1bHQiLCJjYXJldCIsImFsdEFycjEiLCJhbHRBcnIyIiwibmFOZHgiLCJhbHRBcnJDIiwiaXNNYXRjaCIsIm5hQXJyIiwiZnJvbVNldFZhbGlkIiwiZnJvbUFsdGVybmF0ZSIsInZhbGlkYXRlT25seSIsImlzU2VsZWN0aW9uIiwicG9zT2JqIiwiYmVnaW4iLCJfaXNWYWxpZCIsInJzbHQiLCJsb29wZW5kIiwiY2hycyIsInZhbGlkYXRlZFBvcyIsInBvc3NpYmxlTW9kaWZpZWRCdWZmZXIiLCJyZWZyZXNoIiwic2V0VmFsaWRQb3NpdGlvbiIsInBvc0JlZm9yZSIsIlNQQUNFIiwidmFsaWRUZXN0IiwiaW5zZXJ0TW9kZSIsInZwcyIsImluaXRpYWxMZW5ndGgiLCJmaWxsTWlzc2luZ05vbk1hc2siLCJtYXNrUG9zIiwicG5keCIsInRlc3RUZW1wbGF0ZSIsInRlc3RzRnJvbVBvcyIsInJhZGl4UG9pbnREZWZpbml0aW9uU3ltYm9sIiwicmFkaXhQb2ludCIsInByZVZhbGlkYXRpb24iLCJoYW5kbGVSZW1vdmUiLCJERUxFVEUiLCJjdXJyZW50UG9zVmFsaWQiLCJzZWVrTmV4dCIsIm5Qb3MiLCJzblBvcyIsInZwIiwidGFyZ2V0TG9jYXRvciIsInRsbCIsInBzIiwiZXF1YWxpdHkiLCJ0YXJnZXRBSSIsImJlc3RNYXRjaEFJIiwidHN0QUkiLCJsYXN0QWx0IiwiYWx0UG9zIiwicHJldkFsdFBvcyIsInZhbGlkUG9zIiwiYWx0TmR4cyIsImRlY2lzaW9uUG9zIiwidmFsaWRQc0Nsb25lIiwiaXNWYWxpZFJzbHQiLCJsQWx0UG9zIiwiZGVjaXNpb25UYWtlciIsInBvc3NpYmlsaXR5UG9zIiwibW5keCIsInZhbGlkSW5wdXRzIiwic3RhdGljSW5wdXRzQmVmb3JlUG9zIiwic3RhdGljSW5wdXRzQmVmb3JlUG9zQWx0ZXJuYXRlIiwidmVyaWZ5VmFsaWRJbnB1dCIsInBvc3NpYmlsaXRpZXMiLCJ0YXJnZXRMdnAiLCJwb3N0VmFsaWRhdGlvbiIsInBvc3RSZXN1bHQiLCJuZXdCbG9jayIsIm1hc2tMIiwic2Vla1ByZXZpb3VzIiwid3JpdGVCdWZmZXIiLCJjYXJldFBvcyIsInRyaWdnZXJJbnB1dEV2ZW50Iiwib25CZWZvcmVXcml0ZSIsImlucHV0bWFzayIsIl92YWx1ZVNldCIsInJlbmRlckNvbG9yTWFzayIsImFuZHJvaWQiLCJza2lwSW5wdXRFdmVudCIsInJldHVyblBMIiwicHJldlRlc3QiLCJzdGF0aWNBbHRlcm5hdGlvbnMiLCJjaGVja1ZhbCIsIndyaXRlT3V0IiwibnB0dmwiLCJpbml0aWF0aW5nRXZlbnQiLCJpbnB1dFZhbHVlIiwiY2hhckNvZGVzIiwiaW5pdGlhbE5keCIsImF1dG9Vbm1hc2siLCJzdGF0aWNJbnB1dCIsImVzY2FwZVJlZ2V4IiwibmV4dFRlc3QiLCJFdmVudEhhbmRsZXJzIiwia2V5cHJlc3NFdmVudCIsIm9yaWdSZXN1bHQiLCJmb3J3YXJkUG9zaXRpb24iLCJ1bm1hc2tlZHZhbHVlIiwic2V0VmFsdWVFdmVudCIsInVtVmFsdWUiLCJ1bm1hc2tlZFZhbHVlIiwib25Vbk1hc2siLCJidWZmZXJWYWx1ZSIsIm5vdHJhbnNsYXRlIiwidHJhbnNsYXRlUG9zaXRpb24iLCJyYW5nZSIsInNldFNlbGVjdGlvblJhbmdlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJnZXRSYW5nZUF0IiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsImNyZWF0ZVJhbmdlIiwiZHVwbGljYXRlIiwibW92ZVN0YXJ0IiwiX3ZhbHVlR2V0Iiwic2Nyb2xsQ2FsYyIsImN1cnJlbnRTdHlsZSIsImZvbnRTaXplIiwidGV4dE5vZGUiLCJzZXRTdGFydCIsInNldEVuZCIsImNvbGxhcHNlIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJjcmVhdGVUZXh0UmFuZ2UiLCJtb3ZlRW5kIiwiZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24iLCJyZXR1cm5EZWZpbml0aW9uIiwiYmwiLCJwb3NpdGlvbnMiLCJsdlRlc3RBbHQiLCJjbGVhck9wdGlvbmFsVGFpbCIsInJsIiwibHYiLCJscnAiLCJhbWwiLCJrIiwiZnJvbUlzVmFsaWQiLCJCQUNLU1BBQ0UiLCJwZW5kIiwiZ3JvdXBTZXBhcmF0b3IiLCJpbml0aWFsaXplQ29sb3JNYXNrIiwiY29tcHV0ZWRTdHlsZSIsInRlbXBsYXRlIiwidGV4dEFsaWduIiwiY29sb3JNYXNrIiwib2Zmc2V0TGVmdCIsImNsaWVudHgiLCJ0ZXh0VHJhbnNmb3JtIiwid2hpdGVTcGFjZSIsIml0bCIsImlucHV0VGV4dCIsInByZXZpb3VzV2lkdGgiLCJvZmZzZXQxIiwib2Zmc2V0MiIsImZpbmRDYXJldFBvcyIsImNsaWNrRXZlbnQiLCJoYW5kbGVTdGF0aWMiLCJpc1N0YXRpYyIsImhhbmRsZUNhcmV0IiwicG9zaXRpb25Db2xvck1hc2siLCJ1bmRvVmFsdWUiLCJza2lwS2V5UHJlc3NFdmVudCIsImlnbm9yYWJsZSIsIm1vdXNlRW50ZXIiLCJFdmVudFJ1bGVyIiwiZXZlbnROYW1lIiwiZXZlbnRIYW5kbGVyIiwiZXYiLCJpbU9wdHMiLCJyZWFkT25seSIsInRhYlRocm91Z2giLCJUQUIiLCJpZW1vYmlsZSIsImlwaG9uZSIsInJldHVyblZhbCIsImZvcm0iLCJldkFyciIsImtleWRvd25FdmVudCIsIiRpbnB1dCIsIkJBQ0tTUEFDRV9TQUZBUkkiLCJYIiwiaXNTdXBwb3J0ZWQiLCJFTkQiLCJQQUdFX0RPV04iLCJIT01FIiwiUEFHRV9VUCIsInVuZG9PbkVzY2FwZSIsIkVTQ0FQRSIsIklOU0VSVCIsIlJJR0hUIiwiTEVGVCIsIm9uS2V5RG93biIsImlnbm9yYWJsZXMiLCJjaGVja3ZhbCIsIkVOVEVSIiwid3JpdGVPdXRCdWZmZXIiLCJvbktleVZhbGlkYXRpb24iLCJwYXN0ZUV2ZW50IiwidGVtcFZhbHVlIiwidmFsdWVCZWZvcmVDYXJldCIsInZhbHVlQWZ0ZXJDYXJldCIsImNsaXBib2FyZERhdGEiLCJnZXREYXRhIiwicGFzdGVWYWx1ZSIsIm9uQmVmb3JlUGFzdGUiLCJpbnB1dEZhbGxCYWNrRXZlbnQiLCJpbnB1dENoYXIiLCJmcm9udFBhcnQiLCJiYWNrUGFydCIsImZyb250QnVmZmVyUGFydCIsImJhY2tCdWZmZXJQYXJ0IiwiZW50cmllcyIsImlzRW50cnkiLCJmcGwiLCJlbnRyeSIsIm9uQmVmb3JlTWFzayIsImNsZWFyTWFza09uTG9zdEZvY3VzIiwiY2xlYXJJbmNvbXBsZXRlIiwiZm9jdXNFdmVudCIsIm5wdFZhbHVlIiwic2hvd01hc2tPbkZvY3VzIiwic2hvd01hc2tPbkhvdmVyIiwicG9zaXRpb25DYXJldE9uVGFiIiwibW91c2VsZWF2ZUV2ZW50IiwidGFiYmVkIiwic2VsZWN0ZWRDYXJldCIsInBvc2l0aW9uQ2FyZXRPbkNsaWNrIiwiY2xpY2tQb3MiLCJyYWRpeFBvcyIsImRvUmFkaXhGb2N1cyIsImNsaWNrUG9zaXRpb24iLCJsdmNsaWNrUG9zaXRpb24iLCJsYXN0UG9zaXRpb24iLCJ0dCIsImRibGNsaWNrRXZlbnQiLCJjdXRFdmVudCIsImNsaXBEYXRhIiwic2V0RGF0YSIsImV4ZWNDb21tYW5kIiwiYmx1ckV2ZW50IiwibW91c2VlbnRlckV2ZW50Iiwic3VibWl0RXZlbnQiLCJyZW1vdmVNYXNrT25TdWJtaXQiLCJyZXNldEV2ZW50IiwidmFsdWVCdWZmZXIiLCJlbGVtZW50VHlwZSIsInN1cHBvcnRzSW5wdXRUeXBlIiwiaXNDb250ZW50RWRpdGFibGUiLCJucHQiLCJudWxsYWJsZSIsInZhbHVlR2V0IiwidmFsdWVTZXQiLCJfX3ZhbHVlR2V0Iiwibm9WYWx1ZVBhdGNoaW5nIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19wcm90b19fIiwidmFsdWVQcm9wZXJ0eSIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiX19kZWZpbmVHZXR0ZXJfXyIsIl9fZGVmaW5lU2V0dGVyX18iLCJfX3ZhbHVlU2V0Iiwib3ZlcnJ1bGVSVEwiLCJpbnB1dG1hc2twYXRjaCIsInZhbGhvb2tHZXQiLCJ2YWxob29rU2V0IiwiJGVsZW0iLCJpbnB1dG1vZGUiLCJhbmRyb2lkSGFjayIsIm9uY29tcGxldGUiLCJvbmluY29tcGxldGUiLCJvbmNsZWFyZWQiLCJpbnB1dEV2ZW50T25seSIsImluaXRpYWxWYWx1ZSIsImxtaWIiLCJtYXNrVGFyZ2V0IiwibXRkdCIsInVhIiwiZGF0YUF0dHJpYnV0ZSIsIm9wdGlvbmFsbWFya2VyIiwiZXNjYXBlQ2hhciIsInBhc3RlZFZhbHVlIiwicmlnaHRBbGlnbiIsInN0YXRpY0RlZmluaXRpb25TeW1ib2wiLCJpbXBvcnREYXRhQXR0cmlidXRlcyIsIjkiLCJ2YWxpZGF0b3IiLCJkZWZpbml0aW9uU3ltYm9sIiwic2NvcGVkT3B0cyIsImRhdGFvcHRpb25zIiwib3B0aW9uRGF0YSIsImltcG9ydE9wdGlvbiIsImF0dHJPcHRpb25zIiwiaW1wb3J0QXR0cmlidXRlT3B0aW9ucyIsIm5vcmVtYXNrIiwiZ2V0ZW1wdHltYXNrIiwiaGFzTWFza2VkVmFsdWUiLCJnZXRtZXRhZGF0YSIsIk1hc2tUb2tlbiIsIm9wZW5Hcm91cCIsImFsdGVybmF0b3JHcm91cCIsImluc2VydFRlc3REZWZpbml0aW9uIiwibXRva2VuIiwibWFza2RlZiIsInByZXZhbGlkYXRvcnMiLCJwcmV2YWxpZGF0b3IiLCJwcmV2YWxpZGF0b3JzTCIsInZlcmlmeUdyb3VwTWFya2VyIiwibmV4dFRva2VuIiwiZGVmYXVsdENhc2UiLCJvcGVuZW5pbmdzIiwiY3VycmVudE9wZW5pbmdUb2tlbiIsImFsdGVybmF0b3IiLCJjdXJyZW50VG9rZW4iLCJyZXZlcnNlVG9rZW5zIiwiaW50TWF0Y2giLCJzdCIsIm9wZW5pbmdUb2tlbiIsImxhc3RNYXRjaCIsImdyb3VwVG9rZW4iLCJ0b2tlbml6ZXIiLCJyZWdleFRva2VuaXplciIsIm1xIiwibXEwIiwibXExIiwic3ViVG9rZW4iLCJleHRlbmREZWZhdWx0cyIsImV4dGVuZERlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsImV4dGVuZEFsaWFzZXMiLCJ1bm1hc2siLCJBTFQiLCJDQVBTX0xPQ0siLCJDT01NQSIsIkNPTU1BTkQiLCJDT01NQU5EX0xFRlQiLCJDT01NQU5EX1JJR0hUIiwiQ09OVFJPTCIsIkRPV04iLCJNRU5VIiwiTlVNUEFEX0FERCIsIk5VTVBBRF9ERUNJTUFMIiwiTlVNUEFEX0RJVklERSIsIk5VTVBBRF9FTlRFUiIsIk5VTVBBRF9NVUxUSVBMWSIsIk5VTVBBRF9TVUJUUkFDVCIsIlBFUklPRCIsIlNISUZUIiwiVVAiLCJXSU5ET1dTIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9pbnB1dG1hc2syIiwiX2lucHV0bWFzazQiLCJfanF1ZXJ5MiIsImhtciIsImxvY2FscyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsInN0cmluZ2lmeSIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsInN0eWxlc0luRG9tIiwicmVmcyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwicGFydCIsImluc2VydFN0eWxlRWxlbWVudCIsImdldEVsZW1lbnQiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJhZGRBdHRycyIsInNpbmdsZXRvbiIsInN0eWxlSW5kZXgiLCJzaW5nbGV0b25Db3VudGVyIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImZpeFVybHMiLCJibG9iIiwib2xkU3JjIiwic3R5bGVTaGVldCIsIm5ld09iaiIsInJlcGxhY2VUZXh0IiwiY3NzTm9kZSIsImlzT2xkSUUiLCJtZW1vIiwiYXRvYiIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZW1lbnQiLCJiYXNlVXJsIiwiY3VycmVudERpciIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIm5ld1VybCIsImRkL21tL3l5eXkiLCJ2YWwxcHJlIiwidmFsMSIsInZhbDJwcmUiLCJzZXBhcmF0b3IiLCJlc2NhcGVkU2VwYXJhdG9yIiwidmFsMiIsImxlYXBkYXkiLCJ5ZWFycmFuZ2UiLCJtaW55ZWFyIiwibWF4eWVhciIsImlzSW5ZZWFyUmFuZ2UiLCJlbnRlcmVkeWVhciIsImVudGVyZWR5ZWFyMiIsImRldGVybWluZWJhc2V5ZWFyIiwiaGludCIsImN1cnJlbnR5ZWFyIiwiZ2V0RnVsbFllYXIiLCJtYXhZZWFyUHJlZml4IiwibWF4WWVhclBvc3RmaXgiLCJtYXh4WWVhciIsImN1cnJlbnRZZWFyUHJlZml4IiwiY3VycmVudFllYXJBbmRIaW50IiwidG9kYXkiLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJnZXRGcm9udFZhbHVlIiwiY3VycmVudFJlc3VsdCIsImRheU1vbnRoVmFsdWUiLCJ5ZWFyIiwiYnVmZmVyU3RyIiwiMSIsInBjaHJzIiwiMiIsImZyb250VmFsdWUiLCJ5ZWFyUHJlZml4IiwibW0vZGQveXl5eSIsInl5eXkvbW0vZGQiLCJkZC5tbS55eXl5IiwiZGQtbW0teXl5eSIsIm1tLmRkLnl5eXkiLCJtbS1kZC15eXl5IiwieXl5eS5tbS5kZCIsInl5eXktbW0tZGQiLCJkYXRldGltZSIsImhyc3ByZSIsImhyczI0IiwiaHJzIiwiYW1wbSIsIm1zcHJlIiwibXMiLCJ0aW1lc2VwYXJhdG9yIiwiaG91ckZvcm1hdCIsImgiLCJkYXRldGltZTEyIiwibW0vZGQveXl5eSBoaDptbSB4bSIsImhoOm1tIHQiLCJoOnMgdCIsImhoOm1tOnNzIiwiaGg6bW0iLCJkYXRlIiwibW0veXl5eSIsInNoYW1zaSIsInl5eXktbW0tZGQgaGg6bW06c3MiLCJBIiwiIyIsImlwIiwibWFza2VkVmFsdWUiLCJlbWFpbCIsIi0iLCJtYWMiLCJ2aW4iLCJWIiwiYXV0b0VzY2FwZSIsInR4dCIsImVzY2FwZWRUeHQiLCJudW1lcmljIiwiaW50ZWdlckRpZ2l0cyIsImF1dG9Hcm91cCIsImdyb3VwU2l6ZSIsInNlcHMiLCJtb2QiLCJpbnRlZ2VyT3B0aW9uYWwiLCJkaWdpdHNPcHRpb25hbCIsImRpZ2l0cyIsImRlY2ltYWxQcm90ZWN0IiwiZHEiLCJlbmZvcmNlRGlnaXRzT25CbHVyIiwiYWxsb3dNaW51cyIsIm5lZ2F0aW9uU3ltYm9sIiwiZnJvbnQiLCJiYWNrIiwidW5tYXNrQXNOdW1iZXIiLCJpc05lZ2F0aXZlIiwiZG9wb3N0IiwiY2hhckF0UG9zIiwicHJvY2Vzc1ZhbHVlIiwicmFkaXhQb3NpdGlvbiIsInJwYiIsImFkZFJhZGl4IiwicG9zdE1hc2siLCJyYWRpeFNwbGl0IiwibmV3Q2FyZXRQb3MiLCJ1bm1hc2tlZCIsInBhcnNlTWluTWF4T3B0aW9ucyIsIk5hTiIsIk51bWJlciIsIk1JTl9WQUxVRSIsIk1BWF9WQUxVRSIsImludGVnZXJQYXJ0IiwiZW1wdHlDaGVjayIsImludGVnZXJOUGFydCIsInB2UmFkaXhTcGxpdCIsImJ1ZmZlclRlbXBsYXRlIiwiOiIsInJhZGl4IiwidnMiLCJrb21tYU1hdGNoZXMiLCJkb3RNYXRjaGVzIiwiZGVjUGFydCIsImRpZ2l0c0ZhY3RvciIsImNhbkNsZWFyIiwiY3VycmVuY3kiLCJkZWNpbWFsIiwiaW50ZWdlciIsInBlcmNlbnRhZ2UiLCJtYXNrU29ydCIsIm1hc2thIiwibWFza2IiLCJtYXNrYXMiLCJtYXNrYnMiLCJsb2NhbGVDb21wYXJlIiwiYW5hbHlzZU1hc2tCYXNlIiwicmVkdWNlVmFyaWF0aW9ucyIsIm1hc2tzIiwicHJldmlvdXNWYXJpYXRpb24iLCJwcmV2aW91c21hc2tHcm91cCIsIm1hc2tHcm91cHMiLCJ2YXJpYXRpb24iLCJtYXNrR3JvdXAiLCJyZWJ1aWxkIiwic3VibWFza3MiLCJwaG9uZUNvZGVzIiwiYWJzdHJhY3RwaG9uZSIsImNvdW50cnljb2RlIiwicHJvY2Vzc2VkVmFsdWUiLCJSZWdleCIsInJlZ2V4VG9rZW5zIiwicXVhbnRpZmllckZpbHRlciIsInIiLCJSZWdleFRva2VuIiwicmVwZWF0ZXJQYXJ0IiwidmFsaWRhdGVSZWdleFRva2VuIiwiZnJvbUdyb3VwIiwiaXN2YWxpZCIsInJlZ2V4UGFydCIsIm9wZW5Hcm91cENvdW50IiwibWF0Y2hUb2tlbiIsImNycm50bmR4IiwibWF0Y2hHcm91cCIsInJlZ2V4UGFydEJhayIsInFtIiwidGVzdEV4cCIsImV4cCIsInRsIiwiY2J1ZmZlciIsIm9wZW5ncm91cHMiLCJxdWFudGlmaWVyVG9rZW4iLCJyZWdleFRva2VuIiwibnB0bWFzayIsImZsYXRwaWNrciIsIl9fYXNzaWduIiwiYXNzaWduIiwiY29tcGFyZURhdGVzIiwiZGF0ZTEiLCJkYXRlMiIsInRpbWVsZXNzIiwic2V0SG91cnMiLCJtb250aFRvU3RyIiwibW9udGhOdW1iZXIiLCJzaG9ydGhhbmQiLCJsb2NhbGUiLCJtb250aHMiLCJEQVkiLCJfZGlzYWJsZSIsIl9lbmFibGUiLCJhbGxvd0lucHV0IiwiYWx0Rm9ybWF0IiwiYWx0SW5wdXQiLCJhbHRJbnB1dENsYXNzIiwiYXJpYURhdGVGb3JtYXQiLCJjbGlja09wZW5zIiwiY2xvc2VPblNlbGVjdCIsImNvbmp1bmN0aW9uIiwiZGF0ZUZvcm1hdCIsImRlZmF1bHRIb3VyIiwiZGVmYXVsdE1pbnV0ZSIsImRlZmF1bHRTZWNvbmRzIiwiZGlzYWJsZU1vYmlsZSIsImVuYWJsZSIsImVuYWJsZVNlY29uZHMiLCJlbmFibGVUaW1lIiwiZXJyb3JIYW5kbGVyIiwiZ2V0V2VlayIsImdpdmVuRGF0ZSIsIm9uZWphbiIsImdldERheSIsImhvdXJJbmNyZW1lbnQiLCJpZ25vcmVkRm9jdXNFbGVtZW50cyIsImlubGluZSIsIm1pbnV0ZUluY3JlbWVudCIsIm5leHRBcnJvdyIsIm5vQ2FsZW5kYXIiLCJvbkNoYW5nZSIsIm9uQ2xvc2UiLCJvbkRheUNyZWF0ZSIsIm9uRGVzdHJveSIsIm9uTW9udGhDaGFuZ2UiLCJvbk9wZW4iLCJvblBhcnNlQ29uZmlnIiwib25SZWFkeSIsIm9uVmFsdWVVcGRhdGUiLCJvblllYXJDaGFuZ2UiLCJwbHVnaW5zIiwicG9zaXRpb25FbGVtZW50IiwicHJldkFycm93Iiwic2hvcnRoYW5kQ3VycmVudE1vbnRoIiwic3RhdGljIiwidGltZV8yNGhyIiwid2Vla051bWJlcnMiLCJlbmdsaXNoIiwid2Vla2RheXMiLCJsb25naGFuZCIsImRheXNJbk1vbnRoIiwiZmlyc3REYXlPZldlZWsiLCJvcmRpbmFsIiwibnRoIiwicmFuZ2VTZXBhcmF0b3IiLCJ3ZWVrQWJicmV2aWF0aW9uIiwic2Nyb2xsVGl0bGUiLCJ0b2dnbGVUaXRsZSIsImFtUE0iLCJwYWQiLCJudW1iZXIiLCJpbnQiLCJkZWJvdW5jZSIsImltbWVkaWF0ZSIsImFycmF5aWZ5IiwiY2xhc3NMaXN0IiwiZmluZFBhcmVudCIsImNvbmRpdGlvbiIsImNyZWF0ZU51bWJlcklucHV0IiwiaW5wdXRDbGFzc05hbWUiLCJ3cmFwcGVyIiwibnVtSW5wdXQiLCJhcnJvd1VwIiwiYXJyb3dEb3duIiwiZG9fbm90aGluZyIsInJldkZvcm1hdCIsIkQiLCJGIiwiZGF0ZU9iaiIsIm1vbnRoTmFtZSIsInNldE1vbnRoIiwiRyIsImhvdXIiLCJIIiwiSiIsImRheSIsInNldERhdGUiLCJLIiwiZ2V0SG91cnMiLCJNIiwic2hvcnRNb250aCIsIlMiLCJzZWNvbmRzIiwic2V0U2Vjb25kcyIsIlUiLCJ1bml4U2Vjb25kcyIsIlciLCJ3ZWVrTnVtIiwid2Vla051bWJlciIsIlkiLCJzZXRGdWxsWWVhciIsIloiLCJJU09EYXRlIiwibWludXRlcyIsInNldE1pbnV0ZXMiLCJtb250aCIsInRva2VuUmVnZXgiLCJmb3JtYXRzIiwidG9JU09TdHJpbmciLCJnZXRTZWNvbmRzIiwiZ2V0TWludXRlcyIsIl9pIiwiX2EiLCJhcmdzXzEiLCJGbGF0cGlja3JJbnN0YW5jZSIsImluc3RhbmNlQ29uZmlnIiwicGFyc2VEYXRlIiwiZm9ybWF0RGF0ZSIsImZybXQiLCJjb25maWciLCJsMTBuIiwiX2FuaW1hdGlvbkxvb3AiLCJfaGFuZGxlcnMiLCJfYmluZCIsIl9zZXRIb3Vyc0Zyb21EYXRlIiwic2V0SG91cnNGcm9tRGF0ZSIsImNoYW5nZU1vbnRoIiwiY2hhbmdlWWVhciIsInRyaWdnZXJDaGFuZ2VFdmVudCIsIm1vYmlsZUlucHV0Iiwic2VsZWN0ZWREYXRlcyIsImxhdGVzdFNlbGVjdGVkRGF0ZU9iaiIsInNob3dUaW1lSW5wdXQiLCJyZWRyYXciLCJ0cmlnZ2VyRXZlbnQiLCJpc09wZW4iLCJjYWxlbmRhckNvbnRhaW5lciIsIl9pbnB1dCIsIl9jcmVhdGVFbGVtZW50IiwiX3R5cGUiLCJpc0VuYWJsZWQiLCJqdW1wVG9EYXRlIiwid2FzT3BlbiIsInBvc2l0aW9uQ2FsZW5kYXIiLCJ0cmlnZ2VyQ2hhbmdlIiwic2V0U2VsZWN0ZWREYXRlIiwidXBkYXRlVmFsdWUiLCJiaW5kVG9JbnN0YW5jZSIsInVwZGF0ZVRpbWUiLCJtaW5EYXRlIiwic2V0SG91cnNGcm9tSW5wdXRzIiwiaXNLZXlEb3duIiwiZGVsdGEiLCJ3aGVlbERlbHRhIiwiZGVsdGFZIiwibmV3VmFsdWUiLCJpc0hvdXJFbGVtIiwiaG91ckVsZW1lbnQiLCJpc01pbnV0ZUVsZW0iLCJtaW51dGVFbGVtZW50IiwiaW5jcmVtZW50TnVtSW5wdXQiLCJ0aW1lV3JhcHBlciIsIm1pbkRhdGVIYXNUaW1lIiwiaG91cnMiLCJzZWNvbmRFbGVtZW50IiwibWF4RGF0ZSIsIm1heERhdGVIYXNUaW1lIiwib25ZZWFySW5wdXQiLCJjdXJyZW50WWVhckVsZW1lbnQiLCJvbkNsaWNrIiwicHJvY2Vzc1Bvc3REYXlBbmltYXRpb24iLCJhbmltYXRlRGF5cyIsImRheXNDb250YWluZXIiLCJhbmltYXRpb25OYW1lIiwiZGF5cyIsImFuaW1hdGVNb250aHMiLCJuYXZpZ2F0aW9uQ3VycmVudE1vbnRoIiwibmF2IiwibW9udGhOYXYiLCJwcmV2aW91c1NpYmxpbmciLCJvbGRDdXJNb250aCIsImp1bXBEYXRlIiwiY3VycmVudFllYXIiLCJjdXJyZW50TW9udGgiLCJ0aW1lSW5jcmVtZW50IiwiaW5wdXRFbGVtIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiY3JlYXRlRGF5IiwiZGF5TnVtYmVyIiwiZGF0ZUlzRW5hYmxlZCIsImRheUVsZW1lbnQiLCIkaSIsInRvZGF5RGF0ZUVsZW0iLCJpc0RhdGVTZWxlY3RlZCIsInNlbGVjdGVkRGF0ZUVsZW0iLCJtaW5SYW5nZURhdGUiLCJtYXhSYW5nZURhdGUiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJmb2N1c09uRGF5IiwibmV3SW5kZXgiLCJ0YXJnZXROb2RlIiwib25Nb3VzZU92ZXIiLCJhZnRlckRheUFuaW0iLCJidWlsZERheXMiLCJmaXJzdE9mTW9udGgiLCJpc1JhbmdlTW9kZSIsInByZXZNb250aERheXMiLCJ1dGlscyIsImdldERheXNJbk1vbnRoIiwiZGF5SW5kZXgiLCJkYXlOdW0iLCJfaGlkZVByZXZNb250aEFycm93IiwiX2hpZGVOZXh0TW9udGhBcnJvdyIsInVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgiLCJkYXlDb250YWluZXIiLCJjbGVhck5vZGUiLCJidWlsZFdlZWtkYXlzIiwid2Vla2RheUNvbnRhaW5lciIsImlzX29mZnNldCIsImZyb21fa2V5Ym9hcmQiLCJjdXJyZW50TW9udGhFbGVtZW50IiwiaW5kZXhfMSIsImlzQ2FsZW5kYXJFbGVtIiwiZG9jdW1lbnRDbGljayIsImlzQ2FsZW5kYXJFbGVtZW50IiwiaXNJbnB1dCIsInBhdGgiLCJuZXdZZWFyIiwibmV3WWVhck51bSIsImlzTmV3WWVhciIsImRhdGVUb0NoZWNrIiwiYXJyYXkiLCJmcm9tIiwiY2FsZW5kYXJFbGVtIiwiYWxsb3dLZXlkb3duIiwiYWxsb3dJbmxpbmVLZXlkb3duIiwiaXNUaW1lT2JqIiwidGltZUNvbnRhaW5lciIsInNlbGVjdERhdGUiLCJkZWx0YV8xIiwiX2RlYm91bmNlZENoYW5nZSIsImhvdmVyRGF0ZSIsImluaXRpYWxEYXRlIiwicmFuZ2VTdGFydERhdGUiLCJyYW5nZUVuZERhdGUiLCJjb250YWluc0Rpc2FibGVkIiwiX2xvb3BfMSIsInRpbWVzdGFtcCIsIm91dE9mUmFuZ2UiLCJkYXlFbGVtIiwib25SZXNpemUiLCJtaW5NYXhEYXRlU2V0dGVyIiwiaW52ZXJzZURhdGVPYmoiLCJfcG9zaXRpb25FbGVtZW50IiwiY2FsZW5kYXJIZWlnaHQiLCJjYWxlbmRhcldpZHRoIiwiY29uZmlnUG9zIiwiaW5wdXRCb3VuZHMiLCJkaXN0YW5jZUZyb21Cb3R0b20iLCJzaG93T25Ub3AiLCJyaWdodE1vc3QiLCJzZWxlY3RlZERhdGUiLCJzaG91bGRDaGFuZ2VNb250aCIsInNpbmdsZSIsImlucHV0RGF0ZSIsImRhdGVzIiwicGFyc2VEYXRlUnVsZXMiLCJydWxlIiwiZ2l2ZW5Gb3JtYXQiLCJwYXJzZWREYXRlIiwiZGF0ZV9vcmlnIiwidG9GaXhlZCIsImRlZmF1bHRDb25maWciLCJkYXRlc3RyIiwib3BzIiwibWF0Y2hJbmRleCIsInJlZ2V4U3RyIiwiaXNCYWNrU2xhc2giLCJpbml0RXZlbnQiLCJtb2JpbGVGb3JtYXRTdHIiLCJqb2luQ2hhciIsImRPYmoiLCJvbk1vbnRoTmF2U2Nyb2xsIiwiaXNZZWFyIiwib25Nb250aE5hdkNsaWNrIiwiaXNQcmV2TW9udGgiLCJwcmV2TW9udGhOYXYiLCJpc05leHRNb250aCIsIm5leHRNb250aE5hdiIsImJvb2xPcHRzIiwidXNlckNvbmZpZyIsImRhdGFzZXQiLCJmb3JtYXRzJCQxIiwiX21pbkRhdGUiLCJfbWF4RGF0ZSIsInBsdWdpbkNvbmYiLCJwYXJzZUNvbmZpZyIsImwxMG5zIiwicmVxdWlyZWQiLCJwcmVsb2FkZWREYXRlIiwiZGVmYXVsdERhdGUiLCJfc2hvd1RpbWVJbnB1dCIsInNldHVwRGF0ZXMiLCJ5ciIsIm1vbnRoTmF2RnJhZ21lbnQiLCJ5ZWFySW5wdXQiLCJfX2hpZGVQcmV2TW9udGhBcnJvdyIsIl9faGlkZU5leHRNb250aEFycm93IiwiYnVpbGRNb250aE5hdiIsImlubmVyQ29udGFpbmVyIiwid2Vla1dyYXBwZXIiLCJidWlsZFdlZWtzIiwickNvbnRhaW5lciIsImhvdXJJbnB1dCIsIm1pbnV0ZUlucHV0IiwibWlsaXRhcnkyYW1wbSIsInNlY29uZElucHV0IiwiYnVpbGRUaW1lIiwiY3VzdG9tQXBwZW5kIiwiYnVpbGQiLCJpbnB1dFR5cGUiLCJzZXR1cE1vYmlsZSIsImRlYm91bmNlZFJlc2l6ZSIsImJpbmRFdmVudHMiLCJfZmxhdHBpY2tyIiwibm9kZUxpc3QiLCJpbnN0YW5jZXMiLCJIVE1MRWxlbWVudCIsIkhUTUxDb2xsZWN0aW9uIiwiTm9kZUxpc3QiLCJsb2NhbGl6ZSIsInNldERlZmF1bHRzIiwiZnBfaW5jciIsInJ1IiwiZnAiLCJSdXNzaWFuIiwidGlwcHkiLCJpc0Jyb3dzZXIiLCJicm93c2VyIiwic3VwcG9ydGVkIiwic3VwcG9ydHNUb3VjaCIsInVzaW5nVG91Y2giLCJkeW5hbWljSW5wdXREZXRlY3Rpb24iLCJpT1MiLCJwbGF0Zm9ybSIsIm9uVXNlcklucHV0Q2hhbmdlIiwiX2V2ZW50TGlzdGVuZXJzQm91bmQiLCJQT1BQRVIiLCJUT09MVElQIiwiQ09OVEVOVCIsIkJBQ0tEUk9QIiwiQVJST1ciLCJST1VORF9BUlJPVyIsIlJFRkVSRU5DRSIsInBsYWNlbWVudCIsImFuaW1hdGVGaWxsIiwiYXJyb3ciLCJpbnRlcmFjdGl2ZSIsImludGVyYWN0aXZlQm9yZGVyIiwidGhlbWUiLCJzaXplIiwiaGlkZU9uQ2xpY2siLCJtdWx0aXBsZSIsImZvbGxvd0N1cnNvciIsImluZXJ0aWEiLCJ1cGRhdGVEdXJhdGlvbiIsInN0aWNreSIsInRvdWNoSG9sZCIsInBlcmZvcm1hbmNlIiwiZHluYW1pY1RpdGxlIiwiZmxpcCIsImZsaXBCZWhhdmlvciIsImFycm93VHlwZSIsImFycm93VHJhbnNmb3JtIiwicG9wcGVyT3B0aW9ucyIsImNyZWF0ZVBvcHBlckluc3RhbmNlT25Jbml0Iiwib25TaG93Iiwib25TaG93biIsIm9uSGlkZSIsIm9uSGlkZGVuIiwiZGVmYXVsdHNLZXlzIiwiaXNPYmplY3RMaXRlcmFsIiwicHJlZml4ZXMiLCJ1cHBlclByb3AiLCJfcHJlZml4IiwicHJlZml4ZWRQcm9wIiwiY2xhc3NDYWxsQ2hlY2siLCJDb25zdHJ1Y3RvciIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZXh0ZW5kcyIsImdldElubmVyRWxlbWVudHMiLCJwb3BwZXIiLCJ0b29sdGlwIiwiYmFja2Ryb3AiLCJyZW1vdmVUaXRsZSIsImlzQnJvd3NlciQxIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidGltZW91dER1cmF0aW9uIiwiUHJvbWlzZSIsInNjaGVkdWxlZCIsImZ1bmN0aW9uVG9DaGVjayIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsImdldFBhcmVudE5vZGUiLCJnZXRTY3JvbGxQYXJlbnQiLCJfZ2V0U3R5bGVDb21wdXRlZFByb3AiLCJnZXRPZmZzZXRQYXJlbnQiLCJnZXRSb290IiwiZmluZENvbW1vbk9mZnNldFBhcmVudCIsImVsZW1lbnQxIiwiZWxlbWVudDIiLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwiaXNPZmZzZXRDb250YWluZXIiLCJlbGVtZW50MXJvb3QiLCJnZXRTY3JvbGwiLCJ1cHBlclNpZGUiLCJzY3JvbGxpbmdFbGVtZW50IiwiZ2V0Qm9yZGVyc1NpemUiLCJzaWRlQSIsInNpZGVCIiwiaXNJRTEwIiwiaXNJRTEwJDEiLCJhcHBWZXJzaW9uIiwiZ2V0U2l6ZSIsImdldFdpbmRvd1NpemVzIiwiY2xhc3NDYWxsQ2hlY2skMSIsImNyZWF0ZUNsYXNzJDEiLCJkZWZpbmVQcm9wZXJ0eSQxIiwiX2V4dGVuZHMkMSIsImdldENsaWVudFJlY3QiLCJvZmZzZXRzIiwic2l6ZXMiLCJob3JpelNjcm9sbGJhciIsInZlcnRTY3JvbGxiYXIiLCJnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUiLCJpc0hUTUwiLCJjaGlsZHJlblJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImlzRml4ZWQiLCJnZXRCb3VuZGFyaWVzIiwicmVmZXJlbmNlIiwiYm91bmRhcmllc0VsZW1lbnQiLCJib3VuZGFyaWVzIiwicmVsYXRpdmVPZmZzZXQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJib3VuZGFyaWVzTm9kZSIsIl9nZXRXaW5kb3dTaXplcyIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwicmVmUmVjdCIsInJlY3RzIiwic29ydGVkQXJlYXMiLCJhcmVhIiwiX3JlZiIsImZpbHRlcmVkQXJlYXMiLCJfcmVmMiIsImNvbXB1dGVkUGxhY2VtZW50IiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsImdldE91dGVyU2l6ZXMiLCJtYXJnaW5Cb3R0b20iLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsImdldFBvcHBlck9mZnNldHMiLCJyZWZlcmVuY2VPZmZzZXRzIiwicG9wcGVyUmVjdCIsInBvcHBlck9mZnNldHMiLCJpc0hvcml6IiwibWFpblNpZGUiLCJzZWNvbmRhcnlTaWRlIiwibWVhc3VyZW1lbnQiLCJzZWNvbmRhcnlNZWFzdXJlbWVudCIsInJ1bk1vZGlmaWVycyIsIm1vZGlmaWVycyIsImVuZHMiLCJmaW5kSW5kZXgiLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsInNvbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJ0b0NoZWNrIiwiZ2V0V2luZG93IiwiYXR0YWNoVG9TY3JvbGxQYXJlbnRzIiwic2Nyb2xsUGFyZW50cyIsImlzQm9keSIsInBhc3NpdmUiLCJlbmFibGVFdmVudExpc3RlbmVycyIsImV2ZW50c0VuYWJsZWQiLCJ1cGRhdGVCb3VuZCIsInNjcm9sbEVsZW1lbnQiLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwic2NoZWR1bGVVcGRhdGUiLCJkaXNhYmxlRXZlbnRMaXN0ZW5lcnMiLCJzZXRTdHlsZXMiLCJpc01vZGlmaWVyUmVxdWlyZWQiLCJyZXF1ZXN0aW5nTmFtZSIsInJlcXVlc3RlZE5hbWUiLCJyZXF1ZXN0aW5nIiwiaXNSZXF1aXJlZCIsIl9yZXF1ZXN0aW5nIiwicmVxdWVzdGVkIiwicGxhY2VtZW50cyIsInZhbGlkUGxhY2VtZW50cyIsImNsb2Nrd2lzZSIsIkJFSEFWSU9SUyIsIkZMSVAiLCJDTE9DS1dJU0UiLCJDT1VOVEVSQ0xPQ0tXSVNFIiwicGFyc2VPZmZzZXQiLCJiYXNlUGxhY2VtZW50IiwidXNlSGVpZ2h0IiwiZnJhZ21lbnRzIiwiZnJhZyIsImRpdmlkZXIiLCJzcGxpdFJlZ2V4Iiwib3AiLCJtZXJnZVdpdGhQcmV2aW91cyIsInJlZHVjZSIsInRvVmFsdWUiLCJpbmRleDIiLCJEZWZhdWx0cyIsInJlbW92ZU9uRGVzdHJveSIsIm9uQ3JlYXRlIiwib25VcGRhdGUiLCJzaGlmdHZhcmlhdGlvbiIsIl9kYXRhJG9mZnNldHMiLCJpc1ZlcnRpY2FsIiwic2lkZSIsInNoaWZ0T2Zmc2V0cyIsInByZXZlbnRPdmVyZmxvdyIsInByaW9yaXR5IiwicHJpbWFyeSIsImVzY2FwZVdpdGhSZWZlcmVuY2UiLCJzZWNvbmRhcnkiLCJrZWVwVG9nZXRoZXIiLCJvcFNpZGUiLCJfZGF0YSRvZmZzZXRzJGFycm93IiwiYXJyb3dFbGVtZW50Iiwic2lkZUNhcGl0YWxpemVkIiwiYWx0U2lkZSIsImFycm93RWxlbWVudFNpemUiLCJjZW50ZXIiLCJwb3BwZXJNYXJnaW5TaWRlIiwicG9wcGVyQm9yZGVyU2lkZSIsInNpZGVWYWx1ZSIsImZsaXBwZWQiLCJvcmlnaW5hbFBsYWNlbWVudCIsInBsYWNlbWVudE9wcG9zaXRlIiwiZmxpcE9yZGVyIiwiYmVoYXZpb3IiLCJyZWZPZmZzZXRzIiwib3ZlcmxhcHNSZWYiLCJvdmVyZmxvd3NMZWZ0Iiwib3ZlcmZsb3dzUmlnaHQiLCJvdmVyZmxvd3NUb3AiLCJvdmVyZmxvd3NCb3R0b20iLCJvdmVyZmxvd3NCb3VuZGFyaWVzIiwiZmxpcHBlZFZhcmlhdGlvbiIsImZsaXBWYXJpYXRpb25zIiwiaW5uZXIiLCJzdWJ0cmFjdExlbmd0aCIsImJvdW5kIiwiY29tcHV0ZVN0eWxlIiwibGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIiwiZ3B1QWNjZWxlcmF0aW9uIiwib2Zmc2V0UGFyZW50UmVjdCIsInByZWZpeGVkUHJvcGVydHkiLCJ3aWxsQ2hhbmdlIiwiaW52ZXJ0VG9wIiwiaW52ZXJ0TGVmdCIsIngtcGxhY2VtZW50IiwiYXJyb3dTdHlsZXMiLCJhcHBseVN0eWxlIiwib25Mb2FkIiwibW9kaWZpZXJPcHRpb25zIiwiUG9wcGVyIiwiX3RoaXMiLCJpc0Rlc3Ryb3llZCIsImlzQ3JlYXRlZCIsIlV0aWxzIiwiUG9wcGVyVXRpbHMiLCJnZXRQb3BwZXJQbGFjZW1lbnQiLCJ0cmFuc2Zvcm1OdW1iZXJzQmFzZWRPblBsYWNlbWVudEF4aXMiLCJudW1iZXJzIiwiaXNSZXZlcnNlIiwidHJhbnNmb3JtQXhpcyIsImNvbXB1dGVBcnJvd1RyYW5zZm9ybSIsImdldEF4aXMiLCJyZSIsImdldE51bWJlcnMiLCJjb21wdXRlZFRyYW5zZm9ybSIsImdldE9mZnNldERpc3RhbmNlSW5QeCIsIkVsZW1lbnQiLCJtYXRjaGVzJDEiLCJwYXJlbnRTZWxlY3RvciIsImdldER1cmF0aW9uIiwic2V0VmlzaWJpbGl0eVN0YXRlIiwiYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24iLCJUIiwic3RvcmUiLCJfZW50ZXIiLCJfdGhpczQiLCJfY2xlYXJEZWxheVRpbWVvdXRzIiwiaXNQcmVwYXJpbmdUb1Nob3ciLCJmb2xsb3dDdXJzb3JMaXN0ZW5lciIsIl90aGlzOSIsImxhc3RUcmlnZ2VyRXZlbnQiLCJsYXN0TW91c2VNb3ZlRXZlbnQiLCJwYWdlV2lkdGgiLCJoYWxmUG9wcGVyV2lkdGgiLCJoYWxmUG9wcGVySGVpZ2h0IiwiaXNSaWdodE92ZXJmbG93aW5nIiwiaXNMZWZ0T3ZlcmZsb3dpbmciLCJzaG93VGltZW91dCIsIl9sZWF2ZSIsIl90aGlzNSIsImhpZGVUaW1lb3V0IiwiX2NyZWF0ZVBvcHBlckluc3RhbmNlIiwiX3RoaXM3IiwiYXJyb3dTZWxlY3RvciIsIl9hZGRNdXRhdGlvbk9ic2VydmVyIiwiX29uVXBkYXRlIiwicG9wcGVySW5zdGFuY2UiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY2hhcmFjdGVyRGF0YSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlciIsIm9ic2VydmUiLCJtdXRhdGlvbk9ic2VydmVycyIsIl9vblRyYW5zaXRpb25FbmQiLCJ0b2dnbGVMaXN0ZW5lcnMiLCJsaXN0ZW5lciIsInRyYW5zaXRpb25lbmRMaXN0ZW5lciIsIlRpcHB5IiwiX2tleSIsImRlc3Ryb3llZCIsIl9nZXRJbm5lckVsZW1lbnRzIiwicmVmT2JqIiwiX3RoaXM4IiwiX29uQ3JlYXRlIiwiX3RoaXMxMCIsInVwZGF0ZVBvc2l0aW9uIiwiX3RoaXMyIiwiX2dldElubmVyRWxlbWVudHMyIiwiZWxlbWVudElzSW5WaWV3cG9ydCIsIl90aGlzMyIsImxpc3RlbmVycyIsIl90aXBweSIsImRpc2Nvbm5lY3QiLCJfZ2V0RXZlbnRMaXN0ZW5lcnMiLCJfdGhpczYiLCJoYW5kbGVUcmlnZ2VyIiwic2hvdWxkU3RvcEV2ZW50IiwiaGFuZGxlTW91c2VsZWF2ZSIsImhhbmRsZU1vdXNlbW92ZSIsInJlZmVyZW5jZUN1cnNvcklzT3ZlciIsImN1cnNvcklzT3ZlclBvcHBlciIsImN1cnNvcklzT3ZlclJlZmVyZW5jZSIsImJvcmRlcldpdGhEaXN0YW5jZSIsImV4Y2VlZHMiLCJjdXJzb3JJc091dHNpZGVJbnRlcmFjdGl2ZUJvcmRlciIsImhhbmRsZUJsdXIiLCJpZENvdW50ZXIiLCJjcmVhdGVUb29sdGlwcyIsImFjYyIsImluc3RhbmNlT3B0aW9ucyIsImdldEluZGl2aWR1YWxPcHRpb25zIiwiX2Fycm93IiwiY2lyY2xlIiwidGVtcGxhdGVJZCIsImNyZWF0ZVBvcHBlckVsZW1lbnQiLCJldmVudFR5cGUiLCJjcmVhdGVUcmlnZ2VyIiwiX3JlZmVyZW5jZSIsImhpZGVBbGxQb3BwZXJzIiwiZXhjbHVkZVRpcHB5IiwidGlwcHkkMiIsInRvdWNoSGFuZGxlciIsIm1vdXNlbW92ZUhhbmRsZXIiLCJtYXhUb3VjaFBvaW50cyIsIm1zTWF4VG91Y2hQb2ludHMiLCJiaW5kRXZlbnRMaXN0ZW5lcnMiLCJ0b29sdGlwcyIsImdldEFycmF5T2ZFbGVtZW50cyIsImRlc3Ryb3lBbGwiLCJzaG93RGVmYXVsdFN0YXRlIiwicm93Iiwic2hvd0RhdGVTdGF0ZSIsInByb2NlZHVyZSIsIl90b2tlbiIsIm5leHREYXRlIiwiYWx0T3B0aW9ucyIsImhlYWRlclNsaWRlciIsInJlc2l6ZSIsImhlYWRlclNsaWRlckFib3V0IiwibG9nb3R5cGVzU2xpZGVyIiwicmVjb21tZW5kYXRpb25UaW1lb3V0IiwiaGlkZUV2ZW50IiwiY2xvc2VzdEVsIiwiaGlkZUZ1bmMiLCJvZmZjYW52YXNPdmVybGF5Iiwib2ZmY2FudmFzIiwidG9nZ2xlciIsInRvZ2dsZVRhcmdldCIsInRvZ2dsZUdyb3VwIiwidG9nZ2xlU2VsZkRlYWN0aXZlIiwidGFyZ2V0Q2xhc3MiXSwibWFwcGluZ3MiOiJDQWFBLFNBQUFBLEVBQUFDLEdBRUEsYUFFQSxpQkFBQUMsUUFBQSxpQkFBQUEsT0FBQUMsUUFTQUQsT0FBQUMsUUFBQUgsRUFBQUksU0FDQUgsRUFBQUQsR0FBQSxHQUNBLFNBQUFLLEdBQ0EsSUFBQUEsRUFBQUQsU0FDQSxNQUFBLElBQUFFLE1BQUEsNENBRUEsT0FBQUwsRUFBQUksSUFHQUosRUFBQUQsR0F0QkEsQ0EwQkEsb0JBQUFPLE9BQUFBLE9BQUFDLEtBQUEsU0FBQUQsRUFBQUUsR0FNQSxhQUVBLElBQUFDLEtBRUFOLEVBQUFHLEVBQUFILFNBRUFPLEVBQUFDLE9BQUFDLGVBRUFDLEVBQUFKLEVBQUFJLE1BRUFDLEVBQUFMLEVBQUFLLE9BRUFDLEVBQUFOLEVBQUFNLEtBRUFDLEVBQUFQLEVBQUFPLFFBRUFDLEtBRUFDLEVBQUFELEVBQUFDLFNBRUFDLEVBQUFGLEVBQUFHLGVBRUFDLEVBQUFGLEVBQUFELFNBRUFJLEVBQUFELEVBQUFFLEtBQUFaLFFBRUFhLEtBSUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FHQSxJQUFBQyxHQUZBRCxFQUFBQSxHQUFBeEIsR0FFQTBCLGNBQUEsVUFFQUQsRUFBQUUsS0FBQUosRUFDQUMsRUFBQUksS0FBQUMsWUFBQUosR0FBQUssV0FBQUMsWUFBQU4sR0FRQSxJQUlBTyxFQUFBLFNBQUFDLEVBQUFDLEdBSUEsT0FBQSxJQUFBRixFQUFBRyxHQUFBQyxLQUFBSCxFQUFBQyxJQUtBRyxFQUFBLHFDQUdBQyxFQUFBLFFBQ0FDLEVBQUEsWUFHQUMsRUFBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFBLEVBQUFDLGVBR0FYLEVBQUFHLEdBQUFILEVBQUFZLFdBR0FDLE9BMUJBLFFBNEJBQyxZQUFBZCxFQUdBZSxPQUFBLEVBRUFDLFFBQUEsV0FDQSxPQUFBdEMsRUFBQVUsS0FBQWhCLE9BS0E2QyxJQUFBLFNBQUFDLEdBR0EsT0FBQSxNQUFBQSxFQUNBeEMsRUFBQVUsS0FBQWhCLE1BSUE4QyxFQUFBLEVBQUE5QyxLQUFBOEMsRUFBQTlDLEtBQUEyQyxRQUFBM0MsS0FBQThDLElBS0FDLFVBQUEsU0FBQUMsR0FHQSxJQUFBQyxFQUFBckIsRUFBQXNCLE1BQUFsRCxLQUFBMEMsY0FBQU0sR0FNQSxPQUhBQyxFQUFBRSxXQUFBbkQsS0FHQWlELEdBSUFHLEtBQUEsU0FBQUMsR0FDQSxPQUFBekIsRUFBQXdCLEtBQUFwRCxLQUFBcUQsSUFHQUMsSUFBQSxTQUFBRCxHQUNBLE9BQUFyRCxLQUFBK0MsVUFBQW5CLEVBQUEwQixJQUFBdEQsS0FBQSxTQUFBdUQsRUFBQUMsR0FDQSxPQUFBSCxFQUFBckMsS0FBQXVDLEVBQUFDLEVBQUFELE9BSUFqRCxNQUFBLFdBQ0EsT0FBQU4sS0FBQStDLFVBQUF6QyxFQUFBbUQsTUFBQXpELEtBQUEwRCxhQUdBQyxNQUFBLFdBQ0EsT0FBQTNELEtBQUE0RCxHQUFBLElBR0FDLEtBQUEsV0FDQSxPQUFBN0QsS0FBQTRELElBQUEsSUFHQUEsR0FBQSxTQUFBSixHQUNBLElBQUFNLEVBQUE5RCxLQUFBMkMsT0FDQW9CLEdBQUFQLEdBQUFBLEVBQUEsRUFBQU0sRUFBQSxHQUNBLE9BQUE5RCxLQUFBK0MsVUFBQWdCLEdBQUEsR0FBQUEsRUFBQUQsR0FBQTlELEtBQUErRCxTQUdBQyxJQUFBLFdBQ0EsT0FBQWhFLEtBQUFtRCxZQUFBbkQsS0FBQTBDLGVBS0FsQyxLQUFBQSxFQUNBeUQsS0FBQS9ELEVBQUErRCxLQUNBQyxPQUFBaEUsRUFBQWdFLFFBR0F0QyxFQUFBdUMsT0FBQXZDLEVBQUFHLEdBQUFvQyxPQUFBLFdBQ0EsSUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFDQUMsRUFBQWhCLFVBQUEsT0FDQUYsRUFBQSxFQUNBYixFQUFBZSxVQUFBZixPQUNBZ0MsR0FBQSxFQXNCQSxJQW5CQSxrQkFBQUQsSUFDQUMsRUFBQUQsRUFHQUEsRUFBQWhCLFVBQUFGLE9BQ0FBLEtBSUEsaUJBQUFrQixHQUFBOUMsRUFBQWdELFdBQUFGLEtBQ0FBLE1BSUFsQixJQUFBYixJQUNBK0IsRUFBQTFFLEtBQ0F3RCxLQUdBQSxFQUFBYixFQUFBYSxJQUdBLEdBQUEsT0FBQVksRUFBQVYsVUFBQUYsSUFHQSxJQUFBYSxLQUFBRCxFQUNBRSxFQUFBSSxFQUFBTCxHQUlBSyxLQUhBSCxFQUFBSCxFQUFBQyxNQVFBTSxHQUFBSixJQUFBM0MsRUFBQWlELGNBQUFOLEtBQ0FDLEVBQUFNLE1BQUFDLFFBQUFSLE1BRUFDLEdBQ0FBLEdBQUEsRUFDQUMsRUFBQUgsR0FBQVEsTUFBQUMsUUFBQVQsR0FBQUEsTUFHQUcsRUFBQUgsR0FBQTFDLEVBQUFpRCxjQUFBUCxHQUFBQSxLQUlBSSxFQUFBTCxHQUFBekMsRUFBQXVDLE9BQUFRLEVBQUFGLEVBQUFGLFNBR0FTLElBQUFULElBQ0FHLEVBQUFMLEdBQUFFLElBT0EsT0FBQUcsR0FHQTlDLEVBQUF1QyxRQUdBYyxRQUFBLFVBaExBLFFBZ0xBQyxLQUFBQyxVQUFBQyxRQUFBLE1BQUEsSUFHQUMsU0FBQSxFQUVBQyxNQUFBLFNBQUFDLEdBQ0EsTUFBQSxJQUFBekYsTUFBQXlGLElBR0FDLEtBQUEsYUFFQVosV0FBQSxTQUFBYSxHQUNBLE1BQUEsYUFBQTdELEVBQUE4RCxLQUFBRCxJQUdBRSxTQUFBLFNBQUFGLEdBQ0EsT0FBQSxNQUFBQSxHQUFBQSxJQUFBQSxFQUFBMUYsUUFHQTZGLFVBQUEsU0FBQUgsR0FLQSxJQUFBQyxFQUFBOUQsRUFBQThELEtBQUFELEdBQ0EsT0FBQSxXQUFBQyxHQUFBLFdBQUFBLEtBS0FHLE1BQUFKLEVBQUFLLFdBQUFMLEtBR0FaLGNBQUEsU0FBQVksR0FDQSxJQUFBTSxFQUFBQyxFQUlBLFNBQUFQLEdBQUEsb0JBQUE5RSxFQUFBSyxLQUFBeUUsUUFJQU0sRUFBQTVGLEVBQUFzRixLQVNBLG1CQURBTyxFQUFBcEYsRUFBQUksS0FBQStFLEVBQUEsZ0JBQUFBLEVBQUFyRCxjQUNBNUIsRUFBQUUsS0FBQWdGLEtBQUFqRixJQUdBa0YsY0FBQSxTQUFBUixHQUlBLElBQUFwQixFQUVBLElBQUFBLEtBQUFvQixFQUNBLE9BQUEsRUFFQSxPQUFBLEdBR0FDLEtBQUEsU0FBQUQsR0FDQSxPQUFBLE1BQUFBLEVBQ0FBLEVBQUEsR0FJQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFDQS9FLEVBQUFDLEVBQUFLLEtBQUF5RSxLQUFBLGdCQUNBQSxHQUlBUyxXQUFBLFNBQUEvRSxHQUNBRCxFQUFBQyxJQU1BZ0YsVUFBQSxTQUFBQyxHQUNBLE9BQUFBLEVBQUFoQixRQUFBbEQsRUFBQSxPQUFBa0QsUUFBQWpELEVBQUFDLElBR0FnQixLQUFBLFNBQUFxQyxFQUFBcEMsR0FDQSxJQUFBVixFQUFBYSxFQUFBLEVBRUEsR0FBQTZDLEVBQUFaLEdBRUEsSUFEQTlDLEVBQUE4QyxFQUFBOUMsT0FDQWEsRUFBQWIsSUFDQSxJQUFBVSxFQUFBckMsS0FBQXlFLEVBQUFqQyxHQUFBQSxFQUFBaUMsRUFBQWpDLElBREFBLFVBTUEsSUFBQUEsS0FBQWlDLEVBQ0EsSUFBQSxJQUFBcEMsRUFBQXJDLEtBQUF5RSxFQUFBakMsR0FBQUEsRUFBQWlDLEVBQUFqQyxJQUNBLE1BS0EsT0FBQWlDLEdBSUFhLEtBQUEsU0FBQS9FLEdBQ0EsT0FBQSxNQUFBQSxFQUNBLElBQ0FBLEVBQUEsSUFBQTZELFFBQUFuRCxFQUFBLEtBSUFzRSxVQUFBLFNBQUFyRyxFQUFBc0csR0FDQSxJQUFBdkQsRUFBQXVELE1BYUEsT0FYQSxNQUFBdEcsSUFDQW1HLEVBQUFqRyxPQUFBRixJQUNBMEIsRUFBQXNCLE1BQUFELEVBQ0EsaUJBQUEvQyxHQUNBQSxHQUFBQSxHQUdBTSxFQUFBUSxLQUFBaUMsRUFBQS9DLElBSUErQyxHQUdBd0QsUUFBQSxTQUFBbEQsRUFBQXJELEVBQUFzRCxHQUNBLE9BQUEsTUFBQXRELEdBQUEsRUFBQU8sRUFBQU8sS0FBQWQsRUFBQXFELEVBQUFDLElBS0FOLE1BQUEsU0FBQVMsRUFBQStDLEdBS0EsSUFKQSxJQUFBNUMsR0FBQTRDLEVBQUEvRCxPQUNBb0IsRUFBQSxFQUNBUCxFQUFBRyxFQUFBaEIsT0FFQW9CLEVBQUFELEVBQUFDLElBQ0FKLEVBQUFILEtBQUFrRCxFQUFBM0MsR0FLQSxPQUZBSixFQUFBaEIsT0FBQWEsRUFFQUcsR0FHQWdELEtBQUEsU0FBQTNELEVBQUFLLEVBQUF1RCxHQVNBLElBUkEsSUFDQUMsS0FDQXJELEVBQUEsRUFDQWIsRUFBQUssRUFBQUwsT0FDQW1FLEdBQUFGLEVBSUFwRCxFQUFBYixFQUFBYSxLQUNBSCxFQUFBTCxFQUFBUSxHQUFBQSxLQUNBc0QsR0FDQUQsRUFBQXJHLEtBQUF3QyxFQUFBUSxJQUlBLE9BQUFxRCxHQUlBdkQsSUFBQSxTQUFBTixFQUFBSyxFQUFBMEQsR0FDQSxJQUFBcEUsRUFBQXFFLEVBQ0F4RCxFQUFBLEVBQ0FQLEtBR0EsR0FBQW9ELEVBQUFyRCxHQUVBLElBREFMLEVBQUFLLEVBQUFMLE9BQ0FhLEVBQUFiLEVBQUFhLElBR0EsT0FGQXdELEVBQUEzRCxFQUFBTCxFQUFBUSxHQUFBQSxFQUFBdUQsS0FHQTlELEVBQUF6QyxLQUFBd0csUUFNQSxJQUFBeEQsS0FBQVIsRUFHQSxPQUZBZ0UsRUFBQTNELEVBQUFMLEVBQUFRLEdBQUFBLEVBQUF1RCxLQUdBOUQsRUFBQXpDLEtBQUF3RyxHQU1BLE9BQUF6RyxFQUFBa0QsU0FBQVIsSUFJQWdFLEtBQUEsRUFJQUMsTUFBQSxTQUFBbkYsRUFBQUQsR0FDQSxJQUFBcUYsRUFBQUMsRUFBQUYsRUFVQSxHQVJBLGlCQUFBcEYsSUFDQXFGLEVBQUFwRixFQUFBRCxHQUNBQSxFQUFBQyxFQUNBQSxFQUFBb0YsR0FLQXZGLEVBQUFnRCxXQUFBN0MsR0FhQSxPQVJBcUYsRUFBQTlHLEVBQUFVLEtBQUEwQyxVQUFBLElBQ0F3RCxFQUFBLFdBQ0EsT0FBQW5GLEVBQUEwQixNQUFBM0IsR0FBQTlCLEtBQUFvSCxFQUFBN0csT0FBQUQsRUFBQVUsS0FBQTBDLGVBSUF1RCxLQUFBbEYsRUFBQWtGLEtBQUFsRixFQUFBa0YsTUFBQXJGLEVBQUFxRixPQUVBQyxHQUdBRyxJQUFBQyxLQUFBRCxJQUlBcEcsUUFBQUEsSUFHQSxtQkFBQXNHLFNBQ0EzRixFQUFBRyxHQUFBd0YsT0FBQUMsVUFBQXRILEVBQUFxSCxPQUFBQyxXQUlBNUYsRUFBQXdCLEtBQUEsdUVBQUFxRSxNQUFBLEtBQ0EsU0FBQWpFLEVBQUFhLEdBQ0EzRCxFQUFBLFdBQUEyRCxFQUFBLEtBQUFBLEVBQUFxRCxnQkFHQSxTQUFBckIsRUFBQVosR0FNQSxJQUFBOUMsSUFBQThDLEdBQUEsV0FBQUEsR0FBQUEsRUFBQTlDLE9BQ0ErQyxFQUFBOUQsRUFBQThELEtBQUFELEdBRUEsTUFBQSxhQUFBQyxJQUFBOUQsRUFBQStELFNBQUFGLEtBSUEsVUFBQUMsR0FBQSxJQUFBL0MsR0FDQSxpQkFBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEtBQUE4QyxHQUVBLElBQUFrQyxFQVdBLFNBQUE1SCxHQUVBLElBQUF5RCxFQUNBdkMsRUFDQTJHLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBR0FDLEVBQ0F6SSxFQUNBMEksRUFDQUMsRUFDQUMsRUFDQUMsRUFDQTVCLEVBQ0E2QixFQUdBekQsRUFBQSxTQUFBLEVBQUEsSUFBQXFDLEtBQ0FxQixFQUFBNUksRUFBQUgsU0FDQWdKLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBQyxLQUNBQyxFQUFBRCxLQUNBRSxFQUFBRixLQUNBRyxFQUFBLFNBQUFDLEVBQUFDLEdBSUEsT0FIQUQsSUFBQUMsSUFDQWhCLEdBQUEsR0FFQSxHQUlBeEgsS0FBQUMsZUFDQVgsS0FDQW1KLEVBQUFuSixFQUFBbUosSUFDQUMsRUFBQXBKLEVBQUFNLEtBQ0FBLEVBQUFOLEVBQUFNLEtBQ0FGLEVBQUFKLEVBQUFJLE1BR0FHLEVBQUEsU0FBQThJLEVBQUFoRyxHQUdBLElBRkEsSUFBQUMsRUFBQSxFQUNBTSxFQUFBeUYsRUFBQTVHLE9BQ0FhLEVBQUFNLEVBQUFOLElBQ0EsR0FBQStGLEVBQUEvRixLQUFBRCxFQUNBLE9BQUFDLEVBR0EsT0FBQSxHQUdBZ0csRUFBQSw2SEFLQUMsRUFBQSxzQkFHQUMsRUFBQSxnQ0FHQUMsRUFBQSxNQUFBRixFQUFBLEtBQUFDLEVBQUEsT0FBQUQsRUFFQSxnQkFBQUEsRUFFQSwyREFBQUMsRUFBQSxPQUFBRCxFQUNBLE9BRUFHLEVBQUEsS0FBQUYsRUFBQSx3RkFLQUMsRUFBQSxlQU1BRSxFQUFBLElBQUFDLE9BQUFMLEVBQUEsSUFBQSxLQUNBeEgsRUFBQSxJQUFBNkgsT0FBQSxJQUFBTCxFQUFBLDhCQUFBQSxFQUFBLEtBQUEsS0FFQU0sRUFBQSxJQUFBRCxPQUFBLElBQUFMLEVBQUEsS0FBQUEsRUFBQSxLQUNBTyxFQUFBLElBQUFGLE9BQUEsSUFBQUwsRUFBQSxXQUFBQSxFQUFBLElBQUFBLEVBQUEsS0FFQVEsRUFBQSxJQUFBSCxPQUFBLElBQUFMLEVBQUEsaUJBQUFBLEVBQUEsT0FBQSxLQUVBUyxFQUFBLElBQUFKLE9BQUFGLEdBQ0FPLEVBQUEsSUFBQUwsT0FBQSxJQUFBSixFQUFBLEtBRUFVLEdBQ0FDLEdBQUEsSUFBQVAsT0FBQSxNQUFBSixFQUFBLEtBQ0FZLE1BQUEsSUFBQVIsT0FBQSxRQUFBSixFQUFBLEtBQ0FhLElBQUEsSUFBQVQsT0FBQSxLQUFBSixFQUFBLFNBQ0FjLEtBQUEsSUFBQVYsT0FBQSxJQUFBSCxHQUNBYyxPQUFBLElBQUFYLE9BQUEsSUFBQUYsR0FDQWMsTUFBQSxJQUFBWixPQUFBLHlEQUFBTCxFQUNBLCtCQUFBQSxFQUFBLGNBQUFBLEVBQ0EsYUFBQUEsRUFBQSxTQUFBLEtBQ0FrQixLQUFBLElBQUFiLE9BQUEsT0FBQU4sRUFBQSxLQUFBLEtBR0FvQixhQUFBLElBQUFkLE9BQUEsSUFBQUwsRUFBQSxtREFDQUEsRUFBQSxtQkFBQUEsRUFBQSxtQkFBQSxNQUdBb0IsRUFBQSxzQ0FDQUMsRUFBQSxTQUVBQyxFQUFBLHlCQUdBQyxFQUFBLG1DQUVBQyxFQUFBLE9BSUFDLEVBQUEsSUFBQXBCLE9BQUEscUJBQUFMLEVBQUEsTUFBQUEsRUFBQSxPQUFBLE1BQ0EwQixHQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQSxLQUFBRixFQUFBLE1BSUEsT0FBQUUsR0FBQUEsR0FBQUQsRUFDQUQsRUFDQUUsRUFBQSxFQUVBQyxPQUFBQyxhQUFBRixFQUFBLE9BRUFDLE9BQUFDLGFBQUFGLEdBQUEsR0FBQSxNQUFBLEtBQUFBLEVBQUEsUUFLQUcsR0FBQSxzREFDQUMsR0FBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFBLEVBR0EsT0FBQUQsRUFDQSxJQUlBQSxFQUFBdEwsTUFBQSxHQUFBLEdBQUEsS0FBQXNMLEVBQUFFLFdBQUFGLEVBQUFqSixPQUFBLEdBQUFoQyxTQUFBLElBQUEsSUFJQSxLQUFBaUwsR0FPQUcsR0FBQSxXQUNBMUQsS0FHQTJELEdBQUFDLEdBQ0EsU0FBQTFJLEdBQ0EsT0FBQSxJQUFBQSxFQUFBMkksV0FBQSxTQUFBM0ksR0FBQSxVQUFBQSxLQUVBNEksSUFBQSxhQUFBQyxLQUFBLFdBSUEsSUFDQTVMLEVBQUFpRCxNQUNBdkQsRUFBQUksRUFBQVUsS0FBQTJILEVBQUEwRCxZQUNBMUQsRUFBQTBELFlBSUFuTSxFQUFBeUksRUFBQTBELFdBQUExSixRQUFBMkosU0FDQSxNQUFBQyxHQUNBL0wsR0FBQWlELE1BQUF2RCxFQUFBeUMsT0FHQSxTQUFBK0IsRUFBQThILEdBQ0FsRCxFQUFBN0YsTUFBQWlCLEVBQUFwRSxFQUFBVSxLQUFBd0wsS0FLQSxTQUFBOUgsRUFBQThILEdBSUEsSUFIQSxJQUFBekksRUFBQVcsRUFBQS9CLE9BQ0FhLEVBQUEsRUFFQWtCLEVBQUFYLEtBQUF5SSxFQUFBaEosT0FDQWtCLEVBQUEvQixPQUFBb0IsRUFBQSxJQUtBLFNBQUE0RCxHQUFBOUYsRUFBQUMsRUFBQTBFLEVBQUFpRyxHQUNBLElBQUFDLEVBQUFsSixFQUFBRCxFQUFBb0osRUFBQUMsRUFBQUMsRUFBQUMsRUFDQUMsRUFBQWpMLEdBQUFBLEVBQUFrTCxjQUdBVixFQUFBeEssRUFBQUEsRUFBQXdLLFNBQUEsRUFLQSxHQUhBOUYsRUFBQUEsTUFHQSxpQkFBQTNFLElBQUFBLEdBQ0EsSUFBQXlLLEdBQUEsSUFBQUEsR0FBQSxLQUFBQSxFQUVBLE9BQUE5RixFQUlBLElBQUFpRyxLQUVBM0ssRUFBQUEsRUFBQWtMLGVBQUFsTCxFQUFBNkcsS0FBQS9JLEdBQ0F5SSxFQUFBdkcsR0FFQUEsRUFBQUEsR0FBQWxDLEVBRUEySSxHQUFBLENBSUEsR0FBQSxLQUFBK0QsSUFBQU0sRUFBQTVCLEVBQUFpQyxLQUFBcEwsSUFHQSxHQUFBNkssRUFBQUUsRUFBQSxJQUdBLEdBQUEsSUFBQU4sRUFBQSxDQUNBLEtBQUEvSSxFQUFBekIsRUFBQW9MLGVBQUFSLElBVUEsT0FBQWxHLEVBTEEsR0FBQWpELEVBQUE0SixLQUFBVCxFQUVBLE9BREFsRyxFQUFBaEcsS0FBQStDLEdBQ0FpRCxPQVlBLEdBQUF1RyxJQUFBeEosRUFBQXdKLEVBQUFHLGVBQUFSLEtBQ0FoRSxFQUFBNUcsRUFBQXlCLElBQ0FBLEVBQUE0SixLQUFBVCxFQUdBLE9BREFsRyxFQUFBaEcsS0FBQStDLEdBQ0FpRCxNQUtBLENBQUEsR0FBQW9HLEVBQUEsR0FFQSxPQURBcE0sRUFBQWlELE1BQUErQyxFQUFBMUUsRUFBQXNMLHFCQUFBdkwsSUFDQTJFLEVBR0EsSUFBQWtHLEVBQUFFLEVBQUEsS0FBQTNMLEVBQUFvTSx3QkFDQXZMLEVBQUF1TCx1QkFHQSxPQURBN00sRUFBQWlELE1BQUErQyxFQUFBMUUsRUFBQXVMLHVCQUFBWCxJQUNBbEcsRUFLQSxHQUFBdkYsRUFBQXFNLE1BQ0FyRSxFQUFBcEgsRUFBQSxRQUNBMkcsSUFBQUEsRUFBQStFLEtBQUExTCxJQUFBLENBRUEsR0FBQSxJQUFBeUssRUFDQVMsRUFBQWpMLEVBQ0FnTCxFQUFBakwsT0FNQSxHQUFBLFdBQUFDLEVBQUEwTCxTQUFBOUYsY0FBQSxDQVlBLEtBVEFpRixFQUFBN0ssRUFBQTJMLGFBQUEsT0FDQWQsRUFBQUEsRUFBQXZILFFBQUFzRyxHQUFBQyxJQUVBN0osRUFBQTRMLGFBQUEsS0FBQWYsRUFBQTFILEdBS0F6QixHQURBcUosRUFBQTlFLEVBQUFsRyxJQUNBYyxPQUNBYSxLQUNBcUosRUFBQXJKLEdBQUEsSUFBQW1KLEVBQUEsSUFBQWdCLEdBQUFkLEVBQUFySixJQUVBc0osRUFBQUQsRUFBQWUsS0FBQSxLQUdBYixFQUFBOUIsRUFBQXNDLEtBQUExTCxJQUFBZ00sR0FBQS9MLEVBQUFKLGFBQ0FJLEVBR0EsR0FBQWdMLEVBQ0EsSUFJQSxPQUhBdE0sRUFBQWlELE1BQUErQyxFQUNBdUcsRUFBQWUsaUJBQUFoQixJQUVBdEcsRUFDQSxNQUFBdUgsSUFDQSxRQUNBcEIsSUFBQTFILEdBQ0FuRCxFQUFBa00sZ0JBQUEsUUFTQSxPQUFBL0YsRUFBQXBHLEVBQUF1RCxRQUFBbkQsRUFBQSxNQUFBSCxFQUFBMEUsRUFBQWlHLEdBU0EsU0FBQTFELEtBQ0EsSUFBQWtGLEtBRUEsU0FBQUMsRUFBQUMsRUFBQW5ILEdBTUEsT0FKQWlILEVBQUF6TixLQUFBMk4sRUFBQSxLQUFBdkcsRUFBQXdHLG9CQUVBRixFQUFBRCxFQUFBSSxTQUVBSCxFQUFBQyxFQUFBLEtBQUFuSCxFQUVBLE9BQUFrSCxFQU9BLFNBQUFJLEdBQUF2TSxHQUVBLE9BREFBLEVBQUFrRCxJQUFBLEVBQ0FsRCxFQU9BLFNBQUF3TSxHQUFBeE0sR0FDQSxJQUFBeU0sRUFBQTVPLEVBQUEwQixjQUFBLFlBRUEsSUFDQSxRQUFBUyxFQUFBeU0sR0FDQSxNQUFBakMsR0FDQSxPQUFBLEVBQ0EsUUFFQWlDLEVBQUE5TSxZQUNBOE0sRUFBQTlNLFdBQUFDLFlBQUE2TSxHQUdBQSxFQUFBLE1BU0EsU0FBQUMsR0FBQUMsRUFBQUMsR0FJQSxJQUhBLElBQUF6TyxFQUFBd08sRUFBQWpILE1BQUEsS0FDQWpFLEVBQUF0RCxFQUFBeUMsT0FFQWEsS0FDQW9FLEVBQUFnSCxXQUFBMU8sRUFBQXNELElBQUFtTCxFQVVBLFNBQUFFLEdBQUExRixFQUFBQyxHQUNBLElBQUEwRixFQUFBMUYsR0FBQUQsRUFDQTRGLEVBQUFELEdBQUEsSUFBQTNGLEVBQUFtRCxVQUFBLElBQUFsRCxFQUFBa0QsVUFDQW5ELEVBQUE2RixZQUFBNUYsRUFBQTRGLFlBR0EsR0FBQUQsRUFDQSxPQUFBQSxFQUlBLEdBQUFELEVBQ0EsS0FBQUEsRUFBQUEsRUFBQUcsYUFDQSxHQUFBSCxJQUFBMUYsRUFDQSxPQUFBLEVBS0EsT0FBQUQsRUFBQSxHQUFBLEVBNkJBLFNBQUErRixHQUFBaEQsR0FHQSxPQUFBLFNBQUEzSSxHQUtBLE1BQUEsU0FBQUEsRUFTQUEsRUFBQTdCLGFBQUEsSUFBQTZCLEVBQUEySSxTQUdBLFVBQUEzSSxFQUNBLFVBQUFBLEVBQUE3QixXQUNBNkIsRUFBQTdCLFdBQUF3SyxXQUFBQSxFQUVBM0ksRUFBQTJJLFdBQUFBLEVBTUEzSSxFQUFBNEwsYUFBQWpELEdBSUEzSSxFQUFBNEwsY0FBQWpELEdBQ0FGLEdBQUF6SSxLQUFBMkksRUFHQTNJLEVBQUEySSxXQUFBQSxFQUtBLFVBQUEzSSxHQUNBQSxFQUFBMkksV0FBQUEsR0FZQSxTQUFBa0QsR0FBQXJOLEdBQ0EsT0FBQXVNLEdBQUEsU0FBQWUsR0FFQSxPQURBQSxHQUFBQSxFQUNBZixHQUFBLFNBQUE3QixFQUFBNUYsR0FNQSxJQUxBLElBQUE5QyxFQUNBdUwsRUFBQXZOLEtBQUEwSyxFQUFBOUosT0FBQTBNLEdBQ0E3TCxFQUFBOEwsRUFBQTNNLE9BR0FhLEtBQ0FpSixFQUFBMUksRUFBQXVMLEVBQUE5TCxNQUNBaUosRUFBQTFJLEtBQUE4QyxFQUFBOUMsR0FBQTBJLEVBQUExSSxTQVlBLFNBQUE4SixHQUFBL0wsR0FDQSxPQUFBQSxRQUFBLElBQUFBLEVBQUFzTCxzQkFBQXRMLEVBSUFiLEVBQUEwRyxHQUFBMUcsV0FPQTZHLEVBQUFILEdBQUFHLE1BQUEsU0FBQXZFLEdBR0EsSUFBQWdNLEVBQUFoTSxJQUFBQSxFQUFBeUosZUFBQXpKLEdBQUFnTSxnQkFDQSxRQUFBQSxHQUFBLFNBQUFBLEVBQUEvQixVQVFBbkYsRUFBQVYsR0FBQVUsWUFBQSxTQUFBbUgsR0FDQSxJQUFBQyxFQUFBQyxFQUNBdE8sRUFBQW9PLEVBQUFBLEVBQUF4QyxlQUFBd0MsRUFBQTdHLEVBR0EsT0FBQXZILElBQUF4QixHQUFBLElBQUF3QixFQUFBa0wsVUFBQWxMLEVBQUFtTyxpQkFNQWpILEdBREExSSxFQUFBd0IsR0FDQW1PLGdCQUNBaEgsR0FBQVQsRUFBQWxJLEdBSUErSSxJQUFBL0ksSUFDQThQLEVBQUE5UCxFQUFBK1AsY0FBQUQsRUFBQUUsTUFBQUYsSUFHQUEsRUFBQUcsaUJBQ0FILEVBQUFHLGlCQUFBLFNBQUE5RCxJQUFBLEdBR0EyRCxFQUFBSSxhQUNBSixFQUFBSSxZQUFBLFdBQUEvRCxLQVVBOUssRUFBQTBJLFdBQUE0RSxHQUFBLFNBQUFDLEdBRUEsT0FEQUEsRUFBQXVCLFVBQUEsS0FDQXZCLEVBQUFmLGFBQUEsZUFPQXhNLEVBQUFtTSxxQkFBQW1CLEdBQUEsU0FBQUMsR0FFQSxPQURBQSxFQUFBL00sWUFBQTdCLEVBQUFvUSxjQUFBLE1BQ0F4QixFQUFBcEIscUJBQUEsS0FBQXpLLFNBSUExQixFQUFBb00sdUJBQUF0QyxFQUFBd0MsS0FBQTNOLEVBQUF5Tix3QkFNQXBNLEVBQUFnUCxRQUFBMUIsR0FBQSxTQUFBQyxHQUVBLE9BREFsRyxFQUFBN0csWUFBQStNLEdBQUFyQixHQUFBbEksR0FDQXJGLEVBQUFzUSxvQkFBQXRRLEVBQUFzUSxrQkFBQWpMLEdBQUF0QyxTQUlBMUIsRUFBQWdQLFNBQ0FySSxFQUFBdUksT0FBQSxHQUFBLFNBQUFoRCxHQUNBLElBQUFpRCxFQUFBakQsRUFBQS9ILFFBQUE4RixFQUFBQyxJQUNBLE9BQUEsU0FBQTVILEdBQ0EsT0FBQUEsRUFBQWtLLGFBQUEsUUFBQTJDLElBR0F4SSxFQUFBeUksS0FBQSxHQUFBLFNBQUFsRCxFQUFBckwsR0FDQSxRQUFBLElBQUFBLEVBQUFvTCxnQkFBQTNFLEVBQUEsQ0FDQSxJQUFBaEYsRUFBQXpCLEVBQUFvTCxlQUFBQyxHQUNBLE9BQUE1SixHQUFBQSxVQUlBcUUsRUFBQXVJLE9BQUEsR0FBQSxTQUFBaEQsR0FDQSxJQUFBaUQsRUFBQWpELEVBQUEvSCxRQUFBOEYsRUFBQUMsSUFDQSxPQUFBLFNBQUE1SCxHQUNBLElBQUFpTSxPQUFBLElBQUFqTSxFQUFBK00sa0JBQ0EvTSxFQUFBK00saUJBQUEsTUFDQSxPQUFBZCxHQUFBQSxFQUFBeEksUUFBQW9KLElBTUF4SSxFQUFBeUksS0FBQSxHQUFBLFNBQUFsRCxFQUFBckwsR0FDQSxRQUFBLElBQUFBLEVBQUFvTCxnQkFBQTNFLEVBQUEsQ0FDQSxJQUFBaUgsRUFBQWhNLEVBQUFSLEVBQ0FPLEVBQUF6QixFQUFBb0wsZUFBQUMsR0FFQSxHQUFBNUosRUFBQSxDQUlBLElBREFpTSxFQUFBak0sRUFBQStNLGlCQUFBLFFBQ0FkLEVBQUF4SSxRQUFBbUcsRUFDQSxPQUFBNUosR0FNQSxJQUZBUCxFQUFBbEIsRUFBQW9PLGtCQUFBL0MsR0FDQTNKLEVBQUEsRUFDQUQsRUFBQVAsRUFBQVEsTUFFQSxJQURBZ00sRUFBQWpNLEVBQUErTSxpQkFBQSxRQUNBZCxFQUFBeEksUUFBQW1HLEVBQ0EsT0FBQTVKLEdBS0EsWUFNQXFFLEVBQUF5SSxLQUFBLElBQUFwUCxFQUFBbU0scUJBQ0EsU0FBQW1ELEVBQUF6TyxHQUNBLFlBQUEsSUFBQUEsRUFBQXNMLHFCQUNBdEwsRUFBQXNMLHFCQUFBbUQsR0FHQXRQLEVBQUFxTSxJQUNBeEwsRUFBQWdNLGlCQUFBeUMsUUFEQSxHQUtBLFNBQUFBLEVBQUF6TyxHQUNBLElBQUF5QixFQUNBNEQsS0FDQTNELEVBQUEsRUFFQWdELEVBQUExRSxFQUFBc0wscUJBQUFtRCxHQUdBLEdBQUEsTUFBQUEsRUFBQSxDQUNBLEtBQUFoTixFQUFBaUQsRUFBQWhELE1BQ0EsSUFBQUQsRUFBQStJLFVBQ0FuRixFQUFBM0csS0FBQStDLEdBSUEsT0FBQTRELEVBRUEsT0FBQVgsR0FJQW9CLEVBQUF5SSxLQUFBLE1BQUFwUCxFQUFBb00sd0JBQUEsU0FBQTBDLEVBQUFqTyxHQUNBLFFBQUEsSUFBQUEsRUFBQXVMLHdCQUFBOUUsRUFDQSxPQUFBekcsRUFBQXVMLHVCQUFBMEMsSUFVQXRILEtBT0FELE1BRUF2SCxFQUFBcU0sSUFBQXZDLEVBQUF3QyxLQUFBM04sRUFBQWtPLHFCQUdBUyxHQUFBLFNBQUFDLEdBTUFsRyxFQUFBN0csWUFBQStNLEdBQUFnQyxVQUFBLFVBQUF2TCxFQUFBLHFCQUNBQSxFQUFBLGtFQU9BdUosRUFBQVYsaUJBQUEsd0JBQUFuTCxRQUNBNkYsRUFBQWhJLEtBQUEsU0FBQWlKLEVBQUEsZ0JBS0ErRSxFQUFBVixpQkFBQSxjQUFBbkwsUUFDQTZGLEVBQUFoSSxLQUFBLE1BQUFpSixFQUFBLGFBQUFELEVBQUEsS0FJQWdGLEVBQUFWLGlCQUFBLFFBQUE3SSxFQUFBLE1BQUF0QyxRQUNBNkYsRUFBQWhJLEtBQUEsTUFNQWdPLEVBQUFWLGlCQUFBLFlBQUFuTCxRQUNBNkYsRUFBQWhJLEtBQUEsWUFNQWdPLEVBQUFWLGlCQUFBLEtBQUE3SSxFQUFBLE1BQUF0QyxRQUNBNkYsRUFBQWhJLEtBQUEsY0FJQStOLEdBQUEsU0FBQUMsR0FDQUEsRUFBQWdDLFVBQUEsb0ZBS0EsSUFBQUMsRUFBQTdRLEVBQUEwQixjQUFBLFNBQ0FtUCxFQUFBL0MsYUFBQSxPQUFBLFVBQ0FjLEVBQUEvTSxZQUFBZ1AsR0FBQS9DLGFBQUEsT0FBQSxLQUlBYyxFQUFBVixpQkFBQSxZQUFBbkwsUUFDQTZGLEVBQUFoSSxLQUFBLE9BQUFpSixFQUFBLGVBS0EsSUFBQStFLEVBQUFWLGlCQUFBLFlBQUFuTCxRQUNBNkYsRUFBQWhJLEtBQUEsV0FBQSxhQUtBOEgsRUFBQTdHLFlBQUErTSxHQUFBdEMsVUFBQSxFQUNBLElBQUFzQyxFQUFBVixpQkFBQSxhQUFBbkwsUUFDQTZGLEVBQUFoSSxLQUFBLFdBQUEsYUFJQWdPLEVBQUFWLGlCQUFBLFFBQ0F0RixFQUFBaEksS0FBQSxZQUlBUyxFQUFBeVAsZ0JBQUEzRixFQUFBd0MsS0FBQTFHLEVBQUF5QixFQUFBekIsU0FDQXlCLEVBQUFxSSx1QkFDQXJJLEVBQUFzSSxvQkFDQXRJLEVBQUF1SSxrQkFDQXZJLEVBQUF3SSxxQkFFQXZDLEdBQUEsU0FBQUMsR0FHQXZOLEVBQUE4UCxrQkFBQWxLLEVBQUE3RixLQUFBd04sRUFBQSxLQUlBM0gsRUFBQTdGLEtBQUF3TixFQUFBLGFBQ0EvRixFQUFBakksS0FBQSxLQUFBb0osS0FJQXBCLEVBQUFBLEVBQUE3RixRQUFBLElBQUFtSCxPQUFBdEIsRUFBQW9GLEtBQUEsTUFDQW5GLEVBQUFBLEVBQUE5RixRQUFBLElBQUFtSCxPQUFBckIsRUFBQW1GLEtBQUEsTUFJQTZCLEVBQUExRSxFQUFBd0MsS0FBQWpGLEVBQUEwSSx5QkFLQXRJLEVBQUErRyxHQUFBMUUsRUFBQXdDLEtBQUFqRixFQUFBSSxVQUNBLFNBQUFTLEVBQUFDLEdBQ0EsSUFBQTZILEVBQUEsSUFBQTlILEVBQUFtRCxTQUFBbkQsRUFBQW9HLGdCQUFBcEcsRUFDQStILEVBQUE5SCxHQUFBQSxFQUFBMUgsV0FDQSxPQUFBeUgsSUFBQStILE1BQUFBLEdBQUEsSUFBQUEsRUFBQTVFLFlBQ0EyRSxFQUFBdkksU0FDQXVJLEVBQUF2SSxTQUFBd0ksR0FDQS9ILEVBQUE2SCx5QkFBQSxHQUFBN0gsRUFBQTZILHdCQUFBRSxNQUdBLFNBQUEvSCxFQUFBQyxHQUNBLEdBQUFBLEVBQ0EsS0FBQUEsRUFBQUEsRUFBQTFILFlBQ0EsR0FBQTBILElBQUFELEVBQ0EsT0FBQSxFQUlBLE9BQUEsR0FPQUQsRUFBQXVHLEVBQ0EsU0FBQXRHLEVBQUFDLEdBR0EsR0FBQUQsSUFBQUMsRUFFQSxPQURBaEIsR0FBQSxFQUNBLEVBSUEsSUFBQStJLEdBQUFoSSxFQUFBNkgseUJBQUE1SCxFQUFBNEgsd0JBQ0EsT0FBQUcsSUFZQSxHQVBBQSxHQUFBaEksRUFBQTZELGVBQUE3RCxNQUFBQyxFQUFBNEQsZUFBQTVELEdBQ0FELEVBQUE2SCx3QkFBQTVILEdBR0EsS0FJQW5JLEVBQUFtUSxjQUFBaEksRUFBQTRILHdCQUFBN0gsS0FBQWdJLEVBR0FoSSxJQUFBdkosR0FBQXVKLEVBQUE2RCxnQkFBQXJFLEdBQUFELEVBQUFDLEVBQUFRLElBQ0EsRUFFQUMsSUFBQXhKLEdBQUF3SixFQUFBNEQsZ0JBQUFyRSxHQUFBRCxFQUFBQyxFQUFBUyxHQUNBLEVBSUFqQixFQUNBMUgsRUFBQTBILEVBQUFnQixHQUFBMUksRUFBQTBILEVBQUFpQixHQUNBLEVBR0EsRUFBQStILEdBQUEsRUFBQSxJQUVBLFNBQUFoSSxFQUFBQyxHQUVBLEdBQUFELElBQUFDLEVBRUEsT0FEQWhCLEdBQUEsRUFDQSxFQUdBLElBQUEwRyxFQUNBdEwsRUFBQSxFQUNBNk4sRUFBQWxJLEVBQUF6SCxXQUNBd1AsRUFBQTlILEVBQUExSCxXQUNBNFAsR0FBQW5JLEdBQ0FvSSxHQUFBbkksR0FHQSxJQUFBaUksSUFBQUgsRUFDQSxPQUFBL0gsSUFBQXZKLEdBQUEsRUFDQXdKLElBQUF4SixFQUFBLEVBQ0F5UixHQUFBLEVBQ0FILEVBQUEsRUFDQS9JLEVBQ0ExSCxFQUFBMEgsRUFBQWdCLEdBQUExSSxFQUFBMEgsRUFBQWlCLEdBQ0EsRUFHQSxHQUFBaUksSUFBQUgsRUFDQSxPQUFBckMsR0FBQTFGLEVBQUFDLEdBS0EsSUFEQTBGLEVBQUEzRixFQUNBMkYsRUFBQUEsRUFBQXBOLFlBQ0E0UCxFQUFBRSxRQUFBMUMsR0FHQSxJQURBQSxFQUFBMUYsRUFDQTBGLEVBQUFBLEVBQUFwTixZQUNBNlAsRUFBQUMsUUFBQTFDLEdBSUEsS0FBQXdDLEVBQUE5TixLQUFBK04sRUFBQS9OLElBQ0FBLElBR0EsT0FBQUEsRUFFQXFMLEdBQUF5QyxFQUFBOU4sR0FBQStOLEVBQUEvTixJQUdBOE4sRUFBQTlOLEtBQUFtRixHQUFBLEVBQ0E0SSxFQUFBL04sS0FBQW1GLEVBQUEsRUFDQSxHQUdBL0ksR0EzWUFBLEdBOFlBK0gsR0FBQWQsUUFBQSxTQUFBNEssRUFBQUMsR0FDQSxPQUFBL0osR0FBQThKLEVBQUEsS0FBQSxLQUFBQyxJQUdBL0osR0FBQStJLGdCQUFBLFNBQUFuTixFQUFBa08sR0FTQSxJQVBBbE8sRUFBQXlKLGVBQUF6SixLQUFBM0QsR0FDQXlJLEVBQUE5RSxHQUlBa08sRUFBQUEsRUFBQXJNLFFBQUE2RSxFQUFBLFVBRUFoSixFQUFBeVAsaUJBQUFuSSxJQUNBVSxFQUFBd0ksRUFBQSxRQUNBaEosSUFBQUEsRUFBQThFLEtBQUFrRSxPQUNBakosSUFBQUEsRUFBQStFLEtBQUFrRSxJQUVBLElBQ0EsSUFBQXhPLEVBQUE0RCxFQUFBN0YsS0FBQXVDLEVBQUFrTyxHQUdBLEdBQUF4TyxHQUFBaEMsRUFBQThQLG1CQUdBeE4sRUFBQTNELFVBQUEsS0FBQTJELEVBQUEzRCxTQUFBME0sU0FDQSxPQUFBckosRUFFQSxNQUFBc0osSUFHQSxPQUFBNUUsR0FBQThKLEVBQUE3UixFQUFBLE1BQUEyRCxJQUFBWixPQUFBLEdBR0FnRixHQUFBZSxTQUFBLFNBQUE1RyxFQUFBeUIsR0FLQSxPQUhBekIsRUFBQWtMLGVBQUFsTCxLQUFBbEMsR0FDQXlJLEVBQUF2RyxHQUVBNEcsRUFBQTVHLEVBQUF5QixJQUdBb0UsR0FBQWdLLEtBQUEsU0FBQXBPLEVBQUFjLElBRUFkLEVBQUF5SixlQUFBekosS0FBQTNELEdBQ0F5SSxFQUFBOUUsR0FHQSxJQUFBeEIsRUFBQTZGLEVBQUFnSCxXQUFBdkssRUFBQXFELGVBRUFrSyxFQUFBN1AsR0FBQW5CLEVBQUFJLEtBQUE0RyxFQUFBZ0gsV0FBQXZLLEVBQUFxRCxlQUNBM0YsRUFBQXdCLEVBQUFjLEdBQUFrRSxRQUNBdkQsRUFFQSxZQUFBQSxJQUFBNE0sRUFDQUEsRUFDQTNRLEVBQUEwSSxhQUFBcEIsRUFDQWhGLEVBQUFrSyxhQUFBcEosSUFDQXVOLEVBQUFyTyxFQUFBK00saUJBQUFqTSxLQUFBdU4sRUFBQUMsVUFDQUQsRUFBQTVLLE1BQ0EsTUFHQVcsR0FBQW1LLE9BQUEsU0FBQUMsR0FDQSxPQUFBQSxFQUFBLElBQUEzTSxRQUFBc0csR0FBQUMsS0FHQWhFLEdBQUFyQyxNQUFBLFNBQUFDLEdBQ0EsTUFBQSxJQUFBekYsTUFBQSwwQ0FBQXlGLElBT0FvQyxHQUFBcUssV0FBQSxTQUFBeEwsR0FDQSxJQUFBakQsRUFDQTBPLEtBQ0FsTyxFQUFBLEVBQ0FQLEVBQUEsRUFPQSxHQUpBNEUsR0FBQW5ILEVBQUFpUixpQkFDQS9KLEdBQUFsSCxFQUFBa1IsWUFBQTNMLEVBQUFsRyxNQUFBLEdBQ0FrRyxFQUFBdkMsS0FBQWlGLEdBRUFkLEVBQUEsQ0FDQSxLQUFBN0UsRUFBQWlELEVBQUFoRCxNQUNBRCxJQUFBaUQsRUFBQWhELEtBQ0FPLEVBQUFrTyxFQUFBelIsS0FBQWdELElBR0EsS0FBQU8sS0FDQXlDLEVBQUF0QyxPQUFBK04sRUFBQWxPLEdBQUEsR0FRQSxPQUZBb0UsRUFBQSxLQUVBM0IsR0FPQXFCLEVBQUFGLEdBQUFFLFFBQUEsU0FBQXRFLEdBQ0EsSUFBQWlNLEVBQ0F2TSxFQUFBLEdBQ0FPLEVBQUEsRUFDQThJLEVBQUEvSSxFQUFBK0ksU0FFQSxHQUFBQSxHQU1BLEdBQUEsSUFBQUEsR0FBQSxJQUFBQSxHQUFBLEtBQUFBLEVBQUEsQ0FHQSxHQUFBLGlCQUFBL0ksRUFBQTZPLFlBQ0EsT0FBQTdPLEVBQUE2TyxZQUdBLElBQUE3TyxFQUFBQSxFQUFBOE8sV0FBQTlPLEVBQUFBLEVBQUFBLEVBQUEwTCxZQUNBaE0sR0FBQTRFLEVBQUF0RSxRQUdBLEdBQUEsSUFBQStJLEdBQUEsSUFBQUEsRUFDQSxPQUFBL0ksRUFBQStPLGVBaEJBLEtBQUE5QyxFQUFBak0sRUFBQUMsTUFFQVAsR0FBQTRFLEVBQUEySCxHQWtCQSxPQUFBdk0sSUFHQTJFLEVBQUFELEdBQUE0SyxXQUdBbkUsWUFBQSxHQUVBb0UsYUFBQWxFLEdBRUExQixNQUFBeEMsRUFFQXdFLGNBRUF5QixRQUVBb0MsVUFDQUMsS0FBQXZHLElBQUEsYUFBQXhJLE9BQUEsR0FDQWdQLEtBQUF4RyxJQUFBLGNBQ0F5RyxLQUFBekcsSUFBQSxrQkFBQXhJLE9BQUEsR0FDQWtQLEtBQUExRyxJQUFBLG9CQUdBMkcsV0FDQXRJLEtBQUEsU0FBQW9DLEdBVUEsT0FUQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUF4SCxRQUFBOEYsRUFBQUMsSUFHQXlCLEVBQUEsSUFBQUEsRUFBQSxJQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQSxJQUFBeEgsUUFBQThGLEVBQUFDLElBRUEsT0FBQXlCLEVBQUEsS0FDQUEsRUFBQSxHQUFBLElBQUFBLEVBQUEsR0FBQSxLQUdBQSxFQUFBdE0sTUFBQSxFQUFBLElBR0FvSyxNQUFBLFNBQUFrQyxHQTZCQSxPQWxCQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFsRixjQUVBLFFBQUFrRixFQUFBLEdBQUF0TSxNQUFBLEVBQUEsSUFFQXNNLEVBQUEsSUFDQWpGLEdBQUFyQyxNQUFBc0gsRUFBQSxJQUtBQSxFQUFBLEtBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUFBQSxFQUFBLElBQUEsR0FBQSxHQUFBLFNBQUFBLEVBQUEsSUFBQSxRQUFBQSxFQUFBLEtBQ0FBLEVBQUEsS0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQUEsUUFBQUEsRUFBQSxLQUdBQSxFQUFBLElBQ0FqRixHQUFBckMsTUFBQXNILEVBQUEsSUFHQUEsR0FHQW5DLE9BQUEsU0FBQW1DLEdBQ0EsSUFBQW1HLEVBQ0FDLEdBQUFwRyxFQUFBLElBQUFBLEVBQUEsR0FFQSxPQUFBeEMsRUFBQSxNQUFBbUQsS0FBQVgsRUFBQSxJQUNBLE1BSUFBLEVBQUEsR0FDQUEsRUFBQSxHQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQSxHQUdBb0csR0FBQTlJLEVBQUFxRCxLQUFBeUYsS0FFQUQsRUFBQWhMLEVBQUFpTCxHQUFBLE1BRUFELEVBQUFDLEVBQUF2UyxRQUFBLElBQUF1UyxFQUFBclEsT0FBQW9RLEdBQUFDLEVBQUFyUSxVQUdBaUssRUFBQSxHQUFBQSxFQUFBLEdBQUF0TSxNQUFBLEVBQUF5UyxHQUNBbkcsRUFBQSxHQUFBb0csRUFBQTFTLE1BQUEsRUFBQXlTLElBSUFuRyxFQUFBdE0sTUFBQSxFQUFBLE1BSUE2UCxRQUVBNUYsSUFBQSxTQUFBMEksR0FDQSxJQUFBekYsRUFBQXlGLEVBQUE3TixRQUFBOEYsRUFBQUMsSUFBQXpELGNBQ0EsTUFBQSxNQUFBdUwsRUFDQSxXQUFBLE9BQUEsR0FDQSxTQUFBMVAsR0FDQSxPQUFBQSxFQUFBaUssVUFBQWpLLEVBQUFpSyxTQUFBOUYsZ0JBQUE4RixJQUlBbEQsTUFBQSxTQUFBeUYsR0FDQSxJQUFBbUQsRUFBQXBLLEVBQUFpSCxFQUFBLEtBRUEsT0FBQW1ELElBQ0FBLEVBQUEsSUFBQXBKLE9BQUEsTUFBQUwsRUFBQSxJQUFBc0csRUFBQSxJQUFBdEcsRUFBQSxTQUNBWCxFQUFBaUgsRUFBQSxTQUFBeE0sR0FDQSxPQUFBMlAsRUFBQTNGLEtBQUEsaUJBQUFoSyxFQUFBd00sV0FBQXhNLEVBQUF3TSxnQkFBQSxJQUFBeE0sRUFBQWtLLGNBQUFsSyxFQUFBa0ssYUFBQSxVQUFBLE9BSUFqRCxLQUFBLFNBQUFuRyxFQUFBOE8sRUFBQUMsR0FDQSxPQUFBLFNBQUE3UCxHQUNBLElBQUE4UCxFQUFBMUwsR0FBQWdLLEtBQUFwTyxFQUFBYyxHQUVBLE9BQUEsTUFBQWdQLEVBQ0EsT0FBQUYsR0FFQUEsSUFJQUUsR0FBQSxHQUVBLE1BQUFGLEVBQUFFLElBQUFELEVBQ0EsT0FBQUQsRUFBQUUsSUFBQUQsRUFDQSxPQUFBRCxFQUFBQyxHQUFBLElBQUFDLEVBQUE1UyxRQUFBMlMsR0FDQSxPQUFBRCxFQUFBQyxHQUFBQyxFQUFBNVMsUUFBQTJTLElBQUEsRUFDQSxPQUFBRCxFQUFBQyxHQUFBQyxFQUFBL1MsT0FBQThTLEVBQUF6USxVQUFBeVEsRUFDQSxPQUFBRCxHQUFBLElBQUFFLEVBQUFqTyxRQUFBeUUsRUFBQSxLQUFBLEtBQUFwSixRQUFBMlMsSUFBQSxFQUNBLE9BQUFELElBQUFFLElBQUFELEdBQUFDLEVBQUEvUyxNQUFBLEVBQUE4UyxFQUFBelEsT0FBQSxLQUFBeVEsRUFBQSxRQUtBMUksTUFBQSxTQUFBaEYsRUFBQTROLEVBQUFqRSxFQUFBMUwsRUFBQUUsR0FDQSxJQUFBMFAsRUFBQSxRQUFBN04sRUFBQXBGLE1BQUEsRUFBQSxHQUNBa1QsRUFBQSxTQUFBOU4sRUFBQXBGLE9BQUEsR0FDQW1ULEVBQUEsWUFBQUgsRUFFQSxPQUFBLElBQUEzUCxHQUFBLElBQUFFLEVBR0EsU0FBQU4sR0FDQSxRQUFBQSxFQUFBN0IsWUFHQSxTQUFBNkIsRUFBQXpCLEVBQUE0UixHQUNBLElBQUF4RixFQUFBeUYsRUFBQUMsRUFBQXBFLEVBQUFxRSxFQUFBQyxFQUNBM0gsRUFBQW9ILElBQUFDLEVBQUEsY0FBQSxrQkFDQU8sRUFBQXhRLEVBQUE3QixXQUNBMkMsRUFBQW9QLEdBQUFsUSxFQUFBaUssU0FBQTlGLGNBQ0FzTSxHQUFBTixJQUFBRCxFQUNBMUUsR0FBQSxFQUVBLEdBQUFnRixFQUFBLENBR0EsR0FBQVIsRUFBQSxDQUNBLEtBQUFwSCxHQUFBLENBRUEsSUFEQXFELEVBQUFqTSxFQUNBaU0sRUFBQUEsRUFBQXJELElBQ0EsR0FBQXNILEVBQ0FqRSxFQUFBaEMsU0FBQTlGLGdCQUFBckQsRUFDQSxJQUFBbUwsRUFBQWxELFNBRUEsT0FBQSxFQUlBd0gsRUFBQTNILEVBQUEsU0FBQXpHLElBQUFvTyxHQUFBLGNBRUEsT0FBQSxFQU1BLEdBSEFBLEdBQUFOLEVBQUFPLEVBQUExQixXQUFBMEIsRUFBQUUsV0FHQVQsR0FBQVEsR0FrQkEsSUFIQWpGLEdBREE4RSxHQURBM0YsR0FIQXlGLEdBSkFDLEdBREFwRSxFQUFBdUUsR0FDQTlPLEtBQUF1SyxFQUFBdkssUUFJQXVLLEVBQUEwRSxZQUNBTixFQUFBcEUsRUFBQTBFLGVBRUF4TyxRQUNBLEtBQUFrRCxHQUFBc0YsRUFBQSxLQUNBQSxFQUFBLEdBQ0FzQixFQUFBcUUsR0FBQUUsRUFBQTFILFdBQUF3SCxHQUVBckUsSUFBQXFFLEdBQUFyRSxHQUFBQSxFQUFBckQsS0FHQTRDLEVBQUE4RSxFQUFBLElBQUFDLEVBQUF6SyxPQUdBLEdBQUEsSUFBQW1HLEVBQUFsRCxZQUFBeUMsR0FBQVMsSUFBQWpNLEVBQUEsQ0FDQW9RLEVBQUFqTyxJQUFBa0QsRUFBQWlMLEVBQUE5RSxHQUNBLFlBdUJBLEdBakJBaUYsSUFZQWpGLEVBREE4RSxHQURBM0YsR0FIQXlGLEdBSkFDLEdBREFwRSxFQUFBak0sR0FDQTBCLEtBQUF1SyxFQUFBdkssUUFJQXVLLEVBQUEwRSxZQUNBTixFQUFBcEUsRUFBQTBFLGVBRUF4TyxRQUNBLEtBQUFrRCxHQUFBc0YsRUFBQSxLQU1BLElBQUFhLEVBRUEsTUFBQVMsSUFBQXFFLEdBQUFyRSxHQUFBQSxFQUFBckQsS0FDQTRDLEVBQUE4RSxFQUFBLElBQUFDLEVBQUF6SyxVQUVBb0ssRUFDQWpFLEVBQUFoQyxTQUFBOUYsZ0JBQUFyRCxFQUNBLElBQUFtTCxFQUFBbEQsY0FDQXlDLElBR0FpRixLQUtBTCxHQUpBQyxFQUFBcEUsRUFBQXZLLEtBQUF1SyxFQUFBdkssUUFJQXVLLEVBQUEwRSxZQUNBTixFQUFBcEUsRUFBQTBFLGVBRUF4TyxJQUFBa0QsRUFBQW1HLElBR0FTLElBQUFqTSxNQVVBLE9BREF3TCxHQUFBbEwsS0FDQUYsR0FBQW9MLEVBQUFwTCxHQUFBLEdBQUFvTCxFQUFBcEwsR0FBQSxLQUtBOEcsT0FBQSxTQUFBMEosRUFBQTlFLEdBS0EsSUFBQWpJLEVBQ0FyRixFQUFBNkYsRUFBQWdDLFFBQUF1SyxJQUFBdk0sRUFBQXdNLFdBQUFELEVBQUF6TSxnQkFDQUMsR0FBQXJDLE1BQUEsdUJBQUE2TyxHQUtBLE9BQUFwUyxFQUFBa0QsR0FDQWxELEVBQUFzTixHQUlBdE4sRUFBQVksT0FBQSxHQUNBeUUsR0FBQStNLEVBQUFBLEVBQUEsR0FBQTlFLEdBQ0F6SCxFQUFBd00sV0FBQXZULGVBQUFzVCxFQUFBek0sZUFDQTRHLEdBQUEsU0FBQTdCLEVBQUE1RixHQUlBLElBSEEsSUFBQXdOLEVBQ0FDLEVBQUF2UyxFQUFBMEssRUFBQTRDLEdBQ0E3TCxFQUFBOFEsRUFBQTNSLE9BQ0FhLEtBRUFpSixFQURBNEgsRUFBQTVULEVBQUFnTSxFQUFBNkgsRUFBQTlRLE9BQ0FxRCxFQUFBd04sR0FBQUMsRUFBQTlRLE1BR0EsU0FBQUQsR0FDQSxPQUFBeEIsRUFBQXdCLEVBQUEsRUFBQTZELEtBSUFyRixJQUlBNkgsU0FFQTJLLElBQUFqRyxHQUFBLFNBQUF6TSxHQUlBLElBQUE0TyxLQUNBakssS0FDQWdPLEVBQUF4TSxFQUFBbkcsRUFBQXVELFFBQUFuRCxFQUFBLE9BRUEsT0FBQXVTLEVBQUF2UCxHQUNBcUosR0FBQSxTQUFBN0IsRUFBQTVGLEVBQUEvRSxFQUFBNFIsR0FNQSxJQUxBLElBQUFuUSxFQUNBa1IsRUFBQUQsRUFBQS9ILEVBQUEsS0FBQWlILE1BQ0FsUSxFQUFBaUosRUFBQTlKLE9BR0FhLE1BQ0FELEVBQUFrUixFQUFBalIsTUFDQWlKLEVBQUFqSixLQUFBcUQsRUFBQXJELEdBQUFELE1BSUEsU0FBQUEsRUFBQXpCLEVBQUE0UixHQUtBLE9BSkFqRCxFQUFBLEdBQUFsTixFQUNBaVIsRUFBQS9ELEVBQUEsS0FBQWlELEVBQUFsTixHQUVBaUssRUFBQSxHQUFBLE1BQ0FqSyxFQUFBNkMsU0FJQXFMLElBQUFwRyxHQUFBLFNBQUF6TSxHQUNBLE9BQUEsU0FBQTBCLEdBQ0EsT0FBQW9FLEdBQUE5RixFQUFBMEIsR0FBQVosT0FBQSxLQUlBK0YsU0FBQTRGLEdBQUEsU0FBQS9NLEdBRUEsT0FEQUEsRUFBQUEsRUFBQTZELFFBQUE4RixFQUFBQyxJQUNBLFNBQUE1SCxHQUNBLE9BQUFBLEVBQUE2TyxhQUFBN08sRUFBQW9SLFdBQUE5TSxFQUFBdEUsSUFBQTlDLFFBQUFjLElBQUEsS0FXQXFULEtBQUF0RyxHQUFBLFNBQUFzRyxHQU1BLE9BSkF6SyxFQUFBb0QsS0FBQXFILEdBQUEsS0FDQWpOLEdBQUFyQyxNQUFBLHFCQUFBc1AsR0FFQUEsRUFBQUEsRUFBQXhQLFFBQUE4RixFQUFBQyxJQUFBekQsY0FDQSxTQUFBbkUsR0FDQSxJQUFBc1IsRUFDQSxHQUNBLEdBQUFBLEVBQUF0TSxFQUNBaEYsRUFBQXFSLEtBQ0FyUixFQUFBa0ssYUFBQSxhQUFBbEssRUFBQWtLLGFBQUEsUUFHQSxPQURBb0gsRUFBQUEsRUFBQW5OLGlCQUNBa04sR0FBQSxJQUFBQyxFQUFBcFUsUUFBQW1VLEVBQUEsWUFFQXJSLEVBQUFBLEVBQUE3QixhQUFBLElBQUE2QixFQUFBK0ksVUFDQSxPQUFBLEtBS0E1SCxPQUFBLFNBQUFuQixHQUNBLElBQUF1UixFQUFBL1UsRUFBQWdWLFVBQUFoVixFQUFBZ1YsU0FBQUQsS0FDQSxPQUFBQSxHQUFBQSxFQUFBeFUsTUFBQSxLQUFBaUQsRUFBQTRKLElBR0E2SCxLQUFBLFNBQUF6UixHQUNBLE9BQUFBLElBQUErRSxHQUdBMk0sTUFBQSxTQUFBMVIsR0FDQSxPQUFBQSxJQUFBM0QsRUFBQXNWLGlCQUFBdFYsRUFBQXVWLFVBQUF2VixFQUFBdVYsZ0JBQUE1UixFQUFBbUMsTUFBQW5DLEVBQUE2UixPQUFBN1IsRUFBQThSLFdBSUFDLFFBQUFwRyxJQUFBLEdBQ0FoRCxTQUFBZ0QsSUFBQSxHQUVBcUcsUUFBQSxTQUFBaFMsR0FHQSxJQUFBaUssRUFBQWpLLEVBQUFpSyxTQUFBOUYsY0FDQSxNQUFBLFVBQUE4RixLQUFBakssRUFBQWdTLFNBQUEsV0FBQS9ILEtBQUFqSyxFQUFBaVMsVUFHQUEsU0FBQSxTQUFBalMsR0FPQSxPQUpBQSxFQUFBN0IsWUFDQTZCLEVBQUE3QixXQUFBK1QsZUFHQSxJQUFBbFMsRUFBQWlTLFVBSUFFLE1BQUEsU0FBQW5TLEdBS0EsSUFBQUEsRUFBQUEsRUFBQThPLFdBQUE5TyxFQUFBQSxFQUFBQSxFQUFBMEwsWUFDQSxHQUFBMUwsRUFBQStJLFNBQUEsRUFDQSxPQUFBLEVBR0EsT0FBQSxHQUdBeUgsT0FBQSxTQUFBeFEsR0FDQSxPQUFBcUUsRUFBQWdDLFFBQUEsTUFBQXJHLElBSUFvUyxPQUFBLFNBQUFwUyxHQUNBLE9BQUF1SCxFQUFBeUMsS0FBQWhLLEVBQUFpSyxXQUdBaUQsTUFBQSxTQUFBbE4sR0FDQSxPQUFBc0gsRUFBQTBDLEtBQUFoSyxFQUFBaUssV0FHQW9JLE9BQUEsU0FBQXJTLEdBQ0EsSUFBQWMsRUFBQWQsRUFBQWlLLFNBQUE5RixjQUNBLE1BQUEsVUFBQXJELEdBQUEsV0FBQWQsRUFBQW1DLE1BQUEsV0FBQXJCLEdBR0E5QyxLQUFBLFNBQUFnQyxHQUNBLElBQUFvTyxFQUNBLE1BQUEsVUFBQXBPLEVBQUFpSyxTQUFBOUYsZUFDQSxTQUFBbkUsRUFBQW1DLE9BSUEsT0FBQWlNLEVBQUFwTyxFQUFBa0ssYUFBQSxVQUFBLFNBQUFrRSxFQUFBakssZ0JBSUEvRCxNQUFBeUwsR0FBQSxXQUNBLE9BQUEsS0FHQXZMLEtBQUF1TCxHQUFBLFNBQUFFLEVBQUEzTSxHQUNBLE9BQUFBLEVBQUEsS0FHQWlCLEdBQUF3TCxHQUFBLFNBQUFFLEVBQUEzTSxFQUFBME0sR0FDQSxPQUFBQSxFQUFBLEVBQUFBLEVBQUExTSxFQUFBME0sS0FHQXdHLEtBQUF6RyxHQUFBLFNBQUFFLEVBQUEzTSxHQUVBLElBREEsSUFBQWEsRUFBQSxFQUNBQSxFQUFBYixFQUFBYSxHQUFBLEVBQ0E4TCxFQUFBOU8sS0FBQWdELEdBRUEsT0FBQThMLElBR0F3RyxJQUFBMUcsR0FBQSxTQUFBRSxFQUFBM00sR0FFQSxJQURBLElBQUFhLEVBQUEsRUFDQUEsRUFBQWIsRUFBQWEsR0FBQSxFQUNBOEwsRUFBQTlPLEtBQUFnRCxHQUVBLE9BQUE4TCxJQUdBeUcsR0FBQTNHLEdBQUEsU0FBQUUsRUFBQTNNLEVBQUEwTSxHQUVBLElBREEsSUFBQTdMLEVBQUE2TCxFQUFBLEVBQUFBLEVBQUExTSxFQUFBME0sSUFDQTdMLEdBQUEsR0FDQThMLEVBQUE5TyxLQUFBZ0QsR0FFQSxPQUFBOEwsSUFHQTBHLEdBQUE1RyxHQUFBLFNBQUFFLEVBQUEzTSxFQUFBME0sR0FFQSxJQURBLElBQUE3TCxFQUFBNkwsRUFBQSxFQUFBQSxFQUFBMU0sRUFBQTBNLElBQ0E3TCxFQUFBYixHQUNBMk0sRUFBQTlPLEtBQUFnRCxHQUVBLE9BQUE4TCxPQUtBMUYsUUFBQSxJQUFBaEMsRUFBQWdDLFFBQUEsR0FHQSxJQUFBcEcsS0FBQXlTLE9BQUEsRUFBQUMsVUFBQSxFQUFBQyxNQUFBLEVBQUFDLFVBQUEsRUFBQUMsT0FBQSxHQUNBek8sRUFBQWdDLFFBQUFwRyxJQXhwQ0FrQyxHQXdwQ0FsQyxFQXZwQ0EsU0FBQUQsR0FFQSxNQUFBLFVBREFBLEVBQUFpSyxTQUFBOUYsZUFDQW5FLEVBQUFtQyxPQUFBQSxLQUhBLElBQUFBLEdBMHBDQSxJQUFBbEMsS0FBQThTLFFBQUEsRUFBQUMsT0FBQSxHQUNBM08sRUFBQWdDLFFBQUFwRyxJQWhwQ0FrQyxHQWdwQ0FsQyxFQS9vQ0EsU0FBQUQsR0FDQSxJQUFBYyxFQUFBZCxFQUFBaUssU0FBQTlGLGNBQ0EsT0FBQSxVQUFBckQsR0FBQSxXQUFBQSxJQUFBZCxFQUFBbUMsT0FBQUEsS0FIQSxJQUFBQSxHQW9wQ0EsU0FBQTBPLE1BQ0FBLEdBQUE1UixVQUFBb0YsRUFBQTRPLFFBQUE1TyxFQUFBZ0MsUUFDQWhDLEVBQUF3TSxXQUFBLElBQUFBLEdBRUFyTSxFQUFBSixHQUFBSSxTQUFBLFNBQUFsRyxFQUFBNFUsR0FDQSxJQUFBbkMsRUFBQTFILEVBQUE4SixFQUFBaFIsRUFDQWlSLEVBQUE5SixFQUFBK0osRUFDQUMsRUFBQTdOLEVBQUFuSCxFQUFBLEtBRUEsR0FBQWdWLEVBQ0EsT0FBQUosRUFBQSxFQUFBSSxFQUFBdlcsTUFBQSxHQU9BLElBSkFxVyxFQUFBOVUsRUFDQWdMLEtBQ0ErSixFQUFBaFAsRUFBQWtMLFVBRUE2RCxHQUFBLENBR0FyQyxLQUFBMUgsRUFBQTdDLEVBQUFrRCxLQUFBMEosTUFDQS9KLElBRUErSixFQUFBQSxFQUFBclcsTUFBQXNNLEVBQUEsR0FBQWpLLFNBQUFnVSxHQUVBOUosRUFBQXJNLEtBQUFrVyxPQUdBcEMsR0FBQSxHQUdBMUgsRUFBQTVDLEVBQUFpRCxLQUFBMEosTUFDQXJDLEVBQUExSCxFQUFBeUIsUUFDQXFJLEVBQUFsVyxNQUNBd0csTUFBQXNOLEVBRUE1TyxLQUFBa0gsRUFBQSxHQUFBeEgsUUFBQW5ELEVBQUEsT0FFQTBVLEVBQUFBLEVBQUFyVyxNQUFBZ1UsRUFBQTNSLFNBSUEsSUFBQStDLEtBQUFrQyxFQUFBdUksU0FDQXZELEVBQUF4QyxFQUFBMUUsR0FBQXVILEtBQUEwSixLQUFBQyxFQUFBbFIsTUFDQWtILEVBQUFnSyxFQUFBbFIsR0FBQWtILE1BQ0EwSCxFQUFBMUgsRUFBQXlCLFFBQ0FxSSxFQUFBbFcsTUFDQXdHLE1BQUFzTixFQUNBNU8sS0FBQUEsRUFDQW1CLFFBQUErRixJQUVBK0osRUFBQUEsRUFBQXJXLE1BQUFnVSxFQUFBM1IsU0FJQSxJQUFBMlIsRUFDQSxNQU9BLE9BQUFtQyxFQUNBRSxFQUFBaFUsT0FDQWdVLEVBQ0FoUCxHQUFBckMsTUFBQXpELEdBRUFtSCxFQUFBbkgsRUFBQWdMLEdBQUF2TSxNQUFBLElBR0EsU0FBQXFOLEdBQUErSSxHQUlBLElBSEEsSUFBQWxULEVBQUEsRUFDQU0sRUFBQTRTLEVBQUEvVCxPQUNBZCxFQUFBLEdBQ0EyQixFQUFBTSxFQUFBTixJQUNBM0IsR0FBQTZVLEVBQUFsVCxHQUFBd0QsTUFFQSxPQUFBbkYsRUFHQSxTQUFBb0ssR0FBQXVJLEVBQUFzQyxFQUFBQyxHQUNBLElBQUE1SyxFQUFBMkssRUFBQTNLLElBQ0E2SyxFQUFBRixFQUFBMUssS0FDQStCLEVBQUE2SSxHQUFBN0ssRUFDQThLLEVBQUFGLEdBQUEsZUFBQTVJLEVBQ0ErSSxFQUFBck8sSUFFQSxPQUFBaU8sRUFBQW5ULE1BRUEsU0FBQUosRUFBQXpCLEVBQUE0UixHQUNBLEtBQUFuUSxFQUFBQSxFQUFBNEksSUFDQSxHQUFBLElBQUE1SSxFQUFBK0ksVUFBQTJLLEVBQ0EsT0FBQXpDLEVBQUFqUixFQUFBekIsRUFBQTRSLEdBR0EsT0FBQSxHQUlBLFNBQUFuUSxFQUFBekIsRUFBQTRSLEdBQ0EsSUFBQXlELEVBQUF4RCxFQUFBQyxFQUNBd0QsR0FBQXhPLEVBQUFzTyxHQUdBLEdBQUF4RCxHQUNBLEtBQUFuUSxFQUFBQSxFQUFBNEksSUFDQSxJQUFBLElBQUE1SSxFQUFBK0ksVUFBQTJLLElBQ0F6QyxFQUFBalIsRUFBQXpCLEVBQUE0UixHQUNBLE9BQUEsT0FLQSxLQUFBblEsRUFBQUEsRUFBQTRJLElBQ0EsR0FBQSxJQUFBNUksRUFBQStJLFVBQUEySyxFQU9BLEdBRkF0RCxHQUpBQyxFQUFBclEsRUFBQTBCLEtBQUExQixFQUFBMEIsUUFJQTFCLEVBQUEyUSxZQUFBTixFQUFBclEsRUFBQTJRLGNBRUE4QyxHQUFBQSxJQUFBelQsRUFBQWlLLFNBQUE5RixjQUNBbkUsRUFBQUEsRUFBQTRJLElBQUE1SSxNQUNBLENBQUEsSUFBQTRULEVBQUF4RCxFQUFBeEYsS0FDQWdKLEVBQUEsS0FBQXZPLEdBQUF1TyxFQUFBLEtBQUFELEVBR0EsT0FBQUUsRUFBQSxHQUFBRCxFQUFBLEdBTUEsR0FIQXhELEVBQUF4RixHQUFBaUosRUFHQUEsRUFBQSxHQUFBNUMsRUFBQWpSLEVBQUF6QixFQUFBNFIsR0FDQSxPQUFBLEVBTUEsT0FBQSxHQUlBLFNBQUEyRCxHQUFBQyxHQUNBLE9BQUFBLEVBQUEzVSxPQUFBLEVBQ0EsU0FBQVksRUFBQXpCLEVBQUE0UixHQUVBLElBREEsSUFBQWxRLEVBQUE4VCxFQUFBM1UsT0FDQWEsS0FDQSxJQUFBOFQsRUFBQTlULEdBQUFELEVBQUF6QixFQUFBNFIsR0FDQSxPQUFBLEVBR0EsT0FBQSxHQUVBNEQsRUFBQSxHQVlBLFNBQUFDLEdBQUE5QyxFQUFBblIsRUFBQTZNLEVBQUFyTyxFQUFBNFIsR0FPQSxJQU5BLElBQUFuUSxFQUNBaVUsS0FDQWhVLEVBQUEsRUFDQU0sRUFBQTJRLEVBQUE5UixPQUNBOFUsRUFBQSxNQUFBblUsRUFFQUUsRUFBQU0sRUFBQU4sS0FDQUQsRUFBQWtSLEVBQUFqUixNQUNBMk0sSUFBQUEsRUFBQTVNLEVBQUF6QixFQUFBNFIsS0FDQThELEVBQUFoWCxLQUFBK0MsR0FDQWtVLEdBQ0FuVSxFQUFBOUMsS0FBQWdELEtBTUEsT0FBQWdVLEVBR0EsU0FBQUUsR0FBQTVFLEVBQUFqUixFQUFBMlMsRUFBQW1ELEVBQUFDLEVBQUFDLEdBT0EsT0FOQUYsSUFBQUEsRUFBQTFTLEtBQ0EwUyxFQUFBRCxHQUFBQyxJQUVBQyxJQUFBQSxFQUFBM1MsS0FDQTJTLEVBQUFGLEdBQUFFLEVBQUFDLElBRUF2SixHQUFBLFNBQUE3QixFQUFBakcsRUFBQTFFLEVBQUE0UixHQUNBLElBQUFvRSxFQUFBdFUsRUFBQUQsRUFDQXdVLEtBQ0FDLEtBQ0FDLEVBQUF6UixFQUFBN0QsT0FHQUssRUFBQXlKLEdBNUNBLFNBQUE1SyxFQUFBcVcsRUFBQTFSLEdBR0EsSUFGQSxJQUFBaEQsRUFBQSxFQUNBTSxFQUFBb1UsRUFBQXZWLE9BQ0FhLEVBQUFNLEVBQUFOLElBQ0FtRSxHQUFBOUYsRUFBQXFXLEVBQUExVSxHQUFBZ0QsR0FFQSxPQUFBQSxFQXNDQTJSLENBQUF0VyxHQUFBLElBQUFDLEVBQUF3SyxVQUFBeEssR0FBQUEsTUFHQXNXLEdBQUF0RixJQUFBckcsR0FBQTVLLEVBRUFtQixFQURBdVUsR0FBQXZVLEVBQUErVSxFQUFBakYsRUFBQWhSLEVBQUE0UixHQUdBMkUsRUFBQTdELEVBRUFvRCxJQUFBbkwsRUFBQXFHLEVBQUFtRixHQUFBTixNQU1BblIsRUFDQTRSLEVBUUEsR0FMQTVELEdBQ0FBLEVBQUE0RCxFQUFBQyxFQUFBdlcsRUFBQTRSLEdBSUFpRSxFQU1BLElBTEFHLEVBQUFQLEdBQUFjLEVBQUFMLEdBQ0FMLEVBQUFHLEtBQUFoVyxFQUFBNFIsR0FHQWxRLEVBQUFzVSxFQUFBblYsT0FDQWEsTUFDQUQsRUFBQXVVLEVBQUF0VSxNQUNBNlUsRUFBQUwsRUFBQXhVLE1BQUE0VSxFQUFBSixFQUFBeFUsSUFBQUQsSUFLQSxHQUFBa0osR0FDQSxHQUFBbUwsR0FBQTlFLEVBQUEsQ0FDQSxHQUFBOEUsRUFBQSxDQUlBLElBRkFFLEtBQ0F0VSxFQUFBNlUsRUFBQTFWLE9BQ0FhLE1BQ0FELEVBQUE4VSxFQUFBN1UsS0FFQXNVLEVBQUF0WCxLQUFBNFgsRUFBQTVVLEdBQUFELEdBR0FxVSxFQUFBLEtBQUFTLEtBQUFQLEVBQUFwRSxHQUtBLElBREFsUSxFQUFBNlUsRUFBQTFWLE9BQ0FhLE1BQ0FELEVBQUE4VSxFQUFBN1UsTUFDQXNVLEVBQUFGLEVBQUFuWCxFQUFBZ00sRUFBQWxKLEdBQUF3VSxFQUFBdlUsS0FBQSxJQUVBaUosRUFBQXFMLEtBQUF0UixFQUFBc1IsR0FBQXZVLFVBT0E4VSxFQUFBZCxHQUNBYyxJQUFBN1IsRUFDQTZSLEVBQUFuVSxPQUFBK1QsRUFBQUksRUFBQTFWLFFBQ0EwVixHQUVBVCxFQUNBQSxFQUFBLEtBQUFwUixFQUFBNlIsRUFBQTNFLEdBRUFsVCxFQUFBaUQsTUFBQStDLEVBQUE2UixLQU1BLFNBQUFDLEdBQUE1QixHQXdCQSxJQXZCQSxJQUFBNkIsRUFBQS9ELEVBQUF6USxFQUNBRCxFQUFBNFMsRUFBQS9ULE9BQ0E2VixFQUFBNVEsRUFBQTZLLFNBQUFpRSxFQUFBLEdBQUFoUixNQUNBK1MsRUFBQUQsR0FBQTVRLEVBQUE2SyxTQUFBLEtBQ0FqUCxFQUFBZ1YsRUFBQSxFQUFBLEVBR0FFLEVBQUF6TSxHQUFBLFNBQUExSSxHQUNBLE9BQUFBLElBQUFnVixHQUNBRSxHQUFBLEdBQ0FFLEVBQUExTSxHQUFBLFNBQUExSSxHQUNBLE9BQUE5QyxFQUFBOFgsRUFBQWhWLElBQUEsR0FDQWtWLEdBQUEsR0FDQW5CLEdBQUEsU0FBQS9ULEVBQUF6QixFQUFBNFIsR0FDQSxJQUFBelEsR0FBQXVWLElBQUE5RSxHQUFBNVIsSUFBQW9HLE1BQ0FxUSxFQUFBelcsR0FBQXdLLFNBQ0FvTSxFQUFBblYsRUFBQXpCLEVBQUE0UixHQUNBaUYsRUFBQXBWLEVBQUF6QixFQUFBNFIsSUFHQSxPQURBNkUsRUFBQSxLQUNBdFYsSUFHQU8sRUFBQU0sRUFBQU4sSUFDQSxHQUFBZ1IsRUFBQTVNLEVBQUE2SyxTQUFBaUUsRUFBQWxULEdBQUFrQyxNQUNBNFIsR0FBQXJMLEdBQUFvTCxHQUFBQyxHQUFBOUMsUUFDQSxDQUlBLElBSEFBLEVBQUE1TSxFQUFBdUksT0FBQXVHLEVBQUFsVCxHQUFBa0MsTUFBQWpDLE1BQUEsS0FBQWlULEVBQUFsVCxHQUFBcUQsVUFHQTVCLEdBQUEsQ0FHQSxJQURBbEIsSUFBQVAsRUFDQU8sRUFBQUQsSUFDQThELEVBQUE2SyxTQUFBaUUsRUFBQTNTLEdBQUEyQixNQURBM0IsS0FLQSxPQUFBMlQsR0FDQWxVLEVBQUEsR0FBQTZULEdBQUFDLEdBQ0E5VCxFQUFBLEdBQUFtSyxHQUVBK0ksRUFBQXBXLE1BQUEsRUFBQWtELEVBQUEsR0FBQWpELFFBQUF5RyxNQUFBLE1BQUEwUCxFQUFBbFQsRUFBQSxHQUFBa0MsS0FBQSxJQUFBLE1BQ0FOLFFBQUFuRCxFQUFBLE1BQ0F1UyxFQUNBaFIsRUFBQU8sR0FBQXVVLEdBQUE1QixFQUFBcFcsTUFBQWtELEVBQUFPLElBQ0FBLEVBQUFELEdBQUF3VSxHQUFBNUIsRUFBQUEsRUFBQXBXLE1BQUF5RCxJQUNBQSxFQUFBRCxHQUFBNkosR0FBQStJLElBR0FZLEVBQUE5VyxLQUFBZ1UsR0FJQSxPQUFBNkMsR0FBQUMsR0E4UkEsT0E1S0F0UCxFQUFBTCxHQUFBSyxRQUFBLFNBQUFuRyxFQUFBK0ssR0FDQSxJQUFBcEosRUFDQW9WLEtBQ0FDLEtBQ0FoQyxFQUFBNU4sRUFBQXBILEVBQUEsS0FFQSxJQUFBZ1YsRUFBQSxDQU1BLElBSkFqSyxJQUNBQSxFQUFBN0UsRUFBQWxHLElBRUEyQixFQUFBb0osRUFBQWpLLE9BQ0FhLE1BQ0FxVCxFQUFBeUIsR0FBQTFMLEVBQUFwSixLQUNBeUIsR0FDQTJULEVBQUFwWSxLQUFBcVcsR0FFQWdDLEVBQUFyWSxLQUFBcVcsSUFLQUEsRUFBQTVOLEVBQUFwSCxFQXJJQSxTQUFBZ1gsRUFBQUQsR0FDQSxJQUFBRSxFQUFBRixFQUFBalcsT0FBQSxFQUNBb1csRUFBQUYsRUFBQWxXLE9BQUEsRUFDQXFXLEVBQUEsU0FBQXZNLEVBQUEzSyxFQUFBNFIsRUFBQWxOLEVBQUF5UyxHQUNBLElBQUExVixFQUFBUSxFQUFBeVEsRUFDQTBFLEVBQUEsRUFDQTFWLEVBQUEsSUFDQWlSLEVBQUFoSSxNQUNBME0sS0FDQUMsRUFBQWxSLEVBRUFsRixFQUFBeUosR0FBQXNNLEdBQUFuUixFQUFBeUksS0FBQSxJQUFBLElBQUE0SSxHQUVBSSxFQUFBelEsR0FBQSxNQUFBd1EsRUFBQSxFQUFBbFUsS0FBQUMsVUFBQSxHQUNBckIsRUFBQWQsRUFBQUwsT0FTQSxJQVBBc1csSUFDQS9RLEVBQUFwRyxJQUFBbEMsR0FBQWtDLEdBQUFtWCxHQU1BelYsSUFBQU0sR0FBQSxPQUFBUCxFQUFBUCxFQUFBUSxJQUFBQSxJQUFBLENBQ0EsR0FBQXVWLEdBQUF4VixFQUFBLENBTUEsSUFMQVEsRUFBQSxFQUNBakMsR0FBQXlCLEVBQUF5SixnQkFBQXBOLElBQ0F5SSxFQUFBOUUsR0FDQW1RLEdBQUFuTCxHQUVBaU0sRUFBQXFFLEVBQUE5VSxNQUNBLEdBQUF5USxFQUFBalIsRUFBQXpCLEdBQUFsQyxFQUFBOFQsR0FBQSxDQUNBbE4sRUFBQWhHLEtBQUErQyxHQUNBLE1BR0EwVixJQUNBclEsRUFBQXlRLEdBS0FQLEtBRUF2VixHQUFBaVIsR0FBQWpSLElBQ0EyVixJQUlBek0sR0FDQWdJLEVBQUFqVSxLQUFBK0MsSUFnQkEsR0FUQTJWLEdBQUExVixFQVNBc1YsR0FBQXRWLElBQUEwVixFQUFBLENBRUEsSUFEQW5WLEVBQUEsRUFDQXlRLEVBQUFvRSxFQUFBN1UsTUFDQXlRLEVBQUFDLEVBQUEwRSxFQUFBclgsRUFBQTRSLEdBR0EsR0FBQWpILEVBQUEsQ0FFQSxHQUFBeU0sRUFBQSxFQUNBLEtBQUExVixLQUNBaVIsRUFBQWpSLElBQUEyVixFQUFBM1YsS0FDQTJWLEVBQUEzVixHQUFBNkYsRUFBQXJJLEtBQUF3RixJQU1BMlMsRUFBQTVCLEdBQUE0QixHQUlBM1ksRUFBQWlELE1BQUErQyxFQUFBMlMsR0FHQUYsSUFBQXhNLEdBQUEwTSxFQUFBeFcsT0FBQSxHQUNBdVcsRUFBQU4sRUFBQWpXLE9BQUEsR0FFQWdGLEdBQUFxSyxXQUFBeEwsR0FVQSxPQUxBeVMsSUFDQXJRLEVBQUF5USxFQUNBblIsRUFBQWtSLEdBR0EzRSxHQUdBLE9BQUFxRSxFQUNBeEssR0FBQTBLLEdBQ0FBLEVBeUJBTSxDQUFBVCxFQUFBRCxLQUdBL1csU0FBQUEsRUFFQSxPQUFBZ1YsR0FZQTVPLEVBQUFOLEdBQUFNLE9BQUEsU0FBQXBHLEVBQUFDLEVBQUEwRSxFQUFBaUcsR0FDQSxJQUFBakosRUFBQWtULEVBQUE2QyxFQUFBN1QsRUFBQTJLLEVBQ0FtSixFQUFBLG1CQUFBM1gsR0FBQUEsRUFDQStLLEdBQUFILEdBQUExRSxFQUFBbEcsRUFBQTJYLEVBQUEzWCxVQUFBQSxHQU1BLEdBSkEyRSxFQUFBQSxNQUlBLElBQUFvRyxFQUFBakssT0FBQSxDQUlBLElBREErVCxFQUFBOUosRUFBQSxHQUFBQSxFQUFBLEdBQUF0TSxNQUFBLElBQ0FxQyxPQUFBLEdBQUEsUUFBQTRXLEVBQUE3QyxFQUFBLElBQUFoUixNQUNBLElBQUE1RCxFQUFBd0ssVUFBQS9ELEdBQUFYLEVBQUE2SyxTQUFBaUUsRUFBQSxHQUFBaFIsTUFBQSxDQUdBLEtBREE1RCxHQUFBOEYsRUFBQXlJLEtBQUEsR0FBQWtKLEVBQUExUyxRQUFBLEdBQUF6QixRQUFBOEYsRUFBQUMsSUFBQXJKLFFBQUEsSUFFQSxPQUFBMEUsRUFHQWdULElBQ0ExWCxFQUFBQSxFQUFBSixZQUdBRyxFQUFBQSxFQUFBdkIsTUFBQW9XLEVBQUFySSxRQUFBckgsTUFBQXJFLFFBS0EsSUFEQWEsRUFBQTRHLEVBQUEsYUFBQW1ELEtBQUExTCxHQUFBLEVBQUE2VSxFQUFBL1QsT0FDQWEsTUFDQStWLEVBQUE3QyxFQUFBbFQsSUFHQW9FLEVBQUE2SyxTQUFBL00sRUFBQTZULEVBQUE3VCxRQUdBLElBQUEySyxFQUFBekksRUFBQXlJLEtBQUEzSyxNQUVBK0csRUFBQTRELEVBQ0FrSixFQUFBMVMsUUFBQSxHQUFBekIsUUFBQThGLEVBQUFDLElBQ0FGLEVBQUFzQyxLQUFBbUosRUFBQSxHQUFBaFIsT0FBQW1JLEdBQUEvTCxFQUFBSixhQUFBSSxJQUNBLENBS0EsR0FGQTRVLEVBQUF4UyxPQUFBVixFQUFBLEtBQ0EzQixFQUFBNEssRUFBQTlKLFFBQUFnTCxHQUFBK0ksSUFHQSxPQURBbFcsRUFBQWlELE1BQUErQyxFQUFBaUcsR0FDQWpHLEVBR0EsT0FlQSxPQVBBZ1QsR0FBQXhSLEVBQUFuRyxFQUFBK0ssSUFDQUgsRUFDQTNLLEdBQ0F5RyxFQUNBL0IsR0FDQTFFLEdBQUFtSixFQUFBc0MsS0FBQTFMLElBQUFnTSxHQUFBL0wsRUFBQUosYUFBQUksR0FFQTBFLEdBTUF2RixFQUFBa1IsV0FBQWxOLEVBQUF3QyxNQUFBLElBQUF4RCxLQUFBaUYsR0FBQTBFLEtBQUEsTUFBQTNJLEVBSUFoRSxFQUFBaVIsbUJBQUE5SixFQUdBQyxJQUlBcEgsRUFBQW1RLGFBQUE3QyxHQUFBLFNBQUFDLEdBRUEsT0FBQSxFQUFBQSxFQUFBd0Msd0JBQUFwUixFQUFBMEIsY0FBQSxlQU1BaU4sR0FBQSxTQUFBQyxHQUVBLE9BREFBLEVBQUFnQyxVQUFBLG1CQUNBLE1BQUFoQyxFQUFBNkQsV0FBQTVFLGFBQUEsV0FFQWdCLEdBQUEseUJBQUEsU0FBQWxMLEVBQUFjLEVBQUF5RCxHQUNBLElBQUFBLEVBQ0EsT0FBQXZFLEVBQUFrSyxhQUFBcEosRUFBQSxTQUFBQSxFQUFBcUQsY0FBQSxFQUFBLEtBT0F6RyxFQUFBMEksWUFBQTRFLEdBQUEsU0FBQUMsR0FHQSxPQUZBQSxFQUFBZ0MsVUFBQSxXQUNBaEMsRUFBQTZELFdBQUEzRSxhQUFBLFFBQUEsSUFDQSxLQUFBYyxFQUFBNkQsV0FBQTVFLGFBQUEsWUFFQWdCLEdBQUEsUUFBQSxTQUFBbEwsRUFBQWMsRUFBQXlELEdBQ0EsSUFBQUEsR0FBQSxVQUFBdkUsRUFBQWlLLFNBQUE5RixjQUNBLE9BQUFuRSxFQUFBa1csZUFPQWxMLEdBQUEsU0FBQUMsR0FDQSxPQUFBLE1BQUFBLEVBQUFmLGFBQUEsZUFFQWdCLEdBQUFqRixFQUFBLFNBQUFqRyxFQUFBYyxFQUFBeUQsR0FDQSxJQUFBOEosRUFDQSxJQUFBOUosRUFDQSxPQUFBLElBQUF2RSxFQUFBYyxHQUFBQSxFQUFBcUQsZUFDQWtLLEVBQUFyTyxFQUFBK00saUJBQUFqTSxLQUFBdU4sRUFBQUMsVUFDQUQsRUFBQTVLLE1BQ0EsT0FLQVcsR0Foc0VBLENBa3NFQTVILEdBSUE2QixFQUFBeU8sS0FBQTFJLEVBQ0EvRixFQUFBNlAsS0FBQTlKLEVBQUE0SyxVQUdBM1EsRUFBQTZQLEtBQUEsS0FBQTdQLEVBQUE2UCxLQUFBN0gsUUFDQWhJLEVBQUFvUSxXQUFBcFEsRUFBQThYLE9BQUEvUixFQUFBcUssV0FDQXBRLEVBQUFMLEtBQUFvRyxFQUFBRSxRQUNBakcsRUFBQStYLFNBQUFoUyxFQUFBRyxNQUNBbEcsRUFBQThHLFNBQUFmLEVBQUFlLFNBQ0E5RyxFQUFBZ1ksZUFBQWpTLEVBQUFtSyxPQUtBLElBQUEzRixFQUFBLFNBQUE1SSxFQUFBNEksRUFBQTBOLEdBSUEsSUFIQSxJQUFBdkYsS0FDQXdGLE9BQUE5VSxJQUFBNlUsR0FFQXRXLEVBQUFBLEVBQUE0SSxLQUFBLElBQUE1SSxFQUFBK0ksVUFDQSxHQUFBLElBQUEvSSxFQUFBK0ksU0FBQSxDQUNBLEdBQUF3TixHQUFBbFksRUFBQTJCLEdBQUF3VyxHQUFBRixHQUNBLE1BRUF2RixFQUFBOVQsS0FBQStDLEdBR0EsT0FBQStRLEdBSUEwRixFQUFBLFNBQUFDLEVBQUExVyxHQUdBLElBRkEsSUFBQStRLEtBRUEyRixFQUFBQSxFQUFBQSxFQUFBaEwsWUFDQSxJQUFBZ0wsRUFBQTNOLFVBQUEyTixJQUFBMVcsR0FDQStRLEVBQUE5VCxLQUFBeVosR0FJQSxPQUFBM0YsR0FJQTRGLEVBQUF0WSxFQUFBNlAsS0FBQTdFLE1BQUFoQyxhQUlBLFNBQUE0QyxFQUFBakssRUFBQWMsR0FFQSxPQUFBZCxFQUFBaUssVUFBQWpLLEVBQUFpSyxTQUFBOUYsZ0JBQUFyRCxFQUFBcUQsY0FHQSxJQUFBeVMsRUFBQSxrRUFJQUMsRUFBQSxpQkFHQSxTQUFBQyxFQUFBM0ksRUFBQTRJLEVBQUEvRixHQUNBLE9BQUEzUyxFQUFBZ0QsV0FBQTBWLEdBQ0ExWSxFQUFBK0UsS0FBQStLLEVBQUEsU0FBQW5PLEVBQUFDLEdBQ0EsUUFBQThXLEVBQUF0WixLQUFBdUMsRUFBQUMsRUFBQUQsS0FBQWdSLElBS0ErRixFQUFBaE8sU0FDQTFLLEVBQUErRSxLQUFBK0ssRUFBQSxTQUFBbk8sR0FDQSxPQUFBQSxJQUFBK1csSUFBQS9GLElBS0EsaUJBQUErRixFQUNBMVksRUFBQStFLEtBQUErSyxFQUFBLFNBQUFuTyxHQUNBLE9BQUE5QyxFQUFBTyxLQUFBc1osRUFBQS9XLElBQUEsSUFBQWdSLElBS0E2RixFQUFBN00sS0FBQStNLEdBQ0ExWSxFQUFBdU8sT0FBQW1LLEVBQUE1SSxFQUFBNkMsSUFJQStGLEVBQUExWSxFQUFBdU8sT0FBQW1LLEVBQUE1SSxHQUNBOVAsRUFBQStFLEtBQUErSyxFQUFBLFNBQUFuTyxHQUNBLE9BQUE5QyxFQUFBTyxLQUFBc1osRUFBQS9XLElBQUEsSUFBQWdSLEdBQUEsSUFBQWhSLEVBQUErSSxZQUlBMUssRUFBQXVPLE9BQUEsU0FBQXNCLEVBQUF6TyxFQUFBdVIsR0FDQSxJQUFBaFIsRUFBQVAsRUFBQSxHQU1BLE9BSkF1UixJQUNBOUMsRUFBQSxRQUFBQSxFQUFBLEtBR0EsSUFBQXpPLEVBQUFMLFFBQUEsSUFBQVksRUFBQStJLFNBQ0ExSyxFQUFBeU8sS0FBQUssZ0JBQUFuTixFQUFBa08sSUFBQWxPLE1BR0EzQixFQUFBeU8sS0FBQXhKLFFBQUE0SyxFQUFBN1AsRUFBQStFLEtBQUEzRCxFQUFBLFNBQUFPLEdBQ0EsT0FBQSxJQUFBQSxFQUFBK0ksYUFJQTFLLEVBQUFHLEdBQUFvQyxRQUNBa00sS0FBQSxTQUFBeE8sR0FDQSxJQUFBMkIsRUFBQVAsRUFDQWEsRUFBQTlELEtBQUEyQyxPQUNBNFgsRUFBQXZhLEtBRUEsR0FBQSxpQkFBQTZCLEVBQ0EsT0FBQTdCLEtBQUErQyxVQUFBbkIsRUFBQUMsR0FBQXNPLE9BQUEsV0FDQSxJQUFBM00sRUFBQSxFQUFBQSxFQUFBTSxFQUFBTixJQUNBLEdBQUE1QixFQUFBOEcsU0FBQTZSLEVBQUEvVyxHQUFBeEQsTUFDQSxPQUFBLEtBUUEsSUFGQWlELEVBQUFqRCxLQUFBK0MsY0FFQVMsRUFBQSxFQUFBQSxFQUFBTSxFQUFBTixJQUNBNUIsRUFBQXlPLEtBQUF4TyxFQUFBMFksRUFBQS9XLEdBQUFQLEdBR0EsT0FBQWEsRUFBQSxFQUFBbEMsRUFBQW9RLFdBQUEvTyxHQUFBQSxHQUVBa04sT0FBQSxTQUFBdE8sR0FDQSxPQUFBN0IsS0FBQStDLFVBQUFzWCxFQUFBcmEsS0FBQTZCLE9BQUEsS0FFQTBTLElBQUEsU0FBQTFTLEdBQ0EsT0FBQTdCLEtBQUErQyxVQUFBc1gsRUFBQXJhLEtBQUE2QixPQUFBLEtBRUFrWSxHQUFBLFNBQUFsWSxHQUNBLFFBQUF3WSxFQUNBcmEsS0FJQSxpQkFBQTZCLEdBQUFxWSxFQUFBM00sS0FBQTFMLEdBQ0FELEVBQUFDLEdBQ0FBLE9BQ0EsR0FDQWMsVUFTQSxJQUFBNlgsRUFNQXhQLEVBQUEsdUNBRUFwSixFQUFBRyxHQUFBQyxLQUFBLFNBQUFILEVBQUFDLEVBQUFrVCxHQUNBLElBQUFwSSxFQUFBckosRUFHQSxJQUFBMUIsRUFDQSxPQUFBN0IsS0FRQSxHQUhBZ1YsRUFBQUEsR0FBQXdGLEVBR0EsaUJBQUEzWSxFQUFBLENBYUEsS0FQQStLLEVBTEEsTUFBQS9LLEVBQUEsSUFDQSxNQUFBQSxFQUFBQSxFQUFBYyxPQUFBLElBQ0FkLEVBQUFjLFFBQUEsR0FHQSxLQUFBZCxFQUFBLE1BR0FtSixFQUFBaUMsS0FBQXBMLE1BSUErSyxFQUFBLElBQUE5SyxFQTZDQSxPQUFBQSxHQUFBQSxFQUFBVyxRQUNBWCxHQUFBa1QsR0FBQTNFLEtBQUF4TyxHQUtBN0IsS0FBQTBDLFlBQUFaLEdBQUF1TyxLQUFBeE8sR0FoREEsR0FBQStLLEVBQUEsR0FBQSxDQVlBLEdBWEE5SyxFQUFBQSxhQUFBRixFQUFBRSxFQUFBLEdBQUFBLEVBSUFGLEVBQUFzQixNQUFBbEQsS0FBQTRCLEVBQUE2WSxVQUNBN04sRUFBQSxHQUNBOUssR0FBQUEsRUFBQXdLLFNBQUF4SyxFQUFBa0wsZUFBQWxMLEVBQUFsQyxHQUNBLElBSUF1YSxFQUFBNU0sS0FBQVgsRUFBQSxLQUFBaEwsRUFBQWlELGNBQUEvQyxHQUNBLElBQUE4SyxLQUFBOUssRUFHQUYsRUFBQWdELFdBQUE1RSxLQUFBNE0sSUFDQTVNLEtBQUE0TSxHQUFBOUssRUFBQThLLElBSUE1TSxLQUFBMlIsS0FBQS9FLEVBQUE5SyxFQUFBOEssSUFLQSxPQUFBNU0sS0FZQSxPQVJBdUQsRUFBQTNELEVBQUFzTixlQUFBTixFQUFBLE9BS0E1TSxLQUFBLEdBQUF1RCxFQUNBdkQsS0FBQTJDLE9BQUEsR0FFQTNDLEtBY0EsT0FBQTZCLEVBQUF5SyxVQUNBdE0sS0FBQSxHQUFBNkIsRUFDQTdCLEtBQUEyQyxPQUFBLEVBQ0EzQyxNQUlBNEIsRUFBQWdELFdBQUEvQyxRQUNBbUQsSUFBQWdRLEVBQUEwRixNQUNBMUYsRUFBQTBGLE1BQUE3WSxHQUdBQSxFQUFBRCxHQUdBQSxFQUFBMkUsVUFBQTFFLEVBQUE3QixRQUlBd0MsVUFBQVosRUFBQUcsR0FHQXlZLEVBQUE1WSxFQUFBaEMsR0FHQSxJQUFBK2EsRUFBQSxpQ0FHQUMsR0FDQUMsVUFBQSxFQUNBQyxVQUFBLEVBQ0ExTyxNQUFBLEVBQ0EyTyxNQUFBLEdBR0FuWixFQUFBRyxHQUFBb0MsUUFDQXVRLElBQUEsU0FBQWhRLEdBQ0EsSUFBQXNXLEVBQUFwWixFQUFBOEMsRUFBQTFFLE1BQ0FpYixFQUFBRCxFQUFBclksT0FFQSxPQUFBM0MsS0FBQW1RLE9BQUEsV0FFQSxJQURBLElBQUEzTSxFQUFBLEVBQ0FBLEVBQUF5WCxFQUFBelgsSUFDQSxHQUFBNUIsRUFBQThHLFNBQUExSSxLQUFBZ2IsRUFBQXhYLElBQ0EsT0FBQSxLQU1BMFgsUUFBQSxTQUFBM0ksRUFBQXpRLEdBQ0EsSUFBQWdOLEVBQ0F0TCxFQUFBLEVBQ0F5WCxFQUFBamIsS0FBQTJDLE9BQ0EyUixLQUNBMEcsRUFBQSxpQkFBQXpJLEdBQUEzUSxFQUFBMlEsR0FHQSxJQUFBMkgsRUFBQTNNLEtBQUFnRixHQUNBLEtBQUEvTyxFQUFBeVgsRUFBQXpYLElBQ0EsSUFBQXNMLEVBQUE5TyxLQUFBd0QsR0FBQXNMLEdBQUFBLElBQUFoTixFQUFBZ04sRUFBQUEsRUFBQXBOLFdBR0EsR0FBQW9OLEVBQUF4QyxTQUFBLEtBQUEwTyxFQUNBQSxFQUFBRyxNQUFBck0sSUFBQSxFQUdBLElBQUFBLEVBQUF4QyxVQUNBMUssRUFBQXlPLEtBQUFLLGdCQUFBNUIsRUFBQXlELElBQUEsQ0FFQStCLEVBQUE5VCxLQUFBc08sR0FDQSxNQU1BLE9BQUE5TyxLQUFBK0MsVUFBQXVSLEVBQUEzUixPQUFBLEVBQUFmLEVBQUFvUSxXQUFBc0MsR0FBQUEsSUFJQTZHLE1BQUEsU0FBQTVYLEdBR0EsT0FBQUEsRUFLQSxpQkFBQUEsRUFDQTlDLEVBQUFPLEtBQUFZLEVBQUEyQixHQUFBdkQsS0FBQSxJQUlBUyxFQUFBTyxLQUFBaEIsS0FHQXVELEVBQUFkLE9BQUFjLEVBQUEsR0FBQUEsR0FaQXZELEtBQUEsSUFBQUEsS0FBQSxHQUFBMEIsV0FBQTFCLEtBQUEyRCxRQUFBeVgsVUFBQXpZLFFBQUEsR0FnQkEwWSxJQUFBLFNBQUF4WixFQUFBQyxHQUNBLE9BQUE5QixLQUFBK0MsVUFDQW5CLEVBQUFvUSxXQUNBcFEsRUFBQXNCLE1BQUFsRCxLQUFBNkMsTUFBQWpCLEVBQUFDLEVBQUFDLE9BS0F3WixRQUFBLFNBQUF6WixHQUNBLE9BQUE3QixLQUFBcWIsSUFBQSxNQUFBeFosRUFDQTdCLEtBQUFtRCxXQUFBbkQsS0FBQW1ELFdBQUFnTixPQUFBdE8sT0FLQSxTQUFBMFosRUFBQXpNLEVBQUEzQyxHQUNBLE1BQUEyQyxFQUFBQSxFQUFBM0MsS0FBQSxJQUFBMkMsRUFBQXhDLFdBQ0EsT0FBQXdDLEVBR0FsTixFQUFBd0IsTUFDQTJRLE9BQUEsU0FBQXhRLEdBQ0EsSUFBQXdRLEVBQUF4USxFQUFBN0IsV0FDQSxPQUFBcVMsR0FBQSxLQUFBQSxFQUFBekgsU0FBQXlILEVBQUEsTUFFQXlILFFBQUEsU0FBQWpZLEdBQ0EsT0FBQTRJLEVBQUE1SSxFQUFBLGVBRUFrWSxhQUFBLFNBQUFsWSxFQUFBQyxFQUFBcVcsR0FDQSxPQUFBMU4sRUFBQTVJLEVBQUEsYUFBQXNXLElBRUF6TixLQUFBLFNBQUE3SSxHQUNBLE9BQUFnWSxFQUFBaFksRUFBQSxnQkFFQXdYLEtBQUEsU0FBQXhYLEdBQ0EsT0FBQWdZLEVBQUFoWSxFQUFBLG9CQUVBbVksUUFBQSxTQUFBblksR0FDQSxPQUFBNEksRUFBQTVJLEVBQUEsZ0JBRUE2WCxRQUFBLFNBQUE3WCxHQUNBLE9BQUE0SSxFQUFBNUksRUFBQSxvQkFFQW9ZLFVBQUEsU0FBQXBZLEVBQUFDLEVBQUFxVyxHQUNBLE9BQUExTixFQUFBNUksRUFBQSxjQUFBc1csSUFFQStCLFVBQUEsU0FBQXJZLEVBQUFDLEVBQUFxVyxHQUNBLE9BQUExTixFQUFBNUksRUFBQSxrQkFBQXNXLElBRUFHLFNBQUEsU0FBQXpXLEdBQ0EsT0FBQXlXLEdBQUF6VyxFQUFBN0IsZ0JBQUEyUSxXQUFBOU8sSUFFQXNYLFNBQUEsU0FBQXRYLEdBQ0EsT0FBQXlXLEVBQUF6VyxFQUFBOE8sYUFFQXlJLFNBQUEsU0FBQXZYLEdBQ0EsT0FBQWlLLEVBQUFqSyxFQUFBLFVBQ0FBLEVBQUFzWSxpQkFNQXJPLEVBQUFqSyxFQUFBLGNBQ0FBLEVBQUFBLEVBQUF1WSxTQUFBdlksR0FHQTNCLEVBQUFzQixTQUFBSyxFQUFBOEksZUFFQSxTQUFBaEksRUFBQXRDLEdBQ0FILEVBQUFHLEdBQUFzQyxHQUFBLFNBQUF3VixFQUFBaFksR0FDQSxJQUFBeVMsRUFBQTFTLEVBQUEwQixJQUFBdEQsS0FBQStCLEVBQUE4WCxHQXVCQSxNQXJCQSxVQUFBeFYsRUFBQS9ELE9BQUEsS0FDQXVCLEVBQUFnWSxHQUdBaFksR0FBQSxpQkFBQUEsSUFDQXlTLEVBQUExUyxFQUFBdU8sT0FBQXRPLEVBQUF5UyxJQUdBdFUsS0FBQTJDLE9BQUEsSUFHQWlZLEVBQUF2VyxJQUNBekMsRUFBQW9RLFdBQUFzQyxHQUlBcUcsRUFBQXBOLEtBQUFsSixJQUNBaVEsRUFBQXlILFdBSUEvYixLQUFBK0MsVUFBQXVSLE1BR0EsSUFBQTBILEVBQUEsb0JBbUNBcGEsRUFBQXFhLFVBQUEsU0FBQTdYLEdBSUFBLEVBQUEsaUJBQUFBLEVBbENBLFNBQUFBLEdBQ0EsSUFBQThYLEtBSUEsT0FIQXRhLEVBQUF3QixLQUFBZ0IsRUFBQXdJLE1BQUFvUCxPQUFBLFNBQUE1USxFQUFBK1EsR0FDQUQsRUFBQUMsSUFBQSxJQUVBRCxFQThCQUUsQ0FBQWhZLEdBQ0F4QyxFQUFBdUMsVUFBQUMsR0FFQSxJQUNBaVksRUFHQUMsRUFHQUMsRUFHQUMsRUFHQWpULEtBR0FrVCxLQUdBQyxHQUFBLEVBR0FDLEVBQUEsV0FRQSxJQUxBSCxFQUFBQSxHQUFBcFksRUFBQXdZLEtBSUFMLEVBQUFGLEdBQUEsRUFDQUksRUFBQTlaLE9BQUErWixHQUFBLEVBRUEsSUFEQUosRUFBQUcsRUFBQXBPLFVBQ0FxTyxFQUFBblQsRUFBQTVHLFNBR0EsSUFBQTRHLEVBQUFtVCxHQUFBalosTUFBQTZZLEVBQUEsR0FBQUEsRUFBQSxLQUNBbFksRUFBQXlZLGNBR0FILEVBQUFuVCxFQUFBNUcsT0FDQTJaLEdBQUEsR0FNQWxZLEVBQUFrWSxTQUNBQSxHQUFBLEdBR0FELEdBQUEsRUFHQUcsSUFJQWpULEVBREErUyxLQUtBLEtBTUEvQixHQUdBYyxJQUFBLFdBMkJBLE9BMUJBOVIsSUFHQStTLElBQUFELElBQ0FLLEVBQUFuVCxFQUFBNUcsT0FBQSxFQUNBOFosRUFBQWpjLEtBQUE4YixJQUdBLFNBQUFqQixFQUFBalUsR0FDQXhGLEVBQUF3QixLQUFBZ0UsRUFBQSxTQUFBZ0UsRUFBQXJFLEdBQ0FuRixFQUFBZ0QsV0FBQW1DLEdBQ0EzQyxFQUFBc1YsUUFBQWEsRUFBQTdGLElBQUEzTixJQUNBd0MsRUFBQS9JLEtBQUF1RyxHQUVBQSxHQUFBQSxFQUFBcEUsUUFBQSxXQUFBZixFQUFBOEQsS0FBQXFCLElBR0FzVSxFQUFBdFUsS0FUQSxDQVlBckQsV0FFQTRZLElBQUFELEdBQ0FNLEtBR0EzYyxNQUlBOGMsT0FBQSxXQVlBLE9BWEFsYixFQUFBd0IsS0FBQU0sVUFBQSxTQUFBMEgsRUFBQXJFLEdBRUEsSUFEQSxJQUFBb1UsR0FDQUEsRUFBQXZaLEVBQUE2RSxRQUFBTSxFQUFBd0MsRUFBQTRSLEtBQUEsR0FDQTVSLEVBQUFyRixPQUFBaVgsRUFBQSxHQUdBQSxHQUFBdUIsR0FDQUEsTUFJQTFjLE1BS0EwVSxJQUFBLFNBQUEzUyxHQUNBLE9BQUFBLEVBQ0FILEVBQUE2RSxRQUFBMUUsRUFBQXdILElBQUEsRUFDQUEsRUFBQTVHLE9BQUEsR0FJQStTLE1BQUEsV0FJQSxPQUhBbk0sSUFDQUEsTUFFQXZKLE1BTUErYyxRQUFBLFdBR0EsT0FGQVAsRUFBQUMsS0FDQWxULEVBQUErUyxFQUFBLEdBQ0F0YyxNQUVBa00sU0FBQSxXQUNBLE9BQUEzQyxHQU1BeVQsS0FBQSxXQUtBLE9BSkFSLEVBQUFDLEtBQ0FILEdBQUFELElBQ0E5UyxFQUFBK1MsRUFBQSxJQUVBdGMsTUFFQXdjLE9BQUEsV0FDQSxRQUFBQSxHQUlBUyxTQUFBLFNBQUFuYixFQUFBc0YsR0FTQSxPQVJBb1YsSUFFQXBWLEdBQUF0RixHQURBc0YsRUFBQUEsT0FDQTlHLE1BQUE4RyxFQUFBOUcsUUFBQThHLEdBQ0FxVixFQUFBamMsS0FBQTRHLEdBQ0FpVixHQUNBTSxLQUdBM2MsTUFJQTJjLEtBQUEsV0FFQSxPQURBcEMsRUFBQTBDLFNBQUFqZCxLQUFBMEQsV0FDQTFELE1BSUF1YyxNQUFBLFdBQ0EsUUFBQUEsSUFJQSxPQUFBaEMsR0FJQSxTQUFBMkMsRUFBQUMsR0FDQSxPQUFBQSxFQUVBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQUEsRUFHQSxTQUFBQyxFQUFBdFcsRUFBQXVXLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFFQSxJQUdBMVcsR0FBQXBGLEVBQUFnRCxXQUFBOFksRUFBQTFXLEVBQUEyVyxTQUNBRCxFQUFBMWMsS0FBQWdHLEdBQUE2QixLQUFBMFUsR0FBQUssS0FBQUosR0FHQXhXLEdBQUFwRixFQUFBZ0QsV0FBQThZLEVBQUExVyxFQUFBNlcsTUFDQUgsRUFBQTFjLEtBQUFnRyxFQUFBdVcsRUFBQUMsR0FRQUQsRUFBQTlaLFdBQUF1QixHQUFBZ0MsR0FBQTFHLE1BQUFtZCxJQU1BLE1BQUF6VyxHQUlBd1csRUFBQS9aLFdBQUF1QixHQUFBZ0MsS0FJQXBGLEVBQUF1QyxRQUVBMlosU0FBQSxTQUFBQyxHQUNBLElBQUFDLElBSUEsU0FBQSxXQUFBcGMsRUFBQXFhLFVBQUEsVUFDQXJhLEVBQUFxYSxVQUFBLFVBQUEsSUFDQSxVQUFBLE9BQUFyYSxFQUFBcWEsVUFBQSxlQUNBcmEsRUFBQXFhLFVBQUEsZUFBQSxFQUFBLGFBQ0EsU0FBQSxPQUFBcmEsRUFBQXFhLFVBQUEsZUFDQXJhLEVBQUFxYSxVQUFBLGVBQUEsRUFBQSxhQUVBZ0MsRUFBQSxVQUNBTixHQUNBTSxNQUFBLFdBQ0EsT0FBQUEsR0FFQUMsT0FBQSxXQUVBLE9BREFDLEVBQUF0VixLQUFBbkYsV0FBQWthLEtBQUFsYSxXQUNBMUQsTUFFQW9lLE1BQUEsU0FBQXJjLEdBQ0EsT0FBQTRiLEVBQUFFLEtBQUEsS0FBQTliLElBSUFzYyxLQUFBLFdBQ0EsSUFBQUMsRUFBQTVhLFVBRUEsT0FBQTlCLEVBQUFrYyxTQUFBLFNBQUFTLEdBQ0EzYyxFQUFBd0IsS0FBQTRhLEVBQUEsU0FBQXhhLEVBQUFnYixHQUdBLElBQUF6YyxFQUFBSCxFQUFBZ0QsV0FBQTBaLEVBQUFFLEVBQUEsTUFBQUYsRUFBQUUsRUFBQSxJQUtBTCxFQUFBSyxFQUFBLElBQUEsV0FDQSxJQUFBQyxFQUFBMWMsR0FBQUEsRUFBQTBCLE1BQUF6RCxLQUFBMEQsV0FDQSthLEdBQUE3YyxFQUFBZ0QsV0FBQTZaLEVBQUFkLFNBQ0FjLEVBQUFkLFVBQ0FlLFNBQUFILEVBQUFJLFFBQ0E5VixLQUFBMFYsRUFBQWhCLFNBQ0FLLEtBQUFXLEVBQUFmLFFBRUFlLEVBQUFDLEVBQUEsR0FBQSxRQUNBeGUsS0FDQStCLEdBQUEwYyxHQUFBL2EsZUFLQTRhLEVBQUEsT0FDQVgsV0FFQUUsS0FBQSxTQUFBZSxFQUFBQyxFQUFBQyxHQUNBLElBQUFDLEVBQUEsRUFDQSxTQUFBeEIsRUFBQXlCLEVBQUFiLEVBQUF4UCxFQUFBc1EsR0FDQSxPQUFBLFdBQ0EsSUFBQUMsRUFBQWxmLEtBQ0FvSCxFQUFBMUQsVUFDQXliLEVBQUEsV0FDQSxJQUFBVixFQUFBWixFQUtBLEtBQUFtQixFQUFBRCxHQUFBLENBUUEsSUFKQU4sRUFBQTlQLEVBQUFsTCxNQUFBeWIsRUFBQTlYLE1BSUErVyxFQUFBUixVQUNBLE1BQUEsSUFBQXlCLFVBQUEsNEJBT0F2QixFQUFBWSxJQUtBLGlCQUFBQSxHQUNBLG1CQUFBQSxJQUNBQSxFQUFBWixLQUdBamMsRUFBQWdELFdBQUFpWixHQUdBb0IsRUFDQXBCLEVBQUE3YyxLQUNBeWQsRUFDQWxCLEVBQUF3QixFQUFBWixFQUFBakIsRUFBQStCLEdBQ0ExQixFQUFBd0IsRUFBQVosRUFBQWYsRUFBQTZCLEtBT0FGLElBRUFsQixFQUFBN2MsS0FDQXlkLEVBQ0FsQixFQUFBd0IsRUFBQVosRUFBQWpCLEVBQUErQixHQUNBMUIsRUFBQXdCLEVBQUFaLEVBQUFmLEVBQUE2QixHQUNBMUIsRUFBQXdCLEVBQUFaLEVBQUFqQixFQUNBaUIsRUFBQWtCLGVBU0ExUSxJQUFBdU8sSUFDQWdDLE9BQUFsYSxFQUNBb0MsR0FBQXFYLEtBS0FRLEdBQUFkLEVBQUFtQixhQUFBSixFQUFBOVgsTUFLQW1ZLEVBQUFOLEVBQ0FFLEVBQ0EsV0FDQSxJQUNBQSxJQUNBLE1BQUE1UyxHQUVBM0ssRUFBQWtjLFNBQUEwQixlQUNBNWQsRUFBQWtjLFNBQUEwQixjQUFBalQsRUFDQWdULEVBQUFFLFlBTUFULEVBQUEsR0FBQUQsSUFJQXBRLElBQUF5TyxJQUNBOEIsT0FBQWxhLEVBQ0FvQyxHQUFBbUYsSUFHQTRSLEVBQUF1QixXQUFBUixFQUFBOVgsTUFTQTRYLEVBQ0FPLEtBS0EzZCxFQUFBa2MsU0FBQTZCLGVBQ0FKLEVBQUFFLFdBQUE3ZCxFQUFBa2MsU0FBQTZCLGdCQUVBNWYsRUFBQTZmLFdBQUFMLEtBS0EsT0FBQTNkLEVBQUFrYyxTQUFBLFNBQUFTLEdBR0FQLEVBQUEsR0FBQSxHQUFBM0MsSUFDQWtDLEVBQ0EsRUFDQWdCLEVBQ0EzYyxFQUFBZ0QsV0FBQWthLEdBQ0FBLEVBQ0E1QixFQUNBcUIsRUFBQWMsYUFLQXJCLEVBQUEsR0FBQSxHQUFBM0MsSUFDQWtDLEVBQ0EsRUFDQWdCLEVBQ0EzYyxFQUFBZ0QsV0FBQWdhLEdBQ0FBLEVBQ0ExQixJQUtBYyxFQUFBLEdBQUEsR0FBQTNDLElBQ0FrQyxFQUNBLEVBQ0FnQixFQUNBM2MsRUFBQWdELFdBQUFpYSxHQUNBQSxFQUNBekIsTUFHQU8sV0FLQUEsUUFBQSxTQUFBbFksR0FDQSxPQUFBLE1BQUFBLEVBQUE3RCxFQUFBdUMsT0FBQXNCLEVBQUFrWSxHQUFBQSxJQUdBUSxLQTJEQSxPQXhEQXZjLEVBQUF3QixLQUFBNGEsRUFBQSxTQUFBeGEsRUFBQWdiLEdBQ0EsSUFBQWpWLEVBQUFpVixFQUFBLEdBQ0FxQixFQUFBckIsRUFBQSxHQUtBYixFQUFBYSxFQUFBLElBQUFqVixFQUFBOFIsSUFHQXdFLEdBQ0F0VyxFQUFBOFIsSUFDQSxXQUlBNEMsRUFBQTRCLEdBS0E3QixFQUFBLEVBQUF4YSxHQUFBLEdBQUF1WixRQUdBaUIsRUFBQSxHQUFBLEdBQUFoQixNQU9BelQsRUFBQThSLElBQUFtRCxFQUFBLEdBQUE3QixNQUtBd0IsRUFBQUssRUFBQSxJQUFBLFdBRUEsT0FEQUwsRUFBQUssRUFBQSxHQUFBLFFBQUF4ZSxPQUFBbWUsT0FBQW5aLEVBQUFoRixLQUFBMEQsV0FDQTFELE1BTUFtZSxFQUFBSyxFQUFBLEdBQUEsUUFBQWpWLEVBQUEwVCxXQUlBVSxFQUFBQSxRQUFBUSxHQUdBSixHQUNBQSxFQUFBL2MsS0FBQW1kLEVBQUFBLEdBSUFBLEdBSUEyQixLQUFBLFNBQUFDLEdBQ0EsSUFHQUMsRUFBQXRjLFVBQUFmLE9BR0FhLEVBQUF3YyxFQUdBQyxFQUFBbmIsTUFBQXRCLEdBQ0EwYyxFQUFBNWYsRUFBQVUsS0FBQTBDLFdBR0F5YyxFQUFBdmUsRUFBQWtjLFdBR0FzQyxFQUFBLFNBQUE1YyxHQUNBLE9BQUEsU0FBQXdELEdBQ0FpWixFQUFBemMsR0FBQXhELEtBQ0FrZ0IsRUFBQTFjLEdBQUFFLFVBQUFmLE9BQUEsRUFBQXJDLEVBQUFVLEtBQUEwQyxXQUFBc0QsSUFDQWdaLEdBQ0FHLEVBQUFiLFlBQUFXLEVBQUFDLEtBTUEsR0FBQUYsR0FBQSxJQUNBMUMsRUFBQXlDLEVBQUFJLEVBQUF0WCxLQUFBdVgsRUFBQTVjLElBQUErWixRQUFBNEMsRUFBQTNDLFFBQ0F3QyxHQUdBLFlBQUFHLEVBQUFsQyxTQUNBcmMsRUFBQWdELFdBQUFzYixFQUFBMWMsSUFBQTBjLEVBQUExYyxHQUFBcWEsT0FFQSxPQUFBc0MsRUFBQXRDLE9BS0EsS0FBQXJhLEtBQ0E4WixFQUFBNEMsRUFBQTFjLEdBQUE0YyxFQUFBNWMsR0FBQTJjLEVBQUEzQyxRQUdBLE9BQUEyQyxFQUFBeEMsYUFPQSxJQUFBMEMsRUFBQSx5REFFQXplLEVBQUFrYyxTQUFBMEIsY0FBQSxTQUFBbGEsRUFBQWdiLEdBSUF2Z0IsRUFBQXdnQixTQUFBeGdCLEVBQUF3Z0IsUUFBQUMsTUFBQWxiLEdBQUErYSxFQUFBOVMsS0FBQWpJLEVBQUFqQixPQUNBdEUsRUFBQXdnQixRQUFBQyxLQUFBLDhCQUFBbGIsRUFBQW1iLFFBQUFuYixFQUFBZ2IsTUFBQUEsSUFPQTFlLEVBQUE4ZSxlQUFBLFNBQUFwYixHQUNBdkYsRUFBQTZmLFdBQUEsV0FDQSxNQUFBdGEsS0FRQSxJQUFBcWIsRUFBQS9lLEVBQUFrYyxXQUVBbGMsRUFBQUcsR0FBQTJZLE1BQUEsU0FBQTNZLEdBWUEsT0FWQTRlLEVBQ0E5QyxLQUFBOWIsR0FLQXFjLE1BQUEsU0FBQTlZLEdBQ0ExRCxFQUFBOGUsZUFBQXBiLEtBR0F0RixNQUdBNEIsRUFBQXVDLFFBR0FrQixTQUFBLEVBSUF1YixVQUFBLEVBR0FsRyxNQUFBLFNBQUFtRyxLQUdBLElBQUFBLElBQUFqZixFQUFBZ2YsVUFBQWhmLEVBQUF5RCxXQUtBekQsRUFBQXlELFNBQUEsR0FHQSxJQUFBd2IsS0FBQWpmLEVBQUFnZixVQUFBLEdBS0FELEVBQUFyQixZQUFBMWYsR0FBQWdDLFFBSUFBLEVBQUE4WSxNQUFBbUQsS0FBQThDLEVBQUE5QyxLQUdBLFNBQUFpRCxJQUNBbGhCLEVBQUFtaEIsb0JBQUEsbUJBQUFELEdBQ0EvZ0IsRUFBQWdoQixvQkFBQSxPQUFBRCxHQUNBbGYsRUFBQThZLFFBT0EsYUFBQTlhLEVBQUFvaEIsWUFDQSxZQUFBcGhCLEVBQUFvaEIsYUFBQXBoQixFQUFBMlAsZ0JBQUEwUixTQUdBbGhCLEVBQUE2ZixXQUFBaGUsRUFBQThZLFFBS0E5YSxFQUFBaVEsaUJBQUEsbUJBQUFpUixHQUdBL2dCLEVBQUE4UCxpQkFBQSxPQUFBaVIsSUFRQSxJQUFBSSxFQUFBLFNBQUFsZSxFQUFBakIsRUFBQW9NLEVBQUFuSCxFQUFBbWEsRUFBQUMsRUFBQUMsR0FDQSxJQUFBN2QsRUFBQSxFQUNBTSxFQUFBZCxFQUFBTCxPQUNBMmUsRUFBQSxNQUFBblQsRUFHQSxHQUFBLFdBQUF2TSxFQUFBOEQsS0FBQXlJLEdBQUEsQ0FDQWdULEdBQUEsRUFDQSxJQUFBM2QsS0FBQTJLLEVBQ0ErUyxFQUFBbGUsRUFBQWpCLEVBQUF5QixFQUFBMkssRUFBQTNLLElBQUEsRUFBQTRkLEVBQUFDLFFBSUEsUUFBQXJjLElBQUFnQyxJQUNBbWEsR0FBQSxFQUVBdmYsRUFBQWdELFdBQUFvQyxLQUNBcWEsR0FBQSxHQUdBQyxJQUdBRCxHQUNBdGYsRUFBQWYsS0FBQWdDLEVBQUFnRSxHQUNBakYsRUFBQSxPQUlBdWYsRUFBQXZmLEVBQ0FBLEVBQUEsU0FBQXdCLEVBQUE0SyxFQUFBbkgsR0FDQSxPQUFBc2EsRUFBQXRnQixLQUFBWSxFQUFBMkIsR0FBQXlELE1BS0FqRixHQUNBLEtBQUF5QixFQUFBTSxFQUFBTixJQUNBekIsRUFDQWlCLEVBQUFRLEdBQUEySyxFQUFBa1QsRUFDQXJhLEVBQ0FBLEVBQUFoRyxLQUFBZ0MsRUFBQVEsR0FBQUEsRUFBQXpCLEVBQUFpQixFQUFBUSxHQUFBMkssS0FNQSxPQUFBZ1QsRUFDQW5lLEVBSUFzZSxFQUNBdmYsRUFBQWYsS0FBQWdDLEdBR0FjLEVBQUEvQixFQUFBaUIsRUFBQSxHQUFBbUwsR0FBQWlULEdBRUFHLEVBQUEsU0FBQUMsR0FRQSxPQUFBLElBQUFBLEVBQUFsVixVQUFBLElBQUFrVixFQUFBbFYsWUFBQWtWLEVBQUFsVixVQU1BLFNBQUFtVixJQUNBemhCLEtBQUFpRixRQUFBckQsRUFBQXFELFFBQUF3YyxFQUFBQyxNQUdBRCxFQUFBQyxJQUFBLEVBRUFELEVBQUFqZixXQUVBMEwsTUFBQSxTQUFBc1QsR0FHQSxJQUFBeGEsRUFBQXdhLEVBQUF4aEIsS0FBQWlGLFNBNEJBLE9BekJBK0IsSUFDQUEsS0FLQXVhLEVBQUFDLEtBSUFBLEVBQUFsVixTQUNBa1YsRUFBQXhoQixLQUFBaUYsU0FBQStCLEVBTUE1RyxPQUFBdWhCLGVBQUFILEVBQUF4aEIsS0FBQWlGLFNBQ0ErQixNQUFBQSxFQUNBNGEsY0FBQSxNQU1BNWEsR0FFQTZhLElBQUEsU0FBQUwsRUFBQU0sRUFBQTlhLEdBQ0EsSUFBQSthLEVBQ0E3VCxFQUFBbE8sS0FBQWtPLE1BQUFzVCxHQUlBLEdBQUEsaUJBQUFNLEVBQ0E1VCxFQUFBdE0sRUFBQXVFLFVBQUEyYixJQUFBOWEsT0FNQSxJQUFBK2EsS0FBQUQsRUFDQTVULEVBQUF0TSxFQUFBdUUsVUFBQTRiLElBQUFELEVBQUFDLEdBR0EsT0FBQTdULEdBRUFyTCxJQUFBLFNBQUEyZSxFQUFBclQsR0FDQSxZQUFBbkosSUFBQW1KLEVBQ0FuTyxLQUFBa08sTUFBQXNULEdBR0FBLEVBQUF4aEIsS0FBQWlGLFVBQUF1YyxFQUFBeGhCLEtBQUFpRixTQUFBckQsRUFBQXVFLFVBQUFnSSxLQUVBK1MsT0FBQSxTQUFBTSxFQUFBclQsRUFBQW5ILEdBYUEsWUFBQWhDLElBQUFtSixHQUNBQSxHQUFBLGlCQUFBQSxRQUFBbkosSUFBQWdDLEVBRUFoSCxLQUFBNkMsSUFBQTJlLEVBQUFyVCxJQVNBbk8sS0FBQTZoQixJQUFBTCxFQUFBclQsRUFBQW5ILFFBSUFoQyxJQUFBZ0MsRUFBQUEsRUFBQW1ILElBRUEyTyxPQUFBLFNBQUEwRSxFQUFBclQsR0FDQSxJQUFBM0ssRUFDQTBLLEVBQUFzVCxFQUFBeGhCLEtBQUFpRixTQUVBLFFBQUFELElBQUFrSixFQUFBLENBSUEsUUFBQWxKLElBQUFtSixFQUFBLENBa0JBM0ssR0FYQTJLLEVBSkFySixNQUFBQyxRQUFBb0osR0FJQUEsRUFBQTdLLElBQUExQixFQUFBdUUsWUFFQWdJLEVBQUF2TSxFQUFBdUUsVUFBQWdJLE1BSUFELEdBQ0FDLEdBQ0FBLEVBQUF2QixNQUFBb1AsUUFHQXJaLE9BRUEsS0FBQWEsWUFDQTBLLEVBQUFDLEVBQUEzSyxVQUtBd0IsSUFBQW1KLEdBQUF2TSxFQUFBcUUsY0FBQWlJLE1BTUFzVCxFQUFBbFYsU0FDQWtWLEVBQUF4aEIsS0FBQWlGLGNBQUFELFNBRUF3YyxFQUFBeGhCLEtBQUFpRixZQUlBK2MsUUFBQSxTQUFBUixHQUNBLElBQUF0VCxFQUFBc1QsRUFBQXhoQixLQUFBaUYsU0FDQSxZQUFBRCxJQUFBa0osSUFBQXRNLEVBQUFxRSxjQUFBaUksS0FHQSxJQUFBK1QsRUFBQSxJQUFBUixFQUVBUyxFQUFBLElBQUFULEVBY0FVLEVBQUEsZ0NBQ0FDLEVBQUEsU0EyQkEsU0FBQUMsRUFBQTllLEVBQUE0SyxFQUFBMlQsR0FDQSxJQUFBemQsRUFJQSxRQUFBVyxJQUFBOGMsR0FBQSxJQUFBdmUsRUFBQStJLFNBSUEsR0FIQWpJLEVBQUEsUUFBQThKLEVBQUEvSSxRQUFBZ2QsRUFBQSxPQUFBMWEsY0FHQSxpQkFGQW9hLEVBQUF2ZSxFQUFBa0ssYUFBQXBKLElBRUEsQ0FDQSxJQUNBeWQsRUFuQ0EsVUFEQUEsRUFvQ0FBLElBL0JBLFVBQUFBLElBSUEsU0FBQUEsRUFDQSxLQUlBQSxLQUFBQSxFQUFBLElBQ0FBLEVBR0FLLEVBQUE1VSxLQUFBdVUsR0FDQVEsS0FBQUMsTUFBQVQsR0FHQUEsR0FlQSxNQUFBdlYsSUFHQTJWLEVBQUFMLElBQUF0ZSxFQUFBNEssRUFBQTJULFFBRUFBLE9BQUE5YyxFQTFDQSxJQUFBOGMsRUE2Q0EsT0FBQUEsRUFHQWxnQixFQUFBdUMsUUFDQTZkLFFBQUEsU0FBQXplLEdBQ0EsT0FBQTJlLEVBQUFGLFFBQUF6ZSxJQUFBMGUsRUFBQUQsUUFBQXplLElBR0F1ZSxLQUFBLFNBQUF2ZSxFQUFBYyxFQUFBeWQsR0FDQSxPQUFBSSxFQUFBaEIsT0FBQTNkLEVBQUFjLEVBQUF5ZCxJQUdBVSxXQUFBLFNBQUFqZixFQUFBYyxHQUNBNmQsRUFBQXBGLE9BQUF2WixFQUFBYyxJQUtBb2UsTUFBQSxTQUFBbGYsRUFBQWMsRUFBQXlkLEdBQ0EsT0FBQUcsRUFBQWYsT0FBQTNkLEVBQUFjLEVBQUF5ZCxJQUdBWSxZQUFBLFNBQUFuZixFQUFBYyxHQUNBNGQsRUFBQW5GLE9BQUF2WixFQUFBYyxNQUlBekMsRUFBQUcsR0FBQW9DLFFBQ0EyZCxLQUFBLFNBQUEzVCxFQUFBbkgsR0FDQSxJQUFBeEQsRUFBQWEsRUFBQXlkLEVBQ0F2ZSxFQUFBdkQsS0FBQSxHQUNBME8sRUFBQW5MLEdBQUFBLEVBQUFvRyxXQUdBLFFBQUEzRSxJQUFBbUosRUFBQSxDQUNBLEdBQUFuTyxLQUFBMkMsU0FDQW1mLEVBQUFJLEVBQUFyZixJQUFBVSxHQUVBLElBQUFBLEVBQUErSSxXQUFBMlYsRUFBQXBmLElBQUFVLEVBQUEsaUJBQUEsQ0FFQSxJQURBQyxFQUFBa0wsRUFBQS9MLE9BQ0FhLEtBSUFrTCxFQUFBbEwsSUFFQSxLQURBYSxFQUFBcUssRUFBQWxMLEdBQUFhLE1BQ0E1RCxRQUFBLFdBQ0E0RCxFQUFBekMsRUFBQXVFLFVBQUE5QixFQUFBL0QsTUFBQSxJQUNBK2hCLEVBQUE5ZSxFQUFBYyxFQUFBeWQsRUFBQXpkLEtBSUE0ZCxFQUFBSixJQUFBdGUsRUFBQSxnQkFBQSxHQUlBLE9BQUF1ZSxFQUlBLE1BQUEsaUJBQUEzVCxFQUNBbk8sS0FBQW9ELEtBQUEsV0FDQThlLEVBQUFMLElBQUE3aEIsS0FBQW1PLEtBSUErUyxFQUFBbGhCLEtBQUEsU0FBQWdILEdBQ0EsSUFBQThhLEVBT0EsR0FBQXZlLFFBQUF5QixJQUFBZ0MsRUFBQSxDQUtBLFFBQUFoQyxLQURBOGMsRUFBQUksRUFBQXJmLElBQUFVLEVBQUE0SyxJQUVBLE9BQUEyVCxFQU1BLFFBQUE5YyxLQURBOGMsRUFBQU8sRUFBQTllLEVBQUE0SyxJQUVBLE9BQUEyVCxPQVFBOWhCLEtBQUFvRCxLQUFBLFdBR0E4ZSxFQUFBTCxJQUFBN2hCLEtBQUFtTyxFQUFBbkgsTUFFQSxLQUFBQSxFQUFBdEQsVUFBQWYsT0FBQSxFQUFBLE1BQUEsSUFHQTZmLFdBQUEsU0FBQXJVLEdBQ0EsT0FBQW5PLEtBQUFvRCxLQUFBLFdBQ0E4ZSxFQUFBcEYsT0FBQTljLEtBQUFtTyxRQU1Bdk0sRUFBQXVDLFFBQ0FzWSxNQUFBLFNBQUFsWixFQUFBbUMsRUFBQW9jLEdBQ0EsSUFBQXJGLEVBRUEsR0FBQWxaLEVBWUEsT0FYQW1DLEdBQUFBLEdBQUEsTUFBQSxRQUNBK1csRUFBQXdGLEVBQUFwZixJQUFBVSxFQUFBbUMsR0FHQW9jLEtBQ0FyRixHQUFBM1gsTUFBQUMsUUFBQStjLEdBQ0FyRixFQUFBd0YsRUFBQWYsT0FBQTNkLEVBQUFtQyxFQUFBOUQsRUFBQTJFLFVBQUF1YixJQUVBckYsRUFBQWpjLEtBQUFzaEIsSUFHQXJGLE9BSUFrRyxRQUFBLFNBQUFwZixFQUFBbUMsR0FDQUEsRUFBQUEsR0FBQSxLQUVBLElBQUErVyxFQUFBN2EsRUFBQTZhLE1BQUFsWixFQUFBbUMsR0FDQWtkLEVBQUFuRyxFQUFBOVosT0FDQVosRUFBQTBhLEVBQUFwTyxRQUNBd1UsRUFBQWpoQixFQUFBa2hCLFlBQUF2ZixFQUFBbUMsR0FNQSxlQUFBM0QsSUFDQUEsRUFBQTBhLEVBQUFwTyxRQUNBdVUsS0FHQTdnQixJQUlBLE9BQUEyRCxHQUNBK1csRUFBQWpMLFFBQUEscUJBSUFxUixFQUFBRSxLQUNBaGhCLEVBQUFmLEtBQUF1QyxFQXBCQSxXQUNBM0IsRUFBQStnQixRQUFBcGYsRUFBQW1DLElBbUJBbWQsS0FHQUQsR0FBQUMsR0FDQUEsRUFBQW5OLE1BQUFpSCxRQUtBbUcsWUFBQSxTQUFBdmYsRUFBQW1DLEdBQ0EsSUFBQXlJLEVBQUF6SSxFQUFBLGFBQ0EsT0FBQXVjLEVBQUFwZixJQUFBVSxFQUFBNEssSUFBQThULEVBQUFmLE9BQUEzZCxFQUFBNEssR0FDQXVILE1BQUE5VCxFQUFBcWEsVUFBQSxlQUFBWixJQUFBLFdBQ0E0RyxFQUFBbkYsT0FBQXZaLEdBQUFtQyxFQUFBLFFBQUF5SSxXQU1Bdk0sRUFBQUcsR0FBQW9DLFFBQ0FzWSxNQUFBLFNBQUEvVyxFQUFBb2MsR0FDQSxJQUFBa0IsRUFBQSxFQVFBLE1BTkEsaUJBQUF0ZCxJQUNBb2MsRUFBQXBjLEVBQ0FBLEVBQUEsS0FDQXNkLEtBR0F0ZixVQUFBZixPQUFBcWdCLEVBQ0FwaEIsRUFBQTZhLE1BQUF6YyxLQUFBLEdBQUEwRixRQUdBVixJQUFBOGMsRUFDQTloQixLQUNBQSxLQUFBb0QsS0FBQSxXQUNBLElBQUFxWixFQUFBN2EsRUFBQTZhLE1BQUF6YyxLQUFBMEYsRUFBQW9jLEdBR0FsZ0IsRUFBQWtoQixZQUFBOWlCLEtBQUEwRixHQUVBLE9BQUFBLEdBQUEsZUFBQStXLEVBQUEsSUFDQTdhLEVBQUErZ0IsUUFBQTNpQixLQUFBMEYsTUFJQWlkLFFBQUEsU0FBQWpkLEdBQ0EsT0FBQTFGLEtBQUFvRCxLQUFBLFdBQ0F4QixFQUFBK2dCLFFBQUEzaUIsS0FBQTBGLE1BR0F1ZCxXQUFBLFNBQUF2ZCxHQUNBLE9BQUExRixLQUFBeWMsTUFBQS9XLEdBQUEsVUFLQWlZLFFBQUEsU0FBQWpZLEVBQUFELEdBQ0EsSUFBQTBCLEVBQ0ErYixFQUFBLEVBQ0FDLEVBQUF2aEIsRUFBQWtjLFdBQ0FwTSxFQUFBMVIsS0FDQXdELEVBQUF4RCxLQUFBMkMsT0FDQTRhLEVBQUEsYUFDQTJGLEdBQ0FDLEVBQUE3RCxZQUFBNU4sR0FBQUEsS0FVQSxJQU5BLGlCQUFBaE0sSUFDQUQsRUFBQUMsRUFDQUEsT0FBQVYsR0FFQVUsRUFBQUEsR0FBQSxLQUVBbEMsTUFDQTJELEVBQUE4YSxFQUFBcGYsSUFBQTZPLEVBQUFsTyxHQUFBa0MsRUFBQSxnQkFDQXlCLEVBQUF1TyxRQUNBd04sSUFDQS9iLEVBQUF1TyxNQUFBMkYsSUFBQWtDLElBSUEsT0FEQUEsSUFDQTRGLEVBQUF4RixRQUFBbFksTUFHQSxJQUFBMmQsRUFBQSxzQ0FBQUMsT0FFQUMsRUFBQSxJQUFBeFosT0FBQSxpQkFBQXNaLEVBQUEsY0FBQSxLQUdBRyxHQUFBLE1BQUEsUUFBQSxTQUFBLFFBRUFDLEVBQUEsU0FBQWpnQixFQUFBaUwsR0FPQSxNQUFBLFVBSEFqTCxFQUFBaUwsR0FBQWpMLEdBR0FrZ0IsTUFBQUMsU0FDQSxLQUFBbmdCLEVBQUFrZ0IsTUFBQUMsU0FNQTloQixFQUFBOEcsU0FBQW5GLEVBQUF5SixjQUFBekosSUFFQSxTQUFBM0IsRUFBQStoQixJQUFBcGdCLEVBQUEsWUFHQXFnQixHQUFBLFNBQUFyZ0IsRUFBQWEsRUFBQWYsRUFBQStELEdBQ0EsSUFBQW5FLEVBQUFvQixFQUNBd2YsS0FHQSxJQUFBeGYsS0FBQUQsRUFDQXlmLEVBQUF4ZixHQUFBZCxFQUFBa2dCLE1BQUFwZixHQUNBZCxFQUFBa2dCLE1BQUFwZixHQUFBRCxFQUFBQyxHQUdBcEIsRUFBQUksRUFBQUksTUFBQUYsRUFBQTZELE9BR0EsSUFBQS9DLEtBQUFELEVBQ0FiLEVBQUFrZ0IsTUFBQXBmLEdBQUF3ZixFQUFBeGYsR0FHQSxPQUFBcEIsR0FNQSxTQUFBNmdCLEdBQUF2Z0IsRUFBQXdlLEVBQUFnQyxFQUFBQyxHQUNBLElBQUFDLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxHQUNBQyxFQUFBSixFQUNBLFdBQ0EsT0FBQUEsRUFBQWxWLE9BRUEsV0FDQSxPQUFBbE4sRUFBQStoQixJQUFBcGdCLEVBQUF3ZSxFQUFBLEtBRUFzQyxFQUFBRCxJQUNBRSxFQUFBUCxHQUFBQSxFQUFBLEtBQUFuaUIsRUFBQTJpQixVQUFBeEMsR0FBQSxHQUFBLE1BR0F5QyxHQUFBNWlCLEVBQUEyaUIsVUFBQXhDLElBQUEsT0FBQXVDLElBQUFELElBQ0FmLEVBQUFyVyxLQUFBckwsRUFBQStoQixJQUFBcGdCLEVBQUF3ZSxJQUVBLEdBQUF5QyxHQUFBQSxFQUFBLEtBQUFGLEVBQUEsQ0FHQUEsRUFBQUEsR0FBQUUsRUFBQSxHQUdBVCxFQUFBQSxNQUdBUyxHQUFBSCxHQUFBLEVBRUEsR0FPQUcsR0FIQU4sRUFBQUEsR0FBQSxLQUlBdGlCLEVBQUE2aEIsTUFBQWxnQixFQUFBd2UsRUFBQXlDLEVBQUFGLFNBS0FKLEtBQUFBLEVBQUFFLElBQUFDLElBQUEsSUFBQUgsS0FBQUMsR0FpQkEsT0FiQUosSUFDQVMsR0FBQUEsSUFBQUgsR0FBQSxFQUdBSixFQUFBRixFQUFBLEdBQ0FTLEdBQUFULEVBQUEsR0FBQSxHQUFBQSxFQUFBLElBQ0FBLEVBQUEsR0FDQUMsSUFDQUEsRUFBQU0sS0FBQUEsRUFDQU4sRUFBQWxRLE1BQUEwUSxFQUNBUixFQUFBaGdCLElBQUFpZ0IsSUFHQUEsRUFJQSxJQUFBUSxNQUVBLFNBQUFDLEdBQUFuaEIsR0FDQSxJQUFBdVUsRUFDQTFXLEVBQUFtQyxFQUFBeUosY0FDQVEsRUFBQWpLLEVBQUFpSyxTQUNBa1csRUFBQWUsR0FBQWpYLEdBRUEsT0FBQWtXLElBSUE1TCxFQUFBMVcsRUFBQXVqQixLQUFBbGpCLFlBQUFMLEVBQUFFLGNBQUFrTSxJQUNBa1csRUFBQTloQixFQUFBK2hCLElBQUE3TCxFQUFBLFdBRUFBLEVBQUFwVyxXQUFBQyxZQUFBbVcsR0FFQSxTQUFBNEwsSUFDQUEsRUFBQSxTQUVBZSxHQUFBalgsR0FBQWtXLEVBRUFBLEdBR0EsU0FBQWtCLEdBQUFsVCxFQUFBbVQsR0FPQSxJQU5BLElBQUFuQixFQUFBbmdCLEVBQ0F1aEIsS0FDQTNKLEVBQUEsRUFDQXhZLEVBQUErTyxFQUFBL08sT0FHQXdZLEVBQUF4WSxFQUFBd1ksS0FDQTVYLEVBQUFtTyxFQUFBeUosSUFDQXNJLFFBSUFDLEVBQUFuZ0IsRUFBQWtnQixNQUFBQyxRQUNBbUIsR0FLQSxTQUFBbkIsSUFDQW9CLEVBQUEzSixHQUFBOEcsRUFBQXBmLElBQUFVLEVBQUEsWUFBQSxLQUNBdWhCLEVBQUEzSixLQUNBNVgsRUFBQWtnQixNQUFBQyxRQUFBLEtBR0EsS0FBQW5nQixFQUFBa2dCLE1BQUFDLFNBQUFGLEVBQUFqZ0IsS0FDQXVoQixFQUFBM0osR0FBQXVKLEdBQUFuaEIsS0FHQSxTQUFBbWdCLElBQ0FvQixFQUFBM0osR0FBQSxPQUdBOEcsRUFBQUosSUFBQXRlLEVBQUEsVUFBQW1nQixLQU1BLElBQUF2SSxFQUFBLEVBQUFBLEVBQUF4WSxFQUFBd1ksSUFDQSxNQUFBMkosRUFBQTNKLEtBQ0F6SixFQUFBeUosR0FBQXNJLE1BQUFDLFFBQUFvQixFQUFBM0osSUFJQSxPQUFBekosRUFHQTlQLEVBQUFHLEdBQUFvQyxRQUNBMGdCLEtBQUEsV0FDQSxPQUFBRCxHQUFBNWtCLE1BQUEsSUFFQStrQixLQUFBLFdBQ0EsT0FBQUgsR0FBQTVrQixPQUVBZ2xCLE9BQUEsU0FBQS9HLEdBQ0EsTUFBQSxrQkFBQUEsRUFDQUEsRUFBQWplLEtBQUE2a0IsT0FBQTdrQixLQUFBK2tCLE9BR0Eva0IsS0FBQW9ELEtBQUEsV0FDQW9nQixFQUFBeGpCLE1BQ0E0QixFQUFBNUIsTUFBQTZrQixPQUVBampCLEVBQUE1QixNQUFBK2tCLFlBS0EsSUFBQUUsR0FBQSx3QkFFQUMsR0FBQSxpQ0FFQUMsR0FBQSw0QkFLQUMsSUFHQUMsUUFBQSxFQUFBLCtCQUFBLGFBS0FDLE9BQUEsRUFBQSxVQUFBLFlBQ0FDLEtBQUEsRUFBQSxvQkFBQSx1QkFDQUMsSUFBQSxFQUFBLGlCQUFBLG9CQUNBQyxJQUFBLEVBQUEscUJBQUEseUJBRUFDLFVBQUEsRUFBQSxHQUFBLEtBSUFOLEdBQUFPLFNBQUFQLEdBQUFDLE9BRUFELEdBQUFRLE1BQUFSLEdBQUFTLE1BQUFULEdBQUFVLFNBQUFWLEdBQUFXLFFBQUFYLEdBQUFFLE1BQ0FGLEdBQUFZLEdBQUFaLEdBQUFLLEdBR0EsU0FBQVEsR0FBQW5rQixFQUFBeU8sR0FJQSxJQUFBdE4sRUFZQSxPQVRBQSxPQURBLElBQUFuQixFQUFBc0wscUJBQ0F0TCxFQUFBc0wscUJBQUFtRCxHQUFBLFVBRUEsSUFBQXpPLEVBQUFnTSxpQkFDQWhNLEVBQUFnTSxpQkFBQXlDLEdBQUEsYUFNQXZMLElBQUF1TCxHQUFBQSxHQUFBL0MsRUFBQTFMLEVBQUF5TyxHQUNBM08sRUFBQXNCLE9BQUFwQixHQUFBbUIsR0FHQUEsRUFLQSxTQUFBaWpCLEdBQUFsakIsRUFBQW1qQixHQUlBLElBSEEsSUFBQTNpQixFQUFBLEVBQ0F5WCxFQUFBalksRUFBQUwsT0FFQWEsRUFBQXlYLEVBQUF6WCxJQUNBeWUsRUFBQUosSUFDQTdlLEVBQUFRLEdBQ0EsY0FDQTJpQixHQUFBbEUsRUFBQXBmLElBQUFzakIsRUFBQTNpQixHQUFBLGVBTUEsSUFBQTRpQixHQUFBLFlBRUEsU0FBQUMsR0FBQXJqQixFQUFBbEIsRUFBQXdrQixFQUFBQyxFQUFBQyxHQU9BLElBTkEsSUFBQWpqQixFQUFBNEQsRUFBQW9KLEVBQUFrVyxFQUFBL2QsRUFBQTNFLEVBQ0EyaUIsRUFBQTVrQixFQUFBNmtCLHlCQUNBQyxLQUNBcGpCLEVBQUEsRUFDQXlYLEVBQUFqWSxFQUFBTCxPQUVBYSxFQUFBeVgsRUFBQXpYLElBR0EsSUFGQUQsRUFBQVAsRUFBQVEsS0FFQSxJQUFBRCxFQUdBLEdBQUEsV0FBQTNCLEVBQUE4RCxLQUFBbkMsR0FJQTNCLEVBQUFzQixNQUFBMGpCLEVBQUFyakIsRUFBQStJLFVBQUEvSSxHQUFBQSxRQUdBLEdBQUE2aUIsR0FBQTdZLEtBQUFoSyxHQUlBLENBVUEsSUFUQTRELEVBQUFBLEdBQUF1ZixFQUFBamxCLFlBQUFLLEVBQUFSLGNBQUEsUUFHQWlQLEdBQUEyVSxHQUFBalksS0FBQTFKLEtBQUEsR0FBQSxLQUFBLEdBQUFtRSxjQUNBK2UsRUFBQXJCLEdBQUE3VSxJQUFBNlUsR0FBQU0sU0FDQXZlLEVBQUFxSixVQUFBaVcsRUFBQSxHQUFBN2tCLEVBQUFpbEIsY0FBQXRqQixHQUFBa2pCLEVBQUEsR0FHQTFpQixFQUFBMGlCLEVBQUEsR0FDQTFpQixLQUNBb0QsRUFBQUEsRUFBQThNLFVBS0FyUyxFQUFBc0IsTUFBQTBqQixFQUFBemYsRUFBQWtGLGFBR0FsRixFQUFBdWYsRUFBQXJVLFlBR0FELFlBQUEsUUF6QkF3VSxFQUFBcG1CLEtBQUFzQixFQUFBZ2xCLGVBQUF2akIsSUFrQ0EsSUFIQW1qQixFQUFBdFUsWUFBQSxHQUVBNU8sRUFBQSxFQUNBRCxFQUFBcWpCLEVBQUFwakIsTUFHQSxHQUFBK2lCLEdBQUEza0IsRUFBQTZFLFFBQUFsRCxFQUFBZ2pCLElBQUEsRUFDQUMsR0FDQUEsRUFBQWhtQixLQUFBK0MsUUFnQkEsR0FYQW1GLEVBQUE5RyxFQUFBOEcsU0FBQW5GLEVBQUF5SixjQUFBekosR0FHQTRELEVBQUE4ZSxHQUFBUyxFQUFBamxCLFlBQUE4QixHQUFBLFVBR0FtRixHQUNBd2QsR0FBQS9lLEdBSUFtZixFQUVBLElBREF2aUIsRUFBQSxFQUNBUixFQUFBNEQsRUFBQXBELE1BQ0FvaEIsR0FBQTVYLEtBQUFoSyxFQUFBbUMsTUFBQSxLQUNBNGdCLEVBQUE5bEIsS0FBQStDLEdBTUEsT0FBQW1qQixHQUlBLFdBQ0EsSUFDQUssRUFEQW5uQixFQUFBK21CLHlCQUNBbGxCLFlBQUE3QixFQUFBMEIsY0FBQSxRQUNBbVAsRUFBQTdRLEVBQUEwQixjQUFBLFNBTUFtUCxFQUFBL0MsYUFBQSxPQUFBLFNBQ0ErQyxFQUFBL0MsYUFBQSxVQUFBLFdBQ0ErQyxFQUFBL0MsYUFBQSxPQUFBLEtBRUFxWixFQUFBdGxCLFlBQUFnUCxHQUlBeFAsRUFBQStsQixXQUFBRCxFQUFBRSxXQUFBLEdBQUFBLFdBQUEsR0FBQWhULFVBQUFzQixRQUlBd1IsRUFBQXZXLFVBQUEseUJBQ0F2UCxFQUFBaW1CLGlCQUFBSCxFQUFBRSxXQUFBLEdBQUFoVCxVQUFBd0YsYUF0QkEsR0F3QkEsSUFBQWxLLEdBQUEzUCxFQUFBMlAsZ0JBS0E0WCxHQUFBLE9BQ0FDLEdBQUEsaURBQ0FDLEdBQUEsc0JBRUEsU0FBQUMsS0FDQSxPQUFBLEVBR0EsU0FBQUMsS0FDQSxPQUFBLEVBS0EsU0FBQUMsS0FDQSxJQUNBLE9BQUE1bkIsRUFBQXNWLGNBQ0EsTUFBQXVTLEtBR0EsU0FBQUMsR0FBQW5rQixFQUFBb2tCLEVBQUE5bEIsRUFBQWlnQixFQUFBL2YsRUFBQTZsQixHQUNBLElBQUFDLEVBQUFuaUIsRUFHQSxHQUFBLGlCQUFBaWlCLEVBQUEsQ0FHQSxpQkFBQTlsQixJQUdBaWdCLEVBQUFBLEdBQUFqZ0IsRUFDQUEsT0FBQW1ELEdBRUEsSUFBQVUsS0FBQWlpQixFQUNBRCxHQUFBbmtCLEVBQUFtQyxFQUFBN0QsRUFBQWlnQixFQUFBNkYsRUFBQWppQixHQUFBa2lCLEdBRUEsT0FBQXJrQixFQXNCQSxHQW5CQSxNQUFBdWUsR0FBQSxNQUFBL2YsR0FHQUEsRUFBQUYsRUFDQWlnQixFQUFBamdCLE9BQUFtRCxHQUNBLE1BQUFqRCxJQUNBLGlCQUFBRixHQUdBRSxFQUFBK2YsRUFDQUEsT0FBQTljLElBSUFqRCxFQUFBK2YsRUFDQUEsRUFBQWpnQixFQUNBQSxPQUFBbUQsS0FHQSxJQUFBakQsRUFDQUEsRUFBQXdsQixRQUNBLElBQUF4bEIsRUFDQSxPQUFBd0IsRUFlQSxPQVpBLElBQUFxa0IsSUFDQUMsRUFBQTlsQixHQUNBQSxFQUFBLFNBQUErbEIsR0FJQSxPQURBbG1CLElBQUFtbUIsSUFBQUQsR0FDQUQsRUFBQXBrQixNQUFBekQsS0FBQTBELGFBSUF1RCxLQUFBNGdCLEVBQUE1Z0IsT0FBQTRnQixFQUFBNWdCLEtBQUFyRixFQUFBcUYsU0FFQTFELEVBQUFILEtBQUEsV0FDQXhCLEVBQUFrbUIsTUFBQXpNLElBQUFyYixLQUFBMm5CLEVBQUE1bEIsRUFBQStmLEVBQUFqZ0IsS0FRQUQsRUFBQWttQixPQUVBdG9CLFVBRUE2YixJQUFBLFNBQUE5WCxFQUFBb2tCLEVBQUFoWixFQUFBbVQsRUFBQWpnQixHQUVBLElBQUFtbUIsRUFBQUMsRUFBQTlnQixFQUNBK2dCLEVBQUFDLEVBQUFDLEVBQ0FuSixFQUFBb0osRUFBQTNpQixFQUFBNGlCLEVBQUFDLEVBQ0FDLEVBQUF2RyxFQUFBcGYsSUFBQVUsR0FHQSxHQUFBaWxCLEVBdUNBLElBbENBN1osRUFBQUEsVUFFQUEsR0FEQXFaLEVBQUFyWixHQUNBQSxRQUNBOU0sRUFBQW1tQixFQUFBbm1CLFVBS0FBLEdBQ0FELEVBQUF5TyxLQUFBSyxnQkFBQW5CLEdBQUExTixHQUlBOE0sRUFBQTFILE9BQ0EwSCxFQUFBMUgsS0FBQXJGLEVBQUFxRixTQUlBaWhCLEVBQUFNLEVBQUFOLFVBQ0FBLEVBQUFNLEVBQUFOLFlBRUFELEVBQUFPLEVBQUFDLFVBQ0FSLEVBQUFPLEVBQUFDLE9BQUEsU0FBQWxjLEdBSUEsWUFBQSxJQUFBM0ssR0FBQUEsRUFBQWttQixNQUFBWSxZQUFBbmMsRUFBQTdHLEtBQ0E5RCxFQUFBa21CLE1BQUFhLFNBQUFsbEIsTUFBQUYsRUFBQUcsZ0JBQUFzQixJQU1BbWpCLEdBREFSLEdBQUFBLEdBQUEsSUFBQS9hLE1BQUFvUCxLQUFBLEtBQ0FyWixPQUNBd2xCLEtBRUF6aUIsRUFBQTZpQixHQURBcGhCLEVBQUFrZ0IsR0FBQXBhLEtBQUEwYSxFQUFBUSxTQUNBLEdBQ0FHLEdBQUFuaEIsRUFBQSxJQUFBLElBQUFNLE1BQUEsS0FBQXhELE9BR0F5QixJQUtBdVosRUFBQXJkLEVBQUFrbUIsTUFBQTdJLFFBQUF2WixPQUdBQSxHQUFBN0QsRUFBQW9kLEVBQUEySixhQUFBM0osRUFBQTRKLFdBQUFuakIsRUFHQXVaLEVBQUFyZCxFQUFBa21CLE1BQUE3SSxRQUFBdlosT0FHQTBpQixFQUFBeG1CLEVBQUF1QyxRQUNBdUIsS0FBQUEsRUFDQTZpQixTQUFBQSxFQUNBekcsS0FBQUEsRUFDQW5ULFFBQUFBLEVBQ0ExSCxLQUFBMEgsRUFBQTFILEtBQ0FwRixTQUFBQSxFQUNBK0ksYUFBQS9JLEdBQUFELEVBQUE2UCxLQUFBN0UsTUFBQWhDLGFBQUEyQyxLQUFBMUwsR0FDQWluQixVQUFBUixFQUFBMWEsS0FBQSxNQUNBb2EsSUFHQUssRUFBQUgsRUFBQXhpQixPQUNBMmlCLEVBQUFILEVBQUF4aUIsT0FDQXFqQixjQUFBLEVBR0E5SixFQUFBK0osUUFDQSxJQUFBL0osRUFBQStKLE1BQUFob0IsS0FBQXVDLEVBQUF1ZSxFQUFBd0csRUFBQUwsSUFFQTFrQixFQUFBc00sa0JBQ0F0TSxFQUFBc00saUJBQUFuSyxFQUFBdWlCLElBS0FoSixFQUFBNUQsTUFDQTRELEVBQUE1RCxJQUFBcmEsS0FBQXVDLEVBQUE2a0IsR0FFQUEsRUFBQXpaLFFBQUExSCxPQUNBbWhCLEVBQUF6WixRQUFBMUgsS0FBQTBILEVBQUExSCxPQUtBcEYsRUFDQXdtQixFQUFBbmtCLE9BQUFta0IsRUFBQVUsZ0JBQUEsRUFBQVgsR0FFQUMsRUFBQTduQixLQUFBNG5CLEdBSUF4bUIsRUFBQWttQixNQUFBdG9CLE9BQUFrRyxJQUFBLElBTUFvWCxPQUFBLFNBQUF2WixFQUFBb2tCLEVBQUFoWixFQUFBOU0sRUFBQW9uQixHQUVBLElBQUFsbEIsRUFBQW1sQixFQUFBL2hCLEVBQ0ErZ0IsRUFBQUMsRUFBQUMsRUFDQW5KLEVBQUFvSixFQUFBM2lCLEVBQUE0aUIsRUFBQUMsRUFDQUMsRUFBQXZHLEVBQUFELFFBQUF6ZSxJQUFBMGUsRUFBQXBmLElBQUFVLEdBRUEsR0FBQWlsQixJQUFBTixFQUFBTSxFQUFBTixRQUFBLENBT0EsSUFEQUMsR0FEQVIsR0FBQUEsR0FBQSxJQUFBL2EsTUFBQW9QLEtBQUEsS0FDQXJaLE9BQ0F3bEIsS0FNQSxHQUpBemlCLEVBQUE2aUIsR0FEQXBoQixFQUFBa2dCLEdBQUFwYSxLQUFBMGEsRUFBQVEsU0FDQSxHQUNBRyxHQUFBbmhCLEVBQUEsSUFBQSxJQUFBTSxNQUFBLEtBQUF4RCxPQUdBeUIsRUFBQSxDQWVBLElBUkF1WixFQUFBcmQsRUFBQWttQixNQUFBN0ksUUFBQXZaLE9BRUEyaUIsRUFBQUgsRUFEQXhpQixHQUFBN0QsRUFBQW9kLEVBQUEySixhQUFBM0osRUFBQTRKLFdBQUFuakIsT0FFQXlCLEVBQUFBLEVBQUEsSUFDQSxJQUFBMkMsT0FBQSxVQUFBd2UsRUFBQTFhLEtBQUEsaUJBQUEsV0FHQXNiLEVBQUFubEIsRUFBQXNrQixFQUFBMWxCLE9BQ0FvQixLQUNBcWtCLEVBQUFDLEVBQUF0a0IsSUFFQWtsQixHQUFBVixJQUFBSCxFQUFBRyxVQUNBNVosR0FBQUEsRUFBQTFILE9BQUFtaEIsRUFBQW5oQixNQUNBRSxJQUFBQSxFQUFBb0csS0FBQTZhLEVBQUFVLFlBQ0FqbkIsR0FBQUEsSUFBQXVtQixFQUFBdm1CLFdBQ0EsT0FBQUEsSUFBQXVtQixFQUFBdm1CLFlBQ0F3bUIsRUFBQW5rQixPQUFBSCxFQUFBLEdBRUFxa0IsRUFBQXZtQixVQUNBd21CLEVBQUFVLGdCQUVBOUosRUFBQW5DLFFBQ0FtQyxFQUFBbkMsT0FBQTliLEtBQUF1QyxFQUFBNmtCLElBT0FjLElBQUFiLEVBQUExbEIsU0FDQXNjLEVBQUFrSyxXQUNBLElBQUFsSyxFQUFBa0ssU0FBQW5vQixLQUFBdUMsRUFBQStrQixFQUFBRSxFQUFBQyxTQUVBN21CLEVBQUF3bkIsWUFBQTdsQixFQUFBbUMsRUFBQThpQixFQUFBQyxlQUdBUCxFQUFBeGlCLFNBMUNBLElBQUFBLEtBQUF3aUIsRUFDQXRtQixFQUFBa21CLE1BQUFoTCxPQUFBdlosRUFBQW1DLEVBQUFpaUIsRUFBQVEsR0FBQXhaLEVBQUE5TSxHQUFBLEdBOENBRCxFQUFBcUUsY0FBQWlpQixJQUNBakcsRUFBQW5GLE9BQUF2WixFQUFBLG1CQUlBb2xCLFNBQUEsU0FBQVUsR0FHQSxJQUVBN2xCLEVBQUFPLEVBQUFkLEVBQUFxUixFQUFBOFQsRUFBQWtCLEVBRkF4QixFQUFBbG1CLEVBQUFrbUIsTUFBQXlCLElBQUFGLEdBR0FqaUIsRUFBQSxJQUFBdEMsTUFBQXBCLFVBQUFmLFFBQ0EwbEIsR0FBQXBHLEVBQUFwZixJQUFBN0MsS0FBQSxlQUFBOG5CLEVBQUFwaUIsVUFDQXVaLEVBQUFyZCxFQUFBa21CLE1BQUE3SSxRQUFBNkksRUFBQXBpQixVQUtBLElBRkEwQixFQUFBLEdBQUEwZ0IsRUFFQXRrQixFQUFBLEVBQUFBLEVBQUFFLFVBQUFmLE9BQUFhLElBQ0E0RCxFQUFBNUQsR0FBQUUsVUFBQUYsR0FNQSxHQUhBc2tCLEVBQUEwQixlQUFBeHBCLE1BR0FpZixFQUFBd0ssY0FBQSxJQUFBeEssRUFBQXdLLFlBQUF6b0IsS0FBQWhCLEtBQUE4bkIsR0FBQSxDQVNBLElBSkF3QixFQUFBMW5CLEVBQUFrbUIsTUFBQU8sU0FBQXJuQixLQUFBaEIsS0FBQThuQixFQUFBTyxHQUdBN2tCLEVBQUEsR0FDQThRLEVBQUFnVixFQUFBOWxCLFFBQUFza0IsRUFBQTRCLHdCQUlBLElBSEE1QixFQUFBNkIsY0FBQXJWLEVBQUEvUSxLQUVBUSxFQUFBLEdBQ0Fxa0IsRUFBQTlULEVBQUErVCxTQUFBdGtCLFFBQ0ErakIsRUFBQThCLGlDQUlBOUIsRUFBQStCLGFBQUEvQixFQUFBK0IsV0FBQXRjLEtBQUE2YSxFQUFBVSxhQUVBaEIsRUFBQU0sVUFBQUEsRUFDQU4sRUFBQWhHLEtBQUFzRyxFQUFBdEcsVUFLQTljLEtBSEEvQixJQUFBckIsRUFBQWttQixNQUFBN0ksUUFBQW1KLEVBQUFHLGVBQUFFLFFBQ0FMLEVBQUF6WixTQUFBbEwsTUFBQTZRLEVBQUEvUSxLQUFBNkQsTUFHQSxLQUFBMGdCLEVBQUF6VSxPQUFBcFEsS0FDQTZrQixFQUFBZ0MsaUJBQ0FoQyxFQUFBaUMsb0JBWUEsT0FKQTlLLEVBQUErSyxjQUNBL0ssRUFBQStLLGFBQUFocEIsS0FBQWhCLEtBQUE4bkIsR0FHQUEsRUFBQXpVLFNBR0FnVixTQUFBLFNBQUFQLEVBQUFPLEdBQ0EsSUFBQTdrQixFQUFBNGtCLEVBQUFyVyxFQUFBa1ksRUFBQUMsRUFDQVosS0FDQVAsRUFBQVYsRUFBQVUsY0FDQWphLEVBQUFnWixFQUFBcGpCLE9BR0EsR0FBQXFrQixHQUlBamEsRUFBQXhDLFlBT0EsVUFBQXdiLEVBQUFwaUIsTUFBQW9pQixFQUFBbFMsUUFBQSxHQUVBLEtBQUE5RyxJQUFBOU8sS0FBQThPLEVBQUFBLEVBQUFwTixZQUFBMUIsS0FJQSxHQUFBLElBQUE4TyxFQUFBeEMsV0FBQSxVQUFBd2IsRUFBQXBpQixPQUFBLElBQUFvSixFQUFBNUMsVUFBQSxDQUdBLElBRkErZCxLQUNBQyxLQUNBMW1CLEVBQUEsRUFBQUEsRUFBQXVsQixFQUFBdmxCLFNBTUF3QixJQUFBa2xCLEVBRkFuWSxHQUhBcVcsRUFBQUMsRUFBQTdrQixJQUdBM0IsU0FBQSxPQUdBcW9CLEVBQUFuWSxHQUFBcVcsRUFBQXhkLGFBQ0FoSixFQUFBbVEsRUFBQS9SLE1BQUFtYixNQUFBck0sSUFBQSxFQUNBbE4sRUFBQXlPLEtBQUEwQixFQUFBL1IsS0FBQSxNQUFBOE8sSUFBQW5NLFFBRUF1bkIsRUFBQW5ZLElBQ0FrWSxFQUFBenBCLEtBQUE0bkIsR0FHQTZCLEVBQUF0bkIsUUFDQTJtQixFQUFBOW9CLE1BQUErQyxLQUFBdUwsRUFBQXVaLFNBQUE0QixJQVlBLE9BTEFuYixFQUFBOU8sS0FDQStvQixFQUFBVixFQUFBMWxCLFFBQ0EybUIsRUFBQTlvQixNQUFBK0MsS0FBQXVMLEVBQUF1WixTQUFBQSxFQUFBL25CLE1BQUF5b0IsS0FHQU8sR0FHQWEsUUFBQSxTQUFBOWxCLEVBQUErbEIsR0FDQWhxQixPQUFBdWhCLGVBQUEvZixFQUFBeW9CLE1BQUE3bkIsVUFBQTZCLEdBQ0FpbUIsWUFBQSxFQUNBMUksY0FBQSxFQUVBL2UsSUFBQWpCLEVBQUFnRCxXQUFBd2xCLEdBQ0EsV0FDQSxHQUFBcHFCLEtBQUF1cUIsY0FDQSxPQUFBSCxFQUFBcHFCLEtBQUF1cUIsZ0JBR0EsV0FDQSxHQUFBdnFCLEtBQUF1cUIsY0FDQSxPQUFBdnFCLEtBQUF1cUIsY0FBQWxtQixJQUlBd2QsSUFBQSxTQUFBN2EsR0FDQTVHLE9BQUF1aEIsZUFBQTNoQixLQUFBcUUsR0FDQWltQixZQUFBLEVBQ0ExSSxjQUFBLEVBQ0E0SSxVQUFBLEVBQ0F4akIsTUFBQUEsUUFNQXVpQixJQUFBLFNBQUFnQixHQUNBLE9BQUFBLEVBQUEzb0IsRUFBQXFELFNBQ0FzbEIsRUFDQSxJQUFBM29CLEVBQUF5b0IsTUFBQUUsSUFHQXRMLFNBQ0F3TCxNQUdBQyxVQUFBLEdBRUF6VixPQUdBMFYsUUFBQSxXQUNBLEdBQUEzcUIsT0FBQXduQixNQUFBeG5CLEtBQUFpVixNQUVBLE9BREFqVixLQUFBaVYsU0FDQSxHQUdBMlQsYUFBQSxXQUVBZ0MsTUFDQUQsUUFBQSxXQUNBLEdBQUEzcUIsT0FBQXduQixNQUFBeG5CLEtBQUE0cUIsS0FFQSxPQURBNXFCLEtBQUE0cUIsUUFDQSxHQUdBaEMsYUFBQSxZQUVBaUMsT0FHQUYsUUFBQSxXQUNBLEdBQUEsYUFBQTNxQixLQUFBMEYsTUFBQTFGLEtBQUE2cUIsT0FBQXJkLEVBQUF4TixLQUFBLFNBRUEsT0FEQUEsS0FBQTZxQixTQUNBLEdBS0FuRixTQUFBLFNBQUFvQyxHQUNBLE9BQUF0YSxFQUFBc2EsRUFBQXBqQixPQUFBLE9BSUFvbUIsY0FDQWQsYUFBQSxTQUFBbEMsUUFJQTlpQixJQUFBOGlCLEVBQUF6VSxRQUFBeVUsRUFBQXlDLGdCQUNBekMsRUFBQXlDLGNBQUFRLFlBQUFqRCxFQUFBelUsWUFPQXpSLEVBQUF3bkIsWUFBQSxTQUFBN2xCLEVBQUFtQyxFQUFBK2lCLEdBR0FsbEIsRUFBQXdkLHFCQUNBeGQsRUFBQXdkLG9CQUFBcmIsRUFBQStpQixJQUlBN21CLEVBQUF5b0IsTUFBQSxTQUFBL2xCLEVBQUEwbUIsR0FHQSxLQUFBaHJCLGdCQUFBNEIsRUFBQXlvQixPQUNBLE9BQUEsSUFBQXpvQixFQUFBeW9CLE1BQUEvbEIsRUFBQTBtQixHQUlBMW1CLEdBQUFBLEVBQUFvQixNQUNBMUYsS0FBQXVxQixjQUFBam1CLEVBQ0F0RSxLQUFBMEYsS0FBQXBCLEVBQUFvQixLQUlBMUYsS0FBQWlyQixtQkFBQTNtQixFQUFBNG1CLHVCQUNBbG1CLElBQUFWLEVBQUE0bUIsbUJBR0EsSUFBQTVtQixFQUFBeW1CLFlBQ0F6RCxHQUNBQyxHQUtBdm5CLEtBQUEwRSxPQUFBSixFQUFBSSxRQUFBLElBQUFKLEVBQUFJLE9BQUE0SCxTQUNBaEksRUFBQUksT0FBQWhELFdBQ0E0QyxFQUFBSSxPQUVBMUUsS0FBQTJwQixjQUFBcmxCLEVBQUFxbEIsY0FDQTNwQixLQUFBbXJCLGNBQUE3bUIsRUFBQTZtQixlQUlBbnJCLEtBQUEwRixLQUFBcEIsRUFJQTBtQixHQUNBcHBCLEVBQUF1QyxPQUFBbkUsS0FBQWdyQixHQUlBaHJCLEtBQUFvckIsVUFBQTltQixHQUFBQSxFQUFBOG1CLFdBQUF4cEIsRUFBQXlGLE1BR0FySCxLQUFBNEIsRUFBQXFELFVBQUEsR0FLQXJELEVBQUF5b0IsTUFBQTduQixXQUNBRSxZQUFBZCxFQUFBeW9CLE1BQ0FZLG1CQUFBMUQsR0FDQW1DLHFCQUFBbkMsR0FDQXFDLDhCQUFBckMsR0FDQThELGFBQUEsRUFFQXZCLGVBQUEsV0FDQSxJQUFBdmQsRUFBQXZNLEtBQUF1cUIsY0FFQXZxQixLQUFBaXJCLG1CQUFBM0QsR0FFQS9hLElBQUF2TSxLQUFBcXJCLGFBQ0E5ZSxFQUFBdWQsa0JBR0FDLGdCQUFBLFdBQ0EsSUFBQXhkLEVBQUF2TSxLQUFBdXFCLGNBRUF2cUIsS0FBQTBwQixxQkFBQXBDLEdBRUEvYSxJQUFBdk0sS0FBQXFyQixhQUNBOWUsRUFBQXdkLG1CQUdBdUIseUJBQUEsV0FDQSxJQUFBL2UsRUFBQXZNLEtBQUF1cUIsY0FFQXZxQixLQUFBNHBCLDhCQUFBdEMsR0FFQS9hLElBQUF2TSxLQUFBcXJCLGFBQ0E5ZSxFQUFBK2UsMkJBR0F0ckIsS0FBQStwQixvQkFLQW5vQixFQUFBd0IsTUFDQW1vQixRQUFBLEVBQ0FDLFNBQUEsRUFDQUMsWUFBQSxFQUNBQyxnQkFBQSxFQUNBQyxTQUFBLEVBQ0FDLFFBQUEsRUFDQUMsWUFBQSxFQUNBQyxTQUFBLEVBQ0FDLE9BQUEsRUFDQUMsT0FBQSxFQUNBQyxVQUFBLEVBQ0FDLE1BQUEsRUFDQUMsTUFBQSxFQUNBQyxVQUFBLEVBQ0FqZSxLQUFBLEVBQ0FrZSxTQUFBLEVBQ0F6VyxRQUFBLEVBQ0EwVyxTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsV0FBQSxFQUNBQyxhQUFBLEVBQ0FDLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxlQUFBLEVBQ0FDLFdBQUEsRUFDQUMsU0FBQSxFQUVBQyxNQUFBLFNBQUFwRixHQUNBLElBQUFsUyxFQUFBa1MsRUFBQWxTLE9BR0EsT0FBQSxNQUFBa1MsRUFBQW9GLE9BQUEvRixHQUFBNVosS0FBQXVhLEVBQUFwaUIsTUFDQSxNQUFBb2lCLEVBQUFzRSxTQUFBdEUsRUFBQXNFLFNBQUF0RSxFQUFBdUUsU0FJQXZFLEVBQUFvRixZQUFBbG9CLElBQUE0USxHQUFBd1IsR0FBQTdaLEtBQUF1YSxFQUFBcGlCLE1BQ0EsRUFBQWtRLEVBQ0EsRUFHQSxFQUFBQSxFQUNBLEVBR0EsRUFBQUEsRUFDQSxFQUdBLEVBR0FrUyxFQUFBb0YsUUFFQXRyQixFQUFBa21CLE1BQUFxQyxTQVVBdm9CLEVBQUF3QixNQUNBK3BCLFdBQUEsWUFDQUMsV0FBQSxXQUNBQyxhQUFBLGNBQ0FDLGFBQUEsY0FDQSxTQUFBQyxFQUFBaEUsR0FDQTNuQixFQUFBa21CLE1BQUE3SSxRQUFBc08sSUFDQTNFLGFBQUFXLEVBQ0FWLFNBQUFVLEVBRUFkLE9BQUEsU0FBQVgsR0FDQSxJQUFBN2tCLEVBRUF1cUIsRUFBQTFGLEVBQUFxRCxjQUNBL0MsRUFBQU4sRUFBQU0sVUFTQSxPQUxBb0YsSUFBQUEsSUFOQXh0QixNQU1BNEIsRUFBQThHLFNBTkExSSxLQU1Bd3RCLE1BQ0ExRixFQUFBcGlCLEtBQUEwaUIsRUFBQUcsU0FDQXRsQixFQUFBbWxCLEVBQUF6WixRQUFBbEwsTUFBQXpELEtBQUEwRCxXQUNBb2tCLEVBQUFwaUIsS0FBQTZqQixHQUVBdG1CLE1BS0FyQixFQUFBRyxHQUFBb0MsUUFFQXVqQixHQUFBLFNBQUFDLEVBQUE5bEIsRUFBQWlnQixFQUFBL2YsR0FDQSxPQUFBMmxCLEdBQUExbkIsS0FBQTJuQixFQUFBOWxCLEVBQUFpZ0IsRUFBQS9mLElBRUE2bEIsSUFBQSxTQUFBRCxFQUFBOWxCLEVBQUFpZ0IsRUFBQS9mLEdBQ0EsT0FBQTJsQixHQUFBMW5CLEtBQUEybkIsRUFBQTlsQixFQUFBaWdCLEVBQUEvZixFQUFBLElBRUFnbUIsSUFBQSxTQUFBSixFQUFBOWxCLEVBQUFFLEdBQ0EsSUFBQXFtQixFQUFBMWlCLEVBQ0EsR0FBQWlpQixHQUFBQSxFQUFBbUMsZ0JBQUFuQyxFQUFBUyxVQVdBLE9BUkFBLEVBQUFULEVBQUFTLFVBQ0F4bUIsRUFBQStsQixFQUFBNkIsZ0JBQUF6QixJQUNBSyxFQUFBVSxVQUNBVixFQUFBRyxTQUFBLElBQUFILEVBQUFVLFVBQ0FWLEVBQUFHLFNBQ0FILEVBQUF2bUIsU0FDQXVtQixFQUFBelosU0FFQTNPLEtBRUEsR0FBQSxpQkFBQTJuQixFQUFBLENBR0EsSUFBQWppQixLQUFBaWlCLEVBQ0EzbkIsS0FBQStuQixJQUFBcmlCLEVBQUE3RCxFQUFBOGxCLEVBQUFqaUIsSUFFQSxPQUFBMUYsS0FXQSxPQVRBLElBQUE2QixHQUFBLG1CQUFBQSxJQUdBRSxFQUFBRixFQUNBQSxPQUFBbUQsSUFFQSxJQUFBakQsSUFDQUEsRUFBQXdsQixJQUVBdm5CLEtBQUFvRCxLQUFBLFdBQ0F4QixFQUFBa21CLE1BQUFoTCxPQUFBOWMsS0FBQTJuQixFQUFBNWxCLEVBQUFGLFFBTUEsSUFLQTRyQixHQUFBLDhGQU9BQyxHQUFBLHdCQUdBQyxHQUFBLG9DQUNBQyxHQUFBLGNBQ0FDLEdBQUEsMkNBR0EsU0FBQUMsR0FBQXZxQixFQUFBdVksR0FDQSxPQUFBdE8sRUFBQWpLLEVBQUEsVUFDQWlLLEVBQUEsS0FBQXNPLEVBQUF4UCxTQUFBd1AsRUFBQUEsRUFBQXpKLFdBQUEsTUFFQXpRLEVBQUEsU0FBQTJCLEdBQUEsSUFBQUEsRUFHQUEsRUFJQSxTQUFBd3FCLEdBQUF4cUIsR0FFQSxPQURBQSxFQUFBbUMsTUFBQSxPQUFBbkMsRUFBQWtLLGFBQUEsU0FBQSxJQUFBbEssRUFBQW1DLEtBQ0FuQyxFQUVBLFNBQUF5cUIsR0FBQXpxQixHQUNBLElBQUFxSixFQUFBZ2hCLEdBQUEzZ0IsS0FBQTFKLEVBQUFtQyxNQVFBLE9BTkFrSCxFQUNBckosRUFBQW1DLEtBQUFrSCxFQUFBLEdBRUFySixFQUFBeUssZ0JBQUEsUUFHQXpLLEVBR0EsU0FBQTBxQixHQUFBM3BCLEVBQUE0cEIsR0FDQSxJQUFBMXFCLEVBQUF5WCxFQUFBdlYsRUFBQXlvQixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBcEcsRUFFQSxHQUFBLElBQUFnRyxFQUFBNWhCLFNBQUEsQ0FLQSxHQUFBMlYsRUFBQUQsUUFBQTFkLEtBQ0E2cEIsRUFBQWxNLEVBQUFmLE9BQUE1YyxHQUNBOHBCLEVBQUFuTSxFQUFBSixJQUFBcU0sRUFBQUMsR0FDQWpHLEVBQUFpRyxFQUFBakcsUUFFQSxRQUNBa0csRUFBQTNGLE9BQ0EyRixFQUFBbEcsVUFFQSxJQUFBeGlCLEtBQUF3aUIsRUFDQSxJQUFBMWtCLEVBQUEsRUFBQXlYLEVBQUFpTixFQUFBeGlCLEdBQUEvQyxPQUFBYSxFQUFBeVgsRUFBQXpYLElBQ0E1QixFQUFBa21CLE1BQUF6TSxJQUFBNlMsRUFBQXhvQixFQUFBd2lCLEVBQUF4aUIsR0FBQWxDLElBT0EwZSxFQUFBRixRQUFBMWQsS0FDQStwQixFQUFBbk0sRUFBQWhCLE9BQUE1YyxHQUNBZ3FCLEVBQUExc0IsRUFBQXVDLFVBQUFrcUIsR0FFQW5NLEVBQUFMLElBQUFxTSxFQUFBSSxLQUtBLFNBQUFDLEdBQUFqcUIsRUFBQTRwQixHQUNBLElBQUExZ0IsRUFBQTBnQixFQUFBMWdCLFNBQUE5RixjQUdBLFVBQUE4RixHQUFBeVgsR0FBQTFYLEtBQUFqSixFQUFBb0IsTUFDQXdvQixFQUFBM1ksUUFBQWpSLEVBQUFpUixRQUdBLFVBQUEvSCxHQUFBLGFBQUFBLElBQ0EwZ0IsRUFBQXpVLGFBQUFuVixFQUFBbVYsY0FJQSxTQUFBK1UsR0FBQUMsRUFBQXJuQixFQUFBL0QsRUFBQW1qQixHQUdBcGYsRUFBQTdHLEVBQUFrRCxTQUFBMkQsR0FFQSxJQUFBc2YsRUFBQS9pQixFQUFBMmlCLEVBQUFvSSxFQUFBbGYsRUFBQXBPLEVBQ0FvQyxFQUFBLEVBQ0F5WCxFQUFBd1QsRUFBQTlyQixPQUNBZ3NCLEVBQUExVCxFQUFBLEVBQ0FqVSxFQUFBSSxFQUFBLEdBQ0F4QyxFQUFBaEQsRUFBQWdELFdBQUFvQyxHQUdBLEdBQUFwQyxHQUNBcVcsRUFBQSxHQUFBLGlCQUFBalUsSUFDQS9GLEVBQUErbEIsWUFBQTJHLEdBQUFwZ0IsS0FBQXZHLEdBQ0EsT0FBQXluQixFQUFBcnJCLEtBQUEsU0FBQStYLEdBQ0EsSUFBQVosRUFBQWtVLEVBQUE3cUIsR0FBQXVYLEdBQ0F2VyxJQUNBd0MsRUFBQSxHQUFBSixFQUFBaEcsS0FBQWhCLEtBQUFtYixFQUFBWixFQUFBcVUsU0FFQUosR0FBQWpVLEVBQUFuVCxFQUFBL0QsRUFBQW1qQixLQUlBLEdBQUF2TCxJQUVBdFgsR0FEQStpQixFQUFBTCxHQUFBamYsRUFBQXFuQixFQUFBLEdBQUF6aEIsZUFBQSxFQUFBeWhCLEVBQUFqSSxJQUNBblUsV0FFQSxJQUFBcVUsRUFBQXJhLFdBQUExSixTQUNBK2pCLEVBQUEvaUIsR0FJQUEsR0FBQTZpQixHQUFBLENBT0EsSUFMQWtJLEdBREFwSSxFQUFBMWtCLEVBQUEwQixJQUFBMmlCLEdBQUFTLEVBQUEsVUFBQXFILEtBQ0FwckIsT0FLQWEsRUFBQXlYLEVBQUF6WCxJQUNBZ00sRUFBQWtYLEVBRUFsakIsSUFBQW1yQixJQUNBbmYsRUFBQTVOLEVBQUE2QyxNQUFBK0ssR0FBQSxHQUFBLEdBR0FrZixHQUlBOXNCLEVBQUFzQixNQUFBb2pCLEVBQUFMLEdBQUF6VyxFQUFBLFlBSUFuTSxFQUFBckMsS0FBQXl0QixFQUFBanJCLEdBQUFnTSxFQUFBaE0sR0FHQSxHQUFBa3JCLEVBT0EsSUFOQXR0QixFQUFBa2xCLEVBQUFBLEVBQUEzakIsT0FBQSxHQUFBcUssY0FHQXBMLEVBQUEwQixJQUFBZ2pCLEVBQUEwSCxJQUdBeHFCLEVBQUEsRUFBQUEsRUFBQWtyQixFQUFBbHJCLElBQ0FnTSxFQUFBOFcsRUFBQTlpQixHQUNBMmhCLEdBQUE1WCxLQUFBaUMsRUFBQTlKLE1BQUEsTUFDQXVjLEVBQUFmLE9BQUExUixFQUFBLGVBQ0E1TixFQUFBOEcsU0FBQXRILEVBQUFvTyxLQUVBQSxFQUFBbEwsSUFHQTFDLEVBQUFpdEIsVUFDQWp0QixFQUFBaXRCLFNBQUFyZixFQUFBbEwsS0FHQXBELEVBQUFzTyxFQUFBNEMsWUFBQWhOLFFBQUF5b0IsR0FBQSxJQUFBenNCLElBUUEsT0FBQXF0QixFQUdBLFNBQUEzUixHQUFBdlosRUFBQTFCLEVBQUFpdEIsR0FLQSxJQUpBLElBQUF0ZixFQUNBb1gsRUFBQS9rQixFQUFBRCxFQUFBdU8sT0FBQXRPLEVBQUEwQixHQUFBQSxFQUNBQyxFQUFBLEVBRUEsT0FBQWdNLEVBQUFvWCxFQUFBcGpCLElBQUFBLElBQ0FzckIsR0FBQSxJQUFBdGYsRUFBQWxELFVBQ0ExSyxFQUFBbXRCLFVBQUE5SSxHQUFBelcsSUFHQUEsRUFBQTlOLGFBQ0FvdEIsR0FBQWx0QixFQUFBOEcsU0FBQThHLEVBQUF4QyxjQUFBd0MsSUFDQTBXLEdBQUFELEdBQUF6VyxFQUFBLFdBRUFBLEVBQUE5TixXQUFBQyxZQUFBNk4sSUFJQSxPQUFBak0sRUFHQTNCLEVBQUF1QyxRQUNBMGlCLGNBQUEsU0FBQStILEdBQ0EsT0FBQUEsRUFBQXhwQixRQUFBcW9CLEdBQUEsY0FHQWhwQixNQUFBLFNBQUFsQixFQUFBeXJCLEVBQUFDLEdBQ0EsSUFBQXpyQixFQUFBeVgsRUFBQWlVLEVBQUFDLEVBQ0ExcUIsRUFBQWxCLEVBQUEwakIsV0FBQSxHQUNBbUksRUFBQXh0QixFQUFBOEcsU0FBQW5GLEVBQUF5SixjQUFBekosR0FHQSxLQUFBdEMsRUFBQWltQixnQkFBQSxJQUFBM2pCLEVBQUErSSxVQUFBLEtBQUEvSSxFQUFBK0ksVUFDQTFLLEVBQUErWCxTQUFBcFcsSUFNQSxJQUhBNHJCLEVBQUFsSixHQUFBeGhCLEdBR0FqQixFQUFBLEVBQUF5WCxHQUZBaVUsRUFBQWpKLEdBQUExaUIsSUFFQVosT0FBQWEsRUFBQXlYLEVBQUF6WCxJQUNBK3FCLEdBQUFXLEVBQUExckIsR0FBQTJyQixFQUFBM3JCLElBS0EsR0FBQXdyQixFQUNBLEdBQUFDLEVBSUEsSUFIQUMsRUFBQUEsR0FBQWpKLEdBQUExaUIsR0FDQTRyQixFQUFBQSxHQUFBbEosR0FBQXhoQixHQUVBakIsRUFBQSxFQUFBeVgsRUFBQWlVLEVBQUF2c0IsT0FBQWEsRUFBQXlYLEVBQUF6WCxJQUNBeXFCLEdBQUFpQixFQUFBMXJCLEdBQUEyckIsRUFBQTNyQixTQUdBeXFCLEdBQUExcUIsRUFBQWtCLEdBV0EsT0FOQTBxQixFQUFBbEosR0FBQXhoQixFQUFBLFdBQ0E5QixPQUFBLEdBQ0F1akIsR0FBQWlKLEdBQUFDLEdBQUFuSixHQUFBMWlCLEVBQUEsV0FJQWtCLEdBR0FzcUIsVUFBQSxTQUFBL3JCLEdBS0EsSUFKQSxJQUFBOGUsRUFBQXZlLEVBQUFtQyxFQUNBdVosRUFBQXJkLEVBQUFrbUIsTUFBQTdJLFFBQ0F6YixFQUFBLE9BRUF3QixLQUFBekIsRUFBQVAsRUFBQVEsSUFBQUEsSUFDQSxHQUFBK2QsRUFBQWhlLEdBQUEsQ0FDQSxHQUFBdWUsRUFBQXZlLEVBQUEwZSxFQUFBaGQsU0FBQSxDQUNBLEdBQUE2YyxFQUFBb0csT0FDQSxJQUFBeGlCLEtBQUFvYyxFQUFBb0csT0FDQWpKLEVBQUF2WixHQUNBOUQsRUFBQWttQixNQUFBaEwsT0FBQXZaLEVBQUFtQyxHQUlBOUQsRUFBQXduQixZQUFBN2xCLEVBQUFtQyxFQUFBb2MsRUFBQTJHLFFBT0FsbEIsRUFBQTBlLEVBQUFoZCxjQUFBRCxFQUVBekIsRUFBQTJlLEVBQUFqZCxXQUlBMUIsRUFBQTJlLEVBQUFqZCxjQUFBRCxPQU9BcEQsRUFBQUcsR0FBQW9DLFFBQ0FrckIsT0FBQSxTQUFBeHRCLEdBQ0EsT0FBQWliLEdBQUE5YyxLQUFBNkIsR0FBQSxJQUdBaWIsT0FBQSxTQUFBamIsR0FDQSxPQUFBaWIsR0FBQTljLEtBQUE2QixJQUdBTixLQUFBLFNBQUF5RixHQUNBLE9BQUFrYSxFQUFBbGhCLEtBQUEsU0FBQWdILEdBQ0EsWUFBQWhDLElBQUFnQyxFQUNBcEYsRUFBQUwsS0FBQXZCLE1BQ0FBLEtBQUEwVixRQUFBdFMsS0FBQSxXQUNBLElBQUFwRCxLQUFBc00sVUFBQSxLQUFBdE0sS0FBQXNNLFVBQUEsSUFBQXRNLEtBQUFzTSxXQUNBdE0sS0FBQW9TLFlBQUFwTCxNQUdBLEtBQUFBLEVBQUF0RCxVQUFBZixTQUdBMnNCLE9BQUEsV0FDQSxPQUFBZCxHQUFBeHVCLEtBQUEwRCxVQUFBLFNBQUFILEdBQ0EsR0FBQSxJQUFBdkQsS0FBQXNNLFVBQUEsS0FBQXRNLEtBQUFzTSxVQUFBLElBQUF0TSxLQUFBc00sU0FBQSxDQUNBd2hCLEdBQUE5dEIsS0FBQXVELEdBQ0E5QixZQUFBOEIsT0FLQWdzQixRQUFBLFdBQ0EsT0FBQWYsR0FBQXh1QixLQUFBMEQsVUFBQSxTQUFBSCxHQUNBLEdBQUEsSUFBQXZELEtBQUFzTSxVQUFBLEtBQUF0TSxLQUFBc00sVUFBQSxJQUFBdE0sS0FBQXNNLFNBQUEsQ0FDQSxJQUFBNUgsRUFBQW9wQixHQUFBOXRCLEtBQUF1RCxHQUNBbUIsRUFBQThxQixhQUFBanNCLEVBQUFtQixFQUFBMk4sZ0JBS0FvZCxPQUFBLFdBQ0EsT0FBQWpCLEdBQUF4dUIsS0FBQTBELFVBQUEsU0FBQUgsR0FDQXZELEtBQUEwQixZQUNBMUIsS0FBQTBCLFdBQUE4dEIsYUFBQWpzQixFQUFBdkQsU0FLQTB2QixNQUFBLFdBQ0EsT0FBQWxCLEdBQUF4dUIsS0FBQTBELFVBQUEsU0FBQUgsR0FDQXZELEtBQUEwQixZQUNBMUIsS0FBQTBCLFdBQUE4dEIsYUFBQWpzQixFQUFBdkQsS0FBQWlQLGdCQUtBeUcsTUFBQSxXQUlBLElBSEEsSUFBQW5TLEVBQ0FDLEVBQUEsRUFFQSxPQUFBRCxFQUFBdkQsS0FBQXdELElBQUFBLElBQ0EsSUFBQUQsRUFBQStJLFdBR0ExSyxFQUFBbXRCLFVBQUE5SSxHQUFBMWlCLEdBQUEsSUFHQUEsRUFBQTZPLFlBQUEsSUFJQSxPQUFBcFMsTUFHQXlFLE1BQUEsU0FBQXVxQixFQUFBQyxHQUlBLE9BSEFELEVBQUEsTUFBQUEsR0FBQUEsRUFDQUMsRUFBQSxNQUFBQSxFQUFBRCxFQUFBQyxFQUVBanZCLEtBQUFzRCxJQUFBLFdBQ0EsT0FBQTFCLEVBQUE2QyxNQUFBekUsS0FBQWd2QixFQUFBQyxNQUlBTCxLQUFBLFNBQUE1bkIsR0FDQSxPQUFBa2EsRUFBQWxoQixLQUFBLFNBQUFnSCxHQUNBLElBQUF6RCxFQUFBdkQsS0FBQSxPQUNBd0QsRUFBQSxFQUNBeVgsRUFBQWpiLEtBQUEyQyxPQUVBLFFBQUFxQyxJQUFBZ0MsR0FBQSxJQUFBekQsRUFBQStJLFNBQ0EsT0FBQS9JLEVBQUFpTixVQUlBLEdBQUEsaUJBQUF4SixJQUFBMG1CLEdBQUFuZ0IsS0FBQXZHLEtBQ0FvZSxJQUFBRixHQUFBalksS0FBQWpHLEtBQUEsR0FBQSxLQUFBLEdBQUFVLGVBQUEsQ0FFQVYsRUFBQXBGLEVBQUFpbEIsY0FBQTdmLEdBRUEsSUFDQSxLQUFBeEQsRUFBQXlYLEVBQUF6WCxJQUlBLEtBSEFELEVBQUF2RCxLQUFBd0QsUUFHQThJLFdBQ0ExSyxFQUFBbXRCLFVBQUE5SSxHQUFBMWlCLEdBQUEsSUFDQUEsRUFBQWlOLFVBQUF4SixHQUlBekQsRUFBQSxFQUdBLE1BQUFnSixLQUdBaEosR0FDQXZELEtBQUEwVixRQUFBNFosT0FBQXRvQixJQUVBLEtBQUFBLEVBQUF0RCxVQUFBZixTQUdBZ3RCLFlBQUEsV0FDQSxJQUFBbkosS0FHQSxPQUFBZ0ksR0FBQXh1QixLQUFBMEQsVUFBQSxTQUFBSCxHQUNBLElBQUF3USxFQUFBL1QsS0FBQTBCLFdBRUFFLEVBQUE2RSxRQUFBekcsS0FBQXdtQixHQUFBLElBQ0E1a0IsRUFBQW10QixVQUFBOUksR0FBQWptQixPQUNBK1QsR0FDQUEsRUFBQTZiLGFBQUFyc0IsRUFBQXZELFFBS0F3bUIsTUFJQTVrQixFQUFBd0IsTUFDQXlzQixTQUFBLFNBQ0FDLFVBQUEsVUFDQU4sYUFBQSxTQUNBTyxZQUFBLFFBQ0FDLFdBQUEsZUFDQSxTQUFBM3JCLEVBQUE0ckIsR0FDQXJ1QixFQUFBRyxHQUFBc0MsR0FBQSxTQUFBeEMsR0FPQSxJQU5BLElBQUFtQixFQUNBQyxLQUNBaXRCLEVBQUF0dUIsRUFBQUMsR0FDQWdDLEVBQUFxc0IsRUFBQXZ0QixPQUFBLEVBQ0FhLEVBQUEsRUFFQUEsR0FBQUssRUFBQUwsSUFDQVIsRUFBQVEsSUFBQUssRUFBQTdELEtBQUFBLEtBQUF5RSxPQUFBLEdBQ0E3QyxFQUFBc3VCLEVBQUExc0IsSUFBQXlzQixHQUFBanRCLEdBSUF4QyxFQUFBaUQsTUFBQVIsRUFBQUQsRUFBQUgsT0FHQSxPQUFBN0MsS0FBQStDLFVBQUFFLE1BR0EsSUFBQWt0QixHQUFBLFVBRUFDLEdBQUEsSUFBQXRtQixPQUFBLEtBQUFzWixFQUFBLGtCQUFBLEtBRUFpTixHQUFBLFNBQUE5c0IsR0FLQSxJQUFBMm9CLEVBQUEzb0IsRUFBQXlKLGNBQUEyQyxZQU1BLE9BSkF1YyxHQUFBQSxFQUFBb0UsU0FDQXBFLEVBQUFuc0IsR0FHQW1zQixFQUFBcUUsaUJBQUFodEIsS0FLQSxXQUlBLFNBQUFpdEIsSUFHQSxHQUFBekosRUFBQSxDQUlBQSxFQUFBdEQsTUFBQWdOLFFBQ0EsNEdBSUExSixFQUFBdlcsVUFBQSxHQUNBakIsR0FBQTlOLFlBQUFpdkIsR0FFQSxJQUFBQyxFQUFBNXdCLEVBQUF3d0IsaUJBQUF4SixHQUNBNkosRUFBQSxPQUFBRCxFQUFBL2dCLElBR0FpaEIsRUFBQSxRQUFBRixFQUFBRyxXQUNBQyxFQUFBLFFBQUFKLEVBQUFLLE1BSUFqSyxFQUFBdEQsTUFBQXdOLFlBQUEsTUFDQUMsRUFBQSxRQUFBUCxFQUFBTSxZQUVBMWhCLEdBQUE1TixZQUFBK3VCLEdBSUEzSixFQUFBLE1BR0EsSUFBQTZKLEVBQUFHLEVBQUFHLEVBQUFMLEVBQ0FILEVBQUE5d0IsRUFBQTBCLGNBQUEsT0FDQXlsQixFQUFBbm5CLEVBQUEwQixjQUFBLE9BR0F5bEIsRUFBQXRELFFBTUFzRCxFQUFBdEQsTUFBQTBOLGVBQUEsY0FDQXBLLEVBQUFFLFdBQUEsR0FBQXhELE1BQUEwTixlQUFBLEdBQ0Fsd0IsRUFBQW13QixnQkFBQSxnQkFBQXJLLEVBQUF0RCxNQUFBME4sZUFFQVQsRUFBQWpOLE1BQUFnTixRQUFBLDRGQUVBQyxFQUFBanZCLFlBQUFzbEIsR0FFQW5sQixFQUFBdUMsT0FBQWxELEdBQ0Fvd0IsY0FBQSxXQUVBLE9BREFiLElBQ0FJLEdBRUFVLGtCQUFBLFdBRUEsT0FEQWQsSUFDQU8sR0FFQVEsaUJBQUEsV0FFQSxPQURBZixJQUNBVSxHQUVBTSxtQkFBQSxXQUVBLE9BREFoQixJQUNBSyxNQXhFQSxHQThFQSxTQUFBWSxHQUFBbHVCLEVBQUFjLEVBQUFxdEIsR0FDQSxJQUFBVixFQUFBVyxFQUFBQyxFQUFBM3VCLEVBTUF3Z0IsRUFBQWxnQixFQUFBa2dCLE1BcUNBLE9BbkNBaU8sRUFBQUEsR0FBQXJCLEdBQUE5c0IsTUFRQSxNQUZBTixFQUFBeXVCLEVBQUFHLGlCQUFBeHRCLElBQUFxdEIsRUFBQXJ0QixLQUVBekMsRUFBQThHLFNBQUFuRixFQUFBeUosY0FBQXpKLEtBQ0FOLEVBQUFyQixFQUFBNmhCLE1BQUFsZ0IsRUFBQWMsS0FRQXBELEVBQUFzd0Isb0JBQUFuQixHQUFBN2lCLEtBQUF0SyxJQUFBa3RCLEdBQUE1aUIsS0FBQWxKLEtBR0Eyc0IsRUFBQXZOLEVBQUF1TixNQUNBVyxFQUFBbE8sRUFBQWtPLFNBQ0FDLEVBQUFuTyxFQUFBbU8sU0FHQW5PLEVBQUFrTyxTQUFBbE8sRUFBQW1PLFNBQUFuTyxFQUFBdU4sTUFBQS90QixFQUNBQSxFQUFBeXVCLEVBQUFWLE1BR0F2TixFQUFBdU4sTUFBQUEsRUFDQXZOLEVBQUFrTyxTQUFBQSxFQUNBbE8sRUFBQW1PLFNBQUFBLFNBSUE1c0IsSUFBQS9CLEVBSUFBLEVBQUEsR0FDQUEsRUFJQSxTQUFBNnVCLEdBQUFDLEVBQUFDLEdBR0EsT0FDQW52QixJQUFBLFdBQ0EsSUFBQWt2QixJQVNBLE9BQUEveEIsS0FBQTZDLElBQUFtdkIsR0FBQXZ1QixNQUFBekQsS0FBQTBELGtCQUxBMUQsS0FBQTZDLE1BV0EsSUFLQW92QixHQUFBLDRCQUNBQyxHQUFBLE1BQ0FDLElBQUFDLFNBQUEsV0FBQUMsV0FBQSxTQUFBM08sUUFBQSxTQUNBNE8sSUFDQUMsY0FBQSxJQUNBQyxXQUFBLE9BR0FDLElBQUEsU0FBQSxNQUFBLE1BQ0FDLEdBQUE5eUIsRUFBQTBCLGNBQUEsT0FBQW1pQixNQXdCQSxTQUFBa1AsR0FBQXR1QixHQUNBLElBQUFwQixFQUFBckIsRUFBQWd4QixTQUFBdnVCLEdBSUEsT0FIQXBCLElBQ0FBLEVBQUFyQixFQUFBZ3hCLFNBQUF2dUIsR0F4QkEsU0FBQUEsR0FHQSxHQUFBQSxLQUFBcXVCLEdBQ0EsT0FBQXJ1QixFQU9BLElBSEEsSUFBQXd1QixFQUFBeHVCLEVBQUEsR0FBQTlCLGNBQUE4QixFQUFBL0QsTUFBQSxHQUNBa0QsRUFBQWl2QixHQUFBOXZCLE9BRUFhLEtBRUEsSUFEQWEsRUFBQW91QixHQUFBanZCLEdBQUFxdkIsS0FDQUgsR0FDQSxPQUFBcnVCLEVBVUF5dUIsQ0FBQXp1QixJQUFBQSxHQUVBcEIsRUFHQSxTQUFBOHZCLEdBQUF4dkIsRUFBQXlELEVBQUFnc0IsR0FJQSxJQUFBbnNCLEVBQUF5YyxFQUFBclcsS0FBQWpHLEdBQ0EsT0FBQUgsRUFHQTNCLEtBQUErdEIsSUFBQSxFQUFBcHNCLEVBQUEsSUFBQW1zQixHQUFBLEtBQUFuc0IsRUFBQSxJQUFBLE1BQ0FHLEVBR0EsU0FBQWtzQixHQUFBM3ZCLEVBQUFjLEVBQUE4dUIsRUFBQUMsRUFBQUMsR0FDQSxJQUFBN3ZCLEVBQ0FvTyxFQUFBLEVBV0EsSUFQQXBPLEVBREEydkIsS0FBQUMsRUFBQSxTQUFBLFdBQ0EsRUFJQSxVQUFBL3VCLEVBQUEsRUFBQSxFQUdBYixFQUFBLEVBQUFBLEdBQUEsRUFHQSxXQUFBMnZCLElBQ0F2aEIsR0FBQWhRLEVBQUEraEIsSUFBQXBnQixFQUFBNHZCLEVBQUE1UCxFQUFBL2YsSUFBQSxFQUFBNnZCLElBR0FELEdBR0EsWUFBQUQsSUFDQXZoQixHQUFBaFEsRUFBQStoQixJQUFBcGdCLEVBQUEsVUFBQWdnQixFQUFBL2YsSUFBQSxFQUFBNnZCLElBSUEsV0FBQUYsSUFDQXZoQixHQUFBaFEsRUFBQStoQixJQUFBcGdCLEVBQUEsU0FBQWdnQixFQUFBL2YsR0FBQSxTQUFBLEVBQUE2dkIsTUFLQXpoQixHQUFBaFEsRUFBQStoQixJQUFBcGdCLEVBQUEsVUFBQWdnQixFQUFBL2YsSUFBQSxFQUFBNnZCLEdBR0EsWUFBQUYsSUFDQXZoQixHQUFBaFEsRUFBQStoQixJQUFBcGdCLEVBQUEsU0FBQWdnQixFQUFBL2YsR0FBQSxTQUFBLEVBQUE2dkIsS0FLQSxPQUFBemhCLEVBR0EsU0FBQTBoQixHQUFBL3ZCLEVBQUFjLEVBQUE4dUIsR0FHQSxJQUFBSSxFQUNBRixFQUFBaEQsR0FBQTlzQixHQUNBcU8sRUFBQTZmLEdBQUFsdUIsRUFBQWMsRUFBQWd2QixHQUNBRCxFQUFBLGVBQUF4eEIsRUFBQStoQixJQUFBcGdCLEVBQUEsYUFBQSxFQUFBOHZCLEdBR0EsT0FBQWpELEdBQUE3aUIsS0FBQXFFLEdBQ0FBLEdBS0EyaEIsRUFBQUgsSUFDQW55QixFQUFBcXdCLHFCQUFBMWYsSUFBQXJPLEVBQUFrZ0IsTUFBQXBmLElBSUEsU0FBQXVOLElBQ0FBLEVBQUFyTyxFQUFBLFNBQUFjLEVBQUEsR0FBQTlCLGNBQUE4QixFQUFBL0QsTUFBQSxNQUlBc1IsRUFBQTlMLFdBQUE4TCxJQUFBLEdBSUFzaEIsR0FDQTN2QixFQUNBYyxFQUNBOHVCLElBQUFDLEVBQUEsU0FBQSxXQUNBRyxFQUNBRixHQUVBLE1BR0F6eEIsRUFBQXVDLFFBSUFxdkIsVUFDQUMsU0FDQTV3QixJQUFBLFNBQUFVLEVBQUFtdUIsR0FDQSxHQUFBQSxFQUFBLENBR0EsSUFBQXp1QixFQUFBd3VCLEdBQUFsdUIsRUFBQSxXQUNBLE1BQUEsS0FBQU4sRUFBQSxJQUFBQSxNQU9Bc2hCLFdBQ0FtUCx5QkFBQSxFQUNBQyxhQUFBLEVBQ0FDLGFBQUEsRUFDQUMsVUFBQSxFQUNBQyxZQUFBLEVBQ0F0QixZQUFBLEVBQ0F1QixZQUFBLEVBQ0FOLFNBQUEsRUFDQU8sT0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFFBQUEsRUFDQUMsUUFBQSxFQUNBQyxNQUFBLEdBS0F4QixVQUNBeUIsTUFBQSxZQUlBNVEsTUFBQSxTQUFBbGdCLEVBQUFjLEVBQUEyQyxFQUFBbXNCLEdBR0EsR0FBQTV2QixHQUFBLElBQUFBLEVBQUErSSxVQUFBLElBQUEvSSxFQUFBK0ksVUFBQS9JLEVBQUFrZ0IsTUFBQSxDQUtBLElBQUF4Z0IsRUFBQXlDLEVBQUFtZCxFQUNBeVIsRUFBQTF5QixFQUFBdUUsVUFBQTlCLEdBQ0Frd0IsRUFBQXJDLEdBQUEza0IsS0FBQWxKLEdBQ0FvZixFQUFBbGdCLEVBQUFrZ0IsTUFhQSxHQVJBOFEsSUFDQWx3QixFQUFBc3VCLEdBQUEyQixJQUlBelIsRUFBQWpoQixFQUFBNHhCLFNBQUFudkIsSUFBQXpDLEVBQUE0eEIsU0FBQWMsUUFHQXR2QixJQUFBZ0MsRUF3Q0EsT0FBQTZiLEdBQUEsUUFBQUEsUUFDQTdkLEtBQUEvQixFQUFBNGYsRUFBQWhnQixJQUFBVSxHQUFBLEVBQUE0dkIsSUFFQWx3QixFQUlBd2dCLEVBQUFwZixHQTNDQSxZQUhBcUIsU0FBQXNCLEtBR0EvRCxFQUFBcWdCLEVBQUFyVyxLQUFBakcsS0FBQS9ELEVBQUEsS0FDQStELEVBQUE4YyxHQUFBdmdCLEVBQUFjLEVBQUFwQixHQUdBeUMsRUFBQSxVQUlBLE1BQUFzQixHQUFBQSxHQUFBQSxJQUtBLFdBQUF0QixJQUNBc0IsR0FBQS9ELEdBQUFBLEVBQUEsS0FBQXJCLEVBQUEyaUIsVUFBQStQLEdBQUEsR0FBQSxPQUlBcnpCLEVBQUFtd0IsaUJBQUEsS0FBQXBxQixHQUFBLElBQUEzQyxFQUFBNUQsUUFBQSxnQkFDQWdqQixFQUFBcGYsR0FBQSxXQUlBd2UsR0FBQSxRQUFBQSxRQUNBN2QsS0FBQWdDLEVBQUE2YixFQUFBaEIsSUFBQXRlLEVBQUF5RCxFQUFBbXNCLE1BRUFvQixFQUNBOVEsRUFBQStRLFlBQUFud0IsRUFBQTJDLEdBRUF5YyxFQUFBcGYsR0FBQTJDLE1Ba0JBMmMsSUFBQSxTQUFBcGdCLEVBQUFjLEVBQUE4dUIsRUFBQUUsR0FDQSxJQUFBemhCLEVBQUE5TyxFQUFBK2YsRUFDQXlSLEVBQUExeUIsRUFBQXVFLFVBQUE5QixHQTZCQSxPQTVCQTZ0QixHQUFBM2tCLEtBQUFsSixLQU1BQSxFQUFBc3VCLEdBQUEyQixLQUlBelIsRUFBQWpoQixFQUFBNHhCLFNBQUFudkIsSUFBQXpDLEVBQUE0eEIsU0FBQWMsS0FHQSxRQUFBelIsSUFDQWpSLEVBQUFpUixFQUFBaGdCLElBQUFVLEdBQUEsRUFBQTR2QixTQUlBbnVCLElBQUE0TSxJQUNBQSxFQUFBNmYsR0FBQWx1QixFQUFBYyxFQUFBZ3ZCLElBSUEsV0FBQXpoQixHQUFBdk4sS0FBQWl1QixLQUNBMWdCLEVBQUEwZ0IsR0FBQWp1QixJQUlBLEtBQUE4dUIsR0FBQUEsR0FDQXJ3QixFQUFBZ0QsV0FBQThMLElBQ0EsSUFBQXVoQixHQUFBc0IsU0FBQTN4QixHQUFBQSxHQUFBLEVBQUE4TyxHQUdBQSxLQUlBaFEsRUFBQXdCLE1BQUEsU0FBQSxTQUFBLFNBQUFJLEVBQUFhLEdBQ0F6QyxFQUFBNHhCLFNBQUFudkIsSUFDQXhCLElBQUEsU0FBQVUsRUFBQW11QixFQUFBeUIsR0FDQSxHQUFBekIsRUFJQSxPQUFBTyxHQUFBMWtCLEtBQUEzTCxFQUFBK2hCLElBQUFwZ0IsRUFBQSxhQVFBQSxFQUFBbXhCLGlCQUFBL3hCLFFBQUFZLEVBQUFveEIsd0JBQUEzRCxNQUlBc0MsR0FBQS92QixFQUFBYyxFQUFBOHVCLEdBSEF2UCxHQUFBcmdCLEVBQUE0dUIsR0FBQSxXQUNBLE9BQUFtQixHQUFBL3ZCLEVBQUFjLEVBQUE4dUIsTUFNQXRSLElBQUEsU0FBQXRlLEVBQUF5RCxFQUFBbXNCLEdBQ0EsSUFBQXRzQixFQUNBd3NCLEVBQUFGLEdBQUE5QyxHQUFBOXNCLEdBQ0F5dkIsRUFBQUcsR0FBQUQsR0FDQTN2QixFQUNBYyxFQUNBOHVCLEVBQ0EsZUFBQXZ4QixFQUFBK2hCLElBQUFwZ0IsRUFBQSxhQUFBLEVBQUE4dkIsR0FDQUEsR0FXQSxPQVBBTCxJQUFBbnNCLEVBQUF5YyxFQUFBclcsS0FBQWpHLEtBQ0EsUUFBQUgsRUFBQSxJQUFBLFFBRUF0RCxFQUFBa2dCLE1BQUFwZixHQUFBMkMsRUFDQUEsRUFBQXBGLEVBQUEraEIsSUFBQXBnQixFQUFBYyxJQUdBMHVCLEdBQUF4dkIsRUFBQXlELEVBQUFnc0IsT0FLQXB4QixFQUFBNHhCLFNBQUExQyxXQUFBZ0IsR0FBQTd3QixFQUFBdXdCLG1CQUNBLFNBQUFqdUIsRUFBQW11QixHQUNBLEdBQUFBLEVBQ0EsT0FBQTVyQixXQUFBMnJCLEdBQUFsdUIsRUFBQSxnQkFDQUEsRUFBQW94Qix3QkFBQUMsS0FDQWhSLEdBQUFyZ0IsR0FBQXV0QixXQUFBLEdBQUEsV0FDQSxPQUFBdnRCLEVBQUFveEIsd0JBQUFDLFFBRUEsT0FNQWh6QixFQUFBd0IsTUFDQXl4QixPQUFBLEdBQ0FDLFFBQUEsR0FDQUMsT0FBQSxTQUNBLFNBQUFDLEVBQUFDLEdBQ0FyekIsRUFBQTR4QixTQUFBd0IsRUFBQUMsSUFDQUMsT0FBQSxTQUFBbHVCLEdBT0EsSUFOQSxJQUFBeEQsRUFBQSxFQUNBMnhCLEtBR0FDLEVBQUEsaUJBQUFwdUIsRUFBQUEsRUFBQVMsTUFBQSxNQUFBVCxHQUVBeEQsRUFBQSxFQUFBQSxJQUNBMnhCLEVBQUFILEVBQUF6UixFQUFBL2YsR0FBQXl4QixHQUNBRyxFQUFBNXhCLElBQUE0eEIsRUFBQTV4QixFQUFBLElBQUE0eEIsRUFBQSxHQUdBLE9BQUFELElBSUFoRixHQUFBNWlCLEtBQUF5bkIsS0FDQXB6QixFQUFBNHhCLFNBQUF3QixFQUFBQyxHQUFBcFQsSUFBQWtSLE1BSUFueEIsRUFBQUcsR0FBQW9DLFFBQ0F3ZixJQUFBLFNBQUF0ZixFQUFBMkMsR0FDQSxPQUFBa2EsRUFBQWxoQixLQUFBLFNBQUF1RCxFQUFBYyxFQUFBMkMsR0FDQSxJQUFBcXNCLEVBQUF2dkIsRUFDQVIsS0FDQUUsRUFBQSxFQUVBLEdBQUFzQixNQUFBQyxRQUFBVixHQUFBLENBSUEsSUFIQWd2QixFQUFBaEQsR0FBQTlzQixHQUNBTyxFQUFBTyxFQUFBMUIsT0FFQWEsRUFBQU0sRUFBQU4sSUFDQUYsRUFBQWUsRUFBQWIsSUFBQTVCLEVBQUEraEIsSUFBQXBnQixFQUFBYyxFQUFBYixJQUFBLEVBQUE2dkIsR0FHQSxPQUFBL3ZCLEVBR0EsWUFBQTBCLElBQUFnQyxFQUNBcEYsRUFBQTZoQixNQUFBbGdCLEVBQUFjLEVBQUEyQyxHQUNBcEYsRUFBQStoQixJQUFBcGdCLEVBQUFjLElBQ0FBLEVBQUEyQyxFQUFBdEQsVUFBQWYsT0FBQSxNQUtBLFNBQUEweUIsR0FBQTl4QixFQUFBYSxFQUFBMmQsRUFBQS9kLEVBQUFzeEIsR0FDQSxPQUFBLElBQUFELEdBQUE3eUIsVUFBQVIsS0FBQXVCLEVBQUFhLEVBQUEyZCxFQUFBL2QsRUFBQXN4QixHQUVBMXpCLEVBQUF5ekIsTUFBQUEsSUFFQUEsR0FBQTd5QixXQUNBRSxZQUFBMnlCLEdBQ0FyekIsS0FBQSxTQUFBdUIsRUFBQWEsRUFBQTJkLEVBQUEvZCxFQUFBc3hCLEVBQUFoUixHQUNBdGtCLEtBQUF1RCxLQUFBQSxFQUNBdkQsS0FBQStoQixLQUFBQSxFQUNBL2hCLEtBQUFzMUIsT0FBQUEsR0FBQTF6QixFQUFBMHpCLE9BQUE1UCxTQUNBMWxCLEtBQUFvRSxRQUFBQSxFQUNBcEUsS0FBQThULE1BQUE5VCxLQUFBcUgsSUFBQXJILEtBQUE4TyxNQUNBOU8sS0FBQWdFLElBQUFBLEVBQ0FoRSxLQUFBc2tCLEtBQUFBLElBQUExaUIsRUFBQTJpQixVQUFBeEMsR0FBQSxHQUFBLE9BRUFqVCxJQUFBLFdBQ0EsSUFBQStULEVBQUF3UyxHQUFBRSxVQUFBdjFCLEtBQUEraEIsTUFFQSxPQUFBYyxHQUFBQSxFQUFBaGdCLElBQ0FnZ0IsRUFBQWhnQixJQUFBN0MsTUFDQXExQixHQUFBRSxVQUFBN1AsU0FBQTdpQixJQUFBN0MsT0FFQXcxQixJQUFBLFNBQUFDLEdBQ0EsSUFBQUMsRUFDQTdTLEVBQUF3UyxHQUFBRSxVQUFBdjFCLEtBQUEraEIsTUFvQkEsT0FsQkEvaEIsS0FBQW9FLFFBQUF1eEIsU0FDQTMxQixLQUFBNDFCLElBQUFGLEVBQUE5ekIsRUFBQTB6QixPQUFBdDFCLEtBQUFzMUIsUUFDQUcsRUFBQXoxQixLQUFBb0UsUUFBQXV4QixTQUFBRixFQUFBLEVBQUEsRUFBQXoxQixLQUFBb0UsUUFBQXV4QixVQUdBMzFCLEtBQUE0MUIsSUFBQUYsRUFBQUQsRUFFQXoxQixLQUFBcUgsS0FBQXJILEtBQUFnRSxJQUFBaEUsS0FBQThULE9BQUE0aEIsRUFBQTExQixLQUFBOFQsTUFFQTlULEtBQUFvRSxRQUFBeXhCLE1BQ0E3MUIsS0FBQW9FLFFBQUF5eEIsS0FBQTcwQixLQUFBaEIsS0FBQXVELEtBQUF2RCxLQUFBcUgsSUFBQXJILE1BR0E2aUIsR0FBQUEsRUFBQWhCLElBQ0FnQixFQUFBaEIsSUFBQTdoQixNQUVBcTFCLEdBQUFFLFVBQUE3UCxTQUFBN0QsSUFBQTdoQixNQUVBQSxRQUlBZ0MsS0FBQVEsVUFBQTZ5QixHQUFBN3lCLFdBRUE2eUIsR0FBQUUsV0FDQTdQLFVBQ0E3aUIsSUFBQSxTQUFBbWhCLEdBQ0EsSUFBQTNRLEVBSUEsT0FBQSxJQUFBMlEsRUFBQXpnQixLQUFBK0ksVUFDQSxNQUFBMFgsRUFBQXpnQixLQUFBeWdCLEVBQUFqQyxPQUFBLE1BQUFpQyxFQUFBemdCLEtBQUFrZ0IsTUFBQU8sRUFBQWpDLE1BQ0FpQyxFQUFBemdCLEtBQUF5Z0IsRUFBQWpDLE9BT0ExTyxFQUFBelIsRUFBQStoQixJQUFBSyxFQUFBemdCLEtBQUF5Z0IsRUFBQWpDLEtBQUEsTUFHQSxTQUFBMU8sRUFBQUEsRUFBQSxHQUVBd08sSUFBQSxTQUFBbUMsR0FLQXBpQixFQUFBazBCLEdBQUFELEtBQUE3UixFQUFBakMsTUFDQW5nQixFQUFBazBCLEdBQUFELEtBQUE3UixFQUFBakMsTUFBQWlDLEdBQ0EsSUFBQUEsRUFBQXpnQixLQUFBK0ksVUFDQSxNQUFBMFgsRUFBQXpnQixLQUFBa2dCLE1BQUE3aEIsRUFBQWd4QixTQUFBNU8sRUFBQWpDLFNBQ0FuZ0IsRUFBQTR4QixTQUFBeFAsRUFBQWpDLE1BR0FpQyxFQUFBemdCLEtBQUF5Z0IsRUFBQWpDLE1BQUFpQyxFQUFBM2MsSUFGQXpGLEVBQUE2aEIsTUFBQU8sRUFBQXpnQixLQUFBeWdCLEVBQUFqQyxLQUFBaUMsRUFBQTNjLElBQUEyYyxFQUFBTSxVQVVBeVIsVUFBQVYsR0FBQUUsVUFBQVMsWUFDQW5VLElBQUEsU0FBQW1DLEdBQ0FBLEVBQUF6Z0IsS0FBQStJLFVBQUEwWCxFQUFBemdCLEtBQUE3QixhQUNBc2lCLEVBQUF6Z0IsS0FBQXlnQixFQUFBakMsTUFBQWlDLEVBQUEzYyxPQUtBekYsRUFBQTB6QixRQUNBVyxPQUFBLFNBQUFDLEdBQ0EsT0FBQUEsR0FFQUMsTUFBQSxTQUFBRCxHQUNBLE1BQUEsR0FBQWh4QixLQUFBa3hCLElBQUFGLEVBQUFoeEIsS0FBQW14QixJQUFBLEdBRUEzUSxTQUFBLFNBR0E5akIsRUFBQWswQixHQUFBVCxHQUFBN3lCLFVBQUFSLEtBR0FKLEVBQUFrMEIsR0FBQUQsUUFLQSxJQUNBUyxHQUFBQyxHQUNBQyxHQUFBLHlCQUNBQyxHQUFBLGNBRUEsU0FBQUMsS0FDQUgsTUFDQSxJQUFBMzJCLEVBQUErMkIsUUFBQTUyQixFQUFBNjJCLHNCQUNBNzJCLEVBQUE2MkIsc0JBQUFGLElBRUEzMkIsRUFBQTZmLFdBQUE4VyxHQUFBOTBCLEVBQUFrMEIsR0FBQWUsVUFHQWoxQixFQUFBazBCLEdBQUFnQixRQUtBLFNBQUFDLEtBSUEsT0FIQWgzQixFQUFBNmYsV0FBQSxXQUNBMFcsUUFBQXR4QixJQUVBc3hCLEdBQUExMEIsRUFBQXlGLE1BSUEsU0FBQTJ2QixHQUFBdHhCLEVBQUF1eEIsR0FDQSxJQUFBL0osRUFDQTFwQixFQUFBLEVBQ0FrTCxHQUFBd29CLE9BQUF4eEIsR0FLQSxJQURBdXhCLEVBQUFBLEVBQUEsRUFBQSxFQUNBenpCLEVBQUEsRUFBQUEsR0FBQSxFQUFBeXpCLEVBRUF2b0IsRUFBQSxVQURBd2UsRUFBQTNKLEVBQUEvZixLQUNBa0wsRUFBQSxVQUFBd2UsR0FBQXhuQixFQU9BLE9BSkF1eEIsSUFDQXZvQixFQUFBK2tCLFFBQUEva0IsRUFBQXNpQixNQUFBdHJCLEdBR0FnSixFQUdBLFNBQUF5b0IsR0FBQW53QixFQUFBK2EsRUFBQXFWLEdBS0EsSUFKQSxJQUFBcFQsRUFDQXlLLEdBQUE0SSxHQUFBQyxTQUFBdlYsUUFBQXhoQixPQUFBODJCLEdBQUFDLFNBQUEsTUFDQW5jLEVBQUEsRUFDQXhZLEVBQUE4ckIsRUFBQTlyQixPQUNBd1ksRUFBQXhZLEVBQUF3WSxJQUNBLEdBQUE2SSxFQUFBeUssRUFBQXRULEdBQUFuYSxLQUFBbzJCLEVBQUFyVixFQUFBL2EsR0FHQSxPQUFBZ2QsRUFxTkEsU0FBQXFULEdBQUE5ekIsRUFBQWcwQixFQUFBbnpCLEdBQ0EsSUFBQWlQLEVBQ0Fta0IsRUFDQXJjLEVBQUEsRUFDQXhZLEVBQUEwMEIsR0FBQUksV0FBQTkwQixPQUNBd2IsRUFBQXZjLEVBQUFrYyxXQUFBSSxPQUFBLGtCQUdBNFksRUFBQXZ6QixPQUVBdXpCLEVBQUEsV0FDQSxHQUFBVSxFQUNBLE9BQUEsRUFZQSxJQVZBLElBQUFFLEVBQUFwQixJQUFBUyxLQUNBL1csRUFBQTlhLEtBQUErdEIsSUFBQSxFQUFBbUUsRUFBQU8sVUFBQVAsRUFBQXpCLFNBQUErQixHQUtBakMsRUFBQSxHQURBelYsRUFBQW9YLEVBQUF6QixVQUFBLEdBRUF4YSxFQUFBLEVBQ0F4WSxFQUFBeTBCLEVBQUFRLE9BQUFqMUIsT0FFQXdZLEVBQUF4WSxFQUFBd1ksSUFDQWljLEVBQUFRLE9BQUF6YyxHQUFBcWEsSUFBQUMsR0FNQSxPQUhBdFgsRUFBQWtCLFdBQUE5YixHQUFBNnpCLEVBQUEzQixFQUFBelYsSUFHQXlWLEVBQUEsR0FBQTl5QixFQUNBcWQsR0FJQXJkLEdBQ0F3YixFQUFBa0IsV0FBQTliLEdBQUE2ekIsRUFBQSxFQUFBLElBSUFqWixFQUFBbUIsWUFBQS9iLEdBQUE2ekIsS0FDQSxJQUVBQSxFQUFBalosRUFBQVIsU0FDQXBhLEtBQUFBLEVBQ0F5bkIsTUFBQXBwQixFQUFBdUMsVUFBQW96QixHQUNBTSxLQUFBajJCLEVBQUF1QyxRQUFBLEdBQ0EyekIsaUJBQ0F4QyxPQUFBMXpCLEVBQUEwekIsT0FBQTVQLFVBQ0F0aEIsR0FDQTJ6QixtQkFBQVIsRUFDQVMsZ0JBQUE1ekIsRUFDQXV6QixVQUFBckIsSUFBQVMsS0FDQXBCLFNBQUF2eEIsRUFBQXV4QixTQUNBaUMsVUFDQVQsWUFBQSxTQUFBcFYsRUFBQS9kLEdBQ0EsSUFBQWdnQixFQUFBcGlCLEVBQUF5ekIsTUFBQTl4QixFQUFBNnpCLEVBQUFTLEtBQUE5VixFQUFBL2QsRUFDQW96QixFQUFBUyxLQUFBQyxjQUFBL1YsSUFBQXFWLEVBQUFTLEtBQUF2QyxRQUVBLE9BREE4QixFQUFBUSxPQUFBcDNCLEtBQUF3akIsR0FDQUEsR0FFQWpCLEtBQUEsU0FBQWtWLEdBQ0EsSUFBQTljLEVBQUEsRUFJQXhZLEVBQUFzMUIsRUFBQWIsRUFBQVEsT0FBQWoxQixPQUFBLEVBQ0EsR0FBQTYwQixFQUNBLE9BQUF4M0IsS0FHQSxJQURBdzNCLEdBQUEsRUFDQXJjLEVBQUF4WSxFQUFBd1ksSUFDQWljLEVBQUFRLE9BQUF6YyxHQUFBcWEsSUFBQSxHQVVBLE9BTkF5QyxHQUNBOVosRUFBQWtCLFdBQUE5YixHQUFBNnpCLEVBQUEsRUFBQSxJQUNBalosRUFBQW1CLFlBQUEvYixHQUFBNnpCLEVBQUFhLEtBRUE5WixFQUFBdUIsV0FBQW5jLEdBQUE2ekIsRUFBQWEsSUFFQWo0QixRQUdBZ3JCLEVBQUFvTSxFQUFBcE0sTUFJQSxLQS9IQSxTQUFBQSxFQUFBOE0sR0FDQSxJQUFBM2MsRUFBQTlXLEVBQUFpeEIsRUFBQXR1QixFQUFBNmIsRUFHQSxJQUFBMUgsS0FBQTZQLEVBZUEsR0FiQXNLLEVBQUF3QyxFQURBenpCLEVBQUF6QyxFQUFBdUUsVUFBQWdWLElBRUFuVSxFQUFBZ2tCLEVBQUE3UCxHQUNBclcsTUFBQUMsUUFBQWlDLEtBQ0FzdUIsRUFBQXR1QixFQUFBLEdBQ0FBLEVBQUFna0IsRUFBQTdQLEdBQUFuVSxFQUFBLElBR0FtVSxJQUFBOVcsSUFDQTJtQixFQUFBM21CLEdBQUEyQyxTQUNBZ2tCLEVBQUE3UCxLQUdBMEgsRUFBQWpoQixFQUFBNHhCLFNBQUFudkIsS0FDQSxXQUFBd2UsRUFBQSxDQUNBN2IsRUFBQTZiLEVBQUFxUyxPQUFBbHVCLFVBQ0Fna0IsRUFBQTNtQixHQUlBLElBQUE4VyxLQUFBblUsRUFDQW1VLEtBQUE2UCxJQUNBQSxFQUFBN1AsR0FBQW5VLEVBQUFtVSxHQUNBMmMsRUFBQTNjLEdBQUFtYSxRQUlBd0MsRUFBQXp6QixHQUFBaXhCLEVBNkZBNEMsQ0FBQWxOLEVBQUFvTSxFQUFBUyxLQUFBQyxlQUVBM2MsRUFBQXhZLEVBQUF3WSxJQUVBLEdBREE5SCxFQUFBZ2tCLEdBQUFJLFdBQUF0YyxHQUFBbmEsS0FBQW8yQixFQUFBN3pCLEVBQUF5bkIsRUFBQW9NLEVBQUFTLE1BTUEsT0FKQWoyQixFQUFBZ0QsV0FBQXlPLEVBQUEwUCxRQUNBbmhCLEVBQUFraEIsWUFBQXNVLEVBQUE3ekIsS0FBQTZ6QixFQUFBUyxLQUFBcGIsT0FBQXNHLEtBQ0FuaEIsRUFBQXNGLE1BQUFtTSxFQUFBMFAsS0FBQTFQLElBRUFBLEVBeUJBLE9BckJBelIsRUFBQTBCLElBQUEwbkIsRUFBQW1NLEdBQUFDLEdBRUF4MUIsRUFBQWdELFdBQUF3eUIsRUFBQVMsS0FBQS9qQixRQUNBc2pCLEVBQUFTLEtBQUEvakIsTUFBQTlTLEtBQUF1QyxFQUFBNnpCLEdBSUFBLEVBQ0ExWSxTQUFBMFksRUFBQVMsS0FBQW5aLFVBQ0E3VixLQUFBdXVCLEVBQUFTLEtBQUFodkIsS0FBQXV1QixFQUFBUyxLQUFBTSxVQUNBdmEsS0FBQXdaLEVBQUFTLEtBQUFqYSxNQUNBTSxPQUFBa1osRUFBQVMsS0FBQTNaLFFBRUF0YyxFQUFBazBCLEdBQUFzQyxNQUNBeDJCLEVBQUF1QyxPQUFBMnlCLEdBQ0F2ekIsS0FBQUEsRUFDQTgwQixLQUFBakIsRUFDQTNhLE1BQUEyYSxFQUFBUyxLQUFBcGIsU0FJQTJhLEVBR0F4MUIsRUFBQXkxQixVQUFBejFCLEVBQUF1QyxPQUFBa3pCLElBRUFDLFVBQ0FnQixLQUFBLFNBQUF2VyxFQUFBL2EsR0FDQSxJQUFBZ2QsRUFBQWhrQixLQUFBbTNCLFlBQUFwVixFQUFBL2EsR0FFQSxPQURBOGMsR0FBQUUsRUFBQXpnQixLQUFBd2UsRUFBQXVCLEVBQUFyVyxLQUFBakcsR0FBQWdkLEdBQ0FBLEtBSUF1VSxRQUFBLFNBQUF2TixFQUFBM25CLEdBQ0F6QixFQUFBZ0QsV0FBQW9tQixJQUNBM25CLEVBQUEybkIsRUFDQUEsR0FBQSxNQUVBQSxFQUFBQSxFQUFBcGUsTUFBQW9QLEdBT0EsSUFKQSxJQUFBK0YsRUFDQTVHLEVBQUEsRUFDQXhZLEVBQUFxb0IsRUFBQXJvQixPQUVBd1ksRUFBQXhZLEVBQUF3WSxJQUNBNEcsRUFBQWlKLEVBQUE3UCxHQUNBa2MsR0FBQUMsU0FBQXZWLEdBQUFzVixHQUFBQyxTQUFBdlYsT0FDQXNWLEdBQUFDLFNBQUF2VixHQUFBdlEsUUFBQW5PLElBSUFvMEIsWUExV0EsU0FBQWwwQixFQUFBeW5CLEVBQUE2TSxHQUNBLElBQUE5VixFQUFBL2EsRUFBQWdlLEVBQUFuQyxFQUFBMlYsRUFBQUMsRUFBQUMsRUFBQWhWLEVBQ0FpVixFQUFBLFVBQUEzTixHQUFBLFdBQUFBLEVBQ0FxTixFQUFBcjRCLEtBQ0F1dEIsS0FDQTlKLEVBQUFsZ0IsRUFBQWtnQixNQUNBa1QsRUFBQXB6QixFQUFBK0ksVUFBQWtYLEVBQUFqZ0IsR0FDQXExQixFQUFBM1csRUFBQXBmLElBQUFVLEVBQUEsVUFHQXMwQixFQUFBcGIsUUFFQSxPQURBb0csRUFBQWpoQixFQUFBa2hCLFlBQUF2ZixFQUFBLE9BQ0FzMUIsV0FDQWhXLEVBQUFnVyxTQUFBLEVBQ0FMLEVBQUEzVixFQUFBbk4sTUFBQWlILEtBQ0FrRyxFQUFBbk4sTUFBQWlILEtBQUEsV0FDQWtHLEVBQUFnVyxVQUNBTCxNQUlBM1YsRUFBQWdXLFdBRUFSLEVBQUFuYSxPQUFBLFdBR0FtYSxFQUFBbmEsT0FBQSxXQUNBMkUsRUFBQWdXLFdBQ0FqM0IsRUFBQTZhLE1BQUFsWixFQUFBLE1BQUFaLFFBQ0FrZ0IsRUFBQW5OLE1BQUFpSCxZQU9BLElBQUFvRixLQUFBaUosRUFFQSxHQURBaGtCLEVBQUFna0IsRUFBQWpKLEdBQ0F5VSxHQUFBanBCLEtBQUF2RyxHQUFBLENBR0EsVUFGQWdrQixFQUFBakosR0FDQWlELEVBQUFBLEdBQUEsV0FBQWhlLEVBQ0FBLEtBQUEydkIsRUFBQSxPQUFBLFFBQUEsQ0FJQSxHQUFBLFNBQUEzdkIsSUFBQTR4QixRQUFBNXpCLElBQUE0ekIsRUFBQTdXLEdBS0EsU0FKQTRVLEdBQUEsRUFPQXBKLEVBQUF4TCxHQUFBNlcsR0FBQUEsRUFBQTdXLElBQUFuZ0IsRUFBQTZoQixNQUFBbGdCLEVBQUF3ZSxHQU1BLElBREEwVyxHQUFBNzJCLEVBQUFxRSxjQUFBK2tCLE1BQ0FwcEIsRUFBQXFFLGNBQUFzbkIsR0FBQSxDQUtBb0wsR0FBQSxJQUFBcDFCLEVBQUErSSxXQUtBdXJCLEVBQUFpQixVQUFBclYsRUFBQXFWLFNBQUFyVixFQUFBc1YsVUFBQXRWLEVBQUF1VixXQUlBLE9BREFOLEVBQUFFLEdBQUFBLEVBQUFsVixXQUVBZ1YsRUFBQXpXLEVBQUFwZixJQUFBVSxFQUFBLFlBR0EsVUFEQW1nQixFQUFBOWhCLEVBQUEraEIsSUFBQXBnQixFQUFBLGNBRUFtMUIsRUFDQWhWLEVBQUFnVixHQUlBOVQsSUFBQXJoQixJQUFBLEdBQ0FtMUIsRUFBQW4xQixFQUFBa2dCLE1BQUFDLFNBQUFnVixFQUNBaFYsRUFBQTloQixFQUFBK2hCLElBQUFwZ0IsRUFBQSxXQUNBcWhCLElBQUFyaEIsT0FLQSxXQUFBbWdCLEdBQUEsaUJBQUFBLEdBQUEsTUFBQWdWLElBQ0EsU0FBQTkyQixFQUFBK2hCLElBQUFwZ0IsRUFBQSxXQUdBazFCLElBQ0FKLEVBQUF4dkIsS0FBQSxXQUNBNGEsRUFBQUMsUUFBQWdWLElBRUEsTUFBQUEsSUFDQWhWLEVBQUFELEVBQUFDLFFBQ0FnVixFQUFBLFNBQUFoVixFQUFBLEdBQUFBLElBR0FELEVBQUFDLFFBQUEsaUJBS0FtVSxFQUFBaUIsV0FDQXJWLEVBQUFxVixTQUFBLFNBQ0FULEVBQUFuYSxPQUFBLFdBQ0F1RixFQUFBcVYsU0FBQWpCLEVBQUFpQixTQUFBLEdBQ0FyVixFQUFBc1YsVUFBQWxCLEVBQUFpQixTQUFBLEdBQ0FyVixFQUFBdVYsVUFBQW5CLEVBQUFpQixTQUFBLE1BS0FMLEdBQUEsRUFDQSxJQUFBMVcsS0FBQXdMLEVBR0FrTCxJQUNBRyxFQUNBLFdBQUFBLElBQ0FqQyxFQUFBaUMsRUFBQWpDLFFBR0FpQyxFQUFBM1csRUFBQWYsT0FBQTNkLEVBQUEsVUFBQW1nQixRQUFBZ1YsSUFJQTFULElBQ0E0VCxFQUFBakMsUUFBQUEsR0FJQUEsR0FDQS9SLElBQUFyaEIsSUFBQSxHQUtBODBCLEVBQUF4dkIsS0FBQSxXQUtBOHRCLEdBQ0EvUixJQUFBcmhCLElBRUEwZSxFQUFBbkYsT0FBQXZaLEVBQUEsVUFDQSxJQUFBd2UsS0FBQXdMLEVBQ0EzckIsRUFBQTZoQixNQUFBbGdCLEVBQUF3ZSxFQUFBd0wsRUFBQXhMLE9BTUEwVyxFQUFBdEIsR0FBQVIsRUFBQWlDLEVBQUE3VyxHQUFBLEVBQUFBLEVBQUFzVyxHQUNBdFcsS0FBQTZXLElBQ0FBLEVBQUE3VyxHQUFBMFcsRUFBQTNrQixNQUNBNmlCLElBQ0E4QixFQUFBejBCLElBQUF5MEIsRUFBQTNrQixNQUNBMmtCLEVBQUEza0IsTUFBQSxPQXVNQW1sQixVQUFBLFNBQUE1MUIsRUFBQWtzQixHQUNBQSxFQUNBOEgsR0FBQUksV0FBQWptQixRQUFBbk8sR0FFQWcwQixHQUFBSSxXQUFBajNCLEtBQUE2QyxNQUtBekIsRUFBQXMzQixNQUFBLFNBQUFBLEVBQUE1RCxFQUFBdnpCLEdBQ0EsSUFBQW8zQixFQUFBRCxHQUFBLGlCQUFBQSxFQUFBdDNCLEVBQUF1QyxVQUFBKzBCLElBQ0FmLFNBQUFwMkIsSUFBQUEsR0FBQXV6QixHQUNBMXpCLEVBQUFnRCxXQUFBczBCLElBQUFBLEVBQ0F2RCxTQUFBdUQsRUFDQTVELE9BQUF2ekIsR0FBQXV6QixHQUFBQSxJQUFBMXpCLEVBQUFnRCxXQUFBMHdCLElBQUFBLEdBb0NBLE9BaENBMXpCLEVBQUFrMEIsR0FBQS9OLElBQ0FvUixFQUFBeEQsU0FBQSxFQUdBLGlCQUFBd0QsRUFBQXhELFdBQ0F3RCxFQUFBeEQsWUFBQS96QixFQUFBazBCLEdBQUFzRCxPQUNBRCxFQUFBeEQsU0FBQS96QixFQUFBazBCLEdBQUFzRCxPQUFBRCxFQUFBeEQsVUFHQXdELEVBQUF4RCxTQUFBL3pCLEVBQUFrMEIsR0FBQXNELE9BQUExVCxVQU1BLE1BQUF5VCxFQUFBMWMsUUFBQSxJQUFBMGMsRUFBQTFjLFFBQ0EwYyxFQUFBMWMsTUFBQSxNQUlBMGMsRUFBQXRWLElBQUFzVixFQUFBaEIsU0FFQWdCLEVBQUFoQixTQUFBLFdBQ0F2MkIsRUFBQWdELFdBQUF1MEIsRUFBQXRWLE1BQ0FzVixFQUFBdFYsSUFBQTdpQixLQUFBaEIsTUFHQW01QixFQUFBMWMsT0FDQTdhLEVBQUErZ0IsUUFBQTNpQixLQUFBbTVCLEVBQUExYyxRQUlBMGMsR0FHQXYzQixFQUFBRyxHQUFBb0MsUUFDQWsxQixPQUFBLFNBQUFILEVBQUFJLEVBQUFoRSxFQUFBanlCLEdBR0EsT0FBQXJELEtBQUFtUSxPQUFBcVQsR0FBQUcsSUFBQSxVQUFBLEdBQUFrQixPQUdBN2dCLE1BQUF1MUIsU0FBQTlGLFFBQUE2RixHQUFBSixFQUFBNUQsRUFBQWp5QixJQUVBazJCLFFBQUEsU0FBQXhYLEVBQUFtWCxFQUFBNUQsRUFBQWp5QixHQUNBLElBQUFxUyxFQUFBOVQsRUFBQXFFLGNBQUE4YixHQUNBeVgsRUFBQTUzQixFQUFBczNCLE1BQUFBLEVBQUE1RCxFQUFBanlCLEdBQ0FvMkIsRUFBQSxXQUdBLElBQUFwQixFQUFBaEIsR0FBQXIzQixLQUFBNEIsRUFBQXVDLFVBQUE0ZCxHQUFBeVgsSUFHQTlqQixHQUFBdU0sRUFBQXBmLElBQUE3QyxLQUFBLFlBQ0FxNEIsRUFBQXRWLE1BQUEsSUFLQSxPQUZBMFcsRUFBQUMsT0FBQUQsRUFFQS9qQixJQUFBLElBQUE4akIsRUFBQS9jLE1BQ0F6YyxLQUFBb0QsS0FBQXEyQixHQUNBejVCLEtBQUF5YyxNQUFBK2MsRUFBQS9jLE1BQUFnZCxJQUVBMVcsS0FBQSxTQUFBcmQsRUFBQXVkLEVBQUFnVixHQUNBLElBQUEwQixFQUFBLFNBQUE5VyxHQUNBLElBQUFFLEVBQUFGLEVBQUFFLFlBQ0FGLEVBQUFFLEtBQ0FBLEVBQUFrVixJQVlBLE1BVEEsaUJBQUF2eUIsSUFDQXV5QixFQUFBaFYsRUFDQUEsRUFBQXZkLEVBQ0FBLE9BQUFWLEdBRUFpZSxJQUFBLElBQUF2ZCxHQUNBMUYsS0FBQXljLE1BQUEvVyxHQUFBLFNBR0ExRixLQUFBb0QsS0FBQSxXQUNBLElBQUF1ZixHQUFBLEVBQ0F4SCxFQUFBLE1BQUF6VixHQUFBQSxFQUFBLGFBQ0FrMEIsRUFBQWg0QixFQUFBZzRCLE9BQ0E5WCxFQUFBRyxFQUFBcGYsSUFBQTdDLE1BRUEsR0FBQW1iLEVBQ0EyRyxFQUFBM0csSUFBQTJHLEVBQUEzRyxHQUFBNEgsTUFDQTRXLEVBQUE3WCxFQUFBM0csU0FHQSxJQUFBQSxLQUFBMkcsRUFDQUEsRUFBQTNHLElBQUEyRyxFQUFBM0csR0FBQTRILE1BQUEwVCxHQUFBbHBCLEtBQUE0TixJQUNBd2UsRUFBQTdYLEVBQUEzRyxJQUtBLElBQUFBLEVBQUF5ZSxFQUFBajNCLE9BQUF3WSxLQUNBeWUsRUFBQXplLEdBQUE1WCxPQUFBdkQsTUFDQSxNQUFBMEYsR0FBQWswQixFQUFBemUsR0FBQXNCLFFBQUEvVyxJQUVBazBCLEVBQUF6ZSxHQUFBa2QsS0FBQXRWLEtBQUFrVixHQUNBdFYsR0FBQSxFQUNBaVgsRUFBQTExQixPQUFBaVgsRUFBQSxLQU9Bd0gsR0FBQXNWLEdBQ0FyMkIsRUFBQStnQixRQUFBM2lCLEtBQUEwRixNQUlBZzBCLE9BQUEsU0FBQWgwQixHQUlBLE9BSEEsSUFBQUEsSUFDQUEsRUFBQUEsR0FBQSxNQUVBMUYsS0FBQW9ELEtBQUEsV0FDQSxJQUFBK1gsRUFDQTJHLEVBQUFHLEVBQUFwZixJQUFBN0MsTUFDQXljLEVBQUFxRixFQUFBcGMsRUFBQSxTQUNBbWQsRUFBQWYsRUFBQXBjLEVBQUEsY0FDQWswQixFQUFBaDRCLEVBQUFnNEIsT0FDQWozQixFQUFBOFosRUFBQUEsRUFBQTlaLE9BQUEsRUFhQSxJQVZBbWYsRUFBQTRYLFFBQUEsRUFHQTkzQixFQUFBNmEsTUFBQXpjLEtBQUEwRixNQUVBbWQsR0FBQUEsRUFBQUUsTUFDQUYsRUFBQUUsS0FBQS9oQixLQUFBaEIsTUFBQSxHQUlBbWIsRUFBQXllLEVBQUFqM0IsT0FBQXdZLEtBQ0F5ZSxFQUFBemUsR0FBQTVYLE9BQUF2RCxNQUFBNDVCLEVBQUF6ZSxHQUFBc0IsUUFBQS9XLElBQ0FrMEIsRUFBQXplLEdBQUFrZCxLQUFBdFYsTUFBQSxHQUNBNlcsRUFBQTExQixPQUFBaVgsRUFBQSxJQUtBLElBQUFBLEVBQUEsRUFBQUEsRUFBQXhZLEVBQUF3WSxJQUNBc0IsRUFBQXRCLElBQUFzQixFQUFBdEIsR0FBQXVlLFFBQ0FqZCxFQUFBdEIsR0FBQXVlLE9BQUExNEIsS0FBQWhCLGFBS0E4aEIsRUFBQTRYLFlBS0E5M0IsRUFBQXdCLE1BQUEsU0FBQSxPQUFBLFFBQUEsU0FBQUksRUFBQWEsR0FDQSxJQUFBdzFCLEVBQUFqNEIsRUFBQUcsR0FBQXNDLEdBQ0F6QyxFQUFBRyxHQUFBc0MsR0FBQSxTQUFBNjBCLEVBQUE1RCxFQUFBanlCLEdBQ0EsT0FBQSxNQUFBNjFCLEdBQUEsa0JBQUFBLEVBQ0FXLEVBQUFwMkIsTUFBQXpELEtBQUEwRCxXQUNBMUQsS0FBQXU1QixRQUFBdkMsR0FBQTN5QixHQUFBLEdBQUE2MEIsRUFBQTVELEVBQUFqeUIsTUFLQXpCLEVBQUF3QixNQUNBMDJCLFVBQUE5QyxHQUFBLFFBQ0ErQyxRQUFBL0MsR0FBQSxRQUNBZ0QsWUFBQWhELEdBQUEsVUFDQWlELFFBQUF4RyxRQUFBLFFBQ0F5RyxTQUFBekcsUUFBQSxRQUNBMEcsWUFBQTFHLFFBQUEsV0FDQSxTQUFBcHZCLEVBQUEybUIsR0FDQXBwQixFQUFBRyxHQUFBc0MsR0FBQSxTQUFBNjBCLEVBQUE1RCxFQUFBanlCLEdBQ0EsT0FBQXJELEtBQUF1NUIsUUFBQXZPLEVBQUFrTyxFQUFBNUQsRUFBQWp5QixNQUlBekIsRUFBQWc0QixVQUNBaDRCLEVBQUFrMEIsR0FBQWdCLEtBQUEsV0FDQSxJQUFBc0IsRUFDQTUwQixFQUFBLEVBQ0FvMkIsRUFBQWg0QixFQUFBZzRCLE9BSUEsSUFGQXRELEdBQUExMEIsRUFBQXlGLE1BRUE3RCxFQUFBbzJCLEVBQUFqM0IsT0FBQWEsS0FDQTQwQixFQUFBd0IsRUFBQXAyQixPQUdBbzJCLEVBQUFwMkIsS0FBQTQwQixHQUNBd0IsRUFBQTExQixPQUFBVixJQUFBLEdBSUFvMkIsRUFBQWozQixRQUNBZixFQUFBazBCLEdBQUEvUyxPQUVBdVQsUUFBQXR4QixHQUdBcEQsRUFBQWswQixHQUFBc0MsTUFBQSxTQUFBQSxHQUNBeDJCLEVBQUFnNEIsT0FBQXA1QixLQUFBNDNCLEdBQ0F4MkIsRUFBQWswQixHQUFBaGlCLFNBR0FsUyxFQUFBazBCLEdBQUFlLFNBQUEsR0FDQWoxQixFQUFBazBCLEdBQUFoaUIsTUFBQSxXQUNBeWlCLEtBSUFBLElBQUEsRUFDQUcsT0FHQTkwQixFQUFBazBCLEdBQUEvUyxLQUFBLFdBQ0F3VCxHQUFBLE1BR0EzMEIsRUFBQWswQixHQUFBc0QsUUFDQWdCLEtBQUEsSUFDQUMsS0FBQSxJQUdBM1UsU0FBQSxLQU1BOWpCLEVBQUFHLEdBQUF1NEIsTUFBQSxTQUFBQyxFQUFBNzBCLEdBSUEsT0FIQTYwQixFQUFBMzRCLEVBQUFrMEIsR0FBQWwwQixFQUFBazBCLEdBQUFzRCxPQUFBbUIsSUFBQUEsRUFBQUEsRUFDQTcwQixFQUFBQSxHQUFBLEtBRUExRixLQUFBeWMsTUFBQS9XLEVBQUEsU0FBQTBHLEVBQUF5VyxHQUNBLElBQUEyWCxFQUFBejZCLEVBQUE2ZixXQUFBeFQsRUFBQW11QixHQUNBMVgsRUFBQUUsS0FBQSxXQUNBaGpCLEVBQUEwNkIsYUFBQUQsT0FNQSxXQUNBLElBQUEvcEIsRUFBQTdRLEVBQUEwQixjQUFBLFNBRUE2M0IsRUFEQXY1QixFQUFBMEIsY0FBQSxVQUNBRyxZQUFBN0IsRUFBQTBCLGNBQUEsV0FFQW1QLEVBQUEvSyxLQUFBLFdBSUF6RSxFQUFBeTVCLFFBQUEsS0FBQWpxQixFQUFBekosTUFJQS9GLEVBQUEwNUIsWUFBQXhCLEVBQUEzakIsVUFJQS9FLEVBQUE3USxFQUFBMEIsY0FBQSxVQUNBMEYsTUFBQSxJQUNBeUosRUFBQS9LLEtBQUEsUUFDQXpFLEVBQUEyNUIsV0FBQSxNQUFBbnFCLEVBQUF6SixNQXBCQSxHQXdCQSxJQUFBNnpCLEdBQ0Fqc0IsR0FBQWhOLEVBQUE2UCxLQUFBN0MsV0FFQWhOLEVBQUFHLEdBQUFvQyxRQUNBd04sS0FBQSxTQUFBdE4sRUFBQTJDLEdBQ0EsT0FBQWthLEVBQUFsaEIsS0FBQTRCLEVBQUErUCxLQUFBdE4sRUFBQTJDLEVBQUF0RCxVQUFBZixPQUFBLElBR0FtNEIsV0FBQSxTQUFBejJCLEdBQ0EsT0FBQXJFLEtBQUFvRCxLQUFBLFdBQ0F4QixFQUFBazVCLFdBQUE5NkIsS0FBQXFFLFFBS0F6QyxFQUFBdUMsUUFDQXdOLEtBQUEsU0FBQXBPLEVBQUFjLEVBQUEyQyxHQUNBLElBQUEvRCxFQUFBNGYsRUFDQWtZLEVBQUF4M0IsRUFBQStJLFNBR0EsR0FBQSxJQUFBeXVCLEdBQUEsSUFBQUEsR0FBQSxJQUFBQSxFQUtBLFlBQUEsSUFBQXgzQixFQUFBa0ssYUFDQTdMLEVBQUFtZ0IsS0FBQXhlLEVBQUFjLEVBQUEyQyxJQUtBLElBQUErekIsR0FBQW41QixFQUFBK1gsU0FBQXBXLEtBQ0FzZixFQUFBamhCLEVBQUFvNUIsVUFBQTMyQixFQUFBcUQsaUJBQ0E5RixFQUFBNlAsS0FBQTdFLE1BQUFqQyxLQUFBNEMsS0FBQWxKLEdBQUF3MkIsUUFBQTcxQixTQUdBQSxJQUFBZ0MsRUFDQSxPQUFBQSxPQUNBcEYsRUFBQWs1QixXQUFBdjNCLEVBQUFjLEdBSUF3ZSxHQUFBLFFBQUFBLFFBQ0E3ZCxLQUFBL0IsRUFBQTRmLEVBQUFoQixJQUFBdGUsRUFBQXlELEVBQUEzQyxJQUNBcEIsR0FHQU0sRUFBQW1LLGFBQUFySixFQUFBMkMsRUFBQSxJQUNBQSxHQUdBNmIsR0FBQSxRQUFBQSxHQUFBLFFBQUE1ZixFQUFBNGYsRUFBQWhnQixJQUFBVSxFQUFBYyxJQUNBcEIsRUFNQSxPQUhBQSxFQUFBckIsRUFBQXlPLEtBQUFzQixLQUFBcE8sRUFBQWMsU0FHQVcsRUFBQS9CLElBR0ErM0IsV0FDQXQxQixNQUNBbWMsSUFBQSxTQUFBdGUsRUFBQXlELEdBQ0EsSUFBQS9GLEVBQUEyNUIsWUFBQSxVQUFBNXpCLEdBQ0F3RyxFQUFBakssRUFBQSxTQUFBLENBQ0EsSUFBQXFPLEVBQUFyTyxFQUFBeUQsTUFLQSxPQUpBekQsRUFBQW1LLGFBQUEsT0FBQTFHLEdBQ0E0SyxJQUNBck8sRUFBQXlELE1BQUE0SyxHQUVBNUssTUFNQTh6QixXQUFBLFNBQUF2M0IsRUFBQXlELEdBQ0EsSUFBQTNDLEVBQ0FiLEVBQUEsRUFJQXkzQixFQUFBajBCLEdBQUFBLEVBQUE0RixNQUFBb1AsR0FFQSxHQUFBaWYsR0FBQSxJQUFBMTNCLEVBQUErSSxTQUNBLEtBQUFqSSxFQUFBNDJCLEVBQUF6M0IsTUFDQUQsRUFBQXlLLGdCQUFBM0osTUFPQXcyQixJQUNBaFosSUFBQSxTQUFBdGUsRUFBQXlELEVBQUEzQyxHQVFBLE9BUEEsSUFBQTJDLEVBR0FwRixFQUFBazVCLFdBQUF2M0IsRUFBQWMsR0FFQWQsRUFBQW1LLGFBQUFySixFQUFBQSxHQUVBQSxJQUlBekMsRUFBQXdCLEtBQUF4QixFQUFBNlAsS0FBQTdFLE1BQUFqQyxLQUFBMFksT0FBQXpXLE1BQUEsUUFBQSxTQUFBcEosRUFBQWEsR0FDQSxJQUFBNjJCLEVBQUF0c0IsR0FBQXZLLElBQUF6QyxFQUFBeU8sS0FBQXNCLEtBRUEvQyxHQUFBdkssR0FBQSxTQUFBZCxFQUFBYyxFQUFBeUQsR0FDQSxJQUFBN0UsRUFBQXdsQixFQUNBMFMsRUFBQTkyQixFQUFBcUQsY0FZQSxPQVZBSSxJQUdBMmdCLEVBQUE3WixHQUFBdXNCLEdBQ0F2c0IsR0FBQXVzQixHQUFBbDRCLEVBQ0FBLEVBQUEsTUFBQWk0QixFQUFBMzNCLEVBQUFjLEVBQUF5RCxHQUNBcXpCLEVBQ0EsS0FDQXZzQixHQUFBdXNCLEdBQUExUyxHQUVBeGxCLEtBT0EsSUFBQW00QixHQUFBLHNDQUNBQyxHQUFBLGdCQUVBejVCLEVBQUFHLEdBQUFvQyxRQUNBNGQsS0FBQSxTQUFBMWQsRUFBQTJDLEdBQ0EsT0FBQWthLEVBQUFsaEIsS0FBQTRCLEVBQUFtZ0IsS0FBQTFkLEVBQUEyQyxFQUFBdEQsVUFBQWYsT0FBQSxJQUdBMjRCLFdBQUEsU0FBQWozQixHQUNBLE9BQUFyRSxLQUFBb0QsS0FBQSxrQkFDQXBELEtBQUE0QixFQUFBMjVCLFFBQUFsM0IsSUFBQUEsUUFLQXpDLEVBQUF1QyxRQUNBNGQsS0FBQSxTQUFBeGUsRUFBQWMsRUFBQTJDLEdBQ0EsSUFBQS9ELEVBQUE0ZixFQUNBa1ksRUFBQXgzQixFQUFBK0ksU0FHQSxHQUFBLElBQUF5dUIsR0FBQSxJQUFBQSxHQUFBLElBQUFBLEVBV0EsT0FQQSxJQUFBQSxHQUFBbjVCLEVBQUErWCxTQUFBcFcsS0FHQWMsRUFBQXpDLEVBQUEyNUIsUUFBQWwzQixJQUFBQSxFQUNBd2UsRUFBQWpoQixFQUFBMnpCLFVBQUFseEIsU0FHQVcsSUFBQWdDLEVBQ0E2YixHQUFBLFFBQUFBLFFBQ0E3ZCxLQUFBL0IsRUFBQTRmLEVBQUFoQixJQUFBdGUsRUFBQXlELEVBQUEzQyxJQUNBcEIsRUFHQU0sRUFBQWMsR0FBQTJDLEVBR0E2YixHQUFBLFFBQUFBLEdBQUEsUUFBQTVmLEVBQUE0ZixFQUFBaGdCLElBQUFVLEVBQUFjLElBQ0FwQixFQUdBTSxFQUFBYyxJQUdBa3hCLFdBQ0FsZ0IsVUFDQXhTLElBQUEsU0FBQVUsR0FPQSxJQUFBaTRCLEVBQUE1NUIsRUFBQXlPLEtBQUFzQixLQUFBcE8sRUFBQSxZQUVBLE9BQUFpNEIsRUFDQUMsU0FBQUQsRUFBQSxJQUlBSixHQUFBN3RCLEtBQUFoSyxFQUFBaUssV0FDQTZ0QixHQUFBOXRCLEtBQUFoSyxFQUFBaUssV0FDQWpLLEVBQUE2UixLQUVBLEdBR0EsS0FLQW1tQixTQUNBRyxJQUFBLFVBQ0FDLE1BQUEsZUFZQTE2QixFQUFBMDVCLGNBQ0EvNEIsRUFBQTJ6QixVQUFBL2YsVUFDQTNTLElBQUEsU0FBQVUsR0FJQSxJQUFBd1EsRUFBQXhRLEVBQUE3QixXQUlBLE9BSEFxUyxHQUFBQSxFQUFBclMsWUFDQXFTLEVBQUFyUyxXQUFBK1QsY0FFQSxNQUVBb00sSUFBQSxTQUFBdGUsR0FJQSxJQUFBd1EsRUFBQXhRLEVBQUE3QixXQUNBcVMsSUFDQUEsRUFBQTBCLGNBRUExQixFQUFBclMsWUFDQXFTLEVBQUFyUyxXQUFBK1Qsa0JBT0E3VCxFQUFBd0IsTUFDQSxXQUNBLFdBQ0EsWUFDQSxjQUNBLGNBQ0EsVUFDQSxVQUNBLFNBQ0EsY0FDQSxtQkFDQSxXQUNBeEIsRUFBQTI1QixRQUFBdjdCLEtBQUEwSCxlQUFBMUgsT0FRQSxTQUFBNDdCLEdBQUE1MEIsR0FFQSxPQURBQSxFQUFBNEYsTUFBQW9QLFFBQ0FwTyxLQUFBLEtBSUEsU0FBQWl1QixHQUFBdDRCLEdBQ0EsT0FBQUEsRUFBQWtLLGNBQUFsSyxFQUFBa0ssYUFBQSxVQUFBLEdBR0E3TCxFQUFBRyxHQUFBb0MsUUFDQTIzQixTQUFBLFNBQUE5MEIsR0FDQSxJQUFBKzBCLEVBQUF4NEIsRUFBQXVMLEVBQUFrdEIsRUFBQUMsRUFBQWw0QixFQUFBbTRCLEVBQ0ExNEIsRUFBQSxFQUVBLEdBQUE1QixFQUFBZ0QsV0FBQW9DLEdBQ0EsT0FBQWhILEtBQUFvRCxLQUFBLFNBQUFXLEdBQ0FuQyxFQUFBNUIsTUFBQTg3QixTQUFBOTBCLEVBQUFoRyxLQUFBaEIsS0FBQStELEVBQUE4M0IsR0FBQTc3QixVQUlBLEdBQUEsaUJBQUFnSCxHQUFBQSxFQUdBLElBRkErMEIsRUFBQS8wQixFQUFBNEYsTUFBQW9QLE9BRUF6WSxFQUFBdkQsS0FBQXdELE1BSUEsR0FIQXc0QixFQUFBSCxHQUFBdDRCLEdBQ0F1TCxFQUFBLElBQUF2TCxFQUFBK0ksVUFBQSxJQUFBc3ZCLEdBQUFJLEdBQUEsSUFFQSxDQUVBLElBREFqNEIsRUFBQSxFQUNBazRCLEVBQUFGLEVBQUFoNEIsTUFDQStLLEVBQUFyTyxRQUFBLElBQUF3N0IsRUFBQSxLQUFBLElBQ0FudEIsR0FBQW10QixFQUFBLEtBTUFELEtBREFFLEVBQUFOLEdBQUE5c0IsS0FFQXZMLEVBQUFtSyxhQUFBLFFBQUF3dUIsR0FNQSxPQUFBbDhCLE1BR0FtOEIsWUFBQSxTQUFBbjFCLEdBQ0EsSUFBQSswQixFQUFBeDRCLEVBQUF1TCxFQUFBa3RCLEVBQUFDLEVBQUFsNEIsRUFBQW00QixFQUNBMTRCLEVBQUEsRUFFQSxHQUFBNUIsRUFBQWdELFdBQUFvQyxHQUNBLE9BQUFoSCxLQUFBb0QsS0FBQSxTQUFBVyxHQUNBbkMsRUFBQTVCLE1BQUFtOEIsWUFBQW4xQixFQUFBaEcsS0FBQWhCLEtBQUErRCxFQUFBODNCLEdBQUE3N0IsVUFJQSxJQUFBMEQsVUFBQWYsT0FDQSxPQUFBM0MsS0FBQTJSLEtBQUEsUUFBQSxJQUdBLEdBQUEsaUJBQUEzSyxHQUFBQSxFQUdBLElBRkErMEIsRUFBQS8wQixFQUFBNEYsTUFBQW9QLE9BRUF6WSxFQUFBdkQsS0FBQXdELE1BTUEsR0FMQXc0QixFQUFBSCxHQUFBdDRCLEdBR0F1TCxFQUFBLElBQUF2TCxFQUFBK0ksVUFBQSxJQUFBc3ZCLEdBQUFJLEdBQUEsSUFFQSxDQUVBLElBREFqNEIsRUFBQSxFQUNBazRCLEVBQUFGLEVBQUFoNEIsTUFHQSxLQUFBK0ssRUFBQXJPLFFBQUEsSUFBQXc3QixFQUFBLE1BQUEsR0FDQW50QixFQUFBQSxFQUFBMUosUUFBQSxJQUFBNjJCLEVBQUEsSUFBQSxLQU1BRCxLQURBRSxFQUFBTixHQUFBOXNCLEtBRUF2TCxFQUFBbUssYUFBQSxRQUFBd3VCLEdBTUEsT0FBQWw4QixNQUdBbzhCLFlBQUEsU0FBQXAxQixFQUFBcTFCLEdBQ0EsSUFBQTMyQixTQUFBc0IsRUFFQSxNQUFBLGtCQUFBcTFCLEdBQUEsV0FBQTMyQixFQUNBMjJCLEVBQUFyOEIsS0FBQTg3QixTQUFBOTBCLEdBQUFoSCxLQUFBbThCLFlBQUFuMUIsR0FHQXBGLEVBQUFnRCxXQUFBb0MsR0FDQWhILEtBQUFvRCxLQUFBLFNBQUFJLEdBQ0E1QixFQUFBNUIsTUFBQW84QixZQUNBcDFCLEVBQUFoRyxLQUFBaEIsS0FBQXdELEVBQUFxNEIsR0FBQTc3QixNQUFBcThCLEdBQ0FBLEtBS0FyOEIsS0FBQW9ELEtBQUEsV0FDQSxJQUFBMk0sRUFBQXZNLEVBQUErVyxFQUFBK2hCLEVBRUEsR0FBQSxXQUFBNTJCLEVBT0EsSUFKQWxDLEVBQUEsRUFDQStXLEVBQUEzWSxFQUFBNUIsTUFDQXM4QixFQUFBdDFCLEVBQUE0RixNQUFBb1AsT0FFQWpNLEVBQUF1c0IsRUFBQTk0QixNQUdBK1csRUFBQWdpQixTQUFBeHNCLEdBQ0F3SyxFQUFBNGhCLFlBQUFwc0IsR0FFQXdLLEVBQUF1aEIsU0FBQS9yQixhQUtBL0ssSUFBQWdDLEdBQUEsWUFBQXRCLEtBQ0FxSyxFQUFBOHJCLEdBQUE3N0IsUUFJQWlpQixFQUFBSixJQUFBN2hCLEtBQUEsZ0JBQUErUCxHQU9BL1AsS0FBQTBOLGNBQ0ExTixLQUFBME4sYUFBQSxRQUNBcUMsSUFBQSxJQUFBL0ksRUFDQSxHQUNBaWIsRUFBQXBmLElBQUE3QyxLQUFBLGtCQUFBLFFBT0F1OEIsU0FBQSxTQUFBMTZCLEdBQ0EsSUFBQWtPLEVBQUF4TSxFQUNBQyxFQUFBLEVBR0EsSUFEQXVNLEVBQUEsSUFBQWxPLEVBQUEsSUFDQTBCLEVBQUF2RCxLQUFBd0QsTUFDQSxHQUFBLElBQUFELEVBQUErSSxXQUNBLElBQUFzdkIsR0FBQUMsR0FBQXQ0QixJQUFBLEtBQUE5QyxRQUFBc1AsSUFBQSxFQUNBLE9BQUEsRUFJQSxPQUFBLEtBT0EsSUFBQXlzQixHQUFBLE1BRUE1NkIsRUFBQUcsR0FBQW9DLFFBQ0F5TixJQUFBLFNBQUE1SyxHQUNBLElBQUE2YixFQUFBNWYsRUFBQTJCLEVBQ0FyQixFQUFBdkQsS0FBQSxHQUVBLENBQUEsR0FBQTBELFVBQUFmLE9BNEJBLE9BRkFpQyxFQUFBaEQsRUFBQWdELFdBQUFvQyxHQUVBaEgsS0FBQW9ELEtBQUEsU0FBQUksR0FDQSxJQUFBb08sRUFFQSxJQUFBNVIsS0FBQXNNLFdBV0EsT0FOQXNGLEVBREFoTixFQUNBb0MsRUFBQWhHLEtBQUFoQixLQUFBd0QsRUFBQTVCLEVBQUE1QixNQUFBNFIsT0FFQTVLLEdBS0E0SyxFQUFBLEdBRUEsaUJBQUFBLEVBQ0FBLEdBQUEsR0FFQTlNLE1BQUFDLFFBQUE2TSxLQUNBQSxFQUFBaFEsRUFBQTBCLElBQUFzTyxFQUFBLFNBQUE1SyxHQUNBLE9BQUEsTUFBQUEsRUFBQSxHQUFBQSxFQUFBLE9BSUE2YixFQUFBamhCLEVBQUE2NkIsU0FBQXo4QixLQUFBMEYsT0FBQTlELEVBQUE2NkIsU0FBQXo4QixLQUFBd04sU0FBQTlGLGlCQUdBLFFBQUFtYixRQUFBN2QsSUFBQTZkLEVBQUFoQixJQUFBN2hCLEtBQUE0UixFQUFBLFdBQ0E1UixLQUFBZ0gsTUFBQTRLLE1BekRBLEdBQUFyTyxFQUlBLE9BSEFzZixFQUFBamhCLEVBQUE2NkIsU0FBQWw1QixFQUFBbUMsT0FDQTlELEVBQUE2NkIsU0FBQWw1QixFQUFBaUssU0FBQTlGLGlCQUdBLFFBQUFtYixRQUNBN2QsS0FBQS9CLEVBQUE0ZixFQUFBaGdCLElBQUFVLEVBQUEsVUFFQU4sRUFNQSxpQkFIQUEsRUFBQU0sRUFBQXlELE9BSUEvRCxFQUFBbUMsUUFBQW8zQixHQUFBLElBSUEsTUFBQXY1QixFQUFBLEdBQUFBLE1BNENBckIsRUFBQXVDLFFBQ0FzNEIsVUFDQXBYLFFBQ0F4aUIsSUFBQSxTQUFBVSxHQUVBLElBQUFxTyxFQUFBaFEsRUFBQXlPLEtBQUFzQixLQUFBcE8sRUFBQSxTQUNBLE9BQUEsTUFBQXFPLEVBQ0FBLEVBTUFncUIsR0FBQWg2QixFQUFBTCxLQUFBZ0MsTUFHQTBFLFFBQ0FwRixJQUFBLFNBQUFVLEdBQ0EsSUFBQXlELEVBQUFxZSxFQUFBN2hCLEVBQ0FZLEVBQUFiLEVBQUFhLFFBQ0ErVyxFQUFBNVgsRUFBQWtTLGNBQ0FtUyxFQUFBLGVBQUFya0IsRUFBQW1DLEtBQ0FvZixFQUFBOEMsRUFBQSxRQUNBcUwsRUFBQXJMLEVBQUF6TSxFQUFBLEVBQUEvVyxFQUFBekIsT0FVQSxJQVBBYSxFQURBMlgsRUFBQSxFQUNBOFgsRUFHQXJMLEVBQUF6TSxFQUFBLEVBSUEzWCxFQUFBeXZCLEVBQUF6dkIsSUFLQSxLQUpBNmhCLEVBQUFqaEIsRUFBQVosSUFJQWdTLFVBQUFoUyxJQUFBMlgsS0FHQWtLLEVBQUFuWixZQUNBbVosRUFBQTNqQixXQUFBd0ssV0FDQXNCLEVBQUE2WCxFQUFBM2pCLFdBQUEsYUFBQSxDQU1BLEdBSEFzRixFQUFBcEYsRUFBQXlqQixHQUFBelQsTUFHQWdXLEVBQ0EsT0FBQTVnQixFQUlBOGQsRUFBQXRrQixLQUFBd0csR0FJQSxPQUFBOGQsR0FHQWpELElBQUEsU0FBQXRlLEVBQUF5RCxHQU1BLElBTEEsSUFBQTAxQixFQUFBclgsRUFDQWpoQixFQUFBYixFQUFBYSxRQUNBMGdCLEVBQUFsakIsRUFBQTJFLFVBQUFTLEdBQ0F4RCxFQUFBWSxFQUFBekIsT0FFQWEsT0FDQTZoQixFQUFBamhCLEVBQUFaLElBSUFnUyxTQUNBNVQsRUFBQTZFLFFBQUE3RSxFQUFBNjZCLFNBQUFwWCxPQUFBeGlCLElBQUF3aUIsR0FBQVAsSUFBQSxLQUVBNFgsR0FBQSxHQVVBLE9BSEFBLElBQ0FuNUIsRUFBQWtTLGVBQUEsR0FFQXFQLE9BT0FsakIsRUFBQXdCLE1BQUEsUUFBQSxZQUFBLFdBQ0F4QixFQUFBNjZCLFNBQUF6OEIsT0FDQTZoQixJQUFBLFNBQUF0ZSxFQUFBeUQsR0FDQSxHQUFBbEMsTUFBQUMsUUFBQWlDLEdBQ0EsT0FBQXpELEVBQUFnUyxRQUFBM1QsRUFBQTZFLFFBQUE3RSxFQUFBMkIsR0FBQXFPLE1BQUE1SyxJQUFBLElBSUEvRixFQUFBeTVCLFVBQ0E5NEIsRUFBQTY2QixTQUFBejhCLE1BQUE2QyxJQUFBLFNBQUFVLEdBQ0EsT0FBQSxPQUFBQSxFQUFBa0ssYUFBQSxTQUFBLEtBQUFsSyxFQUFBeUQsVUFXQSxJQUFBMjFCLEdBQUEsa0NBRUEvNkIsRUFBQXVDLE9BQUF2QyxFQUFBa21CLE9BRUE2QyxRQUFBLFNBQUE3QyxFQUFBaEcsRUFBQXZlLEVBQUFxNUIsR0FFQSxJQUFBcDVCLEVBQUFzTCxFQUFBM0gsRUFBQTAxQixFQUFBQyxFQUFBclUsRUFBQXhKLEVBQ0E4ZCxHQUFBeDVCLEdBQUEzRCxHQUNBOEYsRUFBQTlFLEVBQUFJLEtBQUE4bUIsRUFBQSxRQUFBQSxFQUFBcGlCLEtBQUFvaUIsRUFDQVEsRUFBQTFuQixFQUFBSSxLQUFBOG1CLEVBQUEsYUFBQUEsRUFBQWdCLFVBQUFyaEIsTUFBQSxRQUtBLEdBSEFxSCxFQUFBM0gsRUFBQTVELEVBQUFBLEdBQUEzRCxFQUdBLElBQUEyRCxFQUFBK0ksVUFBQSxJQUFBL0ksRUFBQStJLFdBS0Fxd0IsR0FBQXB2QixLQUFBN0gsRUFBQTlELEVBQUFrbUIsTUFBQVksYUFJQWhqQixFQUFBakYsUUFBQSxNQUFBLElBSUFpRixHQURBNGlCLEVBQUE1aUIsRUFBQStCLE1BQUEsTUFDQTRHLFFBQ0FpYSxFQUFBcmtCLFFBRUE2NEIsRUFBQXAzQixFQUFBakYsUUFBQSxLQUFBLEdBQUEsS0FBQWlGLEdBR0FvaUIsRUFBQUEsRUFBQWxtQixFQUFBcUQsU0FDQTZpQixFQUNBLElBQUFsbUIsRUFBQXlvQixNQUFBM2tCLEVBQUEsaUJBQUFvaUIsR0FBQUEsSUFHQWtWLFVBQUFKLEVBQUEsRUFBQSxFQUNBOVUsRUFBQWdCLFVBQUFSLEVBQUExYSxLQUFBLEtBQ0FrYSxFQUFBK0IsV0FBQS9CLEVBQUFnQixVQUNBLElBQUFoZixPQUFBLFVBQUF3ZSxFQUFBMWEsS0FBQSxpQkFBQSxXQUNBLEtBR0FrYSxFQUFBelUsWUFBQXJPLEVBQ0E4aUIsRUFBQXBqQixTQUNBb2pCLEVBQUFwakIsT0FBQW5CLEdBSUF1ZSxFQUFBLE1BQUFBLEdBQ0FnRyxHQUNBbG1CLEVBQUEyRSxVQUFBdWIsR0FBQWdHLElBR0E3SSxFQUFBcmQsRUFBQWttQixNQUFBN0ksUUFBQXZaLE9BQ0FrM0IsSUFBQTNkLEVBQUEwTCxVQUFBLElBQUExTCxFQUFBMEwsUUFBQWxuQixNQUFBRixFQUFBdWUsSUFBQSxDQU1BLElBQUE4YSxJQUFBM2QsRUFBQXlMLFdBQUE5b0IsRUFBQStELFNBQUFwQyxHQUFBLENBTUEsSUFKQXM1QixFQUFBNWQsRUFBQTJKLGNBQUFsakIsRUFDQWkzQixHQUFBcHZCLEtBQUFzdkIsRUFBQW4zQixLQUNBb0osRUFBQUEsRUFBQXBOLFlBRUFvTixFQUFBQSxFQUFBQSxFQUFBcE4sV0FDQXE3QixFQUFBdjhCLEtBQUFzTyxHQUNBM0gsRUFBQTJILEVBSUEzSCxLQUFBNUQsRUFBQXlKLGVBQUFwTixJQUNBbTlCLEVBQUF2OEIsS0FBQTJHLEVBQUF3SSxhQUFBeEksRUFBQTgxQixjQUFBbDlCLEdBTUEsSUFEQXlELEVBQUEsR0FDQXNMLEVBQUFpdUIsRUFBQXY1QixRQUFBc2tCLEVBQUE0Qix3QkFFQTVCLEVBQUFwaUIsS0FBQWxDLEVBQUEsRUFDQXE1QixFQUNBNWQsRUFBQTRKLFVBQUFuakIsR0FHQStpQixHQUFBeEcsRUFBQXBmLElBQUFpTSxFQUFBLGVBQUFnWixFQUFBcGlCLE9BQ0F1YyxFQUFBcGYsSUFBQWlNLEVBQUEsWUFFQTJaLEVBQUFobEIsTUFBQXFMLEVBQUFnVCxJQUlBMkcsRUFBQXFVLEdBQUFodUIsRUFBQWd1QixLQUNBclUsRUFBQWhsQixPQUFBOGQsRUFBQXpTLEtBQ0FnWixFQUFBelUsT0FBQW9WLEVBQUFobEIsTUFBQXFMLEVBQUFnVCxJQUNBLElBQUFnRyxFQUFBelUsUUFDQXlVLEVBQUFnQyxrQkFvQ0EsT0FoQ0FoQyxFQUFBcGlCLEtBQUFBLEVBR0FrM0IsR0FBQTlVLEVBQUFtRCxzQkFFQWhNLEVBQUF5RyxXQUNBLElBQUF6RyxFQUFBeUcsU0FBQWppQixNQUFBczVCLEVBQUExekIsTUFBQXlZLEtBQ0FQLEVBQUFoZSxJQUlBdTVCLEdBQUFsN0IsRUFBQWdELFdBQUFyQixFQUFBbUMsTUFBQTlELEVBQUErRCxTQUFBcEMsTUFHQTRELEVBQUE1RCxFQUFBdTVCLE1BR0F2NUIsRUFBQXU1QixHQUFBLE1BSUFsN0IsRUFBQWttQixNQUFBWSxVQUFBaGpCLEVBQ0FuQyxFQUFBbUMsS0FDQTlELEVBQUFrbUIsTUFBQVksZUFBQTFqQixFQUVBbUMsSUFDQTVELEVBQUF1NUIsR0FBQTMxQixJQU1BMmdCLEVBQUF6VSxTQUtBNnBCLFNBQUEsU0FBQXgzQixFQUFBbkMsRUFBQXVrQixHQUNBLElBQUF2YixFQUFBM0ssRUFBQXVDLE9BQ0EsSUFBQXZDLEVBQUF5b0IsTUFDQXZDLEdBRUFwaUIsS0FBQUEsRUFDQTJsQixhQUFBLElBSUF6cEIsRUFBQWttQixNQUFBNkMsUUFBQXBlLEVBQUEsS0FBQWhKLE1BS0EzQixFQUFBRyxHQUFBb0MsUUFFQXdtQixRQUFBLFNBQUFqbEIsRUFBQW9jLEdBQ0EsT0FBQTloQixLQUFBb0QsS0FBQSxXQUNBeEIsRUFBQWttQixNQUFBNkMsUUFBQWpsQixFQUFBb2MsRUFBQTloQixTQUdBbTlCLGVBQUEsU0FBQXozQixFQUFBb2MsR0FDQSxJQUFBdmUsRUFBQXZELEtBQUEsR0FDQSxHQUFBdUQsRUFDQSxPQUFBM0IsRUFBQWttQixNQUFBNkMsUUFBQWpsQixFQUFBb2MsRUFBQXZlLEdBQUEsTUFNQTNCLEVBQUF3QixLQUFBLHdMQUVBcUUsTUFBQSxLQUNBLFNBQUFqRSxFQUFBYSxHQUdBekMsRUFBQUcsR0FBQXNDLEdBQUEsU0FBQXlkLEVBQUEvZixHQUNBLE9BQUEyQixVQUFBZixPQUFBLEVBQ0EzQyxLQUFBMG5CLEdBQUFyakIsRUFBQSxLQUFBeWQsRUFBQS9mLEdBQ0EvQixLQUFBMnFCLFFBQUF0bUIsTUFJQXpDLEVBQUFHLEdBQUFvQyxRQUNBaTVCLE1BQUEsU0FBQUMsRUFBQUMsR0FDQSxPQUFBdDlCLEtBQUFtdEIsV0FBQWtRLEdBQUFqUSxXQUFBa1EsR0FBQUQsTUFPQXA4QixFQUFBczhCLFFBQUEsY0FBQXg5QixFQVdBa0IsRUFBQXM4QixTQUNBMzdCLEVBQUF3QixNQUFBNlIsTUFBQSxVQUFBMlYsS0FBQSxZQUFBLFNBQUEyQyxFQUFBaEUsR0FHQSxJQUFBNWEsRUFBQSxTQUFBbVosR0FDQWxtQixFQUFBa21CLE1BQUFvVixTQUFBM1QsRUFBQXpCLEVBQUFwakIsT0FBQTlDLEVBQUFrbUIsTUFBQXlCLElBQUF6QixLQUdBbG1CLEVBQUFrbUIsTUFBQTdJLFFBQUFzSyxJQUNBUCxNQUFBLFdBQ0EsSUFBQTVuQixFQUFBcEIsS0FBQWdOLGVBQUFoTixLQUNBdzlCLEVBQUF2YixFQUFBZixPQUFBOWYsRUFBQW1vQixHQUVBaVUsR0FDQXA4QixFQUFBeU8saUJBQUEwZCxFQUFBNWUsR0FBQSxHQUVBc1QsRUFBQWYsT0FBQTlmLEVBQUFtb0IsR0FBQWlVLEdBQUEsR0FBQSxJQUVBclUsU0FBQSxXQUNBLElBQUEvbkIsRUFBQXBCLEtBQUFnTixlQUFBaE4sS0FDQXc5QixFQUFBdmIsRUFBQWYsT0FBQTlmLEVBQUFtb0IsR0FBQSxFQUVBaVUsRUFLQXZiLEVBQUFmLE9BQUE5ZixFQUFBbW9CLEVBQUFpVSxJQUpBcDhCLEVBQUEyZixvQkFBQXdNLEVBQUE1ZSxHQUFBLEdBQ0FzVCxFQUFBbkYsT0FBQTFiLEVBQUFtb0IsUUFTQSxJQUFBeFUsR0FBQWhWLEVBQUFnVixTQUVBMG9CLEdBQUE3N0IsRUFBQXlGLE1BRUFxMkIsR0FBQSxLQUtBOTdCLEVBQUErN0IsU0FBQSxTQUFBN2IsR0FDQSxJQUFBcE8sRUFDQSxJQUFBb08sR0FBQSxpQkFBQUEsRUFDQSxPQUFBLEtBS0EsSUFDQXBPLEdBQUEsSUFBQTNULEVBQUE2OUIsV0FBQUMsZ0JBQUEvYixFQUFBLFlBQ0EsTUFBQXZWLEdBQ0FtSCxPQUFBMU8sRUFNQSxPQUhBME8sSUFBQUEsRUFBQXRHLHFCQUFBLGVBQUF6SyxRQUNBZixFQUFBMEQsTUFBQSxnQkFBQXdjLEdBRUFwTyxHQUlBLElBQ0FvcUIsR0FBQSxRQUNBQyxHQUFBLFNBQ0FDLEdBQUEsd0NBQ0FDLEdBQUEscUNBRUEsU0FBQUMsR0FBQWxKLEVBQUF2dkIsRUFBQTA0QixFQUFBOWlCLEdBQ0EsSUFBQWhYLEVBRUEsR0FBQVMsTUFBQUMsUUFBQVUsR0FHQTdELEVBQUF3QixLQUFBcUMsRUFBQSxTQUFBakMsRUFBQTJaLEdBQ0FnaEIsR0FBQUwsR0FBQXZ3QixLQUFBeW5CLEdBR0EzWixFQUFBMlosRUFBQTdYLEdBS0ErZ0IsR0FDQWxKLEVBQUEsS0FBQSxpQkFBQTdYLEdBQUEsTUFBQUEsRUFBQTNaLEVBQUEsSUFBQSxJQUNBMlosRUFDQWdoQixFQUNBOWlCLFVBS0EsR0FBQThpQixHQUFBLFdBQUF2OEIsRUFBQThELEtBQUFELEdBVUE0VixFQUFBMlosRUFBQXZ2QixRQVBBLElBQUFwQixLQUFBb0IsRUFDQXk0QixHQUFBbEosRUFBQSxJQUFBM3dCLEVBQUEsSUFBQW9CLEVBQUFwQixHQUFBODVCLEVBQUE5aUIsR0FZQXpaLEVBQUF3OEIsTUFBQSxTQUFBajFCLEVBQUFnMUIsR0FDQSxJQUFBbkosRUFDQXFKLEtBQ0FoakIsRUFBQSxTQUFBbE4sRUFBQW13QixHQUdBLElBQUF0M0IsRUFBQXBGLEVBQUFnRCxXQUFBMDVCLEdBQ0FBLElBQ0FBLEVBRUFELEVBQUFBLEVBQUExN0IsUUFBQTQ3QixtQkFBQXB3QixHQUFBLElBQ0Fvd0IsbUJBQUEsTUFBQXYzQixFQUFBLEdBQUFBLElBSUEsR0FBQWxDLE1BQUFDLFFBQUFvRSxJQUFBQSxFQUFBMUcsU0FBQWIsRUFBQWlELGNBQUFzRSxHQUdBdkgsRUFBQXdCLEtBQUErRixFQUFBLFdBQ0FrUyxFQUFBcmIsS0FBQXFFLEtBQUFyRSxLQUFBZ0gsY0FPQSxJQUFBZ3VCLEtBQUE3ckIsRUFDQSswQixHQUFBbEosRUFBQTdyQixFQUFBNnJCLEdBQUFtSixFQUFBOWlCLEdBS0EsT0FBQWdqQixFQUFBendCLEtBQUEsTUFHQWhNLEVBQUFHLEdBQUFvQyxRQUNBcTZCLFVBQUEsV0FDQSxPQUFBNThCLEVBQUF3OEIsTUFBQXArQixLQUFBeStCLG1CQUVBQSxlQUFBLFdBQ0EsT0FBQXorQixLQUFBc0QsSUFBQSxXQUdBLElBQUFvTyxFQUFBOVAsRUFBQW1nQixLQUFBL2hCLEtBQUEsWUFDQSxPQUFBMFIsRUFBQTlQLEVBQUEyRSxVQUFBbUwsR0FBQTFSLE9BRUFtUSxPQUFBLFdBQ0EsSUFBQXpLLEVBQUExRixLQUFBMEYsS0FHQSxPQUFBMUYsS0FBQXFFLE9BQUF6QyxFQUFBNUIsTUFBQStaLEdBQUEsY0FDQWtrQixHQUFBMXdCLEtBQUF2TixLQUFBd04sWUFBQXd3QixHQUFBendCLEtBQUE3SCxLQUNBMUYsS0FBQXVWLFVBQUEwUCxHQUFBMVgsS0FBQTdILE1BRUFwQyxJQUFBLFNBQUFFLEVBQUFELEdBQ0EsSUFBQXFPLEVBQUFoUSxFQUFBNUIsTUFBQTRSLE1BRUEsT0FBQSxNQUFBQSxFQUNBLEtBR0E5TSxNQUFBQyxRQUFBNk0sR0FDQWhRLEVBQUEwQixJQUFBc08sRUFBQSxTQUFBQSxHQUNBLE9BQUF2TixLQUFBZCxFQUFBYyxLQUFBMkMsTUFBQTRLLEVBQUF4TSxRQUFBMjRCLEdBQUEsWUFJQTE1QixLQUFBZCxFQUFBYyxLQUFBMkMsTUFBQTRLLEVBQUF4TSxRQUFBMjRCLEdBQUEsV0FDQWw3QixTQUtBLElBQ0E2N0IsR0FBQSxPQUNBQyxHQUFBLE9BQ0FDLEdBQUEsZ0JBQ0FDLEdBQUEsNkJBSUFDLEdBQUEsaUJBQ0FDLEdBQUEsUUFXQXRILE1BT0F1SCxNQUdBQyxHQUFBLEtBQUExK0IsT0FBQSxLQUdBMitCLEdBQUF0L0IsRUFBQTBCLGNBQUEsS0FDQTQ5QixHQUFBOXBCLEtBQUFMLEdBQUFLLEtBR0EsU0FBQStwQixHQUFBQyxHQUdBLE9BQUEsU0FBQUMsRUFBQXRoQixHQUVBLGlCQUFBc2hCLElBQ0F0aEIsRUFBQXNoQixFQUNBQSxFQUFBLEtBR0EsSUFBQUMsRUFDQTk3QixFQUFBLEVBQ0ErN0IsRUFBQUYsRUFBQTMzQixjQUFBa0YsTUFBQW9QLE9BRUEsR0FBQXBhLEVBQUFnRCxXQUFBbVosR0FHQSxLQUFBdWhCLEVBQUFDLEVBQUEvN0IsTUFHQSxNQUFBODdCLEVBQUEsSUFDQUEsRUFBQUEsRUFBQWgvQixNQUFBLElBQUEsS0FDQTgrQixFQUFBRSxHQUFBRixFQUFBRSxRQUFBOXRCLFFBQUF1TSxLQUlBcWhCLEVBQUFFLEdBQUFGLEVBQUFFLFFBQUE5K0IsS0FBQXVkLElBUUEsU0FBQXloQixHQUFBSixFQUFBaDdCLEVBQUE0ekIsRUFBQXlILEdBRUEsSUFBQUMsS0FDQUMsRUFBQVAsSUFBQUosR0FFQSxTQUFBWSxFQUFBTixHQUNBLElBQUE5cEIsRUFjQSxPQWJBa3FCLEVBQUFKLElBQUEsRUFDQTE5QixFQUFBd0IsS0FBQWc4QixFQUFBRSxPQUFBLFNBQUFsMEIsRUFBQXkwQixHQUNBLElBQUFDLEVBQUFELEVBQUF6N0IsRUFBQTR6QixFQUFBeUgsR0FDQSxNQUFBLGlCQUFBSyxHQUNBSCxHQUFBRCxFQUFBSSxHQUtBSCxJQUNBbnFCLEVBQUFzcUIsUUFEQSxHQUhBMTdCLEVBQUFtN0IsVUFBQS90QixRQUFBc3VCLEdBQ0FGLEVBQUFFLElBQ0EsS0FLQXRxQixFQUdBLE9BQUFvcUIsRUFBQXg3QixFQUFBbTdCLFVBQUEsTUFBQUcsRUFBQSxNQUFBRSxFQUFBLEtBTUEsU0FBQUcsR0FBQXI3QixFQUFBSixHQUNBLElBQUE2SixFQUFBeEosRUFDQXE3QixFQUFBcCtCLEVBQUFxK0IsYUFBQUQsZ0JBRUEsSUFBQTd4QixLQUFBN0osT0FDQVUsSUFBQVYsRUFBQTZKLE1BQ0E2eEIsRUFBQTd4QixHQUFBekosRUFBQUMsSUFBQUEsT0FBQXdKLEdBQUE3SixFQUFBNkosSUFPQSxPQUpBeEosR0FDQS9DLEVBQUF1QyxRQUFBLEVBQUFPLEVBQUFDLEdBR0FELEVBaUtBOUMsRUFBQXVDLFFBR0ErN0IsT0FBQSxFQUdBQyxnQkFDQUMsUUFFQUgsY0FDQUksSUFBQXRyQixHQUFBSyxLQUNBMVAsS0FBQSxNQUNBNDZCLFFBdlJBLDREQXVSQS95QixLQUFBd0gsR0FBQXdyQixVQUNBL2dDLFFBQUEsRUFDQWdoQyxhQUFBLEVBQ0FDLE9BQUEsRUFDQUMsWUFBQSxtREFjQUMsU0FDQXJJLElBQUEyRyxHQUNBMTlCLEtBQUEsYUFDQXF0QixLQUFBLFlBQ0FsYixJQUFBLDRCQUNBa3RCLEtBQUEscUNBR0E5bEIsVUFDQXBILElBQUEsVUFDQWtiLEtBQUEsU0FDQWdTLEtBQUEsWUFHQUMsZ0JBQ0FudEIsSUFBQSxjQUNBblMsS0FBQSxlQUNBcS9CLEtBQUEsZ0JBS0FFLFlBR0FDLFNBQUF2MUIsT0FHQXcxQixhQUFBLEVBR0FDLFlBQUEzZSxLQUFBQyxNQUdBMmUsV0FBQXQvQixFQUFBKzdCLFVBT0FxQyxhQUNBSyxLQUFBLEVBQ0F2K0IsU0FBQSxJQU9BcS9CLFVBQUEsU0FBQXo4QixFQUFBMDhCLEdBQ0EsT0FBQUEsRUFHQXJCLEdBQUFBLEdBQUFyN0IsRUFBQTlDLEVBQUFxK0IsY0FBQW1CLEdBR0FyQixHQUFBbitCLEVBQUFxK0IsYUFBQXY3QixJQUdBMjhCLGNBQUFsQyxHQUFBMUgsSUFDQTZKLGNBQUFuQyxHQUFBSCxJQUdBdUMsS0FBQSxTQUFBbEIsRUFBQWo4QixHQUdBLGlCQUFBaThCLElBQ0FqOEIsRUFBQWk4QixFQUNBQSxPQUFBcjdCLEdBSUFaLEVBQUFBLE1BRUEsSUFBQW85QixFQUdBQyxFQUdBQyxFQUNBQyxFQUdBQyxFQUdBQyxFQUdBL2dCLEVBR0FnaEIsRUFHQXQrQixFQUdBdStCLEVBR0ExRCxFQUFBejhCLEVBQUF1L0IsYUFBQS84QixHQUdBNDlCLEVBQUEzRCxFQUFBdjhCLFNBQUF1OEIsRUFHQTRELEVBQUE1RCxFQUFBdjhCLFVBQ0FrZ0MsRUFBQTExQixVQUFBMDFCLEVBQUF2L0IsUUFDQWIsRUFBQW9nQyxHQUNBcGdDLEVBQUFrbUIsTUFHQTNKLEVBQUF2YyxFQUFBa2MsV0FDQW9rQixFQUFBdGdDLEVBQUFxYSxVQUFBLGVBR0FrbUIsRUFBQTlELEVBQUE4RCxlQUdBQyxLQUNBQyxLQUdBQyxFQUFBLFdBR0E3QyxHQUNBemUsV0FBQSxFQUdBdWhCLGtCQUFBLFNBQUFwMEIsR0FDQSxJQUFBdkIsRUFDQSxHQUFBa1UsRUFBQSxDQUNBLElBQUE2Z0IsRUFFQSxJQURBQSxLQUNBLzBCLEVBQUFpeUIsR0FBQTV4QixLQUFBeTBCLElBQ0FDLEVBQUEvMEIsRUFBQSxHQUFBbEYsZUFBQWtGLEVBQUEsR0FHQUEsRUFBQSswQixFQUFBeHpCLEVBQUF6RyxlQUVBLE9BQUEsTUFBQWtGLEVBQUEsS0FBQUEsR0FJQTQxQixzQkFBQSxXQUNBLE9BQUExaEIsRUFBQTRnQixFQUFBLE1BSUFlLGlCQUFBLFNBQUFwK0IsRUFBQTJDLEdBTUEsT0FMQSxNQUFBOFosSUFDQXpjLEVBQUFnK0IsRUFBQWgrQixFQUFBcUQsZUFDQTI2QixFQUFBaCtCLEVBQUFxRCxnQkFBQXJELEVBQ0ErOUIsRUFBQS85QixHQUFBMkMsR0FFQWhILE1BSUEwaUMsaUJBQUEsU0FBQWg5QixHQUlBLE9BSEEsTUFBQW9iLElBQ0F1ZCxFQUFBc0UsU0FBQWo5QixHQUVBMUYsTUFJQW1pQyxXQUFBLFNBQUE3K0IsR0FDQSxJQUFBbkMsRUFDQSxHQUFBbUMsRUFDQSxHQUFBd2QsRUFHQTJlLEVBQUF2aEIsT0FBQTVhLEVBQUFtOEIsRUFBQW1ELGNBSUEsSUFBQXpoQyxLQUFBbUMsRUFDQTYrQixFQUFBaGhDLElBQUFnaEMsRUFBQWhoQyxHQUFBbUMsRUFBQW5DLElBSUEsT0FBQW5CLE1BSUE2aUMsTUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUFELEdBQUFSLEVBS0EsT0FKQWQsR0FDQUEsRUFBQXFCLE1BQUFFLEdBRUFsNkIsRUFBQSxFQUFBazZCLEdBQ0EvaUMsT0FvQkEsR0FmQW1lLEVBQUFSLFFBQUE4aEIsR0FLQXBCLEVBQUFnQyxNQUFBQSxHQUFBaEMsRUFBQWdDLEtBQUF0ckIsR0FBQUssTUFBQSxJQUNBaFEsUUFBQTI1QixHQUFBaHFCLEdBQUF3ckIsU0FBQSxNQUdBbEMsRUFBQTM0QixLQUFBdEIsRUFBQXNaLFFBQUF0WixFQUFBc0IsTUFBQTI0QixFQUFBM2dCLFFBQUEyZ0IsRUFBQTM0QixLQUdBMjRCLEVBQUFrQixXQUFBbEIsRUFBQWlCLFVBQUEsS0FBQTUzQixjQUFBa0YsTUFBQW9QLEtBQUEsSUFHQSxNQUFBcWlCLEVBQUEyRSxZQUFBLENBQ0FuQixFQUFBamlDLEVBQUEwQixjQUFBLEtBS0EsSUFDQXVnQyxFQUFBenNCLEtBQUFpcEIsRUFBQWdDLElBSUF3QixFQUFBenNCLEtBQUF5c0IsRUFBQXpzQixLQUNBaXBCLEVBQUEyRSxZQUFBOUQsR0FBQXFCLFNBQUEsS0FBQXJCLEdBQUErRCxNQUNBcEIsRUFBQXRCLFNBQUEsS0FBQXNCLEVBQUFvQixLQUNBLE1BQUExMkIsR0FJQTh4QixFQUFBMkUsYUFBQSxHQWFBLEdBUkEzRSxFQUFBdmMsTUFBQXVjLEVBQUFtQyxhQUFBLGlCQUFBbkMsRUFBQXZjLE9BQ0F1YyxFQUFBdmMsS0FBQWxnQixFQUFBdzhCLE1BQUFDLEVBQUF2YyxLQUFBdWMsRUFBQUYsY0FJQXFCLEdBQUEvSCxHQUFBNEcsRUFBQWo2QixFQUFBcTdCLEdBR0EzZSxFQUNBLE9BQUEyZSxHQUtBcUMsRUFBQWxnQyxFQUFBa21CLE9BQUF1VyxFQUFBNytCLFNBR0EsR0FBQW9DLEVBQUFzK0IsVUFDQXQrQixFQUFBa21CLE1BQUE2QyxRQUFBLGFBSUEwVCxFQUFBMzRCLEtBQUEyNEIsRUFBQTM0QixLQUFBbkQsY0FHQTg3QixFQUFBNkUsWUFBQXBFLEdBQUF2eEIsS0FBQTh3QixFQUFBMzRCLE1BS0ErN0IsRUFBQXBELEVBQUFnQyxJQUFBajdCLFFBQUF1NUIsR0FBQSxJQUdBTixFQUFBNkUsV0F1QkE3RSxFQUFBdmMsTUFBQXVjLEVBQUFtQyxhQUNBLEtBQUFuQyxFQUFBcUMsYUFBQSxJQUFBamdDLFFBQUEsdUNBQ0E0OUIsRUFBQXZjLEtBQUF1YyxFQUFBdmMsS0FBQTFjLFFBQUFzNUIsR0FBQSxPQXRCQXFELEVBQUExRCxFQUFBZ0MsSUFBQS8vQixNQUFBbWhDLEVBQUE5K0IsUUFHQTA3QixFQUFBdmMsT0FDQTJmLElBQUEvRCxHQUFBbndCLEtBQUFrMEIsR0FBQSxJQUFBLEtBQUFwRCxFQUFBdmMsWUFHQXVjLEVBQUF2YyxPQUlBLElBQUF1YyxFQUFBbndCLFFBQ0F1ekIsRUFBQUEsRUFBQXI4QixRQUFBdzVCLEdBQUEsTUFDQW1ELEdBQUFyRSxHQUFBbndCLEtBQUFrMEIsR0FBQSxJQUFBLEtBQUEsS0FBQWhFLEtBQUFzRSxHQUlBMUQsRUFBQWdDLElBQUFvQixFQUFBTSxHQVNBMUQsRUFBQThFLGFBQ0F2aEMsRUFBQXUrQixhQUFBc0IsSUFDQWhDLEVBQUFnRCxpQkFBQSxvQkFBQTdnQyxFQUFBdStCLGFBQUFzQixJQUVBNy9CLEVBQUF3K0IsS0FBQXFCLElBQ0FoQyxFQUFBZ0QsaUJBQUEsZ0JBQUE3Z0MsRUFBQXcrQixLQUFBcUIsTUFLQXBELEVBQUF2YyxNQUFBdWMsRUFBQTZFLGFBQUEsSUFBQTdFLEVBQUFxQyxhQUFBdDhCLEVBQUFzOEIsY0FDQWpCLEVBQUFnRCxpQkFBQSxlQUFBcEUsRUFBQXFDLGFBSUFqQixFQUFBZ0QsaUJBQ0EsU0FDQXBFLEVBQUFrQixVQUFBLElBQUFsQixFQUFBc0MsUUFBQXRDLEVBQUFrQixVQUFBLElBQ0FsQixFQUFBc0MsUUFBQXRDLEVBQUFrQixVQUFBLEtBQ0EsTUFBQWxCLEVBQUFrQixVQUFBLEdBQUEsS0FBQU4sR0FBQSxXQUFBLElBQ0FaLEVBQUFzQyxRQUFBLE1BSUEsSUFBQW45QixLQUFBNjZCLEVBQUErRSxRQUNBM0QsRUFBQWdELGlCQUFBai9CLEVBQUE2NkIsRUFBQStFLFFBQUE1L0IsSUFJQSxHQUFBNjZCLEVBQUFnRixjQUNBLElBQUFoRixFQUFBZ0YsV0FBQXJpQyxLQUFBZ2hDLEVBQUF2QyxFQUFBcEIsSUFBQXZkLEdBR0EsT0FBQTJlLEVBQUFvRCxRQWVBLEdBWEFQLEVBQUEsUUFHQUosRUFBQTdtQixJQUFBZ2pCLEVBQUFsRyxVQUNBc0gsRUFBQTUyQixLQUFBdzFCLEVBQUFpRixTQUNBN0QsRUFBQTdoQixLQUFBeWdCLEVBQUEvNEIsT0FHQWs4QixFQUFBaEMsR0FBQVIsR0FBQVgsRUFBQWo2QixFQUFBcTdCLEdBS0EsQ0FTQSxHQVJBQSxFQUFBemUsV0FBQSxFQUdBOGdCLEdBQ0FHLEVBQUF0WCxRQUFBLFlBQUE4VSxFQUFBcEIsSUFJQXZkLEVBQ0EsT0FBQTJlLEVBSUFwQixFQUFBb0MsT0FBQXBDLEVBQUE3RCxRQUFBLElBQ0FvSCxFQUFBN2hDLEVBQUE2ZixXQUFBLFdBQ0E2ZixFQUFBb0QsTUFBQSxZQUNBeEUsRUFBQTdELFVBR0EsSUFDQTFaLEdBQUEsRUFDQTBnQixFQUFBK0IsS0FBQW5CLEVBQUF2NUIsR0FDQSxNQUFBMEQsR0FHQSxHQUFBdVUsRUFDQSxNQUFBdlUsRUFJQTFELEdBQUEsRUFBQTBELFNBaENBMUQsR0FBQSxFQUFBLGdCQXFDQSxTQUFBQSxFQUFBKzVCLEVBQUFZLEVBQUFDLEVBQUFMLEdBQ0EsSUFBQU0sRUFBQUosRUFBQWgrQixFQUFBcStCLEVBQUFDLEVBQ0FkLEVBQUFVLEVBR0ExaUIsSUFJQUEsR0FBQSxFQUdBOGdCLEdBQ0E3aEMsRUFBQTA2QixhQUFBbUgsR0FLQUosT0FBQXg4QixFQUdBMDhCLEVBQUEwQixHQUFBLEdBR0EzRCxFQUFBemUsV0FBQTRoQixFQUFBLEVBQUEsRUFBQSxFQUdBYyxFQUFBZCxHQUFBLEtBQUFBLEVBQUEsS0FBQSxNQUFBQSxFQUdBYSxJQUNBRSxFQTFsQkEsU0FBQXRGLEVBQUFvQixFQUFBZ0UsR0FPQSxJQUxBLElBQUFJLEVBQUFuK0IsRUFBQW8rQixFQUFBQyxFQUNBanBCLEVBQUF1akIsRUFBQXZqQixTQUNBeWtCLEVBQUFsQixFQUFBa0IsVUFHQSxNQUFBQSxFQUFBLElBQ0FBLEVBQUFseEIsYUFDQXJKLElBQUE2K0IsSUFDQUEsRUFBQXhGLEVBQUFzRSxVQUFBbEQsRUFBQThDLGtCQUFBLGlCQUtBLEdBQUFzQixFQUNBLElBQUFuK0IsS0FBQW9WLEVBQ0EsR0FBQUEsRUFBQXBWLElBQUFvVixFQUFBcFYsR0FBQTZILEtBQUFzMkIsR0FBQSxDQUNBdEUsRUFBQS90QixRQUFBOUwsR0FDQSxNQU1BLEdBQUE2NUIsRUFBQSxLQUFBa0UsRUFDQUssRUFBQXZFLEVBQUEsT0FDQSxDQUdBLElBQUE3NUIsS0FBQSs5QixFQUFBLENBQ0EsSUFBQWxFLEVBQUEsSUFBQWxCLEVBQUF5QyxXQUFBcDdCLEVBQUEsSUFBQTY1QixFQUFBLElBQUEsQ0FDQXVFLEVBQUFwK0IsRUFDQSxNQUVBcStCLElBQ0FBLEVBQUFyK0IsR0FLQW8rQixFQUFBQSxHQUFBQyxFQU1BLEdBQUFELEVBSUEsT0FIQUEsSUFBQXZFLEVBQUEsSUFDQUEsRUFBQS90QixRQUFBc3lCLEdBRUFMLEVBQUFLLEdBdWlCQUUsQ0FBQTNGLEVBQUFvQixFQUFBZ0UsSUFJQUUsRUFwaUJBLFNBQUF0RixFQUFBc0YsRUFBQWxFLEVBQUFpRSxHQUNBLElBQUFPLEVBQUFDLEVBQUFDLEVBQUFoOUIsRUFBQTRULEVBQ0ErbEIsS0FHQXZCLEVBQUFsQixFQUFBa0IsVUFBQWovQixRQUdBLEdBQUFpL0IsRUFBQSxHQUNBLElBQUE0RSxLQUFBOUYsRUFBQXlDLFdBQ0FBLEVBQUFxRCxFQUFBejhCLGVBQUEyMkIsRUFBQXlDLFdBQUFxRCxHQU9BLElBSEFELEVBQUEzRSxFQUFBbHhCLFFBR0E2MUIsR0FjQSxHQVpBN0YsRUFBQXdDLGVBQUFxRCxLQUNBekUsRUFBQXBCLEVBQUF3QyxlQUFBcUQsSUFBQVAsSUFJQTVvQixHQUFBMm9CLEdBQUFyRixFQUFBK0YsYUFDQVQsRUFBQXRGLEVBQUErRixXQUFBVCxFQUFBdEYsRUFBQWlCLFdBR0F2a0IsRUFBQW1wQixFQUNBQSxFQUFBM0UsRUFBQWx4QixRQUtBLEdBQUEsTUFBQTYxQixFQUVBQSxFQUFBbnBCLE9BR0EsR0FBQSxNQUFBQSxHQUFBQSxJQUFBbXBCLEVBQUEsQ0FNQSxLQUhBQyxFQUFBckQsRUFBQS9sQixFQUFBLElBQUFtcEIsSUFBQXBELEVBQUEsS0FBQW9ELElBSUEsSUFBQUQsS0FBQW5ELEVBSUEsSUFEQTM1QixFQUFBODhCLEVBQUF4OEIsTUFBQSxNQUNBLEtBQUF5OEIsSUFHQUMsRUFBQXJELEVBQUEvbEIsRUFBQSxJQUFBNVQsRUFBQSxLQUNBMjVCLEVBQUEsS0FBQTM1QixFQUFBLEtBQ0EsRUFHQSxJQUFBZzlCLEVBQ0FBLEVBQUFyRCxFQUFBbUQsSUFHQSxJQUFBbkQsRUFBQW1ELEtBQ0FDLEVBQUEvOEIsRUFBQSxHQUNBbzRCLEVBQUEvdEIsUUFBQXJLLEVBQUEsS0FFQSxNQU9BLElBQUEsSUFBQWc5QixFQUdBLEdBQUFBLEdBQUE5RixFQUFBZ0csT0FDQVYsRUFBQVEsRUFBQVIsUUFFQSxJQUNBQSxFQUFBUSxFQUFBUixHQUNBLE1BQUFwM0IsR0FDQSxPQUNBMFIsTUFBQSxjQUNBM1ksTUFBQTYrQixFQUFBNTNCLEVBQUEsc0JBQUF3TyxFQUFBLE9BQUFtcEIsSUFTQSxPQUFBam1CLE1BQUEsVUFBQTZELEtBQUE2aEIsR0F1Y0FXLENBQUFqRyxFQUFBc0YsRUFBQWxFLEVBQUFpRSxHQUdBQSxHQUdBckYsRUFBQThFLGNBQ0FTLEVBQUFuRSxFQUFBOEMsa0JBQUEsb0JBRUEzZ0MsRUFBQXUrQixhQUFBc0IsR0FBQW1DLElBRUFBLEVBQUFuRSxFQUFBOEMsa0JBQUEsV0FFQTNnQyxFQUFBdytCLEtBQUFxQixHQUFBbUMsSUFLQSxNQUFBaEIsR0FBQSxTQUFBdkUsRUFBQTM0QixLQUNBbzlCLEVBQUEsWUFHQSxNQUFBRixFQUNBRSxFQUFBLGVBSUFBLEVBQUFhLEVBQUExbEIsTUFDQXFsQixFQUFBSyxFQUFBN2hCLEtBRUE0aEIsSUFEQXArQixFQUFBcStCLEVBQUFyK0IsVUFNQUEsRUFBQXc5QixHQUNBRixHQUFBRSxJQUNBQSxFQUFBLFFBQ0FGLEVBQUEsSUFDQUEsRUFBQSxLQU1BbkQsRUFBQW1ELE9BQUFBLEVBQ0FuRCxFQUFBcUQsWUFBQVUsR0FBQVYsR0FBQSxHQUdBWSxFQUNBdmxCLEVBQUFtQixZQUFBMGlCLEdBQUFzQixFQUFBUixFQUFBckQsSUFFQXRoQixFQUFBdUIsV0FBQXNpQixHQUFBdkMsRUFBQXFELEVBQUF4OUIsSUFJQW02QixFQUFBMEMsV0FBQUEsR0FDQUEsT0FBQW45QixFQUVBODhCLEdBQ0FHLEVBQUF0WCxRQUFBK1ksRUFBQSxjQUFBLGFBQ0FqRSxFQUFBcEIsRUFBQXFGLEVBQUFKLEVBQUFoK0IsSUFJQTQ4QixFQUFBamxCLFNBQUEra0IsR0FBQXZDLEVBQUFxRCxJQUVBaEIsSUFDQUcsRUFBQXRYLFFBQUEsZ0JBQUE4VSxFQUFBcEIsTUFHQXo4QixFQUFBcytCLFFBQ0F0K0IsRUFBQWttQixNQUFBNkMsUUFBQSxjQUtBLE9BQUE4VSxHQUdBOEUsUUFBQSxTQUFBbEUsRUFBQXZlLEVBQUF6ZSxHQUNBLE9BQUF6QixFQUFBaUIsSUFBQXc5QixFQUFBdmUsRUFBQXplLEVBQUEsU0FHQW1oQyxVQUFBLFNBQUFuRSxFQUFBaDlCLEdBQ0EsT0FBQXpCLEVBQUFpQixJQUFBdzlCLE9BQUFyN0IsRUFBQTNCLEVBQUEsYUFJQXpCLEVBQUF3QixNQUFBLE1BQUEsUUFBQSxTQUFBSSxFQUFBa2EsR0FDQTliLEVBQUE4YixHQUFBLFNBQUEyaUIsRUFBQXZlLEVBQUF6ZSxFQUFBcUMsR0FVQSxPQVBBOUQsRUFBQWdELFdBQUFrZCxLQUNBcGMsRUFBQUEsR0FBQXJDLEVBQ0FBLEVBQUF5ZSxFQUNBQSxPQUFBOWMsR0FJQXBELEVBQUEyL0IsS0FBQTMvQixFQUFBdUMsUUFDQWs4QixJQUFBQSxFQUNBMzZCLEtBQUFnWSxFQUNBNGhCLFNBQUE1NUIsRUFDQW9jLEtBQUFBLEVBQ0F3aEIsUUFBQWpnQyxHQUNBekIsRUFBQWlELGNBQUF3N0IsSUFBQUEsT0FLQXorQixFQUFBaXRCLFNBQUEsU0FBQXdSLEdBQ0EsT0FBQXorQixFQUFBMi9CLE1BQ0FsQixJQUFBQSxFQUdBMzZCLEtBQUEsTUFDQTQ1QixTQUFBLFNBQ0FweEIsT0FBQSxFQUNBdXlCLE9BQUEsRUFDQWpoQyxRQUFBLEVBQ0E2a0MsUUFBQSxLQUtBemlDLEVBQUFHLEdBQUFvQyxRQUNBc2dDLFFBQUEsU0FBQTdWLEdBQ0EsSUFBQW5JLEVBeUJBLE9BdkJBem1CLEtBQUEsS0FDQTRCLEVBQUFnRCxXQUFBZ3FCLEtBQ0FBLEVBQUFBLEVBQUE1dEIsS0FBQWhCLEtBQUEsS0FJQXltQixFQUFBN2tCLEVBQUFndEIsRUFBQTV1QixLQUFBLEdBQUFnTixlQUFBcEosR0FBQSxHQUFBYSxPQUFBLEdBRUF6RSxLQUFBLEdBQUEwQixZQUNBK2tCLEVBQUErSSxhQUFBeHZCLEtBQUEsSUFHQXltQixFQUFBbmpCLElBQUEsV0FHQSxJQUZBLElBQUFDLEVBQUF2RCxLQUVBdUQsRUFBQW1oQyxtQkFDQW5oQyxFQUFBQSxFQUFBbWhDLGtCQUdBLE9BQUFuaEMsSUFDQStyQixPQUFBdHZCLE9BR0FBLE1BR0Eya0MsVUFBQSxTQUFBL1YsR0FDQSxPQUFBaHRCLEVBQUFnRCxXQUFBZ3FCLEdBQ0E1dUIsS0FBQW9ELEtBQUEsU0FBQUksR0FDQTVCLEVBQUE1QixNQUFBMmtDLFVBQUEvVixFQUFBNXRCLEtBQUFoQixLQUFBd0QsTUFJQXhELEtBQUFvRCxLQUFBLFdBQ0EsSUFBQW1YLEVBQUEzWSxFQUFBNUIsTUFDQThhLEVBQUFQLEVBQUFPLFdBRUFBLEVBQUFuWSxPQUNBbVksRUFBQTJwQixRQUFBN1YsR0FHQXJVLEVBQUErVSxPQUFBVixNQUtBbkksS0FBQSxTQUFBbUksR0FDQSxJQUFBaHFCLEVBQUFoRCxFQUFBZ0QsV0FBQWdxQixHQUVBLE9BQUE1dUIsS0FBQW9ELEtBQUEsU0FBQUksR0FDQTVCLEVBQUE1QixNQUFBeWtDLFFBQUE3L0IsRUFBQWdxQixFQUFBNXRCLEtBQUFoQixLQUFBd0QsR0FBQW9yQixNQUlBZ1csT0FBQSxTQUFBL2lDLEdBSUEsT0FIQTdCLEtBQUErVCxPQUFBbFMsR0FBQTBTLElBQUEsUUFBQW5SLEtBQUEsV0FDQXhCLEVBQUE1QixNQUFBMnZCLFlBQUEzdkIsS0FBQXFNLGNBRUFyTSxRQUtBNEIsRUFBQTZQLEtBQUE3SCxRQUFBK3NCLE9BQUEsU0FBQXB6QixHQUNBLE9BQUEzQixFQUFBNlAsS0FBQTdILFFBQUFpN0IsUUFBQXRoQyxJQUVBM0IsRUFBQTZQLEtBQUE3SCxRQUFBaTdCLFFBQUEsU0FBQXRoQyxHQUNBLFNBQUFBLEVBQUF1aEMsYUFBQXZoQyxFQUFBd2hDLGNBQUF4aEMsRUFBQW14QixpQkFBQS94QixTQU1BZixFQUFBcStCLGFBQUErRSxJQUFBLFdBQ0EsSUFDQSxPQUFBLElBQUFqbEMsRUFBQWtsQyxlQUNBLE1BQUExNEIsTUFHQSxJQUFBMjRCLElBR0FDLEVBQUEsSUFJQUMsS0FBQSxLQUVBQyxHQUFBempDLEVBQUFxK0IsYUFBQStFLE1BRUEvakMsRUFBQXFrQyxPQUFBRCxJQUFBLG9CQUFBQSxHQUNBcGtDLEVBQUFzZ0MsS0FBQThELEtBQUFBLEdBRUF6akMsRUFBQTAvQixjQUFBLFNBQUFsOUIsR0FDQSxJQUFBZixFQUFBa2lDLEVBR0EsR0FBQXRrQyxFQUFBcWtDLE1BQUFELEtBQUFqaEMsRUFBQTQrQixZQUNBLE9BQ0FPLEtBQUEsU0FBQUgsRUFBQWpMLEdBQ0EsSUFBQTMwQixFQUNBd2hDLEVBQUE1Z0MsRUFBQTRnQyxNQVdBLEdBVEFBLEVBQUFRLEtBQ0FwaEMsRUFBQXNCLEtBQ0F0QixFQUFBaThCLElBQ0FqOEIsRUFBQXE4QixNQUNBcjhCLEVBQUFxaEMsU0FDQXJoQyxFQUFBZ1MsVUFJQWhTLEVBQUFzaEMsVUFDQSxJQUFBbGlDLEtBQUFZLEVBQUFzaEMsVUFDQVYsRUFBQXhoQyxHQUFBWSxFQUFBc2hDLFVBQUFsaUMsR0FLQVksRUFBQXUrQixVQUFBcUMsRUFBQXRDLGtCQUNBc0MsRUFBQXRDLGlCQUFBdCtCLEVBQUF1K0IsVUFRQXYrQixFQUFBNCtCLGFBQUFJLEVBQUEsc0JBQ0FBLEVBQUEsb0JBQUEsa0JBSUEsSUFBQTUvQixLQUFBNC9CLEVBQ0E0QixFQUFBdkMsaUJBQUFqL0IsRUFBQTQvQixFQUFBNS9CLElBSUFILEVBQUEsU0FBQXFDLEdBQ0EsT0FBQSxXQUNBckMsSUFDQUEsRUFBQWtpQyxFQUFBUCxFQUFBVyxPQUNBWCxFQUFBWSxRQUFBWixFQUFBYSxRQUFBYixFQUFBYyxtQkFBQSxLQUVBLFVBQUFwZ0MsRUFDQXMvQixFQUFBbkMsUUFDQSxVQUFBbjlCLEVBS0EsaUJBQUFzL0IsRUFBQXBDLE9BQ0F6SyxFQUFBLEVBQUEsU0FFQUEsRUFHQTZNLEVBQUFwQyxPQUNBb0MsRUFBQWxDLFlBSUEzSyxFQUNBK00sR0FBQUYsRUFBQXBDLFNBQUFvQyxFQUFBcEMsT0FDQW9DLEVBQUFsQyxXQUtBLFVBQUFrQyxFQUFBZSxjQUFBLFNBQ0EsaUJBQUFmLEVBQUFnQixjQUNBQyxPQUFBakIsRUFBQXJCLFdBQ0FwaUMsS0FBQXlqQyxFQUFBZ0IsY0FDQWhCLEVBQUF4Qyw0QkFRQXdDLEVBQUFXLE9BQUF0aUMsSUFDQWtpQyxFQUFBUCxFQUFBWSxRQUFBdmlDLEVBQUEsY0FLQTJCLElBQUFnZ0MsRUFBQWEsUUFDQWIsRUFBQWEsUUFBQU4sRUFFQVAsRUFBQWMsbUJBQUEsV0FHQSxJQUFBZCxFQUFBaGtCLFlBTUFqaEIsRUFBQTZmLFdBQUEsV0FDQXZjLEdBQ0FraUMsT0FRQWxpQyxFQUFBQSxFQUFBLFNBRUEsSUFHQTJoQyxFQUFBekIsS0FBQW4vQixFQUFBOCtCLFlBQUE5K0IsRUFBQTBkLE1BQUEsTUFDQSxNQUFBdlYsR0FHQSxHQUFBbEosRUFDQSxNQUFBa0osSUFLQXMyQixNQUFBLFdBQ0F4L0IsR0FDQUEsUUFXQXpCLEVBQUF5L0IsY0FBQSxTQUFBaEQsR0FDQUEsRUFBQTJFLGNBQ0EzRSxFQUFBdmpCLFNBQUF6WixRQUFBLEtBS0FPLEVBQUF1L0IsV0FDQVIsU0FDQXQvQixPQUFBLDZGQUdBeVosVUFDQXpaLE9BQUEsMkJBRUF5L0IsWUFDQW9GLGNBQUEsU0FBQTNrQyxHQUVBLE9BREFLLEVBQUFzRSxXQUFBM0UsR0FDQUEsTUFNQUssRUFBQXkvQixjQUFBLFNBQUEsU0FBQWhELFFBQ0FyNUIsSUFBQXE1QixFQUFBbndCLFFBQ0Ftd0IsRUFBQW53QixPQUFBLEdBRUFtd0IsRUFBQTJFLGNBQ0EzRSxFQUFBMzRCLEtBQUEsU0FLQTlELEVBQUEwL0IsY0FBQSxTQUFBLFNBQUFqRCxHQUdBLEdBQUFBLEVBQUEyRSxZQUFBLENBQ0EsSUFBQTNoQyxFQUFBZ0MsRUFDQSxPQUNBa2dDLEtBQUEsU0FBQW40QixFQUFBK3NCLEdBQ0E5MkIsRUFBQU8sRUFBQSxZQUFBbWdCLE1BQ0Fva0IsUUFBQTlILEVBQUErSCxjQUNBOWhDLElBQUErNUIsRUFBQWdDLE1BQ0EzWSxHQUNBLGFBQ0Fya0IsRUFBQSxTQUFBZ2pDLEdBQ0FobEMsRUFBQXliLFNBQ0F6WixFQUFBLEtBQ0FnakMsR0FDQWxPLEVBQUEsVUFBQWtPLEVBQUEzZ0MsS0FBQSxJQUFBLElBQUEyZ0MsRUFBQTNnQyxRQU1BOUYsRUFBQTRCLEtBQUFDLFlBQUFKLEVBQUEsS0FFQXdoQyxNQUFBLFdBQ0F4L0IsR0FDQUEsU0FVQSxJQUFBaWpDLE1BQ0FDLEdBQUEsb0JBR0Eza0MsRUFBQXUvQixXQUNBcUYsTUFBQSxXQUNBQyxjQUFBLFdBQ0EsSUFBQXBqQyxFQUFBaWpDLEdBQUFqOUIsT0FBQXpILEVBQUFxRCxRQUFBLElBQUF3NEIsS0FFQSxPQURBejlCLEtBQUFxRCxJQUFBLEVBQ0FBLEtBS0F6QixFQUFBeS9CLGNBQUEsYUFBQSxTQUFBaEQsRUFBQXFJLEVBQUFqSCxHQUVBLElBQUFrSCxFQUFBQyxFQUFBQyxFQUNBQyxHQUFBLElBQUF6SSxFQUFBbUksUUFBQUQsR0FBQWg1QixLQUFBOHdCLEVBQUFnQyxLQUNBLE1BQ0EsaUJBQUFoQyxFQUFBdmMsTUFFQSxLQURBdWMsRUFBQXFDLGFBQUEsSUFDQWpnQyxRQUFBLHNDQUNBOGxDLEdBQUFoNUIsS0FBQTh3QixFQUFBdmMsT0FBQSxRQUlBLEdBQUFnbEIsR0FBQSxVQUFBekksRUFBQWtCLFVBQUEsR0E4REEsT0EzREFvSCxFQUFBdEksRUFBQW9JLGNBQUE3a0MsRUFBQWdELFdBQUF5NUIsRUFBQW9JLGVBQ0FwSSxFQUFBb0ksZ0JBQ0FwSSxFQUFBb0ksY0FHQUssRUFDQXpJLEVBQUF5SSxHQUFBekksRUFBQXlJLEdBQUExaEMsUUFBQW1oQyxHQUFBLEtBQUFJLElBQ0EsSUFBQXRJLEVBQUFtSSxRQUNBbkksRUFBQWdDLE1BQUEzQyxHQUFBbndCLEtBQUE4d0IsRUFBQWdDLEtBQUEsSUFBQSxLQUFBaEMsRUFBQW1JLE1BQUEsSUFBQUcsR0FJQXRJLEVBQUF5QyxXQUFBLGVBQUEsV0FJQSxPQUhBK0YsR0FDQWpsQyxFQUFBMEQsTUFBQXFoQyxFQUFBLG1CQUVBRSxFQUFBLElBSUF4SSxFQUFBa0IsVUFBQSxHQUFBLE9BR0FxSCxFQUFBN21DLEVBQUE0bUMsR0FDQTVtQyxFQUFBNG1DLEdBQUEsV0FDQUUsRUFBQW5qQyxXQUlBKzdCLEVBQUF2aEIsT0FBQSxnQkFHQWxaLElBQUE0aEMsRUFDQWhsQyxFQUFBN0IsR0FBQXU3QixXQUFBcUwsR0FJQTVtQyxFQUFBNG1DLEdBQUFDLEVBSUF2SSxFQUFBc0ksS0FHQXRJLEVBQUFvSSxjQUFBQyxFQUFBRCxjQUdBSCxHQUFBOWxDLEtBQUFtbUMsSUFJQUUsR0FBQWpsQyxFQUFBZ0QsV0FBQWdpQyxJQUNBQSxFQUFBQyxFQUFBLElBR0FBLEVBQUFELE9BQUE1aEMsSUFJQSxXQVlBL0QsRUFBQThsQyxtQkFBQSxXQUNBLElBQUFwaUIsRUFBQS9rQixFQUFBb25DLGVBQUFELG1CQUFBLElBQUFwaUIsS0FFQSxPQURBQSxFQUFBblUsVUFBQSw2QkFDQSxJQUFBbVUsRUFBQXRZLFdBQUExSixPQUhBLEdBV0FmLEVBQUE2WSxVQUFBLFNBQUFxSCxFQUFBaGdCLEVBQUFtbEMsR0FDQSxHQUFBLGlCQUFBbmxCLEVBQ0EsU0FFQSxrQkFBQWhnQixJQUNBbWxDLEVBQUFubEMsRUFDQUEsR0FBQSxHQUdBLElBQUFpVixFQUFBbXdCLEVBQUE1Z0IsRUF3QkEsT0F0QkF4a0IsSUFJQWIsRUFBQThsQyxxQkFNQWh3QixHQUxBalYsRUFBQWxDLEVBQUFvbkMsZUFBQUQsbUJBQUEsS0FLQXpsQyxjQUFBLFNBQ0E4VCxLQUFBeFYsRUFBQW1WLFNBQUFLLEtBQ0F0VCxFQUFBTixLQUFBQyxZQUFBc1YsSUFFQWpWLEVBQUFsQyxHQUlBc25DLEVBQUEvc0IsRUFBQWxOLEtBQUE2VSxHQUNBd0UsR0FBQTJnQixNQUdBQyxHQUNBcGxDLEVBQUFSLGNBQUE0bEMsRUFBQSxNQUdBQSxFQUFBN2dCLElBQUF2RSxHQUFBaGdCLEVBQUF3a0IsR0FFQUEsR0FBQUEsRUFBQTNqQixRQUNBZixFQUFBMGtCLEdBQUF4SixTQUdBbGIsRUFBQXNCLFNBQUFna0MsRUFBQTc2QixjQU9BekssRUFBQUcsR0FBQTBvQixLQUFBLFNBQUE0VixFQUFBOEcsRUFBQTlqQyxHQUNBLElBQUF4QixFQUFBNkQsRUFBQWkrQixFQUNBcHBCLEVBQUF2YSxLQUNBK25CLEVBQUFzWSxFQUFBNS9CLFFBQUEsS0FzREEsT0FwREFzbkIsR0FBQSxJQUNBbG1CLEVBQUErNUIsR0FBQXlFLEVBQUEvL0IsTUFBQXluQixJQUNBc1ksRUFBQUEsRUFBQS8vQixNQUFBLEVBQUF5bkIsSUFJQW5tQixFQUFBZ0QsV0FBQXVpQyxJQUdBOWpDLEVBQUE4akMsRUFDQUEsT0FBQW5pQyxHQUdBbWlDLEdBQUEsaUJBQUFBLElBQ0F6aEMsRUFBQSxRQUlBNlUsRUFBQTVYLE9BQUEsR0FDQWYsRUFBQTIvQixNQUNBbEIsSUFBQUEsRUFLQTM2QixLQUFBQSxHQUFBLE1BQ0E0NUIsU0FBQSxPQUNBeGQsS0FBQXFsQixJQUNBdCtCLEtBQUEsU0FBQW05QixHQUdBckMsRUFBQWpnQyxVQUVBNlcsRUFBQXFVLEtBQUEvc0IsRUFJQUQsRUFBQSxTQUFBMHRCLE9BQUExdEIsRUFBQTZZLFVBQUF1ckIsSUFBQTMxQixLQUFBeE8sR0FHQW1rQyxLQUtBOW5CLE9BQUE3YSxHQUFBLFNBQUFvOEIsRUFBQW1ELEdBQ0Fyb0IsRUFBQW5YLEtBQUEsV0FDQUMsRUFBQUksTUFBQXpELEtBQUEyakMsSUFBQWxFLEVBQUF1RyxhQUFBcEQsRUFBQW5ELFFBS0F6L0IsTUFPQTRCLEVBQUF3QixNQUNBLFlBQ0EsV0FDQSxlQUNBLFlBQ0EsY0FDQSxZQUNBLFNBQUFJLEVBQUFrQyxHQUNBOUQsRUFBQUcsR0FBQTJELEdBQUEsU0FBQTNELEdBQ0EsT0FBQS9CLEtBQUEwbkIsR0FBQWhpQixFQUFBM0QsTUFPQUgsRUFBQTZQLEtBQUE3SCxRQUFBdzlCLFNBQUEsU0FBQTdqQyxHQUNBLE9BQUEzQixFQUFBK0UsS0FBQS9FLEVBQUFnNEIsT0FBQSxTQUFBNzNCLEdBQ0EsT0FBQXdCLElBQUF4QixFQUFBd0IsT0FDQVosUUFNQWYsRUFBQXlsQyxRQUNBQyxVQUFBLFNBQUEvakMsRUFBQWEsRUFBQVosR0FDQSxJQUFBK2pDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQ0F4VixFQUFBeHdCLEVBQUEraEIsSUFBQXBnQixFQUFBLFlBQ0Fza0MsRUFBQWptQyxFQUFBMkIsR0FDQXluQixLQUdBLFdBQUFvSCxJQUNBN3VCLEVBQUFrZ0IsTUFBQTJPLFNBQUEsWUFHQXVWLEVBQUFFLEVBQUFSLFNBQ0FJLEVBQUE3bEMsRUFBQStoQixJQUFBcGdCLEVBQUEsT0FDQXFrQyxFQUFBaG1DLEVBQUEraEIsSUFBQXBnQixFQUFBLFNBQ0EsYUFBQTZ1QixHQUFBLFVBQUFBLEtBQ0FxVixFQUFBRyxHQUFBbm5DLFFBQUEsU0FBQSxHQU1BaW5DLEdBREFILEVBQUFNLEVBQUF6VixZQUNBeGlCLElBQ0E0M0IsRUFBQUQsRUFBQTNTLE9BR0E4UyxFQUFBNWhDLFdBQUEyaEMsSUFBQSxFQUNBRCxFQUFBMWhDLFdBQUE4aEMsSUFBQSxHQUdBaG1DLEVBQUFnRCxXQUFBUixLQUdBQSxFQUFBQSxFQUFBcEQsS0FBQXVDLEVBQUFDLEVBQUE1QixFQUFBdUMsVUFBQXdqQyxLQUdBLE1BQUF2akMsRUFBQXdMLE1BQ0FvYixFQUFBcGIsSUFBQXhMLEVBQUF3TCxJQUFBKzNCLEVBQUEvM0IsSUFBQTgzQixHQUVBLE1BQUF0akMsRUFBQXd3QixPQUNBNUosRUFBQTRKLEtBQUF4d0IsRUFBQXd3QixLQUFBK1MsRUFBQS9TLEtBQUE0UyxHQUdBLFVBQUFwakMsRUFDQUEsRUFBQTBqQyxNQUFBOW1DLEtBQUF1QyxFQUFBeW5CLEdBR0E2YyxFQUFBbGtCLElBQUFxSCxLQUtBcHBCLEVBQUFHLEdBQUFvQyxRQUNBa2pDLE9BQUEsU0FBQWpqQyxHQUdBLEdBQUFWLFVBQUFmLE9BQ0EsWUFBQXFDLElBQUFaLEVBQ0FwRSxLQUNBQSxLQUFBb0QsS0FBQSxTQUFBSSxHQUNBNUIsRUFBQXlsQyxPQUFBQyxVQUFBdG5DLEtBQUFvRSxFQUFBWixLQUlBLElBQUFwQyxFQUFBa0gsRUFBQXkvQixFQUFBQyxFQUNBemtDLEVBQUF2RCxLQUFBLEdBRUEsR0FBQXVELEVBUUEsT0FBQUEsRUFBQW14QixpQkFBQS94QixRQUlBb2xDLEVBQUF4a0MsRUFBQW94Qix3QkFHQXJzQixHQURBbEgsRUFBQW1DLEVBQUF5SixlQUNBdUMsZ0JBQ0F5NEIsRUFBQTVtQyxFQUFBdU8sYUFHQUMsSUFBQW00QixFQUFBbjRCLElBQUFvNEIsRUFBQUMsWUFBQTMvQixFQUFBNC9CLFVBQ0F0VCxLQUFBbVQsRUFBQW5ULEtBQUFvVCxFQUFBRyxZQUFBNy9CLEVBQUE4L0IsY0FYQXg0QixJQUFBLEVBQUFnbEIsS0FBQSxJQWVBeEMsU0FBQSxXQUNBLEdBQUFweUIsS0FBQSxHQUFBLENBSUEsSUFBQXFvQyxFQUFBaEIsRUFDQTlqQyxFQUFBdkQsS0FBQSxHQUNBc29DLEdBQUExNEIsSUFBQSxFQUFBZ2xCLEtBQUEsR0E0QkEsTUF4QkEsVUFBQWh6QixFQUFBK2hCLElBQUFwZ0IsRUFBQSxZQUdBOGpDLEVBQUE5akMsRUFBQW94Qix5QkFLQTBULEVBQUFyb0MsS0FBQXFvQyxlQUdBaEIsRUFBQXJuQyxLQUFBcW5DLFNBQ0E3NUIsRUFBQTY2QixFQUFBLEdBQUEsVUFDQUMsRUFBQUQsRUFBQWhCLFVBSUFpQixHQUNBMTRCLElBQUEwNEIsRUFBQTE0QixJQUFBaE8sRUFBQStoQixJQUFBMGtCLEVBQUEsR0FBQSxrQkFBQSxHQUNBelQsS0FBQTBULEVBQUExVCxLQUFBaHpCLEVBQUEraEIsSUFBQTBrQixFQUFBLEdBQUEsbUJBQUEsTUFNQXo0QixJQUFBeTNCLEVBQUF6M0IsSUFBQTA0QixFQUFBMTRCLElBQUFoTyxFQUFBK2hCLElBQUFwZ0IsRUFBQSxhQUFBLEdBQ0FxeEIsS0FBQXlTLEVBQUF6UyxLQUFBMFQsRUFBQTFULEtBQUFoekIsRUFBQStoQixJQUFBcGdCLEVBQUEsY0FBQSxNQWNBOGtDLGFBQUEsV0FDQSxPQUFBcm9DLEtBQUFzRCxJQUFBLFdBR0EsSUFGQSxJQUFBK2tDLEVBQUFyb0MsS0FBQXFvQyxhQUVBQSxHQUFBLFdBQUF6bUMsRUFBQStoQixJQUFBMGtCLEVBQUEsYUFDQUEsRUFBQUEsRUFBQUEsYUFHQSxPQUFBQSxHQUFBOTRCLFFBTUEzTixFQUFBd0IsTUFBQTR5QixXQUFBLGNBQUFELFVBQUEsZUFBQSxTQUFBclksRUFBQXFFLEdBQ0EsSUFBQW5TLEVBQUEsZ0JBQUFtUyxFQUVBbmdCLEVBQUFHLEdBQUEyYixHQUFBLFNBQUE5TCxHQUNBLE9BQUFzUCxFQUFBbGhCLEtBQUEsU0FBQXVELEVBQUFtYSxFQUFBOUwsR0FHQSxJQUFBbzJCLEVBT0EsR0FOQXBtQyxFQUFBK0QsU0FBQXBDLEdBQ0F5a0MsRUFBQXprQyxFQUNBLElBQUFBLEVBQUErSSxXQUNBMDdCLEVBQUF6a0MsRUFBQW9NLGtCQUdBM0ssSUFBQTRNLEVBQ0EsT0FBQW8yQixFQUFBQSxFQUFBam1CLEdBQUF4ZSxFQUFBbWEsR0FHQXNxQixFQUNBQSxFQUFBTyxTQUNBMzRCLEVBQUFvNEIsRUFBQUcsWUFBQXYyQixFQUNBaEMsRUFBQWdDLEVBQUFvMkIsRUFBQUMsYUFJQTFrQyxFQUFBbWEsR0FBQTlMLEdBRUE4TCxFQUFBOUwsRUFBQWxPLFVBQUFmLFdBVUFmLEVBQUF3QixNQUFBLE1BQUEsUUFBQSxTQUFBSSxFQUFBdWUsR0FDQW5nQixFQUFBNHhCLFNBQUF6UixHQUFBK1AsR0FBQTd3QixFQUFBb3dCLGNBQ0EsU0FBQTl0QixFQUFBbXVCLEdBQ0EsR0FBQUEsRUFJQSxPQUhBQSxFQUFBRCxHQUFBbHVCLEVBQUF3ZSxHQUdBcU8sR0FBQTdpQixLQUFBbWtCLEdBQ0E5dkIsRUFBQTJCLEdBQUE2dUIsV0FBQXJRLEdBQUEsS0FDQTJQLE1BUUE5dkIsRUFBQXdCLE1BQUFvbEMsT0FBQSxTQUFBQyxNQUFBLFNBQUEsU0FBQXBrQyxFQUFBcUIsR0FDQTlELEVBQUF3QixNQUFBMHhCLFFBQUEsUUFBQXp3QixFQUFBeVgsUUFBQXBXLEVBQUFnakMsR0FBQSxRQUFBcmtDLEdBQ0EsU0FBQXNrQyxFQUFBQyxHQUdBaG5DLEVBQUFHLEdBQUE2bUMsR0FBQSxTQUFBL1QsRUFBQTd0QixHQUNBLElBQUFtYSxFQUFBemQsVUFBQWYsU0FBQWdtQyxHQUFBLGtCQUFBOVQsR0FDQTFCLEVBQUF3VixLQUFBLElBQUE5VCxJQUFBLElBQUE3dEIsRUFBQSxTQUFBLFVBRUEsT0FBQWthLEVBQUFsaEIsS0FBQSxTQUFBdUQsRUFBQW1DLEVBQUFzQixHQUNBLElBQUE1RixFQUVBLE9BQUFRLEVBQUErRCxTQUFBcEMsR0FHQSxJQUFBcWxDLEVBQUFub0MsUUFBQSxTQUNBOEMsRUFBQSxRQUFBYyxHQUNBZCxFQUFBM0QsU0FBQTJQLGdCQUFBLFNBQUFsTCxHQUlBLElBQUFkLEVBQUErSSxVQUNBbEwsRUFBQW1DLEVBQUFnTSxnQkFJQXJLLEtBQUErdEIsSUFDQTF2QixFQUFBb2hCLEtBQUEsU0FBQXRnQixHQUFBakQsRUFBQSxTQUFBaUQsR0FDQWQsRUFBQW9oQixLQUFBLFNBQUF0Z0IsR0FBQWpELEVBQUEsU0FBQWlELEdBQ0FqRCxFQUFBLFNBQUFpRCxVQUlBVyxJQUFBZ0MsRUFHQXBGLEVBQUEraEIsSUFBQXBnQixFQUFBbUMsRUFBQXl0QixHQUdBdnhCLEVBQUE2aEIsTUFBQWxnQixFQUFBbUMsRUFBQXNCLEVBQUFtc0IsSUFDQXp0QixFQUFBeWIsRUFBQTBULE9BQUE3dkIsRUFBQW1jLFFBTUF2ZixFQUFBRyxHQUFBb0MsUUFFQTBrQyxLQUFBLFNBQUFsaEIsRUFBQTdGLEVBQUEvZixHQUNBLE9BQUEvQixLQUFBMG5CLEdBQUFDLEVBQUEsS0FBQTdGLEVBQUEvZixJQUVBK21DLE9BQUEsU0FBQW5oQixFQUFBNWxCLEdBQ0EsT0FBQS9CLEtBQUErbkIsSUFBQUosRUFBQSxLQUFBNWxCLElBR0FnbkMsU0FBQSxTQUFBbG5DLEVBQUE4bEIsRUFBQTdGLEVBQUEvZixHQUNBLE9BQUEvQixLQUFBMG5CLEdBQUFDLEVBQUE5bEIsRUFBQWlnQixFQUFBL2YsSUFFQWluQyxXQUFBLFNBQUFubkMsRUFBQThsQixFQUFBNWxCLEdBR0EsT0FBQSxJQUFBMkIsVUFBQWYsT0FDQTNDLEtBQUErbkIsSUFBQWxtQixFQUFBLE1BQ0E3QixLQUFBK25CLElBQUFKLEVBQUE5bEIsR0FBQSxLQUFBRSxNQUlBSCxFQUFBcW5DLFVBQUEsU0FBQUMsR0FDQUEsRUFDQXRuQyxFQUFBZ2YsWUFFQWhmLEVBQUE4WSxPQUFBLElBR0E5WSxFQUFBbUQsUUFBQUQsTUFBQUMsUUFDQW5ELEVBQUF1bkMsVUFBQTdtQixLQUFBQyxNQUNBM2dCLEVBQUE0TCxTQUFBQSxFQWtCQSxtQkFBQTQ3QixRQUFBQSxPQUFBQyxLQUNBRCxPQUFBLFlBQUEsV0FDQSxPQUFBeG5DLElBT0EsSUFHQTBuQyxHQUFBdnBDLEVBQUE2QixPQUdBMm5DLEdBQUF4cEMsRUFBQXlwQyxFQXdCQSxPQXRCQTVuQyxFQUFBNm5DLFdBQUEsU0FBQTlrQyxHQVNBLE9BUkE1RSxFQUFBeXBDLElBQUE1bkMsSUFDQTdCLEVBQUF5cEMsRUFBQUQsSUFHQTVrQyxHQUFBNUUsRUFBQTZCLFNBQUFBLElBQ0E3QixFQUFBNkIsT0FBQTBuQyxJQUdBMW5DLEdBTUEzQixJQUNBRixFQUFBNkIsT0FBQTdCLEVBQUF5cEMsRUFBQTVuQyxHQU1BQSxJQ3BnVUEsU0FBQTRuQyxHQUVBLElBQUFFLEdBR0FDLEtBQUEsYUFDQUMsY0FBQSxHQUNBQyxjQUFBLEVBQ0FDLGtCQUFBLEVBQ0E1USxNQUFBLElBQ0E1RCxPQUFBLEtBQ0F5VSxZQUFBLEVBQ0FDLFdBQUEsRUFDQUMsYUFBQSxFQUNBQyxVQUFBLEVBQ0FDLFFBQUEsRUFDQUMsYUFBQSxFQUNBQyxnQkFBQSxFQUNBQyxvQkFBQSxJQUNBQyxPQUFBLEVBQ0FDLFFBQUEsRUFDQUMsY0FBQSxVQUNBQyxZQUFBLEVBQ0FDLFlBQUEsR0FDQUMsYUFBQSxhQUdBQyxjQUFBLEVBQ0FDLGVBQUEsR0FDQUMsZUFBQSxFQUNBQyxzQkFBQSxFQUNBQyxzQkFBQSxFQUdBQyxVQUFBLEVBQ0FDLFlBQUEsRUFHQUMsaUJBQUEsRUFHQUMsT0FBQSxFQUNBQyxVQUFBLE9BQ0FDLG9CQUFBLE1BQ0FDLGNBQUEsS0FDQUMsV0FBQSxLQUNBQyxZQUFBLEtBR0FDLFVBQUEsRUFDQUMsU0FBQSxPQUNBQyxTQUFBLE9BQ0FDLGFBQUEsS0FDQUMsYUFBQSxLQUNBQyxjQUFBLEVBQ0FDLFVBQUEsUUFDQUMsU0FBQSxPQUNBQyxxQkFBQSxFQUNBQyxxQkFBQSxLQUdBQyxNQUFBLEVBQ0FDLE1BQUEsSUFDQUMsV0FBQSxFQUNBQyxjQUFBLE9BQ0FDLGlCQUFBLEVBQ0FDLFdBQUEsRUFDQUMsVUFBQSxFQUNBQyxxQkFBQSxFQUdBQyxVQUFBLEVBQ0FDLFVBQUEsRUFDQUMsV0FBQSxFQUNBQyxXQUFBLEVBQ0FDLGFBQUEsRUFHQUMsYUFBQSxXQUFBLE9BQUEsR0FDQUMsY0FBQSxXQUFBLE9BQUEsR0FDQUMsYUFBQSxXQUFBLE9BQUEsR0FDQUMsWUFBQSxXQUFBLE9BQUEsR0FDQUMsWUFBQSxXQUFBLE9BQUEsR0FDQUMsZUFBQSxXQUFBLE9BQUEsR0FDQUMsYUFBQSxXQUFBLE9BQUEsSUFHQWhFLEVBQUF6bkMsR0FBQTByQyxTQUFBLFNBQUFycEMsR0FFQSxHQUFBLElBQUFwRSxLQUFBMkMsT0FDQSxPQUFBM0MsS0FJQSxHQUFBQSxLQUFBMkMsT0FBQSxFQUlBLE9BSEEzQyxLQUFBb0QsS0FBQSxXQUNBb21DLEVBQUF4cEMsTUFBQXl0QyxTQUFBcnBDLEtBRUFwRSxLQUlBLElBQUEwdEMsS0FFQWwvQixFQUFBeE8sS0FFQTJ0QyxFQUFBbkUsRUFBQXpwQyxRQUFBaXhCLFFBQ0E0YyxFQUFBcEUsRUFBQXpwQyxRQUFBbTNCLFNBR0EsSUFBQXNTLEVBQUFoN0IsR0FBQXNULEtBQUEsWUFBQSxDQVdBLElBQUE5ZixFQUFBLFdBRUF3bkMsRUFBQWg3QixHQUFBc1QsS0FBQSxjQUVBNHJCLEVBQUF0TSxTQUFBb0ksRUFBQXJsQyxVQUFBdWxDLEVBQUF0bEMsR0FFQXNwQyxFQUFBdE0sU0FBQTRMLFdBQUF2UixTQUFBaVMsRUFBQXRNLFNBQUE0TCxZQUVBVSxFQUFBN3lCLFNBQUFyTSxFQUFBcU0sU0FBQTZ5QixFQUFBdE0sU0FBQXdJLGVBRUE4RCxFQUFBN3lCLFNBQUFsWSxPQUFBK3FDLEVBQUF0TSxTQUFBeUwsWUFBQWEsRUFBQXRNLFNBQUF5TCxVQUFBYSxFQUFBN3lCLFNBQUFsWSxRQUNBK3FDLEVBQUE3eUIsU0FBQWxZLE9BQUErcUMsRUFBQXRNLFNBQUEwTCxZQUFBWSxFQUFBdE0sU0FBQTBMLFVBQUFZLEVBQUE3eUIsU0FBQWxZLFFBRUErcUMsRUFBQXRNLFNBQUE2SSxjQUFBeUQsRUFBQXRNLFNBQUE0SSxXQUFBOWtDLEtBQUEyb0MsTUFBQTNvQyxLQUFBQyxTQUFBdW9DLEVBQUE3eUIsU0FBQWxZLFNBRUErcUMsRUFBQXhOLFFBQUEva0IsTUFBQXV5QixFQUFBdE0sU0FBQTRJLFlBRUEwRCxFQUFBSSxTQUFBSixFQUFBdE0sU0FBQXlMLFVBQUEsR0FBQWEsRUFBQXRNLFNBQUEwTCxVQUFBLEVBRUFZLEVBQUFJLFdBQUFKLEVBQUF0TSxTQUFBcUosY0FBQSxPQUdBaUQsRUFBQUssYUFBQUwsRUFBQXRNLFNBQUF5TCxVQUFBYSxFQUFBdE0sU0FBQTRMLFlBQUFVLEVBQUF0TSxTQUFBeUwsVUFBQSxHQUFBYSxFQUFBdE0sU0FBQTJJLFlBQ0EyRCxFQUFBTSxhQUFBTixFQUFBdE0sU0FBQTBMLFVBQUFZLEVBQUF0TSxTQUFBNEwsWUFBQVUsRUFBQXRNLFNBQUEwTCxVQUFBLEdBQUFZLEVBQUF0TSxTQUFBMkksWUFFQTJELEVBQUFPLFNBQUEsRUFFQVAsRUFBQS9CLFlBRUErQixFQUFBN1csU0FBQSxLQUVBNlcsRUFBQVEsU0FBQSxhQUFBUixFQUFBdE0sU0FBQXVJLEtBQUEsTUFBQSxPQUVBK0QsRUFBQVMsU0FBQVQsRUFBQXRNLFNBQUFvSixRQUFBLFNBQUFrRCxFQUFBdE0sU0FBQXVJLE1BQUEsV0FNQSxJQUFBLElBSkE1aUIsRUFBQW5uQixTQUFBMEIsY0FBQSxPQUVBMHBCLEdBQUEsb0JBQUEsaUJBQUEsZUFBQSxpQkFFQXhuQixFQUFBLEVBQUFBLEVBQUF3bkIsRUFBQXJvQixPQUFBYSxJQUNBLFFBQUF3QixJQUFBK2hCLEVBQUF0RCxNQUFBdUgsRUFBQXhuQixJQUdBLE9BRkFrcUMsRUFBQVUsVUFBQXBqQixFQUFBeG5CLEdBQUE0QixRQUFBLGNBQUEsSUFBQXNDLGNBQ0FnbUMsRUFBQVEsU0FBQSxJQUFBUixFQUFBVSxVQUFBLGNBQ0EsRUFHQSxPQUFBLEVBYkEsR0FnQkEsYUFBQVYsRUFBQXRNLFNBQUF1SSxPQUFBK0QsRUFBQXRNLFNBQUEwTCxVQUFBWSxFQUFBdE0sU0FBQXlMLFdBRUFyK0IsRUFBQXNULEtBQUEsWUFBQXRULEVBQUFtRCxLQUFBLFVBQ0FuRCxFQUFBcU0sU0FBQTZ5QixFQUFBdE0sU0FBQXdJLGVBQUF4bUMsS0FBQSxXQUNBb21DLEVBQUF4cEMsTUFBQThoQixLQUFBLFlBQUEwbkIsRUFBQXhwQyxNQUFBMlIsS0FBQSxZQUlBcVgsTUFNQUEsRUFBQSxXQUNBLElBQUFxbEIsRUFBQVgsRUFBQTd5QixTQUFBalgsR0FBQThwQyxFQUFBdE0sU0FBQTRJLFlBR0F4N0IsRUFBQWlZLEtBQUEsZUFBQWluQixFQUFBdE0sU0FBQXdKLGFBQUEsMkNBRUE4QyxFQUFBWSxTQUFBOS9CLEVBQUF1RixTQUdBMjVCLEVBQUF0TSxTQUFBOEosV0FBQXdDLEVBQUF0TSxTQUFBK0ksUUFDQXVELEVBQUFZLFNBQUEzOEIsS0FBQSxZQUFBLFVBR0ErN0IsRUFBQWEsT0FBQS9FLEVBQUEsOEJBQ0FrRSxFQUFBWSxTQUFBL2UsUUFBQW1lLEVBQUFhLFFBR0EvL0IsRUFBQW1WLEtBQ0FxTixNQUFBLGVBQUEwYyxFQUFBdE0sU0FBQXVJLEtBQUEsSUFBQStELEVBQUE3eUIsU0FBQWxZLE9BQUEsSUFBQSxJQUFBLE9BQ0F5dkIsU0FBQSxhQUdBc2IsRUFBQVMsVUFBQVQsRUFBQXRNLFNBQUE5TCxPQUNBOW1CLEVBQUFtVixJQUFBLElBQUErcEIsRUFBQVUsVUFBQSw4QkFBQVYsRUFBQXRNLFNBQUE5TCxRQUVBb1ksRUFBQXRNLFNBQUE5TCxTQUNBb1ksRUFBQXRNLFNBQUE5TCxPQUFBLFNBR0FvWSxFQUFBWSxTQUFBM3FCLEtBQ0FxTixNQUFBLE9BQ0E4SCxTQUFBLFNBQ0ExRyxTQUFBLGFBRUFzYixFQUFBWSxTQUFBdjZCLFNBQUE0UCxLQUNBaU8sU0FBQTRjLE1BR0FkLEVBQUE3eUIsU0FBQThJLEtBRUEwUSxNQUFBLGVBQUFxWixFQUFBdE0sU0FBQXVJLEtBQUEsT0FBQSxPQUNBOEUsVUFBQSxPQUNBcmMsU0FBQSxhQUdBc2IsRUFBQTd5QixTQUFBOEksSUFBQSxRQUFBK3FCLEtBRUEsZUFBQWhCLEVBQUF0TSxTQUFBdUksTUFBQStELEVBQUF0TSxTQUFBMkksWUFBQSxHQUFBMkQsRUFBQTd5QixTQUFBOEksSUFBQSxjQUFBK3BCLEVBQUF0TSxTQUFBMkksYUFDQSxhQUFBMkQsRUFBQXRNLFNBQUF1SSxNQUFBK0QsRUFBQXRNLFNBQUEySSxZQUFBLEdBQUEyRCxFQUFBN3lCLFNBQUE4SSxJQUFBLGVBQUErcEIsRUFBQXRNLFNBQUEySSxhQUVBLFNBQUEyRCxFQUFBdE0sU0FBQXVJLE9BQ0ErRCxFQUFBN3lCLFNBQUE4SSxLQUNBeU8sU0FBQSxXQUNBK0IsT0FBQSxFQUNBelEsUUFBQSxTQUdBZ3FCLEVBQUE3eUIsU0FBQWpYLEdBQUE4cEMsRUFBQXRNLFNBQUE0SSxZQUFBcm1CLEtBQUF3USxPQUFBdVosRUFBQXRNLFNBQUF1SixZQUFBam5CLFFBQUEsV0FHQWdxQixFQUFBL0IsU0FBQW45QixHQUFBZzdCLEVBQUEsK0JBRUFrRSxFQUFBdE0sU0FBQThJLFVBQUF5RSxJQUVBakIsRUFBQXhOLE9BQUFyOEIsS0FBQTZwQyxFQUFBdE0sU0FBQTRJLGFBQUE0RSxJQUFBLEVBRUFsQixFQUFBdE0sU0FBQW1KLE9BQUEvN0IsRUFBQXFnQyxXQUNBLFFBQUFuQixFQUFBdE0sU0FBQXFKLGVBQUFpRCxFQUFBdE0sU0FBQStJLFVBQUFrRSxFQUFBWCxFQUFBN3lCLFVBRUE2eUIsRUFBQXRNLFNBQUErSSxPQVdBdUQsRUFBQXRNLFNBQUFpSyxPQUFBLEdBVEFxQyxFQUFBdE0sU0FBQXVLLFVBQUFtRCxJQUVBcEIsRUFBQXRNLFNBQUFpTCxNQUFBcUIsRUFBQXRNLFNBQUE0SyxjQUFBK0MsSUFFQXJCLEVBQUF0TSxTQUFBaUssT0FBQTJELEtBRUF0QixFQUFBdE0sU0FBQXVLLFVBQUErQixFQUFBdE0sU0FBQTRLLGNBQUEwQixFQUFBdE0sU0FBQWlLLFFBQUFxQyxFQUFBWSxTQUFBNWUsTUFBQWdlLEVBQUEvQixTQUFBbjlCLEtBS0F5Z0MsRUFBQVosRUFBQXY2QixJQUdBbTdCLEVBQUEsU0FBQXB0QyxFQUFBd0IsR0FDQSxJQUFBNnJDLEVBQUFydEMsRUFBQXdPLEtBQUEsNkJBQUExTixPQUNBdWdCLEVBQUEsRUFDQSxJQUFBZ3NCLEVBSUFydEMsRUFBQXdPLEtBQUEsNkJBQUFqTixLQUFBLFdBQ0FvbUMsRUFBQXhwQyxNQUFBNG5CLElBQUEsYUFBQSxhQUNBMUUsSUFBQWdzQixHQUFBN3JDLE1BQ0FELEtBQUEsWUFDQXBELEtBQUFtNEIsVUFBQSxJQUFBbjRCLEtBQUFzRSxNQUFBa2xDLEVBQUF4cEMsTUFBQTJxQixRQUFBLFlBUEF0bkIsS0FlQXlRLEVBQUEsV0FFQSxHQUFBNDVCLEVBQUF0TSxTQUFBeUksY0FBQSxTQUFBNkQsRUFBQXRNLFNBQUF1SSxPQUFBK0QsRUFBQXRNLFNBQUErSSxPQUFBLENBQ0EsSUFBQTdwQyxFQUFBLGFBQUFvdEMsRUFBQXRNLFNBQUF1SSxLQUFBK0QsRUFBQXRNLFNBQUF5TCxVQUFBYSxFQUFBdE0sU0FBQTBMLFVBQ0FxQyxFQUFBekIsRUFBQTd5QixTQUFBdmEsTUFBQSxFQUFBQSxHQUFBbUUsT0FBQSxHQUFBcTNCLFNBQUEsWUFDQXNULEVBQUExQixFQUFBN3lCLFNBQUF2YSxPQUFBQSxHQUFBbUUsT0FBQSxHQUFBcTNCLFNBQUEsWUFDQTRSLEVBQUF0TSxTQUFBK0osYUFDQWdFLEVBQUF4OUIsS0FBQSxlQUFBLEdBQ0F5OUIsRUFBQXo5QixLQUFBLGVBQUEsSUFFQW5ELEVBQUE4Z0IsT0FBQTZmLEdBQUE1ZixRQUFBNmYsR0FHQTFCLEVBQUFhLE9BQUF6eEIsU0FFQXV5QixJQUVBLGFBQUEzQixFQUFBdE0sU0FBQXVJLE9BQUErRCxFQUFBdE0sU0FBQWlKLGdCQUFBLEdBRUFxRCxFQUFBWSxTQUFBcFgsT0FBQW9ZLEtBRUE5Z0MsRUFBQStnQyxlQUVBN0IsRUFBQXRNLFNBQUE4TCxhQUFBbHNDLEtBQUF3TixFQUFBay9CLEVBQUF4TixPQUFBL2tCLE9BRUF1eUIsRUFBQThCLGFBQUEsRUFFQTlCLEVBQUF0TSxTQUFBc0osWUFBQWxCLEVBQUF6cEMsUUFBQThvQyxLQUFBLFNBQUE0RyxHQUVBL0IsRUFBQXRNLFNBQUFpTCxNQUFBcUIsRUFBQXRNLFNBQUFtTCxZQUFBcUMsSUFBQSxHQUFBbEIsRUFBQXRNLFNBQUF3TCxzQkFBQThDLElBRUFoQyxFQUFBdE0sU0FBQStJLFFBQUF3RixJQUVBakMsRUFBQXRNLFNBQUFpSyxPQUFBdUUsRUFBQWxDLEVBQUF0TSxTQUFBNEksWUFFQTBELEVBQUF0TSxTQUFBdUssVUFBQWtFLElBRUFuQyxFQUFBdE0sU0FBQXlKLGVBQUE2QyxFQUFBdE0sU0FBQStJLFFBQUEyRixJQUVBcEMsRUFBQXRNLFNBQUFnSyxrQkFBQXNDLEVBQUF0TSxTQUFBK0ksUUFDQVgsRUFBQTVwQyxVQUFBbXdDLFFBQUFDLElBT0FWLEVBQUEsV0FDQSxJQUFBcFksRUFBQSxFQUVBcmMsRUFBQTJ1QixJQUVBLEdBQUEsYUFBQWtFLEVBQUF0TSxTQUFBdUksTUFBQStELEVBQUF0TSxTQUFBaUosZUFJQSxHQUFBcUQsRUFBQUksU0FHQSxDQUVBLElBQUFtQyxFQUFBLElBQUF2QyxFQUFBdE0sU0FBQTJMLFdBQUFXLEVBQUF4TixPQUFBL2tCLE1BQUF1eUIsRUFBQXhOLE9BQUEva0IsTUFBQSswQixJQUlBLElBRkFyMUIsRUFBQTZ5QixFQUFBN3lCLFNBQUFqWCxHQUFBcXNDLEdBRUF6c0MsRUFBQSxFQUFBQSxHQUFBa3FDLEVBQUF0TSxTQUFBMEwsVUFBQSxFQUFBdHBDLElBR0FxWCxFQURBbzFCLEVBQUF6c0MsR0FBQWtxQyxFQUFBN3lCLFNBQUFsWSxPQUNBa1ksRUFBQVEsSUFBQXF5QixFQUFBN3lCLFNBQUFqWCxHQUFBSixFQUFBLElBRUFxWCxFQUFBUSxJQUFBcXlCLEVBQUE3eUIsU0FBQWpYLEdBQUFxc0MsRUFBQXpzQyxTQWJBcVgsRUFBQTZ5QixFQUFBN3lCLFNBQUFqWCxHQUFBOHBDLEVBQUF4TixPQUFBL2tCLFlBSkFOLEVBQUE2eUIsRUFBQTd5QixTQTZDQSxNQXRCQSxhQUFBNnlCLEVBQUF0TSxTQUFBdUksTUFDQTl1QixFQUFBelgsS0FBQSxTQUFBK1gsR0FDQStiLEdBQUFzUyxFQUFBeHBDLE1BQUFtd0MsZ0JBR0F6QyxFQUFBdE0sU0FBQTJJLFlBQUEsSUFDQTdTLEdBQUF3VyxFQUFBdE0sU0FBQTJJLGFBQUEyRCxFQUFBdE0sU0FBQXlMLFVBQUEsS0FJQTNWLEVBQUFoeUIsS0FBQSt0QixJQUFBeHZCLE1BQUF5QixLQUFBMlYsRUFBQXZYLElBQUEsV0FDQSxPQUFBa21DLEVBQUF4cEMsTUFBQW13QyxhQUFBLEtBQ0F0dEMsT0FHQSxlQUFBNnFDLEVBQUFZLFNBQUEzcUIsSUFBQSxjQUNBdVQsR0FBQXB4QixXQUFBNG5DLEVBQUFZLFNBQUEzcUIsSUFBQSxnQkFBQTdkLFdBQUE0bkMsRUFBQVksU0FBQTNxQixJQUFBLG1CQUNBN2QsV0FBQTRuQyxFQUFBWSxTQUFBM3FCLElBQUEscUJBQUE3ZCxXQUFBNG5DLEVBQUFZLFNBQUEzcUIsSUFBQSx3QkFDQSxnQkFBQStwQixFQUFBWSxTQUFBM3FCLElBQUEsZ0JBQ0F1VCxHQUFBcHhCLFdBQUE0bkMsRUFBQVksU0FBQTNxQixJQUFBLGdCQUFBN2QsV0FBQTRuQyxFQUFBWSxTQUFBM3FCLElBQUEsb0JBR0F1VCxHQU1Bc1gsRUFBQSxXQUNBLElBQUF4ZCxFQUFBLE9BUUEsT0FQQTBjLEVBQUF0TSxTQUFBNEwsV0FBQSxJQUVBaGMsRUFEQSxlQUFBMGMsRUFBQXRNLFNBQUF1SSxLQUNBK0QsRUFBQXRNLFNBQUEwTCxVQUFBWSxFQUFBdE0sU0FBQTRMLFlBQUFVLEVBQUF0TSxTQUFBMEwsVUFBQSxHQUFBWSxFQUFBdE0sU0FBQTJJLFlBRUEyRCxFQUFBdE0sU0FBQTRMLFlBR0FoYyxHQU1BMGQsRUFBQSxXQUNBLElBQUEwQixFQUFBMUMsRUFBQXRNLFNBQUE0TCxXQUNBcUQsRUFBQTNDLEVBQUFZLFNBQUF0ZCxRQUVBLEdBQUEsSUFBQTBjLEVBQUF0TSxTQUFBNEwsWUFDQVUsRUFBQXRNLFNBQUE0TCxXQUFBcUQsSUFBQTNDLEVBQUFJLFVBQ0EsYUFBQUosRUFBQXRNLFNBQUF1SSxLQUNBeUcsRUFBQUMsT0FFQSxHQUFBM0MsRUFBQXRNLFNBQUEwTCxVQUFBLEdBQUEsZUFBQVksRUFBQXRNLFNBQUF1SSxLQUFBLENBQ0EsR0FBQTBHLEVBQUEzQyxFQUFBTSxhQUNBLE9BQUFvQyxFQUNBQyxFQUFBM0MsRUFBQUssYUFDQXFDLEdBQUFDLEVBQUEzQyxFQUFBdE0sU0FBQTJJLGFBQUEyRCxFQUFBdE0sU0FBQXlMLFVBQUEsSUFBQWEsRUFBQXRNLFNBQUF5TCxVQUNBYSxFQUFBdE0sU0FBQTZMLGNBQ0FtRCxFQUFBbHJDLEtBQUEyb0MsT0FBQXdDLEVBQUEzQyxFQUFBdE0sU0FBQTJJLGFBQUE3a0MsS0FBQW9yQyxNQUFBRCxFQUFBM0MsRUFBQXRNLFNBQUEySSxjQUFBcUcsRUFBQTFDLEVBQUF0TSxTQUFBMkksY0FBQTJELEVBQUF0TSxTQUFBMkksY0FHQSxPQUFBcUcsR0FNQUcsRUFBQSxXQUNBLElBQUFDLEVBQUEsRUFDQUMsRUFBQSxLQWtCQSxNQWpCQSxlQUFBL0MsRUFBQXRNLFNBQUF1SSxNQUFBK0QsRUFBQXRNLFNBQUE0TCxXQUFBLEVBRUFVLEVBQUFZLFNBQUF0ZCxRQUFBMGMsRUFBQUssYUFDQXlDLEVBQUE5QyxFQUFBdE0sU0FBQXlMLFVBRUFhLEVBQUFZLFNBQUF0ZCxRQUFBMGMsRUFBQU0sYUFDQXdDLEVBQUE5QyxFQUFBdE0sU0FBQTBMLFdBR0EyRCxFQUFBL0MsRUFBQTd5QixTQUFBbFgsUUFBQXF0QixRQUFBMGMsRUFBQXRNLFNBQUEySSxZQUNBeUcsRUFBQXRyQyxLQUFBMm9DLE9BQUFILEVBQUFZLFNBQUF0ZCxRQUNBMGMsRUFBQXRNLFNBQUEySSxhQUFBMEcsSUFBQSxHQUdBLGFBQUEvQyxFQUFBdE0sU0FBQXVJLE9BQ0E2RyxFQUFBOUMsRUFBQXRNLFNBQUF5TCxXQUVBMkQsR0FNQTVCLEVBQUEsV0FDQSxJQUFBOEIsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFFQSxHQUFBbEQsRUFBQXRNLFNBQUEyTCxXQUFBLEVBQUEsQ0FDQSxJQUFBVyxFQUFBdE0sU0FBQXlJLGFBRUEsQ0FFQSxLQUFBOEcsRUFBQWpELEVBQUE3eUIsU0FBQWxZLFVBQ0ErdEMsRUFDQUMsRUFBQUMsRUFBQUwsSUFDQUssR0FBQWxELEVBQUF0TSxTQUFBMkwsWUFBQXdELElBQUE3QyxFQUFBdE0sU0FBQTJMLFdBQUF3RCxJQUVBLE9BQUFLLEVBUkFGLEVBQUF4ckMsS0FBQW9yQyxLQUFBNUMsRUFBQTd5QixTQUFBbFksT0FBQXV0QyxVQVlBUSxFQUFBeHJDLEtBQUFvckMsS0FBQTVDLEVBQUE3eUIsU0FBQWxZLE9BQUE0dEMsS0FFQSxPQUFBRyxHQU1BUixFQUFBLFdBRUEsT0FBQXhDLEVBQUF0TSxTQUFBMkwsV0FBQSxHQUFBVyxFQUFBdE0sU0FBQTJMLFlBQUF3RCxJQUNBN0MsRUFBQXRNLFNBQUEyTCxXQUdBd0QsS0FNQWxCLEVBQUEsV0FDQSxJQUFBamQsRUFBQW5lLEVBQUE0OEIsRUFFQW5ELEVBQUE3eUIsU0FBQWxZLE9BQUErcUMsRUFBQXRNLFNBQUEwTCxXQUFBWSxFQUFBeE4sT0FBQXI4QixPQUFBNnBDLEVBQUF0TSxTQUFBeUksYUFDQSxlQUFBNkQsRUFBQXRNLFNBQUF1SSxNQUdBdlgsR0FEQW5lLEVBQUF5NUIsRUFBQTd5QixTQUFBaFgsUUFDQXV1QixXQUVBMGUsSUFBQTFlLEVBQUF3QyxNQUFBOFksRUFBQVksU0FBQXRkLFFBQUEvYyxFQUFBODhCLGVBQUEsUUFBQSxJQUNBLGFBQUFyRCxFQUFBdE0sU0FBQXVJLE9BRUFrSCxFQUFBbkQsRUFBQTd5QixTQUFBbFksT0FBQStxQyxFQUFBdE0sU0FBQXlMLFVBQ0F6YSxFQUFBc2IsRUFBQTd5QixTQUFBalgsR0FBQWl0QyxHQUFBemUsV0FFQTBlLEdBQUExZSxFQUFBeGlCLElBQUEsUUFBQSxLQUtBd2lCLEVBQUFzYixFQUFBN3lCLFNBQUFqWCxHQUFBOHBDLEVBQUF4TixPQUFBL2tCLE1BQUErMEIsS0FBQTlkLFdBRUFzYixFQUFBeE4sT0FBQS9rQixRQUFBeXpCLElBQUEsSUFBQWxCLEVBQUF4TixPQUFBcjhCLE1BQUEsUUFFQW1CLElBQUFvdEIsSUFDQSxlQUFBc2IsRUFBQXRNLFNBQUF1SSxLQUFBbUgsR0FBQTFlLEVBQUF3QyxLQUFBLFFBQUEsR0FDQSxhQUFBOFksRUFBQXRNLFNBQUF1SSxNQUFBbUgsR0FBQTFlLEVBQUF4aUIsSUFBQSxRQUFBLE1BcUJBa2hDLEVBQUEsU0FBQTlwQyxFQUFBdEIsRUFBQWl3QixFQUFBd1IsR0FDQSxJQUFBNkosRUFBQUMsRUFFQXZELEVBQUFTLFVBRUE4QyxFQUFBLGFBQUF2RCxFQUFBdE0sU0FBQXVJLEtBQUEsa0JBQUEzaUMsRUFBQSxTQUFBLGVBQUFBLEVBQUEsWUFFQXdILEVBQUFtVixJQUFBLElBQUErcEIsRUFBQVUsVUFBQSx1QkFBQXpZLEVBQUEsSUFBQSxLQUNBLFVBQUFqd0IsR0FFQThJLEVBQUFtVixJQUFBK3BCLEVBQUFRLFNBQUErQyxHQUNBLElBQUF0YixFQUVBbm5CLEVBQUFxNkIsS0FBQSxtRUFBQSxTQUFBdDhCLEdBRUFpOUIsRUFBQWo5QixFQUFBN0gsUUFBQXFWLEdBQUF2TCxLQUVBQSxFQUFBczZCLE9BQUEsb0VBQ0FvSSxPQUdBQSxLQUVBLFVBQUF4ckMsRUFDQThJLEVBQUFtVixJQUFBK3BCLEVBQUFRLFNBQUErQyxHQUNBLFdBQUF2ckMsSUFFQThJLEVBQUFtVixJQUFBLElBQUErcEIsRUFBQVUsVUFBQSw4QkFBQSxVQUNBNS9CLEVBQUFtVixJQUFBK3BCLEVBQUFRLFNBQUErQyxHQUNBLElBQUF0YixFQUNBbm5CLEVBQUFxNkIsS0FBQSxtRUFBQSxTQUFBdDhCLEdBRUFpOUIsRUFBQWo5QixFQUFBN0gsUUFBQXFWLEdBQUF2TCxLQUVBQSxFQUFBczZCLE9BQUEsb0VBRUFnSSxFQUFBM0osRUFBQWdLLFdBQUEsUUFBQSxHQUVBQyxRQUdBTixFQUFBM0osRUFBQWdLLFdBQUEsUUFBQSxHQUNBQyxTQUtBSixNQUNBdEQsRUFBQVEsVUFBQWxuQyxFQUNBLFVBQUF0QixFQUNBOEksRUFBQStxQixRQUFBeVgsRUFBQXJiLEVBQUErWCxFQUFBdE0sU0FBQTlMLE9BQUEsV0FDQTRiLE1BRUEsVUFBQXhyQyxFQUNBOEksRUFBQW1WLElBQUErcEIsRUFBQVEsU0FBQWxuQyxHQUNBLFdBQUF0QixHQUNBOEksRUFBQStxQixRQUFBeVgsRUFBQXJiLEVBQUEsU0FBQSxXQUNBbWIsRUFBQTNKLEVBQUFnSyxXQUFBLFFBQUEsR0FFQUMsUUFTQUMsRUFBQSxXQUtBLElBQUEsSUFKQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FiLEVBQUE5QixJQUVBcHJDLEVBQUEsRUFBQUEsRUFBQWt0QyxFQUFBbHRDLElBQ0ErdEMsRUFBQSxHQUVBN0QsRUFBQXRNLFNBQUFxSyxZQUFBakMsRUFBQTVrQyxXQUFBOG9DLEVBQUF0TSxTQUFBcUssYUFBQWlDLEVBQUF0TSxTQUFBc0ssYUFDQTZGLEVBQUE3RCxFQUFBdE0sU0FBQXFLLFdBQUFqb0MsR0FDQWtxQyxFQUFBOEQsUUFBQTFWLFNBQUEscUJBRUF5VixFQUFBL3RDLEVBQUEsRUFDQWtxQyxFQUFBOEQsUUFBQTFWLFNBQUEscUJBSUF3VixHQUFBLDJEQUFBOXRDLEVBQUEsMkJBQUErdEMsRUFBQSxhQUdBN0QsRUFBQThELFFBQUE1aUIsS0FBQTBpQixJQU1BdEMsRUFBQSxXQUNBdEIsRUFBQXRNLFNBQUFzSyxZQWFBZ0MsRUFBQThELFFBQUFoSSxFQUFBa0UsRUFBQXRNLFNBQUFzSyxjQVhBZ0MsRUFBQThELFFBQUFoSSxFQUFBLDRCQUVBa0UsRUFBQXRNLFNBQUFvSyxjQUNBaEMsRUFBQWtFLEVBQUF0TSxTQUFBb0ssZUFBQTVjLEtBQUE4ZSxFQUFBOEQsU0FHQTlELEVBQUEvQixTQUFBbjlCLEdBQUFzdEIsU0FBQSxnQkFBQXhNLE9BQUFvZSxFQUFBOEQsU0FHQUgsS0FLQTNELEVBQUE4RCxRQUFBOXBCLEdBQUEsaUJBQUEsSUFBQStwQixJQU1BM0MsRUFBQSxXQUNBcEIsRUFBQS9CLFNBQUF2L0IsS0FBQW85QixFQUFBLDhCQUFBa0UsRUFBQXRNLFNBQUF3SyxTQUFBLFFBQ0E4QixFQUFBL0IsU0FBQTV3QixLQUFBeXVCLEVBQUEsOEJBQUFrRSxFQUFBdE0sU0FBQXlLLFNBQUEsUUFFQTZCLEVBQUEvQixTQUFBdi9CLEtBQUF5OEIsS0FBQSxpQkFBQTZJLEdBQ0FoRSxFQUFBL0IsU0FBQTV3QixLQUFBOHRCLEtBQUEsaUJBQUE4SSxHQUVBakUsRUFBQXRNLFNBQUEwSyxjQUNBdEMsRUFBQWtFLEVBQUF0TSxTQUFBMEssY0FBQXhjLE9BQUFvZSxFQUFBL0IsU0FBQXYvQixNQUdBc2hDLEVBQUF0TSxTQUFBMkssY0FDQXZDLEVBQUFrRSxFQUFBdE0sU0FBQTJLLGNBQUF6YyxPQUFBb2UsRUFBQS9CLFNBQUE1d0IsTUFHQTJ5QixFQUFBdE0sU0FBQTBLLGNBQUE0QixFQUFBdE0sU0FBQTJLLGVBRUEyQixFQUFBL0IsU0FBQWlHLFlBQUFwSSxFQUFBLHlDQUVBa0UsRUFBQS9CLFNBQUFpRyxZQUFBdGlCLE9BQUFvZSxFQUFBL0IsU0FBQTV3QixNQUFBdVUsT0FBQW9lLEVBQUEvQixTQUFBdi9CLE1BRUFzaEMsRUFBQS9CLFNBQUFuOUIsR0FBQXN0QixTQUFBLDZCQUFBeE0sT0FBQW9lLEVBQUEvQixTQUFBaUcsZUFPQTdDLEVBQUEsV0FDQXJCLEVBQUEvQixTQUFBNzNCLE1BQUEwMUIsRUFBQSxrRUFBQWtFLEVBQUF0TSxTQUFBNkssVUFBQSxjQUNBeUIsRUFBQS9CLFNBQUE1b0IsS0FBQXltQixFQUFBLGlFQUFBa0UsRUFBQXRNLFNBQUE4SyxTQUFBLGNBRUF3QixFQUFBL0IsU0FBQWtHLE9BQUFySSxFQUFBLG9DQUVBa0UsRUFBQS9CLFNBQUFrRyxPQUFBbnFCLEdBQUEsUUFBQSxZQUFBb3FCLEdBQ0FwRSxFQUFBL0IsU0FBQWtHLE9BQUFucUIsR0FBQSxRQUFBLFdBQUFxcUIsR0FFQXJFLEVBQUF0TSxTQUFBK0ssb0JBQ0F1QixFQUFBL0IsU0FBQWtHLE9BQUF2aUIsT0FBQW9lLEVBQUEvQixTQUFBNzNCLE9BR0E0NUIsRUFBQS9CLFNBQUFrRyxPQUFBdmlCLE9BQUFvZSxFQUFBL0IsU0FBQTczQixPQUFBd2IsT0FBQW9lLEVBQUEvQixTQUFBNW9CLE1BR0EycUIsRUFBQXRNLFNBQUFnTCxxQkFDQTVDLEVBQUFrRSxFQUFBdE0sU0FBQWdMLHNCQUFBeGQsS0FBQThlLEVBQUEvQixTQUFBa0csUUFHQW5FLEVBQUEvQixTQUFBbjlCLEdBQUFzdEIsU0FBQSx3QkFBQXhNLE9BQUFvZSxFQUFBL0IsU0FBQWtHLFFBR0FHLEVBQUF0RSxFQUFBdE0sU0FBQW1MLFVBQUEsT0FBQSxVQU1Bb0MsRUFBQSxXQUVBakIsRUFBQTd5QixTQUFBelgsS0FBQSxTQUFBK1gsR0FFQSxJQUFBODJCLEVBQUF6SSxFQUFBeHBDLE1BQUFxUSxLQUFBLGFBQUFzQixLQUFBLGNBRUEzTSxJQUFBaXRDLElBQUEsR0FBQUEsR0FBQXR2QyxRQUNBNm1DLEVBQUF4cEMsTUFBQXN2QixPQUFBLGlDQUFBMmlCLEVBQUEsb0JBV0FQLEVBQUEsU0FBQW5sQyxHQUNBQSxFQUFBdWQsaUJBQ0E0akIsRUFBQS9CLFNBQUFuOUIsR0FBQSt0QixTQUFBLGNBRUFtUixFQUFBdE0sU0FBQWlMLE1BQUFxQixFQUFBdE0sU0FBQXFMLGlCQUFBaitCLEVBQUEwakMsV0FDQTFqQyxFQUFBMmpDLGtCQVNBUixFQUFBLFNBQUFwbEMsR0FDQUEsRUFBQXVkLGlCQUNBNGpCLEVBQUEvQixTQUFBbjlCLEdBQUErdEIsU0FBQSxjQUVBbVIsRUFBQXRNLFNBQUFpTCxNQUFBcUIsRUFBQXRNLFNBQUFxTCxpQkFBQWorQixFQUFBMGpDLFdBQ0ExakMsRUFBQTRqQyxrQkFTQU4sRUFBQSxTQUFBdmxDLEdBQ0FpQyxFQUFBNmpDLFlBQ0E5bEMsRUFBQXVkLGtCQVNBaW9CLEVBQUEsU0FBQXhsQyxHQUNBaUMsRUFBQTBqQyxXQUNBM2xDLEVBQUF1ZCxrQkFTQTJuQixFQUFBLFNBQUFsbEMsR0FDQSxJQUFBK2xDLEVBQUFDLEVBQ0FobUMsRUFBQXVkLGlCQUNBNGpCLEVBQUEvQixTQUFBbjlCLEdBQUErdEIsU0FBQSxjQUlBbVIsRUFBQXRNLFNBQUFpTCxNQUFBcUIsRUFBQXRNLFNBQUFxTCxpQkFBQWorQixFQUFBMGpDLGdCQUVBbHRDLEtBREFzdEMsRUFBQTlJLEVBQUFqOUIsRUFBQW9kLGdCQUNBaFksS0FBQSxzQkFDQTRnQyxFQUFBOVcsU0FBQTZXLEVBQUEzZ0MsS0FBQSx3QkFFQSs3QixFQUFBeE4sT0FBQS9rQixPQUFBM00sRUFBQWdrQyxVQUFBRCxLQVVBM0MsRUFBQSxTQUFBNkMsR0FFQSxJQUFBM3VDLEVBQUE0cEMsRUFBQTd5QixTQUFBbFksT0FDQSxHQUFBLFVBQUErcUMsRUFBQXRNLFNBQUFrSyxVQUtBLE9BSkFvQyxFQUFBdE0sU0FBQTBMLFVBQUEsSUFDQWhwQyxFQUFBb0IsS0FBQW9yQyxLQUFBNUMsRUFBQTd5QixTQUFBbFksT0FBQStxQyxFQUFBdE0sU0FBQTBMLGlCQUVBWSxFQUFBOEQsUUFBQTVpQixLQUFBNmpCLEVBQUEsRUFBQS9FLEVBQUF0TSxTQUFBbUssb0JBQUF6bkMsR0FJQTRwQyxFQUFBOEQsUUFBQW5oQyxLQUFBLEtBQUE4ckIsWUFBQSxVQUVBdVIsRUFBQThELFFBQUFwdUMsS0FBQSxTQUFBSSxFQUFBZ0wsR0FBQWc3QixFQUFBaDdCLEdBQUE2QixLQUFBLEtBQUF6TSxHQUFBNnVDLEdBQUEzVyxTQUFBLGFBTUFvVixFQUFBLFdBRUEsR0FBQXhELEVBQUF0TSxTQUFBeUksYUFBQSxDQUNBLElBQUF6WCxFQUFBLEdBRUEsSUFBQXNiLEVBQUF4TixPQUFBL2tCLE1BRUFpWCxFQUFBc2IsRUFBQTd5QixTQUFBalgsR0FBQSxHQUFBd3VCLFdBRUFzYixFQUFBeE4sT0FBQS9rQixRQUFBeXpCLElBQUEsR0FBQWxCLEVBQUFJLFNBQ0ExYixFQUFBc2IsRUFBQTd5QixTQUFBalgsSUFBQWdyQyxJQUFBLEdBQUFzQixLQUFBOWQsV0FFQXNiLEVBQUF4TixPQUFBL2tCLFFBQUF1eUIsRUFBQTd5QixTQUFBbFksT0FBQSxJQUNBeXZCLEVBQUFzYixFQUFBN3lCLFNBQUFqWCxHQUFBOHBDLEVBQUE3eUIsU0FBQWxZLE9BQUEsR0FBQXl2QixZQUVBQSxJQUNBLGVBQUFzYixFQUFBdE0sU0FBQXVJLEtBQUFtSCxHQUFBMWUsRUFBQXdDLEtBQUEsUUFBQSxHQUNBLGFBQUE4WSxFQUFBdE0sU0FBQXVJLE1BQUFtSCxHQUFBMWUsRUFBQXhpQixJQUFBLFFBQUEsSUFJQTg5QixFQUFBTyxTQUFBLEVBRUFQLEVBQUF0TSxTQUFBZ00sYUFBQXBzQyxLQUFBd04sRUFBQWsvQixFQUFBN3lCLFNBQUFqWCxHQUFBOHBDLEVBQUF4TixPQUFBL2tCLE9BQUF1eUIsRUFBQWdGLFNBQUFoRixFQUFBeE4sT0FBQS9rQixRQVNBNjJCLEVBQUEsU0FBQS96QixHQUVBeXZCLEVBQUF0TSxTQUFBK0ssb0JBQ0F1QixFQUFBL0IsU0FBQWtHLE9BQUFqakIsS0FBQThlLEVBQUEvQixTQUFBMXRCLEtBR0F5dkIsRUFBQS9CLFNBQUFrRyxPQUFBeGhDLEtBQUEsS0FBQThyQixZQUFBLFVBQ0F1UixFQUFBL0IsU0FBQWtHLE9BQUF4aEMsS0FBQSxhQUFBNE4sRUFBQSxLQUFBNmQsU0FBQSxZQU9BK1QsRUFBQSxXQUNBLElBQUFqQixLQUNBbEIsRUFBQS9CLFNBQUE1d0IsS0FBQStnQixTQUFBLFlBQ0E0UixFQUFBL0IsU0FBQXYvQixLQUFBMHZCLFNBQUEsY0FDQTRSLEVBQUF0TSxTQUFBeUksY0FBQTZELEVBQUF0TSxTQUFBMEksbUJBRUEsSUFBQTRELEVBQUF4TixPQUFBL2tCLE9BQ0F1eUIsRUFBQS9CLFNBQUE1d0IsS0FBQStnQixTQUFBLFlBQ0E0UixFQUFBL0IsU0FBQXYvQixLQUFBK3ZCLFlBQUEsYUFFQXVSLEVBQUF4TixPQUFBL2tCLFFBQUF5ekIsSUFBQSxHQUNBbEIsRUFBQS9CLFNBQUF2L0IsS0FBQTB2QixTQUFBLFlBQ0E0UixFQUFBL0IsU0FBQTV3QixLQUFBb2hCLFlBQUEsY0FHQXVSLEVBQUEvQixTQUFBNXdCLEtBQUFvaEIsWUFBQSxZQUNBdVIsRUFBQS9CLFNBQUF2L0IsS0FBQSt2QixZQUFBLGVBS0F3VyxFQUFBLFdBQUFua0MsRUFBQTZqQyxhQUNBTyxFQUFBLFdBQUFwa0MsRUFBQTBqQyxZQUlBeEMsRUFBQSxXQUVBLEdBQUFoQyxFQUFBdE0sU0FBQXVMLFVBQUEsRUFDQS9zQixXQUFBcFIsRUFBQTZqQyxVQUFBM0UsRUFBQXRNLFNBQUF1TCxnQkFHQW4rQixFQUFBNmpDLFlBR0E3SSxFQUFBenBDLFFBQUFrVixNQUFBMDlCLEdBQUEvbkIsS0FBQWdvQixHQUdBbEYsRUFBQXRNLFNBQUFzTCxXQUVBbCtCLEVBQUE0dUIsTUFBQSxXQUVBc1EsRUFBQTdXLFdBRUFyb0IsRUFBQTBqQyxVQUFBLEdBRUF4RSxFQUFBbUYsWUFBQSxJQUVBLFdBRUFuRixFQUFBbUYsYUFFQXJrQyxFQUFBNmpDLFdBQUEsR0FFQTNFLEVBQUFtRixXQUFBLFNBU0FsRCxFQUFBLFdBQ0EsSUFDQXZkLEVBQUEwZ0IsRUFBQTlyQyxFQUFBcU4sRUFBQTArQixFQUFBQyxFQUFBQyxFQUFBQyxFQURBQyxFQUFBLEVBR0EsU0FBQXpGLEVBQUF0TSxTQUFBb0wsY0FDQWgrQixFQUFBOGdCLE9BQUFvZSxFQUFBN3lCLFNBQUFwVyxRQUFBcTNCLFNBQUEsY0FHQXR0QixFQUFBK2dCLFFBQUFtZSxFQUFBN3lCLFNBQUFwVyxRQUFBcTNCLFNBQUEsYUFDQTFKLEVBQUFzYixFQUFBN3lCLFNBQUFsWCxRQUFBeXVCLFdBQ0ErZ0IsRUFBQSxlQUFBekYsRUFBQXRNLFNBQUF1SSxNQUFBdlgsRUFBQXdDLE1BQUF4QyxFQUFBeGlCLEtBRUFraEMsRUFBQXFDLEVBQUEsUUFBQSxHQUVBekYsRUFBQXRNLFNBQUFpSyxPQUFBLEVBQ0FxQyxFQUFBdE0sU0FBQXVLLFVBQUEsRUFDQStCLEVBQUF0TSxTQUFBNEssY0FBQSxFQUVBMEIsRUFBQXRNLFNBQUFnSixjQUNBc0QsRUFBQVMsVUFDQTk1QixFQUFBLGVBQUFxNUIsRUFBQXRNLFNBQUF1SSxLQUFBLEVBQUEsRUFDQStELEVBQUFZLFNBQUFsUixNQUFBLFdBQ0EwVixFQUFBdGtDLEVBQUFtVixJQUFBLElBQUErcEIsRUFBQVUsVUFBQSxjQUNBcG5DLEVBQUFsQixXQUFBZ3RDLEVBQUFyckMsTUFBQSxLQUFBNE0sSUFDQXk4QixFQUFBOXBDLEVBQUEsUUFBQSxJQUNBLFdBQ0Frc0MsRUFBQSxFQUNBeEYsRUFBQTd5QixTQUFBelgsS0FBQSxTQUFBK1gsR0FDQSszQixHQUFBLGVBQUF4RixFQUFBdE0sU0FBQXVJLEtBQUFILEVBQUF4cEMsTUFBQSt3QyxZQUFBLEdBQUF2SCxFQUFBeHBDLE1BQUFtd0MsYUFBQSxLQUdBNEMsRUFBQXJGLEVBQUF0TSxTQUFBbEksTUFBQWdhLEVBRUFGLEVBQUEsZUFBQXRGLEVBQUF0TSxTQUFBdUksS0FBQSxPQUFBLE1BRUFzSixFQUFBRixHQUFBRyxFQUFBaHVDLEtBQUFrdUMsSUFBQTNYLFNBQUF6MEIsS0FDQW9xQyxFQUFBNkIsTUFJQXZGLEVBQUFZLFNBQUFsUixNQUFBLFdBQ0E1dUIsRUFBQXVVLFFBQ0EsV0FFQW13QixFQUFBLEVBQ0F4RixFQUFBN3lCLFNBQUF6WCxLQUFBLFNBQUErWCxHQUNBKzNCLEdBQUEsZUFBQXhGLEVBQUF0TSxTQUFBdUksS0FBQUgsRUFBQXhwQyxNQUFBK3dDLFlBQUEsR0FBQXZILEVBQUF4cEMsTUFBQW13QyxhQUFBLEtBR0E0QyxFQUFBckYsRUFBQXRNLFNBQUFsSSxNQUFBZ2EsRUFFQUYsRUFBQSxlQUFBdEYsRUFBQXRNLFNBQUF1SSxLQUFBLE9BQUEsTUFFQXNKLEVBQUFGLEdBQUFHLEVBQUFodUMsS0FBQWt1QyxJQUFBM1gsU0FBQWp0QixFQUFBbVYsSUFBQXF2QixNQUNBNUIsRUFBQTZCLE1BS0E3QixLQU1BQSxFQUFBLFNBQUFpQyxHQUNBLElBR0FDLEVBQUFuQyxFQUhBalksRUFBQW1hLEdBQUEzRixFQUFBdE0sU0FBQWxJLE1BQ0E5RyxHQUFBd0MsS0FBQSxFQUFBaGxCLElBQUEsR0FDQTJHLEdBQUFxZSxLQUFBLEVBQUFobEIsSUFBQSxHQUlBLFNBQUE4OUIsRUFBQXRNLFNBQUFvTCxjQUNBcGEsRUFBQTVqQixFQUFBNkIsS0FBQSxhQUFBMU0sUUFBQXl1QixXQUdBN2IsRUFBQW0zQixFQUFBN3lCLFNBQUFsWCxRQUFBeXVCLFdBRUFraEIsRUFBQSxlQUFBNUYsRUFBQXRNLFNBQUF1SSxNQUFBdlgsRUFBQXdDLE1BQUF4QyxFQUFBeGlCLElBQ0F1aEMsRUFBQSxlQUFBekQsRUFBQXRNLFNBQUF1SSxNQUFBcHpCLEVBQUFxZSxNQUFBcmUsRUFBQTNHLElBRUFraEMsRUFBQXdDLEVBQUEsU0FBQXBhLEdBREFpWSxXQUFBQSxLQTBCQW5CLEVBQUEsU0FBQXpqQyxHQUNBLElBQUFnbkMsRUFBQTN6QyxTQUFBc1YsY0FBQXMrQixRQUFBOXJDLGNBS0EsR0FBQSxNQUhBLElBQUFvQyxPQUFBeXBDLEdBQUEsTUFDQXRtQyxLQUZBLG1CQXJCQSxTQUFBdUIsR0FDQSxJQUFBdzVCLEVBQUF3QixFQUFBenBDLFFBQ0F1dUMsR0FDQTErQixJQUFBbzRCLEVBQUFqUyxZQUNBbkIsS0FBQW9ULEVBQUFoUyxjQUVBeWQsRUFBQWpsQyxFQUFBNjRCLFNBT0EsT0FMQWlILEVBQUFvRixNQUFBcEYsRUFBQTFaLEtBQUFvVCxFQUFBaFgsUUFDQXNkLEVBQUFxRixPQUFBckYsRUFBQTErQixJQUFBbzRCLEVBQUE5USxTQUNBdWMsRUFBQUMsTUFBQUQsRUFBQTdlLEtBQUFwbUIsRUFBQXVpQyxhQUNBMEMsRUFBQUUsT0FBQUYsRUFBQTdqQyxJQUFBcEIsRUFBQTJoQyxnQkFFQTdCLEVBQUFvRixNQUFBRCxFQUFBN2UsTUFBQTBaLEVBQUExWixLQUFBNmUsRUFBQUMsT0FBQXBGLEVBQUFxRixPQUFBRixFQUFBN2pDLEtBQUEwK0IsRUFBQTErQixJQUFBNmpDLEVBQUFFLFFBWUFDLENBQUFwbEMsR0FBQSxDQUNBLEdBQUEsS0FBQWpDLEVBQUE4ZixRQUVBLE9BREFxbEIsRUFBQW5sQyxJQUNBLEVBQ0EsR0FBQSxLQUFBQSxFQUFBOGYsUUFFQSxPQURBc2xCLEVBQUFwbEMsSUFDQSxJQVFBdWpDLEVBQUEsV0FFQXBDLEVBQUFtRyxPQUNBLy9CLE9BQUFnZ0MsRUFBQSxFQUFBQyxFQUFBLEdBQ0EvdkMsS0FBQTh2QyxFQUFBLEVBQUFDLEVBQUEsSUFFQXJHLEVBQUFZLFNBQUF6RixLQUFBLHVDQUFBbUwsR0FJQXRHLEVBQUFZLFNBQUE1bUIsR0FBQSxRQUFBLGNBQUEsU0FBQW5iLEdBQ0FtaEMsRUFBQVksU0FBQS9SLFNBQUEsb0JBQ0Fod0IsRUFBQXVkLGlCQUNBNGpCLEVBQUFZLFNBQUFuUyxZQUFBLHNCQVdBNlgsRUFBQSxTQUFBem5DLEdBSUEsR0FGQW1oQyxFQUFBL0IsU0FBQW45QixHQUFBc3RCLFNBQUEsWUFFQTRSLEVBQUFPLFFBQ0ExaEMsRUFBQXVkLGlCQUNBNGpCLEVBQUEvQixTQUFBbjlCLEdBQUEydEIsWUFBQSxnQkFDQSxDQUVBdVIsRUFBQW1HLE1BQUFJLFlBQUF6bEMsRUFBQTRqQixXQUNBLElBQUE3RSxFQUFBaGhCLEVBQUFnZSxjQUNBMnBCLE9BQUEsSUFBQTNtQixFQUFBN0IsZUFBQTZCLEVBQUE3QixnQkFBQTZCLEdBRUFtZ0IsRUFBQW1HLE1BQUEvL0IsTUFBQWdnQyxFQUFBSSxFQUFBLEdBQUFub0IsTUFDQTJoQixFQUFBbUcsTUFBQS8vQixNQUFBaWdDLEVBQUFHLEVBQUEsR0FBQWxvQixNQUVBMGhCLEVBQUFZLFNBQUF6ckMsSUFBQSxHQUFBc3hDLG9CQUNBekcsRUFBQS9nQixVQUFBWSxFQUFBWixVQUNBK2dCLEVBQUFZLFNBQUF6ckMsSUFBQSxHQUFBc3hDLGtCQUFBekcsRUFBQS9nQixZQUdBK2dCLEVBQUFZLFNBQUF6RixLQUFBLHNDQUFBdUwsR0FFQTFHLEVBQUFZLFNBQUF6RixLQUFBLGlDQUFBd0wsR0FDQTNHLEVBQUFZLFNBQUF6RixLQUFBLGdDQUFBeUwsS0FVQUEsRUFBQSxTQUFBL25DLEdBR0F1a0MsRUFBQXBELEVBQUFtRyxNQUFBSSxZQUFBcmYsS0FBQSxRQUFBLEdBR0E4WSxFQUFBL0IsU0FBQW45QixHQUFBMnRCLFlBQUEsWUFDQXVSLEVBQUFZLFNBQUF4RixPQUFBLGdDQUFBd0wsR0FDQTVHLEVBQUFZLFNBQUF4RixPQUFBLHNDQUFBc0wsR0FDQTFHLEVBQUFZLFNBQUF4RixPQUFBLGlDQUFBdUwsR0FDQTNHLEVBQUFZLFNBQUF6ckMsSUFBQSxHQUFBMHhDLHVCQUNBN0csRUFBQVksU0FBQXpyQyxJQUFBLEdBQUEweEMsc0JBQUE3RyxFQUFBL2dCLFlBVUF5bkIsRUFBQSxTQUFBN25DLEdBQ0EsSUFBQWdoQixFQUFBaGhCLEVBQUFnZSxjQUNBMnBCLE9BQUEsSUFBQTNtQixFQUFBN0IsZUFBQTZCLEVBQUE3QixnQkFBQTZCLEdBRUFpbkIsRUFBQXR2QyxLQUFBa3VDLElBQUFjLEVBQUEsR0FBQW5vQixNQUFBMmhCLEVBQUFtRyxNQUFBLy9CLE1BQUFnZ0MsR0FDQVcsRUFBQXZ2QyxLQUFBa3VDLElBQUFjLEVBQUEsR0FBQWxvQixNQUFBMGhCLEVBQUFtRyxNQUFBLy9CLE1BQUFpZ0MsR0FDQS9zQyxFQUFBLEVBQ0EwdEMsRUFBQSxFQUdBLEVBQUFGLEVBQUFDLEdBQUEvRyxFQUFBdE0sU0FBQTRKLHFCQUNBeitCLEVBQUF1ZCxpQkFFQSxFQUFBMnFCLEVBQUFELEdBQUE5RyxFQUFBdE0sU0FBQTZKLHNCQUNBMStCLEVBQUF1ZCxpQkFFQSxTQUFBNGpCLEVBQUF0TSxTQUFBdUksTUFBQStELEVBQUF0TSxTQUFBMkosZ0JBRUEsZUFBQTJDLEVBQUF0TSxTQUFBdUksTUFDQStLLEVBQUFSLEVBQUEsR0FBQW5vQixNQUFBMmhCLEVBQUFtRyxNQUFBLy9CLE1BQUFnZ0MsRUFDQTlzQyxFQUFBMG1DLEVBQUFtRyxNQUFBSSxZQUFBcmYsS0FBQThmLElBR0FBLEVBQUFSLEVBQUEsR0FBQWxvQixNQUFBMGhCLEVBQUFtRyxNQUFBLy9CLE1BQUFpZ0MsRUFDQS9zQyxFQUFBMG1DLEVBQUFtRyxNQUFBSSxZQUFBcmtDLElBQUE4a0MsR0FFQTVELEVBQUE5cEMsRUFBQSxRQUFBLEtBVUFxdEMsRUFBQSxTQUFBOW5DLEdBQ0FtaEMsRUFBQVksU0FBQXhGLE9BQUEsc0NBQUFzTCxHQUVBMUcsRUFBQS9CLFNBQUFuOUIsR0FBQTJ0QixZQUFBLFlBQ0EsSUFBQTVPLEVBQUFoaEIsRUFBQWdlLGNBQ0EycEIsT0FBQSxJQUFBM21CLEVBQUE3QixlQUFBNkIsRUFBQTdCLGdCQUFBNkIsR0FDQXZtQixFQUFBLEVBQ0EydEMsRUFBQSxFQUVBakgsRUFBQW1HLE1BQUE3dkMsSUFBQTh2QyxFQUFBSSxFQUFBLEdBQUFub0IsTUFDQTJoQixFQUFBbUcsTUFBQTd2QyxJQUFBK3ZDLEVBQUFHLEVBQUEsR0FBQWxvQixNQUVBLFNBQUEwaEIsRUFBQXRNLFNBQUF1SSxNQUNBZ0wsRUFBQXp2QyxLQUFBa3VDLElBQUExRixFQUFBbUcsTUFBQS8vQixNQUFBZ2dDLEVBQUFwRyxFQUFBbUcsTUFBQTd2QyxJQUFBOHZDLEtBQ0FwRyxFQUFBdE0sU0FBQTBKLGlCQUNBNEMsRUFBQW1HLE1BQUEvL0IsTUFBQWdnQyxFQUFBcEcsRUFBQW1HLE1BQUE3dkMsSUFBQTh2QyxFQUNBdGxDLEVBQUEyakMsZ0JBRUEzakMsRUFBQTRqQyxnQkFFQTVqQyxFQUFBMGpDLGFBS0EsZUFBQXhFLEVBQUF0TSxTQUFBdUksTUFDQWdMLEVBQUFqSCxFQUFBbUcsTUFBQTd2QyxJQUFBOHZDLEVBQUFwRyxFQUFBbUcsTUFBQS8vQixNQUFBZ2dDLEVBQ0E5c0MsRUFBQTBtQyxFQUFBbUcsTUFBQUksWUFBQXJmLE9BRUErZixFQUFBakgsRUFBQW1HLE1BQUE3dkMsSUFBQSt2QyxFQUFBckcsRUFBQW1HLE1BQUEvL0IsTUFBQWlnQyxFQUNBL3NDLEVBQUEwbUMsRUFBQW1HLE1BQUFJLFlBQUFya0MsTUFHQTg5QixFQUFBdE0sU0FBQXlJLGVBQUEsSUFBQTZELEVBQUF4TixPQUFBL2tCLE9BQUF3NUIsRUFBQSxHQUFBakgsRUFBQXhOLE9BQUFyOEIsTUFBQTh3QyxFQUFBLEdBQ0E3RCxFQUFBOXBDLEVBQUEsUUFBQSxLQUdBOUIsS0FBQWt1QyxJQUFBdUIsSUFBQWpILEVBQUF0TSxTQUFBMEosZ0JBQ0E2SixFQUFBLEVBQ0FubUMsRUFBQTJqQyxnQkFFQTNqQyxFQUFBNGpDLGdCQUVBNWpDLEVBQUEwakMsWUFHQXBCLEVBQUE5cEMsRUFBQSxRQUFBLE1BSUEwbUMsRUFBQVksU0FBQXhGLE9BQUEsaUNBQUF1TCxHQUNBM0csRUFBQVksU0FBQXpyQyxJQUFBLEdBQUEweEMsdUJBQ0E3RyxFQUFBWSxTQUFBenJDLElBQUEsR0FBQTB4QyxzQkFBQTdHLEVBQUEvZ0IsWUFPQThpQixFQUFBLFNBQUFsakMsR0FFQSxHQUFBbWhDLEVBQUE4QixZQUVBLEdBQUE5QixFQUFBTyxRQUNBbHVDLE9BQUE2ZixXQUFBNnZCLEVBQUEsUUFDQSxDQUVBLElBQUFtRixFQUFBcEwsRUFBQXpwQyxRQUFBaXhCLFFBQ0E2akIsRUFBQXJMLEVBQUF6cEMsUUFBQW0zQixTQUlBeVcsSUFBQWlILEdBQUFoSCxJQUFBaUgsSUFFQWxILEVBQUFpSCxFQUNBaEgsRUFBQWlILEVBRUFybUMsRUFBQStnQyxlQUVBN0IsRUFBQXRNLFNBQUFtTSxlQUFBdnNDLEtBQUF3TixFQUFBay9CLEVBQUF4TixPQUFBL2tCLFVBV0EyNUIsRUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUF6RSxJQUVBN0MsRUFBQXRNLFNBQUErSixhQUFBdUMsRUFBQXRNLFNBQUErSSxTQUVBdUQsRUFBQTd5QixTQUFBbEosS0FBQSxjQUFBLFFBRUErN0IsRUFBQTd5QixTQUFBdmEsTUFBQXkwQyxFQUFBQSxFQUFBQyxHQUFBcmpDLEtBQUEsY0FBQSxXQTJVQSxPQTVSQW5ELEVBQUFna0MsVUFBQSxTQUFBQyxFQUFBd0MsR0FHQSxJQUlBcEUsRUFBQWp0QyxFQUFBb0QsRUFBQWt1QyxFQUpBQyxHQUFBLEVBQ0FDLEVBQUEsRUFDQWhqQixHQUFBd0MsS0FBQSxFQUFBaGxCLElBQUEsR0FDQXFFLEVBQUEsS0FHQXk1QixFQUFBZ0YsU0FBQWhGLEVBQUF4TixPQUFBL2tCLE1BRUF1eUIsRUFBQXhOLE9BQUEva0IsT0FoREFzM0IsRUFnREFBLEVBL0NBQSxFQUFBLEVBQ0EvRSxFQUFBdE0sU0FBQXlJLGFBQ0ErRSxJQUFBLEVBR0FsQixFQUFBeE4sT0FBQS9rQixNQUdBczNCLEdBQUE3RCxJQUNBbEIsRUFBQXRNLFNBQUF5SSxhQUNBLEVBR0E2RCxFQUFBeE4sT0FBQS9rQixNQUlBczNCLEdBbEJBLElBQUFBLEVBbURBLElBQUEvRSxFQUFBTyxTQUFBUCxFQUFBeE4sT0FBQS9rQixRQUFBdXlCLEVBQUFnRixTQUFBLENBT0EsR0FMQWhGLEVBQUFPLFNBQUEsT0FLQSxLQUhBa0gsRUFBQXpILEVBQUF0TSxTQUFBK0wsY0FBQW5zQyxLQUFBd04sRUFBQWsvQixFQUFBN3lCLFNBQUFqWCxHQUFBOHBDLEVBQUF4TixPQUFBL2tCLE9BQUF1eUIsRUFBQWdGLFNBQUFoRixFQUFBeE4sT0FBQS9rQixVQUdBZzZCLEVBR0EsT0FGQXpILEVBQUF4TixPQUFBL2tCLE1BQUF1eUIsRUFBQWdGLGNBQ0FoRixFQUFBTyxTQUFBLEdBSUEsU0FBQWdILEVBRUF2SCxFQUFBdE0sU0FBQWlNLFlBQUFyc0MsS0FBQXdOLEVBQUFrL0IsRUFBQTd5QixTQUFBalgsR0FBQThwQyxFQUFBeE4sT0FBQS9rQixPQUFBdXlCLEVBQUFnRixTQUFBaEYsRUFBQXhOLE9BQUEva0IsU0FDQWc2QixHQUFBLEdBRUEsU0FBQUYsSUFFQXZILEVBQUF0TSxTQUFBa00sWUFBQXRzQyxLQUFBd04sRUFBQWsvQixFQUFBN3lCLFNBQUFqWCxHQUFBOHBDLEVBQUF4TixPQUFBL2tCLE9BQUF1eUIsRUFBQWdGLFNBQUFoRixFQUFBeE4sT0FBQS9rQixTQUNBZzZCLEdBQUEsSUFLQXpILEVBQUF4TixPQUFBcjhCLEtBQUE2cEMsRUFBQXhOLE9BQUEva0IsT0FBQXl6QixJQUFBLEdBRUFsQixFQUFBdE0sU0FBQWlLLE9BQUFxQyxFQUFBdE0sU0FBQXNLLGNBQUFrRSxFQUFBbEMsRUFBQXhOLE9BQUEva0IsT0FFQXV5QixFQUFBdE0sU0FBQXVLLFVBQUFrRSxJQUVBLFNBQUFuQyxFQUFBdE0sU0FBQXVJLE1BRUErRCxFQUFBdE0sU0FBQWlKLGdCQUFBcUQsRUFBQVksU0FBQXBYLFdBQUFvWSxLQUNBNUIsRUFBQVksU0FBQS9VLFNBQUFyQyxPQUFBb1ksS0FBQTVCLEVBQUF0TSxTQUFBa0oscUJBR0FvRCxFQUFBN3lCLFNBQUExSyxPQUFBLFlBQUErcEIsUUFBQXdULEVBQUF0TSxTQUFBbEksT0FBQXZWLEtBQUF3USxPQUFBLElBRUF1WixFQUFBN3lCLFNBQUFqWCxHQUFBOHBDLEVBQUF4TixPQUFBL2tCLE9BQUF3SSxJQUFBLFNBQUErcEIsRUFBQXRNLFNBQUF1SixZQUFBLEdBQUExUSxPQUFBeVQsRUFBQXRNLFNBQUFsSSxNQUFBLFdBQ0FzUSxFQUFBeHBDLE1BQUEyakIsSUFBQSxTQUFBK3BCLEVBQUF0TSxTQUFBdUosYUFDQXVHLFFBS0F4RCxFQUFBdE0sU0FBQWlKLGdCQUFBcUQsRUFBQVksU0FBQXBYLFdBQUFvWSxLQUNBNUIsRUFBQVksU0FBQS9VLFNBQUFyQyxPQUFBb1ksS0FBQTVCLEVBQUF0TSxTQUFBa0osc0JBR0FvRCxFQUFBdE0sU0FBQXlJLGNBQUE2RCxFQUFBSSxVQUFBSixFQUFBeE4sT0FBQXI4QixLQUNBLGVBQUE2cEMsRUFBQXRNLFNBQUF1SSxNQUdBdlgsR0FEQW5lLEVBQUF5NUIsRUFBQTd5QixTQUFBalgsR0FBQThwQyxFQUFBN3lCLFNBQUFsWSxPQUFBLElBQ0F5dkIsV0FFQWdqQixFQUFBMUgsRUFBQVksU0FBQXRkLFFBQUEvYyxFQUFBODhCLGVBR0FGLEVBQUFuRCxFQUFBN3lCLFNBQUFsWSxPQUFBK3FDLEVBQUF0TSxTQUFBeUwsVUFDQXphLEVBQUFzYixFQUFBN3lCLFNBQUFqWCxHQUFBaXRDLEdBQUF6ZSxZQUdBc2IsRUFBQUksVUFBQUosRUFBQXhOLE9BQUFyOEIsTUFBQSxTQUFBb3hDLEdBRUFyeEMsRUFBQSxJQUFBOHBDLEVBQUF0TSxTQUFBMkwsV0FBQVcsRUFBQXRNLFNBQUEwTCxVQUFBb0QsS0FBQXRCLElBQUEsR0FBQXNCLEtBQUF4QyxFQUFBN3lCLFNBQUFsWSxPQUFBK3FDLEVBQUF0TSxTQUFBMEwsV0FFQTFhLEdBREFuZSxFQUFBekYsRUFBQXFNLFNBQUEsYUFBQWpYLEdBQUFBLElBQ0F3dUIsWUFFQSxTQUFBNmlCLEdBQUEsSUFBQXZILEVBQUF4TixPQUFBL2tCLE9BRUFpWCxFQUFBNWpCLEVBQUE2QixLQUFBLGVBQUF6TSxHQUFBOHBDLEVBQUF0TSxTQUFBMEwsV0FBQTFhLFdBQ0FzYixFQUFBeE4sT0FBQXI4QixNQUFBLEdBRUE0dUMsR0FBQSxJQUVBeUMsRUFBQXpDLEVBQUFoWCxTQUFBeVUsS0FDQTlkLEVBQUFzYixFQUFBN3lCLFNBQUFqWCxHQUFBc3hDLEdBQUE5aUIsaUJBT0EsSUFBQSxJQUNBcHJCLEVBQUEsZUFBQTBtQyxFQUFBdE0sU0FBQXVJLE9BQUF2WCxFQUFBd0MsS0FBQXdnQixJQUFBaGpCLEVBQUF4aUIsSUFFQWtoQyxFQUFBOXBDLEVBQUEsUUFBQTBtQyxFQUFBdE0sU0FBQWxJLFFBRUF3VSxFQUFBTyxTQUFBLEdBRUFQLEVBQUF0TSxTQUFBK0osWUFBQTJKLEVBQUFwSCxFQUFBeE4sT0FBQS9rQixNQUFBKzBCLE9BTUExaEMsRUFBQTJqQyxjQUFBLFdBRUEsSUFBQXpFLEVBQUF0TSxTQUFBeUksZUFBQTZELEVBQUF4TixPQUFBcjhCLE9BQ0EsR0FBQTZwQyxFQUFBTyxRQUFBLENBQ0EsSUFBQXNFLEVBQUE5VyxTQUFBaVMsRUFBQXhOLE9BQUEva0IsT0FBQSxFQUNBM00sRUFBQWdrQyxVQUFBRCxFQUFBLFVBTUEvakMsRUFBQTRqQyxjQUFBLFdBRUEsSUFBQTFFLEVBQUF0TSxTQUFBeUksY0FBQSxJQUFBNkQsRUFBQXhOLE9BQUEva0IsUUFDQSxHQUFBdXlCLEVBQUFPLFFBQUEsQ0FDQSxJQUFBc0UsRUFBQTlXLFNBQUFpUyxFQUFBeE4sT0FBQS9rQixPQUFBLEVBQ0EzTSxFQUFBZ2tDLFVBQUFELEVBQUEsVUFTQS9qQyxFQUFBNmpDLFVBQUEsU0FBQWdELEdBRUEzSCxFQUFBN1csV0FFQTZXLEVBQUE3VyxTQUFBeWUsWUFBQSxXQUNBLFNBQUE1SCxFQUFBdE0sU0FBQW9MLGNBQ0FoK0IsRUFBQTJqQyxnQkFFQTNqQyxFQUFBNGpDLGlCQUVBMUUsRUFBQXRNLFNBQUFrTCxPQUVBb0IsRUFBQXRNLFNBQUFvTSxhQUFBeHNDLEtBQUF3TixHQUFBLEdBRUFrL0IsRUFBQXRNLFNBQUE0SyxlQUFBLElBQUFxSixHQUFBckQsRUFBQSxVQVNBeGpDLEVBQUEwakMsU0FBQSxTQUFBbUQsR0FFQTNILEVBQUE3VyxXQUVBMGUsY0FBQTdILEVBQUE3VyxVQUNBNlcsRUFBQTdXLFNBQUEsS0FFQTZXLEVBQUF0TSxTQUFBb00sYUFBQXhzQyxLQUFBd04sR0FBQSxHQUVBay9CLEVBQUF0TSxTQUFBNEssZUFBQSxJQUFBcUosR0FBQXJELEVBQUEsV0FNQXhqQyxFQUFBZ25DLGdCQUFBLFdBQ0EsT0FBQTlILEVBQUF4TixPQUFBL2tCLE9BTUEzTSxFQUFBaW5DLHVCQUFBLFdBQ0EsT0FBQS9ILEVBQUE3eUIsU0FBQWpYLEdBQUE4cEMsRUFBQXhOLE9BQUEva0IsUUFRQTNNLEVBQUFrbkMsZ0JBQUEsU0FBQXY2QixHQUNBLE9BQUF1eUIsRUFBQTd5QixTQUFBalgsR0FBQXVYLElBTUEzTSxFQUFBbW5DLGNBQUEsV0FDQSxPQUFBakksRUFBQTd5QixTQUFBbFksUUFNQTZMLEVBQUFvbkMsVUFBQSxXQUNBLE9BQUFsSSxFQUFBTyxTQU1Bei9CLEVBQUErZ0MsYUFBQSxXQUVBN0IsRUFBQTd5QixTQUFBUSxJQUFBN00sRUFBQTZCLEtBQUEsY0FBQTBnQyxXQUFBckMsS0FFQWhCLEVBQUFZLFNBQUEzcUIsSUFBQSxTQUFBMnJCLEtBRUE1QixFQUFBdE0sU0FBQStJLFFBQUFrRixJQUdBM0IsRUFBQXhOLE9BQUFyOEIsT0FBQTZwQyxFQUFBeE4sT0FBQS9rQixNQUFBeXpCLElBQUEsR0FFQWxCLEVBQUF4TixPQUFBL2tCLE9BQUF5ekIsTUFBQWxCLEVBQUF4TixPQUFBcjhCLE1BQUEsR0FFQTZwQyxFQUFBdE0sU0FBQWlLLFFBQUFxQyxFQUFBdE0sU0FBQXNLLGNBQ0EyRixJQUNBekIsRUFBQWxDLEVBQUF4TixPQUFBL2tCLFFBRUF1eUIsRUFBQXRNLFNBQUErSixZQUFBMkosRUFBQXBILEVBQUF4TixPQUFBL2tCLE1BQUErMEIsTUFNQTFoQyxFQUFBcW5DLGNBQUEsV0FFQW5JLEVBQUE4QixjQUNBOUIsRUFBQThCLGFBQUEsRUFDQWhHLEVBQUEsWUFBQXhwQyxNQUFBOGMsU0FDQTR3QixFQUFBN3lCLFNBQUF6WCxLQUFBLGdCQUNBNEIsSUFBQXdrQyxFQUFBeHBDLE1BQUE4aEIsS0FBQSxhQUNBMG5CLEVBQUF4cEMsTUFBQTJSLEtBQUEsUUFBQTYzQixFQUFBeHBDLE1BQUE4aEIsS0FBQSxjQUVBMG5CLEVBQUF4cEMsTUFBQTg2QixXQUFBLGdCQUdBOTFCLElBQUF3a0MsRUFBQXhwQyxNQUFBOGhCLEtBQUEsYUFDQTloQixLQUFBMlIsS0FBQSxRQUFBNjNCLEVBQUF4cEMsTUFBQThoQixLQUFBLGNBRUEwbkIsRUFBQXhwQyxNQUFBODZCLFdBQUEsU0FFQTBPLEVBQUF4cEMsTUFBQTRrQyxTQUFBQSxTQUNBOEksRUFBQS9CLFNBQUFuOUIsSUFBQWsvQixFQUFBL0IsU0FBQW45QixHQUFBc08sU0FDQTR3QixFQUFBL0IsU0FBQXYvQixNQUFBc2hDLEVBQUEvQixTQUFBdi9CLEtBQUEwUSxTQUNBNHdCLEVBQUEvQixTQUFBNXdCLE1BQUEyeUIsRUFBQS9CLFNBQUE1d0IsS0FBQStCLFNBQ0E0d0IsRUFBQThELFNBQUE5RCxFQUFBdE0sU0FBQXVLLFdBQUErQixFQUFBdE0sU0FBQXNLLGFBQUFnQyxFQUFBOEQsUUFBQTEwQixTQUNBMHNCLEVBQUEsY0FBQXhwQyxNQUFBOGMsU0FDQTR3QixFQUFBL0IsU0FBQWtHLFFBQUFuRSxFQUFBL0IsU0FBQWtHLE9BQUEvMEIsU0FDQXk0QixjQUFBN0gsRUFBQTdXLFVBQ0E2VyxFQUFBdE0sU0FBQXNKLFlBQUFsQixFQUFBenBDLFFBQUErb0MsT0FBQSxTQUFBMkcsR0FDQS9CLEVBQUF0TSxTQUFBZ0ssaUJBQUE1QixFQUFBNXBDLFVBQUFrcEMsT0FBQSxVQUFBa0gsR0FFQXhHLEVBQUF4cEMsTUFBQXdpQixXQUFBLFlBRUFnbkIsRUFBQXpwQyxRQUFBZ29CLElBQUEsT0FBQTZxQixHQUFBN3FCLElBQUEsUUFBQTRxQixLQU1BbmtDLEVBQUFzbkMsYUFBQSxTQUFBMVUsUUFDQXA4QixJQUFBbzhCLElBQUFoOUIsRUFBQWc5QixHQUNBNXlCLEVBQUFxbkMsZ0JBQ0E3ekMsSUFFQXduQyxFQUFBaDdCLEdBQUFzVCxLQUFBLFdBQUE5aEIsT0FHQWdDLElBRUF3bkMsRUFBQWg3QixHQUFBc1QsS0FBQSxXQUFBOWhCLE1BR0FBLE9BcGtEQSxDQXVrREE0QixRQ3BrREEsU0FBQTdCLEVBQUFILEVBQUE0cEMsRUFBQXhrQyxHQUNBLGFBS0EsR0FBQXdrQyxFQU9BLEdBQUFBLEVBQUF6bkMsR0FBQWcwQyxTQUVBLFlBQUFoMkMsR0FDQXdnQixRQUFBeTFCLElBQUEsb0NBSEEsQ0FZQSxJQUFBdE0sR0FHQXVNLE1BQUEsRUFHQXBoQixRQUFBLEdBQUEsR0FHQXFoQixPQUFBLEdBR0FDLFVBQUEsRUFHQUMsUUFBQSxFQUdBQyxTQUFBLEVBR0FDLFNBQUEsRUFLQWhxQixTQUNBLFlBQ0EsYUFDQSxTQUNBLFFBR0EsU0FJQWlxQixTQUFBLEVBS0FDLFNBQUEsT0FHQUMsU0FBQSxFQUdBQyxPQUFBLEVBRUFyZ0MsT0FLQXNnQyxRQUFBLFFBSUFwVixNQUdBSCxVQUlBdGYsTUFDQWkwQixVQUFBLEtBTUFhLFFBR0FDLElBQUEsK05BS0FGLFNBQUEsRUFJQWh6QixPQUdBaFMsTUFDQW1sQyxVQUFBLFNBTUFDLFlBQUEsUUFTQUMsZ0JBQUEsT0FHQUMsa0JBQUEsSUFJQUMsWUFBQSxPQWFBQyxpQkFBQSxPQUdBQyxtQkFBQSxJQUdBQyxXQUFBLEdBR0FDLFVBQUEsR0FHQUMsUUFDQSx3Y0FjQUMsV0FBQSx1Q0FHQUMsU0FBQSxvREFFQUMsUUFFQUMsU0FBQSx3T0FNQXZqQixLQUFBLHVOQU1Bd2pCLE1BQUEsZ0xBUUFwQixTQUFBLHVGQUdBcUIsVUFBQSw2TUFNQUMsV0FBQSwrTUFRQUMsU0FBQSxPQU9BQyxXQUFBLEVBR0FDLFdBQUEsRUFHQUMsV0FBQSxFQU1BQyxZQUNBNUwsV0FBQSxHQUlBc0gsT0FDQXVFLFVBQUEsRUFDQUMsVUFBQSxHQUtBdmpDLEtBQUEsS0FhQXdqQyxTQUVBQyxXQUNBaE0sV0FBQSxFQUNBclQsTUFBQSxLQUdBc2YsUUFDQWpNLFdBQUEsRUFDQWtNLGFBQUEsRUFDQVYsU0FBQSxzQkFDQVcsS0FBQSxLQWVBQyxPQUFBblAsRUFBQWhrQyxLQUVBb3pDLFdBQUFwUCxFQUFBaGtDLEtBQ0FxekMsVUFBQXJQLEVBQUFoa0MsS0FFQXN6QyxXQUFBdFAsRUFBQWhrQyxLQUNBdXpDLFVBQUF2UCxFQUFBaGtDLEtBRUF3ekMsWUFBQXhQLEVBQUFoa0MsS0FDQXl6QyxXQUFBelAsRUFBQWhrQyxLQUVBMHpDLFdBQUExUCxFQUFBaGtDLEtBQ0EyekMsYUFBQTNQLEVBQUFoa0MsS0FrQkE0ekMsYUFBQSxTQUFBbFYsRUFBQXBjLEdBQ0EsTUFBQSxVQUFBb2MsRUFBQXgrQixNQUFBLFFBSUEyekMsV0FBQSxRQUdBQyxhQUFBLFFBR0FDLGlCQUFBLEVBQ0FDLGVBQUEsRUFDQUMsaUJBQUEsRUFNQUMsUUFDQTdrQixPQUFBLEVBRUF1a0IsYUFBQSxTQUFBbFYsRUFBQXBjLEdBQ0EsTUFBQSxVQUFBb2MsRUFBQXgrQixNQUFBLGtCQUVBMnpDLFdBQUEsU0FBQW5WLEVBQUFwYyxHQUNBLE1BQUEsVUFBQW9jLEVBQUF4K0IsS0FBQSxpQkFBQSxTQUVBNnpDLGdCQUFBLFNBQUFyVixFQUFBcGMsR0FDQSxNQUFBLFVBQUFvYyxFQUFBeCtCLE1BQUEsUUFFQTh6QyxjQUFBLFNBQUF0VixFQUFBcGMsR0FDQSxNQUFBLFVBQUFvYyxFQUFBeCtCLE1BQUEsU0FRQWtQLEtBQUEsS0FDQStrQyxNQUNBQyxJQUNBQyxNQUFBLFFBQ0FDLEtBQUEsT0FDQUMsS0FBQSxXQUNBQyxNQUFBLHdFQUNBQyxXQUFBLGtCQUNBQyxVQUFBLGtCQUNBQyxZQUFBLGNBQ0FDLE9BQUEsYUFDQUMsU0FBQSxXQUNBQyxNQUFBLFFBQ0FDLEtBQUEsUUFFQUMsSUFDQVgsTUFBQSxhQUNBQyxLQUFBLFNBQ0FDLEtBQUEsU0FDQUMsTUFBQSxxR0FDQUMsV0FBQSxtQkFDQUMsVUFBQSxtQkFDQUMsWUFBQSxXQUNBQyxPQUFBLGlCQUNBQyxTQUFBLGdCQUNBQyxNQUFBLFNBQ0FDLEtBQUEsYUFTQUUsRUFBQWpSLEVBQUF6cEMsR0FDQTI2QyxFQUFBbFIsRUFBQTVwQyxHQUVBKzZDLEVBQUEsRUFjQUMsRUFDQTc2QyxFQUFBNjJCLHVCQUNBNzJCLEVBQUE4NkMsNkJBQ0E5NkMsRUFBQSs2QywwQkFDQS82QyxFQUFBZzdDLHdCQUVBLFNBQUExM0MsR0FDQSxPQUFBdEQsRUFBQTZmLFdBQUF2YyxFQUFBLElBQUEsS0FRQTIzQyxFQUFBLFdBQ0EsSUFBQTd5QixFQUFBM1osRUFBQTVPLEVBQUEwQixjQUFBLGVBRUEyNUMsR0FDQUMsV0FBQSxnQkFDQUMsWUFBQSxpQkFDQUMsY0FBQSxnQkFDQUMsaUJBQUEsdUJBR0EsSUFBQWx6QixLQUFBOHlCLEVBQ0EsR0FBQXpzQyxFQUFBaVYsTUFBQTBFLEtBQUFuakIsRUFDQSxPQUFBaTJDLEVBQUE5eUIsR0FJQSxNQUFBLGdCQWhCQSxHQXdCQW16QixFQUFBLFNBQUFDLEdBQ0EsT0FBQUEsR0FBQUEsRUFBQTU0QyxRQUFBNDRDLEVBQUEsR0FBQXhXLGNBT0F5VyxFQUFBLFNBQUExL0IsRUFBQStiLEVBQUExYyxHQUNBbmIsS0FFQTYzQixLQUFBMlIsRUFBQXJsQyxRQUFBLEdBQUFnWCxNQUFBQSxHQUFBcXVCLEVBQUF1TSxTQUFBck0sU0FBQTdSLE9BRUEyUixFQUFBdU0sU0FBQTBGLFdBSkF6N0MsS0FLQTYzQixLQUFBMlIsRUFBQXJsQyxRQUFBLEtBTEFuRSxLQUtBNjNCLEtBTEE3M0IsS0FLQTYzQixLQUFBNmhCLFNBSUE3aEIsR0FBQTJSLEVBQUF6a0MsUUFBQTh5QixFQUFBdkwsV0FUQXRzQixLQVVBNjNCLEtBQUF2TCxRQUFBdUwsRUFBQXZMLFNBVkF0c0IsS0FhQW1OLEdBYkFuTixLQWFBNjNCLEtBQUExcUIsTUFBQXd0QyxFQWJBMzZDLEtBY0EwN0MsU0FkQTE3QyxLQWdCQTI3QyxVQUFBbGdCLFNBaEJBejdCLEtBZ0JBNjNCLEtBQUExYyxNQUFBLEtBQUEsRUFoQkFuYixLQWlCQTQ3QyxVQUFBLEtBakJBNTdDLEtBbUJBNjdDLFFBQUEsS0FuQkE3N0MsS0FvQkE4N0MsUUFBQSxFQXBCQTk3QyxLQXNCQSs3QyxTQUFBLEtBdEJBLzdDLEtBeUJBZzhDLFlBQUFsZ0MsR0F6QkE5YixLQTJCQTA3QyxNQUFBLzRDLFNBM0JBM0MsS0FnQ0FpOEMsV0FBQXpTLEVBQUE1cEMsRUFBQXNWLGVBQUEwVixPQWhDQTVxQixLQW1DQWs4QyxVQW5DQWw4QyxLQXFDQWdDLFNBR0F3bkMsRUFBQXJsQyxPQUFBcTNDLEVBQUFoNUMsV0FLQVIsS0FBQSxXQUNBLElBSUFtNkMsRUFDQUMsRUFDQUMsRUFOQTloQyxFQUFBdmEsS0FDQXM4QyxFQUFBL2hDLEVBQUFtaEMsTUFBQW5oQyxFQUFBb2hDLFdBQ0FZLEVBQUFELEVBQUF6a0IsS0FDQTJrQixFQUFBaFQsRUFBQXVNLFNBQUF5RyxlQUtBamlDLEVBQUF3YixVQUFBMmtCLEVBQUEza0IsWUFDQXhiLEVBQUF5YixXQUFBMGtCLEVBQUExa0IsYUFNQXdULEVBQUF1TSxTQUFBMEcsZ0JBRUFqVCxFQUFBLFFBQUExTixTQUFBLG1CQUdBLG1CQUFBdnVCLEtBQUFtdkMsVUFBQUMsYUFBQTU4QyxFQUFBNjhDLFNBTUEsVUFBQU4sRUFBQTUyQyxNQUNBOGpDLEVBQUEsUUFBQTdsQixJQUFBLE9BQUEsRUFBQTZsQixFQUFBLFFBQUF6VCxhQUFBK0YsU0FBQSxvQkFHQTBOLEVBQUF1TSxTQUFBMEYsVUFBQTc3QyxFQUFBK2tCLEtBQUFrNEIsYUFBQTk4QyxFQUFBKzhDLGNBRUFOLElBQUF4M0MsSUFDQW0zQyxFQUFBM1MsRUFBQSwyREFBQTNaLFNBQUEsUUFFQTJzQixFQUFBaFQsRUFBQXVNLFNBQUF5RyxlQUFBTCxFQUFBLEdBQUFyWCxZQUFBcVgsRUFBQSxHQUFBWSxZQUVBWixFQUFBci9CLFVBR0Ewc0IsRUFBQSxRQUFBbGEsT0FBQSxpR0FBQWt0QixFQUFBLGlCQUNBaFQsRUFBQSxRQUFBMU4sU0FBQSw4QkFTQXVnQixFQUFBLEdBRUE3UyxFQUFBcG1DLEtBQUFtNUMsRUFBQWp3QixRQUFBLFNBQUFuUixFQUFBblUsR0FDQXExQyxHQUFBRSxFQUFBN0UsT0FBQTF3QyxJQUFBLEtBS0FvMUMsRUFBQTVTLEVBQ0FqdkIsRUFBQXlpQyxVQUFBemlDLEVBQ0FnaUMsRUFBQWhGLFFBQ0FueUMsUUFBQSxjQUFBaTNDLEdBQ0FqM0MsUUFBQSxhQUFBbTNDLEVBQUE3RSxPQUFBRyxVQUFBMEUsRUFBQTdFLE9BQUFJLGNBR0FubUMsS0FBQSxLQUFBLHNCQUFBNEksRUFBQXBOLElBQ0EydUIsU0FBQSxzQkFDQUEsU0FBQXlnQixFQUFBakYsV0FDQXgxQixLQUFBLFdBQUF2SCxHQUNBc1YsU0FBQTBzQixFQUFBeEUsVUFHQXg5QixFQUFBMGlDLE9BQ0F2c0IsVUFBQTByQixJQUdBLEtBQUEsUUFBQSxVQUFBLFVBQUEsUUFBQSxVQUFBLGNBQUFjLFFBQUEsU0FBQUMsR0FDQTVpQyxFQUFBMGlDLE1BQUFFLEdBQUFmLEVBQUEvckMsS0FBQSxhQUFBOHNDLEtBR0E1aUMsRUFBQW9RLFFBQUEsVUFHQXBRLEVBQUE2aUMsV0FHQTdpQyxFQUFBOGlDLE9BQUE5aUMsRUFBQW9oQyxZQVFBcUIsVUFBQSxTQUFBdjNDLEVBQUE2M0MsR0FDQSxJQUFBcDlDLEVBQUF1RixFQUFBb3lCLEtBQUE4aEIsS0FBQWwwQyxFQUFBb3lCLEtBQUFqakIsTUFFQSxPQUFBMG9DLEVBQUFsNEMsUUFBQSxpQkFBQSxTQUFBd0gsRUFBQXFOLEdBQ0EsSUFBQWpULEVBQUE5RyxFQUFBK1osR0FFQSxPQUFBalQsSUFBQWhDLEVBQ0E0SCxFQUdBNUYsS0FRQWcxQyxZQUFBLFNBQUFsZ0MsR0FDQSxJQUFBdkIsRUFBQXZhLEtBQ0F1OUMsRUFBQS9ULEVBQUFqakMsVUFBQXVWLEdBRUEwdEIsRUFBQXBtQyxLQUFBbTZDLEVBQUEsU0FBQS81QyxFQUFBMjVDLEdBQ0EsSUFFQUssRUFDQTkzQyxFQUNBcEIsRUFDQW01QyxFQUxBaDRDLEtBQ0FveUIsS0FTQTJSLEVBQUEza0MsY0FBQXM0QyxJQUtBMTNDLEVBQUEwM0MsRUFDQXRsQixFQUFBc2xCLEVBQUF0bEIsTUFBQXNsQixHQUVBLFdBQUEzVCxFQUFBOWpDLEtBQUF5M0MsSUFBQTNULEVBQUEyVCxHQUFBeDZDLFFBS0FrMUIsR0FGQTJsQixFQUFBaFUsRUFBQTJULElBRUFyN0IsUUFDQStWLEVBQUEyUixFQUFBcmxDLFVBQUEwekIsRUFBQUEsRUFBQXp6QixjQUdBczVDLE1BQUFGLEVBRUEvM0MsRUFBQW5CLElBQUF1ekIsRUFBQXZ6QixLQUFBazVDLEVBQUE3ckMsS0FBQSxRQUlBbE0sRUFBQUMsTUFBQUQsRUFBQW5CLE1BQ0FtQixFQUFBQyxLQUFBLFNBQ0FELEVBQUFuQixJQUFBNjRDLElBUUExM0MsR0FDQUMsS0FBQSxPQUNBcEIsSUFBQTY0QyxFQUFBLElBTUExM0MsRUFBQW95QixLQUFBMlIsRUFBQXJsQyxRQUFBLEtBQUFvVyxFQUFBc2QsS0FBQUEsR0FHQTJSLEVBQUF6a0MsUUFBQTh5QixFQUFBdkwsV0FDQTdtQixFQUFBb3lCLEtBQUF2TCxRQUFBdUwsRUFBQXZMLFNBT0E1bUIsRUFBQUQsRUFBQUMsTUFBQUQsRUFBQW95QixLQUFBbnlCLEtBQ0FwQixFQUFBbUIsRUFBQW5CLEtBQUEsSUFFQW9CLEdBQUFwQixJQUNBQSxFQUFBc0ksTUFBQSx3RkFDQWxILEVBQUEsUUFFQXBCLEVBQUFzSSxNQUFBLHdCQUNBbEgsRUFBQSxNQUVBLE1BQUFwQixFQUFBcTVDLE9BQUEsS0FDQWo0QyxFQUFBLFdBSUFBLEVBQ0FELEVBQUFDLEtBQUFBLEVBR0E2VSxFQUFBb1EsUUFBQSxrQkFBQWxsQixHQU9BQSxFQUFBMFYsTUFBQVosRUFBQW1oQyxNQUFBLzRDLE9BR0E4QyxFQUFBb3lCLEtBQUE2bEIsUUFBQWo0QyxFQUFBb3lCLEtBQUE2bEIsTUFBQS82QyxlQUNBOEMsRUFBQW95QixLQUFBNmxCLE9BR0FqNEMsRUFBQW95QixLQUFBK2xCLFFBQUFuNEMsRUFBQW95QixLQUFBNmxCLFFBQ0FqNEMsRUFBQW95QixLQUFBK2xCLE9BQUFuNEMsRUFBQW95QixLQUFBNmxCLE1BQUFydEMsS0FBQSxjQUdBNUssRUFBQW95QixLQUFBK2xCLFNBQUFuNEMsRUFBQW95QixLQUFBK2xCLE9BQUFqN0MsZUFDQThDLEVBQUFveUIsS0FBQStsQixPQUlBLGFBQUFwVSxFQUFBOWpDLEtBQUFELEVBQUFveUIsS0FBQTlSLFdBQ0F0Z0IsRUFBQW95QixLQUFBOVIsUUFBQXRnQixFQUFBb3lCLEtBQUE5UixRQUFBdGlCLE1BQUEwNUMsR0FBQTVpQyxFQUFBOVUsS0FHQSxhQUFBK2pDLEVBQUE5akMsS0FBQTZVLEVBQUFzZCxLQUFBOVIsV0FDQXRnQixFQUFBb3lCLEtBQUE5UixRQUFBeEwsRUFBQXNkLEtBQUE5UixRQUFBdGlCLE1BQUEwNUMsR0FBQTVpQyxFQUFBOVUsS0FJQUEsRUFBQW95QixLQUFBOVIsbUJBQUF5akIsSUFDQS9qQyxFQUFBb3lCLEtBQUE5UixRQUFBdGdCLEVBQUFveUIsS0FBQTlSLFVBQUEvZ0IsRUFBQSxHQUFBUyxFQUFBb3lCLEtBQUE5UixRQUFBLElBS0EsU0FBQXJnQixJQUNBKzNDLEVBQUFuNUMsRUFBQW1ELE1BQUEsTUFBQSxJQUVBOUUsT0FBQSxJQUNBOEMsRUFBQW5CLElBQUFtNUMsRUFBQXB2QyxRQUVBNUksRUFBQW95QixLQUFBMW5CLE9BQUFzdEMsRUFBQXB2QyxTQUlBLFFBQUE1SSxFQUFBb3lCLEtBQUEyZSxXQUVBaE4sRUFBQS9pQyxRQUFBZixHQUFBLE9BQUEsU0FBQSxVQUFBLEdBQ0FELEVBQUFveUIsS0FBQXllLFNBQUEsRUFDQTd3QyxFQUFBb3lCLEtBQUEyZSxVQUFBLEdBR0Evd0MsRUFBQW95QixLQUFBMmUsVUFBQSxHQU1BLFFBQUE5d0MsSUFDQUQsRUFBQUMsS0FBQSxTQUVBRCxFQUFBb3lCLEtBQUErZSxPQUFBRCxTQUFBLEdBSUFseEMsRUFBQW95QixLQUFBNmUsUUFFQWp4QyxFQUFBb3lCLEtBQUEyUixFQUFBcmxDLFFBQUEsRUFBQXNCLEVBQUFveUIsTUFFQXdlLFFBQUEsRUFDQUMsUUFBQSxFQUVBRSxTQUFBLEVBR0FMLFNBQUEsRUFHQW9DLFVBQUEsRUFDQUosV0FBQSxFQUNBSyxPQUFBLEVBQ0EzRSxNQUFBLEVBR0F1RixjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsY0FBQSxFQUNBQyxpQkFBQSxFQUNBQyxlQUFBLEVBQ0FDLGlCQUFBLEtBUUFsL0IsRUFBQW1oQyxNQUFBbDdDLEtBQUFpRixNQWVBbzRDLFVBQUEsV0FDQSxJQUFBdGpDLEVBQUF2YSxLQUVBdWEsRUFBQXVqQyxlQUdBdmpDLEVBQUEwaUMsTUFBQXZzQixVQUFBaEosR0FBQSxpQkFBQSx3QkFBQSxTQUFBbmIsR0FDQUEsRUFBQXdkLGtCQUNBeGQsRUFBQXVkLGlCQUVBdlAsRUFBQXE5QixNQUFBcnJDLEtBRUFtYixHQUFBLGlDQUFBLHVCQUFBLFNBQUFuYixHQUNBQSxFQUFBd2Qsa0JBQ0F4ZCxFQUFBdWQsaUJBRUF2UCxFQUFBd2pDLGFBRUFyMkIsR0FBQSxpQ0FBQSx1QkFBQSxTQUFBbmIsR0FDQUEsRUFBQXdkLGtCQUNBeGQsRUFBQXVkLGlCQUVBdlAsRUFBQW5PLFNBRUFzYixHQUFBLFdBQUEsdUJBQUEsU0FBQW5iLEdBRUFnTyxFQUFBQSxFQUFBeWpDLGVBQUEsZ0JBQUEsa0JBS0F2RCxFQUFBL3lCLEdBQUEsaUNBQUEsU0FBQW5iLEdBRUFBLEdBQUFBLEVBQUFnZSxlQUFBLFdBQUFoZSxFQUFBZ2UsY0FBQTdrQixLQUVBazFDLEVBQUEsV0FDQXJnQyxFQUFBMGpDLFlBS0ExakMsRUFBQTBpQyxNQUFBaUIsTUFBQW41QixPQUVBbkYsV0FBQSxXQUNBckYsRUFBQTBpQyxNQUFBaUIsTUFBQXI1QixPQUVBdEssRUFBQTBqQyxVQUNBLFFBUUF2RCxFQUFBaHpCLEdBQUEsYUFBQSxTQUFBbmIsR0FDQSxJQUFBNHhDLEVBQUEzVSxFQUFBdU0sU0FBQXZNLEVBQUF1TSxTQUFBMEcsY0FBQSxLQUVBMEIsRUFBQUMsWUFBQUQsRUFBQWphLFVBQUFpYSxFQUFBamEsUUFBQXJNLEtBQUFxZ0IsV0FBQTFPLEVBQUFqOUIsRUFBQTdILFFBQUE2M0IsU0FBQSx1QkFBQWlOLEVBQUFqOUIsRUFBQTdILFFBQUFxVixHQUFBbmEsSUFJQXUrQyxHQUFBLFVBQUEzVSxFQUFBajlCLEVBQUE3SCxRQUFBaWYsSUFBQSxjQUFBdzZCLEVBQUFsQixNQUFBdnNCLFVBQUFoYyxJQUFBbkksRUFBQTdILFFBQUEvQixTQUNBNEosRUFBQXdkLGtCQUVBbzBCLEVBQUFscEMsUUFHQXdsQyxFQUFBMWtCLFVBQUF4YixFQUFBd2IsV0FBQUMsV0FBQXpiLEVBQUF5YixlQU1BMGtCLEVBQUFoekIsR0FBQSxhQUFBLFNBQUFuYixHQUNBLElBQUEyM0IsRUFBQTNwQixFQUFBMnBCLFFBQ0FtYSxFQUFBOXhDLEVBQUE4ZixTQUFBOWYsRUFBQTJnQixNQUVBLEdBQUFnWCxHQUFBQSxFQUFBck0sS0FBQXNlLFdBSUEzTSxFQUFBajlCLEVBQUE3SCxRQUFBcVYsR0FBQSxXQUFBeXZCLEVBQUFqOUIsRUFBQTdILFFBQUFxVixHQUFBLFlBS0EsT0FBQSxJQUFBc2tDLEdBQUEsS0FBQUEsR0FDQTl4QyxFQUFBdWQsc0JBRUF2UCxFQUFBcTlCLE1BQUFyckMsSUFNQSxLQUFBOHhDLEdBQUEsS0FBQUEsR0FDQTl4QyxFQUFBdWQsc0JBRUF2UCxFQUFBd2pDLFlBTUEsS0FBQU0sR0FBQSxLQUFBQSxHQUNBOXhDLEVBQUF1ZCxzQkFFQXZQLEVBQUFuTyxhQUtBbU8sRUFBQW9RLFFBQUEsZUFBQXBlLEVBQUE4eEMsS0FLQTlqQyxFQUFBbWhDLE1BQUFuaEMsRUFBQW9oQyxXQUFBOWpCLEtBQUEwZSxXQUNBaDhCLEVBQUErakMsbUJBQUEsRUFFQTVELEVBQUFoekIsR0FBQSw2SEFBQSxTQUFBbmIsR0FDQWdPLEVBQUErakMsbUJBQUEsRUFFQS9qQyxFQUFBZ2tDLFFBQ0Foa0MsRUFBQWlrQyxlQUdBamtDLEVBQUFna0MsUUFBQSxJQUdBaGtDLEVBQUFra0MsYUFBQTErQyxFQUFBdTFDLFlBQUEsV0FDQS82QixFQUFBK2pDLHFCQUVBL2pDLEVBQUErakMsb0JBQUEvakMsRUFBQW1oQyxNQUFBbmhDLEVBQUFvaEMsV0FBQTlqQixLQUFBMGUsV0FDQWg4QixFQUFBZ2tDLFFBQUEsRUFDQWhrQyxFQUFBK2pDLG1CQUFBLEVBRUEvakMsRUFBQW1rQyxpQkFHQSxPQVNBWixhQUFBLFdBR0FyRCxFQUFBMXlCLElBQUEsa0NBQ0EyeUIsRUFBQTN5QixJQUFBLGtDQUVBL25CLEtBQUFpOUMsTUFBQXZzQixVQUFBM0ksSUFBQSwrQkFMQS9uQixLQU9BeStDLGVBQ0ExK0MsRUFBQXcxQyxjQVJBdjFDLEtBUUF5K0MsY0FSQXorQyxLQVVBeStDLGFBQUEsT0FRQVYsU0FBQSxTQUFBcG9CLEdBQ0EsT0FBQTMxQixLQUFBcTlDLE9BQUFyOUMsS0FBQTg3QyxRQUFBLEVBQUFubUIsSUFPQXZwQixLQUFBLFNBQUF1cEIsR0FDQSxPQUFBMzFCLEtBQUFxOUMsT0FBQXI5QyxLQUFBODdDLFFBQUEsRUFBQW5tQixJQU9BMG5CLE9BQUEsU0FBQXpuQixFQUFBRCxFQUFBZ3BCLEdBQ0EsSUFDQTVDLEVBQ0E5RixFQUNBL1IsRUFDQTZaLEVBQ0FhLEVBQ0FDLEVBQ0FDLEVBUEF2a0MsRUFBQXZhLEtBU0ErK0MsRUFBQXhrQyxFQUFBbWhDLE1BQUEvNEMsT0FFQSxLQUFBNFgsRUFBQXlrQyxXQUFBemtDLEVBQUE2akMsV0FBQTdqQyxFQUFBMGtDLGFBQUExa0MsRUFBQXdoQyxVQUFBLENBT0EsR0FIQW5tQixFQUFBNkYsU0FBQTdGLEVBQUEsTUFDQXFnQixFQUFBMTdCLEVBQUEycEIsUUFBQTNwQixFQUFBMnBCLFFBQUFyTSxLQUFBb2UsS0FBQTE3QixFQUFBc2QsS0FBQW9lLFFBRUFyZ0IsRUFBQSxHQUFBQSxHQUFBbXBCLEdBQ0EsT0FBQSxFQUtBLEdBRkFoRCxFQUFBeGhDLEVBQUF3aEMsU0FBQSxPQUFBeGhDLEVBQUF3aEMsV0FFQWdELEVBQUEsSUFBQWhELEdBQUF4aEMsRUFBQXlrQyxXQUFBLENBNENBLEdBeENBakIsRUFBQXhqQyxFQUFBMnBCLFFBRUEzcEIsRUFBQXFoQyxVQUFBcmhDLEVBQUFvaEMsVUFDQXBoQyxFQUFBc2hDLFFBQUF0aEMsRUFBQXVoQyxRQUdBNVgsRUFBQTNwQixFQUFBMmtDLFlBQUF0cEIsR0FFQW1wQixFQUFBLEtBQ0E5SSxHQUFBL1IsRUFBQS9vQixNQUFBLElBQ0FaLEVBQUEya0MsWUFBQXRwQixFQUFBLElBR0FxZ0IsR0FBQS9SLEVBQUEvb0IsTUFBQTRqQyxFQUFBLElBQ0F4a0MsRUFBQTJrQyxZQUFBdHBCLEVBQUEsSUFJQXJiLEVBQUEycEIsUUFBQUEsRUFDQTNwQixFQUFBb2hDLFVBQUF6WCxFQUFBL29CLE1BQ0FaLEVBQUF1aEMsUUFBQTVYLEVBQUF0TyxJQUVBcmIsRUFBQW9RLFFBQUEsYUFBQW94QixHQUVBeGhDLEVBQUE0a0MsaUJBRUFOLEVBQUFyVixFQUFBdU0sU0FBQXFKLGFBQUFsYixFQUFBbWIsUUFFQW5iLEVBQUFvYixTQUFBLElBQUFULEVBQUFqcUIsTUFBQSxJQUFBaXFCLEVBQUFqdkMsT0FBQXMwQixFQUFBbWIsT0FBQTlpQixTQUFBLHFCQUNBMkgsRUFBQXFiLGVBQUF2NkMsRUFFQXdrQyxFQUFBNWpDLFVBQUErdkIsR0FDQXVPLEVBQUFxYixlQUFBNXBCLEVBRUFBLEVBQUF1TyxFQUFBck0sS0FBQWtrQixFQUFBLG9CQUFBLHNCQUdBcG1CLEVBQUE4RixTQUFBOUYsRUFBQSxJQUdBb21CLEVBbUJBLE9BakJBN1gsRUFBQXJNLEtBQUFtZixpQkFBQXJoQixHQUNBcGIsRUFBQTBpQyxNQUFBdnNCLFVBQUEvTSxJQUFBLHNCQUFBZ1MsRUFBQSxNQUdBcGIsRUFBQTBpQyxNQUFBdnNCLFVBQUF5TCxZQUFBLHNCQUVBbWYsRUFBQS9nQyxFQUFBMGlDLE1BQUF2c0IsV0FFQW5XLEVBQUEwaUMsTUFBQXZzQixVQUFBb0wsU0FBQSxvQkFHQW9JLEVBQUFtYixPQUFBdmpCLFNBQUEsMkJBRUF2aEIsRUFBQWlsQyxVQUFBdGIsUUFFQTNwQixFQUFBbzhCLFVBTUFuTixFQUFBcG1DLEtBQUFtWCxFQUFBMmhDLE9BQUEsU0FBQS9nQyxFQUFBd2pDLEdBQ0FuVixFQUFBdU0sU0FBQWh6QixLQUFBNDdCLEVBQUFVLFVBSUFuYixFQUFBbWIsT0FBQWxqQixZQUFBLGlEQUFBTCxTQUFBLDJCQUdBb0ksRUFBQW9iLFNBQ0FWLEVBQUExNUMsS0FBQXU2QyxNQUFBdmIsRUFBQW1iLE9BQUFydUIsU0FFQXdZLEVBQUFwbUMsS0FBQW1YLEVBQUEyaEMsT0FBQSxTQUFBL2dDLEVBQUF3akMsR0FDQSxJQUFBL29CLEVBQUErb0IsRUFBQS9vQixJQUFBc08sRUFBQXRPLElBRUE0VCxFQUFBdU0sU0FBQXhjLFFBQUFvbEIsRUFBQVUsUUFDQXp2QyxJQUFBLEVBQ0FnbEIsS0FBQWdCLEVBQUFncEIsRUFBQWhwQixFQUFBK29CLEVBQUE5bUIsS0FBQXFlLFFBQ0F2Z0IsRUFBQSxXQUVBZ3BCLEVBQUFVLE9BQUF2a0IsV0FBQSxTQUFBcUIsWUFBQSxpREFFQXdpQixFQUFBL29CLE1BQUFyYixFQUFBdWhDLFVBQ0E1WCxFQUFBb2IsU0FBQSxFQUVBL2tDLEVBQUE0ZCxpQkFNQTVkLEVBQUEwaUMsTUFBQWlCLE1BQUFyakMsV0FBQWlnQixXQUFBLFNBTUFvSixFQUFBd2IsU0FDQW5sQyxFQUFBb2xDLGNBQUF6YixHQUdBM3BCLEVBQUFpbEMsVUFBQXRiLEdBR0EzcEIsRUFBQW84QixVQUVBb0gsRUFBQW5vQixNQUFBc08sRUFBQXRPLE1BT0FrcEIsRUFBQSxvQkFBQWYsRUFBQW5vQixJQUFBc08sRUFBQXRPLElBQUEsT0FBQSxZQUVBbW9CLEVBQUFzQixPQUFBbGpCLFlBQUEsa0dBRUE0aEIsRUFBQTZCLFlBQUEsRUFFQWpxQixJQUFBdU8sRUFBQW9iLFNBQUFwYixFQUFBck0sS0FBQXNmLG9CQUlBalQsRUFBQW9iLFFBQ0F2QixFQUFBc0IsT0FBQXZqQixTQUFBZ2pCLElBSUFBLEVBQUEscUJBQUFBLEVBQUEsZ0JBQUE1YSxFQUFBck0sS0FBQXNmLGlCQUVBM04sRUFBQXVNLFNBQUF4YyxRQUFBd2tCLEVBQUFzQixPQUFBUCxFQUFBbnBCLEVBQUEsV0FDQW9vQixFQUFBc0IsT0FBQWxqQixZQUFBMmlCLEdBQUFoa0IsV0FBQSxpQkFZQW9rQixZQUFBLFNBQUF0cEIsR0FFQSxJQUNBeXBCLEVBQ0Fsa0MsRUFpQkEsT0FkQUEsR0FEQUEsRUFBQXlhLEVBSkE1MUIsS0FJQTA3QyxNQUFBLzRDLFFBQ0EsRUFMQTNDLEtBS0EwN0MsTUFBQS80QyxPQUFBd1ksRUFBQUEsR0FMQW5iLEtBT0FrOEMsT0FBQXRtQixJQVBBNTFCLEtBT0EwN0MsTUFBQXZnQyxLQUNBa2tDLEVBQUE3VixFQUFBLHNDQUFBM1osU0FSQTd2QixLQVFBaTlDLE1BQUFpQixPQVJBbCtDLEtBVUFrOEMsT0FBQXRtQixHQUFBNFQsRUFBQXJsQyxRQUFBLEtBVkFuRSxLQVVBMDdDLE1BQUF2Z0MsSUFDQXlhLElBQUFBLEVBQ0F5cEIsT0FBQUEsRUFDQUssVUFBQSxJQWJBMS9DLEtBZ0JBNi9DLFlBaEJBNy9DLEtBZ0JBazhDLE9BQUF0bUIsS0FoQkE1MUIsS0FtQkFrOEMsT0FBQXRtQixJQU9Ba3FCLGNBQUEsU0FBQWhNLEVBQUFDLEVBQUFwZSxHQUVBLElBS0FvcUIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFMQTVsQyxFQUFBdmEsS0FFQWtrQyxFQUFBM3BCLEVBQUEycEIsUUFDQWtjLEVBQUFsYyxFQUFBbWMsU0FJQXpCLEVBQUFuakIsU0FBQXlJLEVBQUFtYixPQUFBcnVCLFFBQUEsSUFDQXN2QixFQUFBN2tCLFNBQUF5SSxFQUFBbWIsT0FBQW5vQixTQUFBLElBRUFxcEIsRUFBQXJjLEVBQUFsVCxNQUNBd3ZCLEVBQUF0YyxFQUFBaE4sT0FFQSxTQUFBZ04sRUFBQXgrQixNQUFBdytCLEVBQUF1YyxXQUFBTCxHQUFBN2xDLEVBQUEwa0MsY0FJQXpWLEVBQUF1TSxTQUFBaHpCLEtBQUFxOUIsR0FFQTdsQyxFQUFBMGtDLGFBQUEsRUFFQW5MLEVBQUFBLElBQUE5dUMsRUFBQSxHQUFBNDVDLEVBQUE5SyxFQUNBQyxFQUFBQSxJQUFBL3VDLEVBQUEsR0FBQXM3QyxFQUFBdk0sRUFJQW1NLEVBQUFLLEdBRkFSLEVBQUF2VyxFQUFBdU0sU0FBQXFKLGFBQUFnQixJQUVBcHZCLE1BQ0FtdkIsRUFBQUssRUFBQVQsRUFBQTdvQixPQUdBOG9CLEVBQUEsR0FBQXBCLEVBQUEsR0FBQTJCLEVBQ0FOLEVBQUEsR0FBQUssRUFBQSxHQUFBRSxFQUdBRCxFQUFBM0IsS0FDQW9CLEVBQUFELEVBQUFuckIsS0FBQXNyQixHQUFBcE0sRUFBQW9NLEVBQUFwTSxJQUVBLElBQ0FrTSxFQUFBLEdBR0FBLEVBQUFwQixFQUFBMkIsSUFDQVAsRUFBQXBCLEVBQUEyQixJQUlBQyxFQUFBRixLQUNBTCxFQUFBRixFQUFBbndDLElBQUF1d0MsR0FBQXBNLEVBQUFvTSxFQUFBcE0sSUFFQSxJQUNBa00sRUFBQSxHQUdBQSxFQUFBSyxFQUFBRSxJQUNBUCxFQUFBSyxFQUFBRSxJQUlBam1DLEVBQUFtbUMsYUFBQUgsRUFBQUMsR0FFQWhYLEVBQUF1TSxTQUFBeGMsUUFBQTZtQixHQUNBeHdDLElBQUFxd0MsRUFDQXJyQixLQUFBb3JCLEVBQ0FFLE9BQUFBLEVBQ0FDLE9BQUFBLEdBQ0F4cUIsR0FBQSxJQUFBLFdBQ0FwYixFQUFBMGtDLGFBQUEsSUFJQTFrQyxFQUFBb21DLFdBQUFwbUMsRUFBQW9tQyxVQUFBQyxVQUNBcm1DLEVBQUFvbUMsVUFBQTU5QixTQVFBODlCLFdBQUEsU0FBQWxyQixHQUVBLElBSUEzeEIsRUFKQXVXLEVBQUF2YSxLQUVBa2tDLEVBQUEzcEIsRUFBQTJwQixRQUNBa2MsRUFBQWxjLEVBQUFtYyxTQUdBLFNBQUFuYyxFQUFBeCtCLE1BQUF3K0IsRUFBQXVjLFdBQUFMLEdBQUE3bEMsRUFBQTBrQyxjQUlBelYsRUFBQXVNLFNBQUFoekIsS0FBQXE5QixHQUVBN2xDLEVBQUEwa0MsYUFBQSxFQUVBajdDLEVBQUF1VyxFQUFBdW1DLFVBQUE1YyxHQUVBM3BCLEVBQUFtbUMsYUFBQTE4QyxFQUFBZ3RCLE1BQUFodEIsRUFBQWt6QixRQUVBc1MsRUFBQXVNLFNBQUF4YyxRQUFBNm1CLEdBQ0F4d0MsSUFBQTVMLEVBQUE0TCxJQUNBZ2xCLEtBQUE1d0IsRUFBQTR3QixLQUNBc3JCLE9BQUFsOEMsRUFBQWd0QixNQUFBb3ZCLEVBQUFwdkIsUUFDQW12QixPQUFBbjhDLEVBQUFrekIsT0FBQWtwQixFQUFBbHBCLFVBQ0F2QixHQUFBLElBQUEsV0FDQXBiLEVBQUEwa0MsYUFBQSxNQVFBNkIsVUFBQSxTQUFBbkMsR0FDQSxJQVFBQyxFQUFBMEIsRUFBQVMsRUFBQS92QixFQUFBa0csRUFQQWtwQixFQUFBekIsRUFBQTBCLFNBRUFXLEVBQUFyQyxFQUFBM3RCLE1BQ0Fpd0IsRUFBQXRDLEVBQUF6bkIsT0FFQXJDLEVBQUE4cEIsRUFBQTltQixLQUFBaEQsT0FJQSxTQUFBdXJCLElBQUFBLEVBQUF6OUMsU0FBQXErQyxJQUFBQyxLQUtBLFdBQUF6WCxFQUFBOWpDLEtBQUFtdkIsS0FDQUEsR0FBQUEsRUFBQUEsSUFHQSxHQUFBQSxFQUFBbHlCLFNBQ0FreUIsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxLQUlBK3BCLEVBQUFuakIsU0F4QkF6N0IsS0F3QkFpOUMsTUFBQWlCLE1BQUFsdEIsUUFBQSxLQUFBNkQsRUFBQSxHQUFBQSxFQUFBLElBQ0F5ckIsRUFBQTdrQixTQXpCQXo3QixLQXlCQWk5QyxNQUFBaUIsTUFBQWhuQixTQUFBLEtBQUFyQyxFQUFBLEdBQUFBLEVBQUEsSUFFQWtzQixFQUFBNzdDLEtBQUFnOEMsSUFBQSxFQUFBdEMsRUFBQW9DLEVBQUFWLEVBQUFXLEdBRUFqd0IsRUFBQTlyQixLQUFBMm9DLE1BQUFrVCxFQUFBQyxHQUNBOXBCLEVBQUFoeUIsS0FBQTJvQyxNQUFBa1QsRUFBQUUsSUFJQXJ4QyxJQUFBMUssS0FBQTJvQyxNQUFBLElBQUF5UyxFQUFBcHBCLElBQUFyQyxFQUFBLEdBQ0FELEtBQUExdkIsS0FBQTJvQyxNQUFBLElBQUErUSxFQUFBNXRCLElBQUE2RCxFQUFBLEdBQ0E3RCxNQUFBQSxFQUNBa0csT0FBQUEsS0FTQSttQixPQUFBLFdBRUEsSUFBQTFqQyxFQUFBdmEsS0FFQXdwQyxFQUFBcG1DLEtBQUFtWCxFQUFBMmhDLE9BQUEsU0FBQS90QyxFQUFBd3dDLEdBQ0Fwa0MsRUFBQXNsQyxZQUFBbEIsTUFTQWtCLFlBQUEsU0FBQWxCLEdBRUEsSUFDQXlCLEVBQUF6QixFQUFBMEIsU0FFQUQsSUFBQXpCLEVBQUEzdEIsT0FBQTJ0QixFQUFBem5CLFVBSEFsM0IsS0FJQWkvQyxhQUFBLEVBRUF6VixFQUFBdU0sU0FBQWh6QixLQUFBcTlCLEdBRUE1VyxFQUFBdU0sU0FBQW9MLGFBQUFmLEVBUkFwZ0QsS0FRQThnRCxVQUFBbkMsSUFFQUEsRUFBQS9vQixNQVZBNTFCLEtBVUE4N0MsU0FWQTk3QyxLQVdBMGdELGdCQUlBL0IsRUFBQVUsT0FBQTEwQixRQUFBLFdBZkEzcUIsS0FpQkEycUIsUUFBQSxXQUFBZzBCLElBT0ErQixhQUFBLFNBQUFVLEVBQUFDLEdBRUEsSUFHQWpGLEVBSEFwOEMsS0FHQWk5QyxNQUFBdnNCLFVBQUF5TCxZQUFBLG1GQUhBbjhCLEtBS0Fra0MsVUFMQWxrQyxLQUtBbytDLFlBTEFwK0MsS0FTQXNoRCxjQUVBbEYsRUFBQXRnQixTQUFBLHlCQUVBc2xCLElBQUFwOEMsR0FBQXE4QyxJQUFBcjhDLEVBQ0FvOEMsRUFkQXBoRCxLQWNBa2tDLFFBQUFsVCxPQUFBcXdCLEVBZEFyaEQsS0FjQWtrQyxRQUFBaE4sT0FkQWwzQixLQWlCQWcrQyxnQkFNQTVCLEVBQUF0Z0IsU0FBQSx1QkF2QkE5N0IsS0EyQkFra0MsUUFBQXJNLEtBQUFnYyxNQUlBdUksRUFBQXRnQixTQUFBLHFCQUdBc2dCLEVBQUF0Z0IsU0FBQSx5QkFsQ0E5N0IsS0F1Q0Fra0MsUUFBQXJNLEtBQUFnYyxPQUNBdUksRUFBQXRnQixTQUFBLHVCQVNBd2xCLFdBQUEsV0FFQSxJQUdBQyxFQURBcmQsRUFGQWxrQyxLQUVBa2tDLFFBR0EsR0FBQUEsSUFMQWxrQyxLQUtBbytDLFVBUUEsU0FBQSxVQUFBbGEsRUFBQXgrQixNQUFBdytCLEVBQUF3YixXQUFBeGIsRUFBQXVjLFdBQ0EsU0FBQXZjLEVBQUFyTSxLQUFBdWhCLGNBQUE1UCxFQUFBNWtDLFdBQUFzL0IsRUFBQXJNLEtBQUF1aEIsZUFBQSxTQUFBbFYsRUFBQXJNLEtBQUF1aEIsYUFBQWxWLE1BR0FxZCxFQWpCQXZoRCxLQWlCQThnRCxVQUFBNWMsR0FFQUEsRUFBQWxULE1BQUF1d0IsRUFBQXZ3QixPQUFBa1QsRUFBQWhOLE9BQUFxcUIsRUFBQXJxQixVQWNBOG1CLGFBQUEsV0FFQSxJQUVBOVosRUFGQWxrQyxLQUVBa2tDLFFBQ0FrYyxFQUFBbGMsRUFBQW1jLFNBRUFtQixHQUFBLEVBT0EsT0FMQXBCLElBRUFvQixHQURBQSxFQUFBaFksRUFBQXVNLFNBQUFxSixhQUFBZ0IsSUFDQXB2QixNQUFBa1QsRUFBQWxULE9BQUF3d0IsRUFBQXRxQixPQUFBZ04sRUFBQWhOLFFBR0FzcUIsR0FRQUMsT0FBQSxXQUVBLElBRUF2ZCxFQUZBbGtDLEtBRUFra0MsUUFDQWtjLEVBQUFsYyxFQUFBbWMsU0FFQW1CLEdBQUEsRUFRQSxPQU5BcEIsSUFDQW9CLEVBUkF4aEQsS0FRQThnRCxVQUFBNWMsR0FDQXNkLEVBQUF0OEMsS0FBQWt1QyxJQUFBZ04sRUFBQXB2QixRQUFBd3dCLEVBQUF4d0IsT0FBQSxHQUFBOXJCLEtBQUFrdUMsSUFBQWdOLEVBQUFscEIsU0FBQXNxQixFQUFBdHFCLFFBQUEsR0FJQXNxQixHQVFBaEMsVUFBQSxTQUFBYixHQUVBLElBQUFqNUMsRUFBQTI1QyxFQUNBcUMsRUFEQW5uQyxFQUFBdmEsS0FHQSxJQUFBMitDLEVBQUFnRCxZQUlBaEQsRUFBQWUsU0FBQSxDQW1CQSxPQWZBZixFQUFBZ0QsV0FBQSxFQUVBcG5DLEVBQUFvUSxRQUFBLGFBQUFnMEIsR0FFQWo1QyxFQUFBaTVDLEVBQUFqNUMsTUFDQTI1QyxFQUFBVixFQUFBVSxRQUdBdDNCLElBQUEsV0FDQTRDLFFBQUEsV0FDQW1SLFNBQUEsb0JBQUFwMkIsR0FBQSxZQUNBbzJCLFNBQUE2aUIsRUFBQTltQixLQUFBd2YsWUFJQTN4QyxHQUVBLElBQUEsUUFFQTZVLEVBQUFxbkMsU0FBQWpELEdBRUEsTUFFQSxJQUFBLFNBRUFwa0MsRUFBQXNuQyxVQUFBbEQsR0FFQSxNQUVBLElBQUEsT0FFQXBrQyxFQUFBdW5DLFdBQUFuRCxFQUFBQSxFQUFBcjZDLEtBQUFxNkMsRUFBQTdpQyxTQUVBLE1BRUEsSUFBQSxTQUVBMHRCLEVBQUFtVixFQUFBcjZDLEtBQUEzQixPQUNBNFgsRUFBQXVuQyxXQUFBbkQsRUFBQW5WLEVBQUFtVixFQUFBcjZDLE1BR0FpVyxFQUFBd25DLFNBQUFwRCxHQUdBLE1BRUEsSUFBQSxPQUVBcGtDLEVBQUF5bkMsWUFBQXJELEdBRUErQyxFQUFBbFksRUFBQWpJLEtBQUFpSSxFQUFBcmxDLFVBQUF3NkMsRUFBQTltQixLQUFBMEosS0FBQUgsVUFDQWYsSUFBQXNlLEVBQUFyNkMsSUFDQWcvQixRQUFBLFNBQUF4aEIsRUFBQW1nQyxHQUVBLFlBQUFBLEdBQ0ExbkMsRUFBQXVuQyxXQUFBbkQsRUFBQTc4QixJQUlBeGMsTUFBQSxTQUFBbTZCLEVBQUF3aUIsR0FFQXhpQixHQUFBLFVBQUF3aUIsR0FDQTFuQyxFQUFBd25DLFNBQUFwRCxPQU1BVSxFQUFBejNCLElBQUEsVUFBQSxXQUNBODVCLEVBQUE3ZSxVQUdBLE1BRUEsUUFFQXRvQixFQUFBd25DLFNBQUFwRCxHQU1BLE9BQUEsSUFRQWlELFNBQUEsU0FBQWpELEdBRUEsSUFHQXVELEVBQUFwcUMsRUFBQXFxQyxFQUFBeFUsRUFIQXB6QixFQUFBdmEsS0FDQW9pRCxFQUFBekQsRUFBQTltQixLQUFBdXFCLFFBQUF6RCxFQUFBOW1CLEtBQUF4aEIsTUFBQStyQyxPQU9BLEdBQUFBLEVBQUEsQ0FDQUQsRUFBQXBpRCxFQUFBc2lELGtCQUFBLEVBQ0ExVSxFQUFBNXRDLEVBQUF1aUQsV0FBQUgsR0FFQXJxQyxFQUFBc3FDLEVBQUEzNkMsTUFBQSxLQUFBbkUsSUFBQSxTQUFBa0wsR0FDQSxJQUFBdkwsS0FnQkEsT0FkQXVMLEVBQUFsSSxPQUFBbUIsTUFBQSxPQUFBeTFDLFFBQUEsU0FBQTF1QyxFQUFBaEwsR0FDQSxJQUFBd0QsRUFBQXkwQixTQUFBanRCLEVBQUErekMsVUFBQSxFQUFBL3pDLEVBQUE3TCxPQUFBLEdBQUEsSUFFQSxHQUFBLElBQUFhLEVBQ0EsT0FBQVAsRUFBQW85QixJQUFBN3hCLEVBR0F4SCxJQUNBL0QsRUFBQStELE1BQUFBLEVBQ0EvRCxFQUFBdS9DLFFBQUFoMEMsRUFBQUEsRUFBQTdMLE9BQUEsTUFLQU0sS0FJQWdCLEtBQUEsU0FBQWtGLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQW5DLE1BQUFvQyxFQUFBcEMsUUFJQSxJQUFBLElBQUFqRCxFQUFBLEVBQUFBLEVBQUErVCxFQUFBblYsT0FBQW9CLElBQUEsQ0FDQSxJQUFBeUssRUFBQXNKLEVBQUEvVCxHQUVBLEdBQUEsTUFBQXlLLEVBQUFnMEMsU0FBQWgwQyxFQUFBeEgsT0FBQTJtQyxHQUFBLE1BQUFuL0IsRUFBQWcwQyxTQUFBaDBDLEVBQUF4SCxPQUFBbTdDLEVBQUEsQ0FDQUQsRUFBQTF6QyxFQUNBLFFBS0EwekMsR0FBQXBxQyxFQUFBblYsU0FDQXUvQyxFQUFBcHFDLEVBQUFBLEVBQUFuVixPQUFBLElBR0F1L0MsSUFDQXZELEVBQUFyNkMsSUFBQTQ5QyxFQUFBN2hCLElBR0FzZSxFQUFBM3RCLE9BQUEydEIsRUFBQXpuQixRQUFBLEtBQUFnckIsRUFBQU0sVUFDQTdELEVBQUF6bkIsT0FBQXluQixFQUFBM3RCLE1BQUEydEIsRUFBQXpuQixPQUFBZ3JCLEVBQUFsN0MsTUFDQTIzQyxFQUFBM3RCLE1BQUFreEIsRUFBQWw3QyxRQU1BMjNDLEVBQUEwQixTQUFBN1csRUFBQSwyQ0FDQTFOLFNBQUEsc0JBQ0FqTSxTQUFBOHVCLEVBQUFVLFNBS0EsSUFBQVYsRUFBQTltQixLQUFBOGUsU0FBQWdJLEVBQUE5bUIsS0FBQTdHLE9BQUEydEIsRUFBQTltQixLQUFBWCxTQUFBeW5CLEVBQUE5bUIsS0FBQTRxQixPQUFBOUQsRUFBQTltQixLQUFBK2xCLFNBRUFlLEVBQUEzdEIsTUFBQTJ0QixFQUFBOW1CLEtBQUE3RyxNQUNBMnRCLEVBQUF6bkIsT0FBQXluQixFQUFBOW1CLEtBQUFYLE9BRUF5bkIsRUFBQStELE9BQUFsWixFQUFBLFdBQ0E1aEIsSUFBQSxRQUFBLFdBRUE0aEIsRUFBQXhwQyxNQUFBOGMsU0FFQTZoQyxFQUFBK0QsT0FBQSxLQUVBbm9DLEVBQUFvb0MsWUFBQWhFLEtBR0EvMkIsSUFBQSxPQUFBLFdBRUFyTixFQUFBcytCLFVBQUE4RixHQUVBcGtDLEVBQUFvb0MsWUFBQWhFLEtBR0E3aUIsU0FBQSxrQkFDQWpNLFNBQUE4dUIsRUFBQTBCLFVBQ0ExdUMsS0FBQSxNQUFBZ3RDLEVBQUE5bUIsS0FBQTRxQixPQUFBOUQsRUFBQTltQixLQUFBK2xCLE9BQUFqc0MsS0FBQSxTQUlBNEksRUFBQW9vQyxZQUFBaEUsSUFVQWdFLFlBQUEsU0FBQWhFLEdBQ0EsSUFBQXBrQyxFQUFBdmEsS0FDQTRpRCxFQUFBcFosRUFBQSxXQUVBbVYsRUFBQWtFLE9BQUFELEVBQ0FoN0IsSUFBQSxRQUFBLFdBRUFyTixFQUFBd25DLFNBQUFwRCxLQUdBLzJCLElBQUEsT0FBQSxXQUdBNlMsYUFBQWtrQixFQUFBbUUsU0FFQW5FLEVBQUFtRSxRQUFBLEtBRUF2b0MsRUFBQTZqQyxZQUlBTyxFQUFBM3RCLE1BQUFoeEIsS0FBQStpRCxhQUNBcEUsRUFBQXpuQixPQUFBbDNCLEtBQUFnakQsY0FFQXJFLEVBQUE5bUIsS0FBQXhoQixNQUFBK3JDLFFBQ0FRLEVBQUFqeEMsS0FBQSxRQUFBLFNBQUFBLEtBQUEsU0FBQWd0QyxFQUFBOW1CLEtBQUF4aEIsTUFBQStyQyxRQUdBN25DLEVBQUEwb0MsWUFBQXRFLEdBRUFBLEVBQUErRCxPQUVBL0QsRUFBQW1FLFFBQUFsakMsV0FBQSxXQUNBKytCLEVBQUFtRSxRQUFBLEtBRUFuRSxFQUFBK0QsT0FBQTM5QixRQUVBN2YsS0FBQWc4QyxJQUFBLElBQUFoOEMsS0FBQSt0QixJQUFBLElBQUEwckIsRUFBQXpuQixPQUFBLFFBR0EzYyxFQUFBcytCLFVBQUE4RixNQUlBN2lCLFNBQUEsa0JBQ0FucUIsS0FBQSxNQUFBZ3RDLEVBQUFyNkMsS0FDQXVyQixTQUFBOHVCLEVBQUEwQixXQUVBdUMsRUFBQSxHQUFBenFCLFVBQUEsWUFBQXlxQixFQUFBLEdBQUE1aEMsYUFBQTRoQyxFQUFBLEdBQUFHLGNBQUFILEVBQUEsR0FBQUksY0FDQUosRUFBQWo0QixRQUFBLFFBRUFpNEIsRUFBQSxHQUFBdDlDLE1BQ0FzOUMsRUFBQWo0QixRQUFBLFNBSUFnMEIsRUFBQW1FLFFBQUFsakMsV0FBQSxXQUNBZ2pDLEVBQUEsR0FBQXpxQixVQUFBd21CLEVBQUE4QixVQUNBbG1DLEVBQUF5bkMsWUFBQXJELElBR0EsTUFVQWtELFVBQUEsU0FBQWxELEdBQ0EsSUFHQXVFLEVBSEEzb0MsRUFBQXZhLEtBQ0E2M0IsRUFBQThtQixFQUFBOW1CLEtBQUErZSxPQUNBeUksRUFBQVYsRUFBQVUsT0FHQVYsRUFBQTBCLFNBQUE3VyxFQUFBLGdDQUFBM1IsRUFBQThlLFFBQUEsc0JBQUEsSUFBQSxZQUNBaHpCLElBQUFrVSxFQUFBbFUsS0FDQWtNLFNBQUF3dkIsR0FFQTZELEVBQUExWixFQUFBM1IsRUFBQWdmLElBQUF6eEMsUUFBQSxZQUFBLElBQUFrQyxNQUFBNjdDLFlBQ0F4eEMsS0FBQWttQixFQUFBbG1CLE1BQ0FrZSxTQUFBOHVCLEVBQUEwQixVQUVBeG9CLEVBQUE4ZSxTQUVBcDhCLEVBQUF5bkMsWUFBQXJELEdBS0F1RSxFQUFBeDdCLEdBQUEsbUJBQUEsU0FBQW5iLEdBQ0F2TSxLQUFBcUYsUUFBQSxFQUVBczVDLEVBQUFVLE9BQUExMEIsUUFBQSxXQUVBcFEsRUFBQXMrQixVQUFBOEYsS0FNQVUsRUFBQTMzQixHQUFBLGFBQUEsV0FDQSxJQUdBMDdCLEVBRUFDLEVBTEFDLEVBQUEzRSxFQUFBMEIsU0FDQWtELEVBQUExckIsRUFBQWxVLElBQUFxTixNQUNBd3lCLEVBQUEzckIsRUFBQWxVLElBQUF1VCxPQUtBLEdBQUEsSUFBQWdzQixFQUFBLEdBQUE3OUMsUUFBQSxDQU9BLElBRUFnK0MsRUFEQUgsRUFBQXBvQyxXQUNBekssS0FBQSxRQUVBLE1BQUFvekMsSUFHQUosR0FBQUEsRUFBQTFnRCxTQUVBNGdELElBQUF2K0MsSUFDQW8rQyxFQUFBRixFQUFBLEdBQUFRLGNBQUE5akQsU0FBQTJQLGdCQUFBNnpDLFlBRUFHLEVBQUFyK0MsS0FBQW9yQyxLQUFBK1MsRUFBQXRTLFlBQUEsSUFBQXVTLEVBQUF0eUIsUUFBQW95QixJQUNBRyxHQUFBRCxFQUFBdlMsYUFBQXVTLEVBQUFoQixjQUdBa0IsSUFBQXgrQyxJQUNBdytDLEVBQUF0K0MsS0FBQW9yQyxLQUFBK1MsRUFBQWxULGFBQUEsSUFDQXFULEdBQUFGLEVBQUFuVCxjQUFBbVQsRUFBQXhHLGVBSUF5RyxHQUNBRCxFQUFBdHlCLE1BQUF1eUIsR0FHQUMsR0FDQUYsRUFBQXBzQixPQUFBc3NCLElBSUFGLEVBQUFubkIsWUFBQSwwQkFNQW44QixLQUFBNjRDLFVBQUE4RixHQUlBdUUsRUFBQXZ4QyxLQUFBLE1BQUFndEMsRUFBQXI2QyxNQUVBLElBQUFxNkMsRUFBQTltQixLQUFBMmUsVUFDQW1JLEVBQUEwQixTQUFBOXdCLFFBQUFoVixFQUFBeWlDLFVBQUEyQixFQUFBQSxFQUFBOW1CLEtBQUE2ZixPQUFBbEIsV0FJQTZJLEVBQUF6M0IsSUFBQSxVQUFBLFdBR0EsSUFFQTRoQixFQUFBeHBDLE1BQUFxUSxLQUFBLFVBQUEwVSxPQUFBcFQsS0FBQSxNQUFBLGlCQUVBLE1BQUE4eEMsSUFFQWphLEVBQUF4cEMsTUFBQTBWLFFBRUFpcEMsRUFBQWUsVUFBQSxLQVVBb0MsV0FBQSxTQUFBbkQsRUFBQTdpQyxHQUlBLElBRkE5YixLQUVBbytDLFVBQUEsQ0FGQXArQyxLQU1BaWpELFlBQUF0RSxHQUVBQSxFQUFBVSxPQUFBM3BDLFNBMWdEQWpRLEVBNGdEQXFXLElBM2dEQXJXLEVBQUE1RSxnQkFBQTRFLGFBQUErakMsR0EyZ0RBMXRCLEVBQUEvSCxTQUFBcFIsUUFRQW1aLEVBQUEvSCxPQUFBLDJCQUFBNFcsUUFBQSxXQUdBZzBCLEVBQUFnRixhQUFBbmEsRUFBQSxlQUFBemtCLE9BQUFnTCxZQUFBalUsR0FHQUEsRUFBQTZILElBQUEsVUFBQSxpQkFFQWc3QixFQUFBOEIsV0FHQSxXQUFBalgsRUFBQTlqQyxLQUFBb1csSUFJQSxLQUhBQSxFQUFBMHRCLEVBQUEsU0FBQWxhLE9BQUFrYSxFQUFBbGpDLEtBQUF3VixJQUFBaEIsWUFHQSxHQUFBeE8sV0FDQXdQLEVBQUEwdEIsRUFBQSxTQUFBNWEsS0FBQTlTLElBS0E2aUMsRUFBQTltQixLQUFBMW5CLFNBQ0EyTCxFQUFBMHRCLEVBQUEsU0FBQTVhLEtBQUE5UyxHQUFBekwsS0FBQXN1QyxFQUFBOW1CLEtBQUExbkIsVUExaURBLElBQUExSyxFQStpREFrNUMsRUFBQVUsT0FBQXozQixJQUFBLFVBQUEsV0FHQSsyQixFQUFBZ0YsZUFDQWhGLEVBQUFnRixhQUFBajBCLE1BQUE1VCxFQUFBaUosUUFBQWpJLFNBRUE2aEMsRUFBQWdGLGFBQUEsTUFJQWhGLEVBQUFpRixZQUNBakYsRUFBQWlGLFVBQUE5bUMsU0FFQTZoQyxFQUFBaUYsVUFBQSxNQUlBakYsRUFBQThCLFdBQ0FqWCxFQUFBeHBDLE1BQUEwVixRQUVBaXBDLEVBQUFlLFVBQUEsS0FLQWYsRUFBQTBCLFNBQUE3VyxFQUFBMXRCLEdBQUErVCxTQUFBOHVCLEVBQUFVLFFBRUFyL0MsS0FBQTY0QyxVQUFBOEYsS0FNQW9ELFNBQUEsU0FBQXBELEdBRUFBLEVBQUE4QixVQUFBLEVBRUE5QixFQUFBVSxPQUFBbGpCLFlBQUEsbUJBQUF3aUIsRUFBQWo1QyxNQUVBMUYsS0FBQThoRCxXQUFBbkQsRUFBQTMrQyxLQUFBZzlDLFVBQUEyQixFQUFBQSxFQUFBOW1CLEtBQUE0ZixZQVFBdUssWUFBQSxTQUFBckQsSUFJQUEsRUFBQUEsR0FGQTMrQyxLQUVBa2tDLFdBRUF5YSxFQUFBa0YsV0FDQWxGLEVBQUFrRixTQUFBcmEsRUFMQXhwQyxLQUtBNjNCLEtBQUEyZixZQUFBM25CLFNBQUE4dUIsRUFBQVUsVUFRQTRELFlBQUEsU0FBQXRFLElBSUFBLEVBQUFBLEdBRkEzK0MsS0FFQWtrQyxVQUVBeWEsRUFBQWtGLFdBQ0FsRixFQUFBa0YsU0FBQS9tQyxnQkFFQTZoQyxFQUFBa0YsV0FTQWhMLFVBQUEsU0FBQThGLEdBRUEzK0MsS0FFQW8rQyxZQUlBTyxFQUFBZ0QsV0FBQSxFQUNBaEQsRUFBQWUsVUFBQSxFQVBBMS9DLEtBU0EycUIsUUFBQSxZQUFBZzBCLEdBVEEzK0MsS0FXQWlqRCxZQUFBdEUsR0FFQUEsRUFBQTltQixLQUFBMmUsV0FBQW1JLEVBQUFpRixZQUNBakYsRUFBQWlGLFVBQUFwYSxFQWRBeHBDLEtBY0FnOUMsVUFBQTJCLEVBQUFBLEVBQUE5bUIsS0FBQTZmLE9BQUFsQixXQUFBM21CLFNBQUE4dUIsRUFBQTBCLFNBQUFsd0MsT0FBQSxZQUFBeE0sVUFHQWc3QyxFQUFBOW1CLEtBQUE0ZSxTQUFBa0ksRUFBQTBCLFdBQUExQixFQUFBOEIsV0FHQTlCLEVBQUEwQixTQUFBMzRCLEdBQUEsaUJBQUEsU0FBQW5iLEdBS0EsT0FKQSxHQUFBQSxFQUFBcUosUUFDQXJKLEVBQUF1ZCxrQkFHQSxJQUtBLFVBQUE2MEIsRUFBQWo1QyxNQUNBOGpDLEVBQUEsMENBQUEzWixTQUFBOHVCLEVBQUEwQixXQS9CQXJnRCxLQW9DQTIvQyxjQUFBaEIsS0FVQWdCLGNBQUEsU0FBQWhCLEdBRUEsSUFHQW1GLEVBQUFDLEVBQUFwdUIsRUFBQWxDLEVBQUF6dkIsRUFIQXVXLEVBQUF2YSxLQUNBcS9DLEVBQUFWLEVBQUFVLE9BRUF2ckMsR0FBQSxFQW1CQSxPQWpCQWd3QyxFQUFBbkYsRUFBQTltQixLQUFBdGQsRUFBQXdoQyxTQUFBLGtCQUFBLG9CQUNBcG1CLEVBQUFncEIsRUFBQTltQixLQUFBdGQsRUFBQXdoQyxTQUFBLG9CQUFBLHNCQUVBcG1CLEVBQUE4RixTQUFBa2pCLEVBQUFZLGlCQUFBdjZDLEVBQUEyd0IsRUFBQWdwQixFQUFBWSxlQUFBLEtBRUFaLEVBQUFXLFNBQUFYLEVBQUEvb0IsTUFBQXJiLEVBQUF1aEMsU0FBQW5tQixJQUNBbXVCLEdBQUEsR0FJQSxTQUFBQSxHQUFBbkYsRUFBQS9vQixNQUFBcmIsRUFBQXVoQyxTQUFBbm1CLEdBQUEsVUFBQWdwQixFQUFBajVDLE9BQUFpNUMsRUFBQThCLFdBQUEzc0MsRUFBQXlHLEVBQUF5cEMsWUFBQXJGLE1BQ0FtRixFQUFBLFFBTUEsU0FBQUEsSUFDQTkvQyxFQUFBdVcsRUFBQXVtQyxVQUFBbkMsSUFFQXVCLE9BQUFsOEMsRUFBQWd0QixNQUFBbGQsRUFBQWtkLE1BQ0FodEIsRUFBQW04QyxPQUFBbjhDLEVBQUFrekIsT0FBQXBqQixFQUFBb2pCLGNBRUFsekIsRUFBQWd0QixhQUNBaHRCLEVBQUFrekIsT0FLQSxTQUZBekQsRUFBQWtyQixFQUFBOW1CLEtBQUFxZixlQUdBempCLEVBQUF2dUIsS0FBQWt1QyxJQUFBdUwsRUFBQTN0QixNQUFBMnRCLEVBQUF6bkIsT0FBQXBqQixFQUFBa2QsTUFBQWxkLEVBQUFvakIsUUFBQSxJQUdBekQsSUFDQTNmLEVBQUEyZixRQUFBLEdBQ0F6dkIsRUFBQXl2QixRQUFBLEdBSUErVixFQUFBdU0sU0FBQW9MLGFBQUF4QyxFQUFBMEIsU0FBQWxrQixZQUFBLHNCQUFBcm9CLEdBRUF3bkMsRUFBQXFELEVBQUEwQixlQUdBN1csRUFBQXVNLFNBQUF4YyxRQUFBb2xCLEVBQUEwQixTQUFBcjhDLEVBQUEyeEIsRUFBQSxXQUNBcGIsRUFBQTRkLGVBTUE1ZCxFQUFBc2xDLFlBQUFsQixHQU1BbUYsR0FZQXRhLEVBQUF1TSxTQUFBaHpCLEtBQUFzOEIsR0FFQTBFLEVBQUEsc0NBQUFwRixFQUFBL29CLEtBQUFyYixFQUFBc2hDLFFBQUEsT0FBQSxZQUFBLGdCQUFBaUksRUFFQXpFLEVBQUF2a0IsV0FBQSxTQUFBcUIsWUFBQSx5RUFBQUwsU0FBQWlvQixHQUVBcEYsRUFBQTBCLFNBQUFsa0IsWUFBQSxzQkFHQW1mLEVBQUErRCxRQUVBN1YsRUFBQXVNLFNBQUF4YyxRQUFBOGxCLEVBQUEsMEJBQUExcEIsRUFBQSxTQUFBcHBCLEdBQ0E4eUMsRUFBQWxqQixZQUFBNG5CLEdBQUFqcEIsV0FBQSxTQUVBNmpCLEVBQUEvb0IsTUFBQXJiLEVBQUF1aEMsU0FDQXZoQyxFQUFBNGQsYUFHQSxLQTdCQW1qQixFQUFBK0QsR0FFQVYsRUFBQTBCLFNBQUFsa0IsWUFBQSwyQkFFQXdpQixFQUFBL29CLE1BQUFyYixFQUFBdWhDLFNBQ0F2aEMsRUFBQTRkLGVBZ0NBNnJCLFlBQUEsU0FBQXJGLEdBRUEsSUFrQ0FzRixFQWpDQXpDLEdBQUEsRUErQkE1RCxFQUFBZSxFQUFBOW1CLEtBQUErbEIsT0FDQXNHLEVBQUF0RyxFQUFBQSxFQUFBdlcsU0FBQSxFQWdCQSxPQWJBNmMsR0FBQXRHLEVBQUEsR0FBQTV3QyxnQkFBQXBOLEdBaENBLFNBQUEyN0MsR0FRQSxJQVBBLElBQUE0SSxFQUFBNUksRUFBQSxHQUVBNkksRUFBQUQsRUFBQXh2Qix3QkFDQTB2QixLQUlBLE9BQUFGLEVBQUFHLGVBQ0EsV0FBQTlhLEVBQUEyYSxFQUFBRyxlQUFBM2dDLElBQUEsYUFBQSxTQUFBNmxCLEVBQUEyYSxFQUFBRyxlQUFBM2dDLElBQUEsYUFDQTBnQyxFQUFBN2pELEtBQUEyakQsRUFBQUcsY0FBQTN2Qix5QkFHQXd2QixFQUFBQSxFQUFBRyxjQVVBLE9BUEFELEVBQUFFLE1BQUEsU0FBQUMsR0FDQSxJQUFBQyxFQUFBdi9DLEtBQUFnOEMsSUFBQWtELEVBQUExUSxNQUFBOFEsRUFBQTlRLE9BQUF4dUMsS0FBQSt0QixJQUFBbXhCLEVBQUF4dkIsS0FBQTR2QixFQUFBNXZCLE1BQ0E4dkIsRUFBQXgvQyxLQUFBZzhDLElBQUFrRCxFQUFBelEsT0FBQTZRLEVBQUE3USxRQUFBenVDLEtBQUErdEIsSUFBQW14QixFQUFBeDBDLElBQUE0MEMsRUFBQTUwQyxLQUVBLE9BQUE2MEMsRUFBQSxHQUFBQyxFQUFBLEtBSUFOLEVBQUF6USxPQUFBLEdBQUF5USxFQUFBMVEsTUFBQSxHQUNBMFEsRUFBQXh2QixLQUFBNFUsRUFBQXpwQyxHQUFBaXhCLFNBQUFvekIsRUFBQXgwQyxJQUFBNDVCLEVBQUF6cEMsR0FBQW0zQixTQU9BeXRCLENBQUEvRyxLQUNBcUcsRUFyQ0Fqa0QsS0FxQ0FpOUMsTUFBQWlCLE1BQUE3VyxTQUVBbWEsR0FDQTV4QyxJQUFBczBDLEVBQUF0MEMsSUFBQXEwQyxFQUFBcjBDLElBQUE5SixXQUFBODNDLEVBQUFqNkIsSUFBQSxxQkFBQSxHQUNBaVIsS0FBQXN2QixFQUFBdHZCLEtBQUFxdkIsRUFBQXJ2QixLQUFBOXVCLFdBQUE4M0MsRUFBQWo2QixJQUFBLHNCQUFBLEdBQ0FxTixNQUFBNHNCLEVBQUE1c0IsUUFDQWtHLE9BQUEwbUIsRUFBQTFtQixTQUNBZ3BCLE9BQUEsRUFDQUMsT0FBQSxJQUlBcUIsR0FRQXJwQixTQUFBLFdBRUEsSUFBQTVkLEVBQUF2YSxLQUVBa2tDLEVBQUEzcEIsRUFBQTJwQixRQUNBZ1ksS0FFQWhZLEVBQUFvYixVQUFBcGIsRUFBQXdiLFVBQUF4YixFQUFBMGIsYUFJQTFiLEVBQUEwYixZQUFBLEVBRUExYixFQUFBbWIsT0FBQXJsQyxXQUFBMlEsUUFBQSxXQUdBMndCLEVBQUFwWCxFQUFBbWIsUUFFQW5iLEVBQUFtYixPQUFBdmpCLFNBQUEsNEJBR0EwTixFQUFBcG1DLEtBQUFtWCxFQUFBMmhDLE9BQUEsU0FBQS90QyxFQUFBd3dDLEdBQ0FBLEVBQUEvb0IsS0FBQXJiLEVBQUF1aEMsUUFBQSxHQUFBNkMsRUFBQS9vQixLQUFBcmIsRUFBQXVoQyxRQUFBLEVBQ0FJLEVBQUF5QyxFQUFBL29CLEtBQUErb0IsRUFFQUEsSUFFQW5WLEVBQUF1TSxTQUFBaHpCLEtBQUE0N0IsRUFBQVUsUUFFQVYsRUFBQVUsT0FBQXQzQixNQUFBakwsWUFJQXZDLEVBQUEyaEMsT0FBQUEsRUFFQTNoQyxFQUFBbW1DLGVBRUFubUMsRUFBQW9RLFFBQUEsY0FHQTZlLEVBQUE1cEMsRUFBQXNWLGVBQUE2RSxHQUFBLGVBQUFtcUIsRUFBQXJNLEtBQUFtZ0IsV0FBQSxTQUFBOVQsRUFBQXgrQixNQUFBLFdBQUF3K0IsRUFBQXgrQixPQUNBNlUsRUFBQXRGLFVBU0EwaEMsUUFBQSxXQUNBLElBQ0F2cUMsRUFBQTJPLEVBREEvYSxLQUdBMDdDLE1BQUEvNEMsT0FBQSxJQUlBeUosRUFQQXBNLEtBT0FrOEMsT0FQQWw4QyxLQU9BODdDLFFBQUEsR0FDQS9nQyxFQVJBL2EsS0FRQWs4QyxPQVJBbDhDLEtBUUE4N0MsUUFBQSxHQUVBMXZDLEdBQUEsVUFBQUEsRUFBQTFHLE1BVkExRixLQVdBdy9DLFVBQUFwekMsR0FHQTJPLEdBQUEsVUFBQUEsRUFBQXJWLE1BZEExRixLQWVBdy9DLFVBQUF6a0MsS0FTQTlGLE1BQUEsV0FDQSxJQUNBc21DLEVBREFyWCxFQUFBbGtDLEtBQUFra0MsUUFHQWxrQyxLQUFBbytDLFlBSUFsYSxHQUFBQSxFQUFBMGIsY0FHQXJFLEVBQUFyWCxFQUFBbWIsT0FBQWh2QyxLQUFBLDJDQUVBMU4sU0FDQTQ0QyxFQUFBclgsRUFBQW1iLE9BQUFodkMsS0FBQSw4QkFBQUYsT0FBQSw2QkFJQW9yQyxFQUFBQSxHQUFBQSxFQUFBNTRDLE9BQUE0NEMsRUFBQXY3QyxLQUFBaTlDLE1BQUF2c0IsV0FFQXpiLFVBUUFtb0MsU0FBQSxXQUNBLElBQUE3aUMsRUFBQXZhLEtBR0F3cEMsRUFBQSx1QkFBQXBtQyxLQUFBLFdBQ0EsSUFBQSs2QyxFQUFBM1UsRUFBQXhwQyxNQUFBOGhCLEtBQUEsWUFHQXE4QixHQUFBQSxFQUFBaHhDLEtBQUFvTixFQUFBcE4sS0FBQWd4QyxFQUFBQyxZQUNBRCxFQUFBeHpCLFFBQUEsZ0JBRUF3ekIsRUFBQUwsZUFFQUssRUFBQXlHLFdBQUEsS0FLQXJxQyxFQUFBcXFDLFdBQUEsR0FFQXJxQyxFQUFBMnBCLFNBQUEzcEIsRUFBQWdrQyxVQUNBaGtDLEVBQUEwakMsU0FFQTFqQyxFQUFBNGtDLGtCQUdBNWtDLEVBQUFvUSxRQUFBLGNBRUFwUSxFQUFBc2pDLGFBUUFqRyxNQUFBLFNBQUFyckMsRUFBQXM0QyxHQUVBLElBR0FmLEVBQUFudUIsRUFDQXlxQixFQUFBM3NCLEVBQUEzZixFQUFBOVAsRUFKQXVXLEVBQUF2YSxLQUNBa2tDLEVBQUEzcEIsRUFBQTJwQixRQUtBcjdCLEVBQUEsV0FDQTBSLEVBQUF1cUMsUUFBQXY0QyxJQUdBLE9BQUFnTyxFQUFBNmpDLFlBSUE3akMsRUFBQTZqQyxXQUFBLEdBR0EsSUFBQTdqQyxFQUFBb1EsUUFBQSxjQUFBcGUsSUFDQWdPLEVBQUE2akMsV0FBQSxFQUVBeEQsRUFBQSxXQUNBcmdDLEVBQUEwakMsWUFHQSxJQUtBMWpDLEVBQUF1akMsZUFFQTVaLEVBQUE0ZSxTQUNBcm9CLGFBQUF5SixFQUFBNGUsU0FHQTFDLEVBQUFsYyxFQUFBbWMsU0FDQXlELEVBQUE1ZixFQUFBck0sS0FBQW1mLGdCQUNBcmhCLEVBQUE2VCxFQUFBNWpDLFVBQUFpL0MsR0FBQUEsRUFBQWYsRUFBQTVmLEVBQUFyTSxLQUFBb2Ysa0JBQUEsRUFHQS9TLEVBQUFtYixPQUFBdDNCLElBQUFpekIsR0FBQTdlLFlBQUEsNEZBRUErSCxFQUFBbWIsT0FBQXJsQyxXQUFBMlEsUUFBQSxXQUFBN04sU0FHQTZZLEdBQ0FwYixFQUFBMGlDLE1BQUF2c0IsVUFBQXlMLFlBQUEsb0JBQUFMLFNBQUEsdUJBSUF2aEIsRUFBQTBvQyxZQUFBL2UsR0FFQTNwQixFQUFBbWtDLGVBRUFua0MsRUFBQW1tQyxlQUdBLFNBQUFvRCxJQUFBLElBQUF2M0MsR0FBQTZ6QyxHQUFBenFCLEdBQUEsVUFBQXVPLEVBQUF4K0IsT0FBQXcrQixFQUFBdWMsV0FBQXo4QyxFQUFBdVcsRUFBQXlwQyxZQUFBOWYsTUFDQTRmLEVBQUEsUUFHQSxTQUFBQSxHQUNBdGEsRUFBQXVNLFNBQUFoekIsS0FBQXE5QixJQUVBdHNDLEVBQUEwMUIsRUFBQXVNLFNBQUFxSixhQUFBZ0IsSUFFQXB2QixNQUFBbGQsRUFBQWtkLE1BQUFsZCxFQUFBb3NDLE9BQ0Fwc0MsRUFBQW9qQixPQUFBcGpCLEVBQUFvakIsT0FBQXBqQixFQUFBcXNDLE9BS0EsU0FGQTFzQixFQUFBeVEsRUFBQXJNLEtBQUFxZixlQUdBempCLEVBQUF2dUIsS0FBQWt1QyxJQUFBbFAsRUFBQWxULE1BQUFrVCxFQUFBaE4sT0FBQWx6QixFQUFBZ3RCLE1BQUFodEIsRUFBQWt6QixRQUFBLElBR0F6RCxJQUNBenZCLEVBQUF5dkIsUUFBQSxHQUdBM2YsRUFBQW9zQyxPQUFBcHNDLEVBQUFrZCxNQUFBaHRCLEVBQUFndEIsTUFDQWxkLEVBQUFxc0MsT0FBQXJzQyxFQUFBb2pCLE9BQUFsekIsRUFBQWt6QixPQUVBcGpCLEVBQUFrZCxNQUFBaHRCLEVBQUFndEIsTUFDQWxkLEVBQUFvakIsT0FBQWx6QixFQUFBa3pCLE9BRUFzUyxFQUFBdU0sU0FBQW9MLGFBQUFqZCxFQUFBbWMsU0FBQXZzQyxHQUVBd25DLEVBQUFwWCxFQUFBbWMsVUFFQTdXLEVBQUF1TSxTQUFBeGMsUUFBQTJLLEVBQUFtYyxTQUFBcjhDLEVBQUEyeEIsRUFBQTlzQixJQUVBLElBR0FpN0MsR0FBQW51QixHQUdBLElBQUFwcEIsRUFDQXFULFdBQUEvVyxFQUFBOHNCLEdBR0E2VCxFQUFBdU0sU0FBQXhjLFFBQUEySyxFQUFBbWIsT0FBQWxqQixZQUFBLDJCQUFBLDBEQUFBMm5CLEVBQUFudUIsRUFBQTlzQixHQUlBQSxLQUdBLE1BT0FpOEMsUUFBQSxTQUFBdjRDLEdBQ0EsSUFFQTR4QyxFQUNBOVcsRUFGQWdjLEVBQUE3WixFQUFBLFFBREF4cEMsS0FLQWtrQyxRQUFBbWIsT0FBQTEwQixRQUFBLFdBTEEzcUIsS0FPQWk5QyxNQUFBdnNCLFVBQUFoYixRQUFBb0gsU0FQQTljLEtBU0EycUIsUUFBQSxhQUFBcGUsR0FUQXZNLEtBWUFpOEMsWUFaQWo4QyxLQVlBa2tDLFFBQUFyTSxLQUFBb2dCLFdBWkFqNEMsS0FhQWk4QyxXQUFBaG5DLFFBYkFqVixLQWdCQWtrQyxRQUFBLE1BR0FpYSxFQUFBM1UsRUFBQXVNLFNBQUEwRyxlQUdBMEIsRUFBQWYsWUFJQTNDLEVBQUExa0IsVUExQkEvMUIsS0EwQkErMUIsV0FBQUMsV0ExQkFoMkIsS0EwQkFnMkIsWUFFQXF0QixFQUFBbG5CLFlBQUEsNENBRUFrbkIsRUFBQTltQixTQUFBLHFCQUNBOEssRUFBQTVMLFNBQUE3N0IsRUFBQStrQixLQUFBbEIsTUFBQTdULElBQUEsSUFFQXl6QyxFQUFBbG5CLFlBQUEsbUJBQUF4WSxJQUFBLE1BQUEsSUFBQW9TLFdBQUEsRUFBQXNSLElBR0FtQyxFQUFBLDRCQUFBMXNCLFdBVUE2TixRQUFBLFNBQUF0bUIsRUFBQXM2QyxHQUNBLElBR0E2QyxFQUhBcDZDLEVBQUF0QyxNQUFBdEMsVUFBQWxDLE1BQUFVLEtBQUEwQyxVQUFBLEdBRUErQixFQUFBazVDLEdBQUFBLEVBQUE5bUIsS0FBQThtQixFQURBMytDLEtBQ0Fra0MsUUFnQkEsR0FiQXorQixFQUNBMkIsRUFBQW9LLFFBQUEvTCxHQUdBQSxFQVJBekYsS0FXQW9ILEVBQUFvSyxRQVhBeFIsTUFhQXdwQyxFQUFBNWtDLFdBQUFhLEVBQUFveUIsS0FBQXh6QixNQUNBbTlDLEVBQUEvN0MsRUFBQW95QixLQUFBeHpCLEdBQUFaLE1BQUFnQyxFQUFBMkIsS0FHQSxJQUFBbzZDLEVBQ0EsT0FBQUEsRUFHQSxlQUFBbjlDLEdBckJBckUsS0FxQkFpOUMsTUFyQkFqOUMsS0F5QkFpOUMsTUFBQXZzQixVQUFBL0YsUUFBQXRtQixFQUFBLE1BQUErQyxHQUhBc3pDLEVBQUEvdkIsUUFBQXRtQixFQUFBLE1BQUErQyxJQVlBKzNDLGVBQUEsU0FBQTRGLEdBRUEsSUFFQTdnQixFQUZBbGtDLEtBRUFra0MsUUFDQS9vQixFQUFBK29CLEVBQUEvb0IsTUFDQTRLLEVBQUFtZSxFQUFBck0sS0FBQTlSLFFBQ0FxMkIsRUFMQXA4QyxLQUtBaTlDLE1BQUF2c0IsVUFDQXMwQixFQU5BaGxELEtBTUFpOUMsTUFBQWwzQixRQUdBbWUsRUFBQW1iLE9BQUExMEIsUUFBQSxXQVRBM3FCLEtBV0FnbEQsU0FBQWovQixHQUFBQSxFQUFBcGpCLE9BQUFxaUQsRUFBQXAyQixLQUFBN0ksR0FBQSxLQVhBL2xCLEtBYUFpbEQsa0JBYkFqbEQsS0FhQXUrQyxRQWJBditDLEtBY0F3K0MsZUFJQXBDLEVBQUEvckMsS0FBQSx5QkFBQXVlLEtBbEJBNXVCLEtBa0JBMDdDLE1BQUEvNEMsUUFDQXk1QyxFQUFBL3JDLEtBQUEseUJBQUF1ZSxLQUFBelQsRUFBQSxHQUVBaWhDLEVBQUEvckMsS0FBQSx3QkFBQTBSLEtBQUEsWUFBQW1pQixFQUFBck0sS0FBQW9lLE1BQUE5NkIsR0FBQSxHQUNBaWhDLEVBQUEvckMsS0FBQSx3QkFBQTBSLEtBQUEsWUFBQW1pQixFQUFBck0sS0FBQW9lLE1BQUE5NkIsR0F0QkFuYixLQXNCQTA3QyxNQUFBLzRDLE9BQUEsR0FFQSxVQUFBdWhDLEVBQUF4K0IsS0FHQTAyQyxFQUFBL3JDLEtBQUEsNEJBQUFzQixLQUFBLE9BQUF1eUIsRUFBQXJNLEtBQUF4aEIsTUFBQS9SLEtBQUE0L0IsRUFBQTUvQixLQUFBdWdCLE9BR0F1M0IsRUFBQS9yQyxLQUFBLGlEQUFBMFUsUUFPQTI1QixhQUFBLFdBRUExK0MsS0FBQWlsRCxrQkFBQSxFQUVBamxELEtBQUFpOUMsTUFBQXZzQixVQUFBeUwsWUFBQSx3RkFJQXFpQixhQUFBLFdBQ0EsSUFDQTNtQixFQURBNzNCLEtBQ0Fra0MsUUFEQWxrQyxLQUNBa2tDLFFBQUFyTSxLQURBNzNCLEtBQ0E2M0IsS0FDQXVrQixFQUZBcDhDLEtBRUFpOUMsTUFBQXZzQixVQUZBMXdCLEtBSUFpbEQsa0JBQUEsRUFKQWpsRCxLQUtBcytDLG1CQUFBLEVBRUFsQyxFQUNBaGdCLFlBQUEsMkJBQUF2RSxFQUFBeWUsVUFBQXplLEVBQUF2TCxVQUNBOFAsWUFBQSwyQkFBQXZFLEVBQUF3ZSxTQVRBcjJDLEtBU0EwN0MsTUFBQS80QyxPQUFBLElBQ0F5NUIsWUFBQSx1QkFBQXZFLEVBQUF1ZSxRQVZBcDJDLEtBVUEwN0MsTUFBQS80QyxPQUFBLElBQ0F5NUIsWUFBQSxzQkFBQXZFLEVBQUE2ZSxPQVhBMTJDLEtBYUFnbEQsU0FDQTVJLEVBQUF0Z0IsU0FBQSwwQkFHQXNnQixFQUFBamdCLFlBQUEsMEJBU0Erb0IsZUFBQSxXQUNBbGxELEtBQUFpbEQsaUJBQ0FqbEQsS0FBQXcrQyxlQUdBeCtDLEtBQUEwK0Msa0JBU0FsVixFQUFBdU0sVUFFQW9QLFFBQUEsUUFDQXpiLFNBQUFBLEVBZUErUyxZQUFBLFNBQUEySSxHQUNBLElBQUFqSCxFQUFBM1UsRUFBQSx3REFBQTFuQixLQUFBLFlBQ0ExYSxFQUFBdEMsTUFBQXRDLFVBQUFsQyxNQUFBVSxLQUFBMEMsVUFBQSxHQUVBLE9BQUF5NkMsYUFBQTNDLElBRUEsV0FBQWhTLEVBQUE5akMsS0FBQTAvQyxHQUNBakgsRUFBQWlILEdBQUEzaEQsTUFBQTA2QyxFQUFBLzJDLEdBRUEsYUFBQW9pQyxFQUFBOWpDLEtBQUEwL0MsSUFDQUEsRUFBQTNoRCxNQUFBMDZDLEVBQUEvMkMsR0FHQSsyQyxJQVdBM1ksS0FBQSxTQUFBK1gsRUFBQTFsQixFQUFBMWMsR0FDQSxPQUFBLElBQUFxZ0MsRUFBQStCLEVBQUExbEIsRUFBQTFjLElBT0F5OEIsTUFBQSxTQUFBdjFDLEdBQ0EsSUFBQTg3QyxFQUFBbitDLEtBQUF5OEMsY0FFQTBCLElBQ0FBLEVBQUF2RyxTQUlBLElBQUF2MUMsR0FDQXJDLEtBQUE0M0MsVUFTQXlOLFFBQUEsV0FFQXJsRCxLQUFBNDNDLE9BQUEsR0FFQThDLEVBQUEzeUIsSUFBQSxtQkFRQTB6QixTQUFBNzdDLEVBQUEwbEQsY0FBQXRnRCxHQUFBLGlFQUFBdUksS0FBQW12QyxVQUFBQyxXQU1BNEksTUFBQSxXQUNBLElBQUF4K0IsRUFBQW5uQixFQUFBMEIsY0FBQSxPQUVBLE9BQUF2QixFQUFBd3dCLGtCQUFBeHdCLEVBQUF3d0IsaUJBQUF4SixHQUFBOEssaUJBQUEsZ0JBQUFqeUIsRUFBQTRsRCxjQUFBNWxELEVBQUE0bEQsYUFBQSxJQUhBLEdBVUFwRyxhQUFBLFNBQUE3RCxHQUNBLElBQUFrSyxFQUVBLElBQUFsSyxJQUFBQSxFQUFBNTRDLE9BQ0EsT0FBQSxFQWFBLElBTEE4aUQsR0FMQUEsRUFBQWxLLEVBQUEzM0MsR0FBQSxHQUFBK2YsSUFBQSxnQkFFQSxJQUFBOGhDLEVBQUFobEQsUUFBQSxXQUVBZ2xELEdBREFBLEVBQUFBLEVBQUFoK0MsTUFBQSxLQUFBLElBQ0FBLE1BQUEsS0FBQSxJQUNBQSxNQUFBLFNBS0E5RSxPQVVBOGlELEdBTkFBLEVBREFBLEVBQUE5aUQsT0FBQSxJQUNBOGlELEVBQUEsSUFBQUEsRUFBQSxJQUFBQSxFQUFBLEdBQUFBLEVBQUEsS0FHQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxLQUdBbmlELElBQUF3QyxnQkFFQSxDQUNBMi9DLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FFQSxJQUNBQyxFQURBLGlDQUNBejRDLEtBQUFzdUMsRUFBQTMzQyxHQUFBLEdBQUErTixLQUFBLFVBRUErekMsSUFDQUQsRUFBQSxHQUFBMy9DLFdBQUE0L0MsRUFBQSxJQUNBRCxFQUFBLEdBQUEzL0MsV0FBQTQvQyxFQUFBLEtBSUEsT0FDQTkxQyxJQUFBNjFDLEVBQUEsR0FDQTd3QixLQUFBNndCLEVBQUEsR0FDQXZGLE9BQUF1RixFQUFBLEdBQ0F0RixPQUFBc0YsRUFBQSxHQUNBaHlCLFFBQUEzdEIsV0FBQXkxQyxFQUFBNTNCLElBQUEsWUFDQXFOLE1BQUF1cUIsRUFBQXZxQixRQUNBa0csT0FBQXFrQixFQUFBcmtCLFdBVUFpcUIsYUFBQSxTQUFBNUYsRUFBQXZ3QixHQUNBLElBQUFzeUIsRUFBQSxHQUNBMzVCLEtBRUEsR0FBQTQzQixHQUFBdndCLEVBbUNBLE9BL0JBQSxFQUFBNEosT0FBQTV2QixHQUFBZ21CLEVBQUFwYixNQUFBNUssSUFDQXM0QyxHQUFBdHlCLEVBQUE0SixPQUFBNXZCLEVBQUF1MkMsRUFBQW5wQixXQUFBd0MsS0FBQTVKLEVBQUE0SixNQUFBLFFBQUE1SixFQUFBcGIsTUFBQTVLLEVBQUF1MkMsRUFBQW5wQixXQUFBeGlCLElBQUFvYixFQUFBcGIsS0FBQSxLQUdBMHRDLEVBREF0OUMsS0FBQXVsRCxNQUNBLGVBQUFqSSxFQUFBLFNBR0EsYUFBQUEsRUFBQSxLQUlBdHlCLEVBQUFrMUIsU0FBQWw3QyxHQUFBZ21CLEVBQUFtMUIsU0FBQW43QyxJQUNBczRDLEdBQUFBLEVBQUEzNkMsT0FBQTI2QyxFQUFBLElBQUEsSUFBQSxTQUFBdHlCLEVBQUFrMUIsT0FBQSxLQUFBbDFCLEVBQUFtMUIsT0FBQSxLQUdBN0MsRUFBQTM2QyxTQUNBZ2hCLEVBQUFtdkIsVUFBQXdLLEdBR0F0eUIsRUFBQXlJLFVBQUF6dUIsSUFDQTJlLEVBQUE4UCxRQUFBekksRUFBQXlJLFNBR0F6SSxFQUFBZ0csUUFBQWhzQixJQUNBMmUsRUFBQXFOLE1BQUFoRyxFQUFBZ0csT0FHQWhHLEVBQUFrTSxTQUFBbHlCLElBQ0EyZSxFQUFBdVQsT0FBQWxNLEVBQUFrTSxRQUdBcWtCLEVBQUE1M0IsSUFBQUEsSUFPQTRWLFFBQUEsU0FBQWdpQixFQUFBamlCLEVBQUEzRCxFQUFBdHlCLEVBQUFzaUQsR0FDQW5jLEVBQUE1a0MsV0FBQSt3QixLQUNBdHlCLEVBQUFzeUIsRUFDQUEsRUFBQSxNQUdBNlQsRUFBQTNrQyxjQUFBeTBCLElBQ0FpaUIsRUFBQXpnQixXQUFBLFNBR0F5Z0IsRUFBQTd6QixHQUFBc3pCLEVBQUEsU0FBQXp1QyxLQUdBQSxJQUFBQSxFQUFBZ2UsZUFBQWd4QixFQUFBeGhDLEdBQUF4TixFQUFBZ2UsY0FBQTdsQixTQUFBLFdBQUE2SCxFQUFBZ2UsY0FBQXE3QixnQkFJQXBjLEVBQUF1TSxTQUFBaHpCLEtBQUF3NEIsR0FFQS9SLEVBQUEza0MsY0FBQXkwQixHQUVBQSxFQUFBNG1CLFNBQUFsN0MsR0FBQXMwQixFQUFBNm1CLFNBQUFuN0MsSUFDQXUyQyxFQUFBNTNCLElBQUEsc0JBQUEsSUFFQTJWLEVBQUF0SSxNQUFBOXJCLEtBQUF1NkMsTUFBQWxFLEVBQUF2cUIsUUFBQXNJLEVBQUE0bUIsUUFDQTVtQixFQUFBcEMsT0FBQWh5QixLQUFBdTZDLE1BQUFsRSxFQUFBcmtCLFNBQUFvQyxFQUFBNm1CLFFBRUE3bUIsRUFBQTRtQixPQUFBLEVBQ0E1bUIsRUFBQTZtQixPQUFBLEVBRUEzVyxFQUFBdU0sU0FBQW9MLGFBQUE1RixFQUFBamlCLEtBR0EsSUFBQXFzQixHQUNBcEssRUFBQXBmLFlBQUE3QyxHQUdBa1EsRUFBQTVrQyxXQUFBdkIsSUFDQUEsRUFBQWtKLE1BS0FpOUIsRUFBQTVqQyxVQUFBK3ZCLElBQ0E0bEIsRUFBQTUzQixJQUFBLHNCQUFBZ1MsRUFBQSxNQUdBNlQsRUFBQTNrQyxjQUFBeTBCLEdBQ0FrUSxFQUFBdU0sU0FBQW9MLGFBQUE1RixFQUFBamlCLEdBR0FpaUIsRUFBQXpmLFNBQUF4QyxHQUdBQSxFQUFBNG1CLFFBQUEzRSxFQUFBaGYsU0FBQSx3QkFDQWdmLEVBQUF4bkMsU0FBQStuQixTQUFBLHVCQUlBeWYsRUFBQXo1QixLQUFBLFFBQUFsQyxXQUFBLFdBQ0EyN0IsRUFBQTV3QixRQUFBLGtCQUNBZ0wsRUFBQSxNQUlBNVMsS0FBQSxTQUFBdzRCLEdBQ0E5Z0IsYUFBQThnQixFQUFBejVCLEtBQUEsVUFFQXk1QixFQUFBeHpCLElBQUEsaUJBQUFwRSxJQUFBLHNCQUFBLElBRUE0M0IsRUFBQWhmLFNBQUEsd0JBQ0FnZixFQUFBeG5DLFNBQUFvb0IsWUFBQSx5QkFnREFxTixFQUFBem5DLEdBQUFnMEMsU0FBQSxTQUFBM3hDLEdBQ0EsSUFBQXZDLEVBb0JBLE9BakJBQSxHQURBdUMsRUFBQUEsT0FDQXZDLFdBQUEsR0FJQTJuQyxFQUFBLFFBQUF6aEIsSUFBQSxpQkFBQWxtQixHQUFBNmxCLEdBQUEsaUJBQUE3bEIsR0FDQXVDLFFBQUFBLEdBQ0F5aEQsR0FJQTdsRCxLQUFBK25CLElBQUEsa0JBQUFMLEdBQUEsa0JBQ0E2MUIsTUFBQXY5QyxLQUNBb0UsUUFBQUEsR0FDQXloRCxHQUlBN2xELE1BT0EwNkMsRUFBQWh6QixHQUFBLGlCQUFBLGtCQUFBbStCLEdBbEVBLFNBQUFBLEVBQUF0NUMsR0FDQSxJQUFBdTVDLEVBQUF0YyxFQUFBajlCLEVBQUFvZCxlQUNBa08sRUFBQXRyQixFQUFBdVYsS0FBQXZWLEVBQUF1VixLQUFBMWQsV0FDQTRDLEVBQUE4K0MsRUFBQW4wQyxLQUFBLGtCQUFBLEdBQ0F3SixFQUFBLEVBQ0FvaUMsS0FHQWh4QyxFQUFBMGUsdUJBSUExZSxFQUFBdWQsaUJBR0E5aUIsR0FJQW1VLEdBRkFvaUMsR0FEQUEsRUFBQTFsQixFQUFBaDJCLFNBQUEybkMsRUFBQTNSLEVBQUFoMkIsVUFBQTBLLEVBQUF1VixLQUFBdlYsRUFBQXVWLEtBQUF5N0IsVUFDQTU2QyxPQUFBNDZDLEVBQUFwdEMsT0FBQSxtQkFBQW5KLEVBQUEsTUFBQXdpQyxFQUFBLG1CQUFBeGlDLEVBQUEsT0FFQW1VLE1BQUEycUMsSUFJQSxJQUNBM3FDLEVBQUEsR0FJQW9pQyxHQUFBdUksR0FHQXRjLEVBQUF1TSxTQUFBdlEsS0FBQStYLEVBQUExbEIsRUFBQTFjLEtBeDhGQSxDQTYrRkFwYixPQUFBSCxTQUFBRyxPQUFBNkIsUUFBQUEsUUFRQSxTQUFBNG5DLEdBRUEsYUFJQSxJQUFBdWMsRUFBQSxTQUFBMWxCLEVBQUFtaEIsRUFBQXJhLEdBQ0EsR0FBQTlHLEVBa0JBLE9BZEE4RyxFQUFBQSxHQUFBLEdBRUEsV0FBQXFDLEVBQUE5akMsS0FBQXloQyxLQUNBQSxFQUFBcUMsRUFBQXBMLE1BQUErSSxHQUFBLElBR0FxQyxFQUFBcG1DLEtBQUFvK0MsRUFBQSxTQUFBcnpDLEVBQUFuSCxHQUNBcTVCLEVBQUFBLEVBQUFqN0IsUUFBQSxJQUFBK0ksRUFBQW5ILEdBQUEsTUFHQW1nQyxFQUFBeGtDLFNBQ0EwOUIsSUFBQUEsRUFBQTUvQixRQUFBLEtBQUEsRUFBQSxJQUFBLEtBQUEwbUMsR0FHQTlHLEdBS0FxSixHQUNBc2MsU0FDQXh4QyxRQUFBLHdKQUNBMnlCLFFBQ0E4ZSxTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsR0FBQSxFQUNBQyxJQUFBLEVBQ0FDLEdBQUEsRUFDQUMsTUFBQSxjQUNBQyxZQUFBLEVBQ0FDLE1BQUEsR0FFQUMsV0FBQSxFQUNBL2dELEtBQUEsU0FDQTI2QixJQUFBLDZCQUNBb2lCLE1BQUEseUNBR0FpRSxPQUNBbHlDLFFBQUEsb0NBQ0EyeUIsUUFDQThlLFNBQUEsRUFDQUksR0FBQSxFQUNBTSxXQUFBLEVBQ0FDLFlBQUEsRUFDQUMsY0FBQSxFQUNBQyxXQUFBLEVBQ0FDLElBQUEsR0FFQU4sV0FBQSxFQUNBL2dELEtBQUEsU0FDQTI2QixJQUFBLCtCQUdBMm1CLFVBQ0F4eUMsUUFBQSxvQ0FDQTlPLEtBQUEsU0FDQTI2QixJQUFBLHFDQUdBNG1CLGFBQ0F6eUMsUUFBQSxzQ0FDQTJ5QixRQUNBK2YsZ0JBQUEsRUFDQTNhLFVBQUEsR0FFQTdtQyxLQUFBLFNBQ0EyNkIsSUFBQSx3Q0FHQThtQixNQUNBM3lDLFFBQUEsbUNBQ0E5TyxLQUFBLFNBQ0EyNkIsSUFBQSwrQkFHQSttQixXQUNBNXlDLFFBQUEseURBQ0E5TyxLQUFBLFFBQ0EyNkIsSUFBQSwyQkFPQWduQixZQUNBN3lDLFFBQUEsNEdBQ0E5TyxLQUFBLFNBQ0EyNkIsSUFBQSxTQUFBbWhCLEdBQ0EsTUFBQSxpQkFBQUEsRUFBQSxHQUFBLFNBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBLE1BQUF0OEMsS0FBQTJvQyxNQUFBMlQsRUFBQSxNQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQXA4QyxRQUFBLE1BQUEsS0FBQSxJQUFBbzhDLEVBQUEsS0FBQSxZQUFBQSxFQUFBLEtBQUFBLEVBQUEsSUFBQS9nRCxRQUFBLFdBQUEsRUFBQSxVQUFBLFdBUUE2bUQsYUFDQTl5QyxRQUFBLG9FQUNBOU8sS0FBQSxTQUNBMjZCLElBQUEsU0FBQW1oQixHQUNBLE1BQUEsaUJBQUFBLEVBQUEsR0FBQSxXQUFBQSxFQUFBLEdBQUFwOEMsUUFBQSxTQUFBLE1BQUFBLFFBQUEsUUFBQSxJQUFBLG1CQUtBb2tDLEVBQUE1cEMsVUFBQThuQixHQUFBLHFCQUFBLFNBQUFuYixFQUFBNHhDLEVBQUFoQixHQUVBLElBRUE3RSxFQUNBbUssRUFDQWpCLEVBQ0FyYSxFQUNBb2dCLEVBQ0FDLEVBUEFubkIsRUFBQThjLEVBQUE3NEMsS0FBQSxHQUNBb0IsR0FBQSxFQVNBNHlDLEVBQUE5TyxFQUFBcmxDLFFBQUEsS0FBQXVsQyxFQUFBeVQsRUFBQXRsQixLQUFBeWdCLE9BR0E5TyxFQUFBcG1DLEtBQUFrMUMsRUFBQSxTQUFBbVAsRUFBQUMsR0FHQSxHQUZBbEcsRUFBQW5oQixFQUFBenpCLE1BQUE4NkMsRUFBQWx6QyxTQUVBLENBT0EsR0FIQTlPLEVBQUFnaUQsRUFBQWhpRCxLQUNBOGhELEtBRUFFLEVBQUFqQixZQUFBakYsRUFBQWtHLEVBQUFqQixZQUFBLENBR0EsTUFGQWMsRUFBQS9GLEVBQUFrRyxFQUFBakIsYUFFQSxLQUNBYyxFQUFBQSxFQUFBaEYsVUFBQSxJQUdBZ0YsRUFBQUEsRUFBQTkvQyxNQUFBLEtBRUEsSUFBQSxJQUFBaUYsRUFBQSxFQUFBQSxFQUFBNjZDLEVBQUE1a0QsU0FBQStKLEVBQUEsQ0FDQSxJQUFBd3BCLEVBQUFxeEIsRUFBQTc2QyxHQUFBakYsTUFBQSxJQUFBLEdBRUEsR0FBQXl1QixFQUFBdnpCLFNBQ0E2a0QsRUFBQXR4QixFQUFBLElBQUF5eEIsbUJBQUF6eEIsRUFBQSxHQUFBOXdCLFFBQUEsTUFBQSxRQWNBLE9BVEEraEMsRUFBQXFDLEVBQUFybEMsUUFBQSxLQUFBdWpELEVBQUF2Z0IsT0FBQWdXLEVBQUF0bEIsS0FBQTR2QixHQUFBRCxHQUVBbm5CLEVBQUEsYUFBQW1KLEVBQUE5akMsS0FBQWdpRCxFQUFBcm5CLEtBQUFxbkIsRUFBQXJuQixJQUFBci9CLEtBQUFoQixLQUFBd2hELEVBQUFyYSxFQUFBZ1csR0FBQTRJLEVBQUEyQixFQUFBcm5CLElBQUFtaEIsRUFBQXJhLEdBQ0FzYixFQUFBLGFBQUFqWixFQUFBOWpDLEtBQUFnaUQsRUFBQWpGLE9BQUFpRixFQUFBakYsTUFBQXpoRCxLQUFBaEIsS0FBQXdoRCxFQUFBcmEsRUFBQWdXLEdBQUE0SSxFQUFBMkIsRUFBQWpGLE1BQUFqQixHQUVBLFVBQUFpRyxJQUNBcG5CLEVBQUFBLEVBQUFqN0IsUUFBQSxPQUFBLE9BR0EsS0FLQU0sR0FDQXkzQyxFQUFBNzRDLElBQUErN0IsRUFDQThjLEVBQUF6M0MsS0FBQUEsRUFFQXkzQyxFQUFBdGxCLEtBQUE0cUIsT0FBQXRGLEVBQUF0bEIsS0FBQStsQixRQUFBVCxFQUFBdGxCLEtBQUErbEIsT0FBQWo3QyxTQUNBdzZDLEVBQUF0bEIsS0FBQTRxQixNQUFBQSxHQUdBLFdBQUEvOEMsSUFDQThqQyxFQUFBcmxDLFFBQUEsRUFBQWc1QyxFQUFBdGxCLE1BQ0ErZSxRQUNBRCxTQUFBLEVBQ0FobEMsTUFDQW1sQyxVQUFBLFNBS0FxRyxFQUFBeUsscUJBakVBQyxFQW1FQTFLLEVBQUF0bEIsS0FBQXdmLFlBQUEsMkJBR0FoWCxJQUNBOGMsRUFBQXozQyxLQUFBeTNDLEVBQUF0bEIsS0FBQWtmLGVBdk1BLENBNE1BaDNDLE9BQUE2QixRQUFBQSxRQVFBLFNBQUE3QixFQUFBSCxFQUFBNHBDLEdBQ0EsYUFFQSxJQUFBb1IsRUFDQTc2QyxFQUFBNjJCLHVCQUNBNzJCLEVBQUE4NkMsNkJBQ0E5NkMsRUFBQSs2QywwQkFDQS82QyxFQUFBZzdDLHdCQUVBLFNBQUExM0MsR0FDQSxPQUFBdEQsRUFBQTZmLFdBQUF2YyxFQUFBLElBQUEsS0FLQXlrRCxFQUNBL25ELEVBQUFnb0Qsc0JBQ0Fob0QsRUFBQWlvRCw0QkFDQWpvRCxFQUFBa29ELHlCQUNBbG9ELEVBQUFtb0QsdUJBQ0EsU0FBQS82QyxHQUNBcE4sRUFBQTA2QixhQUFBdHRCLElBS0FnN0MsRUFBQSxTQUFBNTdDLEdBQ0EsSUFBQThHLEtBR0E5RyxHQURBQSxFQUFBQSxFQUFBZ2UsZUFBQWhlLEdBQUF4TSxFQUFBd00sR0FDQTBnQixTQUFBMWdCLEVBQUEwZ0IsUUFBQXRxQixPQUFBNEosRUFBQTBnQixRQUFBMWdCLEVBQUFtZixnQkFBQW5mLEVBQUFtZixlQUFBL29CLE9BQUE0SixFQUFBbWYsZ0JBQUFuZixHQUVBLElBQUEsSUFBQTRCLEtBQUE1QixFQUVBQSxFQUFBNEIsR0FBQTRkLE1BQ0ExWSxFQUFBN1MsTUFBQXN6QyxFQUFBdm5DLEVBQUE0QixHQUFBNGQsTUFBQWdvQixFQUFBeG5DLEVBQUE0QixHQUFBNmQsUUFFQXpmLEVBQUE0QixHQUFBb2UsU0FDQWxaLEVBQUE3UyxNQUFBc3pDLEVBQUF2bkMsRUFBQTRCLEdBQUFvZSxRQUFBd25CLEVBQUF4bkMsRUFBQTRCLEdBQUFxZSxVQUlBLE9BQUFuWixHQUdBc2hDLEVBQUEsU0FBQXlULEVBQUFDLEVBQUEvMEMsR0FDQSxPQUFBKzBDLEdBQUFELEVBSUEsTUFBQTkwQyxFQUNBODBDLEVBQUF0VSxFQUFBdVUsRUFBQXZVLEVBRUEsTUFBQXhnQyxFQUNBODBDLEVBQUFyVSxFQUFBc1UsRUFBQXRVLEVBR0E3dUMsS0FBQW9qRCxLQUFBcGpELEtBQUFxakQsSUFBQUgsRUFBQXRVLEVBQUF1VSxFQUFBdlUsRUFBQSxHQUFBNXVDLEtBQUFxakQsSUFBQUgsRUFBQXJVLEVBQUFzVSxFQUFBdFUsRUFBQSxJQVZBLEdBYUF5VSxFQUFBLFNBQUFqTixHQUVBLEdBQUFBLEVBQUF4aEMsR0FBQSxzRUFBQXl2QixFQUFBNWtDLFdBQUEyMkMsRUFBQTE0QyxJQUFBLEdBQUE0bEQsVUFBQWxOLEVBQUF6NUIsS0FBQSxjQUNBLE9BQUEsRUFJQSxJQUFBLElBQUF0ZSxFQUFBLEVBQUFrbEQsRUFBQW5OLEVBQUEsR0FBQTV4QyxXQUFBc1EsRUFBQXl1QyxFQUFBL2xELE9BQUFhLEVBQUF5VyxFQUFBelcsSUFDQSxHQUFBLG1CQUFBa2xELEVBQUFsbEQsR0FBQWdLLFNBQUFtN0MsT0FBQSxFQUFBLElBQ0EsT0FBQSxFQUlBLE9BQUEsR0FHQUMsRUFBQSxTQUFBcDZDLEdBQ0EsSUFBQXdxQixFQUFBajVCLEVBQUF3d0IsaUJBQUEvaEIsR0FBQSxjQUNBdXFCLEVBQUFoNUIsRUFBQXd3QixpQkFBQS9oQixHQUFBLGNBRUE0cEMsR0FBQSxXQUFBcGYsR0FBQSxTQUFBQSxJQUFBeHFCLEVBQUFxdUMsYUFBQXJ1QyxFQUFBcTZDLGFBQ0FDLEdBQUEsV0FBQS92QixHQUFBLFNBQUFBLElBQUF2cUIsRUFBQTQwQyxZQUFBNTBDLEVBQUF1dUMsWUFFQSxPQUFBM0UsR0FBQTBRLEdBR0FDLEVBQUEsU0FBQXhOLEdBR0EsSUFGQSxJQUFBaUcsR0FBQSxJQUdBQSxFQUFBb0gsRUFBQXJOLEVBQUExNEMsSUFBQSxPQU1BMDRDLEVBQUFBLEVBQUF4bkMsVUFFQXBSLFNBQUE0NEMsRUFBQWhmLFNBQUEsb0JBQUFnZixFQUFBeGhDLEdBQUEsVUFLQSxPQUFBeW5DLEdBSUF3SCxFQUFBLFNBQUE3SyxHQUNBbitDLEtBRUFtK0MsU0FBQUEsRUFGQW4rQyxLQUlBaXBELElBQUE5SyxFQUFBbEIsTUFBQWlNLEdBSkFscEQsS0FLQW1wRCxPQUFBaEwsRUFBQWxCLE1BQUFpQixNQUxBbCtDLEtBTUFvOEMsV0FBQStCLEVBQUFsQixNQUFBdnNCLFVBTkExd0IsS0FRQXFsRCxVQVJBcmxELEtBVUFvOEMsV0FBQTEwQixHQUFBLHlDQUFBOGhCLEVBQUF0aUMsTUFWQWxILEtBVUEsa0JBR0FncEQsRUFBQXhtRCxVQUFBNmlELFFBQUEsV0FDQXJsRCxLQUFBbzhDLFdBQUFyMEIsSUFBQSxjQUdBaWhDLEVBQUF4bUQsVUFBQTRtRCxhQUFBLFNBQUE3OEMsR0FDQSxJQUVBdTVDLEVBQUF0YyxFQUFBajlCLEVBQUE3SCxRQUNBeTVDLEVBSEFuK0MsS0FHQW0rQyxTQUNBamEsRUFBQWlhLEVBQUFqYSxRQUNBbWMsRUFBQW5jLEVBQUFtYyxTQUVBZ0osRUFBQSxjQUFBOThDLEVBQUE3RyxLQVFBLEdBTEEyakQsR0FWQXJwRCxLQVdBbzhDLFdBQUFyMEIsSUFBQSx1QkFJQW1jLEdBZkFsa0MsS0FlQW0rQyxTQUFBYyxhQWZBai9DLEtBZUFtK0MsU0FBQUMsVUFJQSxPQUhBN3hDLEVBQUF3ZCx1QkFDQXhkLEVBQUF1ZCxpQkFNQXZkLEVBQUFnZSxlQUFBLEdBQUFoZSxFQUFBZ2UsY0FBQTNVLFNBS0Frd0MsRUFBQW5qRCxRQUFBNmxELEVBQUExQyxJQUFBMEMsRUFBQTFDLEVBQUEveEMsV0FLQXhILEVBQUFnZSxjQUFBZ0MsUUFBQXU1QixFQUFBLEdBQUEvSSxZQUFBK0ksRUFBQXplLFNBQUF6UyxPQWpDQTUwQixLQXFDQXNwRCxZQUFBbkIsRUFBQTU3QyxJQXJDQXZNLEtBd0NBc3BELGFBeENBdHBELEtBd0NBc3BELFlBQUEzbUQsT0FBQSxHQUFBdzdDLEVBQUFhLFlBeENBaC9DLEtBNENBOGxELFFBQUFBLEVBNUNBOWxELEtBNkNBcWdELFNBQUFBLEVBN0NBcmdELEtBOENBdXBELFFBQUEsRUE5Q0F2cEQsS0ErQ0E2M0IsS0FBQXFNLEVBQUFyTSxLQUFBZ2MsTUFFQXJLLEVBQUE1cEMsR0FBQW1vQixJQUFBLGFBRUF5aEIsRUFBQTVwQyxHQUFBOG5CLEdBQUEyaEMsRUFBQSx5Q0FBQSx1Q0FBQTdmLEVBQUF0aUMsTUFuREFsSCxLQW1EQSxlQUNBd3BDLEVBQUE1cEMsR0FBQThuQixHQUFBMmhDLEVBQUEscUJBQUEscUJBQUE3ZixFQUFBdGlDLE1BcERBbEgsS0FvREEsaUJBcERBQSxLQXNEQTYzQixNQUFBc21CLEVBQUFzRCxZQUFBcUUsRUFBQS9yQyxHQXREQS9aLEtBc0RBbXBELFNBdERBbnBELEtBc0RBbXBELE9BQUE5NEMsS0FBQXkxQyxHQUFBbmpELFNBVUE0SixFQUFBd2Qsa0JBRUF5ZixFQUFBdU0sU0FBQTBGLFdBQUFzTixFQWxFQS9vRCxLQWtFQThsRCxVQUFBaUQsRUFsRUEvb0QsS0FrRUE4bEQsUUFBQS94QyxZQUNBeEgsRUFBQXVkLGlCQW5FQTlwQixLQXNFQTQrQyxZQUFBMTVDLEtBQUF1NkMsTUFBQXZiLEVBQUFtYixPQUFBLEdBQUF0QyxhQXRFQS84QyxLQXVFQXNnRCxhQUFBcDdDLEtBQUF1NkMsTUFBQXZiLEVBQUFtYixPQUFBLEdBQUF3SixjQXZFQTdvRCxLQXlFQTIzQixXQUFBLElBQUFyd0IsTUFBQTY3QyxVQXpFQW5qRCxLQTBFQXdwRCxVQTFFQXhwRCxLQTBFQXlwRCxVQTFFQXpwRCxLQTBFQTIwQyxTQUFBLEVBMUVBMzBDLEtBNEVBMHBELFdBQUEsRUE1RUExcEQsS0E2RUEycEQsV0FBQSxFQTdFQTNwRCxLQThFQTRwRCxXQUFBLEVBOUVBNXBELEtBZ0ZBNnBELGVBaEZBN3BELEtBZ0ZBOHBELGdCQUFBbDZDLElBQUEsRUFBQWdsQixLQUFBLEdBaEZBNTBCLEtBaUZBK3BELGdCQUFBdmdCLEVBQUF1TSxTQUFBcUosYUFqRkFwL0MsS0FpRkFxZ0QsVUFqRkFyZ0QsS0FrRkFncUQsZUFBQSxLQUVBLElBcEZBaHFELEtBb0ZBc3BELFlBQUEzbUQsUUFwRkEzQyxLQW9GQTRwRCxZQXBGQTVwRCxLQXFGQXVwRCxRQUFBcEwsRUFBQWEsVUFFQSxVQUFBOWEsRUFBQXgrQixPQXZGQTFGLEtBdUZBK3BELGdCQUFBLzRCLE1BdkZBaHhCLEtBdUZBNCtDLFlBQUEsR0F2RkE1K0MsS0F1RkErcEQsZ0JBQUE3eUIsT0F2RkFsM0IsS0F1RkFzZ0QsYUFBQSxJQUVBOVcsRUFBQXVNLFNBQUFoekIsS0F6RkEvaUIsS0F5RkFxZ0QsVUF6RkFyZ0QsS0EyRkFxZ0QsU0FBQTE4QixJQUFBLHNCQUFBLE9BM0ZBM2pCLEtBNkZBMHBELFdBQUEsR0E3RkExcEQsS0FpR0EycEQsV0FBQSxFQWpHQTNwRCxLQW9HQW84QyxXQUFBdGdCLFNBQUEsa0NBR0EsSUF2R0E5N0IsS0F1R0FzcEQsWUFBQTNtRCxRQUFBdzdDLEVBQUFjLGFBQUEvYSxFQUFBdWMsVUFBQSxVQUFBdmMsRUFBQXgrQixPQUFBdytCLEVBQUF3YixXQUFBeGIsRUFBQXdlLFNBdkdBMWlELEtBd0dBNHBELFdBQUEsRUF4R0E1cEQsS0EwR0EycEQsV0FBQSxFQTFHQTNwRCxLQTJHQTBwRCxXQUFBLEVBRUFsZ0IsRUFBQXVNLFNBQUFoekIsS0E3R0EvaUIsS0E2R0FxZ0QsVUE3R0FyZ0QsS0ErR0FxZ0QsU0FBQTE4QixJQUFBLHNCQUFBLE9BL0dBM2pCLEtBaUhBaXFELGtCQUFBLElBakhBanFELEtBaUhBc3BELFlBQUEsR0FBQXhWLEVBakhBOXpDLEtBaUhBc3BELFlBQUEsR0FBQXhWLEdBQUF0SyxFQUFBenBDLEdBQUFpMkIsYUFqSEFoMkIsS0FrSEFrcUQsa0JBQUEsSUFsSEFscUQsS0FrSEFzcEQsWUFBQSxHQUFBdlYsRUFsSEEvekMsS0FrSEFzcEQsWUFBQSxHQUFBdlYsR0FBQXZLLEVBQUF6cEMsR0FBQWcyQixZQWxIQS8xQixLQW9IQW1xRCxnQ0FwSEFucUQsS0FvSEFpcUQsa0JBcEhBanFELEtBb0hBK3BELGdCQUFBbjFCLE1BcEhBNTBCLEtBb0hBK3BELGdCQUFBLzRCLE1BcEhBaHhCLEtBcUhBb3FELGdDQXJIQXBxRCxLQXFIQWtxRCxrQkFySEFscUQsS0FxSEErcEQsZ0JBQUFuNkMsS0FySEE1UCxLQXFIQStwRCxnQkFBQTd5QixPQXJIQWwzQixLQXVIQXFxRCw0QkFBQTFWLEVBdkhBMzBDLEtBdUhBc3BELFlBQUEsR0F2SEF0cEQsS0F1SEFzcEQsWUFBQSxNQTlEQXhELEVBQUEvckMsR0FBQSxRQUNBeE4sRUFBQXVkLG9CQWtFQWsvQixFQUFBeG1ELFVBQUE4bkQsWUFBQSxTQUFBLzlDLEdBTUEsR0FKQXZNLEtBRUF1cUQsVUFBQXBDLEVBQUE1N0MsR0FFQWk5QixFQUFBdU0sU0FBQTBGLFdBQUFzTixFQUpBL29ELEtBSUE4bEQsVUFBQWlELEVBSkEvb0QsS0FJQThsRCxRQUFBL3hDLFdBS0EsT0FKQXhILEVBQUF3ZCx1QkFMQS9wQixLQU9BdXBELFFBQUEsR0FLQSxJQVpBdnBELEtBWUE2M0IsTUFaQTczQixLQVlBbStDLFNBQUFzRCxXQVpBemhELEtBWUF1cUQsV0FaQXZxRCxLQVlBdXFELFVBQUE1bkQsU0FaQTNDLEtBZ0JBd3BELFVBQUE3VSxFQWhCQTMwQyxLQWdCQXVxRCxVQUFBLEdBaEJBdnFELEtBZ0JBc3BELFlBQUEsR0FBQSxLQWhCQXRwRCxLQWlCQXlwRCxVQUFBOVUsRUFqQkEzMEMsS0FpQkF1cUQsVUFBQSxHQWpCQXZxRCxLQWlCQXNwRCxZQUFBLEdBQUEsS0FqQkF0cEQsS0FtQkEyMEMsU0FBQUEsRUFuQkEzMEMsS0FtQkF1cUQsVUFBQSxHQW5CQXZxRCxLQW1CQXNwRCxZQUFBLElBbkJBdHBELEtBc0JBMjBDLFNBQUEsR0FBQSxDQUVBLElBeEJBMzBDLEtBd0JBOGxELFFBQUEvckMsR0F4QkEvWixLQXdCQW1wRCxVQXhCQW5wRCxLQXdCQW1wRCxPQUFBOTRDLEtBeEJBclEsS0F3QkE4bEQsU0FBQW5qRCxPQUNBLE9BR0E0SixFQUFBd2Qsa0JBQ0F4ZCxFQUFBdWQsaUJBN0JBOXBCLEtBK0JBMnBELFVBL0JBM3BELEtBZ0NBd3FELFVBaENBeHFELEtBa0NBMHBELFVBbENBMXBELEtBbUNBeXFELFFBbkNBenFELEtBcUNBNHBELFdBckNBNXBELEtBc0NBMHFELFdBT0ExQixFQUFBeG1ELFVBQUFnb0QsUUFBQSxXQUVBLElBSUFHLEVBSkFwd0MsRUFBQXZhLEtBRUE0cUQsRUFBQXJ3QyxFQUFBb3ZDLFVBQ0EvMEIsRUFBQXJhLEVBQUFzdkMsZUFBQWoxQixNQUFBLEdBR0EsSUFBQWcyQixFQUVBMWxELEtBQUFrdUMsSUFBQTc0QixFQUFBbzZCLFVBQUEsS0FFQXA2QixFQUFBZ3ZDLFFBQUEsRUFFQWh2QyxFQUFBNGpDLFNBQUF6QyxNQUFBLzRDLE9BQUEsR0FBQTRYLEVBQUFzZCxLQUFBdWdCLFNBQ0E3OUIsRUFBQW92QyxVQUFBLElBRUFwdkMsRUFBQTRqQyxTQUFBYSxZQUFBLElBQUF6a0MsRUFBQXNkLEtBQUF1Z0IsVUFBQSxTQUFBNzlCLEVBQUFzZCxLQUFBdWdCLFVBQUE1TyxFQUFBenBDLEdBQUFpeEIsUUFBQSxJQUNBelcsRUFBQW92QyxVQUFBLEtBR0FnQixFQUFBemxELEtBQUFrdUMsSUFBQSxJQUFBbHVDLEtBQUEybEQsTUFBQXR3QyxFQUFBa3ZDLFVBQUFsdkMsRUFBQWl2QyxXQUFBdGtELEtBQUFteEIsSUFFQTliLEVBQUFvdkMsVUFBQWdCLEVBQUEsSUFBQUEsRUFBQSxJQUFBLElBQUEsS0FHQXB3QyxFQUFBNGpDLFNBQUFhLFVBQUF6a0MsRUFBQW92QyxVQUdBcHZDLEVBQUErdUMsWUFBQS91QyxFQUFBZ3dDLFVBRUEvZ0IsRUFBQXBtQyxLQUFBbVgsRUFBQTRqQyxTQUFBakMsT0FBQSxTQUFBL2dDLEVBQUF3akMsR0FDQW5WLEVBQUF1TSxTQUFBaHpCLEtBQUE0N0IsRUFBQVUsUUFFQVYsRUFBQVUsT0FBQTE3QixJQUFBLHNCQUFBLE9BRUFnN0IsRUFBQW1NLGNBQUEsRUFFQW5NLEVBQUEvb0IsTUFBQXJiLEVBQUE0akMsU0FBQWphLFFBQUF0TyxNQUNBcmIsRUFBQXN2QyxlQUFBajFCLEtBQUE0VSxFQUFBdU0sU0FBQXFKLGFBQUFULEVBQUFVLFFBQUF6cUIsUUFPQXJhLEVBQUE0akMsU0FBQXdDLFdBQUFwbUMsRUFBQTRqQyxTQUFBd0MsVUFBQUMsVUFDQXJtQyxFQUFBNGpDLFNBQUF3QyxVQUFBNTlCLFNBTUEsS0FBQTZuQyxJQUdBcndDLEVBQUFpdkMsVUFBQSxJQUFBanZDLEVBQUE0akMsU0FBQXpDLE1BQUEvNEMsT0FBQSxHQUFBLElBQUE0WCxFQUFBNGpDLFNBQUFqYSxRQUFBL29CLFFBQUFaLEVBQUE0akMsU0FBQWphLFFBQUFyTSxLQUFBb2UsTUFDQXJoQixHQUFBMXZCLEtBQUFxakQsSUFBQWh1QyxFQUFBaXZDLFVBQUEsSUFFQWp2QyxFQUFBaXZDLFVBQUEsSUFBQWp2QyxFQUFBNGpDLFNBQUF6QyxNQUFBLzRDLE9BQUEsR0FBQTRYLEVBQUE0akMsU0FBQWphLFFBQUEvb0IsUUFBQVosRUFBQTRqQyxTQUFBekMsTUFBQS80QyxPQUFBLElBQUE0WCxFQUFBNGpDLFNBQUFqYSxRQUFBck0sS0FBQW9lLE1BQ0FyaEIsR0FBQTF2QixLQUFBcWpELEtBQUFodUMsRUFBQWl2QyxVQUFBLElBR0E1MEIsR0FBQXJhLEVBQUFpdkMsV0FLQWp2QyxFQUFBdXZDLGVBQ0FsNkMsSUFBQSxLQUFBZzdDLEVBQUEsRUFBQXJ3QyxFQUFBc3ZDLGVBQUFqNkMsSUFBQTJLLEVBQUFrdkMsVUFDQTcwQixLQUFBQSxHQUdBcmEsRUFBQXd3QyxZQUNBakQsRUFBQXZ0QyxFQUFBd3dDLFdBRUF4d0MsRUFBQXd3QyxVQUFBLE1BR0F4d0MsRUFBQXd3QyxVQUFBblEsRUFBQSxXQUVBcmdDLEVBQUF1dkMsZ0JBQ0F0Z0IsRUFBQXBtQyxLQUFBbVgsRUFBQTRqQyxTQUFBakMsT0FBQSxTQUFBL2dDLEVBQUF3akMsR0FDQSxJQUFBL29CLEVBQUErb0IsRUFBQS9vQixJQUFBcmIsRUFBQTRqQyxTQUFBckMsUUFFQXRTLEVBQUF1TSxTQUFBb0wsYUFBQXhDLEVBQUFVLFFBQ0F6dkMsSUFBQTJLLEVBQUF1dkMsY0FBQWw2QyxJQUNBZ2xCLEtBQUFyYSxFQUFBdXZDLGNBQUFsMUIsS0FBQWdCLEVBQUFyYixFQUFBcWtDLFlBQUFocEIsRUFBQStvQixFQUFBOW1CLEtBQUFxZSxXQUlBMzdCLEVBQUE2aEMsV0FBQXRnQixTQUFBLDRCQVNBa3RCLEVBQUF4bUQsVUFBQWlvRCxNQUFBLFdBRUEsSUFFQU8sRUFBQUMsRUFBQUMsRUFGQTN3QyxFQUFBdmEsS0FJQXVhLEVBQUFndkMsUUFBQSxFQUdBeUIsRUFEQXp3QyxFQUFBd3ZDLGdCQUFBLzRCLE1BQUF6VyxFQUFBcWtDLFlBQ0Fya0MsRUFBQXd2QyxnQkFBQW4xQixLQUFBcmEsRUFBQWl2QyxVQUdBanZDLEVBQUF3dkMsZ0JBQUFuMUIsS0FHQXEyQixFQUFBMXdDLEVBQUF3dkMsZ0JBQUFuNkMsSUFBQTJLLEVBQUFrdkMsV0FFQXlCLEVBQUEzd0MsRUFBQTR3QyxjQUFBSCxFQUFBQyxFQUFBMXdDLEVBQUF3dkMsZ0JBQUEvNEIsTUFBQXpXLEVBQUF3dkMsZ0JBQUE3eUIsU0FFQWdwQixPQUFBM2xDLEVBQUF3dkMsZ0JBQUE3SixPQUNBZ0wsRUFBQS9LLE9BQUE1bEMsRUFBQXd2QyxnQkFBQTVKLE9BRUE1bEMsRUFBQXl2QyxlQUFBa0IsRUFFQTN3QyxFQUFBd3dDLFlBQ0FqRCxFQUFBdnRDLEVBQUF3d0MsV0FFQXh3QyxFQUFBd3dDLFVBQUEsTUFHQXh3QyxFQUFBd3dDLFVBQUFuUSxFQUFBLFdBQ0FwUixFQUFBdU0sU0FBQW9MLGFBQUE1bUMsRUFBQThsQyxTQUFBOWxDLEVBQUF5dkMsbUJBS0FoQixFQUFBeG1ELFVBQUEyb0QsY0FBQSxTQUFBSCxFQUFBQyxFQUFBRyxFQUFBQyxHQUVBLElBRUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBRUE3TSxFQUpBNStDLEtBSUE0K0MsWUFDQTBCLEVBTEF0Z0QsS0FLQXNnRCxhQUVBb0wsRUFQQTFyRCxLQU9BK3BELGdCQUFBbjFCLEtBQ0ErMkIsRUFSQTNyRCxLQVFBK3BELGdCQUFBbjZDLElBRUE0NUMsRUFWQXhwRCxLQVVBd3BELFVBQ0FDLEVBWEF6cEQsS0FXQXlwRCxVQXNDQSxPQWxDQTZCLEVBQUFwbUQsS0FBQSt0QixJQUFBLEVBQUEsR0FBQTJyQixFQUFBLEdBQUF3TSxHQUNBRyxFQUFBcm1ELEtBQUErdEIsSUFBQSxFQUFBLEdBQUFxdEIsRUFBQSxHQUFBK0ssR0FFQUcsRUFBQXRtRCxLQUFBZzhDLElBQUF0QyxFQUFBd00sRUFBQSxHQUFBeE0sRUFBQSxHQUFBd00sR0FDQUssRUFBQXZtRCxLQUFBZzhDLElBQUFaLEVBQUErSyxFQUFBLEdBQUEvSyxFQUFBLEdBQUErSyxHQUVBRCxFQUFBeE0sSUFHQTRLLEVBQUEsR0FBQXdCLEVBQUFNLElBQ0FOLEVBQUFNLEVBQUEsRUFBQXBtRCxLQUFBcWpELEtBQUErQyxFQUFBSSxFQUFBbEMsRUFBQSxLQUFBLEdBSUFBLEVBQUEsR0FBQXdCLEVBQUFRLElBQ0FSLEVBQUFRLEVBQUEsRUFBQXRtRCxLQUFBcWpELElBQUFpRCxFQUFBRSxFQUFBbEMsRUFBQSxLQUFBLElBS0E2QixFQUFBL0ssSUFHQW1KLEVBQUEsR0FBQXdCLEVBQUFNLElBQ0FOLEVBQUFNLEVBQUEsRUFBQXJtRCxLQUFBcWpELEtBQUFnRCxFQUFBSSxFQUFBbEMsRUFBQSxLQUFBLEdBSUFBLEVBQUEsR0FBQXdCLEVBQUFRLElBQ0FSLEVBQUFRLEVBQUEsRUFBQXZtRCxLQUFBcWpELElBQUFrRCxFQUFBRSxFQUFBbEMsRUFBQSxLQUFBLEtBTUE3NUMsSUFBQXE3QyxFQUNBcjJCLEtBQUFvMkIsSUFNQWhDLEVBQUF4bUQsVUFBQW9wRCxjQUFBLFNBQUFaLEVBQUFDLEVBQUFHLEVBQUFDLEdBRUEsSUFFQXpNLEVBRkE1K0MsS0FFQTQrQyxZQUNBMEIsRUFIQXRnRCxLQUdBc2dELGFBd0JBLE9BcEJBMEssRUFGQUksRUFBQXhNLEdBQ0FvTSxFQUFBQSxFQUFBLEVBQUEsRUFBQUEsR0FDQXBNLEVBQUF3TSxFQUFBeE0sRUFBQXdNLEVBQUFKLEVBS0E5bEQsS0FBQSt0QixJQUFBLEVBQUEyckIsRUFBQSxFQUFBd00sRUFBQSxJQWdCQXg3QyxJQVZBcTdDLEVBRkFJLEVBQUEvSyxHQUNBMkssRUFBQUEsRUFBQSxFQUFBLEVBQUFBLEdBQ0EzSyxFQUFBK0ssRUFBQS9LLEVBQUErSyxFQUFBSixFQUtBL2xELEtBQUErdEIsSUFBQSxFQUFBcXRCLEVBQUEsRUFBQStLLEVBQUEsR0FNQXoyQixLQUFBbzJCLElBS0FoQyxFQUFBeG1ELFVBQUFrb0QsT0FBQSxXQUVBLElBQUFud0MsRUFBQXZhLEtBSUE2ckQsRUFBQXR4QyxFQUFBd3ZDLGdCQUFBLzRCLE1BQ0E4NkIsRUFBQXZ4QyxFQUFBd3ZDLGdCQUFBN3lCLE9BRUF3MEIsRUFBQW54QyxFQUFBd3ZDLGdCQUFBbjFCLEtBQ0ErMkIsRUFBQXB4QyxFQUFBd3ZDLGdCQUFBbjZDLElBSUFtOEMsRUFGQXBYLEVBQUFwNkIsRUFBQWd3QyxVQUFBLEdBQUFod0MsRUFBQWd3QyxVQUFBLElBRUFod0MsRUFBQTh2Qyw0QkFFQWUsRUFBQWxtRCxLQUFBMm9DLE1BQUFnZSxFQUFBRSxHQUNBVixFQUFBbm1ELEtBQUEyb0MsTUFBQWllLEVBQUFDLEdBR0FDLEdBQUFILEVBQUFULEdBQUE3d0MsRUFBQTR2QywrQkFDQThCLEdBQUFILEVBQUFULEdBQUE5d0MsRUFBQTZ2QywrQkFJQThCLEdBQUEzeEMsRUFBQWd3QyxVQUFBLEdBQUF6VyxFQUFBdjVCLEVBQUFnd0MsVUFBQSxHQUFBelcsR0FBQSxFQUFBdEssRUFBQXpwQyxHQUFBaTJCLGFBQ0FtMkIsR0FBQTV4QyxFQUFBZ3dDLFVBQUEsR0FBQXhXLEVBQUF4NUIsRUFBQWd3QyxVQUFBLEdBQUF4VyxHQUFBLEVBQUF2SyxFQUFBenBDLEdBQUFnMkIsWUFLQXEyQixFQUFBRixFQUFBM3hDLEVBQUEwdkMsa0JBUUFpQixHQUNBdDdDLElBSEErN0MsR0FBQU0sR0FMQUUsRUFBQTV4QyxFQUFBMnZDLG9CQVNBdDFCLEtBTEE4MkIsR0FBQU0sRUFBQUksR0FNQWxNLE9BQUEzbEMsRUFBQXd2QyxnQkFBQTdKLE9BQUE2TCxFQUNBNUwsT0FBQTVsQyxFQUFBd3ZDLGdCQUFBNUosT0FBQTRMLEdBR0F4eEMsRUFBQWd2QyxRQUFBLEVBRUFodkMsRUFBQTZ3QyxTQUFBQSxFQUNBN3dDLEVBQUE4d0MsVUFBQUEsRUFFQTl3QyxFQUFBeXZDLGVBQUFrQixFQUVBM3dDLEVBQUF3d0MsWUFDQWpELEVBQUF2dEMsRUFBQXd3QyxXQUVBeHdDLEVBQUF3d0MsVUFBQSxNQUdBeHdDLEVBQUF3d0MsVUFBQW5RLEVBQUEsV0FDQXBSLEVBQUF1TSxTQUFBb0wsYUFBQTVtQyxFQUFBOGxDLFNBQUE5bEMsRUFBQXl2QyxtQkFLQWhCLEVBQUF4bUQsVUFBQTZwRCxXQUFBLFNBQUE5L0MsR0FFQSxJQUNBKy9DLEVBQUFwbkQsS0FBQSt0QixLQUFBLElBQUEzckIsTUFBQTY3QyxVQURBbmpELEtBQ0EyM0IsVUFBQSxHQUVBaXpCLEVBSEE1cUQsS0FHQTJwRCxVQUNBNEMsRUFKQXZzRCxLQUlBMHBELFVBQ0E4QyxFQUxBeHNELEtBS0E0cEQsVUFrQkEsR0F2QkE1cEQsS0FPQXlzRCxVQUFBdEUsRUFBQTU3QyxHQVBBdk0sS0FTQW84QyxXQUFBamdCLFlBQUEsaUNBRUFxTixFQUFBNXBDLEdBQUFtb0IsSUFBQSxhQVhBL25CLEtBYUErcUQsWUFDQWpELEVBZEE5bkQsS0FjQStxRCxXQWRBL3FELEtBZ0JBK3FELFVBQUEsTUFoQkEvcUQsS0FtQkEycEQsV0FBQSxFQW5CQTNwRCxLQW9CQTBwRCxXQUFBLEVBcEJBMXBELEtBcUJBNHBELFdBQUEsRUFyQkE1cEQsS0F1QkF1cEQsT0FDQSxPQXhCQXZwRCxLQXdCQTBzRCxNQUFBbmdELEdBeEJBdk0sS0EyQkFrNUIsTUFBQSxJQTNCQWw1QixLQThCQTJzRCxVQTlCQTNzRCxLQThCQXdwRCxVQUFBOEMsRUFBQSxHQTlCQXRzRCxLQStCQTRzRCxVQS9CQTVzRCxLQStCQXlwRCxVQUFBNkMsRUFBQSxHQS9CQXRzRCxLQWlDQTZzRCxPQUFBM25ELEtBQUErdEIsSUFBQSxHQWpDQWp6QixLQWlDQWs1QixNQUFBaDBCLEtBQUFnOEMsSUFBQSxJQWpDQWxoRCxLQWlDQWs1QixNQUFBLEVBQUFoMEIsS0FBQWt1QyxJQWpDQXB6QyxLQWlDQTJzRCxXQWpDQTNzRCxLQWlDQWs1QixRQUVBcXpCLEVBbkNBdnNELEtBb0NBOHNELGFBRUFOLEVBdENBeHNELEtBdUNBK3NELGFBdkNBL3NELEtBMENBZ3RELFdBQUFwQyxJQU1BNUIsRUFBQXhtRCxVQUFBd3FELFdBQUEsU0FBQXBDLEdBRUEsSUFDQTNuRCxHQUFBLEVBREFqRCxLQUdBbStDLFNBQUFhLFdBQUEsRUFIQWgvQyxLQUlBOHBELGNBQUEsS0FHQSxLQUFBYyxHQUFBMWxELEtBQUFrdUMsSUFQQXB6QyxLQU9BeXBELFdBQUEsSUFHQWpnQixFQUFBdU0sU0FBQXhjLFFBVkF2NUIsS0FVQW0rQyxTQUFBamEsUUFBQW1iLFFBQ0F6dkMsSUFYQTVQLEtBV0E2cEQsZUFBQWo2QyxJQVhBNVAsS0FXQXlwRCxVQUFBLElBWEF6cEQsS0FXQTRzRCxVQUNBbjVCLFFBQUEsR0FDQSxLQUVBeHdCLEVBZkFqRCxLQWVBbStDLFNBQUF2RyxPQUFBLEVBQUEsTUFFQSxLQUFBZ1QsR0FqQkE1cUQsS0FpQkF3cEQsVUFBQSxJQWpCQXhwRCxLQWlCQW0rQyxTQUFBekMsTUFBQS80QyxPQUFBLEVBQ0FNLEVBbEJBakQsS0FrQkFtK0MsU0FBQUosU0FsQkEvOUMsS0FrQkE2c0QsUUFFQSxLQUFBakMsR0FwQkE1cUQsS0FvQkF3cEQsV0FBQSxJQXBCQXhwRCxLQW9CQW0rQyxTQUFBekMsTUFBQS80QyxPQUFBLElBQ0FNLEVBckJBakQsS0FxQkFtK0MsU0FBQS94QyxLQXJCQXBNLEtBcUJBNnNELFVBR0EsSUFBQTVwRCxHQUFBLEtBQUEybkQsR0FBQSxLQUFBQSxHQXhCQTVxRCxLQXlCQW0rQyxTQUFBZCxPQXpCQXI5QyxLQXlCQW0rQyxTQUFBamEsUUFBQS9vQixNQUFBLEtBekJBbmIsS0E0QkFvOEMsV0FBQWpnQixZQUFBLHdCQU9BNnNCLEVBQUF4bUQsVUFBQXNxRCxXQUFBLFdBRUEsSUFDQTlCLEVBQUFDLEVBQUFDLEVBREFsckQsS0FHQWdxRCxrQkFJQSxJQVBBaHFELEtBT0E2M0IsS0FBQXdnQixVQUNBMlMsRUFSQWhyRCxLQVFBZ3FELGVBQUFwMUIsS0FDQXEyQixFQVRBanJELEtBU0FncUQsZUFBQXA2QyxNQUtBbzdDLEVBZEFockQsS0FjQWdxRCxlQUFBcDFCLEtBZEE1MEIsS0FjQTJzRCxVQWRBM3NELEtBY0FrNUIsTUFDQSt4QixFQWZBanJELEtBZUFncUQsZUFBQXA2QyxJQWZBNVAsS0FlQTRzRCxVQWZBNXNELEtBZUFrNUIsUUFHQWd5QixFQWxCQWxyRCxLQWtCQTRyRCxjQUFBWixFQUFBQyxFQWxCQWpyRCxLQWtCQStwRCxnQkFBQS80QixNQWxCQWh4QixLQWtCQStwRCxnQkFBQTd5QixTQUVBbEcsTUFwQkFoeEIsS0FvQkErcEQsZ0JBQUEvNEIsTUFDQWs2QixFQUFBaDBCLE9BckJBbDNCLEtBcUJBK3BELGdCQUFBN3lCLE9BRUFzUyxFQUFBdU0sU0FBQXhjLFFBdkJBdjVCLEtBdUJBcWdELFNBQUE2SyxFQUFBLE9BSUFsQyxFQUFBeG1ELFVBQUF1cUQsV0FBQSxXQUVBLElBSUEvQixFQUFBQyxFQUFBQyxFQUFBMzBDLEVBRkEydEIsRUFGQWxrQyxLQUVBbStDLFNBQUFqYSxRQUlBa25CLEVBTkFwckQsS0FNQW9yRCxTQUNBQyxFQVBBcnJELEtBT0FxckQsVUFQQXJyRCxLQVNBZ3FELGlCQUlBZ0IsRUFiQWhyRCxLQWFBZ3FELGVBQUFwMUIsS0FHQXJlLEdBQ0EzRyxJQUhBcTdDLEVBZEFqckQsS0FjQWdxRCxlQUFBcDZDLElBSUFnbEIsS0FBQW8yQixFQUNBaDZCLE1BQUFvNkIsRUFDQWwwQixPQUFBbTBCLEVBQ0FuTCxPQUFBLEVBQ0FDLE9BQUEsR0FJQTNXLEVBQUF1TSxTQUFBb0wsYUExQkFuaEQsS0EwQkFxZ0QsU0FBQTlwQyxHQUVBNjBDLEVBNUJBcHJELEtBNEJBNCtDLGFBQUF5TSxFQTVCQXJyRCxLQTRCQXNnRCxhQTVCQXRnRCxLQTZCQW0rQyxTQUFBMEMsV0FBQSxLQUVBdUssRUFBQWxuQixFQUFBbFQsT0FBQXE2QixFQUFBbm5CLEVBQUFoTixPQS9CQWwzQixLQWdDQW0rQyxTQUFBMkIsY0FoQ0E5L0MsS0FnQ0FpcUQsa0JBaENBanFELEtBZ0NBa3FELGtCQUFBLE1BSUFnQixFQXBDQWxyRCxLQW9DQTRyRCxjQUFBWixFQUFBQyxFQUFBRyxFQUFBQyxHQUdBN2hCLEVBQUF1TSxTQUFBb0wsYUF2Q0FuaEQsS0F1Q0E4YixRQUFBMHRCLEVBQUF1TSxTQUFBcUosYUF2Q0FwL0MsS0F1Q0FxZ0QsV0FFQTdXLEVBQUF1TSxTQUFBeGMsUUF6Q0F2NUIsS0F5Q0FxZ0QsU0FBQTZLLEVBQUEsUUFLQWxDLEVBQUF4bUQsVUFBQWtxRCxNQUFBLFNBQUFuZ0QsR0FDQSxJQVdBMGdELEVBWEExeUMsRUFBQXZhLEtBQ0E4bEQsRUFBQXRjLEVBQUFqOUIsRUFBQTdILFFBRUF5NUMsRUFBQTVqQyxFQUFBNGpDLFNBQ0FqYSxFQUFBaWEsRUFBQWphLFFBRUF1b0IsRUFBQWxnRCxHQUFBNDdDLEVBQUE1N0MsSUFBQWdPLEVBQUErdUMsWUFFQTRELEVBQUFULEVBQUEsR0FBQUEsRUFBQSxHQUFBM1ksRUFBQXY1QixFQUFBNHVDLE9BQUE5aEIsU0FBQXpTLEtBQUEsRUFDQXU0QixFQUFBVixFQUFBLEdBQUFBLEVBQUEsR0FBQTFZLEVBQUF4NUIsRUFBQTR1QyxPQUFBOWhCLFNBQUF6M0IsSUFBQSxFQUlBMlAsRUFBQSxTQUFBeVYsR0FFQSxJQUFBbzRCLEVBQUFscEIsRUFBQXJNLEtBQUE3QyxHQU1BLEdBSkF3VSxFQUFBNWtDLFdBQUF3b0QsS0FDQUEsRUFBQUEsRUFBQTNwRCxNQUFBMDZDLEdBQUFqYSxFQUFBMzNCLEtBR0E2Z0QsRUFJQSxPQUFBQSxHQUVBLElBQUEsUUFFQWpQLEVBQUF2RyxNQUFBcjlCLEVBQUE4eUMsWUFFQSxNQUVBLElBQUEsaUJBRUFsUCxFQUFBK0csZ0JBQUEsR0FFQSxNQUVBLElBQUEsT0FFQS9HLEVBQUEveEMsT0FFQSxNQUVBLElBQUEsY0FFQSt4QyxFQUFBekMsTUFBQS80QyxPQUFBLEVBQ0F3N0MsRUFBQS94QyxPQUdBK3hDLEVBQUF2RyxNQUFBcjlCLEVBQUE4eUMsWUFHQSxNQUVBLElBQUEsT0FFQSxTQUFBbnBCLEVBQUF4K0IsT0FBQXcrQixFQUFBd2IsVUFBQXhiLEVBQUF3ZSxVQUVBdkUsRUFBQXNELFNBQ0F0RCxFQUFBMEMsYUFFQTFDLEVBQUFILGVBQ0FHLEVBQUEyQixjQUFBb04sRUFBQUMsR0FFQWhQLEVBQUF6QyxNQUFBLzRDLE9BQUEsR0FDQXc3QyxFQUFBdkcsTUFBQXI5QixFQUFBOHlDLGVBVUEsS0FBQTlnRCxFQUFBZ2UsZUFBQSxHQUFBaGUsRUFBQWdlLGNBQUEzVSxRQUtBdW9DLEVBQUFhLFdBS0FrTyxFQUFBcEgsRUFBQSxHQUFBL0ksWUFBQStJLEVBQUF6ZSxTQUFBelMsTUFBQSxDQUtBLEdBQUFreEIsRUFBQS9yQyxHQUFBLG9FQUNBa3pDLEVBQUEsZUFFQSxHQUFBbkgsRUFBQS9yQyxHQUFBLG1CQUNBa3pDLEVBQUEsWUFFQSxDQUFBLElBQUE5TyxFQUFBamEsUUFBQW1jLFdBQUFsQyxFQUFBamEsUUFBQW1jLFNBQUEzckMsSUFBQW5JLEVBQUE3SCxRQUFBL0IsT0FJQSxPQUhBc3FELEVBQUEsVUFPQSxHQUFBMXlDLEVBQUEreUMsT0FBQSxDQU9BLEdBSkE3eUIsYUFBQWxnQixFQUFBK3lDLFFBQ0EveUMsRUFBQSt5QyxPQUFBLEtBR0Fwb0QsS0FBQWt1QyxJQUFBOFosRUFBQTN5QyxFQUFBMnlDLE1BQUEsSUFBQWhvRCxLQUFBa3VDLElBQUErWixFQUFBNXlDLEVBQUE0eUMsTUFBQSxJQUFBaFAsRUFBQWEsVUFDQSxPQUFBaC9DLEtBSUF1ZixFQUFBLFdBQUEwdEMsUUFNQTF5QyxFQUFBMnlDLEtBQUFBLEVBQ0EzeUMsRUFBQTR5QyxLQUFBQSxFQUVBanBCLEVBQUFyTSxLQUFBLFdBQUFvMUIsSUFBQS9vQixFQUFBck0sS0FBQSxXQUFBbzFCLEtBQUEvb0IsRUFBQXJNLEtBQUEsUUFBQW8xQixHQUNBMXlDLEVBQUEreUMsT0FBQTF0QyxXQUFBLFdBQ0FyRixFQUFBK3lDLE9BQUEsS0FFQS90QyxFQUFBLFFBQUEwdEMsSUFFQSxLQUdBMXRDLEVBQUEsUUFBQTB0QyxHQUtBLE9BQUFqdEQsT0FHQXdwQyxFQUFBNXBDLEdBQUE4bkIsR0FBQSxnQkFBQSxTQUFBbmIsRUFBQTR4QyxHQUNBQSxJQUFBQSxFQUFBNkssWUFDQTdLLEVBQUE2SyxVQUFBLElBQUFBLEVBQUE3SyxNQUlBM1UsRUFBQTVwQyxHQUFBOG5CLEdBQUEsaUJBQUEsU0FBQW5iLEVBQUE0eEMsR0FDQUEsR0FBQUEsRUFBQTZLLFdBQ0E3SyxFQUFBNkssVUFBQTNELFlBOTRCQSxDQW01QkF0bEQsT0FBQUgsU0FBQUcsT0FBQTZCLFFBQUFBLFFBV0EsU0FBQWhDLEVBQUE0cEMsR0FDQSxhQUVBQSxFQUFBcmxDLFFBQUEsRUFBQXFsQyxFQUFBdU0sU0FBQXJNLFVBQ0FnTyxRQUNBYSxVQUNBLGlOQU9BQSxXQUNBaE0sV0FBQSxFQUNBclQsTUFBQSxPQUlBLElBQUF5bkIsRUFBQSxTQUFBeEMsR0FDQW4rQyxLQUFBbStDLFNBQUFBLEVBQ0FuK0MsS0FBQWdDLFFBR0F3bkMsRUFBQXJsQyxPQUFBdzhDLEVBQUFuK0MsV0FDQTQxQixNQUFBLEtBQ0F3b0IsVUFBQSxFQUNBMk0sUUFBQSxLQUVBdnJELEtBQUEsV0FDQSxJQUFBdVksRUFBQXZhLEtBRUF1YSxFQUFBZ3pDLFFBQUFoekMsRUFBQTRqQyxTQUFBbEIsTUFBQTNHLFFBQUFqbUMsS0FBQSx3QkFBQXFYLEdBQUEsUUFBQSxXQUNBbk4sRUFBQXlLLFlBR0F6SyxFQUFBNGpDLFNBQUF6QyxNQUFBLzRDLE9BQUEsSUFBQTRYLEVBQUE0akMsU0FBQXpDLE1BQUFuaEMsRUFBQTRqQyxTQUFBeEMsV0FBQTlqQixLQUFBMGdCLFlBQ0FoK0IsRUFBQWd6QyxRQUFBeG9DLFFBSUFsRCxJQUFBLFNBQUFrakMsR0FDQSxJQUFBeHFDLEVBQUF2YSxLQUdBdWEsRUFBQTRqQyxVQUFBNWpDLEVBQUE0akMsU0FBQWphLFdBQUEsSUFBQTZnQixHQUFBeHFDLEVBQUE0akMsU0FBQWphLFFBQUFyTSxLQUFBb2UsTUFBQTE3QixFQUFBNGpDLFNBQUF4QyxVQUFBcGhDLEVBQUE0akMsU0FBQXpDLE1BQUEvNEMsT0FBQSxHQUNBNFgsRUFBQTZkLE1BQUF4WSxXQUFBLFdBQ0FyRixFQUFBcW1DLFVBQ0FybUMsRUFBQTRqQyxTQUFBZCxRQUFBOWlDLEVBQUE0akMsU0FBQXhDLFVBQUEsR0FBQXBoQyxFQUFBNGpDLFNBQUF6QyxNQUFBLzRDLFNBR0E0WCxFQUFBNGpDLFNBQUFqYSxRQUFBck0sS0FBQTBnQixVQUFBcmYsUUFHQTNlLEVBQUF3SSxPQUNBeEksRUFBQTRqQyxTQUFBRyxtQkFBQSxFQUNBL2pDLEVBQUE0akMsU0FBQUssaUJBSUFnUCxNQUFBLFdBR0EveUIsYUFGQXo2QixLQUVBbzRCLE9BRkFwNEIsS0FJQW80QixNQUFBLE1BR0F0a0IsTUFBQSxXQUNBLElBQ0Fvd0IsRUFEQWxrQyxLQUNBbStDLFNBQUFqYSxRQUVBQSxJQUhBbGtDLEtBSUE0Z0QsVUFBQSxFQUpBNWdELEtBTUF1dEQsUUFDQTU3QyxLQUFBLFFBQUF1eUIsRUFBQXJNLEtBQUE4aEIsS0FBQXpWLEVBQUFyTSxLQUFBampCLE1BQUFzbEMsV0FDQS9kLFlBQUEseUJBQ0FMLFNBQUEsMEJBVEE5N0IsS0FXQTZoQixLQUFBLEtBSUFrQixLQUFBLFdBQ0EsSUFDQW1oQixFQURBbGtDLEtBQ0FtK0MsU0FBQWphLFFBREFsa0MsS0FHQXd0RCxRQUhBeHRELEtBS0F1dEQsUUFDQTU3QyxLQUFBLFFBQUF1eUIsRUFBQXJNLEtBQUE4aEIsS0FBQXpWLEVBQUFyTSxLQUFBampCLE1BQUFxbEMsWUFDQTlkLFlBQUEsMEJBQ0FMLFNBQUEseUJBUkE5N0IsS0FVQTRnRCxVQUFBLEdBR0E1N0IsT0FBQSxXQUNBaGxCLEtBRUE0Z0QsU0FGQTVnRCxLQUdBK2lCLE9BSEEvaUIsS0FNQThULFdBTUEwMUIsRUFBQTVwQyxHQUFBOG5CLElBQ0ErbEMsWUFBQSxTQUFBbGhELEVBQUE0eEMsR0FDQUEsSUFBQUEsRUFBQXdDLFlBQ0F4QyxFQUFBd0MsVUFBQSxJQUFBQSxFQUFBeEMsS0FJQXVQLGdCQUFBLFNBQUFuaEQsRUFBQTR4QyxFQUFBamEsRUFBQTZYLEdBQ0EsSUFBQTRFLEVBQUF4QyxHQUFBQSxFQUFBd0MsVUFFQTVFLEVBRUE0RSxHQUFBemMsRUFBQXJNLEtBQUEwZ0IsVUFBQWhNLFdBQ0FvVSxFQUFBN3NDLFFBR0E2c0MsR0FBQUEsRUFBQUMsVUFDQUQsRUFBQTZNLFNBSUFHLGVBQUEsU0FBQXBoRCxFQUFBNHhDLEVBQUFqYSxHQUNBLElBQUF5YyxFQUFBeEMsR0FBQUEsRUFBQXdDLFVBRUFBLEdBQUFBLEVBQUFDLFVBQ0FELEVBQUE5K0IsT0FJQStyQyxrQkFBQSxTQUFBcmhELEVBQUE0eEMsRUFBQWphLEVBQUEycEIsRUFBQXhQLEdBQ0EsSUFBQXNDLEVBQUF4QyxHQUFBQSxFQUFBd0MsV0FHQUEsSUFBQXpjLEVBQUFyTSxLQUFBMGdCLFdBQUEsS0FBQThGLEdBQUEsS0FBQUEsR0FBQTdVLEVBQUE1cEMsRUFBQXNWLGVBQUE2RSxHQUFBLG9CQUNBOHpDLEVBQUEvakMsaUJBRUE2MkIsRUFBQTM3QixXQUlBOG9DLGlDQUFBLFNBQUF2aEQsRUFBQTR4QyxHQUNBLElBQUF3QyxFQUFBeEMsR0FBQUEsRUFBQXdDLFVBRUFBLEdBQ0FBLEVBQUE1OUIsVUFNQXltQixFQUFBNXBDLEdBQUE4bkIsR0FBQSxtQkFBQSxXQUNBLElBQUF5MkIsRUFBQTNVLEVBQUF1TSxTQUFBMEcsY0FDQWtFLEVBQUF4QyxHQUFBQSxFQUFBd0MsVUFFQUEsR0FBQUEsRUFBQUMsV0FDQWhoRCxFQUFBKzJCLE9BQ0FncUIsRUFBQTZNLFFBR0E3TSxFQUFBOStCLFNBMUtBLENBK0tBamlCLFNBQUFHLE9BQUE2QixRQUFBQSxRQVFBLFNBQUFoQyxFQUFBNHBDLEdBQ0EsYUFHQSxJQUFBem5DLEVBQUEsV0FFQSxJQStDQTZQLEVBRUFwTyxFQUFBTyxFQWpEQWdxRCxJQUVBLG9CQUNBLGlCQUNBLG9CQUNBLG9CQUNBLG1CQUNBLG9CQUlBLDBCQUNBLHVCQUNBLDBCQUNBLDBCQUNBLHlCQUNBLDBCQUtBLDBCQUNBLHlCQUNBLGlDQUNBLHlCQUNBLHlCQUNBLDBCQUlBLHVCQUNBLHNCQUNBLHVCQUNBLHVCQUNBLHNCQUNBLHVCQUdBLHNCQUNBLG1CQUNBLHNCQUNBLHNCQUNBLHFCQUNBLHNCQUtBOXFELEtBR0EsSUFBQU8sRUFBQSxFQUFBQSxFQUFBdXFELEVBQUFwckQsT0FBQWEsSUFHQSxJQUZBb08sRUFBQW04QyxFQUFBdnFELEtBRUFvTyxFQUFBLEtBQUFoUyxFQUFBLENBQ0EsSUFBQW1FLEVBQUEsRUFBQUEsRUFBQTZOLEVBQUFqUCxPQUFBb0IsSUFDQWQsRUFBQThxRCxFQUFBLEdBQUFocUQsSUFBQTZOLEVBQUE3TixHQUdBLE9BQUFkLEVBSUEsT0FBQSxFQWpFQSxHQXFFQSxHQUFBbEIsRUFBQSxDQVNBLElBQUFpc0QsR0FFQUMsUUFBQSxTQUFBMXFELElBRUFBLEVBQUFBLEdBQUEzRCxFQUFBMlAsaUJBRUF4TixFQUFBbXNELG1CQUFBM3FELEVBQUE0cUQsdUJBR0FDLEtBQUEsV0FFQXh1RCxFQUFBbUMsRUFBQXNzRCxtQkFHQXJwQyxPQUFBLFNBQUF6aEIsR0FFQUEsRUFBQUEsR0FBQTNELEVBQUEyUCxnQkFFQXZQLEtBQUFzdUQsZUFDQXR1RCxLQUFBb3VELE9BR0FwdUQsS0FBQWl1RCxRQUFBMXFELElBSUErcUQsYUFBQSxXQUVBLE9BQUFDLFFBQUEzdUQsRUFBQW1DLEVBQUF5c0QscUJBR0FsNUMsUUFBQSxXQUVBLE9BQUFpNUMsUUFBQTN1RCxFQUFBbUMsRUFBQTBzRCxzQkFLQWpsQixFQUFBcmxDLFFBQUEsRUFBQXFsQyxFQUFBdU0sU0FBQXJNLFVBQ0FnTyxRQUNBUyxXQUNBLDRNQU1BQSxZQUNBNUwsV0FBQSxLQUlBL0MsRUFBQTVwQyxHQUFBOG5CLElBQ0ErbEMsWUFBQSxTQUFBbGhELEVBQUE0eEMsR0FDQSxJQUFBL0IsRUFFQStCLEdBQUFBLEVBQUF6QyxNQUFBeUMsRUFBQXhDLFdBQUE5akIsS0FBQXNnQixhQUNBaUUsRUFBQStCLEVBQUFsQixNQUFBdnNCLFdBRUFoSixHQUFBLHNCQUFBLDZCQUFBLFNBQUFuYixHQUVBQSxFQUFBd2Qsa0JBQ0F4ZCxFQUFBdWQsaUJBRUFra0MsRUFBQWhwQyxPQUFBbzNCLEVBQUEsTUFJQStCLEVBQUF0bUIsS0FBQXNnQixhQUFBLElBQUFnRyxFQUFBdG1CLEtBQUFzZ0IsV0FBQTVMLFdBQ0F5aEIsRUFBQUMsUUFBQTdSLEVBQUEsSUFJQStCLEVBQUE2UCxXQUFBQSxHQUVBN1AsR0FDQUEsRUFBQWxCLE1BQUEzRyxRQUFBam1DLEtBQUEsOEJBQUEwVSxRQUtBNm9DLGtCQUFBLFNBQUFyaEQsRUFBQTR4QyxFQUFBamEsRUFBQTJwQixFQUFBeFAsR0FHQUYsR0FBQUEsRUFBQTZQLFlBQUEsS0FBQTNQLElBQ0F3UCxFQUFBL2pDLGlCQUVBcTBCLEVBQUE2UCxXQUFBaHBDLE9BQUFtNUIsRUFBQWxCLE1BQUF2c0IsVUFBQSxNQUtBZytCLGlCQUFBLFNBQUF2USxHQUNBQSxHQUFBQSxFQUFBNlAsWUFDQUEsRUFBQUksVUFLQTVrQixFQUFBNXBDLEdBQUE4bkIsR0FBQTNsQixFQUFBNHNELGlCQUFBLFdBQ0EsSUFBQUwsRUFBQU4sRUFBQU0sZUFDQW5RLEVBQUEzVSxFQUFBdU0sU0FBQTBHLGNBRUEwQixJQUdBQSxFQUFBamEsU0FBQSxVQUFBaWEsRUFBQWphLFFBQUF4K0IsTUFBQXk0QyxFQUFBYyxjQUNBZCxFQUFBamEsUUFBQW1jLFNBQUExOEIsSUFBQSxhQUFBLFFBRUF3NkIsRUFBQWMsYUFBQSxFQUVBZCxFQUFBRixRQUFBLEdBQUEsRUFBQSxJQUdBRSxFQUFBeHpCLFFBQUEscUJBQUEyakMsR0FFQW5RLEVBQUFsQixNQUFBdnNCLFVBQUEwTCxZQUFBLHlCQUFBa3lCLFdBM0hBOWtCLEdBQUFBLEVBQUF1TSxXQUNBdk0sRUFBQXVNLFNBQUFyTSxTQUFBZ08sT0FBQVMsWUFBQSxHQTVFQSxDQTJNQXY0QyxTQUFBRyxPQUFBNkIsUUFBQUEsUUFRQSxTQUFBaEMsRUFBQTRwQyxHQUNBLGFBR0FBLEVBQUF1TSxTQUFBck0sU0FBQUYsRUFBQXJsQyxRQUFBLEdBQ0F1ekMsUUFDQWMsT0FDQSxnV0FNQUEsUUFDQWpNLFdBQUEsRUFDQWtNLGFBQUEsRUFDQVYsU0FBQSxzQkFDQVcsS0FBQSxNQUVBbFAsRUFBQXVNLFNBQUFyTSxVQUVBLElBQUFrbEIsRUFBQSxTQUFBelEsR0FDQW4rQyxLQUFBZ0MsS0FBQW04QyxJQUdBM1UsRUFBQXJsQyxPQUFBeXFELEVBQUFwc0QsV0FFQStxRCxRQUFBLEtBQ0FzQixNQUFBLEtBQ0FDLE1BQUEsS0FDQWxLLFdBQUEsRUFDQWhFLFVBQUEsRUFFQTUrQyxLQUFBLFNBQUFtOEMsR0FDQSxJQUFBNWpDLEVBQUF2YSxLQUVBdWEsRUFBQTRqQyxTQUFBQSxFQUVBQSxFQUFBNFEsT0FBQXgwQyxFQUdBLElBQUE1VyxFQUFBdzZDLEVBQUF6QyxNQUFBLEdBQ0FoMUMsRUFBQXkzQyxFQUFBekMsTUFBQSxHQUVBbmhDLEVBQUFzZCxLQUFBc21CLEVBQUF6QyxNQUFBeUMsRUFBQXhDLFdBQUE5akIsS0FBQTJnQixPQUVBaitCLEVBQUFnekMsUUFBQXBQLEVBQUFsQixNQUFBM0csUUFBQWptQyxLQUFBLDBCQUVBa0ssRUFBQXNkLE1BQUFsMEIsR0FBQStDLElBQ0EsU0FBQS9DLEVBQUErQixNQUFBL0IsRUFBQWswQixLQUFBNHFCLE9BQUE5K0MsRUFBQWswQixLQUFBK2xCLFVBQ0EsU0FBQWwzQyxFQUFBaEIsTUFBQWdCLEVBQUFteEIsS0FBQTRxQixPQUFBLzdDLEVBQUFteEIsS0FBQStsQixTQUdBcmpDLEVBQUFnekMsUUFBQTFvQyxPQUFBNkMsR0FBQSxRQUFBLFdBQ0FuTixFQUFBeUssV0FHQXpLLEVBQUFxbUMsVUFBQSxHQUdBcm1DLEVBQUFnekMsUUFBQXhvQyxRQUlBaXFDLE9BQUEsV0FDQSxJQUdBemxELEVBQ0FqRixFQUhBNjVDLEVBREFuK0MsS0FDQW0rQyxTQUNBcEcsRUFGQS8zQyxLQUVBNjNCLEtBQUFrZ0IsU0FGQS8zQyxLQU1BNnVELE1BQUFybEIsRUFBQSwrQ0FOQXhwQyxLQU1BNjNCLEtBQUE2Z0IsS0FBQSxZQUFBN29CLFNBQUFzdUIsRUFBQWxCLE1BQUF2c0IsVUFBQXJnQixLQUFBMG5DLEdBQUF6OEIsVUFBQW5MLE9BQUE0bkMsSUFHQXh1QyxFQUFBLE9BRUFpZ0MsRUFBQXBtQyxLQUFBKzZDLEVBQUF6QyxNQUFBLFNBQUFsNEMsRUFBQTI1QyxJQUNBNzRDLEVBQUE2NEMsRUFBQXRsQixLQUFBNHFCLFFBQUF0RixFQUFBdGxCLEtBQUErbEIsT0FBQVQsRUFBQXRsQixLQUFBK2xCLE9BQUFqc0MsS0FBQSxPQUFBLFFBRUEsVUFBQXdyQyxFQUFBejNDLE9BQ0FwQixFQUFBNjRDLEVBQUE3NEMsS0FHQUEsR0FBQUEsRUFBQTNCLFNBQ0E0RyxHQUFBLG1CQUFBL0YsRUFBQSxrRUFBQWMsRUFBQSxlQUlBaUYsR0FBQSxRQXZCQXZKLEtBeUJBOHVELE1BQUF0bEIsRUFBQWpnQyxHQUFBc21CLFNBekJBN3ZCLEtBeUJBNnVELE9BQUFubkMsR0FBQSxRQUFBLEtBQUEsV0FDQXkyQixFQUFBZCxPQUFBN1QsRUFBQXhwQyxNQUFBOGhCLEtBQUEsWUExQkE5aEIsS0E2QkE4dUQsTUFBQXorQyxLQUFBLE9BQUEwVSxPQUFBNkMsSUFBQSxPQUFBLFdBQ0EsSUFHQW9KLEVBQ0FrRyxFQUNBKzNCLEVBQ0FDLEVBTkFDLEVBQUEzbEIsRUFBQXhwQyxNQUFBK1QsU0FBQW9vQixZQUFBLDJCQUNBaXpCLEVBQUFELEVBQUFwZSxhQUNBc2UsRUFBQUYsRUFBQWhmLGNBTUFuZixFQUFBaHhCLEtBQUEraUQsY0FBQS9pRCxLQUFBZ3hCLE1BS0FrK0IsR0FKQWg0QixFQUFBbDNCLEtBQUFnakQsZUFBQWhqRCxLQUFBazNCLFFBSUFtNEIsR0FEQUosRUFBQWorQixFQUFBbytCLElBR0EsR0FBQUYsR0FBQSxJQUNBRCxFQUFBQyxHQUNBbCtCLEdBQUFrK0IsRUFDQWg0QixFQUFBbTRCLElBR0FyK0IsRUFBQW8rQixFQUNBbDRCLEdBQUErM0IsSUFJQXpsQixFQUFBeHBDLE1BQUEyakIsS0FDQXFOLE1BQUE5ckIsS0FBQTJvQyxNQUFBN2MsR0FDQWtHLE9BQUFoeUIsS0FBQTJvQyxNQUFBM1csR0FDQW80QixhQUFBcDRCLEVBQUFtNEIsRUFBQW5xRCxLQUFBMm9DLE1BQUEsR0FBQXdoQixFQUFBLEdBQUFuNEIsR0FBQWh5QixLQUFBMm9DLE1BQUEsR0FBQXdoQixFQUFBLEdBQUFuNEIsR0FDQXE0QixjQUFBcnFELEtBQUEyb0MsTUFBQSxHQUFBdWhCLEVBQUEsR0FBQXArQixLQUNBbk0sU0FHQXpoQixLQUFBLFdBQ0FwRCxLQUFBc0UsSUFBQWtsQyxFQUFBeHBDLE1BQUE4aEIsS0FBQSxTQUdBLE1BcEVBOWhCLEtBb0VBNjNCLEtBQUE2Z0IsTUFwRUExNEMsS0FxRUE4dUQsTUFBQTk5QixNQUFBeUssU0FyRUF6N0IsS0FxRUE2dUQsTUFBQWxyQyxJQUFBLGtCQUFBdzZCLEVBQUF6QyxNQUFBLzRDLE9BckVBM0MsS0FxRUE4dUQsTUFBQWowQyxXQUFBalgsR0FBQSxHQUFBbXRDLFlBQUEsR0FBQSxPQUlBOTdCLE1BQUEsU0FBQTBnQixHQUNBLElBRUE4c0IsRUFDQXlCLEVBRkE0SyxFQURBOXVELEtBQ0E4dUQsTUFEQTl1RCxLQUtBbStDLFNBQUFqYSxVQU1BZ2dCLEdBTEF6QixFQUFBcU0sRUFBQWowQyxXQUNBc2hCLFlBQUEsMEJBQ0Foc0IsT0FBQSxnQkFSQW5RLEtBUUFtK0MsU0FBQWphLFFBQUEvb0IsTUFBQSxNQUNBMmdCLFNBQUEsMkJBRUExSixXQUdBLE1BZEFweUIsS0FjQTYzQixLQUFBNmdCLE9BQUF3TCxFQUFBdDBDLElBQUEsR0FBQXMwQyxFQUFBdDBDLElBQUFrL0MsRUFBQTUzQixTQUFBdXJCLEVBQUF0UyxlQUNBMmUsRUFBQS9yQyxPQUFBd1csU0FBQXhELFVBQUErNEIsRUFBQS80QixZQUFBbXVCLEVBQUF0MEMsS0FBQStsQixHQUVBLE1BakJBMzFCLEtBaUJBNjNCLEtBQUE2Z0IsT0FDQXdMLEVBQUF0dkIsS0FBQWs2QixFQUFBLzZDLFNBQUFpaUIsY0FDQWt1QixFQUFBdHZCLEtBQUFrNkIsRUFBQS82QyxTQUFBaWlCLGNBQUE4NEIsRUFBQS82QyxTQUFBaWQsUUFBQXl4QixFQUFBMVIsZ0JBR0ErZCxFQUFBLzZDLFNBQUFnUCxPQUFBd1csU0FBQXZELFdBQUFrdUIsRUFBQXR2QixNQUFBZSxLQUtBc29CLE9BQUEsV0FDQWorQyxLQUFBbStDLFNBQUFsQixNQUFBdnNCLFVBQUEwTCxZQUFBLHVCQUFBcDhCLEtBQUE0a0QsV0FFQTVrRCxLQUFBNGtELFdBQ0E1a0QsS0FBQTZ1RCxPQUNBN3VELEtBQUFndkQsU0FHQWh2RCxLQUFBbStDLFNBQUF4ekIsUUFBQSxnQkFFQTNxQixLQUFBaVYsTUFBQSxJQUVBalYsS0FBQTZ1RCxPQUNBN3VELEtBQUFtK0MsU0FBQXh6QixRQUFBLGdCQUlBM3FCLEtBQUFtK0MsU0FBQUYsVUFHQWw1QixLQUFBLFdBQ0Eva0IsS0FBQTRrRCxXQUFBLEVBQ0E1a0QsS0FBQWkrQyxVQUdBcDVCLEtBQUEsV0FDQTdrQixLQUFBNGtELFdBQUEsRUFDQTVrRCxLQUFBaStDLFVBR0FqNUIsT0FBQSxXQUNBaGxCLEtBQUE0a0QsV0FBQTVrRCxLQUFBNGtELFVBQ0E1a0QsS0FBQWkrQyxZQUlBelUsRUFBQTVwQyxHQUFBOG5CLElBRUErbEMsWUFBQSxTQUFBbGhELEVBQUE0eEMsR0FDQSxJQUFBNFEsRUFFQTVRLElBQUFBLEVBQUE0USxTQUNBQSxFQUFBLElBQUFILEVBQUF6USxJQUVBeUMsV0FBQSxJQUFBbU8sRUFBQWwzQixLQUFBMFUsV0FDQXdpQixFQUFBbHFDLFFBS0E2b0MsZ0JBQUEsU0FBQW5oRCxFQUFBNHhDLEVBQUFoQixFQUFBcEIsR0FDQSxJQUFBZ1QsRUFBQTVRLEdBQUFBLEVBQUE0USxPQUVBQSxHQUFBQSxFQUFBbkssV0FDQW1LLEVBQUE5NUMsTUFBQThtQyxFQUFBLEVBQUEsTUFJQTZSLGtCQUFBLFNBQUFyaEQsRUFBQTR4QyxFQUFBamEsRUFBQTJwQixFQUFBeFAsR0FDQSxJQUFBMFEsRUFBQTVRLEdBQUFBLEVBQUE0USxPQUdBQSxHQUFBQSxFQUFBbk8sVUFBQSxLQUFBdkMsSUFDQXdQLEVBQUEvakMsaUJBRUFpbEMsRUFBQS9wQyxXQUlBMHBDLGlCQUFBLFNBQUFuaUQsRUFBQTR4QyxHQUNBLElBQUE0USxFQUFBNVEsR0FBQUEsRUFBQTRRLE9BRUFBLEdBQUFBLEVBQUFuSyxZQUFBLElBQUFtSyxFQUFBbDNCLEtBQUE0Z0IsYUFDQXNXLEVBQUFGLE1BQUE5cEMsVUEvT0EsQ0FxUEFubEIsU0FBQUcsT0FBQTZCLFFBUUEsU0FBQWhDLEVBQUE0cEMsR0FDQSxhQUVBQSxFQUFBcmxDLFFBQUEsRUFBQXFsQyxFQUFBdU0sU0FBQXJNLFVBQ0FnTyxRQUNBOFgsTUFDQSxpT0FNQUEsT0FDQTNZLElBQ0EsNjVEQXNDQXJOLEVBQUE1cEMsR0FBQThuQixHQUFBLFFBQUEsd0JBQUEsV0FDQSxJQUNBMlksRUFDQXdXLEVBRkE0WSxFQUFBam1CLEVBQUF1TSxTQUFBMEcsY0FJQWdULElBQ0FwdkIsR0FBQSxJQUFBb3ZCLEVBQUF2ckIsUUFBQXJNLEtBQUEvaUIsS0FBQTI2QyxFQUFBdnJCLFFBQUE1L0IsSUFBQXZFLE9BQUFnVixTQUNBOGhDLEVBQUE0WSxFQUFBdnJCLFFBQUFyTSxLQUFBMjNCLE1BQUEzWSxJQUNBenhDLFFBQUEsZUFBQW01QixtQkFBQThCLElBQ0FqN0IsUUFBQSxtQkExQkEsU0FBQWdCLEdBQ0EsSUFBQXNwRCxHQUNBQyxJQUFBLFFBQ0FDLElBQUEsT0FDQWw5QyxJQUFBLE9BQ0FtOUMsSUFBQSxTQUNBQyxJQUFBLFFBQ0FDLElBQUEsU0FDQUMsSUFBQSxTQUNBQyxJQUFBLFVBR0EsT0FBQXprRCxPQUFBcEYsR0FBQWhCLFFBQUEsZUFBQSxTQUFBaTVCLEdBQ0EsT0FBQXF4QixFQUFBcnhCLEtBYUE2eEIsQ0FBQTd2QixJQUNBajdCLFFBQUEsaUJBQUFxcUQsRUFBQXpLLFNBQUF6bUIsbUJBQUFreEIsRUFBQXpLLFNBQUF6akQsUUFBQSxJQUVBaW9DLEVBQUF1TSxTQUFBdlEsTUFDQWxoQyxJQUFBbXJELEVBQUF6UyxVQUFBeVMsRUFBQTVZLEdBQ0FueEMsS0FBQSxPQUNBbXlCLE1BQ0FtZixnQkFBQSxPQUNBQyxrQkFBQSxVQXJFQSxDQTRFQXIzQyxTQUFBRyxPQUFBNkIsUUFBQUEsUUFRQSxTQUFBaEMsRUFBQUcsRUFBQXlwQyxHQUNBLGFBR0FBLEVBQUE1dkIsaUJBQ0E0dkIsRUFBQTV2QixlQUFBLFNBQUE3SCxHQWlCQSxPQUFBQSxFQUFBLElBQUEzTSxRQWhCQSwrQ0FDQSxTQUFBd0csRUFBQUMsR0FDQSxPQUFBQSxFQUVBLE9BQUFELEVBQ0EsSUFJQUEsRUFBQXRMLE1BQUEsR0FBQSxHQUFBLEtBQUFzTCxFQUFBRSxXQUFBRixFQUFBakosT0FBQSxHQUFBaEMsU0FBQSxJQUFBLElBSUEsS0FBQWlMLE1BUUEsSUFBQXVrRCxHQUFBLEVBSUFDLEVBQUEsS0FHQUMsRUFBQSxLQUdBLFNBQUFDLElBQ0EsSUFBQXg3QyxFQUFBL1UsRUFBQWdWLFNBQUFELEtBQUE2ekMsT0FBQSxHQUNBbkgsRUFBQTFzQyxFQUFBck4sTUFBQSxLQUNBMFQsRUFBQXFtQyxFQUFBNytDLE9BQUEsR0FBQSxXQUFBNEssS0FBQWkwQyxFQUFBQSxFQUFBNytDLE9BQUEsSUFBQTg0QixTQUFBK2xCLEVBQUFuNEMsS0FBQSxHQUFBLEtBQUEsRUFBQSxFQUNBa25ELEVBQUEvTyxFQUFBNXpDLEtBQUEsS0FPQSxPQUpBdU4sRUFBQSxJQUNBQSxFQUFBLElBSUFyRyxLQUFBQSxFQUNBcUcsTUFBQUEsRUFDQW8xQyxRQUFBQSxHQUtBLFNBQUFDLEVBQUFud0IsR0FDQSxJQUFBa2IsRUFFQSxLQUFBbGIsRUFBQWt3QixXQUdBaFYsRUFBQS9SLEVBQUEsbUJBQUFBLEVBQUE1dkIsZUFBQXltQixFQUFBa3dCLFNBQUEsTUFBQTNzRCxHQUFBeThCLEVBQUFsbEIsTUFBQSxJQUVBeFksU0FFQTQ0QyxFQUFBL1IsRUFBQSxJQUFBQSxFQUFBNXZCLGVBQUF5bUIsRUFBQWt3QixXQUdBaFYsRUFBQTU0QyxTQUNBd3RELEdBQUEsRUFFQTVVLEVBQUE1d0IsUUFBQSxXQU9BLFNBQUE4bEMsRUFBQXRTLEdBQ0EsSUFBQXRtQixFQUVBLFFBQUFzbUIsS0FJQXRtQixFQUFBc21CLEVBQUFqYSxRQUFBaWEsRUFBQWphLFFBQUFyTSxLQUFBc21CLEVBQUF0bUIsTUFFQS9pQixPQUFBK2lCLEVBQUE2bEIsTUFBQTdsQixFQUFBNmxCLE1BQUE1N0IsS0FBQSxZQUFBLEtBSUEwbkIsRUFBQSxZQUdBLElBQUFBLEVBQUF1TSxTQUFBck0sU0FBQTUwQixPQUtBMDBCLEVBQUE1cEMsR0FBQThuQixJQUNBK2xDLFlBQUEsU0FBQWxoRCxFQUFBNHhDLEdBQ0EsSUFBQTlkLEVBQUFrd0IsR0FFQSxJQUFBcFMsRUFBQXpDLE1BQUF5QyxFQUFBeEMsV0FBQTlqQixLQUFBL2lCLE9BSUF1ckIsRUFBQWl3QixLQUNBQyxFQUFBRSxFQUFBdFMsS0FHQTlkLEVBQUFrd0IsU0FBQUEsR0FBQWx3QixFQUFBa3dCLFVBQ0FwUyxFQUFBeEMsVUFBQXRiLEVBQUFsbEIsTUFBQSxLQUlBdXlDLGdCQUFBLFNBQUFuaEQsRUFBQTR4QyxFQUFBamEsR0FDQSxJQUFBcXNCLEVBRUFyc0IsSUFBQSxJQUFBQSxFQUFBck0sS0FBQS9pQixPQUlBeTdDLEVBQUFFLEVBQUF0UyxLQUdBLEtBQUFvUyxJQUVBeHdELEVBQUFnVixTQUFBRCxLQUFBclUsUUFBQTh2RCxHQUFBLElBQ0FwUyxFQUFBdG1CLEtBQUE2NEIsU0FBQTN3RCxFQUFBZ1YsU0FBQUQsTUFHQXM3QyxFQUFBRyxHQUFBcFMsRUFBQXpDLE1BQUEvNEMsT0FBQSxFQUFBLEtBQUF1aEMsRUFBQS9vQixNQUFBLEdBQUEsSUFFQSxpQkFBQXBiLEVBQUE0d0QsU0FDQU4sR0FDQTUxQixhQUFBNDFCLEdBR0FBLEVBQUF6d0MsV0FBQSxXQUNBN2YsRUFBQTR3RCxRQUFBUixFQUFBLFlBQUEsbUJBQUF2d0QsRUFBQXF5QyxNQUFBbHlDLEVBQUFnVixTQUFBNjdDLFNBQUE3d0QsRUFBQWdWLFNBQUE4N0MsT0FBQSxJQUFBVCxHQUVBQyxFQUFBLEtBRUFGLEdBQUEsR0FFQSxNQUdBcHdELEVBQUFnVixTQUFBRCxLQUFBczdDLElBT0ExQixpQkFBQSxTQUFBbmlELEVBQUE0eEMsRUFBQWphLEdBQ0EsSUFBQXFzQixFQUFBRyxFQUVBTCxHQUNBNTFCLGFBQUE0MUIsSUFHQSxJQUFBbnNCLEVBQUFyTSxLQUFBL2lCLE9BSUF5N0MsRUFBQUUsRUFBQXRTLEdBQ0F1UyxFQUFBdlMsR0FBQUEsRUFBQXRtQixLQUFBNjRCLFNBQUF2UyxFQUFBdG1CLEtBQUE2NEIsU0FBQSxHQUdBSCxHQUFBLEtBQUFBLElBRUEsaUJBQUFJLFFBQ0E1d0QsRUFBQTR3RCxRQUFBRyxnQkFBQWx4RCxFQUFBcXlDLE1BQUFseUMsRUFBQWdWLFNBQUE2N0MsU0FBQTd3RCxFQUFBZ1YsU0FBQTg3QyxPQUFBSCxJQUdBM3dELEVBQUFnVixTQUFBRCxLQUFBNDdDLEVBR0FsbkIsRUFBQXpwQyxHQUFBZzJCLFVBQUFvb0IsRUFBQXBvQixXQUFBQyxXQUFBbW9CLEVBQUFub0IsY0FJQW82QixFQUFBLFNBS0E1bUIsRUFBQXpwQyxHQUFBMm5CLEdBQUEsZ0JBQUEsV0FDQSxJQUFBMlksRUFBQWl3QixJQUVBOW1CLEVBQUF1TSxTQUFBMEcsZUFDQTJULEdBQUFBLElBQUEvdkIsRUFBQWt3QixRQUFBLElBQUFsd0IsRUFBQWxsQixPQUFBLElBQUFrbEIsRUFBQWxsQixPQUFBaTFDLEdBQUEvdkIsRUFBQWt3QixVQUNBSCxFQUFBLEtBRUE1bUIsRUFBQXVNLFNBQUE2QixTQUdBLEtBQUF2WCxFQUFBa3dCLFNBQ0FDLEVBQUFud0IsS0FLQXpnQixXQUFBLFdBQ0E0d0MsRUFBQUYsTUFDQSxPQWhOQSxDQW1OQTF3RCxTQUFBRyxPQUFBQSxPQUFBNkIsUUFBQUEsUUN2aEtBLFNBQUFtdkQsR0FDQSxTQUFBQyxFQUFBQyxHQUNBLEdBQUFDLEVBQUFELEdBQUEsT0FBQUMsRUFBQUQsR0FBQXR4RCxRQUNBLElBQUFELEVBQUF3eEQsRUFBQUQsSUFDQXp0RCxFQUFBeXRELEVBQ0FoMkMsR0FBQSxFQUNBdGIsWUFFQSxPQUFBb3hELEVBQUFFLEdBQUFqd0QsS0FBQXRCLEVBQUFDLFFBQUFELEVBQUFBLEVBQUFDLFFBQUFxeEQsR0FDQXR4RCxFQUFBdWIsR0FBQSxFQUFBdmIsRUFBQUMsUUFFQSxJQUFBdXhELEtBQ0FGLEVBQUF0a0QsRUFBQXFrRCxFQUFBQyxFQUFBRyxFQUFBRCxFQUFBRixFQUFBbk0sRUFBQSxTQUFBbGxELEVBQUEwRSxFQUFBNjJCLEdBQ0E4MUIsRUFBQUksRUFBQXp4RCxFQUFBMEUsSUFBQWpFLE9BQUF1aEIsZUFBQWhpQixFQUFBMEUsR0FDQXVkLGNBQUEsRUFDQTBJLFlBQUEsRUFDQXpuQixJQUFBcTRCLEtBRUE4MUIsRUFBQS8yQyxFQUFBLFNBQUF2YSxHQUNBLElBQUF3N0IsRUFBQXg3QixHQUFBQSxFQUFBMnhELFdBQUEsV0FDQSxPQUFBM3hELEVBQUE0eEQsU0FDQSxXQUNBLE9BQUE1eEQsR0FFQSxPQUFBc3hELEVBQUFuTSxFQUFBM3BCLEVBQUEsSUFBQUEsR0FBQUEsR0FDQTgxQixFQUFBSSxFQUFBLFNBQUFsMUMsRUFBQTgyQixHQUNBLE9BQUE1eUMsT0FBQW9DLFVBQUEzQixlQUFBRyxLQUFBa2IsRUFBQTgyQixJQUNBZ2UsRUFBQTk2QixFQUFBLEdBQUE4NkIsRUFBQUEsRUFBQTN5QixFQUFBLEdBM0JBLEVBNEJBLFNBQUEzK0IsRUFBQUMsRUFBQXF4RCxHQUNBLGFBQ0EsSUFBQU8sRUFBQUMsRUFBQUMsRUFDQSxtQkFBQWxxRCxRQUFBQSxPQUFBQyxTQUVBZ3FELEdBQUFSLEVBQUEsU0FBQSxLQUFBUyxFQUFBLG1CQUFBRixFQUNBLFNBQUEvbkIsR0FDQSxPQUFBQSxJQUZBK25CLEVBQUE5dEQsTUFBQTlELEVBQUE2eEQsR0FBQUQsS0FBQTd4RCxFQUFBQyxRQUFBOHhELElBSUEsU0FBQS94RCxFQUFBQyxFQUFBcXhELEdBQ0EsYUFDQSxJQUFBTyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBLG1CQUFBbnFELFFBQUEsaUJBQUFBLE9BQUFDLFNBQUEsU0FBQS9CLEdBQ0EsY0FBQUEsR0FDQSxTQUFBQSxHQUNBLE9BQUFBLEdBQUEsbUJBQUE4QixRQUFBOUIsRUFBQS9DLGNBQUE2RSxRQUFBOUIsSUFBQThCLE9BQUEvRSxVQUFBLGdCQUFBaUQsR0FHQStyRCxHQUFBUixFQUFBLEdBQUFBLEVBQUEsSUFBQUEsRUFBQSxVQUNBLEtBQUFTLEVBQUEsbUJBQUFGLEVBQ0EsU0FBQS9uQixFQUFBenBDLEVBQUFILEVBQUFvRixHQUNBLFNBQUEyc0QsRUFBQUMsRUFBQXh0RCxFQUFBeXRELEdBQ0EsS0FBQTd4RCxnQkFBQTJ4RCxHQUFBLE9BQUEsSUFBQUEsRUFBQUMsRUFBQXh0RCxFQUFBeXRELEdBQ0E3eEQsS0FBQXdPLEdBQUF4SixFQUFBaEYsS0FBQWtvQixVQUFBbG9CLEtBQUE4eEQsUUFBQTlzRCxFQUFBaEYsS0FBQSt4RCxjQUFBLEdBQ0EsSUFBQUYsSUFBQXJvQixFQUFBM2tDLGNBQUErc0QsR0FBQXh0RCxFQUFBd3RELEdBQUF4dEQsRUFBQUEsT0FBQXd0RCxNQUFBQSxFQUNBNXhELEtBQUE2M0IsS0FBQTJSLEVBQUFybEMsUUFBQSxLQUFBbkUsS0FBQTBwQyxTQUFBdGxDLEdBQUFwRSxLQUFBZ3lELGFBQUE1dEQsR0FBQUEsRUFBQTZ0RCxjQUFBanRELEVBQ0FoRixLQUFBa3lELFlBQUE5dEQsTUFBQXBFLEtBQUFteUQsTUFBQW55RCxLQUFBNjNCLEtBQUF1NkIsYUFBQUMsRUFBQXJ5RCxLQUFBNjNCLEtBQUErNUIsTUFBQXh0RCxFQUFBcEUsS0FBQTYzQixPQUVBLFNBQUF3NkIsRUFBQUMsRUFBQWx1RCxFQUFBeXpCLEdBQ0EsSUFBQTA2QixFQUFBWixFQUFBbnZELFVBQUFnd0QsUUFBQUYsR0FDQSxPQUFBQyxHQUFBQSxFQUFBWCxPQUFBUyxFQUFBRSxFQUFBWCxNQUFBNXNELEVBQUE2eUIsR0FDQTJSLEVBQUFybEMsUUFBQSxFQUFBMHpCLEVBQUEwNkIsR0FBQS9vQixFQUFBcmxDLFFBQUEsRUFBQTB6QixFQUFBenpCLElBQUEsSUFBQSxPQUFBeXpCLEVBQUE0NkIsT0FBQTU2QixFQUFBNDZCLEtBQUFILElBQ0EsR0FFQSxTQUFBSSxFQUFBNzZCLEVBQUE4NkIsR0FDQSxTQUFBQyxFQUFBSCxFQUFBSSxFQUFBaDdCLEdBQ0EsSUFBQWk3QixHQUFBLEVBQ0EsR0FBQSxPQUFBTCxHQUFBLEtBQUFBLEtBQUFLLEVBQUEsT0FBQWo3QixFQUFBazdCLE9BQUFOLEdBQUFBLEVBQUE1NkIsRUFBQWs3QixPQUFBM3RELFFBQUEsaUJBQUEsT0FBQTB0RCxHQUFBLEVBQ0FMLEVBQUEsT0FBQSxJQUFBQSxFQUFBOXZELFNBQUEsSUFBQWsxQixFQUFBbTdCLFFBQUEsSUFBQW43QixFQUFBbzdCLFNBQUFwN0IsRUFBQXE3QixZQUFBLElBQ0FyN0IsRUFBQW83QixPQUFBLEdBQUEsTUFBQXA3QixFQUFBbzdCLFFBQUEsTUFBQXA3QixFQUFBbzdCLE9BQUEsQ0FDQSxJQUFBRSxFQUFBLE1BQUF0N0IsRUFBQW83QixPQUFBLEVBQUEsTUFBQXA3QixFQUFBbzdCLE9BQUEsRUFBQXA3QixFQUFBbzdCLE9BQ0FSLEVBQUE1NkIsRUFBQXU3QixZQUFBdC9DLE1BQUEyK0MsRUFBQTU2QixFQUFBdTdCLFlBQUFwdkQsSUFBQTZ6QixFQUFBdzdCLGlCQUFBdi9DLE1BQUFxL0MsRUFBQSxJQUFBdDdCLEVBQUFvN0IsT0FBQXA3QixFQUFBdzdCLGlCQUFBcnZELElBRUEsSUFBQXN2RCxFQUFBQyxFQUFBVCxFQUFBLFNBQUFqN0IsRUFBQWs3QixNQUFBbDdCLEVBQUF1NkIsYUFBQUssRUFBQWhyRCxNQUFBLElBQUFzVSxVQUFBbk8sS0FBQSxJQUFBNmtELEVBQ0EsT0FBQWQsRUFBQW52RCxVQUFBZ3hELFdBQUFELEtBQUF2dUQsSUFBQSxJQUFBMnRELEdBQUFXLEdBQ0FiLEtBQUFBLEVBQ0FnQixVQUFBOUIsRUFBQW52RCxVQUFBa3hELFlBQUFqQixFQUFBSyxFQUFBajdCLEdBQ0E4N0Isa0JBQ0FDLFFBQUE1dUQsRUFDQTZ1RCxPQUFBN3VELEVBQ0E4dUQsU0FDQWpCLFNBQUFBLEVBQ0FrQixXQUFBL3VELElBQ0EsSUFBQTJ0RCxJQUFBaEIsRUFBQW52RCxVQUFBZ3hELFdBQUFELEdBQUFELEVBQ0FBLEVBQUE5cEIsRUFBQXJsQyxRQUFBLEtBQUF3dEQsRUFBQW52RCxVQUFBZ3hELFdBQUFELE1BQUFELEVBQUE5cEIsRUFBQXJsQyxRQUFBLEtBQUF3dEQsRUFBQW52RCxVQUFBZ3hELFdBQUFELElBQ0FELEVBRUEsR0FBQTlwQixFQUFBNWtDLFdBQUFpekIsRUFBQTQ2QixRQUFBNTZCLEVBQUE0NkIsS0FBQTU2QixFQUFBNDZCLEtBQUE1NkIsSUFBQTJSLEVBQUF6a0MsUUFBQTh5QixFQUFBNDZCLE1BQUEsQ0FDQSxHQUFBNTZCLEVBQUE0NkIsS0FBQTl2RCxPQUFBLEVBQUEsQ0FDQWsxQixFQUFBbThCLFdBQUEsT0FBQW44QixFQUFBbThCLFlBQUFuOEIsRUFBQW04QixXQUNBLElBQUFDLEVBQUFwOEIsRUFBQXU3QixZQUFBdC9DLE1BQ0EsT0FBQTAxQixFQUFBcG1DLEtBQUF5MEIsRUFBQXU2QixhQUFBdjZCLEVBQUE0NkIsS0FBQTEyQyxVQUFBOGIsRUFBQTQ2QixLQUFBLFNBQUF5QixFQUFBQyxHQUNBRixFQUFBdHhELE9BQUEsSUFBQXN4RCxHQUFBcDhCLEVBQUF1N0IsWUFBQXB2RCxJQUFBNnpCLEVBQUF1OEIsaUJBQUF2OEIsRUFBQXU3QixZQUFBdC9DLE9BQ0FxZ0QsRUFBQTFCLE9BQUF6dEQsR0FBQXdrQyxFQUFBNWtDLFdBQUF1dkQsRUFBQTFCLE1BQUF3QixHQUFBRSxFQUFBRixHQUFBRSxFQUFBMUIsT0FDQUcsRUFBQXFCLEdBQUFwOEIsRUFBQXU3QixZQUFBcHZELElBQUE2ekIsRUFBQTQ2QixLQUFBNTZCLEdBRUFBLEVBQUE0NkIsS0FBQTU2QixFQUFBNDZCLEtBQUFwcEQsTUFFQSxPQUFBd3VCLEVBQUE0NkIsTUFBQTU2QixFQUFBNDZCLEtBQUFBLE9BQUF6dEQsSUFBQXdrQyxFQUFBNWtDLFdBQUFpekIsRUFBQTQ2QixLQUFBQSxNQUFBRyxFQUFBLzZCLEVBQUE0NkIsS0FBQUEsS0FBQTU2QixFQUFBNDZCLEtBQUE1NkIsR0FBQSs2QixFQUFBLzZCLEVBQUE0NkIsS0FBQTU2QixFQUFBNDZCLEtBQUE1NkIsR0FFQSxTQUFBdzhCLEVBQUFDLEVBQUF4QyxFQUFBajZCLEdBQ0EsU0FBQTA4QixFQUFBQyxFQUFBQyxFQUFBQyxHQUNBRCxFQUFBQSxHQUFBLEVBQ0EsSUFBQUUsRUFBQXBuRCxFQUFBcW5ELEVBQUFDLEtBQUFqL0IsRUFBQSxFQUFBay9CLEVBQUFDLElBQ0EsSUFDQSxJQUFBUCxHQUFBUSxJQUFBckIsZUFBQS85QixJQUFBcm9CLEdBQUFxbkQsRUFBQUksSUFBQXJCLGVBQUEvOUIsSUFBQWhwQixNQUNBK25ELEVBQUFDLEVBQUFLLFFBQUEzMEQsUUFBQXUwRCxFQUFBcjBELE1BQUEsSUFBQWswRCxFQUFBRSxFQUFBbmtELE9BQUEsSUFBQWlrRCxFQUFBbm5ELEVBQUEybkQsVUFBQUMsRUFBQXYvQixFQUFBcm9CLE1BQUFBLEdBQUFxbkQsRUFBQVEsRUFBQXgvQixFQUFBKytCLEVBQUEvK0IsRUFBQSxJQUFBaHBCLE1BQ0ErbkQsRUFBQUMsRUFBQUssUUFBQTMwRCxVQUFBLElBQUF1M0IsRUFBQXc5QixZQUFBei9CLEVBQUFrL0IsR0FBQSxpQkFBQWo5QixFQUFBdzlCLFlBQUE1Z0MsU0FBQW9ELEVBQUF3OUIsYUFBQXg5QixFQUFBdzlCLFdBQUF6L0IsSUFBQWkvQixFQUFBcjBELE1BQUEsSUFBQWswRCxFQUFBbm5ELEVBQUEybkQsVUFBQUMsRUFBQXYvQixFQUFBcm9CLEtBQ0Fxb0IsV0FDQTAvQixJQUFBdHdELEdBQUE0d0IsRUFBQTAvQixLQUFBLE9BQUEvbkQsRUFBQXhMLElBQUEsS0FBQXdMLEVBQUFnb0QsTUFBQWQsRUFBQTcrQixHQUNBLE1BQUEsS0FBQWkvQixFQUFBQSxFQUFBbHlELE9BQUEsSUFBQWt5RCxFQUFBeHJELE1BQUEyckQsSUFBQWpCLFdBQUFuK0IsRUFBQSxFQUNBaS9CLEVBRUEsU0FBQUcsSUFDQSxPQUFBbEQsRUFFQSxTQUFBMEQsRUFBQUMsR0FDQSxJQUFBM0QsRUFBQWtELElBQ0FsRCxFQUFBK0IsT0FBQTd1RCxHQUFBLElBQUF5d0QsSUFBQTNELEVBQUE2QixrQkFBQTdCLEVBQUE1N0IsRUFBQSxHQUVBLFNBQUE2K0IsRUFBQVcsRUFBQUMsRUFBQWhDLEdBQ0EsSUFBQWxrQyxHQUFBLEVBQUFDLEdBQUEsRUFBQWttQyxFQUFBakMsR0FBQXFCLElBQUFyQixlQUNBK0IsSUFBQTF3RCxJQUFBMHdELEdBQUEsR0FDQSxJQUFBLElBQUFHLEtBQUFELEVBQUEsQ0FDQSxJQUFBRSxFQUFBcjZCLFNBQUFvNkIsR0FDQUQsRUFBQUUsS0FBQUgsSUFBQSxJQUFBQyxFQUFBRSxHQUFBQyxrQkFBQUQsR0FBQUosSUFBQWptQyxFQUFBcW1DLEdBQ0FBLEdBQUFKLElBQUFobUMsRUFBQW9tQyxJQUVBLE9BQUEsSUFBQXJtQyxHQUFBaW1DLEVBQUFqbUMsRUFBQSxHQUFBQyxFQUFBZ21DLEVBQUFqbUMsRUFBQUMsRUFFQSxTQUFBc21DLEVBQUFsaUQsRUFBQTlQLEVBQUFpeUQsRUFBQU4sR0FDQSxJQUFBbnlELEVBQUEweUQsRUFBQXBpRCxFQUFBcWlELEVBQUEzc0IsRUFBQXJsQyxRQUFBLEtBQUE2d0QsSUFBQXJCLGdCQUFBeUMsR0FBQSxFQUNBLElBQUFwQixJQUFBOStCLEVBQUFwaUIsRUFBQXRRLEVBQUFRLEVBQUEsRUFBQVIsR0FBQTB5RCxFQUFBMXlELElBQUF3eEQsSUFBQXJCLGVBQUFud0QsS0FBQXdCLEtBQUEsSUFBQWl4RCxLQUFBakIsSUFBQXJCLGVBQUFud0QsR0FBQW9KLE1BQUF5cEQsYUFBQSxTQUFBemdDLEdBQ0EsSUFBQTBnQyxFQUFBdEIsSUFBQXJCLGVBQUEvOUIsR0FDQSxHQUFBMGdDLElBQUF0eEQsR0FBQSxPQUFBc3hELEVBQUExcEQsTUFBQTdLLEdBQUEsQ0FDQSxJQUFBdzBELEVBQUF2QixJQUFBckIsZUFBQS85QixFQUFBLEdBQUE0Z0MsRUFBQXhCLElBQUFyQixlQUFBLzlCLEVBQUEsR0FDQSxPQUFBMmdDLElBQUF2eEQsR0FBQXd4RCxJQUFBeHhELEVBRUEsT0FBQSxFQU5BLENBT0F4QixLQUFBLElBQUFxMEIsRUFBQTQrQixpQkFBQXpCLElBQUF4eEQsRUFBQXV4RCxJQUFBWSxFQUFBOTlCLFlBQUFtOUIsSUFBQXJCLGVBQUFud0QsSUFDQSxJQUFBZ3lELEdBQUEsR0FBQWh5RCxFQUFBMHlELEVBQUEsRUFBQTF5RCxHQUFBdXhELEtBQUEsQ0FDQSxLQUFBQyxJQUFBckIsZUFBQXVDLEtBQUFseEQsR0FBQWt4RCxJQUNBLEdBQUExeUQsRUFBQTB5RCxJQUFBMXlELEVBQUEweUQsRUFBQSxHQUFBbEIsSUFBQXJCLGVBQUFud0QsS0FBQXdCLEdBQUEweEQsRUFBQWx6RCxHQUFBQSxRQUFBLENBQ0EsSUFBQTJrQixFQUFBaXRDLEVBQUE1eEQsSUFDQSxJQUFBNHlELEdBQUFELEVBQUFELElBQUFDLEVBQUFELEdBQUF0cEQsTUFBQTJvRCxNQUFBcHRDLEVBQUF2YixNQUFBMm9ELEtBQUFQLElBQUFyQixlQUFBdUMsR0FBQTFzQixFQUFBcmxDLFFBQUEsS0FBQWd5RCxFQUFBRCxJQUNBbEIsSUFBQXJCLGVBQUF1QyxHQUFBemxELE1BQUEwWCxFQUFBMVgsYUFBQXVrRCxJQUFBckIsZUFBQW53RCxHQUNBQSxLQUFBbXpELEVBQUFULEVBQUEvdEMsRUFBQXZiLE1BQUEyb0QsTUFBQSxJQUFBcUIsRUFBQVYsRUFBQS90QyxFQUFBMVgsT0FBQTBrRCxFQUFBM3hELElBQUEsWUFBQXd4RCxJQUFBckIsZUFBQW53RCxHQUNBQSxJQUFBNHlELEdBQUEsR0FBQU0sRUFBQWx6RCxLQUFBQSxJQUFBMHlELEtBQUFBLEtBR0FWLEdBQUEsR0FFQSxTQUFBcUIsRUFBQS9DLEVBQUFnRCxHQUNBLElBQUEsSUFBQWxDLEVBQUFtQyxFQUFBakQsRUFBQWdCLEVBQUFDLElBQUFpQyxFQUFBaEMsSUFBQXJCLGVBQUFtQixJQUFBbUMsRUFBQSxHQUFBLEdBQUFDLEVBQUFGLEVBQUFHLGNBQUFueUQsRUFBQWd5RCxFQUFBL0IsUUFBQStCLEVBQUFHLGFBQUF4MkQsV0FBQThHLE1BQUEsUUFBQXlzRCxFQUFBLEVBQUFBLEVBQUE2QyxFQUFBcDBELFlBQUFpeUQsRUFBQW1DLEVBQUE3QyxJQUFBdG5ELFFBQUFpckIsRUFBQW03QixTQUFBLElBQUE0QixFQUFBaG9ELE1BQUF3cUQsc0JBQUEsSUFBQXhDLEVBQUFob0QsTUFBQXlwRCxjQUFBLElBQUF6QixFQUFBaG9ELE1BQUF5cUQsa0JBQUEsSUFBQXpDLEVBQUFob0QsTUFBQXdxRCxzQkFBQUosRUFBQUcsY0FBQW55RCxHQUFBZ3lELEVBQUFHLGNBQUF2QyxFQUFBdUMsYUFBQXZDLEVBQUFLLFFBQUErQixFQUFBRyxlQUFBbnlELEdBQUFzeUQsRUFBQTFDLEVBQUFLLFFBQUErQixFQUFBRyxhQUFBeDJELFdBQUE4RyxNQUFBLEtBQUF5dkQsT0FBQSxJQUFBSixJQUFBLE9BQUFsQyxFQUFBaG9ELE1BQUE3SyxJQUFBLGNBQUF3TCxLQUFBcW5ELEVBQUFob0QsTUFBQTJvRCxPQUFBckIsS0FDQSxPQUFBVSxFQUVBLFNBQUFRLEVBQUF4L0IsRUFBQSsrQixFQUFBNEMsR0FDQSxPQUFBdkMsSUFBQXJCLGVBQUEvOUIsSUFBQWloQyxFQUFBSSxFQUFBcmhDLEVBQUErK0IsRUFBQUEsRUFBQXIwRCxRQUFBcTBELEVBQUE0QyxJQUVBLFNBQUFDLEVBQUE1aEMsR0FDQSxPQUFBby9CLElBQUFyQixlQUFBLzlCLEdBQUFvL0IsSUFBQXJCLGVBQUEvOUIsR0FBQXFoQyxFQUFBcmhDLEdBQUEsR0FFQSxTQUFBK2dDLEVBQUEvZ0MsRUFBQTIvQixHQUNBLElBQUEsSUFBQWtDLEdBQUEsRUFBQTNELEVBQUFtRCxFQUFBcmhDLEdBQUE4aEMsRUFBQSxFQUFBQSxFQUFBNUQsRUFBQW54RCxPQUFBKzBELElBQUEsR0FBQTVELEVBQUE0RCxHQUFBOXFELE9BQUFrbkQsRUFBQTRELEdBQUE5cUQsTUFBQTJvRCxNQUFBQSxFQUFBLENBQ0FrQyxHQUFBLEVBQ0EsTUFFQSxPQUFBQSxFQUVBLFNBQUFSLEVBQUFyaEMsRUFBQSsrQixFQUFBNEMsR0FDQSxTQUFBSSxFQUFBbEUsRUFBQW1FLEVBQUFDLEVBQUFDLEdBQ0EsU0FBQUMsRUFBQW5yRCxFQUFBaXJELEVBQUFDLEdBQ0EsU0FBQUUsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBLElBQUEzdUIsRUFBQS9pQyxRQUFBd3hELEVBQUFDLEVBQUFyeEQsU0FDQSxPQUFBc3hELEdBQUEzdUIsRUFBQXBtQyxLQUFBODBELEVBQUFyeEQsUUFBQSxTQUFBcXRELEVBQUF0bkQsR0FDQSxJQUFBLElBQUFBLEVBQUF3ckQsZUFBQUQsRUFBQUgsRUFBQUMsRUFBQUMsRUFBQXJ4RCxRQUFBcXRELEVBQUEsS0FBQSxPQUFBLElBQ0FpRSxFQUVBLFNBQUFFLEVBQUF6aUMsRUFBQTBpQyxFQUFBQyxHQUNBLElBQUFDLEVBQUFDLEVBQ0EsR0FBQXpELElBQUFyQixlQUFBLzlCLEVBQUEsSUFBQTJpQyxHQUFBdkQsSUFBQWxCLE1BQUFsK0IsR0FBQSxJQUFBLElBQUE4aUMsRUFBQTFELElBQUFyQixlQUFBLzlCLEVBQUEsR0FBQXEvQixRQUFBMEQsRUFBQTNELElBQUFsQixNQUFBbCtCLEdBQUEsR0FBQXEvQixRQUFBenhELEVBQUEsRUFBQUEsRUFBQSswRCxFQUFBLzBELElBQUEsR0FBQWsxRCxFQUFBbDFELEtBQUFtMUQsRUFBQW4xRCxHQUFBLE9BQUFrMUQsRUFBQXA0RCxNQUFBaTRELEVBQUEsR0FDQSxPQUFBdkQsSUFBQWxCLE1BQUFsK0IsSUFBQW8vQixJQUFBckIsZUFBQS85QixLQUFBNFQsRUFBQXBtQyxLQUFBNHhELElBQUFsQixNQUFBbCtCLEtBQUFvL0IsSUFBQXJCLGVBQUEvOUIsSUFBQSxTQUFBcytCLEVBQUEwRSxHQUNBLElBQUF6QixFQUFBb0IsSUFBQXZ6RCxFQUFBdXpELEVBQUFLLEVBQUF6QixZQUFBMEIsRUFBQUQsRUFBQTNELFFBQUFrQyxLQUFBbnlELEVBQUE0ekQsRUFBQTNELFFBQUFrQyxHQUFBeDJELFdBQUFGLFFBQUE2M0QsSUFBQSxHQUNBRyxJQUFBenpELEdBQUE2ekQsRUFBQUosS0FBQSxJQUFBSSxJQUFBTCxFQUFBSSxFQUNBSCxFQUFBSSxLQUNBTCxFQUFBQSxFQUFBdkQsUUFBQTMwRCxPQUFBaTRELElBQUF2ekQsRUFBQXV6RCxFQUFBQyxFQUFBckIsYUFBQSxHQUFBb0IsSUFBQXZ6RCxFQUFBcXpELEVBQUF6aUMsRUFBQTBpQyxHQUFBdHpELEVBRUEsR0FBQTR2RCxFQUFBLElBQUEsS0FBQSxzSkFBQUksSUFBQXZDLEtBQ0EsR0FBQW1DLElBQUFoL0IsR0FBQWhwQixFQUFBL0YsVUFBQTdCLEVBQUEsT0FBQTZCLEVBQUFyRyxNQUNBb00sTUFBQUEsRUFDQXFvRCxRQUFBNEMsRUFBQTk3QyxVQUNBKzhDLEdBQUFDLEtBQ0EsRUFDQSxHQUFBbnNELEVBQUEvRixVQUFBN0IsR0FDQSxHQUFBNEgsRUFBQW9zRCxTQUFBbEIsSUFBQWxyRCxHQUNBLEdBQUFBLEVBQUFtckQsRUFBQXRFLEVBQUE1c0QsUUFBQTJpQyxFQUFBL2lDLFFBQUFtRyxFQUFBNm1ELEVBQUE1c0QsU0FBQSxHQUFBZ3hELEdBQUEsT0FBQSxPQUNBLEdBQUFqckQsRUFBQXFzRCxXQUFBLENBQ0EsSUFBQUMsRUFBQXRzRCxFQUNBLEdBQUFBLEVBQUErcUQsRUFBQS9xRCxFQUFBZ3JELEVBQUFDLEVBQUFDLEdBQUEsQ0FDQSxJQUFBRSxFQUFBQyxFQUFBcHhELEVBQUFBLEVBQUFsRSxPQUFBLEdBQUFpSyxNQUFBc3NELEdBQUEsT0FBQSxFQUNBQyxHQUFBLEVBQUF2RSxFQUFBaC9CLFFBRUEsR0FBQWhwQixFQUFBd3NELGFBQUEsQ0FDQSxJQUFBQyxFQUFBQyxFQUFBMXNELEVBQUEyc0QsS0FBQUMsRUFBQTN5RCxFQUFBdkcsUUFBQW01RCxFQUFBNUIsRUFBQWwxRCxPQUFBKzJELEVBQUE5QixFQUFBajFELE9BQUEsRUFBQWkxRCxFQUFBdnBELFNBQUEsRUFDQSxJQUFBLElBQUFxckQsR0FBQSxpQkFBQUEsRUFBQSxDQUNBLElBQUFDLEVBQUE5YSxFQUFBK1YsRUFBQWdGLEVBQUFoQyxFQUFBdDNELFFBQUF1NUQsS0FDQSxHQUFBLGlCQUFBSCxFQUFBRyxFQUFBSCxFQUFBanlELE1BQUEsVUFBQSxJQUFBa3lELEVBQUEsRUFBQUEsRUFBQUwsRUFBQXp5RCxRQUFBbEUsT0FBQWczRCxJQUFBRSxFQUFBcjVELEtBQUFtNUQsR0FDQSxJQUFBLElBQUF6RixFQUFBLEVBQUFBLEVBQUEyRixFQUFBbDNELE9BQUF1eEQsSUFBQSxDQUNBLEdBQUF5RixFQUFBbCtCLFNBQUFvK0IsRUFBQTNGLElBQUFydEQsS0FBQSt3RCxFQUFBUyxFQUFBekQsRUFBQStFLEVBQUFGLElBQUFHLEVBQUF0NUQsU0FDQSxLQUFBc00sRUFBQW1yRCxFQUFBdUIsRUFBQXp5RCxRQUFBOHlELElBQUFsRyxFQUFBNXNELFFBQUE4eUQsSUFBQUEsR0FBQXA1RCxPQUFBczNELEdBQUFDLElBQUFsckQsSUFBQUEsSUFBQTVILEdBQUE2MEQsRUFBQUEsRUFBQWwzRCxPQUFBLEdBQUEyMkQsRUFBQXp5RCxRQUFBbEUsT0FBQSxDQUNBLElBQUFtM0QsRUFBQXR3QixFQUFBL2lDLFFBQUFtRyxFQUFBNm1ELEVBQUE1c0QsU0FBQSxFQUNBNHNELEVBQUE1c0QsUUFBQWxFLE9BQUFtM0QsSUFBQWx0RCxFQUFBbXJELEVBQUF0RSxFQUFBNXNELFFBQUFpekQsSUFBQUEsR0FBQXY1RCxPQUFBczNELEVBQUF2M0QsTUFBQSxFQUFBdTNELEVBQUFsMUQsU0FBQW0xRCxNQUFBK0IsRUFBQXI1RCxLQUFBczVELEVBQUFuNUQsWUFDQTZvQyxFQUFBcG1DLEtBQUF5RCxFQUFBLFNBQUFxdEQsRUFBQTBFLEdBQ0FBLEVBQUF6QixZQUFBVSxFQUFBbDFELE9BQUEsS0FHQTAyRCxFQUFBeHlELEVBQUF2RyxRQUFBczBELEVBQUEvVixFQUFBaDRDLEtBQ0EsSUFBQSxJQUFBa3pELEVBQUEsRUFBQUEsRUFBQVYsRUFBQTEyRCxPQUFBbzNELElBQUEsQ0FDQSxJQUFBQyxFQUFBWCxFQUFBVSxHQUFBRSxHQUFBLEVBQ0FELEVBQUE3QyxZQUFBNkMsRUFBQTdDLGFBQUFzQyxFQUNBLElBQUEsSUFBQVMsRUFBQSxFQUFBQSxFQUFBWCxFQUFBNTJELE9BQUF1M0QsSUFBQSxDQUNBLElBQUFDLEVBQUFaLEVBQUFXLEdBQ0EsR0FBQSxpQkFBQVIsSUFBQSxJQUFBbHdCLEVBQUEvaUMsUUFBQXV6RCxFQUFBL0UsUUFBQStFLEVBQUE3QyxhQUFBeDJELFdBQUFrNUQsR0FBQSxDQUNBLEdBQUFuMUQsRUFFQXkxRCxHQUZBOTJDLEVBRUEyMkMsR0FEQXB0RCxNQUFBc29ELFlBQUF4d0QsRUFBQWtJLE1BQUFzb0QsV0FBQTd4QyxFQUFBelcsTUFBQTJvRCxNQUFBN3dELEVBQUFrSSxNQUFBc29ELFdBQUE3eEMsRUFBQXpXLE1BQUFzb0QsWUFBQXh3RCxFQUFBa0ksTUFBQTJvRCxJQUNBLENBQ0EwRSxHQUFBLEVBQUFELEVBQUE3QyxjQUFBZ0QsRUFBQWhELGNBQUEsSUFBQWdELEVBQUFsRixRQUFBa0YsRUFBQWhELGFBQUF4MkQsV0FBQUYsUUFBQXU1RCxFQUFBL0UsUUFBQStFLEVBQUE3QyxnQkFBQWdELEVBQUFsRixRQUFBa0YsRUFBQWhELGFBQUFnRCxFQUFBbEYsUUFBQWtGLEVBQUFoRCxhQUFBLElBQUE2QyxFQUFBL0UsUUFBQStFLEVBQUE3QyxhQUNBZ0QsRUFBQWhELFlBQUE2QyxFQUFBN0MsYUFBQTZDLEVBQUFwdEQsTUFBQXNvRCxZQUFBaUYsRUFBQXZ0RCxNQUFBMm9ELE1BQUF5RSxFQUFBL0UsUUFBQStFLEVBQUE3QyxhQUFBZ0QsRUFBQWxGLFFBQUFrRixFQUFBaEQsYUFDQW9DLEVBQUFyMUQsT0FBQXExRCxFQUFBOTRELFFBQUEwNUQsR0FBQSxFQUFBSCxJQUNBLE1BRUEsR0FBQUEsRUFBQXB0RCxNQUFBMm9ELE1BQUE0RSxFQUFBdnRELE1BQUEyb0QsSUFBQSxDQUNBMEUsR0FBQSxFQUNBLE1BRUEsR0FBQXYxRCxFQUVBeTFELEVBREEsUUFEQTkyQyxFQUVBMjJDLEdBREFwdEQsTUFBQTdLLElBQUEsT0FBQTJDLEVBQUFrSSxNQUFBN0ssSUFBQTJDLEVBQUFrSSxNQUFBN0ssR0FBQXdMLEtBQUE4VixFQUFBelcsTUFBQTJvRCxJQUFBUCxJQUFBcC9CLEdBQUEsRUFBQWlDLEdBQUEsS0FDQXhVLEVBRUEyMkMsRUFGQXQxRCxFQUVBeTFELEVBREEsT0FBQTkyQyxFQUFBelcsTUFBQTdLLElBQUEsT0FBQTJDLEVBQUFrSSxNQUFBN0ssSUFBQTJDLEVBQUFrSSxNQUFBN0ssR0FBQXdMLEtBQUE4VixFQUFBelcsTUFBQTJvRCxJQUFBbndELFFBQUEsVUFBQSxJQUFBNHZELElBQUFwL0IsR0FBQSxFQUFBaUMsR0FBQSxJQUNBLENBQ0FtaUMsRUFBQTdDLGNBQUFnRCxFQUFBaEQsY0FBQSxJQUFBNkMsRUFBQS9FLFFBQUErRSxFQUFBN0MsYUFBQXgyRCxXQUFBRixRQUFBMDVELEVBQUFsRixRQUFBa0YsRUFBQWhELGFBQUF4MkQsV0FBQThHLE1BQUEsSUFBQSxNQUFBdXlELEVBQUFJLEdBQUFKLEVBQUFJLElBQUFKLEVBQUEvRSxRQUFBK0UsRUFBQTdDLGFBQUF4MkQsWUFDQSxJQUFBcTVELEVBQUFJLEdBQUEzNUQsUUFBQXU1RCxFQUFBL0UsUUFBQStFLEVBQUE3QyxhQUFBeDJELFdBQUE4RyxNQUFBLElBQUEsTUFBQXV5RCxFQUFBSSxHQUFBSixFQUFBSSxHQUFBLElBQUFKLEVBQUEvRSxRQUFBa0YsRUFBQWhELGFBQUF4MkQsV0FBQThHLE1BQUEsSUFBQSxJQUNBd3lELEdBQUEsRUFBQUQsRUFBQS9FLFFBQUErRSxFQUFBN0MsYUFBQWdELEVBQUFsRixRQUFBa0YsRUFBQWhELGFBQUF4MkQsV0FBQThHLE1BQUEsSUFBQSxHQUFBLElBQUF1eUQsRUFBQS9FLFFBQUErRSxFQUFBN0MsYUFDQW9DLEVBQUFyMUQsT0FBQXExRCxFQUFBOTRELFFBQUEwNUQsR0FBQSxFQUFBSCxJQUNBLFFBSUFDLEdBQUFWLEVBQUEvNEQsS0FBQXc1RCxJQUdBLGlCQUFBTixJQUFBSCxFQUFBL3ZCLEVBQUFsbUMsSUFBQWkyRCxFQUFBLFNBQUFYLEVBQUExRSxHQUNBLEdBQUF6L0IsU0FBQXkvQixHQUFBLENBQ0EsSUFBQWlELEVBQUF5QixFQUFBekIsWUFBQWtELEVBQUF6QixFQUFBM0QsUUFBQWtDLEdBQUF4MkQsV0FBQThHLE1BQUEsS0FDQW14RCxFQUFBM0QsUUFBQWtDLEdBQUFueUQsRUFBQTR6RCxFQUFBekIsWUFBQW55RCxFQUNBLElBQUEsSUFBQXMxRCxFQUFBLEVBQUFBLEVBQUFELEVBQUExM0QsT0FBQTIzRCxLQUFBLElBQUE5d0IsRUFBQS9pQyxRQUFBNHpELEVBQUFDLEdBQUFULEtBQUFqQixFQUFBM0QsUUFBQWtDLEtBQUFueUQsR0FBQTR6RCxFQUFBM0QsUUFBQWtDLElBQUEsSUFDQXlCLEVBQUEzRCxRQUFBa0MsSUFBQWtELEVBQUFDLElBQUExQixFQUFBM0QsUUFBQWtDLEdBQUExN0IsU0FBQTQrQixFQUFBQyxJQUNBMUIsRUFBQXpCLFlBQUFBLEdBQ0EsR0FBQXlCLEVBQUEzRCxRQUFBa0MsS0FBQW55RCxFQUFBLE9BQUE0ekQsTUFFQS94RCxFQUFBMnlELEVBQUFqNUQsT0FBQWc1RCxHQUFBM0UsRUFBQWgvQixFQUFBdWpDLEVBQUF0eUQsRUFBQWxFLE9BQUEsRUFDQWlLLEVBQUEyc0QsRUFBQTUyRCxPQUFBLEVBQUFpMUQsRUFBQWdDLEVBQUF0NUQsYUFDQXNNLEVBQUFtckQsRUFBQXVCLEVBQUF6eUQsUUFBQTZ5RCxJQUFBakcsRUFBQTVzRCxRQUFBNnlELElBQUFBLEdBQUFuNUQsT0FBQXMzRCxHQUFBQyxHQUNBLEdBQUFsckQsRUFBQSxPQUFBLE9BQ0EsR0FBQUEsRUFBQXdyRCxjQUFBTixJQUFBckUsRUFBQTVzRCxRQUFBMmlDLEVBQUEvaUMsUUFBQW1HLEVBQUE2bUQsRUFBQTVzRCxTQUFBLEdBQUEsSUFBQSxJQUFBMHpELEVBQUEzdEQsRUFBQTR0RCxFQUFBNUMsRUFBQWoxRCxPQUFBLEVBQUFpMUQsRUFBQXZwRCxRQUFBLEVBQUFtc0QsR0FBQTMwRCxNQUFBMDBELEVBQUFFLFdBQUF4bkMsS0FBQXVuQyxFQUFBLEVBQUFELEVBQUFFLFdBQUF4bkMsTUFBQTJoQyxHQUFBaC9CLEVBQUE0a0MsSUFBQSxDQUNBLElBQUF0QyxFQUFBekUsRUFBQTVzRCxRQUFBMmlDLEVBQUEvaUMsUUFBQTh6RCxFQUFBOUcsRUFBQTVzRCxTQUFBLEdBQ0EsR0FBQStGLEVBQUFtckQsRUFBQUcsR0FBQXNDLEdBQUFqNkQsT0FBQXMzRCxHQUFBSyxHQUFBLENBQ0EsSUFBQUQsRUFBQXB4RCxFQUFBQSxFQUFBbEUsT0FBQSxHQUFBaUssT0FBQXdxRCxtQkFBQW9ELEVBQUFELEVBQUFFLFdBQUF2WixJQUFBLEVBQ0E4VyxFQUFBQyxFQUFBQyxHQUFBLENBQ0EsR0FBQXNDLEVBQUFELEVBQUFFLFdBQUF2WixJQUFBLEVBQUEsQ0FDQWlZLEdBQUEsRUFBQXZFLEVBQUFoL0IsRUFDQSxNQUVBLE9BQUEsRUFFQSxPQUFBLFFBRUEsR0FBQWhwQixFQUFBK3FELEVBQUEvcUQsRUFBQWdyRCxFQUFBQyxFQUFBQyxHQUFBLE9BQUEsT0FDQWxELElBekNBLElBQUF2eEMsRUFBQTNlLEVBRkEyZSxFQUFBM2UsRUFaQTJlLEVBQUEzZSxFQXlEQSxJQUFBLElBQUFnekQsRUFBQUUsRUFBQWoxRCxPQUFBLEVBQUFpMUQsRUFBQXZwRCxRQUFBLEVBQUFxcEQsRUFBQWpFLEVBQUE1c0QsUUFBQWxFLE9BQUErMEQsSUFBQSxJQUFBLElBQUFqRSxFQUFBNXNELFFBQUE2d0QsR0FBQVUsYUFBQSxDQUNBLElBQUF4ckQsRUFBQW1yRCxFQUFBdEUsRUFBQTVzRCxRQUFBNndELElBQUFBLEdBQUFuM0QsT0FBQXMzRCxHQUFBQyxHQUNBLEdBQUFsckQsR0FBQWdvRCxJQUFBaC9CLEVBQUEsT0FBQWhwQixFQUNBLEdBQUFnb0QsRUFBQWgvQixFQUFBLE9BR0EsU0FBQThrQyxFQUFBNUcsR0FDQSxHQUFBajhCLEVBQUFtOEIsWUFBQXArQixFQUFBLEdBQUFrK0IsRUFBQW54RCxPQUFBLEdBQUEsS0FBQW14RCxFQUFBQSxFQUFBbnhELE9BQUEsR0FBQWlLLE1BQUEyb0QsSUFBQSxFQUFBLEtBQUEsSUFBQXpCLEVBQUEsR0FBQWxuRCxNQUFBeXBELGNBQUEsSUFBQXZDLEVBQUEsR0FBQWxuRCxNQUFBd3FELG9CQUFBLE9BQUF0RCxFQUFBLEdBQUFsbkQsTUFBQTdLLEtBQUEsY0FBQXdMLEtBQUF1bUQsRUFBQSxHQUFBbG5ELE1BQUEyb0QsS0FBQSxDQUNBLEdBQUFQLElBQUFyQixlQUFBLzlCLEVBQUEsS0FBQTV3QixFQUFBLE9BQUE2eEQsRUFBQS9DLElBQ0EsR0FBQWtCLElBQUFyQixlQUFBLzlCLEVBQUEsR0FBQXVoQyxjQUFBckQsRUFBQSxHQUFBcUQsWUFBQSxPQUFBTixFQUFBL0MsSUFDQSxHQUFBa0IsSUFBQXJCLGVBQUEvOUIsRUFBQSxHQUFBLE9BQUFpaEMsRUFBQS9DLElBRUEsT0FBQUEsRUFFQSxJQUFBbUUsRUFBQTBDLEVBQUEzRixJQUFBdkIsVUFBQW1CLEVBQUFELEVBQUE0QyxFQUFBLEVBQUFLLEVBQUFqRCxFQUFBQSxFQUFBcjBELFNBQUEsR0FBQXVHLEtBQUFzeUQsR0FBQSxFQUFBSixFQUFBcEUsRUFBQUEsRUFBQS9tRCxLQUFBLElBQUEsR0FDQSxHQUFBZ29CLEdBQUEsRUFBQSxDQUNBLEdBQUErK0IsSUFBQTN2RCxFQUFBLENBQ0EsSUFBQSxJQUFBdUksRUFBQXF0RCxFQUFBaGxDLEVBQUEsR0FBQXJvQixFQUFBeW5ELElBQUFyQixlQUFBaUgsSUFBQTVGLElBQUFsQixNQUFBOEcsTUFBQTUxRCxHQUFBNDFELEdBQUEsR0FBQUEsSUFDQXJ0RCxJQUFBdkksR0FBQTQxRCxHQUFBLElBQUFoRCxFQUFBLFNBQUE5RCxHQUNBLElBQUFtQixLQUNBLE9BQUF6ckIsRUFBQXprQyxRQUFBK3VELEtBQUFBLEdBQUFBLElBQUFBLEVBQUFueEQsT0FBQSxJQUFBbXhELEVBQUEsR0FBQXFELGNBQUFueUQsRUFBQSxLQUFBaXdELEVBQUE0QixFQUFBL0MsRUFBQXh6RCxTQUFBMjBELFFBQUEzMEQsU0FBQXFDLFNBQUFzeUQsRUFBQW5CLEVBQUEsR0FBQW1CLFFBQUEzMEQsU0FBQWtwQyxFQUFBcG1DLEtBQUEwd0QsRUFBQSxTQUFBSSxFQUFBMkcsR0FDQSxHQUFBLEtBQUFBLEVBQUF0RixJQUFBLEdBQUEsSUFBQU4sRUFBQXR5RCxPQUFBc3lELEVBQUE0RixFQUFBNUYsUUFBQTMwRCxhQUFBLElBQUEsSUFBQWtELEVBQUEsRUFBQUEsRUFBQXl4RCxFQUFBdHlELE9BQUFhLElBQUFxM0QsRUFBQTVGLFFBQUF6eEQsS0FBQSxJQUFBeXhELEVBQUF6eEQsR0FBQTdDLFdBQUFGLFFBQUFvNkQsRUFBQTVGLFFBQUF6eEQsTUFBQXl4RCxFQUFBenhELElBQUEsSUFBQXEzRCxFQUFBNUYsUUFBQXp4RCxPQUNBeXhELEVBSkEsQ0FLQTFuRCxHQUFBd3JELEVBQUFuQixFQUFBaHFELEtBQUEsSUFBQWduRCxFQUFBZ0csR0FFQSxHQUFBNUYsSUFBQWxCLE1BQUFsK0IsSUFBQW8vQixJQUFBbEIsTUFBQWwrQixHQUFBLEdBQUFrakMsS0FBQUMsRUFBQSxPQUFBMkIsRUFBQTFGLElBQUFsQixNQUFBbCtCLElBQ0EsSUFBQSxJQUFBa2xDLEVBQUFsRCxFQUFBdnBELFFBQUF5c0QsRUFBQUgsRUFBQWg0RCxVQUFBZzFELEVBQUFnRCxFQUFBRyxHQUFBbEQsR0FBQWtELEtBQUFsRyxJQUFBaC9CLEdBQUFnL0IsRUFBQWgvQixHQUFBa2xDLE1BRUEsT0FBQSxJQUFBajBELEVBQUFsRSxRQUFBdzJELElBQUF0eUQsRUFBQXJHLE1BQ0FvTSxPQUNBN0ssR0FBQSxLQUNBZzVELFlBQUEsRUFDQTFFLGFBQUEsRUFDQTJFLE9BQUEsS0FDQXpGLElBQUEsR0FDQXJDLFlBQUEsSUFFQStCLFdBQ0E2RCxHQUFBQyxJQUNBcEUsSUFBQTN2RCxHQUFBZ3dELElBQUFsQixNQUFBbCtCLEdBQUE4a0MsRUFBQWx4QixFQUFBcmxDLFFBQUEsS0FBQTBDLEtBQUFtdUQsSUFBQWxCLE1BQUFsK0IsR0FBQTRULEVBQUFybEMsUUFBQSxLQUFBMEMsR0FDQTZ6RCxFQUFBMUYsSUFBQWxCLE1BQUFsK0IsS0FFQSxTQUFBcWxDLElBQ0EsT0FBQWpHLElBQUFwQixVQUFBNXVELElBQUFnd0QsSUFBQXBCLFFBQUFXLEdBQUEsRUFBQSxHQUNBUyxJQUFBbkIsU0FBQTd1RCxJQUFBZ3dELElBQUFuQixPQUFBbUIsSUFBQXBCLFFBQUF0ekQsVUFDQTAwRCxJQUFBcEIsUUFFQSxTQUFBc0gsRUFBQUMsR0FDQSxPQUFBbkcsSUFBQW5CLFNBQUE3dUQsSUFBQSxJQUFBbTJELElBQUFuRyxJQUFBbkIsT0FBQVUsR0FBQSxFQUFBUSxLQUFBLElBQ0FDLElBQUFuQixPQUVBLFNBQUF1SCxFQUFBdG5ELEVBQUE5UCxFQUFBNnZELEdBQ0EsSUFBQXJ3RCxFQUFBMHlCLEVBQ0EsSUFBQSxJQUFBcGlCLEVBQUEwaEQsSUFBQTFoRCxFQUFBLEVBQUE5UCxFQUFBNnZELEVBQUFseEQsWUFBQSxJQUFBYSxFQUFBc1EsRUFBQXRRLEVBQUFRLEVBQUFSLFdBQUF3eEQsSUFBQXJCLGVBQUFud0QsR0FDQSxJQUFBMHlCLEVBQUFwaUIsRUFBQXRRLEVBQUFzUSxFQUFBdFEsRUFBQVEsRUFBQVIsSUFBQSxHQUFBZ3lELEdBQUEsR0FBQTNCLEVBQUFyd0QsS0FBQXEwQixFQUFBd2pDLDBCQUFBLENBQ0EsSUFBQUMsRUFBQTFFLEVBQUExZ0MsRUFBQTI5QixFQUFBcndELElBQUEsR0FBQSxJQUNBLElBQUE4M0QsSUFBQTlGLEdBQUEsR0FBQXQvQixFQUFBb2xDLEVBQUFDLFFBQUF2MkQsRUFBQXMyRCxFQUFBQyxNQUFBRCxFQUFBMWxDLElBQUEsSUEwQkEsU0FBQTBoQyxFQUFBa0UsRUFBQUMsRUFBQXJCLEdBQ0EsSUFBQSxJQUFBc0IsRUFBQUMsRUFBQTlqQyxFQUFBbTdCLE9BQUF5SSxFQUFBQSxFQUFBbjdELE1BQUEsRUFBQSxHQUFBczdELEdBQUEsRUFBQUMsRUFBQXpCLElBQUFwMUQsRUFBQW8xRCxFQUFBM3lELE1BQUEsUUFBQWpFLEVBQUEsRUFBQUEsRUFBQXE0RCxFQUFBbDVELE9BQUFhLEtBQUEsS0FBQWs0RCxFQUFBRixFQUFBLzZELFFBQUFvN0QsRUFBQXI0RCxNQUFBZzRELEVBQUF0M0QsT0FBQXczRCxFQUFBLEdBQ0EsSUFBQSxJQUFBcEIsRUFBQSxFQUFBQSxFQUFBa0IsRUFBQTc0RCxPQUFBMjNELElBQUEsSUFBQSxJQUFBOXdCLEVBQUEvaUMsUUFBQSswRCxFQUFBbEIsR0FBQXFCLEdBQUEsQ0FDQUMsR0FBQSxFQUNBLE1BRUEsT0FBQUEsRUFFQSxTQUFBaEYsRUFBQWhoQyxFQUFBdTdCLEVBQUF3RSxFQUFBbUcsRUFBQUMsRUFBQUMsR0FDQSxTQUFBQyxFQUFBQyxHQUNBLElBQUEzMUMsRUFBQTRyQyxFQUFBK0osRUFBQUMsTUFBQUQsRUFBQWw0RCxJQUFBLEdBQUFrNEQsRUFBQUMsTUFBQUQsRUFBQWw0RCxLQUFBLEVBQUFrNEQsRUFBQWw0RCxJQUFBazRELEVBQUFDLE1BQUEsR0FBQUQsRUFBQWw0RCxJQUFBazRELEVBQUFDLE9BQUEsRUFDQSxPQUFBNTFDLEdBQUEsSUFBQTIxQyxFQUFBQyxPQUFBRCxFQUFBbDRELE1BQUFneEQsSUFBQWpCLFdBQUEsT0FBQXh0QyxFQUVBLFNBQUE2MUMsRUFBQWhxQyxFQUFBKytCLEVBQUF3RSxHQUNBLElBQUEwRyxHQUFBLEVBQ0EsT0FBQTd5QixFQUFBcG1DLEtBQUE2ekQsRUFBQTdrQyxHQUFBLFNBQUE4aEMsRUFBQTJHLEdBQ0EsSUFBQSxJQUFBdHRELEVBQUFzdEQsRUFBQWp1RCxNQUFBMHZELEVBQUFuTCxFQUFBLEVBQUEsRUFBQW9MLEVBQUEsR0FBQS80RCxFQUFBK0osRUFBQXd0RCxZQUFBdjNELEVBQUE4NEQsRUFBQTk0RCxJQUFBKzRELElBeUxBbnFDLEVBekxBQSxHQUFBNXVCLEVBQUEsR0EwTEF3eEQsSUFBQXJCLGVBQUF2aEMsS0FBQXB0QixFQUFBbXdELEVBQUEvaUMsR0FBQTRpQyxJQUFBckIsZUFBQXZoQyxHQUFBM2hCLE9BREEsSUFBQTJoQixFQXhMQSxHQUFBKytCLElBQUFvTCxHQUFBcEwsR0FBQStKLEdBQUEsSUFBQSxLQUFBbUIsRUFBQSxNQUFBOXVELEVBQUF4TCxHQUFBd0wsRUFBQXhMLEdBQUF3TCxLQUFBZ3ZELEVBQUF2SCxJQUFBNWlDLEVBQUF1akMsRUFBQTk5QixFQUFBb2tDLEVBQUFybUMsS0FBQXU3QixJQUFBNWpELEVBQUFnb0QsS0FBQXBFLElBQUF0NUIsRUFBQXdqQyw0QkFBQSxLQUFBOXRELEVBQUFnb0QsTUFDQXBFLEVBQUFnRSxFQUFBL2lDLEVBQUE3a0IsR0FBQSxJQUFBQSxFQUFBZ29ELElBQ0EzL0IsSUFBQXhELElBQ0EsQ0FDQSxJQUFBN3VCLEVBQUE4NEQsRUFBQWxMLElBQUFuc0QsRUFBQXEzRCxFQUFBbEwsRUFBQUEsRUFDQTV0RCxFQUFBQSxJQUFBczBCLEVBQUF3akMsMkJBQUEsT0FBQTl0RCxFQUFBeEwsR0FBQW96RCxFQUFBL2lDLEVBQUE3a0IsR0FBQSxJQUFBQSxFQUFBZ29ELElBQUFoeUQsRUFDQSxJQUFBaTVELEVBQUFwcUMsRUFBQXFxQyxFQUFBdkIsSUFDQSxHQUFBbUIsRUFBQXYvQyxTQUFBOVgsSUFBQXdrQyxFQUFBemtDLFFBQUFzM0QsRUFBQXYvQyxVQUFBdS9DLEVBQUF2L0MsUUFBQXUvQyxFQUFBdi9DLFNBQ0Ewc0IsRUFBQXBtQyxLQUFBaTVELEVBQUF2L0MsT0FBQTdZLEtBQUEsU0FBQWtGLEVBQUFDLEdBQ0EsT0FBQUEsRUFBQUQsSUFDQSxTQUFBK3FELEVBQUEwRSxHQUNBNUMsRUFBQTRDLEVBQUFBLEVBQUEsR0FBQSxNQUNBeUQsRUFBQW5zQyxTQUFBbHJCLElBQUF3a0MsRUFBQXprQyxRQUFBczNELEVBQUFuc0MsVUFBQW1zQyxFQUFBbnNDLFFBQUFtc0MsRUFBQW5zQyxTQUNBc1osRUFBQXBtQyxLQUFBaTVELEVBQUFuc0MsT0FBQWpzQixLQUFBLFNBQUFrRixFQUFBQyxHQUNBLE9BQUFELEVBQUFDLElBQ0EsU0FBQThxRCxFQUFBMEUsR0FDQWhDLEVBQUFnQyxFQUFBaGpDLElBQUFnakMsRUFBQXpILEdBQUEsRUFBQTJLLE1BQ0FPLEVBQUFqQixrQkFBQSxDQUNBLElBQUFzQixFQUFBTCxFQUFBakIsa0JBQ0EsR0FBQUEsR0FBQSxJQUFBc0IsRUFBQUEsRUFBQUEsRUFBQTVvRCxNQUFBNG9ELEVBQUExNEQsSUFBQXk0RCxHQUNBSixFQUFBem1DLE1BQUE1d0IsR0FBQXEzRCxFQUFBbEwsSUFBQW5zRCxFQUFBLE9BQUFxM0QsRUFBQXptQyxJQUFBbS9CLEtBQ0EsRUFDQSxJQUFBeUgsRUFBQUgsRUFBQXptQyxNQUFBNXdCLEVBQUFxM0QsRUFBQXptQyxJQUFBeEQsS0FBQUEsRUFBQSxPQUFBaXFDLEVBQUE3eUIsRUFBQXJsQyxPQUFBazRELEVBQUF6RixFQUFBNEYsRUFBQWo1RCxHQUFBLEVBQUF1NEQsS0FDQSxPQUNBLElBQUEsSUFBQU8sR0FBQUEsRUFBQXptQyxNQUFBNXdCLEdBQUFxM0QsRUFBQXptQyxNQUFBeEQsSUFBQW9xQyxFQUFBSCxFQUFBem1DLElBQ0F3bEMsRUFBQWhwQyxFQUFBb3FDLEVBQUF0QixJQUFBNTZELFNBQUFrOEQsSUFBQXBxQyxHQUFBLE9BQUFpcUMsRUFBQTd5QixFQUFBcmxDLE9BQUFrNEQsRUFBQXpGLEVBQUE0RixFQUFBajVELEdBQUEsS0FDQSxFQUNBLFFBQUEsSUFBQTg0RCxHQUFBQSxFQUFBem1DLE1BQUE1d0IsR0FBQXEzRCxFQUFBbEwsSUFBQW5zRCxLQUFBa3ZELEVBQUEsR0FBQXNCLEdBQUEsR0FDQW1ILEVBQUFILEVBQUFoekIsRUFBQXJsQyxVQUFBMDJELEdBQ0FwcUQsTUFyRUEsU0FBQWxOLEVBQUFnSyxFQUFBcW9CLEdBQ0EsT0FBQWlDLEVBQUFtakMsUUFBQXp0RCxFQUFBeXRELFFBQ0EsSUFBQSxRQUNBejNELEVBQUFBLEVBQUFoQixjQUNBLE1BRUEsSUFBQSxRQUNBZ0IsRUFBQUEsRUFBQW1FLGNBQ0EsTUFFQSxJQUFBLFFBQ0EsSUFBQWsxRCxFQUFBNUgsSUFBQXJCLGVBQUEvOUIsRUFBQSxHQUNBcnlCLEVBQUEsSUFBQXF5QixHQUFBZ25DLEdBQUFBLEVBQUFuc0QsUUFBQWpGLE9BQUFDLGFBQUFrbUQsRUFBQXRsQyxRQUFBd3dDLE9BQUF0NUQsRUFBQWhCLGNBQUFnQixFQUFBbUUsY0FDQSxNQUVBLFFBQ0EsR0FBQThoQyxFQUFBNWtDLFdBQUFpekIsRUFBQW1qQyxRQUFBLENBQ0EsSUFBQTV6RCxFQUFBdEMsTUFBQXRDLFVBQUFsQyxNQUFBVSxLQUFBMEMsV0FDQTBELEVBQUE1RyxLQUFBdzBELElBQUFyQixnQkFBQXB3RCxFQUFBczBCLEVBQUFtakMsT0FBQXYzRCxNQUFBekQsS0FBQW9ILElBR0EsT0FBQTdELEVBZ0RBeTNELENBQUF6M0QsRUFBQWdLLEVBQUFpdkQsS0FDQVYsRUFBQUcsRUFBQXJtQyxNQUFBeW1DLEdBQUEsSUFBQSxNQUVBQSxFQUVBLFNBQUFNLEVBQUEvbUMsRUFBQWtuQyxFQUFBaEIsRUFBQUcsR0FDQSxHQUFBQSxHQUFBcGtDLEVBQUFrbEMsWUFBQS9ILElBQUFyQixlQUFBLzlCLEtBQUE1d0IsR0FBQTgyRCxJQUFBOTJELEVBQUEsQ0FDQSxJQUFBeEIsRUFBQTJ5RCxFQUFBM3NCLEVBQUFybEMsUUFBQSxLQUFBNndELElBQUFyQixnQkFBQW1CLEVBQUFDLEVBQUEvdkQsR0FBQSxHQUNBLElBQUF4QixFQUFBb3lCLEVBQUFweUIsR0FBQXN4RCxFQUFBdHhELFdBQUF3eEQsSUFBQXJCLGVBQUFud0QsR0FDQXd4RCxJQUFBckIsZUFBQS85QixHQUFBNFQsRUFBQXJsQyxRQUFBLEtBQUEyNEQsR0FDQSxJQUFBLzRELEVBQUEwekQsR0FBQSxFQUFBdUYsRUFBQWhJLElBQUFyQixlQUFBeUMsR0FBQSxFQUFBNkcsRUFBQWpJLElBQUFqQixXQUNBLElBQUF2d0QsRUFBQU8sRUFBQTZ4QixFQUFBcHlCLEdBQUFzeEQsRUFBQXR4RCxJQUFBLENBQ0EsSUFBQTJrQixFQUFBZ3VDLEVBQUEzeUQsR0FDQSxHQUFBMmtCLElBQUFuakIsRUFBQSxJQUFBLElBQUFzeEQsRUFBQXZ5RCxFQUFBdXlELEVBQUF0QixJQUFBakIsYUFBQSxPQUFBNXJDLEVBQUF2YixNQUFBN0ssSUFBQWk3RCxFQUFBeDVELE1BQUEsSUFBQXc1RCxFQUFBeDVELEdBQUFvSixNQUFBd3FELHFCQUFBLElBQUE0RixFQUFBeDVELEdBQUFvSixNQUFBeXBELGNBQUEsTUFBQWx1QyxFQUFBdmIsTUFBQTdLLEtBQUEsQ0FDQSxHQUFBdTBELEtBQUEsSUFBQUYsR0FBQUQsRUFBQUcsSUFBQUgsRUFBQUcsR0FBQTFwRCxNQUFBMm9ELE1BQUFwdEMsRUFBQXZiLE1BQUEyb0QsSUFBQVAsSUFBQXJCLGVBQUEyQyxHQUFBOXNCLEVBQUFybEMsUUFBQSxLQUFBZ3lELEVBQUFHLElBQ0F0QixJQUFBckIsZUFBQTJDLEdBQUE3bEQsTUFBQTBYLEVBQUExWCxNQUFBeXNELEVBQUE1RyxHQUNBdnlELEVBQUF1eUQsRUFBQW1CLEdBQUEsT0FBQSxHQUFBZCxFQUFBTCxFQUFBbnVDLEVBQUF2YixNQUFBMm9ELEtBQUEsQ0FDQSxJQUFBbGlELEVBQUF1akQsRUFBQU4sRUFBQW51QyxFQUFBMVgsT0FBQSxHQUFBLEdBQ0FnbkQsR0FBQSxJQUFBcGtELEVBQUF0UCxFQUFBc1AsRUFBQWtvRCxPQUFBbG9ELEVBQUE2YyxPQUFBNmtDLElBQUF1QixFQUNBRixHQUFBLE9BQ0EsS0FBQXFCLEdBQUEsSUFBQXR2QyxFQUFBNHRDLGlCQUFBTyxHQUFBdEIsSUFBQWpCLFdBQUEsRUFBQSxNQUNBLEdBQUFpQixJQUFBakIsV0FBQWtKLElBQUFqSSxJQUFBakIsV0FBQWtKLEdBQ0F4RixFQUFBLE1BRUEsSUFBQUEsRUFBQSxNQUVBLElBQUFBLEVBQUEsT0FBQXpDLElBQUFyQixlQUFBbnFCLEVBQUFybEMsUUFBQSxLQUFBZ3lELEdBQ0FYLEdBQUEsSUFBQSxPQUNBUixJQUFBckIsZUFBQS85QixHQUFBNFQsRUFBQXJsQyxRQUFBLEtBQUEyNEQsR0FDQSxPQUFBdEgsR0FBQSxJQUFBLEVBRUEsU0FBQTBILEVBQUFDLEdBQ0EsSUFBQSxJQUFBQyxFQUFBRCxFQUFBLEVBQUFDLEdBQUEsSUFBQXBJLElBQUFyQixlQUFBeUosR0FBQUEsS0FDQSxJQUFBQyxFQUFBQyxFQUNBLElBQUFGLElBQUFBLEVBQUFELEVBQUFDLElBQUFwSSxJQUFBckIsZUFBQXlKLEtBQUFwNEQsS0FBQSxJQUFBNnlCLEVBQUF3OUIsWUFBQXg5QixFQUFBdzlCLFdBQUErSCxLQUFBLE1BQUFFLEVBQUFyRyxFQUFBbUcsRUFBQWhJLEVBQUFnSSxFQUFBLEdBQUFuSSxRQUFBbUksRUFBQSxHQUFBOThELFNBQUFnOUQsRUFBQTM2RCxPQUFBLEdBQUFpSyxNQUFBMm9ELEtBQUErSCxFQUFBajBELE9BQ0FnMEQsRUFBQXhHLEVBQUF5RyxNQUFBRCxFQUFBendELE1BQUEyb0QsTUFBQTE5QixFQUFBMGxDLDZCQUFBN0csRUFBQTBHLEdBQUEsSUFBQTV6QixFQUFBL2lDLFFBQUFveEIsRUFBQTJsQyxXQUFBdEMsS0FBQWtDLEdBQUFDLEVBQUF6d0QsTUFBQTdLLElBQUFzN0QsRUFBQXp3RCxNQUFBN0ssR0FBQXdMLEtBQUE0bkQsRUFBQWlJLEdBQUFwSSxJQUFBb0ksR0FBQSxFQUFBdmxDLE1BQUEsS0FBQXhrQixFQUFBK29ELEVBQUFnQixFQUFBakksRUFBQWlJLEVBQUFDLEVBQUF6d0QsT0FBQSxLQUFBLE1BQUF5d0QsRUFBQXp3RCxNQUFBN0ssR0FBQXM3RCxFQUFBendELE1BQUEyb0QsSUFBQSxLQUFBSixFQUFBaUksR0FBQWpJLEVBQUFpSSxHQUFBbEMsSUFBQWtDLEtBQUEsTUFBQXBJLElBQUFyQixlQUFBdGdELEVBQUF1aUIsS0FBQXduQyxHQUFBckgsZ0JBQUEsSUFFQUosR0FBQSxJQUFBQSxFQUNBLElBQUF3SCxFQUFBdm5DLEVBQ0FBLEVBQUF1bUMsUUFBQW4zRCxJQUFBbTRELEVBQUFoTCxJQUFBOEosRUFBQXJtQyxHQUFBQSxFQUFBNXhCLElBQUE0eEIsRUFBQXVtQyxPQUNBLElBQUE5b0QsR0FBQSxFQUFBOGlELEVBQUEzc0IsRUFBQXJsQyxRQUFBLEtBQUE2d0QsSUFBQXJCLGdCQUNBLEdBQUFucUIsRUFBQTVrQyxXQUFBaXpCLEVBQUE0bEMsaUJBQUE5SCxJQUFBLElBQUFtRyxJQUFBLElBQUFFLElBQUEzb0QsRUFBQXdrQixFQUFBNGxDLGNBQUF2QyxJQUFBaUMsRUFBQWhNLEVBQUE4SyxFQUFBcm1DLEdBQUFpQyxLQUNBLElBQUF4a0IsRUFBQSxDQUNBLEdBQUE2cEQsRUFBQUMsR0FBQWxCLEVBQUFybUMsS0FBQThuQyxFQUFBMTRELEVBQUEyc0QsRUFBQXRsQyxRQUFBc3hDLE9BQUEvbkMsR0FBQSxHQUFBLEdBQ0F1bkMsRUFBQW5JLElBQUE5K0IsR0FBQWluQyxFQUFBbkksSUFBQWpCLGFBQUF1QixJQUFBdHdELEdBQUFtNEQsRUFBQTdILEtBQUFqaUQsRUFBQStvRCxFQUFBZSxFQUFBaE0sRUFBQXdFLEtBQ0FBLElBQUEsSUFBQW1HLEtBQUEsSUFBQXpvRCxJQUFBLElBQUEyb0QsR0FBQSxDQUNBLElBQUE0QixFQUFBNUksSUFBQXJCLGVBQUF3SixHQUNBLElBQUFTLEdBQUEsT0FBQUEsRUFBQWh4RCxNQUFBN0ssSUFBQTY3RCxFQUFBaHhELE1BQUEyb0QsTUFBQXBFLEdBQUFBLElBQUF0NUIsRUFBQXdqQywyQkFDQSxJQUFBeGpDLEVBQUFrbEMsWUFBQS9ILElBQUFyQixlQUFBa0ssRUFBQVYsTUFBQW40RCxLQUFBMHhELEVBQUF5RyxHQUFBLEdBQUEsSUFBQSxJQUFBVyxFQUFBWCxFQUFBLEVBQUFZLEVBQUFGLEVBQUFWLEdBQUFXLEdBQUFDLEVBQUFELElBQUEsSUFBQSxLQUFBenFELEVBQUErb0QsRUFBQTBCLEVBQUEzTSxFQUFBd0UsSUFBQSxFQUNBLFNBQUExaEIsRUFBQWlYLEdBQ0EsSUFBQThTLEVBQUFoSixJQUFBckIsZUFBQXpJLEdBQ0EsR0FBQThTLEVBQUEsSUFBQSxJQUFBQyxFQUFBRCxFQUFBL0ksUUFBQWlKLEVBQUFELEVBQUF0N0QsT0FBQXc3RCxFQUFBbHFCLEVBQUFrcUIsRUFBQWpULEVBQUFpVCxJQUFBLEdBQUFuSixJQUFBckIsZUFBQXdLLEtBQUFuNUQsSUFBQTB4RCxFQUFBeUgsR0FBQSxHQUFBLENBQ0EsSUFBQXJLLEVBQUFtRCxFQUFBa0gsR0FBQTc5RCxRQUFBazRELEVBQUEzQixFQUFBL0MsR0FBQSxHQUFBc0ssR0FBQSxFQUNBLEtBQUF0SyxFQUFBQSxFQUFBbnhELE9BQUEsR0FBQWlLLE1BQUEyb0QsS0FBQXpCLEVBQUF6cUQsTUFBQW1nQyxFQUFBcG1DLEtBQUEwd0QsRUFBQSxTQUFBSSxFQUFBMkcsR0FDQSxJQUFBLElBQUFyM0QsRUFBQSxFQUFBQSxFQUFBMDZELEVBQUExNkQsSUFBQSxDQUNBLEdBQUFxM0QsRUFBQTVGLFFBQUF6eEQsS0FBQXdCLElBQUFzeUQsRUFBQXVELEVBQUE1RixRQUFBenhELEdBQUE3QyxXQUFBOEcsTUFBQSxLQUFBdzJELEVBQUF6NkQsR0FBQTdDLFdBQUE4RyxNQUFBLEtBQUFvekQsRUFBQVQsSUFBQSxDQUNBLElBQUFpRSxFQUFBSixFQUFBejZELEdBQUE4NkQsRUFBQTlGLEVBQUF2RCxRQUFBenhELEdBQUErNkQsRUFBQTFELEVBQUE1RixRQUFBenhELEdBQ0E2NkQsRUFBQUMsRUFBQXA1RCxLQUFBa3VDLElBQUFpckIsRUFBQUUsS0FBQS9GLEVBQUFxQyxHQUNBLE1BRUF1RCxFQUFBNTZELElBQUE0NkQsRUFBQTU2RCxFQUFBZzFELEVBQUFxQyxPQUVBckMsRUFBQWh2QixFQUFBcmxDLFVBQUFxMEQsR0FDQS9uRCxNQUFBMGtELEVBQUFnSixFQUFBM0YsRUFBQTVyRCxPQUFBLElBQUE0ckQsRUFBQTVyRCxNQUFBMm9ELE9BQ0FRLGdCQUFBLEVBQUE0RyxFQUFBd0IsRUFBQTNGLEdBQUEsR0FBQXhELElBQUFyQixlQUFBekksR0FBQWxtRCxFQUNBbzNELEVBQUFsUixFQUFBOFMsRUFBQXZ0RCxPQUFBLElBaEJBLENBa0JBMHNELEVBQUE5cEQsRUFBQXVpQixNQUFBNXdCLEVBQUFxTyxFQUFBdWlCLElBQUFrb0MsR0FBQVgsRUFBQVcsRUFDQSxZQUVBenFELEdBQ0Frb0QsTUFBQXNDLEVBQUFWLEtBR0EsSUFBQTlwRCxHQUFBd2tCLEVBQUFtOEIsYUFBQTJCLElBQUEsSUFBQW9HLElBQUExb0QsRUFBQSxTQUFBdWlCLEVBQUF1N0IsRUFBQXdFLEdBQ0EsSUFBQTZJLEVBQUFySCxFQUFBc0gsRUFBQUMsRUFBQWw3RCxFQUFBbTdELEVBQUFDLEVBQUFDLEVBQUFDLEVBQUF0MUIsRUFBQXJsQyxRQUFBLEtBQUE2d0QsSUFBQXJCLGdCQUFBb0wsR0FBQSxFQUFBQyxFQUFBakssSUFDQSxJQUFBMkosRUFBQTFKLElBQUFyQixlQUFBcUwsR0FBQUEsR0FBQSxFQUFBQSxJQUFBLElBQUFQLEVBQUF6SixJQUFBckIsZUFBQXFMLEtBQUFQLEVBQUF0SCxjQUFBbnlELEVBQUEsQ0FDQSxHQUFBdzVELEVBQUFRLEVBQUE3SCxFQUFBbkMsSUFBQXJCLGVBQUE2SyxHQUFBckgsWUFDQXVILEVBQUF6SixRQUFBd0osRUFBQXRILGVBQUFzSCxFQUFBeEosUUFBQXdKLEVBQUF0SCxhQUFBLE1BQ0F1SCxFQUFBRCxFQUVBLEdBQUF0SCxJQUFBbnlELEVBQUEsQ0FDQTY1RCxFQUFBcGpDLFNBQUEraUMsR0FDQSxJQUFBUyxFQUFBUCxFQUFBekosUUFBQXlKLEVBQUF2SCxhQUFBQSxLQUFBbnlELEVBQUEwNUQsRUFBQXpKLFFBQUF5SixFQUFBdkgsYUFBQUEsR0FBQXlILEVBQUEsR0FDQUssRUFBQXQ4RCxPQUFBLElBQUFzOEQsRUFBQUEsRUFBQXgzRCxNQUFBLEtBQUEsSUFDQSxJQUFBeTNELEVBQUFsSyxJQUFBckIsZUFBQWtMLEdBQUFoakIsRUFBQW1aLElBQUFyQixlQUFBa0wsRUFBQSxHQUNBcjFCLEVBQUFwbUMsS0FBQTZ6RCxFQUFBNEgsRUFBQWhqQixFQUFBQSxFQUFBb1osUUFBQWp3RCxFQUFBNjVELEVBQUEsR0FBQSxTQUFBM0ssRUFBQTNtRCxHQUNBcXhELEVBQUFyeEQsRUFBQTBuRCxRQUFBa0MsR0FBQTVwRCxFQUFBMG5ELFFBQUFrQyxHQUFBeDJELFdBQUE4RyxNQUFBLFFBQ0EsSUFBQSxJQUFBMDNELEVBQUEsRUFBQUEsRUFBQVAsRUFBQWo4RCxPQUFBdzhELElBQUEsQ0FDQSxJQUFBQyxLQUFBQyxFQUFBLEVBQUFDLEVBQUEsRUFBQUMsR0FBQSxFQUNBLEdBQUFOLEVBQUFMLEVBQUFPLEtBQUE1eEQsRUFBQTZzRCxLQUFBcDFELElBQUEsSUFBQXdrQyxFQUFBL2lDLFFBQUFtNEQsRUFBQU8sR0FBQTV4RCxFQUFBNnNELEdBQUEzeUQsTUFBQSxRQUFBLElBQUEraEMsRUFBQS9pQyxRQUFBdzRELEVBQUF0K0QsV0FBQWkrRCxJQUFBLENBQ0E1SixJQUFBckIsZUFBQWtMLEdBQUFyMUIsRUFBQXJsQyxRQUFBLEtBQUFvSixHQUNBLElBQUFpeUQsRUFBQXhLLElBQUFyQixlQUFBa0wsR0FBQTVKLFFBQ0EsSUFBQUQsSUFBQXJCLGVBQUFrTCxHQUFBNUosUUFBQWtDLEdBQUExN0IsU0FBQW1qQyxFQUFBTyxJQUNBLE1BQUE1eEQsRUFBQVgsTUFBQTdLLElBQUFtOUQsRUFBQXp1RCxRQUFBbEQsRUFBQVgsTUFBQTJvRCxNQUFBZ0ssR0FBQSxHQUNBLElBQUFMLEVBQUFuSixnQkFBQXFKLEVBQUE1K0QsS0FBQTArRCxFQUFBenVELFFBQ0E2dUQsSUFBQXRLLElBQUFyQixlQUFBa0wsR0FBQTlJLGdCQUFBLGNBQUF4b0QsS0FBQUEsRUFBQVgsTUFBQTJvRCxLQUNBUCxJQUFBckIsZUFBQWtMLEdBQUFwdUQsTUFBQWxELEVBQUFYLE1BQUEyb0QsS0FBQVAsSUFBQXJCLGVBQUFrTCxHQUFBcHVELE1BQUF5dUQsRUFBQXp1RCxNQUNBak4sRUFBQXE3RCxFQUFBLEVBQUFyN0QsRUFBQXV4RCxFQUFBL3ZELEdBQUEsR0FBQSxFQUFBeEIsS0FBQW03RCxFQUFBM0osSUFBQXJCLGVBQUFud0QsTUFBQSxJQUFBbTdELEVBQUE1SSxnQkFBQSxjQUFBeG9ELEtBQUFveEQsRUFBQWx1RCxPQUFBMnVELEVBQUE1K0QsS0FBQW0rRCxFQUFBbHVELE9BQUFqTixFQUFBb3lCLEdBQUF5cEMsV0FDQXJLLElBQUFyQixlQUFBbndELEdBQ0EsSUFBQSs3RCxHQUFBSCxFQUFBLEtBQUE3eEQsRUFBQVgsTUFBQTJvRCxLQUFBNkosRUFBQS93RCxRQUNBbW5ELEdBQUEsR0FBQXVKLEdBQUEsRUFBQUssRUFBQXo4RCxPQUFBLEdBQUEsQ0FDQSxJQUFBOE4sRUFBQTJ1RCxFQUFBL3dELFFBQ0EsR0FBQW9DLElBQUFvbkIsRUFBQXdqQyw2QkFBQTBELEVBQUFuSSxFQUFBN0IsRUFBQS92RCxHQUFBLEdBQUEsRUFBQXlMLEdBQUEsRUFBQXFyRCxHQUFBLElBQUEsTUFFQSxHQUFBaUQsRUFBQSxDQUNBL0osSUFBQXJCLGVBQUFrTCxHQUFBNUosUUFBQXVLLEVBQ0EsSUFBQUMsRUFBQTFLLEVBQUFuL0IsR0FBQSxFQUNBLElBQUFweUIsRUFBQXE3RCxFQUFBLEVBQUFyN0QsRUFBQXV4RCxJQUFBLEVBQUF2eEQsTUFBQW03RCxFQUFBM0osSUFBQXJCLGVBQUFud0QsTUFBQXdCLEdBQUEsTUFBQTI1RCxFQUFBL3hELE1BQUE3SyxLQUFBeUIsRUFBQW95QixHQUFBMHBDLEVBQUFELElBQUFDLElBQ0FQLEVBQUFuSSxHQUFBaGhDLEdBQUEwcEMsRUFBQUQsR0FBQUksRUFBQUEsRUFBQTdwQyxFQUFBdTdCLEVBQUF3RSxFQUFBbUcsR0FBQSxHQUVBLEdBQUFpRCxFQUFBLE9BQUEsRUFDQXZKLElBQUFSLElBQUFyQixlQUFBbnFCLEVBQUFybEMsUUFBQSxLQUFBMjZELE9BS0EsT0FBQUMsRUEzQ0EsQ0E0Q0E1QixFQUFBaE0sRUFBQXdFLEtBQUEsSUFBQXRpRCxJQUFBQSxHQUNBdWlCLElBQUF1bkMsSUFHQSxHQUFBM3pCLEVBQUE1a0MsV0FBQWl6QixFQUFBNm5DLGtCQUFBLElBQUFyc0QsSUFBQXNpRCxJQUFBLElBQUFtRyxJQUFBLElBQUFFLEVBQUEsQ0FDQSxJQUFBMkQsRUFBQTluQyxFQUFBNm5DLGVBQUF4RSxHQUFBLEdBQUE3bkQsRUFBQXdrQixHQUNBLEdBQUE4bkMsRUFBQXZFLG1CQUFBdUUsRUFBQTlMLE9BQUEsQ0FDQSxJQUFBNkksRUFBQWlELEVBQUF2RSxrQkFDQUEsR0FBQSxJQUFBc0IsRUFBQUEsRUFBQUEsRUFBQTVvRCxNQUFBNG9ELEVBQUExNEQsSUFBQTI3RCxFQUFBOUwsUUFFQXhnRCxHQUFBLElBQUFzc0QsRUFBQXRzRCxFQUFBc3NELEVBRUEsT0FBQXRzRCxHQUFBQSxFQUFBdWlCLE1BQUE1d0IsSUFBQXFPLEVBQUF1aUIsSUFBQXVuQyxJQUFBLElBQUE5cEQsSUFBQSxJQUFBMm9ELElBQUF4RyxHQUFBLEdBQ0FSLElBQUFyQixlQUFBbnFCLEVBQUFybEMsUUFBQSxLQUFBZ3lELElBQUE5aUQsRUFFQSxTQUFBcWpELEVBQUE5Z0MsRUFBQSsvQixHQUNBLElBQUFwb0QsRUFBQTZuRCxFQUFBeC9CLEdBQUFocEIsTUFDQSxHQUFBLEtBQUFXLEVBQUFnb0QsTUFBQWhvRCxFQUFBaXFELEVBQUE1aEMsR0FBQWhwQixPQUFBLE1BQUFXLEVBQUF4TCxHQUFBLE9BQUF3TCxFQUFBeEwsR0FDQSxJQUFBLElBQUE0ekQsR0FBQS8vQixHQUFBLEVBQUEsQ0FDQSxJQUFBaytCLEVBQUFtRCxFQUFBcmhDLEdBQ0EsT0FBQWsrQixFQUFBbnhELE9BQUEsR0FBQSxLQUFBbXhELEVBQUFBLEVBQUFueEQsT0FBQSxHQUFBaUssTUFBQTJvRCxJQUFBLEVBQUEsR0FFQSxPQUFBLEVBRUEsU0FBQXNJLEVBQUFqb0MsRUFBQWdxQyxHQUNBLElBQUFDLEVBQUE3SyxJQUFBakIsV0FDQSxHQUFBbitCLEdBQUFpcUMsRUFBQSxPQUFBQSxFQUNBLElBQUF6dEMsRUFBQXdELEVBQ0EsSUFBQXFoQyxFQUFBNEksRUFBQSxHQUFBbDlELE9BQUEsSUFBQTR4RCxHQUFBLEVBQUFzTCxFQUFBLEdBQUEsR0FBQUEsRUFBQTdLLElBQUFqQixjQUFBM2hDLEVBQUF5dEMsS0FBQSxJQUFBRCxLQUFBLElBQUFwSSxFQUFBcGxDLEdBQUF4bEIsTUFBQXlxRCxpQkFBQVgsRUFBQXRrQyxNQUFBLElBQUF3dEMsSUFBQWxKLEVBQUF0a0MsTUFDQSxPQUFBQSxFQUVBLFNBQUEwdEMsRUFBQWxxQyxFQUFBZ3FDLEdBQ0EsSUFBQTlMLEVBQUExaEMsRUFBQXdELEVBQ0EsR0FBQXhELEdBQUEsRUFBQSxPQUFBLEVBQ0EsT0FBQUEsRUFBQSxLQUFBLElBQUF3dEMsSUFBQSxJQUFBcEksRUFBQXBsQyxHQUFBeGxCLE1BQUF5cUQsaUJBQUEsSUFBQXVJLElBQUFsSixFQUFBdGtDLE1BQUEwaEMsRUFBQW1ELEVBQUE3a0MsSUFBQXp2QixPQUFBLEdBQUEsSUFBQW14RCxFQUFBbnhELFFBQUEsS0FBQW14RCxFQUFBLEdBQUFsbkQsTUFBQTJvRCxRQUNBLE9BQUFuakMsRUFLQSxTQUFBMnRDLEVBQUF0dkQsRUFBQW9qRCxFQUFBbU0sRUFBQWw0QyxFQUFBbTRDLEdBQ0EsR0FBQW40QyxHQUFBMGhCLEVBQUE1a0MsV0FBQWl6QixFQUFBcW9DLGVBQUEsQ0FDQSxJQUFBN3NELEVBQUF3a0IsRUFBQXFvQyxjQUFBbC9ELEtBQUFtL0QsRUFBQXI0QyxFQUFBK3JDLEVBQUFtTSxFQUFBbm9DLEdBQ0EsR0FBQXhrQixFQUFBLENBQ0EsR0FBQUEsRUFBQStuRCxrQkFBQSxDQUNBLElBQUFzQixFQUFBcnBELEVBQUErbkQsa0JBQ0FBLEdBQUEsSUFBQXNCLEVBQUFBLEVBQUFBLEVBQUE1b0QsTUFBQTRvRCxFQUFBMTRELElBQUFxUCxFQUFBd2dELFFBQUFBLEdBQ0FBLEVBQUFxSCxHQUFBLEdBRUE4RSxJQUFBaDdELElBQUFnN0QsRUFBQTNzRCxFQUFBa29ELFFBQUF2MkQsRUFBQXFPLEVBQUFrb0QsTUFBQXlFLElBR0F2dkQsSUFBQXpMLElBQUF5TCxFQUFBMHZELFVBQUFDLFVBQUF2TSxFQUFBam1ELEtBQUEsS0FBQW95RCxJQUFBaDdELEdBQUE4aUIsSUFBQTlpQixHQUFBLFNBQUE4aUIsRUFBQXBpQixLQUFBMjZELEVBQUE1dkQsRUFBQXV2RCxFQUFBLElBQUFuTSxFQUFBbHhELFFBQUEyOUQsR0FBQXg0QyxHQUFBLFVBQUFBLEVBQUFwaUIsS0FBQWthLFdBQUEsV0FDQTI3QyxFQUFBOXFELEVBQUF1dkQsSUFDQSxHQUFBekUsRUFBQTlxRCxFQUFBdXZELElBQUEsSUFBQUMsSUFBQU0sR0FBQSxFQUNBLzJCLEVBQUEvNEIsR0FBQWthLFFBQUEsV0FFQSxTQUFBd3FDLEVBQUF2L0IsRUFBQXJvQixFQUFBaXpELEdBQ0EsSUFBQWp6RCxFQUFBQSxHQUFBaXFELEVBQUE1aEMsR0FBQWhwQixPQUFBc21ELGNBQUFsdUQsSUFBQSxJQUFBdzdELEVBQUEsT0FBQWgzQixFQUFBNWtDLFdBQUEySSxFQUFBMmxELGFBQUEzbEQsRUFBQTJsRCxZQUFBcjdCLEdBQUF0cUIsRUFBQTJsRCxZQUNBLEdBQUEsT0FBQTNsRCxFQUFBeEwsR0FBQSxDQUNBLEdBQUE2ekIsR0FBQSxHQUFBby9CLElBQUFyQixlQUFBLzlCLEtBQUE1d0IsRUFBQSxDQUNBLElBQUF5N0QsRUFBQTNNLEVBQUFtRCxFQUFBcmhDLEdBQUE4cUMsS0FDQSxHQUFBNU0sRUFBQW54RCxPQUFBLEdBQUEsS0FBQW14RCxFQUFBQSxFQUFBbnhELE9BQUEsR0FBQWlLLE1BQUEyb0QsSUFBQSxFQUFBLEdBQUEsSUFBQSxJQUFBL3hELEVBQUEsRUFBQUEsRUFBQXN3RCxFQUFBbnhELE9BQUFhLElBQUEsSUFBQSxJQUFBc3dELEVBQUF0d0QsR0FBQW9KLE1BQUF5cEQsY0FBQSxJQUFBdkMsRUFBQXR3RCxHQUFBb0osTUFBQXdxRCxxQkFBQSxPQUFBdEQsRUFBQXR3RCxHQUFBb0osTUFBQTdLLElBQUEwK0QsSUFBQXo3RCxJQUFBLElBQUE4dUQsRUFBQXR3RCxHQUFBb0osTUFBQTdLLEdBQUF3TCxLQUFBa3pELEVBQUE3ekQsTUFBQTJvRCxJQUFBUCxJQUFBcC9CLEdBQUEsRUFBQWlDLE1BQUE2b0MsRUFBQWxnRSxLQUFBc3pELEVBQUF0d0QsSUFDQSxPQUFBc3dELEVBQUF0d0QsR0FBQW9KLE1BQUE3SyxLQUFBMCtELEVBQUEzTSxFQUFBdHdELElBQUFrOUQsRUFBQS85RCxPQUFBLEdBQUEsY0FBQTRLLEtBQUFtekQsRUFBQSxHQUFBOXpELE1BQUEyb0QsTUFBQSxPQUFBMTlCLEVBQUFxN0IsWUFBQXZWLE9BQUEvbkIsRUFBQWlDLEVBQUFxN0IsWUFBQXZ3RCxRQUVBLE9BQUE0SyxFQUFBZ29ELElBRUEsT0FBQTE5QixFQUFBcTdCLFlBQUF2VixPQUFBL25CLEVBQUFpQyxFQUFBcTdCLFlBQUF2d0QsUUFFQSxTQUFBZytELEVBQUFsd0QsRUFBQW13RCxFQUFBakwsRUFBQWtMLEVBQUFDLEdBSUEsSUFBQUMsRUFBQUYsRUFBQXZnRSxRQUFBMGdFLEVBQUEsR0FBQUMsR0FBQSxFQUFBNXRELEVBQUFyTyxFQUNBLEdBQUF3d0QsSUFBQUcsSUFBQSxJQUFBOTlCLEVBQUFxcEMsV0FBQUQsRUFBQXBELEVBQUFvRCxPQUFBLENBQ0EsSUFBQUUsRUFBQWxHLElBQUEzNkQsTUFBQSxFQUFBdTlELEdBQUEsSUFBQWp3RCxLQUFBLElBQUEvRyxFQUFBazZELEVBQUFuekQsS0FBQSxJQUFBaEIsTUFBQSxJQUFBOUMsT0FBQSxJQUFBNm5ELEVBQUF5UCxZQUFBRCxHQUFBLE1BQ0F0NkQsR0FBQUEsRUFBQWxFLE9BQUEsSUFBQW8rRCxFQUFBNzhELE9BQUEsRUFBQTJDLEVBQUFsRSxPQUFBdytELEVBQUF4K0QsUUFDQXMrRCxFQUFBcEQsRUFBQW9ELElBRUEsSUFBQSxJQUFBQSxHQUFBak0sSUFBQTkrQixFQUFBMm5DLEVBQUFvRCxHQUFBQSxFQUFBLEdBQUFqTSxJQUFBOStCLEVBQUErcUMsRUFDQXozQixFQUFBcG1DLEtBQUEyOUQsRUFBQSxTQUFBN00sRUFBQTluQyxHQUNBLEdBQUFBLElBQUFwbkIsRUFBQSxHQUFBZ3dELElBQUFyQixlQUFBTyxLQUFBbHZELEdBQUErN0QsRUFBQTdNLEtBQUFpQixFQUFBakIsSUFBQXdDLEVBQUF4QyxHQUFBLEtBQUEsSUFBQTBDLEVBQUExQyxFQUFBNk0sRUFBQTdNLElBQUEsRUFBQWx2RCxFQUFBQSxHQUFBLEdBQUFnd0QsSUFBQTkrQixRQUFBLENBQ0EsSUFBQTIzQixFQUFBLElBQUFya0IsRUFBQW5mLE1BQUEsYUFDQXdqQyxFQUFBM2dDLE1BQUFkLEVBQUF0Z0IsV0FBQSxHQUFBazFELEdBQUE1MEMsRUFDQSxJQUFBMG9DLEVBQUFDLEVBQUEvdkQsR0FBQSxHQUFBZ3lELEVBQUFoQyxJQUFBckIsZUFBQW1CLEdBQUF1TSxFQUFBak0sRUFBQU4sRUFBQSxFQUFBa0MsRUFBQUEsRUFBQS9CLFFBQUEzMEQsUUFBQTBFLEVBQUE4dkQsR0FDQSxHQWZBWixFQWVBK00sRUFmQUQsRUFlQUEsR0FkQSxJQUFBL0YsSUFBQTM2RCxNQUFBNHpELEVBQUEySixFQUFBM0osSUFBQXRtRCxLQUFBLElBQUFuTixRQUFBdWdFLElBQUF0SyxFQUFBeEMsSUFBQXNELEVBQUF0RCxHQUFBdG5ELE1BQUFzb0QsWUFBQThMLEVBQUFyakIsT0FBQXFqQixFQUFBcitELE9BQUEsSUFjQWd6RCxHQUFBOTlCLEVBQUFxcEMsV0FBQSxDQUNBLElBQUF0ckMsRUFBQSsvQixFQUFBekIsRUFBQSxNQUFBbU4sRUFBQXowRCxNQUFBN0ssSUFBQXMvRCxFQUFBejBELE1BQUF5cEQsYUFBQXZCLEVBQUEsRUFBQUUsSUFBQTkrQixFQUFBNCtCLEVBQUEsRUFBQUUsSUFBQTkrQixFQUNBN2lCLEVBQUFpdUQsR0FBQUMsY0FBQXZnRSxLQUFBeVAsRUFBQW85QyxHQUFBLEdBQUEsRUFBQThILEVBQUEvL0IsR0FDQXFyQyxFQUFBcnJDLEVBQUEsRUFBQW9yQyxFQUFBLFFBQ0EzdEQsRUFBQWl1RCxHQUFBQyxjQUFBdmdFLEtBQUF5UCxFQUFBbzlDLEdBQUEsR0FBQSxHQUFBLEVBQUFpSCxFQUFBLEdBQ0EsSUFBQSxJQUFBemhELElBQUFzaUQsR0FBQW5zQixFQUFBNWtDLFdBQUFpekIsRUFBQXFvQyxlQUFBLENBQ0EsSUFBQXNCLEVBQUFudUQsRUFDQSxHQUFBQSxFQUFBd2tCLEVBQUFxb0MsY0FBQWwvRCxLQUFBbS9ELEVBQUF0UyxFQUFBcU4sSUFBQTduRCxFQUFBb3VELGdCQUFBNXBDLElBQ0F4a0IsRUFBQW0yQixFQUFBcmxDLE9BQUFxOUQsRUFBQW51RCxLQUFBQSxFQUFBK25ELGtCQUFBLENBQ0EsSUFBQXNCLEVBQUFycEQsRUFBQStuRCxrQkFDQUEsR0FBQSxJQUFBc0IsRUFBQUEsRUFBQUEsRUFBQTVvRCxNQUFBNG9ELEVBQUExNEQsSUFBQXFQLEVBQUF3Z0QsUUFDQTJCLEdBQUEsR0FBQW5pRCxFQUFBa29ELFFBQUF2RyxJQUFBOStCLEVBQUE3aUIsRUFBQWtvRCxNQUFBbG9ELEVBQUFvdUQsZ0JBQUFwdUQsRUFBQWtvRCxTQTFCQSxJQUFBckgsRUFBQThNLElBOEJBSixFQUFBLENBQ0EsSUFBQVosRUFBQWg3RCxFQUNBcEYsRUFBQXNWLGdCQUFBekUsR0FBQTRDLElBQUEyc0QsRUFBQW5vQyxFQUFBdTZCLGFBQUEwTixFQUFBenNELEVBQUFvdUQsaUJBQUFwdUQsRUFBQW91RCxpQkFDQTFCLEVBQUF0dkQsRUFBQXlxRCxJQUFBOEUsRUFBQWMsR0FBQSxJQUFBdDNCLEVBQUFuZixNQUFBLFlBQUF5MkMsR0FBQSxVQUFBQSxFQUFBcDdELE9BR0EsU0FBQWc4RCxFQUFBanhELEdBQ0EsR0FBQUEsRUFBQSxDQUNBLEdBQUFBLEVBQUEwdkQsWUFBQW43RCxFQUFBLE9BQUF5TCxFQUFBekosTUFDQXlKLEVBQUEwdkQsV0FBQTF2RCxFQUFBMHZELFVBQUFwTyxjQUFBdVAsR0FBQUssY0FBQTNnRSxLQUFBeVAsR0FFQSxJQUFBbXhELEtBQUE1RSxFQUFBaEksSUFBQXJCLGVBQ0EsSUFBQSxJQUFBeUosS0FBQUosRUFBQUEsRUFBQUksR0FBQXh3RCxPQUFBLE1BQUFvd0QsRUFBQUksR0FBQXh3RCxNQUFBN0ssSUFBQTYvRCxFQUFBcGhFLEtBQUF3OEQsRUFBQUksR0FBQTNzRCxPQUNBLElBQUFveEQsRUFBQSxJQUFBRCxFQUFBai9ELE9BQUEsSUFBQXd2RCxFQUFBeVAsRUFBQTdsRCxVQUFBNmxELEdBQUFoMEQsS0FBQSxJQUNBLEdBQUE0N0IsRUFBQTVrQyxXQUFBaXpCLEVBQUFpcUMsVUFBQSxDQUNBLElBQUFDLEdBQUE1UCxFQUFBK0ksSUFBQTU2RCxRQUFBeWIsVUFBQW0vQyxLQUFBdHRELEtBQUEsSUFDQWkwRCxFQUFBaHFDLEVBQUFpcUMsU0FBQTlnRSxLQUFBbS9ELEVBQUE0QixFQUFBRixFQUFBaHFDLEdBRUEsT0FBQWdxQyxFQUVBLFNBQUF0RyxFQUFBOXFELEVBQUEwckQsRUFBQW40RCxFQUFBZytELEdBQ0EsU0FBQUMsRUFBQXJzQyxHQUNBLE9BQUEsSUFBQW9zQyxJQUFBN1AsR0FBQSxpQkFBQXY4QixHQUFBaUMsRUFBQW03QixRQUFBLEtBQUFuN0IsRUFBQXE3QixjQUFBdDlCLEVBQUFzbEMsSUFBQXR0RCxLQUFBLElBQUFqTCxPQUFBaXpCLEdBQ0FBLEVBRUEsSUFBQXNzQyxFQUNBLEdBQUEvRixJQUFBbjNELEVBQUEsT0FBQXlMLEVBQUEweEQsbUJBQUFoRyxFQUFBMXJELEVBQUEyeEQsZUFDQXArRCxFQUFBeU0sRUFBQTR4RCxjQUFBdGlFLEVBQUF1aUUsY0FBQUosRUFBQW5pRSxFQUFBdWlFLGVBQUFDLFdBQUEsSUFBQUMsd0JBQUE5Z0UsYUFBQStPLEdBQUF5eEQsRUFBQU0sMEJBQUEveEQsSUFBQTByRCxFQUFBK0YsRUFBQU8sWUFDQXorRCxFQUFBaytELEVBQUFRLFdBQUE5aUUsRUFBQTJtQixXQUFBM21CLEVBQUEybUIsVUFBQW84QyxjQUFBMytELEdBQUFtNEQsRUFBQSxHQUFBK0YsRUFBQXRpRSxFQUFBMm1CLFVBQUFvOEMsZUFBQUMsWUFBQUMsVUFBQSxhQUFBcHlELEVBQUEwdkQsVUFBQTJDLFlBQUFuZ0UsU0FBQXUvRCxFQUFBM2dFLEtBQUFvQixTQUVBdzVELE1BQUE4RixFQUFBOUYsR0FDQW40RCxJQUFBaStELEVBQUFqK0QsSUFFQSxHQUFBbTRELEVBQUFBLFFBQUFuM0QsSUFBQWhCLEVBQUFtNEQsRUFBQW40RCxJQUFBbTRELEVBQUFBLEVBQUFBLE9BQUEsaUJBQUFBLEVBQUEsQ0FDQUEsRUFBQThGLEVBQUE5RixHQUFBbjRELEVBQUEsaUJBQUFBLEVBQUFpK0QsRUFBQWorRCxJQUFBQSxFQUFBbTRELEVBQ0EsSUFBQTRHLEVBQUF0bkMsV0FBQWhyQixFQUFBekQsY0FBQTJDLGFBQUE1UCxHQUFBd3dCLGtCQUFBOWYsRUFBQXpELGNBQUEyQyxhQUFBNVAsR0FBQXd3QixpQkFBQTlmLEVBQUEsTUFBQUEsRUFBQXV5RCxjQUFBQyxVQUFBai9ELEVBQ0EsR0FBQXlNLEVBQUF1bEIsV0FBQStzQyxFQUFBdHlELEVBQUEyeUMsWUFBQTJmLEVBQUEsRUFBQXJwQixJQUFBLElBQUE3aEIsRUFBQWtsQyxZQUFBWixJQUFBbjRELEdBQUFBLElBQ0F5TSxFQUFBMHhELGtCQUFBMXhELEVBQUEyeEQsZUFBQWpHLEVBQUExckQsRUFBQTR4RCxhQUFBcitELE9BQUEsR0FBQWpFLEVBQUF1aUUsYUFBQSxDQUNBLEdBQUFKLEVBQUF0aUUsRUFBQStpRSxjQUFBbHlELEVBQUE0QixhQUFBck4sR0FBQSxPQUFBeUwsRUFBQTRCLFdBQUEsQ0FDQSxJQUFBNndELEVBQUF0akUsRUFBQWtuQixlQUFBLElBQ0FyVyxFQUFBaFAsWUFBQXloRSxHQUVBaEIsRUFBQWlCLFNBQUExeUQsRUFBQTRCLFdBQUE4cEQsRUFBQTFyRCxFQUFBMHZELFVBQUEyQyxZQUFBbmdFLE9BQUF3NUQsRUFBQTFyRCxFQUFBMHZELFVBQUEyQyxZQUFBbmdFLFFBQ0F1L0QsRUFBQWtCLE9BQUEzeUQsRUFBQTRCLFdBQUFyTyxFQUFBeU0sRUFBQTB2RCxVQUFBMkMsWUFBQW5nRSxPQUFBcUIsRUFBQXlNLEVBQUEwdkQsVUFBQTJDLFlBQUFuZ0UsUUFDQXUvRCxFQUFBbUIsVUFBQSxHQUNBLElBQUF0eEQsRUFBQWhTLEVBQUF1aUUsZUFDQXZ3RCxFQUFBdXhELGtCQUFBdnhELEVBQUF3eEQsU0FBQXJCLFFBQ0F6eEQsRUFBQSt5RCxtQkFBQXRCLEVBQUF6eEQsRUFBQSt5RCxtQkFBQUgsVUFBQSxHQUNBbkIsRUFBQXVCLFFBQUEsWUFBQXovRCxHQUFBaytELEVBQUFXLFVBQUEsWUFBQTFHLEdBQUErRixFQUFBajZELFVBQ0FvNEQsRUFBQTV2RCxHQUNBMHJELE1BQUFBLEVBQ0FuNEQsSUFBQUEsS0FJQSxTQUFBMC9ELEVBQUFDLEdBQ0EsSUFBQS90QyxFQUFBZy9CLEVBQUFmLEVBQUFxSCxJQUFBMEksRUFBQS9QLEVBQUFseEQsT0FBQW15RCxFQUFBQyxJQUFBOE8sS0FBQTdNLEVBQUFoQyxJQUFBckIsZUFBQW1CLEdBQUFILEVBQUFxQyxJQUFBaHlELEVBQUFneUQsRUFBQS9CLFFBQUEzMEQsUUFBQTBFLEVBQ0EsSUFBQTR3QixFQUFBay9CLEVBQUEsRUFBQWwvQixFQUFBaStCLEVBQUFseEQsT0FBQWl6QixJQUFBKytCLEdBQUFDLEVBQUFRLEVBQUF4L0IsRUFBQSsrQixFQUFBLytCLEVBQUEsSUFBQXEvQixRQUFBMzBELFFBQ0F1akUsRUFBQWp1QyxHQUFBNFQsRUFBQXJsQyxRQUFBLEtBQUF5d0QsR0FDQSxJQUFBa1AsRUFBQTlNLEdBQUFBLEVBQUFHLGNBQUFueUQsRUFBQWd5RCxFQUFBL0IsUUFBQStCLEVBQUFHLGFBQUFueUQsRUFDQSxJQUFBNHdCLEVBQUFndUMsRUFBQSxFQUFBaHVDLEVBQUFrL0IsS0FBQUYsRUFBQWlQLEVBQUFqdUMsSUFBQWhwQixNQUFBeXBELGFBQUF6QixFQUFBaG9ELE1BQUF3cUQsb0JBQUF4QyxFQUFBaG9ELE1BQUF5cUQsZ0JBQUF5TSxJQUFBQSxJQUFBRCxFQUFBanVDLEdBQUFxL0IsUUFBQStCLEVBQUFHLGNBQUEsTUFBQXZDLEVBQUFob0QsTUFBQTdLLElBQUEsT0FBQTZ5RCxFQUFBaG9ELE1BQUE3SyxJQUFBNnlELEVBQUFLLFFBQUErQixFQUFBRyxjQUFBRyxFQUFBMUMsRUFBQUssUUFBQStCLEVBQUFHLGFBQUF4MkQsV0FBQThHLE1BQUEsS0FBQXE4RCxFQUFBbmpFLFdBQUE4RyxNQUFBLE9BQUEsS0FBQXd2RCxFQUFBcmhDLEdBQUEsR0FBQTIvQixPQUFBMUIsRUFBQWorQixLQUFBdS9CLEVBQUF2L0IsRUFBQWcvQixFQUFBaG9ELE9BQUFncEIsSUFBQWd1QyxJQUNBLE9BQUFELEdBQ0Exb0QsRUFBQTJvRCxFQUNBck8sSUFBQXNPLEVBQUFELEdBQUFDLEVBQUFELEdBQUFoM0QsTUFBQTVILEdBQ0E0K0QsRUFFQSxTQUFBRyxFQUFBbFEsR0FDQSxJQUFBLElBQUE4SyxFQUFBcUYsRUFBQU4sSUFBQUUsRUFBQS9QLEVBQUFseEQsT0FBQXNoRSxFQUFBalAsSUFBQXJCLGVBQUFvQixLQUFBaVAsRUFBQUosSUFBQWxOLEVBQUFzTixHQUFBLEtBQUFyRixFQUFBc0YsSUFBQWovRCxFQUFBb3dELEVBQUE0TyxFQUFBQyxFQUFBaFAsUUFBQTMwRCxNQUFBLElBQUEyakUsR0FBQXpNLEVBQUF3TSxNQUFBLElBQUFyRixFQUFBL3hELE1BQUF5cEQsZUFBQSxJQUFBc0ksRUFBQS94RCxNQUFBd3FELHFCQUFBLElBQUF1SCxFQUFBL3hELE1BQUF5cUQsZ0JBQUEyTSxFQUFBLElBQUFKLEdBQUEsTUFBQUssSUFBQWovRCxFQUFBb3dELEVBQUE0TyxFQUFBLEVBQUFDLEVBQUFoUCxRQUFBMzBELE1BQUEsSUFBQTJqRSxHQUFBek0sRUFBQXdNLEVBQUEsSUFBQXAzRCxNQUFBMm9ELE1BQUF5TyxJQUNBLE1BQUFyRixFQUFBM0osSUFBQXJCLGVBQUFxUSxFQUFBLEtBQUFyRixHQUFBQSxFQUFBL3hELE1BQUF5cEQsYUFBQXNJLEVBQUFsdUQsUUFBQW9uQixFQUFBd2pDLDJCQUFBMkksSUFDQSxPQUFBblEsRUFBQTN2RCxPQUFBOC9ELEdBQUFuUSxFQUVBLFNBQUFqVSxFQUFBaVUsR0FDQSxHQUFBcnFCLEVBQUE1a0MsV0FBQWl6QixFQUFBK25CLFlBQUEsT0FBQS9uQixFQUFBK25CLFdBQUFpVSxFQUFBaDhCLEdBQ0EsR0FBQSxNQUFBQSxFQUFBbzdCLE9BQUEsT0FBQWp1RCxFQUNBLElBQUFtekIsR0FBQSxFQUFBK3JDLEVBQUFSLEdBQUEsR0FBQVMsRUFBQXJFLEVBQUFvRSxFQUFBanBELEdBQ0EsR0FBQWlwRCxFQUFBM08sTUFBQXZ3RCxHQUFBay9ELEVBQUEzTyxJQUFBOEIsZ0JBQUE2TSxFQUFBM08sSUFBQWMsYUFBQTZOLEVBQUEzTyxJQUFBNkIsbUJBQUEsQ0FDQWovQixHQUFBLEVBQ0EsSUFBQSxJQUFBMzBCLEVBQUEsRUFBQUEsR0FBQTJnRSxFQUFBM2dFLElBQUEsQ0FDQSxJQUFBK0osRUFBQTZuRCxFQUFBNXhELEdBQUFvSixNQUNBLEdBQUEsT0FBQVcsRUFBQXhMLElBQUFpekQsSUFBQXJCLGVBQUFud0QsS0FBQXdCLElBQUEsSUFBQXVJLEVBQUE4b0QsY0FBQSxJQUFBOW9ELEVBQUE2cEQsb0JBQUEsT0FBQTdwRCxFQUFBeEwsSUFBQTh4RCxFQUFBcndELEtBQUEyeEQsRUFBQTN4RCxFQUFBK0osR0FBQSxDQUNBNHFCLEdBQUEsRUFDQSxRQUlBLE9BQUFBLEVBRUEsU0FBQXVsQyxFQUFBanRELEVBQUEyekQsRUFBQXh1QyxFQUFBKy9CLEVBQUEwTyxHQUNBLElBQUF4c0MsRUFBQXU2QixjQUFBRCxLQUFBaVMsSUFBQXpTLEVBQUF0bEMsUUFBQWk0QyxVQUFBRixFQUFBelMsRUFBQXRsQyxRQUFBc3hDLE9BQUF5RyxJQUFBelMsRUFBQXRsQyxRQUFBc3hDLFNBQUF5RyxFQUFBelMsRUFBQXRsQyxRQUFBaTRDLFdBQ0FuUyxHQUFBLENBQ0EsSUFBQW9TLEVBQUEzdUMsRUFBQTV4QixJQUNBNHhCLEVBQUE1eEIsSUFBQTR4QixFQUFBdW1DLE1BQUF2bUMsRUFBQXVtQyxNQUFBb0ksRUFFQUgsSUFBQXpTLEVBQUF0bEMsUUFBQWk0QyxZQUFBMXVDLEVBQUE1eEIsSUFBQTR4QixFQUFBdW1DLE1BQUEsSUFBQSxJQUFBdGtDLEVBQUFrbEMsYUFBQW5uQyxFQUFBdW1DLE1BQUEyRCxFQUFBbHFDLEVBQUF1bUMsT0FDQW5ILElBQUFyQixlQUFBLzlCLEVBQUF1bUMsU0FBQW4zRCxHQUFBZ3dELElBQUFyQixlQUFBLzlCLEVBQUF1bUMsT0FBQTFyRCxRQUFBb25CLEVBQUEyc0MsZ0JBQUE1dUMsRUFBQXVtQyxTQUFBaUksSUFBQXpTLEVBQUF0bEMsUUFBQXN4QyxRQUFBL25DLEVBQUF1bUMsUUFBQXZtQyxFQUFBNXhCLE1BQUE0eEIsRUFBQTV4QixJQUFBMHlELEVBQUE5Z0MsRUFBQTV4QixLQUFBLElBQUFneEQsSUFBQXJCLGVBQUEvOUIsRUFBQTV4QixNQUFBZ3hELElBQUFyQixlQUFBLzlCLEVBQUE1eEIsS0FBQXlNLFFBQUFvbkIsRUFBQTJsQyxXQUFBNW5DLEVBQUE1eEIsSUFBQSxFQUFBNjVELEVBQUFqb0MsRUFBQTV4QixLQUFBLEVBQ0FneEQsSUFBQXJCLGVBQUEvOUIsRUFBQXVtQyxTQUFBbjNELEdBQUFnd0QsSUFBQXJCLGVBQUEvOUIsRUFBQXVtQyxPQUFBMXJELFFBQUFvbkIsRUFBQTJzQyxnQkFBQTV1QyxFQUFBNXhCLE9BQ0FneUQsRUFBQXBnQyxFQUFBdW1DLE1BQUF2bUMsRUFBQTV4QixLQUFBLEVBQUEyeEQsSUFBQSxJQUFBQSxHQUFBLFdBQ0EsR0FBQTk5QixFQUFBbThCLFdBQUEsQ0FDQSxJQUFBLElBQUFvTCxLQUFBWixFQUFBekosR0FBQSxHQUFBLEdBQUFvQixFQUFBM3NCLEVBQUFybEMsUUFBQSxLQUFBNndELElBQUFyQixnQkFBQStLLEVBQUExSixJQUFBckIsZUFBQTZLLEdBQUFBLEdBQUEsRUFBQUEsSUFBQSxDQUNBLElBQUFDLEVBQUF6SixJQUFBckIsZUFBQTZLLEdBQ0EsR0FBQUMsRUFBQSxDQUNBLElBQUEsSUFBQUEsRUFBQTFJLGdCQUFBLGNBQUF4b0QsS0FBQWt4RCxFQUFBaHVELFFBQUEydUQsRUFBQTUrRCxLQUFBaStELEVBQUFodUQsY0FDQXVrRCxJQUFBckIsZUFBQTZLLEdBQUFDLEVBQUF0SCxjQUFBbnlELEdBQUF5NUQsRUFBQXhKLFFBQUF3SixFQUFBdEgsZUFBQXVILEVBQUF6SixRQUFBd0osRUFBQXRILGFBQUEsTUFDQXVILEVBQUFELEdBR0EsR0FBQUQsR0FBQSxFQUFBLElBQUF4SixJQUFBOStCLEVBQUEybkMsRUFBQTlJLEdBQUEsR0FBQSxJQUFBcUssRUFBQXo4RCxPQUFBLEdBQUEsQ0FDQSxJQUFBa3JELEVBQUEsSUFBQXJrQixFQUFBbmYsTUFBQSxZQUNBd2pDLEVBQUEzZ0MsTUFBQWt5QyxFQUFBLzFELE1BQUF5QyxXQUFBLEdBQUF3MUQsR0FBQUMsY0FBQXZnRSxLQUFBeVAsRUFBQW85QyxHQUFBLEdBQUEsR0FBQSxFQUFBbUgsSUFBQTkrQixRQUNBOCtCLElBQUFyQixlQUFBbnFCLEVBQUFybEMsUUFBQSxLQUFBZ3lELElBYkEsR0FnQkEsSUFBQXJCLEVBQUFDLEVBQUFuL0IsRUFBQXVtQyxPQUFBLEdBQ0EsR0FBQXJILEVBQUFsL0IsRUFBQXVtQyxNQUFBbkgsSUFBQTkrQixFQUFBMm5DLEVBQUEvSSxRQUFBLElBQUEsSUFBQWEsSUFBQVgsSUFBQTkrQixFQUFBTixFQUFBdW1DLE9BQ0EsSUFBQWtJLEdBQUEsS0FBQXJQLElBQUE5K0IsRUFBQTQrQixHQUFBRSxJQUFBckIsZUFBQXFCLElBQUE5K0IsS0FBQWx4QixHQUFBZ3dELElBQUE5K0IsSUFFQSxTQUFBdXVDLEVBQUFoMEQsR0FrQkEsSUFBQWkwRCxHQUFBajBELEVBQUF6RCxjQUFBMkMsYUFBQTVQLEdBQUF3d0IsaUJBQUE5ZixFQUFBLE1BQUFrMEQsRUFBQS9rRSxFQUFBMEIsY0FBQSxPQUNBcWpFLEVBQUFsaEQsTUFBQXVOLE1BQUEwekMsRUFBQTF6QyxNQUFBMnpDLEVBQUFsaEQsTUFBQW1oRCxVQUFBRixFQUFBRSxXQUNBQyxFQUFBamxFLEVBQUEwQixjQUFBLFFBQUF5TyxVQUFBLGVBQUFVLEVBQUEvTyxXQUFBOHRCLGFBQUFxMUMsRUFBQXAwRCxHQUNBQSxFQUFBL08sV0FBQUMsWUFBQThPLEdBQUFvMEQsRUFBQXBqRSxZQUFBa2pFLEdBQUFFLEVBQUFwakUsWUFBQWdQLEdBQ0FBLEVBQUFnVCxNQUFBbVIsS0FBQSt2QyxFQUFBRyxXQUFBLEtBQUF0N0IsRUFBQS80QixHQUFBaVgsR0FBQSxRQUFBLFNBQUFuYixHQUNBLE9BQUFndkQsRUFBQTlxRCxFQXRCQSxTQUFBczBELEdBQ0EsSUFBQS9FLEVBQUF6ekQsRUFBQTNNLEVBQUEwQixjQUFBLFFBQ0EsSUFBQSxJQUFBbWlCLEtBQUFpaEQsRUFBQTcrRCxNQUFBNGQsS0FBQSxJQUFBQSxFQUFBaGpCLFFBQUEsVUFBQThMLEVBQUFrWCxNQUFBQSxHQUFBaWhELEVBQUFqaEQsSUFDQWxYLEVBQUFrWCxNQUFBdWhELGNBQUFOLEVBQUFNLGNBQUF6NEQsRUFBQWtYLE1BQUE4TyxjQUFBbXlDLEVBQUFueUMsY0FDQWhtQixFQUFBa1gsTUFBQTJPLFNBQUEsV0FBQTdsQixFQUFBa1gsTUFBQXlULE9BQUEsT0FBQTNxQixFQUFBa1gsTUFBQXVOLE1BQUEsT0FDQXprQixFQUFBa1gsTUFBQTRPLFdBQUEsU0FBQTlsQixFQUFBa1gsTUFBQXdoRCxXQUFBLFNBQUFybEUsRUFBQStrQixLQUFBbGpCLFlBQUE4SyxHQUNBLElBQUEyNEQsRUFBQUMsRUFBQTEwRCxFQUFBMHZELFVBQUEyQyxZQUFBc0MsRUFBQSxFQUNBLElBQUFwRixFQUFBLEVBQUFrRixFQUFBQyxFQUFBeGlFLE9BQUFxOUQsR0FBQWtGLEVBQUFsRixJQUFBLENBQ0EsR0FBQXp6RCxFQUFBaUUsV0FBQTIwRCxFQUFBeG5CLE9BQUFxaUIsSUFBQSxJQUFBenpELEVBQUF1NEIsYUFBQWlnQyxFQUFBLENBQ0EsSUFBQU0sRUFBQU4sRUFBQUssRUFBQUUsRUFBQS80RCxFQUFBdTRCLFlBQUFpZ0MsRUFDQXg0RCxFQUFBaUUsVUFBQTIwRCxFQUFBeG5CLE9BQUFxaUIsR0FBQUEsR0FBQXFGLEdBQUE5NEQsRUFBQXU0QixZQUFBLEdBQUF3Z0MsRUFBQXRGLEVBQUEsRUFBQUEsRUFDQSxNQUVBb0YsRUFBQTc0RCxFQUFBdTRCLFlBRUEsT0FBQWxsQyxFQUFBK2tCLEtBQUFoakIsWUFBQTRLLEdBQUF5ekQsRUFPQXVGLENBQUFoNUQsRUFBQWdnQixVQUFBKzBDLEdBQUFrRSxXQUFBeGtFLEtBQUF5UCxHQUFBbEUsTUFDQWk5QixFQUFBLzRCLEdBQUFpWCxHQUFBLFVBQUEsU0FBQW5iLEdBQ0FBLEVBQUEwZixXQUFBLElBQUE0TCxFQUFBa2xDLFlBQUFuOUMsV0FBQSxXQUNBeWdELEVBQUE1dkQsSUFDQSxLQUdBLFNBQUE0dkQsRUFBQTV2RCxFQUFBdXZELEVBQUF4UyxHQUNBLFNBQUFpWSxJQUNBQyxHQUFBLE9BQUFuNEQsRUFBQXhMLElBQUE2eUQsRUFBQW5rRCxRQUFBekwsRUFBQTBnRSxJQUFBLE9BQUFuNEQsRUFBQXhMLElBQUE2eUQsRUFBQW5rRCxRQUFBekwsR0FBQSxLQUFBdUksRUFBQWdvRCxPQUFBbVEsR0FBQSxFQUNBN1EsR0FBQSxZQUFBNlEsR0FBQSxFQUFBN1EsR0FBQSw0QkFFQSxTQUFBOFEsRUFBQTVnQixJQUNBLElBQUFBLEdBQUFudkIsSUFBQW9xQyxFQUFBN0QsT0FBQXY4RCxFQUFBc1YsZ0JBQUF6RSxJQUFBb2tELEdBQUEsNkZBRUEsSUFBQXRuRCxFQUFBcW5ELEVBQUFELEVBQUFFLEVBQUEsR0FBQTZRLEdBQUEsRUFBQTl2QyxFQUFBLEVBQ0EsR0FBQWl2QyxJQUFBNy9ELEVBQUEsQ0FDQSxJQUFBNnVELEVBQUFxSCxJQUNBLEdBQUE4RSxJQUFBaDdELEVBQUFnN0QsRUFBQXpFLEVBQUE5cUQsR0FBQXV2RCxFQUFBN0QsUUFBQW4zRCxJQUFBZzdELEdBQ0E3RCxNQUFBNkQsRUFDQWg4RCxJQUFBZzhELEtBQ0EsSUFBQXhTLEVBQUEsQ0FDQSxJQUFBc0gsRUFBQUMsSUFDQSxHQUNBNFEsSUFBQTNRLElBQUFyQixlQUFBLzlCLElBQUFnL0IsRUFBQUksSUFBQXJCLGVBQUEvOUIsR0FDQXJvQixFQUFBcW5ELEVBQUFob0QsTUFBQStuRCxFQUFBQyxFQUFBSyxRQUFBMzBELFFBQUFtbEUsSUFBQTVRLEdBQUFoQixFQUFBaitCLEtBQUFnL0IsRUFBQVEsRUFBQXgvQixFQUFBKytCLEVBQUEvK0IsRUFBQSxHQUNBcm9CLEVBQUFxbkQsRUFBQWhvRCxNQUFBK25ELEVBQUFDLEVBQUFLLFFBQUEzMEQsVUFBQSxJQUFBdTNCLEVBQUF3OUIsWUFBQXovQixFQUFBay9CLEdBQUEsaUJBQUFqOUIsRUFBQXc5QixZQUFBNWdDLFNBQUFvRCxFQUFBdzlCLGFBQUF4OUIsRUFBQXc5QixXQUFBei9CLEtBQUE2dkMsSUFDQTVRLEdBQUFNLEVBQUF2L0IsRUFBQXJvQixLQUFBcW9CLFdBQ0EwL0IsSUFBQXR3RCxHQUFBNHdCLEVBQUEwL0IsS0FBQSxPQUFBL25ELEVBQUF4TCxJQUFBLEtBQUF3TCxFQUFBZ29ELE1BQUFULEVBQUFsL0IsR0FBQTh2QyxJQUNBLElBQUE3USxFQUFBcDBELFFBQUEsYUFBQWtsRSxHQUFBLEdBQUFELEdBQUFELElBRUEsSUFBQWQsRUFBQUUsRUFBQXozRCxxQkFBQSxPQUFBLEdBQ0F1M0QsRUFBQW4wRCxVQUFBcWtELEVBQUFwa0QsRUFBQTB2RCxVQUFBeUYsa0JBQUFuMUQsRUFBQWswRCxJQUdBN1MsRUFBQUEsR0FBQTl4RCxLQUFBOHhELFFBQUFqNkIsRUFBQUEsR0FBQTczQixLQUFBNjNCLEtBQ0EsSUFBQWd1QyxFQUFBdHFCLEVBQUErWixFQUFBdVAsRUFBQTFFLEVBQUFuZ0UsS0FBQXdPLEVBQUF4TyxLQUFBd08sR0FBQTJqRCxFQUFBbnlELEtBQUFteUQsTUFBQTJULEdBQUEsRUFBQXZGLEdBQUEsRUFBQXdGLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxJQUNBditDLEdBQUEsU0FBQWpYLEVBQUF5MUQsRUFBQUMsR0FDQSxJQUFBQyxFQUFBLFNBQUE3NUQsR0FDQSxHQUFBdk0sS0FBQW1nRSxZQUFBbjdELEdBQUEsU0FBQWhGLEtBQUF3TixTQUFBLENBQ0EsSUFBQTY0RCxFQUFBNzhCLEVBQUExbkIsS0FBQTloQixLQUFBLG1CQUNBcW1FLEVBQUEsSUFBQTFVLEVBQUEwVSxHQUFBNVQsS0FBQXp5RCxNQUFBaW1FLEdBQUFsK0MsSUFBQS9uQixVQUNBLENBQ0EsR0FBQSxhQUFBdU0sRUFBQTdHLE1BQUEsU0FBQTFGLEtBQUF3TixZQUFBeE4sS0FBQWtNLFVBQUFsTSxLQUFBc21FLFlBQUEsWUFBQS81RCxFQUFBN0csTUFBQTZHLEVBQUFvZixTQUFBLEtBQUFwZixFQUFBOGYsVUFBQSxJQUFBd0wsRUFBQTB1QyxZQUFBaDZELEVBQUE4ZixVQUFBc2xDLEVBQUF0bEMsUUFBQW02QyxNQUFBLENBQ0EsT0FBQWo2RCxFQUFBN0csTUFDQSxJQUFBLFFBQ0EsSUFBQSxJQUFBNjZELEVBQUEsT0FBQUEsR0FBQSxFQUFBaDBELEVBQUF1ZCxpQkFDQSxNQUVBLElBQUEsVUFDQWc4QyxHQUFBLEVBQUF2RixHQUFBLEVBQ0EsTUFFQSxJQUFBLFdBQ0EsSUFBQSxJQUFBdUYsRUFBQSxPQUFBdjVELEVBQUF1ZCxpQkFDQWc4QyxHQUFBLEVBQ0EsTUFFQSxJQUFBLFFBQ0EsR0FBQVcsR0FBQUMsRUFBQSxDQUNBLElBQUF4bkQsRUFBQWxmLEtBQUFvSCxFQUFBMUQsVUFDQSxPQUFBa2MsV0FBQSxXQUNBdW1ELEVBQUExaUUsTUFBQXliLEVBQUE5WCxJQUNBLElBQUEsR0FHQSxJQUFBdS9ELEVBQUFSLEVBQUExaUUsTUFBQXpELEtBQUEwRCxXQUNBLE9BQUEsSUFBQWlqRSxJQUFBcDZELEVBQUF1ZCxpQkFBQXZkLEVBQUF3ZCxtQkFBQTQ4QyxFQUVBcDZELEVBQUF1ZCxtQkFHQXJaLEVBQUEwdkQsVUFBQWo0QyxPQUFBZytDLEdBQUF6MUQsRUFBQTB2RCxVQUFBajRDLE9BQUFnK0MsT0FBQXoxRCxFQUFBMHZELFVBQUFqNEMsT0FBQWcrQyxHQUFBMWxFLEtBQUE0bEUsSUFDQSxJQUFBNThCLEVBQUEvaUMsUUFBQXkvRCxHQUFBLFNBQUEsVUFBQSxPQUFBejFELEVBQUFtMkQsTUFBQXA5QixFQUFBLzRCLEVBQUFtMkQsTUFBQWwvQyxHQUFBdytDLEVBQUFFLEdBQUE1OEIsRUFBQS80QixHQUFBaVgsR0FBQXcrQyxFQUFBRSxJQUVBcitDLElBQUEsU0FBQXRYLEVBQUFxWCxHQUNBLEdBQUFyWCxFQUFBMHZELFdBQUExdkQsRUFBQTB2RCxVQUFBajRDLE9BQUEsQ0FDQSxJQUFBQSxFQUNBSixHQUFBSSxNQUFBSixHQUFBclgsRUFBQTB2RCxVQUFBajRDLE9BQUFKLEdBQUFJLEVBQUF6WCxFQUFBMHZELFVBQUFqNEMsT0FDQXNoQixFQUFBcG1DLEtBQUE4a0IsRUFBQSxTQUFBZytDLEVBQUFXLEdBQ0EsS0FBQUEsRUFBQWxrRSxPQUFBLEdBQUEsQ0FDQSxJQUFBeWpFLEVBQUFTLEVBQUF4OUQsT0FDQSxJQUFBbWdDLEVBQUEvaUMsUUFBQXkvRCxHQUFBLFNBQUEsVUFBQSxPQUFBejFELEVBQUFtMkQsTUFBQXA5QixFQUFBLzRCLEVBQUFtMkQsTUFBQTcrQyxJQUFBbStDLEVBQUFFLEdBQUE1OEIsRUFBQS80QixHQUFBc1gsSUFBQW0rQyxFQUFBRSxVQUVBMzFELEVBQUEwdkQsVUFBQWo0QyxPQUFBZytDLFFBSUE1RSxJQUNBd0YsYUFBQSxTQUFBdjZELEdBQ0EsSUFBQWtFLEVBQUF6USxLQUFBK21FLEVBQUF2OUIsRUFBQS80QixHQUFBMnpELEVBQUE3M0QsRUFBQThmLFFBQUF1SixFQUFBMmxDLEVBQUE5cUQsR0FDQSxHQUFBMnpELElBQUF6UyxFQUFBdGxDLFFBQUFpNEMsV0FBQUYsSUFBQXpTLEVBQUF0bEMsUUFBQXN4QyxRQUFBK0ksR0FBQXRDLElBQUF6UyxFQUFBdGxDLFFBQUEyNkMsa0JBQUF6NkQsRUFBQW9mLFNBQUF5NEMsSUFBQXpTLEVBQUF0bEMsUUFBQTQ2QyxJQUFBLFNBQUFmLEdBQ0EsSUFBQTEzRCxFQUFBNU8sRUFBQTBCLGNBQUEsU0FBQTRsRSxFQUFBLFVBQUExNEQsRUFDQSxPQUFBMDRELElBQUExNEQsRUFBQWQsYUFEQSxRQUNBLFdBQUF3NUQsRUFBQSxtQkFBQTE0RCxFQUFBLE9BQ0FBLEVBQUEsS0FBQTA0RCxFQUhBLEdBSUEzNkQsRUFBQXVkLGlCQUFBNHpDLEVBQUFqdEQsRUFBQTJ6RCxFQUFBeHVDLEdBQUFtcUMsRUFBQXR2RCxFQUFBeXFELEdBQUEsR0FBQWxHLElBQUE5K0IsRUFBQTNwQixFQUFBa0UsRUFBQTB2RCxVQUFBMkMsY0FBQTVILElBQUF0dEQsS0FBQSxLQUNBNkMsRUFBQTB2RCxVQUFBMkMsY0FBQTdILElBQUFydEQsS0FBQSxJQUFBbTVELEVBQUFwOEMsUUFBQSxZQUFBLElBQUFpMUIsRUFBQXNiLE1BQUE2TCxFQUFBcDhDLFFBQUEsaUJBQUEsR0FBQXk1QyxJQUFBelMsRUFBQXRsQyxRQUFBODZDLEtBQUEvQyxJQUFBelMsRUFBQXRsQyxRQUFBKzZDLFVBQUEsQ0FDQTc2RCxFQUFBdWQsaUJBQ0EsSUFBQWsyQyxFQUFBbkMsRUFBQTlJLEtBQ0FsOUIsRUFBQWtsQyxZQUFBaUQsSUFBQWhMLElBQUFqQixZQUFBeG5ELEVBQUEwZixVQUFBK3pDLElBQ0F6RSxFQUFBOXFELEVBQUFsRSxFQUFBMGYsU0FBQTJKLEVBQUF1bUMsTUFBQTZELEVBQUFBLEdBQUEsUUFDQW9FLElBQUF6UyxFQUFBdGxDLFFBQUFnN0MsT0FBQTk2RCxFQUFBMGYsVUFBQW00QyxJQUFBelMsRUFBQXRsQyxRQUFBaTdDLFNBQUEvNkQsRUFBQXVkLGlCQUNBeXhDLEVBQUE5cUQsRUFBQSxFQUFBbEUsRUFBQTBmLFNBQUEySixFQUFBdW1DLE1BQUEsR0FBQSxLQUFBdGtDLEVBQUEwdkMsY0FBQW5ELElBQUF6UyxFQUFBdGxDLFFBQUFtN0MsUUFBQSxLQUFBcEQsR0FBQTczRCxFQUFBb2YsV0FBQSxJQUFBcGYsRUFBQWdmLFFBQUFvMUMsRUFBQWx3RCxHQUFBLEdBQUEsRUFBQW8xRCxFQUFBcCtELE1BQUEsS0FDQXMvRCxFQUFBcDhDLFFBQUEsVUFBQXk1QyxJQUFBelMsRUFBQXRsQyxRQUFBbzdDLFFBQUFsN0QsRUFBQTBmLFVBQUExZixFQUFBb2YsU0FBQSxJQUFBa00sRUFBQTB1QyxZQUFBbkMsSUFBQXpTLEVBQUF0bEMsUUFBQW02QyxNQUFBLElBQUFqNkQsRUFBQTBmLFVBQUEsT0FBQXVyQyxFQUFBNWhDLEVBQUF1bUMsT0FBQXZ2RCxNQUFBN0ssS0FBQTZ6QixFQUFBdW1DLE1BQUEwQixFQUFBam9DLEVBQUF1bUMsUUFDQXZtQyxFQUFBNXhCLElBQUE4N0QsRUFBQWxxQyxFQUFBdW1DLE9BQUEsR0FBQXZtQyxFQUFBdW1DLE1BQUEyRCxFQUFBbHFDLEVBQUE1eEIsS0FBQSxLQUFBNHhCLEVBQUF1bUMsTUFBQTBCLEVBQUFqb0MsRUFBQXVtQyxPQUFBLEdBQ0F2bUMsRUFBQTV4QixJQUFBNjVELEVBQUFqb0MsRUFBQXVtQyxPQUFBLEdBQUF2bUMsRUFBQTV4QixJQUFBZ3hELElBQUFqQixZQUFBbitCLEVBQUE1eEIsT0FDQTR4QixFQUFBdW1DLE1BQUFuSCxJQUFBakIsYUFBQXhuRCxFQUFBdWQsaUJBQUF5eEMsRUFBQTlxRCxFQUFBbWxCLEVBQUF1bUMsTUFBQXZtQyxFQUFBNXhCLE9BQUF1SSxFQUFBMGYsV0FBQSxJQUFBNEwsRUFBQWtsQyxhQUFBcUgsSUFBQXpTLEVBQUF0bEMsUUFBQXE3QyxNQUFBOW5ELFdBQUEsV0FDQSxJQUFBb2dELEVBQUF6RSxFQUFBOXFELEdBQ0E4cUQsRUFBQTlxRCxFQUFBdXZELEVBQUE3RCxRQUNBLEdBQUFpSSxJQUFBelMsRUFBQXRsQyxRQUFBczdDLE1BQUEvbkQsV0FBQSxXQUNBLElBQUFvZ0QsRUFBQXpFLEVBQUE5cUQsR0FDQThxRCxFQUFBOXFELEVBQUEwaEQsRUFBQTZOLEVBQUE3RCxNQUFBLEVBQUE2RCxFQUFBN0QsTUFBQSxJQUNBLEtBQUF0a0MsRUFBQWtsQyxZQUFBbGxDLEVBQUFrbEMsV0FBQXhCLEVBQUE5cUQsRUFBQW9uQixFQUFBa2xDLFlBQUFubkMsRUFBQXVtQyxRQUFBbkgsSUFBQWpCLFdBQUFuK0IsRUFBQXVtQyxNQUFBdm1DLEVBQUF1bUMsTUFBQSxJQUNBdGtDLEVBQUErdkMsVUFBQTVtRSxLQUFBaEIsS0FBQXVNLEVBQUEydUQsSUFBQUssRUFBQTlxRCxHQUFBMHJELE1BQUF0a0MsR0FBQWt1QyxHQUFBLElBQUF2OEIsRUFBQS9pQyxRQUFBMjlELEVBQUF2c0MsRUFBQWd3QyxhQUVBdEcsY0FBQSxTQUFBaDFELEVBQUF1N0QsRUFBQWxILEVBQUFqTCxFQUFBekIsR0FDQSxJQUFBempELEVBQUF6USxLQUFBK21FLEVBQUF2OUIsRUFBQS80QixHQUFBMnpELEVBQUE3M0QsRUFBQTJnQixPQUFBM2dCLEVBQUE2ZixVQUFBN2YsRUFBQThmLFFBQ0EsTUFBQSxJQUFBeTdDLEdBQUF2N0QsRUFBQW9mLFNBQUFwZixFQUFBZ2YsVUFBQWhmLEVBQUFvZixTQUFBcGYsRUFBQXVmLFNBQUFpNkMsR0FBQSxPQUFBM0IsSUFBQXpTLEVBQUF0bEMsUUFBQTA3QyxPQUFBbEMsSUFBQTNLLElBQUF0dEQsS0FBQSxNQUFBaTRELEVBQUEzSyxJQUFBdHRELEtBQUEsSUFDQWdTLFdBQUEsV0FDQW1uRCxFQUFBcDhDLFFBQUEsV0FDQSxLQUFBLEVBQ0EsR0FBQXk1QyxFQUFBLENBQ0EsS0FBQUEsSUFBQSxJQUFBNzNELEVBQUEwZixVQUFBLEtBQUE0TCxFQUFBMmxDLGFBQUE0RyxFQUFBdnNDLEVBQUEybEMsV0FBQTF4RCxXQUFBLElBQ0EsSUFBQTIxRCxFQUFBN3JDLEVBQUFreUMsR0FDQTNMLE1BQUFqSSxFQUNBbHdELElBQUFrd0QsR0FDQXFILEVBQUE5cUQsR0FBQTBnRCxFQUFBM2xELE9BQUFDLGFBQUEyNEQsR0FDQXBQLElBQUFnVCxnQkFBQSxFQUNBLElBQUExTSxFQUFBMUUsRUFBQWhoQyxFQUFBdTdCLEVBQUF3RSxHQUNBLElBQUEsSUFBQTJGLElBQUE5RixHQUFBLEdBQUFpTSxFQUFBbkcsRUFBQUMsUUFBQXYyRCxFQUFBczJELEVBQUFDLE1BQUF1TSxFQUFBeE0sRUFBQTFsQyxJQUFBLEVBQUFpb0MsRUFBQXZDLEVBQUExbEMsS0FDQW8vQixJQUFBOStCLEVBQUF1ckMsSUFBQSxJQUFBYixJQUFBaGhELFdBQUEsV0FDQWlZLEVBQUFvd0MsZ0JBQUFqbkUsS0FBQXlQLEVBQUEyekQsRUFBQTlJLEVBQUF6akMsSUFDQSxHQUFBbTlCLElBQUFnVCxpQkFBQSxJQUFBMU0sR0FBQSxDQUNBLElBQUF6SCxFQUFBcUgsSUFDQTZFLEVBQUF0dkQsRUFBQW9qRCxFQUFBaDhCLEVBQUF1NkIsY0FBQWtKLEVBQUFDLFFBQUF2MkQsRUFBQTg2RCxFQUFBMkIsR0FBQUEsRUFBQWwxRCxHQUFBLElBQUF1N0QsSUFDQSxJQUFBQSxHQUFBbG9ELFdBQUEsWUFDQSxJQUFBZ2dDLEVBQUFpVSxJQUFBa1QsRUFBQXA4QyxRQUFBLGFBQ0EsR0FFQSxHQUFBcGUsRUFBQXVkLGlCQUFBZytDLEVBQUEsT0FBQSxJQUFBeE0sSUFBQUEsRUFBQW1HLGdCQUFBQSxHQUNBbkcsSUFHQTRNLFdBQUEsU0FBQTM3RCxHQUNBLElBQUE0N0QsRUFBQS9CLEVBQUE3NUQsRUFBQWdlLGVBQUFoZSxFQUFBdzZELEVBQUF2OUIsRUFBQXhwQyxNQUFBK2dFLEVBQUEvZ0UsS0FBQW1nRSxVQUFBMkMsV0FBQSxHQUFBOUMsRUFBQXpFLEVBQUF2N0QsTUFDQW15RCxJQUFBZ1csRUFBQW5JLEVBQUFoOEQsSUFBQWc4RCxFQUFBaDhELElBQUFnOEQsRUFBQTdELE1BQUE2RCxFQUFBN0QsTUFBQWdNLEdBQ0EsSUFBQUMsRUFBQXJILEVBQUFwWSxPQUFBLEVBQUFxWCxFQUFBN0QsT0FBQWtNLEVBQUF0SCxFQUFBcFksT0FBQXFYLEVBQUFoOEQsSUFBQSs4RCxFQUFBcCtELFFBQ0EsR0FBQXlsRSxLQUFBalcsRUFBQThJLElBQUFsL0MsVUFBQWsvQyxLQUFBMzZELE1BQUEsRUFBQTAvRCxFQUFBN0QsT0FBQXZ1RCxLQUFBLE1BQUF3NkQsRUFBQSxJQUNBQyxLQUFBbFcsRUFBQThJLElBQUFsL0MsVUFBQWsvQyxLQUFBMzZELE1BQUEwL0QsRUFBQWg4RCxLQUFBNEosS0FBQSxNQUFBeTZELEVBQUEsSUFDQWxXLElBQUFnVyxFQUFBQyxFQUFBQSxFQUFBQyxFQUFBQSxFQUFBRixHQUNBcG9FLEVBQUF1b0UsZUFBQXZvRSxFQUFBdW9FLGNBQUFDLFFBQUF4SCxFQUFBcUgsRUFBQXJvRSxFQUFBdW9FLGNBQUFDLFFBQUEsUUFBQUYsTUFBQSxDQUNBLElBQUFqQyxFQUFBa0MsZ0JBQUFsQyxFQUFBa0MsY0FBQUMsUUFBQSxPQUFBLEVBQ0F4SCxFQUFBcUgsRUFBQWhDLEVBQUFrQyxjQUFBQyxRQUFBLGNBQUFGLEVBRUEsSUFBQUcsRUFBQXpILEVBQ0EsR0FBQXYzQixFQUFBNWtDLFdBQUFpekIsRUFBQTR3QyxlQUFBLENBQ0EsSUFBQSxLQUFBRCxFQUFBM3dDLEVBQUE0d0MsY0FBQXpuRSxLQUFBbS9ELEVBQUFZLEVBQUFscEMsSUFBQSxPQUFBdHJCLEVBQUF1ZCxpQkFDQTArQyxJQUFBQSxFQUFBekgsR0FFQSxPQUFBSixFQWZBM2dFLE1BZUEsR0FBQSxFQUFBbXlELEVBQUFxVyxFQUFBL2dFLE1BQUEsSUFBQXNVLFVBQUF5c0QsRUFBQTduRSxXQUFBOEcsTUFBQSxLQUNBczRELEVBaEJBLy9ELEtBZ0JBazdELElBQUEyQyxFQUFBOUksS0FBQXhvRCxFQUFBczVELElBQUEzSyxJQUFBdHRELEtBQUEsTUFDQSxJQUFBZ3lDLEVBQUFzYixNQUFBNkwsRUFBQXA4QyxRQUFBLFlBQUFwZSxFQUFBdWQsa0JBRUE0K0MsbUJBQUEsU0FBQW44RCxHQUNBLElBQUFrRSxFQUFBelEsS0FBQStnRSxFQUFBdHdELEVBQUEwdkQsVUFBQTJDLFlBQ0EsR0FBQTVILElBQUF0dEQsS0FBQSxNQUFBbXpELEVBQUEsQ0FDQSxJQUFBZixFQUFBekUsRUFBQTlxRCxHQUNBLElBQUEsSUFBQSxTQUFBQSxFQUFBc3dELEVBQUFmLEdBQ0EsR0FBQSxNQUFBZSxFQUFBcGpCLE9BQUFxaUIsRUFBQTdELE1BQUEsSUFBQSxLQUFBdGtDLEVBQUEybEMsY0FBQXVELEVBQUFBLEVBQUF0NUQsTUFBQSxLQUFBdTRELEVBQUE3RCxNQUFBLEdBQUF0a0MsRUFBQTJsQyxXQUFBN2YsT0FBQSxHQUNBb2pCLEVBQUFBLEVBQUFuekQsS0FBQSxLQUFBbXpELEVBQUFwakIsT0FBQXFpQixFQUFBN0QsTUFBQSxLQUFBdGtDLEVBQUEybEMsWUFBQXVELEVBQUFwK0QsT0FBQXU0RCxJQUFBdjRELE9BQUEsQ0FDQSxJQUFBa3JELEVBQUEsSUFBQXJrQixFQUFBbmYsTUFBQSxZQUNBLE9BQUF3akMsRUFBQTNnQyxNQUFBMkssRUFBQTJsQyxXQUFBMXhELFdBQUEsR0FBQXcxRCxHQUFBQyxjQUFBdmdFLEtBQUF5UCxFQUFBbzlDLEdBQUEsR0FBQSxHQUFBLEVBQUFtUyxFQUFBN0QsTUFBQSxJQUNBLEdBTEEsQ0FPQTFyRCxFQUFBc3dELEVBQUFmLEdBQUEsT0FBQSxFQUNBLEdBQUFlLEVBQUFBLEVBQUEzN0QsUUFBQSxJQUFBMEUsT0FBQSxJQUFBNm5ELEVBQUF5UCxZQUFBbkcsSUFBQXJ0RCxLQUFBLEtBQUEsTUFBQSxLQUNBLElBQUEsU0FBQTZDLEVBQUFzd0QsRUFBQWYsR0FDQSxHQUFBeUcsRUFBQSxDQUNBLElBQUFrQyxFQUFBNUgsRUFBQTM3RCxRQUFBODFELElBQUF0dEQsS0FBQSxJQUFBLElBQ0EsR0FBQSxJQUFBKzZELEVBQUFobUUsT0FBQSxDQUNBLElBQUFrckQsRUFBQSxJQUFBcmtCLEVBQUFuZixNQUFBLFlBQ0EsT0FBQXdqQyxFQUFBM2dDLE1BQUF5N0MsRUFBQTc4RCxXQUFBLEdBQUF3MUQsR0FBQUMsY0FBQXZnRSxLQUFBeVAsRUFBQW85QyxHQUFBLEdBQUEsR0FBQSxFQUFBbUgsSUFBQXJCLGVBQUFxTSxFQUFBN0QsTUFBQSxHQUFBNkQsRUFBQTdELE1BQUE2RCxFQUFBN0QsTUFBQSxJQUNBLElBTkEsQ0FTQTFyRCxFQUFBc3dELEVBQUFmLEdBQUEsT0FBQSxFQUNBQSxFQUFBN0QsTUFBQTRFLEVBQUFwK0QsU0FBQTQ0RCxFQUFBOXFELEVBQUFzd0QsRUFBQXArRCxRQUFBcTlELEVBQUF6RSxFQUFBOXFELElBQ0EsSUFBQW9qRCxFQUFBcUgsSUFBQXR0RCxLQUFBLElBQUFnN0QsRUFBQTdILEVBQUFwWSxPQUFBLEVBQUFxWCxFQUFBN0QsT0FBQTBNLEVBQUE5SCxFQUFBcFksT0FBQXFYLEVBQUE3RCxPQUFBMk0sRUFBQWpWLEVBQUFsTCxPQUFBLEVBQUFxWCxFQUFBN0QsT0FBQTRNLEVBQUFsVixFQUFBbEwsT0FBQXFYLEVBQUE3RCxPQUFBNTFDLEVBQUF5NUMsRUFBQWdKLEVBQUEsR0FBQUMsR0FBQSxFQUNBLEdBQUFMLElBQUFFLEVBQUEsQ0FDQXZpRCxFQUFBNDFDLE1BQUEsRUFDQSxJQUFBLElBQUErTSxHQUFBRCxFQUFBTCxFQUFBam1FLFFBQUFtbUUsRUFBQW5tRSxRQUFBaW1FLEVBQUFqbUUsT0FBQW1tRSxFQUFBbm1FLE9BQUFhLEVBQUEsRUFBQW9sRSxFQUFBanJCLE9BQUFuNkMsS0FBQXNsRSxFQUFBbnJCLE9BQUFuNkMsSUFBQUEsRUFBQTBsRSxFQUFBMWxFLElBQUEraUIsRUFBQTQxQyxRQUNBOE0sSUFBQUQsR0FBQUosRUFBQXRvRSxNQUFBaW1CLEVBQUE0MUMsTUFBQTUxQyxFQUFBdmlCLE1BRUE2a0UsSUFBQUUsSUFBQUYsRUFBQWxtRSxPQUFBb21FLEVBQUFwbUUsT0FBQXNtRSxJQUFBMWlELEVBQUF2aUIsSUFBQXVpQixFQUFBNDFDLE9BQUEwTSxFQUFBbG1FLE9BQUFvbUUsRUFBQXBtRSxPQUFBNGpCLEVBQUF2aUIsS0FBQStrRSxFQUFBcG1FLE9BQUFrbUUsRUFBQWxtRSxPQUFBa21FLEVBQUFsckIsT0FBQSxLQUFBb3JCLEVBQUFwckIsT0FBQSxJQUFBcDNCLEVBQUF2aUIsT0FDQSs3RCxFQUFBdHZELEVBQUF5cUQsSUFBQTMwQyxHQUFBeWlELEVBQUFybUUsT0FBQSxFQUFBNm1DLEVBQUFwbUMsS0FBQTRsRSxFQUFBdmhFLE1BQUEsSUFBQSxTQUFBeXNELEVBQUFpVixHQUNBLElBQUF0YixFQUFBLElBQUFya0IsRUFBQW5mLE1BQUEsWUFDQXdqQyxFQUFBM2dDLE1BQUFpOEMsRUFBQXI5RCxXQUFBLEdBQUFpNkQsR0FBQSxFQUFBekUsR0FBQUMsY0FBQXZnRSxLQUFBeVAsRUFBQW85QyxNQUNBdG5DLEVBQUE0MUMsUUFBQTUxQyxFQUFBdmlCLElBQUEsR0FBQXUzRCxFQUFBOXFELEVBQUFxdkQsRUFBQXY1QyxFQUFBNDFDLE1BQUEsR0FBQTUxQyxFQUFBdmlCLEtBQ0F1SSxFQUFBOGYsUUFBQXNsQyxFQUFBdGxDLFFBQUFzeEMsT0FBQTJELEdBQUF3RixhQUFBOWxFLEtBQUF5UCxFQUFBbEUsSUFDQUEsRUFBQXVkLG1CQUdBNjNDLGNBQUEsU0FBQXAxRCxHQUNBdk0sS0FBQW1nRSxVQUFBcE8sY0FBQSxFQUNBLElBQUEvcUQsRUFBQWhILEtBQUFtZ0UsVUFBQTJDLFdBQUEsR0FDQXQ1QixFQUFBNWtDLFdBQUFpekIsRUFBQXV4QyxnQkFBQXBpRSxFQUFBNndCLEVBQUF1eEMsYUFBQXBvRSxLQUFBbS9ELEVBQUFuNUQsRUFBQTZ3QixJQUFBN3dCLEdBQ0FBLEVBQUFBLEVBQUFTLE1BQUEsSUFBQWs1RCxFQUZBM2dFLE1BRUEsR0FBQSxFQUFBbXlELEVBQUFuckQsRUFBQStVLFVBQUEvVSxHQUNBNitELEVBQUEzSyxJQUFBdHRELEtBQUEsS0FBQWlxQixFQUFBd3hDLHNCQUFBeHhDLEVBQUF5eEMsa0JBSEF0cEUsS0FHQW1nRSxVQUFBMkMsY0FBQTdILElBQUFydEQsS0FBQSxLQUhBNU4sS0FHQW1nRSxVQUFBQyxVQUFBLEtBRUFtSixXQUFBLFNBQUFoOUQsR0FDQSxJQUFBaTlELEVBQUF4cEUsS0FBQW1nRSxVQUFBMkMsWUFDQWpyQyxFQUFBNHhDLG1CQUFBNXhDLEVBQUE2eEMsaUJBQUE3eEMsRUFBQTZ4QyxpQkFBQSxLQUFBRixLQURBeHBFLEtBQ0FtZ0UsVUFBQTJDLGNBQUE1SCxJQUFBdHRELEtBQUEsSUFBQW15RCxFQURBLy9ELEtBQ0FrN0QsSUFBQTJDLEVBQUE5SSxPQUFBLElBQUFpUixHQUFBekssRUFEQXY3RCxLQUNBNjlELEVBQUE5SSxRQUNBLElBQUFsOUIsRUFBQTh4QyxxQkFBQSxJQUFBM0QsR0FBQSxLQUFBd0QsSUFBQXpKLEVBRkEvL0QsS0FFQWs3RCxJQUFBSyxFQUZBdjdELE9BR0FzaEUsR0FBQWtFLFdBQUEvaEUsTUFIQXpELE1BR0F1TSxHQUFBLEtBQUFzNUQsRUFBQTNLLElBQUF0dEQsS0FBQSxLQUVBZzhELGdCQUFBLFNBQUFyOUQsR0FFQSxHQUFBeTVELEdBQUEsRUFBQW51QyxFQUFBd3hDLHNCQUFBenBFLEVBQUFzVixnQkFEQWxWLEtBQ0EsQ0FDQSxJQUFBNnpELEVBQUFxSCxJQUFBNTZELFFBQUFrcEUsRUFGQXhwRSxLQUVBbWdFLFVBQUEyQyxZQUNBMEcsSUFIQXhwRSxLQUdBeU4sYUFBQSxnQkFBQSxLQUFBKzdELEtBQUEsSUFBQXpVLEtBQUF5VSxJQUFBdk8sSUFBQXJ0RCxLQUFBLElBQUFpbUQsS0FBQWtRLEVBQUFsUSxHQUNBa00sRUFKQS8vRCxLQUlBNnpELE1BR0EyUixXQUFBLFNBQUFqNUQsRUFBQXM5RCxHQWVBLElBQUFwNUQsRUFBQXpRLEtBQ0E0ZixXQUFBLFdBQ0EsR0FBQWhnQixFQUFBc1YsZ0JBQUF6RSxFQUFBLENBQ0EsSUFBQXE1RCxFQUFBdk8sRUFBQTlxRCxHQUNBLEdBQUFvNUQsSUFBQTFYLEVBQUEyWCxFQUFBOWxFLElBQUE4bEUsRUFBQTNOLE1BQUEyTixFQUFBM04sTUFBQTJOLEVBQUE5bEUsS0FDQThsRSxFQUFBM04sUUFBQTJOLEVBQUE5bEUsSUFBQSxPQUFBNnpCLEVBQUFreUMsc0JBQ0EsSUFBQSxPQUNBLE1BRUEsSUFBQSxhQUNBLEdBeEJBLFNBQUFDLEdBQ0EsR0FBQSxLQUFBbnlDLEVBQUEybEMsV0FBQSxDQUNBLElBQUFSLEVBQUFoSSxJQUFBckIsZUFDQSxHQUFBcUosRUFBQWdOLEtBQUFobEUsR0FBQWc0RCxFQUFBZ04sR0FBQXY1RCxRQUFBMGtELEVBQUE2VSxHQUFBLENBQ0EsR0FBQUEsRUFBQW5NLEdBQUEsR0FBQSxPQUFBLEVBQ0EsSUFBQW9NLEVBQUF6Z0MsRUFBQS9pQyxRQUFBb3hCLEVBQUEybEMsV0FBQXRDLEtBQ0EsSUFBQSxJQUFBK08sRUFBQSxDQUNBLElBQUEsSUFBQWpNLEtBQUFoQixFQUFBLEdBQUFpTixFQUFBak0sR0FBQWhCLEVBQUFnQixHQUFBdnRELFFBQUEwa0QsRUFBQTZJLEdBQUEsT0FBQSxFQUNBLE9BQUEsSUFJQSxPQUFBLEVBWUFrTSxDQUFBSixFQUFBM04sT0FBQSxDQUNBLElBQUE4TixFQUFBL08sSUFBQXR0RCxLQUFBLElBQUFuTixRQUFBbzNCLEVBQUEybEMsWUFDQWpDLEVBQUE5cUQsRUFBQW9uQixFQUFBdTZCLGFBQUF5TCxFQUFBb00sR0FBQUEsR0FDQSxNQUdBLFFBQ0EsSUFBQUUsRUFBQUwsRUFBQTNOLE1BQUFpTyxFQUFBclYsRUFBQW9WLEdBQUEsR0FBQUUsRUFBQXhNLEVBQUF1TSxHQUNBLEdBQUFELEVBQUFFLEVBQUE5TyxFQUFBOXFELEVBQUFpbUQsRUFBQXlULEdBQUEsSUFBQXpULEVBQUF5VCxFQUFBLEdBQUEsR0FBQUEsRUFBQXRNLEVBQUFzTSxRQUFBLENBQ0EsSUFBQXJWLEVBQUFFLElBQUFyQixlQUFBeVcsR0FBQUUsRUFBQWxWLEVBQUFpVixFQUFBdlYsRUFBQUEsRUFBQWxvRCxNQUFBcW9ELFFBQUFqd0QsRUFBQTh2RCxHQUFBNUIsRUFBQWlDLEVBQUFrVixFQUFBQyxFQUFBMTlELE9BQ0EsR0FBQSxLQUFBc21ELEdBQUFnSSxJQUFBbVAsS0FBQW5YLElBQUEsSUFBQW9YLEVBQUExOUQsTUFBQXdxRCxxQkFBQSxJQUFBa1QsRUFBQTE5RCxNQUFBeXFELGlCQUFBWCxFQUFBMlQsR0FBQSxJQUFBQyxFQUFBMTlELE1BQUEyb0QsTUFBQXJDLEVBQUEsQ0FDQSxJQUFBaEksRUFBQTJTLEVBQUF3TSxJQUNBRixHQUFBamYsR0FBQWlmLElBQUFFLEtBQUFBLEVBQUFuZixHQUVBcVEsRUFBQTlxRCxFQUFBNDVELE9BSUEsSUFFQUUsY0FBQSxTQUFBaCtELEdBQ0EsSUFBQWtFLEVBQUF6USxLQUNBNGYsV0FBQSxXQUNBMjdDLEVBQUE5cUQsRUFBQSxFQUFBb3RELEVBQUE5SSxPQUNBLElBRUF5VixTQUFBLFNBQUFqK0QsR0FDQSxJQUFBdzZELEVBQUF2OUIsRUFBQXhwQyxNQUFBNDFCLEVBQUEybEMsRUFBQXY3RCxNQUFBb21FLEVBQUE3NUQsRUFBQWdlLGVBQUFoZSxFQUFBKzdELEVBQUF2b0UsRUFBQXVvRSxlQUFBbEMsRUFBQWtDLGNBQUFtQyxFQUFBdFksRUFBQStJLElBQUE1NkQsTUFBQXMxQixFQUFBNXhCLElBQUE0eEIsRUFBQXVtQyxPQUFBakIsSUFBQTU2RCxNQUFBczFCLEVBQUF1bUMsTUFBQXZtQyxFQUFBNXhCLEtBQ0Fza0UsRUFBQW9DLFFBQUEsT0FBQXZZLEVBQUFzWSxFQUFBMXVELFVBQUFuTyxLQUFBLElBQUE2OEQsRUFBQTc4RCxLQUFBLEtBQ0FoTyxFQUFBK3FFLGFBQUEvcUUsRUFBQStxRSxZQUFBLFFBQUFqTixFQUZBMTlELEtBRUEyeEQsRUFBQXRsQyxRQUFBc3hDLE9BQUEvbkMsR0FDQW1xQyxFQUhBLy9ELEtBR0FrN0QsSUFBQWxHLElBQUE5K0IsRUFBQTNwQixFQUFBczVELElBQUEzSyxJQUFBdHRELEtBQUEsS0FIQTVOLEtBSUFtZ0UsVUFBQTJDLGNBQUE3SCxJQUFBcnRELEtBQUEsS0FBQW01RCxFQUFBcDhDLFFBQUEsWUFFQWlnRCxVQUFBLFNBQUFyK0QsR0FDQSxJQUFBdzZELEVBQUF2OUIsRUFBQXhwQyxNQUNBLEdBREFBLEtBQ0FtZ0UsVUFBQSxDQUNBLElBQUFxSixFQUZBeHBFLEtBRUFtZ0UsVUFBQTJDLFlBQUFqUCxFQUFBcUgsSUFBQTU2RCxRQUNBLEtBQUFrcEUsSUFBQTN4QyxFQUFBd3hDLHdCQUFBLElBQUF0VSxLQUFBeVUsSUFBQXZPLElBQUFydEQsS0FBQSxJQUFBaW1ELEtBQUFrUSxFQUFBbFEsS0FDQSxJQUFBalUsRUFBQWlVLEtBQUFqMEMsV0FBQSxXQUNBbW5ELEVBQUFwOEMsUUFBQSxlQUNBLEdBQUFrTixFQUFBeXhDLGtCQUFBOVQsSUFBQTNCLEVBQUFoOEIsRUFBQXd4Qyx3QkFBQXBPLElBQUEzNkQsVUFDQXkvRCxFQVBBLy9ELEtBT0E2ekQsRUFBQTd1RCxFQUFBdUgsSUFBQXM1RCxJQUFBM0ssSUFBQXR0RCxLQUFBLE1BQUFpNEQsRUFBQWhTLEVBQUFqbUQsS0FBQSxJQUNBbTVELEVBQUFwOEMsUUFBQSxhQUdBa2dELGdCQUFBLFNBQUF0K0QsR0FFQXk1RCxHQUFBLEVBQUFwbUUsRUFBQXNWLGdCQURBbFYsTUFDQTYzQixFQUFBNnhDLGlCQURBMXBFLEtBQ0FtZ0UsVUFBQTJDLGNBQUE1SCxJQUFBdHRELEtBQUEsS0FBQW15RCxFQURBLy9ELEtBQ0FrN0QsTUFFQTRQLFlBQUEsU0FBQXYrRCxHQUNBczVELElBQUEzSyxJQUFBdHRELEtBQUEsS0FBQTJ0QyxFQUFBNXdCLFFBQUEsVUFBQWtOLEVBQUF3eEMsdUJBQUEsSUFBQXRVLEtBQUF2bUQsRUFBQTJ4RCxVQUFBMkMsV0FBQXQwRCxFQUFBMnhELFVBQUEyQyxjQUFBN0gsSUFBQXJ0RCxLQUFBLEtBQUFZLEVBQUEyeEQsVUFBQUMsVUFBQSxJQUNBdm9DLEVBQUFrekMscUJBQUF2OEQsRUFBQTJ4RCxVQUFBQyxVQUFBNXhELEVBQUEyeEQsVUFBQXVCLGlCQUFBLEdBQ0E5aEQsV0FBQSxXQUNBbWdELEVBQUF2eEQsRUFBQTBzRCxNQUNBLEtBRUE4UCxXQUFBLFNBQUF6K0QsR0FDQWlDLEVBQUEyeEQsVUFBQXBPLGNBQUEsRUFBQW55QyxXQUFBLFdBQ0EyN0IsRUFBQTV3QixRQUFBLGFBQ0EsS0FHQWduQyxFQUFBbnZELFVBQUFvakUsa0JBQUEsU0FBQW4xRCxFQUFBazBELEdBQ0FsMEQsRUFBQWdULE1BQUFtUixLQUFBK3ZDLEVBQUFHLFdBQUEsTUFFQSxJQUFBbUcsR0FDQSxHQUFBM1csSUFBQXR2RCxFQUFBLE9BQUFzdkQsRUFBQWxILFFBQ0EsSUFBQSxhQUNBLE9BQUE1K0MsRUFBQThsRCxFQUFBOWxELEdBQUFveEMsRUFBQXNiLEtBRUEsSUFBQSxnQkFDQSxPQUFBMXNELElBQUF4SixHQUFBc3ZELEVBQUF0dEQsUUFBQWhDLElBQUFpbUUsR0FBQTNXLEVBQUF0dEQsTUFDQWlrRSxJQUFBemhDLEVBQUE1a0MsV0FBQWl6QixFQUFBdXhDLGNBQUF2eEMsRUFBQXV4QyxhQUFBcG9FLEtBQUFtL0QsRUFBQThLLEdBQUFwekMsSUFBQW96QyxHQUFBQSxJQUFBeGpFLE1BQUEsSUFDQWs1RCxFQUFBMzdELEdBQUEsR0FBQSxFQUFBbXRELEVBQUE4WSxHQUFBbHZELFVBQUFrdkQsSUFBQXpoQyxFQUFBNWtDLFdBQUFpekIsRUFBQXFvQyxnQkFBQXJvQyxFQUFBcW9DLGNBQUFsL0QsS0FBQW0vRCxFQUFBbjdELEVBQUFrMkQsSUFBQSxFQUFBcmpDLElBQ0E2cEMsRUFBQWx6RCxHQUVBLElBQUEsUUFDQSxTQUFBakwsR0FDQTBpRSxHQUFBbCtDLElBQUF4a0IsR0FDQSxJQUFBMmpFLEVBQUEsU0FBQXoyRCxFQUFBb25CLEdBQ0EsSUFBQXF6QyxFQUFBejZELEVBQUFoRCxhQUFBLFFBQUF5NUQsRUFBQSxVQUFBejJELEVBQUEraUMsVUFBQSxJQUFBaEssRUFBQS9pQyxRQUFBeWtFLEVBQUFyekMsRUFBQXN6QyxvQkFBQTE2RCxFQUFBMjZELG1CQUFBLGFBQUEzNkQsRUFBQStpQyxRQUNBLElBQUEwekIsRUFBQSxHQUFBLFVBQUF6MkQsRUFBQStpQyxRQUFBLENBQ0EsSUFBQWhsQyxFQUFBNU8sRUFBQTBCLGNBQUEsU0FDQWtOLEVBQUFkLGFBQUEsT0FBQXc5RCxHQUFBaEUsRUFBQSxTQUFBMTRELEVBQUE5SSxLQUFBOEksRUFBQSxVQUNBMDRELEVBQUEsVUFDQSxPQUFBLElBQUFBLEVBQUEsU0FBQW1FLEdBQ0EsU0FBQW53QyxJQUNBLE9BQUFsN0IsS0FBQW1nRSxVQUFBbmdFLEtBQUFtZ0UsVUFBQXRvQyxLQUFBcXBDLFdBQUFsaEUsS0FBQW1nRSxVQUFBdUIsaUJBQUEsSUFBQTNNLE1BQUEsSUFBQWw5QixFQUFBeXpDLFNBQUExckUsRUFBQXNWLGdCQUFBbFYsTUFBQTYzQixFQUFBd3hDLHNCQUFBbFgsRUFBQTRSLEVBQUE3SSxJQUFBNTZELFNBQUF5YixVQUFBZ29ELEVBQUE3SSxJQUFBNTZELFVBQUFzTixLQUFBLElBQUEyOUQsRUFBQXZxRSxLQUFBaEIsTUFBQSxHQUFBdXJFLEVBQUF2cUUsS0FBQWhCLE1BRUEsU0FBQWdqQixFQUFBaGMsR0FDQXdrRSxFQUFBeHFFLEtBQUFoQixLQUFBZ0gsR0FBQWhILEtBQUFtZ0UsV0FBQTMyQixFQUFBeHBDLE1BQUEycUIsUUFBQSxZQUVBLElBQUE0Z0QsRUFBQUMsRUFDQSxJQUFBSCxFQUFBbEwsVUFBQXNMLFdBQUEsQ0FDQSxJQUFBLElBQUE1ekMsRUFBQTZ6QyxnQkFBQSxDQUNBLEdBQUF0ckUsT0FBQXVyRSx5QkFBQSxDQUNBLG1CQUFBdnJFLE9BQUFDLGlCQUFBRCxPQUFBQyxlQUFBLFdBQUFxeEQsRUFBQSxPQUFBa2EsV0FBQSxTQUFBMXZELEdBQ0EsT0FBQUEsRUFBQTB2RCxXQUNBLFNBQUExdkQsR0FDQSxPQUFBQSxFQUFBeFosWUFBQUYsWUFFQSxJQUFBcXBFLEVBQUF6ckUsT0FBQUMsZUFBQUQsT0FBQXVyRSx5QkFBQXZyRSxPQUFBQyxlQUFBZ3JFLEdBQUEsU0FBQXJtRSxFQUNBNm1FLEdBQUFBLEVBQUFocEUsS0FBQWdwRSxFQUFBaHFELEtBQUEwcEQsRUFBQU0sRUFBQWhwRSxJQUNBMm9FLEVBQUFLLEVBQUFocUQsSUFBQXpoQixPQUFBdWhCLGVBQUEwcEQsRUFBQSxTQUNBeG9FLElBQUFxNEIsRUFDQXJaLElBQUFtQixFQUNBcEIsY0FBQSxLQUNBLFVBQUF5cEQsRUFBQTczQixVQUFBKzNCLEVBQUEsV0FDQSxPQUFBdnJFLEtBQUFvUyxhQUNBbzVELEVBQUEsU0FBQXhrRSxHQUNBaEgsS0FBQW9TLFlBQUFwTCxHQUNBNUcsT0FBQXVoQixlQUFBMHBELEVBQUEsU0FDQXhvRSxJQUFBcTRCLEVBQ0FyWixJQUFBbUIsRUFDQXBCLGNBQUEsVUFFQWhpQixFQUFBa3NFLGtCQUFBVCxFQUFBUyxpQkFBQSxXQUFBUCxFQUFBRixFQUFBUyxpQkFBQSxTQUNBTixFQUFBSCxFQUFBVSxpQkFBQSxTQUFBVixFQUFBVyxpQkFBQSxRQUFBOXdDLEdBQ0Ftd0MsRUFBQVksaUJBQUEsUUFBQWpwRCxJQUNBcW9ELEVBQUFsTCxVQUFBc0wsV0FBQUYsRUFBQUYsRUFBQWxMLFVBQUErTCxXQUFBVixFQUVBSCxFQUFBbEwsVUFBQTJDLFVBQUEsU0FBQXFKLEdBQ0EsT0FBQWhhLElBQUEsSUFBQWdhLEVBQUFaLEVBQUF2cUUsS0FBQWhCLEtBQUF3TyxJQUFBL0csTUFBQSxJQUFBc1UsVUFBQW5PLEtBQUEsSUFBQTI5RCxFQUFBdnFFLEtBQUFoQixLQUFBd08sS0FDQTY4RCxFQUFBbEwsVUFBQUMsVUFBQSxTQUFBcDVELEVBQUFtbEUsR0FDQVgsRUFBQXhxRSxLQUFBaEIsS0FBQXdPLEdBQUEsT0FBQXhILEdBQUFBLElBQUFoQyxFQUFBLElBQUEsSUFBQW1uRSxHQUFBaGEsRUFBQW5yRCxFQUFBUyxNQUFBLElBQUFzVSxVQUFBbk8sS0FBQSxJQUFBNUcsSUFDQXVrRSxJQUFBdm1FLElBQUF1bUUsRUFBQSxXQUNBLE9BQUF2ckUsS0FBQWdILE9BQ0F3a0UsRUFBQSxTQUFBeGtFLEdBQ0FoSCxLQUFBZ0gsTUFBQUEsR0FDQSxTQUFBdEIsR0FDQSxHQUFBOGpDLEVBQUEvTSxXQUFBK00sRUFBQS9NLFNBQUEvMkIsS0FBQVYsSUFBQSxJQUFBd2tDLEVBQUEvTSxTQUFBLzJCLEdBQUEwbUUsZ0JBQUEsQ0FDQSxJQUFBQyxFQUFBN2lDLEVBQUEvTSxTQUFBLzJCLElBQUE4akMsRUFBQS9NLFNBQUEvMkIsR0FBQTdDLElBQUEybUMsRUFBQS9NLFNBQUEvMkIsR0FBQTdDLElBQUEsU0FBQVUsR0FDQSxPQUFBQSxFQUFBeUQsT0FDQXNsRSxFQUFBOWlDLEVBQUEvTSxTQUFBLzJCLElBQUE4akMsRUFBQS9NLFNBQUEvMkIsR0FBQW1jLElBQUEybkIsRUFBQS9NLFNBQUEvMkIsR0FBQW1jLElBQUEsU0FBQXRlLEVBQUF5RCxHQUNBLE9BQUF6RCxFQUFBeUQsTUFBQUEsRUFBQXpELEdBRUFpbUMsRUFBQS9NLFNBQUEvMkIsSUFDQTdDLElBQUEsU0FBQVUsR0FDQSxHQUFBQSxFQUFBNDhELFVBQUEsQ0FDQSxHQUFBNThELEVBQUE0OEQsVUFBQXRvQyxLQUFBcXBDLFdBQUEsT0FBQTM5RCxFQUFBNDhELFVBQUF1QixnQkFDQSxJQUFBcnVELEVBQUFnNUQsRUFBQTlvRSxHQUNBLE9BQUEsSUFBQXd4RCxFQUFBL3ZELEVBQUFBLEVBQUF6QixFQUFBNDhELFVBQUFyTyxRQUFBNkIsa0JBQUEsSUFBQTk3QixFQUFBeXpDLFNBQUFqNEQsRUFBQSxHQUVBLE9BQUFnNUQsRUFBQTlvRSxJQUVBc2UsSUFBQSxTQUFBdGUsRUFBQXlELEdBQ0EsSUFBQXFNLEVBQUFrNUQsRUFBQS9pQyxFQUFBam1DLEdBQ0EsT0FBQThQLEVBQUFpNUQsRUFBQS9vRSxFQUFBeUQsR0FBQXpELEVBQUE0OEQsV0FBQW9NLEVBQUE1aEQsUUFBQSxZQUNBdFgsR0FFQSs0RCxnQkFBQSxJQXJCQSxDQXdCQWYsRUFBQTNsRSxNQUFBMmxFLEVBS0FBLEVBSkFwRixHQUFBditDLEdBQUEyakQsRUFBQSxhQUFBLFNBQUF2akQsR0FDQSxJQUFBaS9DLEVBQUF2OUIsRUFBQXhwQyxNQUNBQSxLQUFBbWdFLFVBQUEyQyxjQUFBNUgsSUFBQXR0RCxLQUFBLEtBQUFtNUQsRUFBQXA4QyxRQUFBLGVBSEEsSUFBQTBnRCxFQXBFQSxDQTJFQTU2RCxHQUFBQSxFQUFBMHZELFVBQUFuN0QsRUFBQWtpRSxFQWpGQSxDQWtGQTNqRSxFQUFBczBCLEdBQ0EsSUFBQSxJQUFBcXZDLElBQUExNEQsRUFBQWpMLEVBQUFnNEMsRUFBQS9SLEVBQUFoN0IsSUFBQSxLQUFBOG1ELEVBQUE5bUQsSUFBQXhKLEVBQUF3SixFQUFBOG1ELFVBQUF0d0QsS0FBQXN3RCxFQUFBdHdELElBQ0EsSUFBQTZ5QixFQUFBZ3RDLFdBQUFKLEVBQUFqMkQsR0FBQTh4RCxJQUFBOXhELEVBQUEzTixlQUFBLGVBQUEyTixFQUFBZytELFVBQUEzMEMsRUFBQTIwQyxVQUNBaCtELEVBQUFkLGFBQUEsWUFBQW1xQixFQUFBMjBDLFlBQUEsU0FBQTMwQyxFQUFBNDBDLGVBQUEsSUFBQTUwQyxFQUFBZ3RDLFdBQUFKLEVBQUFqMkQsR0FDQUEsRUFBQTlJLEtBQUEsY0FBQSxJQUFBd2hFLElBQUFqQixHQUFBditDLEdBQUFsWixFQUFBLFNBQUE4eUQsR0FBQXdKLGFBQ0E3RSxHQUFBditDLEdBQUFsWixFQUFBLFFBQUE4eUQsR0FBQTBKLFlBQUEvRSxHQUFBditDLEdBQUFsWixFQUFBLGFBQUE4eUQsR0FBQXVKLGlCQUNBNUUsR0FBQXYrQyxHQUFBbFosRUFBQSxPQUFBOHlELEdBQUFzSixXQUFBM0UsR0FBQXYrQyxHQUFBbFosRUFBQSxRQUFBOHlELEdBQUFpSSxZQUNBdEQsR0FBQXYrQyxHQUFBbFosRUFBQSxhQUFBOHlELEdBQUFzSSxrQkFBQSxJQUFBL3hDLEVBQUFndEMsV0FBQW9CLEdBQUF2K0MsR0FBQWxaLEVBQUEsUUFBQTh5RCxHQUFBa0UsWUFDQVMsR0FBQXYrQyxHQUFBbFosRUFBQSxXQUFBOHlELEdBQUFpSixlQUFBdEUsR0FBQXYrQyxHQUFBbFosRUFBQSxRQUFBOHlELEdBQUE0RyxZQUNBakMsR0FBQXYrQyxHQUFBbFosRUFBQSxXQUFBOHlELEdBQUE0RyxZQUFBakMsR0FBQXYrQyxHQUFBbFosRUFBQSxPQUFBOHlELEdBQUE0RyxZQUNBakMsR0FBQXYrQyxHQUFBbFosRUFBQSxNQUFBOHlELEdBQUFrSixVQUFBdkUsR0FBQXYrQyxHQUFBbFosRUFBQSxXQUFBcXBCLEVBQUE2MEMsWUFDQXpHLEdBQUF2K0MsR0FBQWxaLEVBQUEsYUFBQXFwQixFQUFBODBDLGNBQUExRyxHQUFBditDLEdBQUFsWixFQUFBLFVBQUFxcEIsRUFBQSswQyxXQUNBdE0sSUFBQSxJQUFBem9DLEVBQUFnMUMsZUFBQXIrRCxFQUFBUixnQkFBQSxjQUFBaTRELEdBQUF2K0MsR0FBQWxaLEVBQUEsVUFBQTh5RCxHQUFBd0YsY0FDQWIsR0FBQXYrQyxHQUFBbFosRUFBQSxXQUFBOHlELEdBQUFDLGdCQUFBMEUsR0FBQXYrQyxHQUFBbFosRUFBQSxtQkFBQWc3QixFQUFBaGtDLE1BQ0F5Z0UsR0FBQXYrQyxHQUFBbFosRUFBQSxvQkFBQWc3QixFQUFBaGtDLE1BQUF5Z0UsR0FBQXYrQyxHQUFBbFosRUFBQSxpQkFBQWc3QixFQUFBaGtDLE1BQ0F5Z0UsR0FBQXYrQyxHQUFBbFosRUFBQSxRQUFBZzdCLEVBQUFoa0MsTUFBQXlnRSxHQUFBditDLEdBQUFsWixFQUFBLFFBQUE4eUQsR0FBQW9ILG9CQUNBekMsR0FBQXYrQyxHQUFBbFosRUFBQSxjQUFBZzdCLEVBQUFoa0MsT0FBQXlnRSxHQUFBditDLEdBQUFsWixFQUFBLFdBQUE4eUQsR0FBQUssZUFDQWtFLEVBQUE1SyxJQUFBcnRELEtBQUEsSUFBQSxLQUFBWSxFQUFBMnhELFVBQUEyQyxXQUFBLEtBQUEsSUFBQWpyQyxFQUFBd3hDLHNCQUFBenBFLEVBQUFzVixnQkFBQTFHLEdBQUEsQ0FDQSxJQUFBcytELEVBQUF0akMsRUFBQTVrQyxXQUFBaXpCLEVBQUF1eEMsY0FBQXZ4QyxFQUFBdXhDLGFBQUFwb0UsS0FBQW0vRCxFQUFBM3hELEVBQUEyeEQsVUFBQTJDLFdBQUEsR0FBQWpyQyxJQUFBcnBCLEVBQUEyeEQsVUFBQTJDLFdBQUEsR0FBQXQwRCxFQUFBMnhELFVBQUEyQyxXQUFBLEdBQ0EsS0FBQWdLLEdBQUFuTSxFQUFBbnlELEdBQUEsR0FBQSxFQUFBMmpELEVBQUEyYSxFQUFBcmxFLE1BQUEsSUFBQXNVLFVBQUErd0QsRUFBQXJsRSxNQUFBLEtBQ0EsSUFBQW9zRCxFQUFBcUgsSUFBQTU2RCxRQUNBdWxFLEVBQUFoUyxFQUFBam1ELEtBQUEsS0FBQSxJQUFBZ3lDLEVBQUFpVSxJQUFBaDhCLEVBQUF5eEMsaUJBQUE5VCxJQUNBMzlCLEVBQUF3eEMsc0JBQUF6cEUsRUFBQXNWLGdCQUFBMUcsS0FBQSxJQUFBdW1ELElBQUFsQixLQUFBa1EsRUFBQWxRLElBQ0FrTSxFQUFBdnhELEVBQUFxbEQsR0FBQWowRCxFQUFBc1YsZ0JBQUExRyxHQUFBK3NELEVBQUEvc0QsRUFBQXF2RCxFQUFBOUksT0EzR0EsQ0E2R0F2bUQsR0FDQSxNQUVBLElBQUEsU0FDQSxPQUFBeThELElBQUF6aEMsRUFBQTVrQyxXQUFBaXpCLEVBQUF1eEMsY0FBQXZ4QyxFQUFBdXhDLGFBQUFwb0UsS0FBQW0vRCxFQUFBN0wsRUFBQXR0RCxNQUFBNndCLElBQUF5OEIsRUFBQXR0RCxNQUFBc3RELEVBQUF0dEQsT0FBQVMsTUFBQSxJQUNBazVELEVBQUEzN0QsR0FBQSxHQUFBLEVBQUFtdEQsRUFBQThZLEdBQUFsdkQsVUFBQWt2RCxJQUFBM1csRUFBQXpCLFVBQ0E3ckQsTUFBQW1yRCxFQUFBK0ksSUFBQTU2RCxRQUFBeWIsVUFBQW5PLEtBQUEsSUFBQXN0RCxJQUFBdHRELEtBQUEsSUFDQWlsRCxTQUFBd0IsRUFBQXJ6RCxLQUFBaEIsTUFDQW90RCxPQUFBLGVBQ0EwRSxFQUFBajZCLElBQ0FzNkIsRUFBQStJLElBQUE1NkQsUUFBQXliLFVBQUFuTyxLQUFBLElBQUFzdEQsSUFBQXR0RCxLQUFBLElBRUEsSUFBQSxVQUNBMG1ELEVBQUF0dEQsT0FBQWlrRSxHQUFBM1csRUFBQXR0RCxNQUFBUyxNQUFBLElBQUFrNUQsRUFBQTM3RCxHQUFBLEdBQUEsRUFBQW10RCxFQUFBOFksR0FBQWx2RCxVQUFBa3ZELEtBQUEzVyxFQUFBdHRELE1BQUFrMEQsSUFBQXR0RCxLQUFBLElBQ0EsSUFBQSxJQUFBaW1ELEdBQUFxSCxJQUFBOEksR0FBQU4sSUFBQXFKLEdBQUFsWixHQUFBbHhELE9BQUEsRUFBQW9xRSxHQUFBL0ksS0FBQXROLEVBQUFxVyxJQUFBQSxNQUNBLE9BQUFsWixHQUFBM3ZELE9BQUE4L0QsR0FBQStJLEdBQUEsRUFBQS9JLElBQUFwa0IsRUFBQWlVLEtBQUFTLEVBQUF0dEQsUUFBQWswRCxJQUFBdHRELEtBQUEsSUFFQSxJQUFBLGVBQ0EsT0FBQXF0RCxJQUFBcnRELEtBQUEsSUFFQSxJQUFBLFNBV0EsT0FWQVksR0FBQUEsRUFBQTJ4RCxZQUNBNWtCLEVBQUEvUixFQUFBaDdCLEdBQUFBLEVBQUEyeEQsVUFBQUMsVUFBQXZvQyxFQUFBcXBDLFdBQUFRLEVBQUFsekQsR0FBQUEsRUFBQTJ4RCxVQUFBMkMsV0FBQSxJQUNBbUQsR0FBQWwrQyxJQUFBdlosR0FDQXBPLE9BQUF1ckUsMEJBQUF2ckUsT0FBQUMsZUFBQUQsT0FBQXVyRSx5QkFBQXZyRSxPQUFBQyxlQUFBbU8sR0FBQSxVQUFBQSxFQUFBMnhELFVBQUFzTCxZQUFBcnJFLE9BQUF1aEIsZUFBQW5ULEVBQUEsU0FDQTNMLElBQUEyTCxFQUFBMnhELFVBQUFzTCxXQUNBNXBELElBQUFyVCxFQUFBMnhELFVBQUErTCxXQUNBdHFELGNBQUEsSUFDQWhpQixFQUFBa3NFLGtCQUFBdDlELEVBQUFzOUQsaUJBQUEsVUFBQXQ5RCxFQUFBMnhELFVBQUFzTCxhQUFBajlELEVBQUF3OUQsaUJBQUEsUUFBQXg5RCxFQUFBMnhELFVBQUFzTCxZQUNBajlELEVBQUF5OUQsaUJBQUEsUUFBQXo5RCxFQUFBMnhELFVBQUErTCxhQUFBMTlELEVBQUEyeEQsVUFBQW43RCxHQUVBd0osRUFFQSxJQUFBLGNBQ0EsR0FBQWc3QixFQUFBemtDLFFBQUErc0QsRUFBQWUsVUFBQSxDQUNBLElBQUFtYSxHQUFBelksR0FBQSxFQUFBLEdBQUEsR0FBQTNtRCxLQUFBLElBQ0EsT0FBQTQ3QixFQUFBcG1DLEtBQUEwdUQsRUFBQWUsU0FBQSxTQUFBcUIsRUFBQStZLEdBQ0EsR0FBQUEsRUFBQXhhLE9BQUF1YSxHQUFBLE9BQUFBLEdBQUFDLEdBQUEsSUFDQUQsR0FFQSxPQUFBbGIsRUFBQWUsVUFHQSxJQUFBcWEsRUFBQXh3QixVQUFBQyxVQUFBakQsRUFBQSxVQUFBbnNDLEtBQUEyL0QsR0FBQXpHLEVBQUEsWUFBQWw1RCxLQUFBMi9ELEdBQUF4RyxFQUFBLFVBQUFuNUQsS0FBQTIvRCxLQUFBekcsRUFBQW5HLEVBQUEsV0FBQS95RCxLQUFBMi9ELEtBQUF6RyxFQUNBLE9BQUE5VSxFQUFBbnZELFdBQ0EycUUsY0FBQSxpQkFDQXpqQyxVQUNBd3BCLFlBQUEsSUFDQWthLGdCQUNBdDVELE1BQUEsSUFDQTlQLElBQUEsS0FFQXF2RCxrQkFDQXYvQyxNQUFBLElBQ0E5UCxJQUFBLEtBRUFvdkQsYUFDQXQvQyxNQUFBLElBQ0E5UCxJQUFBLEtBRUFvd0QsaUJBQUEsSUFDQWlaLFdBQUEsS0FDQTVhLEtBQUEsS0FDQU0sTUFBQSxLQUNBMlosV0FBQWxqQyxFQUFBaGtDLEtBQ0FtbkUsYUFBQW5qQyxFQUFBaGtDLEtBQ0FvbkUsVUFBQXBqQyxFQUFBaGtDLEtBQ0F5dEQsT0FBQSxFQUNBRCxRQUFBLEVBQ0FrTyxZQUFBLEVBQ0E2SixvQkFBQSxFQUNBMUIsc0JBQUEsRUFDQXRNLFlBQUEsRUFDQXVNLGlCQUFBLEVBQ0ExWCxNQUFBLEtBQ0FnVyxVQUFBcCtCLEVBQUFoa0MsS0FDQTRqRSxhQUFBLEtBQ0FYLGNBQUEsU0FBQTZFLEVBQUF6MUMsR0FDQSxPQUFBMlIsRUFBQTVrQyxXQUFBaXpCLEVBQUF1eEMsY0FBQXZ4QyxFQUFBdXhDLGFBQUFwb0UsS0FBQWhCLEtBQUFzdEUsRUFBQXoxQyxHQUFBeTFDLEdBRUFwTixjQUFBLEtBQ0E0QixTQUFBLEtBQ0EySCxpQkFBQSxFQUNBQyxpQkFBQSxFQUNBekIsZ0JBQUF6K0IsRUFBQWhrQyxLQUNBNjFELDBCQUFBLElBQ0FqSixjQUFBLEVBQ0FtYixZQUFBLEVBQ0FoRyxjQUFBLEVBQ0EvSixXQUFBLEdBQ0FELDJCQUFBdjRELEVBQ0F3L0QsZUFBQSxHQUNBeFEsV0FBQSxLQUNBMlYsb0JBQUEsRUFDQXBELFlBQUEsRUFDQTRFLG1CQUFBLE9BQUEsTUFBQSxZQUNBdEQsWUFBQSxFQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLEVBQUEsS0FDQWpvQixXQUFBLEtBQ0E2VyxpQkFBQWp0QixFQUFBaGtDLEtBQ0FpNEQsY0FBQSxLQUNBaUMsZUFBQSxLQUNBOE4sdUJBQUF4b0UsRUFDQXF3RCxZQUFBLEVBQ0FpVyxVQUFBLEVBQ0F1QixnQkFBQSxFQUNBbkIsaUJBQUEsRUFDQTNCLHFCQUFBLE1BQ0EvTyxPQUFBLEtBQ0F3UixVQUFBLFdBQ0EzSCxXQUFBLEVBQ0E0SCxhQUFBLEVBQ0FnQixzQkFBQSxHQUVBeGIsYUFDQXliLEdBQ0FDLFVBQUEsV0FDQTVTLFlBQUEsRUFDQTZTLGlCQUFBLEtBRUF6a0UsR0FDQXdrRSxVQUFBLG9CQUNBNVMsWUFBQSxFQUNBNlMsaUJBQUEsS0FFQXQxQyxLQUNBcTFDLFVBQUEsMEJBQ0E1UyxZQUFBLElBR0F2SSxXQUNBZ0IsY0FDQWYsS0FBQSxTQUFBenZELEdBK0JBLElBQUFrYyxFQUFBbGYsS0FDQSxNQUFBLGlCQUFBZ0QsSUFBQUEsRUFBQXBELEVBQUFzTixlQUFBbEssSUFBQXBELEVBQUFrTyxpQkFBQTlLLElBQ0FBLEVBQUFBLEVBQUF3SyxVQUFBeEssR0FBQUEsRUFBQXdtQyxFQUFBcG1DLEtBQUFKLEVBQUEsU0FBQWt4RCxFQUFBMWxELEdBQ0EsSUFBQXEvRCxFQUFBcmtDLEVBQUFybEMsUUFBQSxLQUFBK2EsRUFBQTJZLE9BakNBLFNBQUF3ekMsRUFBQXh6QyxFQUFBcTZCLEVBQUFpYixHQUNBLElBQUEsSUFBQXQxQyxFQUFBNDFDLHFCQUFBLENBQ0EsSUFBQXBvRCxFQUFBeW9ELEVBQUFDLEVBQUE3M0MsRUFBQTgzQyxFQUFBLFNBQUEzb0QsRUFBQTBvRCxHQUNBLFFBQUFBLEVBQUFBLElBQUEvb0UsRUFBQStvRSxFQUFBMUMsRUFBQTU5RCxhQUFBMC9ELEVBQUEsSUFBQTluRCxNQUFBLGlCQUFBMG9ELElBQUEsSUFBQTFvRCxFQUFBNWtCLFFBQUEsTUFBQXN0RSxFQUFBaHVFLEVBQUFndUUsR0FBQSxVQUFBQSxFQUFBQSxHQUFBLEVBQUEsU0FBQUEsSUFBQUEsR0FBQSxJQUNBN2IsRUFBQTdzQyxHQUFBMG9ELElBQ0FFLEVBQUE1QyxFQUFBNTlELGFBQUEwL0QsR0FDQSxHQUFBYyxHQUFBLEtBQUFBLElBQUFBLEVBQUFBLEVBQUE3b0UsUUFBQSxJQUFBMEUsT0FBQSxJQUFBLEtBQUEsS0FDQWdrRSxFQUFBeHJELEtBQUFDLE1BQUEsSUFBQTByRCxFQUFBLE1BQUFILEVBQUEsQ0FDQUMsRUFBQS9vRSxFQUNBLElBQUFreEIsS0FBQTQzQyxFQUFBLEdBQUEsVUFBQTUzQyxFQUFBeHVCLGNBQUEsQ0FDQXFtRSxFQUFBRCxFQUFBNTNDLEdBQ0EsT0FHQTgzQyxFQUFBLFFBQUFELEdBQUE3YixFQUFBTixPQUFBUyxFQUFBSCxFQUFBTixNQUFBTSxFQUFBcjZCLEdBQ0EsSUFBQXhTLEtBQUF3UyxFQUFBLENBQ0EsR0FBQWkyQyxFQUFBLENBQ0FDLEVBQUEvb0UsRUFDQSxJQUFBa3hCLEtBQUE0M0MsRUFBQSxHQUFBNTNDLEVBQUF4dUIsZ0JBQUEyZCxFQUFBM2QsY0FBQSxDQUNBcW1FLEVBQUFELEVBQUE1M0MsR0FDQSxPQUdBODNDLEVBQUEzb0QsRUFBQTBvRCxJQUdBdmtDLEVBQUFybEMsUUFBQSxFQUFBMHpCLEVBQUFxNkIsSUFBQSxRQUFBbVosRUFBQWwvRCxLQUFBMHJCLEVBQUEwMUMsY0FBQWxDLEVBQUE1bkQsTUFBQW1oRCxVQUFBLFVBQ0EsUUFBQXlHLEVBQUFsL0QsS0FBQTByQixFQUFBdTZCLGdCQUFBaVosRUFBQWwvRCxJQUFBLE1BQUFrL0QsRUFBQXI5RCxnQkFBQSxPQUNBNnBCLEVBQUFzNkIsT0FBQSxHQU1BK2IsQ0FBQTEvRCxFQUFBcS9ELEVBQUFya0MsRUFBQXJsQyxRQUFBLEtBQUErYSxFQUFBZ3pDLGFBQUFoekMsRUFBQWl1RCxlQUNBLElBQUFyYixFQUFBWSxFQUFBbWIsRUFBQTN1RCxFQUFBOHlDLGNBQ0FGLElBQUE5c0QsSUFBQXdKLEVBQUEyeEQsWUFBQW43RCxJQUFBd0osRUFBQTJ4RCxVQUFBdG9DLEtBQUFxcEMsWUFBQSxFQUNBMXlELEVBQUEyeEQsVUFBQXJqRCxVQUFBdE8sRUFBQTJ4RCxVQUFBLElBQUF4TyxFQUFBM3NELEVBQUFBLEdBQUEsR0FDQXdKLEVBQUEyeEQsVUFBQXRvQyxLQUFBZzJDLEVBQUFyL0QsRUFBQTJ4RCxVQUFBbk8sYUFBQTl5QyxFQUFBOHlDLGFBQUF4akQsRUFBQTJ4RCxVQUFBak8sWUFBQTFvQixFQUFBcmxDLFFBQUEsS0FBQSthLEVBQUFnekMsYUFDQTFqRCxFQUFBMnhELFVBQUFoTyxNQUFBMGIsRUFBQTFiLE9BQUEwYixFQUFBemIsYUFBQTVqRCxFQUFBMnhELFVBQUEzeEQsR0FBQUEsRUFDQUEsRUFBQTJ4RCxVQUFBck8sUUFBQUEsRUFBQXRvQixFQUFBMW5CLEtBQUF0VCxFQUFBLGtCQUFBcS9ELEdBQUF4WixFQUFBcnpELEtBQUF3TixFQUFBMnhELFdBQ0EvUyxPQUFBLFlBRUFwcUQsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFtOUQsV0FBQW5nRSxLQUFBQSxNQUVBcWxCLE9BQUEsU0FBQWpoQixFQUFBK3BFLEdBQ0EsTUFBQSxpQkFBQS9wRSxFQUFBcEUsS0FBQTYzQixLQUFBenpCLEdBQUEsaUJBQUEsSUFBQUEsRUFBQSxZQUFBc3RELEVBQUF0dEQsS0FBQW9sQyxFQUFBcmxDLE9BQUFuRSxLQUFBa3lELFlBQUE5dEQsR0FDQXBFLEtBQUF3TyxLQUFBLElBQUEyL0QsR0FBQW51RSxLQUFBeXlELEtBQUF6eUQsS0FBQXdPLElBQUF4TyxXQUFBLEdBRUEwaEUsY0FBQSxTQUFBMTZELEdBQ0EsT0FBQWhILEtBQUE4eEQsUUFBQTl4RCxLQUFBOHhELFNBQUFZLEVBQUExeUQsS0FBQTYzQixLQUFBNzNCLEtBQUFneUQsY0FDQXFDLEVBQUFyekQsS0FBQWhCLE1BQ0FvdEQsT0FBQSxnQkFDQXBtRCxNQUFBQSxLQUdBOFYsT0FBQSxXQUNBLE9BQUF1M0MsRUFBQXJ6RCxLQUFBaEIsTUFDQW90RCxPQUFBLFlBR0FnaEIsYUFBQSxXQUNBLE9BQUFwdUUsS0FBQTh4RCxRQUFBOXhELEtBQUE4eEQsU0FBQVksRUFBQTF5RCxLQUFBNjNCLEtBQUE3M0IsS0FBQWd5RCxjQUNBcUMsRUFBQXJ6RCxLQUFBaEIsTUFDQW90RCxPQUFBLGtCQUdBaWhCLGVBQUEsV0FDQSxPQUFBcnVFLEtBQUE2M0IsS0FBQXFwQyxZQUVBdGhCLFdBQUEsV0FDQSxPQUFBNS9DLEtBQUE4eEQsUUFBQTl4RCxLQUFBOHhELFNBQUFZLEVBQUExeUQsS0FBQTYzQixLQUFBNzNCLEtBQUFneUQsY0FDQXFDLEVBQUFyekQsS0FBQWhCLE1BQ0FvdEQsT0FBQSxnQkFHQWtoQixZQUFBLFdBQ0EsT0FBQXR1RSxLQUFBOHhELFFBQUE5eEQsS0FBQTh4RCxTQUFBWSxFQUFBMXlELEtBQUE2M0IsS0FBQTczQixLQUFBZ3lELGNBQ0FxQyxFQUFBcnpELEtBQUFoQixNQUNBb3RELE9BQUEsaUJBR0F3SixRQUFBLFNBQUE1dkQsR0FDQSxPQUFBaEgsS0FBQTh4RCxRQUFBOXhELEtBQUE4eEQsU0FBQVksRUFBQTF5RCxLQUFBNjNCLEtBQUE3M0IsS0FBQWd5RCxjQUNBcUMsRUFBQXJ6RCxLQUFBaEIsTUFDQW90RCxPQUFBLFVBQ0FwbUQsTUFBQUEsS0FHQSsrQyxPQUFBLFNBQUEvK0MsRUFBQTZyRCxHQUNBLE9BQUE3eUQsS0FBQTh4RCxRQUFBOXhELEtBQUE4eEQsU0FBQVksRUFBQTF5RCxLQUFBNjNCLEtBQUE3M0IsS0FBQWd5RCxjQUNBcUMsRUFBQXJ6RCxLQUFBaEIsTUFDQW90RCxPQUFBLFNBQ0FwbUQsTUFBQUEsRUFDQTZyRCxTQUFBQSxLQUdBYSxZQUFBLFNBQUFqQixFQUFBSyxFQUFBajdCLEdBQ0EsU0FBQTAyQyxFQUFBdlYsRUFBQUMsRUFBQWIsRUFBQWdCLEdBQ0FwNUQsS0FBQTZHLFdBQUE3RyxLQUFBd3VFLFVBQUF4VixJQUFBLEVBQUFoNUQsS0FBQXl1RSxpQkFBQSxFQUFBenVFLEtBQUFnNUQsUUFBQUEsSUFBQSxFQUNBaDVELEtBQUFpNUQsV0FBQUEsSUFBQSxFQUFBajVELEtBQUFvNEQsYUFBQUEsSUFBQSxFQUFBcDRELEtBQUFvNUQsYUFBQUEsSUFBQSxFQUNBcDVELEtBQUF5NkQsWUFDQXZaLElBQUEsRUFDQWp1QixJQUFBLEdBR0EsU0FBQXk3QyxFQUFBQyxFQUFBeHFCLEVBQUEveEIsR0FDQUEsRUFBQUEsSUFBQXB0QixFQUFBb3RCLEVBQUF1OEMsRUFBQTluRSxRQUFBbEUsT0FDQSxJQUFBNHpELEVBQUFvWSxFQUFBOW5FLFFBQUF1ckIsRUFBQSxHQUNBLEdBQUEwZ0MsRUFBQSxJQUFBM08sRUFBQTFqRCxRQUFBLE1BQUE0SyxHQUFBLGdCQUFBa0MsS0FBQTQyQyxJQUFBLE1BQUFBLEVBQUF3cUIsRUFBQTluRSxRQUFBM0MsT0FBQWt1QixJQUFBLEdBQ0Fyd0IsR0FBQSxJQUFBK0gsT0FBQXE2QyxFQUFBdHNCLEVBQUFtakMsT0FBQSxJQUFBLElBQ0FELFlBQUEsRUFDQTFFLFlBQUFzWSxFQUFBMVYsV0FDQTVCLGVBQUFkLElBQUF2eEQsR0FBQXV4RCxFQUFBaEIsTUFBQXBSLEVBQ0E2VyxPQUFBLEtBQ0F6RixJQUFBcFIsRUFDQStPLFlBQUFsdUQsRUFDQWt3RCxVQUFBL1EsS0FDQTk0QyxJQUFBODRDLEVBQUFBLEVBQUFBLEVBQUF4aEQsT0FBQSxJQUFBNm1DLEVBQUFwbUMsS0FBQStnRCxFQUFBMThDLE1BQUEsSUFBQSxTQUFBeXNELEVBQUEwRSxHQUNBckMsRUFBQW9ZLEVBQUE5bkUsUUFBQXVyQixFQUFBLEdBQUF1OEMsRUFBQTluRSxRQUFBM0MsT0FBQWt1QixJQUFBLEdBQ0Fyd0IsR0FBQSxLQUNBZzVELFlBQUEsRUFDQTFFLFlBQUFzWSxFQUFBMVYsV0FDQTVCLGVBQUFkLElBQUF2eEQsR0FBQXV4RCxFQUFBaEIsTUFBQXFELEdBQUEsT0FBQXJDLEVBQUF4MEQsR0FDQWk1RCxPQUFBLEtBQ0F6RixJQUFBMTlCLEVBQUEyMUMsd0JBQUE1VSxFQUNBMUYsWUFBQXI3QixFQUFBMjFDLHlCQUFBeG9FLEVBQUE0ekQsRUFBQTV6RCxFQUNBa3dELFVBQUEwRCxPQUVBdnRELEdBQUEsTUFBQSxDQUNBLElBQUF1akUsR0FBQS8yQyxFQUFBbzZCLFlBQUFwNkIsRUFBQW82QixZQUFBOU4sR0FBQW4vQyxJQUFBMnNELEVBQUFudkQsVUFBQXl2RCxZQUFBOU4sR0FDQSxHQUFBeXFCLElBQUF2akUsRUFBQSxDQUNBLElBQUEsSUFBQXdqRSxFQUFBRCxFQUFBRSxhQUFBQyxFQUFBRixFQUFBQSxFQUFBbHNFLE9BQUEsRUFBQWEsRUFBQSxFQUFBQSxFQUFBb3JFLEVBQUE3VCxZQUFBdjNELElBQUEsQ0FDQSxJQUFBc3JFLEVBQUFDLEdBQUF2ckUsRUFBQXFyRSxFQUFBcnJFLEVBQUEsTUFBQW1xRSxFQUFBbUIsRUFBQW5CLFVBQUE1UyxFQUFBK1QsRUFBQS9ULFlBQ0E0VCxFQUFBOW5FLFFBQUEzQyxPQUFBa3VCLElBQUEsR0FDQXJ3QixHQUFBNHJFLEVBQUEsaUJBQUFBLEVBQUEsSUFBQTdqRSxPQUFBNmpFLEVBQUE5MUMsRUFBQW1qQyxPQUFBLElBQUEsSUFBQSxJQUFBLFdBQ0FoN0QsS0FBQXVOLEtBQUFvZ0UsR0FDQSxJQUFBN2pFLE9BQUEsS0FDQWl4RCxZQUFBQSxHQUFBLEVBQ0ExRSxZQUFBc1ksRUFBQTFWLFdBQ0E1QixlQUFBZCxJQUFBdnhELEdBQUF1eEQsRUFBQWhCLE9BQUFxWixFQUFBaEIsa0JBQUF6cEIsR0FDQTZXLE9BQUE0VCxFQUFBNVQsT0FDQXpGLElBQUFxWixFQUFBaEIsa0JBQUF6cEIsRUFDQStPLFlBQUEwYixFQUFBMWIsWUFDQWdDLFVBQUEvUSxJQUNBb1MsRUFBQW9ZLEVBQUE5bkUsUUFBQXVyQixFQUFBLEdBRUF1OEMsRUFBQTluRSxRQUFBM0MsT0FBQWt1QixJQUFBLEdBQ0Fyd0IsR0FBQTZzRSxFQUFBakIsVUFBQSxpQkFBQWlCLEVBQUFqQixVQUFBLElBQUE3akUsT0FBQThrRSxFQUFBakIsVUFBQTkxQyxFQUFBbWpDLE9BQUEsSUFBQSxJQUFBLElBQUEsV0FDQWg3RCxLQUFBdU4sS0FBQXFoRSxFQUFBakIsV0FDQSxJQUFBN2pFLE9BQUEsS0FDQWl4RCxZQUFBNlQsRUFBQTdULFlBQ0ExRSxZQUFBc1ksRUFBQTFWLFdBQ0E1QixlQUFBZCxJQUFBdnhELEdBQUF1eEQsRUFBQWhCLE9BQUFxWixFQUFBaEIsa0JBQUF6cEIsR0FDQTZXLE9BQUE0VCxFQUFBNVQsT0FDQXpGLElBQUFxWixFQUFBaEIsa0JBQUF6cEIsRUFDQStPLFlBQUEwYixFQUFBMWIsWUFDQWdDLFVBQUEvUSxTQUVBd3FCLEVBQUE5bkUsUUFBQTNDLE9BQUFrdUIsSUFBQSxHQUNBcndCLEdBQUEsS0FDQWc1RCxZQUFBLEVBQ0ExRSxZQUFBc1ksRUFBQTFWLFdBQ0E1QixlQUFBZCxJQUFBdnhELEdBQUF1eEQsRUFBQWhCLE1BQUFwUixHQUFBLE9BQUFvUyxFQUFBeDBELEdBQ0FpNUQsT0FBQSxLQUNBekYsSUFBQTE5QixFQUFBMjFDLHdCQUFBcnBCLEVBQ0ErTyxZQUFBcjdCLEVBQUEyMUMseUJBQUF4b0UsRUFBQW0vQyxFQUFBbi9DLEVBQ0Frd0QsVUFBQS9RLElBQ0E5NEMsR0FBQSxHQUdBLFNBQUEyakUsRUFBQXZiLEdBQ0FBLEdBQUFBLEVBQUE1c0QsU0FBQTJpQyxFQUFBcG1DLEtBQUFxd0QsRUFBQTVzRCxRQUFBLFNBQUFxdEQsRUFBQTM2QyxHQUNBLElBQUEwMUQsRUFBQXhiLEVBQUE1c0QsUUFBQXF0RCxFQUFBLElBQ0ErYSxJQUFBanFFLEdBQUFpcUUsRUFBQXBvRSxVQUFBN0IsSUFBQSxJQUFBaXFFLEVBQUE3VyxlQUFBNytDLEdBQUFBLEVBQUF5L0MsVUFBQXovQyxFQUFBeS9DLFNBQUEsRUFDQWxHLElBQUE0YixFQUFBbjFELEVBQUFzZSxFQUFBdTdCLFlBQUF0L0MsTUFBQSxJQUFBLElBQUF5RixFQUFBaTFELFdBQUFFLEVBQUFuMUQsRUFBQXNlLEVBQUF1N0IsWUFBQXB2RCxPQUNBZ3JFLEVBQUF6MUQsS0FHQSxTQUFBMjFELElBQ0EsR0FBQUMsRUFBQXhzRSxPQUFBLEdBQ0EsR0FBQStyRSxFQUFBVSxFQUFBRCxFQUFBQSxFQUFBeHNFLE9BQUEsR0FBQStKLEdBQ0EwaUUsRUFBQWhXLGFBQUEsQ0FDQWlXLEVBQUFGLEVBQUE5bEUsTUFDQSxJQUFBLElBQUE4MUQsRUFBQSxFQUFBQSxFQUFBa1EsRUFBQXhvRSxRQUFBbEUsT0FBQXc4RCxJQUFBa1EsRUFBQXhvRSxRQUFBczRELEdBQUFuRyxTQUFBLEVBQ0FtVyxFQUFBeHNFLE9BQUEsR0FBQXlzRSxFQUFBRCxFQUFBQSxFQUFBeHNFLE9BQUEsSUFBQWtFLFFBQUFyRyxLQUFBNnVFLEdBQUFDLEVBQUF6b0UsUUFBQXJHLEtBQUE2dUUsU0FFQVgsRUFBQVksRUFBQTVpRSxHQUVBLFNBQUE2aUUsRUFBQTliLEdBQ0FBLEVBQUE1c0QsUUFBQTRzRCxFQUFBNXNELFFBQUFrVixVQUNBLElBQUEsSUFBQW5QLEtBQUE2bUQsRUFBQTVzRCxRQUFBLEdBQUE0c0QsRUFBQTVzRCxRQUFBaEcsZUFBQStMLEdBQUEsQ0FDQSxJQUFBNGlFLEVBQUEvekMsU0FBQTd1QixHQUNBLEdBQUE2bUQsRUFBQTVzRCxRQUFBK0YsR0FBQXdyRCxjQUFBM0UsRUFBQTVzRCxRQUFBMm9FLEVBQUEsSUFBQS9iLEVBQUE1c0QsUUFBQTJvRSxFQUFBLEdBQUF4VyxRQUFBLENBQ0EsSUFBQXVCLEVBQUE5RyxFQUFBNXNELFFBQUErRixHQUNBNm1ELEVBQUE1c0QsUUFBQTNDLE9BQUEwSSxFQUFBLEdBQUE2bUQsRUFBQTVzRCxRQUFBM0MsT0FBQXNyRSxFQUFBLEVBQUEsRUFBQWpWLEdBRUE5RyxFQUFBNXNELFFBQUErRixHQUFBL0YsVUFBQTdCLEVBQUF5dUQsRUFBQTVzRCxRQUFBK0YsR0FBQTJpRSxFQUFBOWIsRUFBQTVzRCxRQUFBK0YsSUFBQTZtRCxFQUFBNXNELFFBQUErRixJQUFBNmlFLEVBR0FoYyxFQUFBNXNELFFBQUErRixHQUZBNmlFLElBQUE1M0MsRUFBQXUxQyxlQUFBdDVELE1BQUEyN0QsRUFBQTUzQyxFQUFBdTFDLGVBQUFwcEUsSUFBQXlyRSxJQUFBNTNDLEVBQUF1MUMsZUFBQXBwRSxJQUFBeXJFLEVBQUE1M0MsRUFBQXUxQyxlQUFBdDVELE1BQUEyN0QsSUFBQTUzQyxFQUFBdTdCLFlBQUF0L0MsTUFBQTI3RCxFQUFBNTNDLEVBQUF1N0IsWUFBQXB2RCxJQUFBeXJFLElBQUE1M0MsRUFBQXU3QixZQUFBcHZELE1BQUF5ckUsRUFBQTUzQyxFQUFBdTdCLFlBQUF0L0MsT0FDQTI3RCxHQUZBLElBQUFBLEVBS0EsT0FBQWhjLEVBRUEsSUFBQTdtRCxFQUFBRixFQUFBZ2pFLEVBQUFOLEVBQUFDLEVBQUFNLEVBQUFDLEVBQUFDLEVBQUEsaUVBQUFDLEVBQUEsa05BQUF6a0UsR0FBQSxFQUFBaWtFLEVBQUEsSUFBQWYsRUFBQVksS0FBQXhVLEtBQ0EsSUFBQTdILElBQUFqN0IsRUFBQXUxQyxlQUFBdDVELE1BQUE5TyxFQUFBNnlCLEVBQUF1MUMsZUFBQXBwRSxJQUFBZ0IsR0FBQTRILEVBQUFrbUQsRUFBQWdkLEVBQUE3aUUsS0FBQXdsRCxHQUFBb2QsRUFBQTVpRSxLQUFBd2xELElBQUEsQ0FDQSxHQUFBL2xELEVBQUFFLEVBQUEsR0FBQWttRCxFQUFBLE9BQUFwbUQsRUFBQWl4QyxPQUFBLElBQ0EsSUFBQSxJQUNBanhDLEVBQUEsUUFDQSxNQUVBLElBQUEsSUFDQSxJQUFBLElBQ0FBLEVBQUEsSUFBQUEsRUFBQSxJQUVBLEdBQUFyQixFQUFBNmpFLFNBQUEsT0FBQXhpRSxFQUFBaXhDLE9BQUEsSUFDQSxLQUFBOWxCLEVBQUF3MUMsV0FDQWhpRSxHQUFBLEVBQUF5bkQsR0FBQW9jLElBQ0EsTUFFQSxLQUFBcjNDLEVBQUF1MUMsZUFBQXBwRSxJQUNBLEtBQUE2ekIsRUFBQXU3QixZQUFBcHZELElBQ0EsSUFBQTByRSxFQUFBUCxFQUFBOWxFLE9BQUFtbEUsV0FBQSxFQUFBa0IsSUFBQTFxRSxFQUFBLEdBQUFtcUUsRUFBQXhzRSxPQUFBLEdBQ0EsSUFBQXlzRSxFQUFBRCxFQUFBQSxFQUFBeHNFLE9BQUEsSUFBQWtFLFFBQUFyRyxLQUFBa3ZFLEdBQ0FOLEVBQUFoVyxhQUFBLENBQ0FpVyxFQUFBRixFQUFBOWxFLE1BQ0EsSUFBQSxJQUFBODFELEVBQUEsRUFBQUEsRUFBQWtRLEVBQUF4b0UsUUFBQWxFLE9BQUF3OEQsSUFBQWtRLEVBQUF4b0UsUUFBQXM0RCxHQUFBbkcsU0FBQSxFQUNBcVcsRUFBQXhvRSxRQUFBczRELEdBQUFzUCxpQkFBQSxFQUNBVSxFQUFBeHNFLE9BQUEsR0FBQXlzRSxFQUFBRCxFQUFBQSxFQUFBeHNFLE9BQUEsSUFBQWtFLFFBQUFyRyxLQUFBNnVFLEdBQUFDLEVBQUF6b0UsUUFBQXJHLEtBQUE2dUUsU0FFQUMsRUFBQXpvRSxRQUFBckcsS0FBQWt2RSxRQUFBUixJQUNBLE1BRUEsS0FBQXIzQyxFQUFBdTFDLGVBQUF0NUQsTUFDQXE3RCxFQUFBM3VFLEtBQUEsSUFBQSt0RSxHQUFBLEdBQUEsSUFDQSxNQUVBLEtBQUExMkMsRUFBQXU3QixZQUFBdC9DLE1BQ0FxN0QsRUFBQTN1RSxLQUFBLElBQUErdEUsR0FBQSxJQUNBLE1BRUEsS0FBQTEyQyxFQUFBdzdCLGlCQUFBdi9DLE1BQ0EsSUFBQTJtRCxFQUFBLElBQUE4VCxHQUFBLEdBQUEsR0FBQSxHQUFBd0IsR0FBQXJqRSxFQUFBQSxFQUFBdEgsUUFBQSxRQUFBLEtBQUFxQyxNQUFBLEtBQUF1b0UsRUFBQW5xRSxNQUFBa3FFLEVBQUEsSUFBQUEsRUFBQSxHQUFBdDBDLFNBQUFzMEMsRUFBQSxJQUFBRSxFQUFBLElBQUFGLEVBQUFwdEUsT0FBQXF0RSxFQUFBbnFFLE1BQUFrcUUsRUFBQSxJQUFBQSxFQUFBLEdBQUF0MEMsU0FBQXMwQyxFQUFBLElBQ0EsR0FBQSxNQUFBRSxHQUFBLE1BQUFBLElBQUFELEVBQUEsTUFBQUMsRUFBQSxFQUFBLEdBQUF4VixFQUFBQSxZQUNBdlosSUFBQTh1QixFQUNBLzhDLElBQUFnOUMsR0FDQWQsRUFBQXhzRSxPQUFBLEVBQUEsQ0FDQSxJQUFBa0UsRUFBQXNvRSxFQUFBQSxFQUFBeHNFLE9BQUEsR0FBQWtFLFNBQ0ErRixFQUFBL0YsRUFBQXdDLE9BQUEydkQsV0FBQTRXLEVBQUEsSUFBQXJCLEdBQUEsSUFBQTFuRSxRQUFBckcsS0FBQW9NLEdBQ0FBLEVBQUFnakUsR0FBQS9vRSxFQUFBckcsS0FBQW9NLEdBQUEvRixFQUFBckcsS0FBQWk2RCxRQUNBN3RELEVBQUEwaUUsRUFBQXpvRSxRQUFBd0MsT0FBQTJ2RCxVQUFBbEcsR0FBQSxPQUFBbG1ELEVBQUE3SyxJQUFBLE1BQUE2SyxFQUFBMm9ELE1BQUEzb0QsRUFBQTdLLEdBQUEsSUFBQStILE9BQUE4QyxFQUFBMm9ELElBQUExOUIsRUFBQW1qQyxPQUFBLElBQUEsTUFDQTRVLEVBQUEsSUFBQXJCLEdBQUEsSUFBQTFuRSxRQUFBckcsS0FBQW9NLEdBQUFBLEVBQUFnakUsR0FBQU4sRUFBQXpvRSxRQUFBckcsS0FBQW9NLEdBQ0EwaUUsRUFBQXpvRSxRQUFBckcsS0FBQWk2RCxHQUNBLE1BRUEsS0FBQTVpQyxFQUFBdThCLGlCQUNBLEdBQUErYSxFQUFBeHNFLE9BQUEsRUFBQSxDQUNBLElBQUF1dEUsR0FBQWQsRUFBQUQsRUFBQUEsRUFBQXhzRSxPQUFBLElBQUFrRSxRQUFBdW9FLEVBQUF2b0UsUUFBQWxFLE9BQUEsR0FDQWd0RSxFQUFBUCxFQUFBWixZQUFBMEIsRUFBQXJwRSxVQUFBN0IsSUFBQSxJQUFBa3JFLEVBQUFsWCxVQUFBLElBQUFrWCxFQUFBOVcsY0FBQStWLEVBQUE5bEUsTUFBQStsRSxFQUFBdm9FLFFBQUF3QyxXQUNBc21FLEVBQUFMLEVBQUF6b0UsUUFBQXdDLE1BQ0EsR0FBQXNtRSxFQUFBdlcsYUFBQStWLEVBQUEzdUUsS0FBQW12RSxRQUFBLEdBQUFBLEVBQUFsQixpQkFBQVksRUFBQUYsRUFBQTlsRSxNQUNBc21FLEVBQUFsQixpQkFBQSxHQUFBWSxFQUFBLElBQUFkLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQWMsRUFBQXhvRSxRQUFBckcsS0FBQW12RSxHQUNBUixFQUFBM3VFLEtBQUE2dUUsR0FBQU0sRUFBQW5CLFVBQUEsQ0FDQW1CLEVBQUFuQixXQUFBLEVBQ0EsSUFBQUMsRUFBQSxJQUFBRixHQUFBLEdBQ0FFLEVBQUFBLGlCQUFBLEVBQUFVLEVBQUEzdUUsS0FBQWl1RSxHQUVBLE1BRUEsUUFDQVMsS0FHQSxLQUFBQyxFQUFBeHNFLE9BQUEsR0FBQStzRSxFQUFBUCxFQUFBOWxFLE1BQUFpbUUsRUFBQXpvRSxRQUFBckcsS0FBQWt2RSxHQUNBLE9BQUFKLEVBQUF6b0UsUUFBQWxFLE9BQUEsSUFBQXFzRSxFQUFBTSxHQUFBM1UsRUFBQW42RCxLQUFBOHVFLEtBQ0F6M0MsRUFBQXU2QixjQUFBdjZCLEVBQUFzNkIsUUFBQW9kLEVBQUE1VSxFQUFBLElBQUFBLElBRUFoSixFQUFBd2UsZUFBQSxTQUFBL3JFLEdBQ0FvbEMsRUFBQXJsQyxRQUFBLEVBQUF3dEQsRUFBQW52RCxVQUFBa25DLFNBQUF0bEMsSUFDQXV0RCxFQUFBeWUsa0JBQUEsU0FBQUMsR0FDQTdtQyxFQUFBcmxDLFFBQUEsRUFBQXd0RCxFQUFBbnZELFVBQUF5dkQsWUFBQW9lLElBQ0ExZSxFQUFBMmUsY0FBQSxTQUFBMWUsR0FDQXBvQixFQUFBcmxDLFFBQUEsRUFBQXd0RCxFQUFBbnZELFVBQUFnd0QsUUFBQVosSUFDQUQsRUFBQTVMLE9BQUEsU0FBQS8rQyxFQUFBNUMsRUFBQXl1RCxHQUNBLE9BQUFsQixFQUFBdnRELEdBQUEyaEQsT0FBQS8rQyxFQUFBNnJELElBQ0FsQixFQUFBNGUsT0FBQSxTQUFBdnBFLEVBQUE1QyxHQUNBLE9BQUF1dEQsRUFBQXZ0RCxHQUFBczlELGNBQUExNkQsSUFDQTJxRCxFQUFBaUYsUUFBQSxTQUFBNXZELEVBQUE1QyxHQUNBLE9BQUF1dEQsRUFBQXZ0RCxHQUFBd3lELFFBQUE1dkQsSUFDQTJxRCxFQUFBNzBDLE9BQUEsU0FBQTlaLEdBQ0F3bUMsRUFBQXBtQyxLQUFBSixFQUFBLFNBQUFreEQsRUFBQTFsRCxHQUNBQSxFQUFBMnhELFdBQUEzeEQsRUFBQTJ4RCxVQUFBcmpELFlBRUE2MEMsRUFBQXlQLFlBQUEsU0FBQTlqQixHQUVBLE9BQUFBLEVBQUFsNEMsUUFBQSxJQUFBMEUsT0FBQSxPQURBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLEtBQUEsSUFBQSxLQUNBOEQsS0FBQSxPQUFBLElBQUEsT0FBQSxTQUNBK2pELEVBQUF0bEMsU0FDQW1rRCxJQUFBLEdBQ0FsTSxVQUFBLEVBQ0EwQyxpQkFBQSxJQUNBeUosVUFBQSxHQUNBQyxNQUFBLElBQ0FDLFFBQUEsR0FDQUMsYUFBQSxHQUNBQyxjQUFBLEdBQ0FDLFFBQUEsR0FDQW5ULE9BQUEsR0FDQW9ULEtBQUEsR0FDQTVKLElBQUEsR0FDQVksTUFBQSxHQUNBUCxPQUFBLEdBQ0FILEtBQUEsR0FDQUksT0FBQSxHQUNBRSxLQUFBLEdBQ0FxSixLQUFBLEdBQ0FDLFdBQUEsSUFDQUMsZUFBQSxJQUNBQyxjQUFBLElBQ0FDLGFBQUEsSUFDQUMsZ0JBQUEsSUFDQUMsZ0JBQUEsSUFDQWxLLFVBQUEsR0FDQUUsUUFBQSxHQUNBaUssT0FBQSxJQUNBN0osTUFBQSxHQUNBOEosTUFBQSxHQUNBM1UsTUFBQSxHQUNBMkosSUFBQSxFQUNBaUwsR0FBQSxHQUNBQyxRQUFBLEdBQ0F6SyxFQUFBLElBQ0F0VixJQTdrREFKLEVBQUE5dEQsTUFBQTlELEVBQUE2eEQsR0FBQUQsS0FBQTd4RCxFQUFBQyxRQUFBOHhELElBK2tEQSxTQUFBL3hELEVBQUFDLEdBQ0FELEVBQUFDLFFBQUFpQyxRQUNBLFNBQUFsQyxFQUFBQyxFQUFBcXhELEdBQ0EsYUFDQSxTQUFBMmdCLEVBQUFsc0UsR0FDQSxPQUFBQSxHQUFBQSxFQUFBNHJELFdBQUE1ckQsR0FDQTZyRCxRQUFBN3JELEdBR0F1ckQsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQUNBQSxFQUFBLElBQUFBLEVBQUEsSUFDQSxJQUFBNGdCLEVBQUFELEVBQUEzZ0IsRUFBQSxJQUFBNmdCLEVBQUFGLEVBQUEzZ0IsRUFBQSxJQUFBOGdCLEVBQUFILEVBQUEzZ0IsRUFBQSxJQUNBNmdCLEVBQUF2Z0IsVUFBQXdnQixFQUFBeGdCLFNBQUFOLEVBQUEsSUFBQWp4RCxPQUFBNHhELFVBQUFpZ0IsRUFBQXRnQixTQUNBLFNBQUE1eEQsRUFBQUMsRUFBQXF4RCxHQUNBLElBQUFsMUMsRUFBQWsxQyxFQUFBLEdBQ0EsaUJBQUFsMUMsSUFBQUEsSUFBQXBjLEVBQUE4RCxFQUFBc1ksRUFBQSxNQUNBLElBQUExWCxHQUNBMnRFLEtBQUEsR0FFQTN0RSxFQUFBMHVDLGVBQUEsRUFDQWtlLEVBQUEsRUFBQUEsQ0FBQWwxQyxFQUFBMVgsR0FDQTBYLEVBQUFrMkQsU0FBQXR5RSxFQUFBQyxRQUFBbWMsRUFBQWsyRCxTQUNBLFNBQUF0eUUsRUFBQUMsRUFBQXF4RCxJQUNBdHhELEVBQUFDLFFBQUFxeEQsRUFBQSxFQUFBQSxNQUFBLElBQUF4d0QsTUFBQWQsRUFBQThELEVBQUEsMjZDQUFBLE1BQ0EsU0FBQTlELEVBQUFDLEdBQ0EsU0FBQXN5RSxFQUFBOTBCLEVBQUErMEIsR0FDQSxJQUFBcDJELEVBQUFxaEMsRUFBQSxJQUFBLEdBQUFnMUIsRUFBQWgxQixFQUFBLEdBQ0EsSUFBQWcxQixFQUFBLE9BQUFyMkQsRUFDQSxHQUFBbzJELEdBQUEsbUJBQUFFLEtBQUEsQ0FDQSxJQUFBQyxHQU9BQyxFQVBBSCxFQVFBLG1FQUFBQyxLQUFBRyxTQUFBaDBDLG1CQUFBamMsS0FBQWt3RCxVQUFBRixNQUFBLE9BUkFHLEVBQUFOLEVBQUFPLFFBQUFwdkUsSUFBQSxTQUFBK2YsR0FDQSxNQUFBLGlCQUFBOHVELEVBQUFRLFdBQUF0dkQsRUFBQSxRQUVBLE9BQUF2SCxHQUFBdmIsT0FBQWt5RSxHQUFBbHlFLFFBQUE4eEUsSUFBQXprRSxLQUFBLE1BSUEsSUFBQTBrRSxFQUZBLE9BQUF4MkQsR0FBQWxPLEtBQUEsTUFLQWxPLEVBQUFDLFFBQUEsU0FBQXV5RSxHQUNBLElBQUEzb0UsS0FDQSxPQUFBQSxFQUFBNUksU0FBQSxXQUNBLE9BQUFYLEtBQUFzRCxJQUFBLFNBQUE2NUMsR0FDQSxJQUFBcmhDLEVBQUFtMkQsRUFBQTkwQixFQUFBKzBCLEdBQ0EsT0FBQS8wQixFQUFBLEdBQUEsVUFBQUEsRUFBQSxHQUFBLElBQUFyaEMsRUFBQSxJQUFBQSxJQUNBbE8sS0FBQSxLQUNBckUsRUFBQS9GLEVBQUEsU0FBQXV0RCxFQUFBNmhCLEdBQ0EsaUJBQUE3aEIsSUFBQUEsSUFBQSxLQUFBQSxFQUFBLE1BQ0EsSUFBQSxJQUFBOGhCLEtBQUFydkUsRUFBQSxFQUFBQSxFQUFBeEQsS0FBQTJDLE9BQUFhLElBQUEsQ0FDQSxJQUFBMkosRUFBQW5OLEtBQUF3RCxHQUFBLEdBQ0EsaUJBQUEySixJQUFBMGxFLEVBQUExbEUsSUFBQSxHQUVBLElBQUEzSixFQUFBLEVBQUFBLEVBQUF1dEQsRUFBQXB1RCxPQUFBYSxJQUFBLENBQ0EsSUFBQTI1QyxFQUFBNFQsRUFBQXZ0RCxHQUNBLGlCQUFBMjVDLEVBQUEsSUFBQTAxQixFQUFBMTFCLEVBQUEsTUFBQXkxQixJQUFBejFCLEVBQUEsR0FBQUEsRUFBQSxHQUFBeTFCLEVBQUFBLElBQUF6MUIsRUFBQSxHQUFBLElBQUFBLEVBQUEsR0FBQSxVQUFBeTFCLEVBQUEsS0FDQXJwRSxFQUFBL0ksS0FBQTI4QyxNQUVBNXpDLElBRUEsU0FBQTdKLEVBQUFDLEVBQUFxeEQsR0FDQSxTQUFBOGhCLEVBQUF6L0MsRUFBQWp2QixHQUNBLElBQUEsSUFBQVosRUFBQSxFQUFBQSxFQUFBNnZCLEVBQUExd0IsT0FBQWEsSUFBQSxDQUNBLElBQUEyNUMsRUFBQTlwQixFQUFBN3ZCLEdBQUF1dkUsRUFBQUMsRUFBQTcxQixFQUFBaHdDLElBQ0EsR0FBQTRsRSxFQUFBLENBRUEsSUFEQUEsRUFBQUUsT0FDQWx2RSxFQUFBLEVBQUFBLEVBQUFndkUsRUFBQTM5QyxNQUFBenlCLE9BQUFvQixJQUFBZ3ZFLEVBQUEzOUMsTUFBQXJ4QixHQUFBbzVDLEVBQUEvbkIsTUFBQXJ4QixJQUNBLEtBQUFBLEVBQUFvNUMsRUFBQS9uQixNQUFBenlCLE9BQUFvQixJQUFBZ3ZFLEVBQUEzOUMsTUFBQTUwQixLQUFBMHlFLEVBQUEvMUIsRUFBQS9uQixNQUFBcnhCLEdBQUFLLFFBQ0EsQ0FDQSxJQUFBLElBQUFneEIsS0FBQXJ4QixFQUFBLEVBQUFBLEVBQUFvNUMsRUFBQS9uQixNQUFBenlCLE9BQUFvQixJQUFBcXhCLEVBQUE1MEIsS0FBQTB5RSxFQUFBLzFCLEVBQUEvbkIsTUFBQXJ4QixHQUFBSyxJQUNBNHVFLEVBQUE3MUIsRUFBQWh3QyxLQUNBQSxHQUFBZ3dDLEVBQUFod0MsR0FDQThsRSxLQUFBLEVBQ0E3OUMsTUFBQUEsS0FLQSxTQUFBKzlDLEVBQUE1cEUsRUFBQW5GLEdBQ0EsSUFBQSxJQUFBaXZCLEtBQUErL0MsS0FBQTV2RSxFQUFBLEVBQUFBLEVBQUErRixFQUFBNUcsT0FBQWEsSUFBQSxDQUNBLElBQUEyNUMsRUFBQTV6QyxFQUFBL0YsR0FBQTJKLEVBQUEvSSxFQUFBMlMsS0FBQW9tQyxFQUFBLEdBQUEvNEMsRUFBQTJTLEtBQUFvbUMsRUFBQSxHQUFBazJCLEdBQ0ExdkQsSUFBQXc1QixFQUFBLEdBQ0E3RSxNQUFBNkUsRUFBQSxHQUNBbTFCLFVBQUFuMUIsRUFBQSxJQUVBaTJCLEVBQUFqbUUsR0FBQWltRSxFQUFBam1FLEdBQUFpb0IsTUFBQTUwQixLQUFBNnlFLEdBQUFoZ0QsRUFBQTd5QixLQUFBNHlFLEVBQUFqbUUsSUFDQUEsR0FBQUEsRUFDQWlvQixPQUFBaStDLEtBR0EsT0FBQWhnRCxFQUVBLFNBQUFpZ0QsRUFBQWx2RSxFQUFBcWYsR0FDQSxJQUFBL2UsRUFBQTZ1RSxFQUFBbnZFLEVBQUFvdkUsWUFDQSxJQUFBOXVFLEVBQUEsTUFBQSxJQUFBNUUsTUFBQSwrR0FDQSxJQUFBMnpFLEVBQUFDLEVBQUFBLEVBQUEvd0UsT0FBQSxHQUNBLEdBQUEsUUFBQXlCLEVBQUF1dkUsU0FBQUYsRUFBQUEsRUFBQXhrRSxZQUFBdkssRUFBQThxQixhQUFBL0wsRUFBQWd3RCxFQUFBeGtFLGFBQUF2SyxFQUFBakQsWUFBQWdpQixHQUFBL2UsRUFBQThxQixhQUFBL0wsRUFBQS9lLEVBQUEyTixZQUNBcWhFLEVBQUFsekUsS0FBQWlqQixRQUFBLEdBQUEsV0FBQXJmLEVBQUF1dkUsU0FBQWp2RSxFQUFBakQsWUFBQWdpQixPQUFBLENBQ0EsR0FBQSxpQkFBQXJmLEVBQUF1dkUsV0FBQXZ2RSxFQUFBdXZFLFNBQUFsa0QsT0FBQSxNQUFBLElBQUEzdkIsTUFBQSw4TEFDQSxJQUFBbVAsRUFBQXNrRSxFQUFBbnZFLEVBQUFvdkUsV0FBQSxJQUFBcHZFLEVBQUF1dkUsU0FBQWxrRCxRQUNBL3FCLEVBQUE4cUIsYUFBQS9MLEVBQUF4VSxJQUdBLFNBQUEya0UsRUFBQW53RCxHQUNBLEdBQUEsT0FBQUEsRUFBQS9oQixXQUFBLE9BQUEsRUFDQStoQixFQUFBL2hCLFdBQUFDLFlBQUE4aEIsR0FDQSxJQUFBcFAsRUFBQXEvRCxFQUFBanpFLFFBQUFnakIsR0FDQXBQLEdBQUEsR0FBQXEvRCxFQUFBeHZFLE9BQUFtUSxFQUFBLEdBRUEsU0FBQXcvRCxFQUFBenZFLEdBQ0EsSUFBQXFmLEVBQUE3akIsU0FBQTBCLGNBQUEsU0FDQSxPQUFBOEMsRUFBQXNLLE1BQUFoSixLQUFBLFdBQUFvdUUsRUFBQXJ3RCxFQUFBcmYsRUFBQXNLLE9BQUE0a0UsRUFBQWx2RSxFQUFBcWYsR0FDQUEsRUFPQSxTQUFBcXdELEVBQUF0bEUsRUFBQUUsR0FDQXRPLE9BQUE2TixLQUFBUyxHQUFBd3VDLFFBQUEsU0FBQS91QyxHQUNBSyxFQUFBZCxhQUFBUyxFQUFBTyxFQUFBUCxNQUdBLFNBQUEra0UsRUFBQXp0RSxFQUFBckIsR0FDQSxJQUFBcWYsRUFBQXc2QixFQUFBbmhDLEVBQUF6SixFQUNBLEdBQUFqUCxFQUFBMHVDLFdBQUFydEMsRUFBQWtlLElBQUEsQ0FDQSxLQUFBdFEsRUFBQWpQLEVBQUEwdUMsVUFBQXJ0QyxFQUFBa2UsTUFBQSxPQUFBLGFBQ0FsZSxFQUFBa2UsSUFBQXRRLEVBRUEsR0FBQWpQLEVBQUEydkUsVUFBQSxDQUNBLElBQUFDLEVBQUFDLElBQ0F4d0QsRUFBQXN3RCxJQUFBQSxFQUFBRixFQUFBenZFLElBQUE2NUMsRUFBQWkyQixFQUFBcnJDLEtBQUEsS0FBQXBsQixFQUFBdXdELEdBQUEsR0FDQWwzRCxFQUFBbzNELEVBQUFyckMsS0FBQSxLQUFBcGxCLEVBQUF1d0QsR0FBQSxRQUNBdnVFLEVBQUE2c0UsV0FBQSxtQkFBQTZCLEtBQUEsbUJBQUFBLElBQUFDLGlCQUFBLG1CQUFBRCxJQUFBRSxpQkFBQSxtQkFBQUMsTUFBQSxtQkFBQWxDLE1BQUEzdUQsRUFwQkEsU0FBQXJmLEdBQ0EsSUFBQW13RSxFQUFBMzBFLFNBQUEwQixjQUFBLFFBQ0EsT0FBQThDLEVBQUFzSyxNQUFBaEosS0FBQSxXQUFBdEIsRUFBQXNLLE1BQUEwM0MsSUFBQSxhQUFBMHRCLEVBQUFTLEVBQUFud0UsRUFBQXNLLE9BQ0E0a0UsRUFBQWx2RSxFQUFBbXdFLEdBQUFBLEVBaUJBQyxDQUFBcHdFLEdBQ0E2NUMsRUEyQkEsU0FBQXMyQixFQUFBbndFLEVBQUFxQixHQUNBLElBQUFrZSxFQUFBbGUsRUFBQWtlLElBQUEydUQsRUFBQTdzRSxFQUFBNnNFLFVBQUFtQyxPQUFBLElBQUFyd0UsRUFBQXN3RSx1QkFBQXBDLEdBQ0FsdUUsRUFBQXN3RSx1QkFBQUQsS0FBQTl3RCxFQUFBZ3hELEVBQUFoeEQsSUFBQTJ1RCxJQUFBM3VELEdBQUEsdURBQUF5dUQsS0FBQUcsU0FBQWgwQyxtQkFBQWpjLEtBQUFrd0QsVUFBQUYsTUFBQSxPQUNBLElBQUFzQyxFQUFBLElBQUFOLE1BQUEzd0QsSUFDQWplLEtBQUEsYUFDQW12RSxFQUFBTixFQUFBbi9ELEtBQ0FtL0QsRUFBQW4vRCxLQUFBKytELElBQUFDLGdCQUFBUSxHQUFBQyxHQUFBVixJQUFBRSxnQkFBQVEsSUFqQ0Foc0MsS0FBQSxLQUFBcGxCLEVBQUFyZixHQUFBMFksRUFBQSxXQUNBODJELEVBQUFud0QsR0FBQUEsRUFBQXJPLE1BQUErK0QsSUFBQUUsZ0JBQUE1d0QsRUFBQXJPLFNBQ0FxTyxFQUFBb3dELEVBQUF6dkUsR0FBQTY1QyxFQWtCQSxTQUFBeDZCLEVBQUFoZSxHQUNBLElBQUFrZSxFQUFBbGUsRUFBQWtlLElBQUEyMEIsRUFBQTd5QyxFQUFBNnlDLE1BQ0EsR0FBQUEsR0FBQTcwQixFQUFBL1YsYUFBQSxRQUFBNHFDLEdBQUE3MEIsRUFBQXF4RCxXQUFBcnhELEVBQUFxeEQsV0FBQXJrRCxRQUFBOU0sTUFBQSxDQUNBLEtBQUFGLEVBQUFwUixZQUFBb1IsRUFBQTloQixZQUFBOGhCLEVBQUFwUixZQUNBb1IsRUFBQWhpQixZQUFBN0IsU0FBQWtuQixlQUFBbkQsTUF0QkFrbEIsS0FBQSxLQUFBcGxCLEdBQ0EzRyxFQUFBLFdBQ0E4MkQsRUFBQW53RCxLQUVBLE9BQUF3NkIsRUFBQXg0QyxHQUFBLFNBQUFzdkUsR0FDQSxHQUFBQSxFQUFBLENBQ0EsR0FBQUEsRUFBQXB4RCxNQUFBbGUsRUFBQWtlLEtBQUFveEQsRUFBQXo4QixRQUFBN3lDLEVBQUE2eUMsT0FBQXk4QixFQUFBekMsWUFBQTdzRSxFQUFBNnNFLFVBQUEsT0FDQXIwQixFQUFBeDRDLEVBQUFzdkUsUUFDQWo0RCxLQUdBLFNBQUFvM0QsRUFBQXp3RCxFQUFBdEksRUFBQTJCLEVBQUFyWCxHQUNBLElBQUFrZSxFQUFBN0csRUFBQSxHQUFBclgsRUFBQWtlLElBQ0EsR0FBQUYsRUFBQXF4RCxXQUFBcnhELEVBQUFxeEQsV0FBQXJrRCxRQUFBdWtELEVBQUE3NUQsRUFBQXdJLE9BQUEsQ0FDQSxJQUFBc3hELEVBQUFyMUUsU0FBQWtuQixlQUFBbkQsR0FBQXRYLEVBQUFvWCxFQUFBcFgsV0FDQUEsRUFBQThPLElBQUFzSSxFQUFBOWhCLFlBQUEwSyxFQUFBOE8sSUFBQTlPLEVBQUExSixPQUFBOGdCLEVBQUErTCxhQUFBeWxELEVBQUE1b0UsRUFBQThPLElBQUFzSSxFQUFBaGlCLFlBQUF3ekUsSUFrQkEsSUFBQWpDLEtBQUFrQyxFQUFBLFNBQUFuekUsR0FDQSxJQUFBb3pFLEVBQ0EsT0FBQSxXQUNBLFlBQUEsSUFBQUEsSUFBQUEsRUFFQSxXQUNBLE9BQUFwMUUsUUFBQUgsVUFBQUEsU0FBQXlDLE1BQUF0QyxPQUFBcTFFLE1BSEEzeEUsTUFBQXpELEtBQUEwRCxZQUFBeXhFLEdBSEEsR0FPQTVCLEVBQUEsU0FBQXh4RSxHQUNBLElBQUFvekUsS0FDQSxPQUFBLFNBQUF0ekUsR0FDQSxRQUFBLElBQUFzekUsRUFBQXR6RSxHQUFBLENBQ0EsSUFBQXd6RSxFQVVBLFNBQUEzd0UsR0FDQSxPQUFBOUUsU0FBQTAxRSxjQUFBNXdFLElBWEExRCxLQUFBaEIsS0FBQTZCLEdBQ0EsR0FBQXd6RSxhQUFBdDFFLE9BQUF3MUUsa0JBQUEsSUFDQUYsRUFBQUEsRUFBQXg1RCxnQkFBQXJhLEtBQ0EsTUFBQStLLEdBQ0E4b0UsRUFBQSxLQUVBRixFQUFBdHpFLEdBQUF3ekUsRUFFQSxPQUFBRixFQUFBdHpFLElBWkEsR0FnQkFreUUsRUFBQSxLQUFBRSxFQUFBLEVBQUFQLEtBQUFpQixFQUFBM2pCLEVBQUEsR0FDQXR4RCxFQUFBQyxRQUFBLFNBQUE0SixFQUFBbkYsR0FDQSxHQUFBLG9CQUFBb3hFLE9BQUFBLE9BQUEsaUJBQUE1MUUsU0FBQSxNQUFBLElBQUFFLE1BQUEsaUVBQ0FzRSxFQUFBQSxPQUFBc0ssTUFBQSxpQkFBQXRLLEVBQUFzSyxNQUFBdEssRUFBQXNLLFNBQ0F0SyxFQUFBMnZFLFlBQUEzdkUsRUFBQTJ2RSxVQUFBbUIsS0FBQTl3RSxFQUFBb3ZFLGFBQUFwdkUsRUFBQW92RSxXQUFBLFFBQ0FwdkUsRUFBQXV2RSxXQUFBdnZFLEVBQUF1dkUsU0FBQSxVQUNBLElBQUF0Z0QsRUFBQTgvQyxFQUFBNXBFLEVBQUFuRixHQUNBLE9BQUEwdUUsRUFBQXovQyxFQUFBanZCLEdBQUEsU0FBQXF4RSxHQUNBLElBQUEsSUFBQUMsS0FBQWx5RSxFQUFBLEVBQUFBLEVBQUE2dkIsRUFBQTF3QixPQUFBYSxJQUFBLENBQ0EsSUFBQTI1QyxFQUFBOXBCLEVBQUE3dkIsSUFDQXV2RSxFQUFBQyxFQUFBNzFCLEVBQUFod0MsS0FBQThsRSxPQUFBeUMsRUFBQWwxRSxLQUFBdXlFLEdBR0EsSUFEQTBDLEdBQUEzQyxFQUFBSyxFQUFBc0MsRUFBQXJ4RSxHQUFBQSxHQUNBWixFQUFBLEVBQUFBLEVBQUFreUUsRUFBQS95RSxPQUFBYSxJQUFBLENBQ0EsSUFBQXV2RSxFQUFBMkMsRUFBQWx5RSxHQUNBLEdBQUEsSUFBQXV2RSxFQUFBRSxLQUFBLENBQ0EsSUFBQSxJQUFBbHZFLEVBQUEsRUFBQUEsRUFBQWd2RSxFQUFBMzlDLE1BQUF6eUIsT0FBQW9CLElBQUFndkUsRUFBQTM5QyxNQUFBcnhCLFlBQ0FpdkUsRUFBQUQsRUFBQTVsRSxRQUtBLElBQUE2bkUsRUFBQSxXQUNBLElBQUFXLEtBQ0EsT0FBQSxTQUFBeDZELEVBQUF5NkQsR0FDQSxPQUFBRCxFQUFBeDZELEdBQUF5NkQsRUFBQUQsRUFBQXhsRSxPQUFBbytDLFNBQUEzZ0QsS0FBQSxPQUhBLElBTUEsU0FBQWxPLEVBQUFDLEdBQ0FELEVBQUFDLFFBQUEsU0FBQWdrQixHQUNBLElBQUE1TyxFQUFBLG9CQUFBaFYsUUFBQUEsT0FBQWdWLFNBQ0EsSUFBQUEsRUFBQSxNQUFBLElBQUFqVixNQUFBLG9DQUNBLElBQUE2akIsR0FBQSxpQkFBQUEsRUFBQSxPQUFBQSxFQUNBLElBQUFreUQsRUFBQTlnRSxFQUFBd3JCLFNBQUEsS0FBQXhyQixFQUFBa3VCLEtBQUE2eUMsRUFBQUQsRUFBQTlnRSxFQUFBNjdDLFNBQUF4ckQsUUFBQSxZQUFBLEtBQ0EsT0FBQXVlLEVBQUF2ZSxRQUFBLHNEQUFBLFNBQUEyd0UsRUFBQUMsR0FDQSxJQUFBQyxFQUFBRCxFQUFBMXZFLE9BQUFsQixRQUFBLFdBQUEsU0FBQWdzRCxFQUFBOGtCLEdBQ0EsT0FBQUEsSUFDQTl3RSxRQUFBLFdBQUEsU0FBQWdzRCxFQUFBOGtCLEdBQ0EsT0FBQUEsSUFFQSxHQUFBLCtDQUFBM29FLEtBQUEwb0UsR0FBQSxPQUFBRixFQUNBLElBQUFJLEVBQ0EsT0FBQUEsRUFBQSxJQUFBRixFQUFBeDFFLFFBQUEsTUFBQXcxRSxFQUFBLElBQUFBLEVBQUF4MUUsUUFBQSxLQUFBbzFFLEVBQUFJLEVBQUFILEVBQUFHLEVBQUE3d0UsUUFBQSxRQUFBLElBQ0EsT0FBQWtkLEtBQUFrd0QsVUFBQTJELEdBQUEsUUFHQSxTQUFBejJFLEVBQUFDLEVBQUFxeEQsR0FDQSxhQUNBLElBQUFPLEVBQUFDLEVBQUFDLEVBQ0EsbUJBQUFscUQsUUFBQUEsT0FBQUMsU0FFQWdxRCxHQUFBUixFQUFBLEdBQUFBLEVBQUEsU0FDQSxLQUFBUyxFQUFBLG1CQUFBRixFQUNBLFNBQUEvbkIsRUFBQW1vQixHQUlBLE9BQUFBLEVBQUEyZSxlQUNBOEYsY0FDQTNqQixLQUFBLFFBQ0FTLFlBQUEsYUFDQUgsT0FDQXNqQixRQUFBLElBQUF2c0UsT0FBQSxTQUNBd3NFLEtBQUEsSUFBQXhzRSxPQUFBLDBCQUNBeXNFLFFBQUEsU0FBQUMsR0FDQSxJQUFBQyxFQUFBOWtCLEVBQUF5UCxZQUFBcGdFLEtBQUFoQixLQUFBdzJFLEdBQ0EsT0FBQSxJQUFBMXNFLE9BQUEsNEJBQUEyc0UsRUFBQSxVQUVBQyxLQUFBLFNBQUFGLEdBQ0EsSUFBQUMsRUFBQTlrQixFQUFBeVAsWUFBQXBnRSxLQUFBaEIsS0FBQXcyRSxHQUNBLE9BQUEsSUFBQTFzRSxPQUFBLHNCQUFBMnNFLEVBQUEsdUJBQUFBLEVBQUEsd0JBQUFBLEVBQUEsdUJBR0FFLFFBQUEsU0FDQUgsVUFBQSxJQUNBSSxXQUNBQyxRQUFBLEtBQ0FDLFFBQUEsTUFFQUMsY0FBQSxTQUFBeGEsRUFBQXNhLEVBQUFDLEdBQ0EsR0FBQWp4RSxNQUFBMDJELEdBQUEsT0FBQSxFQUNBLElBQUF5YSxFQUFBdjdDLFNBQUE4Z0MsRUFBQWg4RCxPQUFBczJFLEVBQUFsMkUsV0FBQUwsTUFBQWk4RCxFQUFBNTVELFVBQUFzMEUsRUFBQXg3QyxTQUFBOGdDLEVBQUFoOEQsT0FBQXUyRSxFQUFBbjJFLFdBQUFMLE1BQUFpOEQsRUFBQTU1RCxVQUNBLE9BQUFrRCxNQUFBbXhFLElBQUFILEdBQUFHLEdBQUFBLEdBQUFGLElBQUFqeEUsTUFBQW94RSxJQUFBSixHQUFBSSxHQUFBQSxHQUFBSCxHQUVBSSxrQkFBQSxTQUFBTCxFQUFBQyxFQUFBSyxHQUNBLElBQUFDLEdBQUEsSUFBQTl2RSxNQUFBK3ZFLGNBQ0EsR0FBQVIsRUFBQU8sRUFBQSxPQUFBUCxFQUNBLEdBQUFDLEVBQUFNLEVBQUEsQ0FDQSxJQUFBLElBQUFFLEVBQUFSLEVBQUFuMkUsV0FBQUwsTUFBQSxFQUFBLEdBQUFpM0UsRUFBQVQsRUFBQW4yRSxXQUFBTCxNQUFBLEVBQUEsR0FBQXcyRSxFQUFBUSxFQUFBSCxHQUFBRyxJQUNBLElBQUFFLEVBQUFGLEVBQUFDLEVBQ0EsT0FBQVYsRUFBQVcsRUFBQVgsRUFBQVcsRUFFQSxHQUFBWCxHQUFBTyxHQUFBQSxHQUFBTixFQUFBLENBQ0EsSUFBQSxJQUFBVyxFQUFBTCxFQUFBejJFLFdBQUFMLE1BQUEsRUFBQSxHQUFBdzJFLEVBQUFXLEVBQUFOLEdBQUFNLElBQ0EsSUFBQUMsRUFBQUQsRUFBQU4sRUFDQSxPQUFBTyxFQUFBYixFQUFBQSxFQUFBYSxFQUVBLE9BQUFOLEdBRUF4UCxVQUFBLFNBQUFyN0QsRUFBQXNuRCxFQUFBbU0sRUFBQW5vQyxHQUNBLElBQUFrdkMsRUFBQXY5QixFQUFBeHBDLE1BQ0EsR0FBQXVNLEVBQUFvZixTQUFBcGYsRUFBQThmLFVBQUFzbEMsRUFBQXRsQyxRQUFBcTdDLE1BQUEsQ0FDQSxJQUFBaVEsRUFBQSxJQUFBcndFLEtBQ0F5L0QsRUFBQW4xRCxJQUFBK2xFLEVBQUFDLFVBQUFqM0UsWUFBQWczRSxFQUFBRSxXQUFBLEdBQUFsM0UsV0FBQWczRSxFQUFBTixjQUFBMTJFLFlBQ0FvbUUsRUFBQXA4QyxRQUFBLGNBR0FtdEQsY0FBQSxTQUFBcmxCLEVBQUFvQixFQUFBaDhCLEdBQ0EsSUFBQSxJQUFBL2pCLEVBQUEsRUFBQW5SLEVBQUEsRUFBQWEsRUFBQSxFQUFBQSxFQUFBaXZELEVBQUE5dkQsUUFBQSxNQUFBOHZELEVBQUE5VSxPQUFBbjZDLEdBQUFBLElBQUEsQ0FDQSxJQUFBNnNFLEVBQUF4NEMsRUFBQW82QixZQUFBUSxFQUFBOVUsT0FBQW42QyxJQUNBNnNFLEdBQUF2OEQsR0FBQW5SLEVBQUFBLEVBQUEwdEUsRUFBQXRWLGFBQUFwNEQsSUFFQSxPQUFBa3hELEVBQUFqbUQsS0FBQSxJQUFBKzZDLE9BQUE3MEMsRUFBQW5SLElBRUErOEQsZUFBQSxTQUFBN0wsRUFBQWtrQixFQUFBbGdELEdBQ0EsSUFBQW1nRCxFQUFBQyxFQUFBQyxFQUFBcmtCLEVBQUFqbUQsS0FBQSxJQUNBLE9BQUEsSUFBQWlxQixFQUFBNDZCLEtBQUFoeUQsUUFBQSxNQUFBdzNFLEVBQUFDLEVBQUF2dkIsT0FBQSxFQUFBLEdBQUFxdkIsRUFBQUUsRUFBQTMxQixVQUFBLEVBQUEsTUFBQTAxQixFQUFBQyxFQUFBMzFCLFVBQUEsRUFBQSxJQUNBeTFCLEVBQUFFLEVBQUF2dkIsT0FBQSxFQUFBLElBQUFvdkIsSUFBQUMsSUFBQW5nRCxFQUFBOCtDLFVBL0RBc0IsRUErREFBLEVBOURBcHlFLE1BQUFveUUsSUFBQSxLQUFBLElBQUEzd0UsS0FBQTJ3RSxFQUFBLEVBQUEsR0FBQUwsWUFEQSxJQUFBSyxHQWlFQWhtQixhQUNBa21CLEdBQ0F4SyxVQUFBLFNBQUFwUixFQUFBekssRUFBQWw4QixFQUFBKy9CLEVBQUE5OUIsR0FDQSxJQUFBKytCLEVBQUEvK0IsRUFBQWs3QixNQUFBdWpCLEtBQUEvb0UsS0FBQWd2RCxHQUNBLE9BQUE1RyxHQUFBaUIsR0FBQTJGLEVBQUE1ZSxPQUFBLEtBQUE5bEIsRUFBQTIrQyxZQUFBLElBQUEsTUFBQS8xRSxRQUFBODdELEVBQUE1ZSxPQUFBLE9BQUFpWixFQUFBLytCLEVBQUFrN0IsTUFBQXVqQixLQUFBL29FLEtBQUEsSUFBQWd2RCxFQUFBNWUsT0FBQSxLQUFBaVosR0FBQTlFLEVBQUErQixPQUFBaitCLEVBQUEsR0FBQSxLQUVBd2xDLG1CQUNBdG5ELE1BQUE4aEIsRUFBQSxFQUNBNXhCLElBQUE0eEIsR0FFQUEsSUFBQUEsRUFDQXU3QixFQUFBb0wsRUFBQTVlLE9BQUEsTUFHQW9kLFlBQUEsRUFDQStULGVBQ0FuQixVQUFBLFNBQUFwUixFQUFBekssRUFBQWw4QixFQUFBKy9CLEVBQUE5OUIsR0FDQSxJQUFBdWdELEVBQUE3YixFQUNBMTJELE1BQUFpc0QsRUFBQStCLE9BQUFqK0IsRUFBQSxNQUFBd2lELEdBQUF0bUIsRUFBQStCLE9BQUFqK0IsRUFBQSxJQUNBLElBQUFnaEMsRUFBQSxJQUFBd2hCLEVBQUF6MUUsT0FBQWsxQixFQUFBazdCLE1BQUFzakIsUUFBQTlvRSxLQUFBNnFFLEdBQUF2Z0QsRUFBQWs3QixNQUFBdWpCLEtBQUEvb0UsS0FBQTZxRSxHQUNBLEdBQUF4aEIsR0FBQTlFLEVBQUE2QixlQUFBLzlCLEtBQUFpQyxFQUFBazdCLE1BQUEyakIsS0FBQTcrQyxFQUFBMitDLFdBQUFqcEUsS0FBQWd2RCxFQUFBekssRUFBQTZCLGVBQUEvOUIsR0FBQW5sQixTQUFBcWhELEVBQUE2QixlQUFBLzlCLEdBQUFubEIsTUFBQSxNQUFBOHJELEVBQUEsSUFBQSxPQUNBNUcsSUFBQWlCLEVBQUEsQ0FDQSxHQUFBQSxFQUFBLytCLEVBQUFrN0IsTUFBQXVqQixLQUFBL29FLEtBQUFndkQsRUFBQSxLQUFBLE9BQUF6SyxFQUFBK0IsT0FBQWorQixHQUFBMm1DLEVBQ0F6SyxFQUFBK0IsU0FBQWorQixHQUFBLEtBQ0FBLElBQUFBLEVBQ0F1N0IsRUFBQSxLQUVBLEdBQUF5RixFQUFBLytCLEVBQUFrN0IsTUFBQXVqQixLQUFBL29FLEtBQUEsSUFBQWd2RCxHQUFBLE9BQUF6SyxFQUFBK0IsT0FBQWorQixHQUFBLElBQ0FBLEtBQ0FBLElBQUFBLEdBR0EsT0FBQWdoQyxHQUVBbUUsWUFBQSxLQUdBc2QsR0FDQTFLLFVBQUEsU0FBQXBSLEVBQUF6SyxFQUFBbDhCLEVBQUErL0IsRUFBQTk5QixHQUNBLElBQUF5Z0QsRUFBQXpnRCxFQUFBaWdELGNBQUFobUIsRUFBQVcsS0FBQVgsRUFBQStCLE9BQUFoOEIsSUFDQSxJQUFBeWdELEVBQUE3M0UsUUFBQW8zQixFQUFBcTdCLFlBQUEsTUFBQW9sQixFQUFBLEtBQUF6Z0QsRUFBQTIrQyxXQUNBLElBQUE1ZixFQUFBLytCLEVBQUFrN0IsTUFBQTJqQixLQUFBNytDLEVBQUEyK0MsV0FBQWpwRSxLQUFBK3FFLEVBQUEvYixHQUNBLE9BQUE1RyxHQUFBaUIsR0FBQTJGLEVBQUE1ZSxPQUFBLEtBQUE5bEIsRUFBQTIrQyxZQUFBLElBQUEsTUFBQS8xRSxRQUFBODdELEVBQUE1ZSxPQUFBLE9BQUFpWixFQUFBLytCLEVBQUFrN0IsTUFBQTJqQixLQUFBNytDLEVBQUEyK0MsV0FBQWpwRSxLQUFBK3FFLEVBQUEsSUFBQS9iLEVBQUE1ZSxPQUFBLEtBQUFpWixHQUFBOUUsRUFBQStCLE9BQUFqK0IsRUFBQSxHQUFBLEtBRUF3bEMsbUJBQ0F0bkQsTUFBQThoQixFQUFBLEVBQ0E1eEIsSUFBQTR4QixHQUVBQSxJQUFBQSxFQUNBdTdCLEVBQUFvTCxFQUFBNWUsT0FBQSxNQUdBb2QsWUFBQSxFQUNBK1QsZUFDQW5CLFVBQUEsU0FBQXBSLEVBQUF6SyxFQUFBbDhCLEVBQUErL0IsRUFBQTk5QixHQUNBaHlCLE1BQUFpc0QsRUFBQStCLE9BQUFqK0IsRUFBQSxNQUFBMm1DLEdBQUF6SyxFQUFBK0IsT0FBQWorQixFQUFBLElBQ0EsSUFBQTBpRCxFQUFBemdELEVBQUFpZ0QsY0FBQWhtQixFQUFBVyxLQUFBWCxFQUFBK0IsT0FBQWg4QixJQUNBLElBQUF5Z0QsRUFBQTczRSxRQUFBbzNCLEVBQUFxN0IsWUFBQSxNQUFBb2xCLEVBQUEsS0FBQXpnRCxFQUFBMitDLFdBQ0EsSUFBQTVmLEVBQUEsSUFBQTJGLEVBQUE1NUQsT0FBQWsxQixFQUFBazdCLE1BQUF3akIsUUFBQTErQyxFQUFBMitDLFdBQUFqcEUsS0FBQStxRSxFQUFBL2IsR0FBQTFrQyxFQUFBazdCLE1BQUEyakIsS0FBQTcrQyxFQUFBMitDLFdBQUFqcEUsS0FBQStxRSxFQUFBL2IsR0FDQSxPQUFBM0YsR0FBQTlFLEVBQUE2QixlQUFBLzlCLEtBQUFpQyxFQUFBazdCLE1BQUEyakIsS0FBQTcrQyxFQUFBMitDLFdBQUFqcEUsS0FBQWd2RCxFQUFBekssRUFBQTZCLGVBQUEvOUIsR0FBQW5sQixTQUFBcWhELEVBQUE2QixlQUFBLzlCLEdBQUFubEIsTUFBQSxNQUFBOHJELEVBQUEsSUFBQSxNQUNBNUcsR0FBQWlCLEtBQUFBLEVBQUEvK0IsRUFBQWs3QixNQUFBMmpCLEtBQUE3K0MsRUFBQTIrQyxXQUFBanBFLEtBQUErcUUsRUFBQSxJQUFBL2IsSUFBQTNGLEdBQUE5RSxFQUFBK0IsT0FBQWorQixHQUFBLEtBRUFBLE1BREFBLEtBSUFtbEMsWUFBQSxLQUdBaG5CLEdBQ0E0NUIsVUFBQSxTQUFBcFIsRUFBQXpLLEVBQUFsOEIsRUFBQSsvQixFQUFBOTlCLEdBQ0EsT0FBQUEsRUFBQWsvQyxjQUFBeGEsRUFBQTFrQyxFQUFBKytDLFVBQUFDLFFBQUFoL0MsRUFBQSsrQyxVQUFBRSxVQUVBL2IsWUFBQSxFQUNBK1QsZUFDQW5CLFVBQUEsU0FBQXBSLEVBQUF6SyxFQUFBbDhCLEVBQUErL0IsRUFBQTk5QixHQUNBLElBQUErK0IsRUFBQS8rQixFQUFBay9DLGNBQUF4YSxFQUFBMWtDLEVBQUErK0MsVUFBQUMsUUFBQWgvQyxFQUFBKytDLFVBQUFFLFNBQ0EsSUFBQW5oQixJQUFBaUIsRUFBQSxDQUNBLElBQUEyaEIsRUFBQTFnRCxFQUFBcS9DLGtCQUFBci9DLEVBQUErK0MsVUFBQUMsUUFBQWgvQyxFQUFBKytDLFVBQUFFLFFBQUF2YSxFQUFBLEtBQUE1N0QsV0FBQUwsTUFBQSxFQUFBLEdBQ0EsR0FBQXMyRCxFQUFBLytCLEVBQUFrL0MsY0FBQXdCLEVBQUFoYyxFQUFBMWtDLEVBQUErK0MsVUFBQUMsUUFBQWgvQyxFQUFBKytDLFVBQUFFLFNBQUEsT0FBQWhsQixFQUFBK0IsT0FBQWorQixLQUFBMmlELEVBQUE1NkIsT0FBQSxJQUVBL25CLElBQUFBLEdBRUEsR0FBQTJpRCxFQUFBMWdELEVBQUFxL0Msa0JBQUFyL0MsRUFBQSsrQyxVQUFBQyxRQUFBaC9DLEVBQUErK0MsVUFBQUUsUUFBQXZhLEVBQUEsS0FBQTU3RCxXQUFBTCxNQUFBLEVBQUEsR0FDQXMyRCxFQUFBLytCLEVBQUFrL0MsY0FBQXdCLEVBQUFoYyxFQUFBMWtDLEVBQUErK0MsVUFBQUMsUUFBQWgvQyxFQUFBKytDLFVBQUFFLFNBQUEsT0FBQWhsQixFQUFBK0IsT0FBQWorQixLQUFBMmlELEVBQUE1NkIsT0FBQSxHQUNBbVUsRUFBQStCLE9BQUFqK0IsS0FBQTJpRCxFQUFBNTZCLE9BQUEsSUFDQS9uQixJQUFBQSxHQUdBLE9BQUFnaEMsR0FFQW1FLFlBQUEsSUFFQTRTLFVBQUEsU0FBQXBSLEVBQUF6SyxFQUFBbDhCLEVBQUErL0IsRUFBQTk5QixHQUNBLElBQUErK0IsRUFBQS8rQixFQUFBay9DLGNBQUF4YSxFQUFBMWtDLEVBQUErK0MsVUFBQUMsUUFBQWgvQyxFQUFBKytDLFVBQUFFLFNBQ0EsSUFBQW5oQixJQUFBaUIsRUFBQSxDQUNBLElBQUEyaEIsRUFBQTFnRCxFQUFBcS9DLGtCQUFBci9DLEVBQUErK0MsVUFBQUMsUUFBQWgvQyxFQUFBKytDLFVBQUFFLFFBQUF2YSxHQUFBNTdELFdBQUFMLE1BQUEsRUFBQSxHQUNBLEdBQUFzMkQsRUFBQS8rQixFQUFBay9DLGNBQUF4YSxFQUFBLEdBQUFnYyxFQUFBLEdBQUFoYyxFQUFBLEdBQUExa0MsRUFBQSsrQyxVQUFBQyxRQUFBaC9DLEVBQUErK0MsVUFBQUUsU0FBQSxPQUFBaGxCLEVBQUErQixPQUFBaitCLEtBQUEyaUQsRUFBQTU2QixPQUFBLElBRUEvbkIsSUFBQUEsR0FFQSxHQUFBMmlELEVBQUExZ0QsRUFBQXEvQyxrQkFBQXIvQyxFQUFBKytDLFVBQUFDLFFBQUFoL0MsRUFBQSsrQyxVQUFBRSxRQUFBdmEsR0FBQTU3RCxXQUFBTCxNQUFBLEVBQUEsR0FDQXMyRCxFQUFBLytCLEVBQUFrL0MsY0FBQXdCLEVBQUFoYyxFQUFBMWtDLEVBQUErK0MsVUFBQUMsUUFBQWgvQyxFQUFBKytDLFVBQUFFLFNBQUEsT0FBQWhsQixFQUFBK0IsT0FBQWorQixFQUFBLEdBQUEyaUQsRUFBQTU2QixPQUFBLEdBQ0FtVSxFQUFBK0IsT0FBQWorQixLQUFBMmlELEVBQUE1NkIsT0FBQSxHQUFBbVUsRUFBQStCLE9BQUFqK0IsS0FBQTJtQyxFQUFBNWUsT0FBQSxJQUVBeWQsbUJBQ0F0bkQsTUFBQThoQixFQUFBLEVBQ0E1eEIsSUFBQTR4QixHQUVBQSxJQUFBQSxHQUdBLE9BQUFnaEMsR0FFQW1FLFlBQUEsSUFFQTRTLFVBQUEsU0FBQXBSLEVBQUF6SyxFQUFBbDhCLEVBQUErL0IsRUFBQTk5QixHQUNBLE9BQUFBLEVBQUFrL0MsY0FBQXhhLEVBQUExa0MsRUFBQSsrQyxVQUFBQyxRQUFBaC9DLEVBQUErK0MsVUFBQUUsVUFFQS9iLFlBQUEsTUFJQWdDLFlBQUEsRUFDQW1FLFlBQUEsR0FFQXNYLGNBQ0F0bEIsWUFBQSxhQUNBdEIsTUFBQSxhQUNBbUIsT0FDQXdqQixRQUFBLFNBQUFDLEdBQ0EsSUFBQUMsRUFBQTlrQixFQUFBeVAsWUFBQXBnRSxLQUFBaEIsS0FBQXcyRSxHQUNBLE9BQUEsSUFBQTFzRSxPQUFBLG9CQUFBMnNFLEVBQUEsYUFBQUEsRUFBQSxXQUVBQyxLQUFBLFNBQUFGLEdBQ0EsSUFBQUMsRUFBQTlrQixFQUFBeVAsWUFBQXBnRSxLQUFBaEIsS0FBQXcyRSxHQUNBLE9BQUEsSUFBQTFzRSxPQUFBLG1CQUFBMnNFLEVBQUEsd0NBQUFBLEVBQUEsd0JBQUFBLEVBQUEsUUFFQUosUUFBQSxJQUFBdnNFLE9BQUEsUUFDQXdzRSxLQUFBLElBQUF4c0UsT0FBQSxrQkFFQTZzRSxRQUFBLFNBQ0EvTyxVQUFBLFNBQUFyN0QsRUFBQXNuRCxFQUFBbU0sRUFBQW5vQyxHQUNBLElBQUFrdkMsRUFBQXY5QixFQUFBeHBDLE1BQ0EsR0FBQXVNLEVBQUFvZixTQUFBcGYsRUFBQThmLFVBQUFzbEMsRUFBQXRsQyxRQUFBcTdDLE1BQUEsQ0FDQSxJQUFBaVEsRUFBQSxJQUFBcndFLEtBQ0F5L0QsRUFBQW4xRCxLQUFBK2xFLEVBQUFFLFdBQUEsR0FBQWwzRSxXQUFBZzNFLEVBQUFDLFVBQUFqM0UsV0FBQWczRSxFQUFBTixjQUFBMTJFLFlBQ0FvbUUsRUFBQXA4QyxRQUFBLGVBSUE4dEQsY0FDQWhtQixLQUFBLFFBQ0FTLFlBQUEsYUFDQXRCLE1BQUEsYUFDQStrQixRQUFBLFNBQ0EvTyxVQUFBLFNBQUFyN0QsRUFBQXNuRCxFQUFBbU0sRUFBQW5vQyxHQUNBLElBQUFrdkMsRUFBQXY5QixFQUFBeHBDLE1BQ0EsR0FBQXVNLEVBQUFvZixTQUFBcGYsRUFBQThmLFVBQUFzbEMsRUFBQXRsQyxRQUFBcTdDLE1BQUEsQ0FDQSxJQUFBaVEsRUFBQSxJQUFBcndFLEtBQ0F5L0QsRUFBQW4xRCxJQUFBK2xFLEVBQUFOLGNBQUExMkUsWUFBQWczRSxFQUFBRSxXQUFBLEdBQUFsM0UsV0FBQWczRSxFQUFBQyxVQUFBajNFLFlBQ0FvbUUsRUFBQXA4QyxRQUFBLGVBSUErdEQsY0FDQWptQixLQUFBLFFBQ0FTLFlBQUEsYUFDQXlqQixRQUFBLFNBQ0FILFVBQUEsSUFDQTVrQixNQUFBLGNBRUErbUIsY0FDQWxtQixLQUFBLFFBQ0FTLFlBQUEsYUFDQXlqQixRQUFBLFNBQ0FILFVBQUEsSUFDQTVrQixNQUFBLGNBRUFnbkIsY0FDQW5tQixLQUFBLFFBQ0FTLFlBQUEsYUFDQXlqQixRQUFBLFNBQ0FILFVBQUEsSUFDQTVrQixNQUFBLGNBRUFpbkIsY0FDQXBtQixLQUFBLFFBQ0FTLFlBQUEsYUFDQXlqQixRQUFBLFNBQ0FILFVBQUEsSUFDQTVrQixNQUFBLGNBRUFrbkIsY0FDQXJtQixLQUFBLFFBQ0FTLFlBQUEsYUFDQXlqQixRQUFBLFNBQ0FILFVBQUEsSUFDQTVrQixNQUFBLGNBRUFtbkIsY0FDQXRtQixLQUFBLFFBQ0FTLFlBQUEsYUFDQXlqQixRQUFBLFNBQ0FILFVBQUEsSUFDQTVrQixNQUFBLGNBRUFvbkIsVUFDQXZtQixLQUFBLFlBQ0FTLFlBQUEsbUJBQ0F0QixNQUFBLGFBQ0FtQixPQUNBa21CLE9BQUEsSUFBQW52RSxPQUFBLFNBQ0FvdkUsTUFBQSxJQUFBcHZFLE9BQUEsaUJBQ0FxdkUsSUFBQSxJQUFBcnZFLE9BQUEsb0JBQ0FzdkUsS0FBQSxJQUFBdHZFLE9BQUEsbUJBQ0F1dkUsTUFBQSxJQUFBdnZFLE9BQUEsU0FDQXd2RSxHQUFBLElBQUF4dkUsT0FBQSxlQUVBeXZFLGNBQUEsSUFDQUMsV0FBQSxLQUNBdm5CLGFBQ0F3bkIsR0FDQTlMLFVBQUEsU0FBQXBSLEVBQUF6SyxFQUFBbDhCLEVBQUErL0IsRUFBQTk5QixHQUNBLEdBQUEsT0FBQUEsRUFBQTJoRCxZQUFBLEtBQUEvOUMsU0FBQThnQyxFQUFBLElBQUEsT0FBQXpLLEVBQUErQixPQUFBaitCLEVBQUEsR0FBQSxJQUNBazhCLEVBQUErQixPQUFBaitCLEdBQUEsS0FDQXdsQyxtQkFDQXRuRCxNQUFBOGhCLEVBQUEsRUFDQTV4QixJQUFBNHhCLEdBRUF1N0IsRUFBQSxLQUVBLElBQUF5RixFQUFBLytCLEVBQUFrN0IsTUFBQW9tQixJQUFBNXJFLEtBQUFndkQsR0FDQSxJQUFBNUcsSUFBQWlCLElBQUEyRixFQUFBNWUsT0FBQSxLQUFBOWxCLEVBQUEwaEQsZ0JBQUEsSUFBQSxNQUFBOTRFLFFBQUE4N0QsRUFBQTVlLE9BQUEsT0FBQWlaLEVBQUEvK0IsRUFBQWs3QixNQUFBb21CLElBQUE1ckUsS0FBQSxJQUFBZ3ZELEVBQUE1ZSxPQUFBLEtBQUEsT0FBQW1VLEVBQUErQixPQUFBaitCLEVBQUEsR0FBQSxJQUNBazhCLEVBQUErQixPQUFBaitCLEdBQUEybUMsRUFBQTVlLE9BQUEsR0FBQS9uQixLQUNBd2xDLG1CQUNBdG5ELE1BQUE4aEIsRUFBQSxFQUNBNXhCLElBQUE0eEIsR0FFQUEsSUFBQUEsRUFDQXU3QixFQUFBdDVCLEVBQUEwaEQsZUFFQSxHQUFBM2lCLEdBQUEsT0FBQS8rQixFQUFBMmhELFlBQUEzaEQsRUFBQWs3QixNQUFBbW1CLE1BQUEzckUsS0FBQWd2RCxHQUFBLENBQ0EsSUFBQXAxRCxFQUFBczBCLFNBQUE4Z0MsRUFBQSxJQUNBLE9BQUEsS0FBQXAxRCxHQUFBMnFELEVBQUErQixPQUFBaitCLEVBQUEsR0FBQSxJQUFBazhCLEVBQUErQixPQUFBaitCLEVBQUEsR0FBQSxNQUFBazhCLEVBQUErQixPQUFBaitCLEVBQUEsR0FBQSxJQUNBazhCLEVBQUErQixPQUFBaitCLEVBQUEsR0FBQSxNQUFBenVCLEdBQUEsSUFBQSxJQUFBMnFELEVBQUErQixPQUFBaitCLEdBQUF6dUIsRUFBQXhHLFdBQ0FteEQsRUFBQStCLE9BQUFqK0IsRUFBQSxHQUFBLE1BQUFrOEIsRUFBQStCLE9BQUFqK0IsR0FBQXp1QixFQUFBeEcsV0FBQWc5QyxPQUFBLEdBQ0FtVSxFQUFBK0IsT0FBQWorQixFQUFBLEdBQUF6dUIsRUFBQXhHLFdBQUFnOUMsT0FBQSxLQUNBeWQsbUJBQ0F0bkQsTUFBQThoQixFQUFBLEVBQ0E1eEIsSUFBQTR4QixFQUFBLEdBRUF1N0IsRUFBQVcsRUFBQStCLE9BQUFqK0IsSUFHQSxPQUFBZ2hDLEdBRUFtRSxZQUFBLEVBQ0ErVCxlQUNBbkIsVUFBQSxTQUFBcFIsRUFBQXpLLEVBQUFsOEIsRUFBQSsvQixFQUFBOTlCLEdBQ0EsSUFBQSsrQixFQUFBLytCLEVBQUFrN0IsTUFBQWttQixPQUFBMXJFLEtBQUFndkQsR0FDQSxPQUFBNUcsR0FBQWlCLEtBQUFBLEVBQUEvK0IsRUFBQWs3QixNQUFBb21CLElBQUE1ckUsS0FBQSxJQUFBZ3ZELElBQUEzRixHQUFBOUUsRUFBQStCLE9BQUFqK0IsR0FBQSxLQUVBQSxNQURBQSxLQUlBbWxDLFlBQUEsS0FHQTE4QixHQUNBc3ZDLFVBQUEsYUFDQTVTLFlBQUEsRUFDQStULGVBQ0FuQixVQUFBLFNBQUFwUixFQUFBekssRUFBQWw4QixFQUFBKy9CLEVBQUE5OUIsR0FDQSxJQUFBKytCLEVBQUEvK0IsRUFBQWs3QixNQUFBc21CLE1BQUE5ckUsS0FBQWd2RCxHQUNBLE9BQUE1RyxHQUFBaUIsS0FBQUEsRUFBQS8rQixFQUFBazdCLE1BQUF1bUIsR0FBQS9yRSxLQUFBLElBQUFndkQsSUFBQTNGLEdBQUE5RSxFQUFBK0IsT0FBQWorQixHQUFBLEtBRUFBLE1BREFBLEtBSUFtbEMsWUFBQSxLQUdBNXlDLEdBQ0F3bEQsVUFBQSxTQUFBcFIsRUFBQXpLLEVBQUFsOEIsRUFBQSsvQixFQUFBOTlCLEdBQ0EsT0FBQUEsRUFBQWs3QixNQUFBcW1CLEtBQUE3ckUsS0FBQWd2RCxFQUFBLE1BRUF2QixPQUFBLFFBQ0FELFlBQUEsSUFHQWdDLFlBQUEsRUFDQW1FLFlBQUEsR0FFQXdZLFlBQ0FqbkIsS0FBQSxpQkFDQVMsWUFBQSxzQkFDQXRCLE1BQUEsV0FDQTRuQixXQUFBLE1BRUFHLHVCQUNBbG5CLEtBQUEsaUJBQ0FTLFlBQUEsc0JBQ0F0QixNQUFBLGFBQ0FtQixPQUNBd2pCLFFBQUEsU0FBQUMsR0FDQSxJQUFBQyxFQUFBOWtCLEVBQUF5UCxZQUFBcGdFLEtBQUFoQixLQUFBdzJFLEdBQ0EsT0FBQSxJQUFBMXNFLE9BQUEsb0JBQUEyc0UsRUFBQSxhQUFBQSxFQUFBLFdBRUFDLEtBQUEsU0FBQUYsR0FDQSxJQUFBQyxFQUFBOWtCLEVBQUF5UCxZQUFBcGdFLEtBQUFoQixLQUFBdzJFLEdBQ0EsT0FBQSxJQUFBMXNFLE9BQUEsbUJBQUEyc0UsRUFBQSx3Q0FBQUEsRUFBQSx3QkFBQUEsRUFBQSxRQUVBSixRQUFBLElBQUF2c0UsT0FBQSxRQUNBd3NFLEtBQUEsSUFBQXhzRSxPQUFBLGtCQUVBNnNFLFFBQUEsU0FDQS9PLFVBQUEsU0FBQXI3RCxFQUFBc25ELEVBQUFtTSxFQUFBbm9DLEdBQ0EsSUFBQWt2QyxFQUFBdjlCLEVBQUF4cEMsTUFDQSxHQUFBdU0sRUFBQW9mLFNBQUFwZixFQUFBOGYsVUFBQXNsQyxFQUFBdGxDLFFBQUFxN0MsTUFBQSxDQUNBLElBQUFpUSxFQUFBLElBQUFyd0UsS0FDQXkvRCxFQUFBbjFELEtBQUErbEUsRUFBQUUsV0FBQSxHQUFBbDNFLFdBQUFnM0UsRUFBQUMsVUFBQWozRSxXQUFBZzNFLEVBQUFOLGNBQUExMkUsWUFDQW9tRSxFQUFBcDhDLFFBQUEsZUFJQWl2RCxXQUNBbm5CLEtBQUEsV0FDQVMsWUFBQSxXQUNBdEIsTUFBQSxXQUNBNG5CLFdBQUEsTUFFQUssU0FDQXBuQixLQUFBLFdBQ0FTLFlBQUEsV0FDQXRCLE1BQUEsV0FDQTRuQixXQUFBLE1BRUFNLFlBQ0FybkIsS0FBQSxRQUNBUyxZQUFBLFdBQ0F0QixNQUFBLFdBQ0FzUCxZQUFBLEdBRUE2WSxTQUNBdG5CLEtBQUEsTUFDQVMsWUFBQSxRQUNBdEIsTUFBQSxXQUNBc1AsWUFBQSxHQUVBOFksTUFDQXBvQixNQUFBLGNBRUFxb0IsV0FDQXhuQixLQUFBLE1BQ0FTLFlBQUEsVUFDQXlqQixRQUFBLFdBQ0FILFVBQUEsSUFDQTVrQixNQUFBLGNBRUFzb0IsUUFDQW5uQixPQUNBd2pCLFFBQUEsU0FBQUMsR0FDQSxJQUFBQyxFQUFBOWtCLEVBQUF5UCxZQUFBcGdFLEtBQUFoQixLQUFBdzJFLEdBQ0EsT0FBQSxJQUFBMXNFLE9BQUEsbUJBQUEyc0UsRUFBQSxXQUVBQyxLQUFBLFNBQUFGLEdBQ0EsSUFBQUMsRUFBQTlrQixFQUFBeVAsWUFBQXBnRSxLQUFBaEIsS0FBQXcyRSxHQUNBLE9BQUEsSUFBQTFzRSxPQUFBLG1CQUFBMnNFLEVBQUEsdUNBQUFBLEVBQUEsZ0JBQUFBLEVBQUEsUUFFQUosUUFBQSxJQUFBdnNFLE9BQUEsUUFDQXdzRSxLQUFBLElBQUF4c0UsT0FBQSxrQkFFQThzRSxXQUNBQyxRQUFBLEtBQ0FDLFFBQUEsTUFFQXJrQixLQUFBLFFBQ0Fra0IsUUFBQSxTQUNBempCLFlBQUEsYUFDQXRCLE1BQUEsYUFDQTBYLGlCQUFBLEdBRUE2USx1QkFDQTFuQixLQUFBLGNBQ0FTLFlBQUEsc0JBQ0F0QixNQUFBLFdBQ0E0a0IsVUFBQSxJQUNBRyxRQUFBLFNBQ0E1akIsT0FDQXdqQixRQUFBLFNBQUFDLEdBQ0EsSUFBQUMsRUFBQTlrQixFQUFBeVAsWUFBQXBnRSxLQUFBaEIsS0FBQXcyRSxHQUNBLE9BQUEsSUFBQTFzRSxPQUFBLG9CQUFBMnNFLEVBQUEsYUFBQUEsRUFBQSxXQUVBQyxLQUFBLFNBQUFGLEdBQ0EsSUFBQUMsRUFBQTlrQixFQUFBeVAsWUFBQXBnRSxLQUFBaEIsS0FBQXcyRSxHQUNBLE9BQUEsSUFBQTFzRSxPQUFBLG1CQUFBMnNFLEVBQUEsd0NBQUFBLEVBQUEsd0JBQUFBLEVBQUEsUUFFQUosUUFBQSxJQUFBdnNFLE9BQUEsUUFDQXdzRSxLQUFBLElBQUF4c0UsT0FBQSxrQkFFQTg5RCxVQUFBLFNBQUFyN0QsRUFBQXNuRCxFQUFBbU0sRUFBQW5vQyxRQUVBODVCLElBcmRBSixFQUFBOXRELE1BQUE5RCxFQUFBNnhELEdBQUFELEtBQUE3eEQsRUFBQUMsUUFBQTh4RCxJQXVkQSxTQUFBL3hELEVBQUFDLEVBQUFxeEQsR0FDQSxhQUNBLElBQUFTLEVBQ0EsbUJBQUFscUQsUUFBQUEsT0FBQUMsY0FDQSxLQUFBaXFELEVBQUEsV0FDQSxPQUFBMXhELFFBQ0FpQixLQUFBckIsRUFBQXF4RCxFQUFBcnhELEVBQUFELE1BQUFBLEVBQUFDLFFBQUE4eEQsSUFDQSxTQUFBL3hELEVBQUFDLEVBQUFxeEQsR0FDQSxhQUNBLElBQUFTLEVBQ0EsbUJBQUFscUQsUUFBQUEsT0FBQUMsY0FDQSxLQUFBaXFELEVBQUEsV0FDQSxPQUFBN3hELFVBQ0FvQixLQUFBckIsRUFBQXF4RCxFQUFBcnhELEVBQUFELE1BQUFBLEVBQUFDLFFBQUE4eEQsSUFDQSxTQUFBL3hELEVBQUFDLEVBQUFxeEQsR0FDQSxhQUNBLElBQUFPLEVBQUFDLEVBQUFDLEVBQ0EsbUJBQUFscUQsUUFBQUEsT0FBQUMsU0FFQWdxRCxHQUFBUixFQUFBLEdBQUFBLEVBQUEsU0FDQSxLQUFBUyxFQUFBLG1CQUFBRixFQUNBLFNBQUEvbkIsRUFBQW1vQixHQUNBLE9BQUFBLEVBQUF5ZSxtQkFDQWdLLEdBQ0F6TSxVQUFBLG9CQUNBNVMsWUFBQSxFQUNBQyxPQUFBLFNBRUFyTCxLQUNBZ2UsVUFBQSx1QkFDQTVTLFlBQUEsRUFDQUMsT0FBQSxTQUVBcWYsS0FDQTFNLFVBQUEsY0FDQTVTLFlBQUEsRUFDQUMsT0FBQSxXQUVBckosRUFBQTJlLGVBQ0Fqd0MsS0FDQTR4QixhQUNBenVELEdBQ0FtcUUsVUFBQSxJQUNBNVMsWUFBQSxJQUdBdEksS0FBQSxzREFDQXNLLFlBQUEsRUFDQW1FLFlBQUEsRUFDQXNMLFVBQUEsT0FFQThOLElBQ0E3bkIsS0FBQSxrQ0FDQVIsYUFDQXp1RCxHQUNBbXFFLFVBQUEsU0FBQXBSLEVBQUF6SyxFQUFBbDhCLEVBQUErL0IsRUFBQTk5QixHQUNBLE9BQUFqQyxFQUFBLEdBQUEsR0FBQSxNQUFBazhCLEVBQUErQixPQUFBaitCLEVBQUEsSUFBQTJtQyxFQUFBekssRUFBQStCLE9BQUFqK0IsRUFBQSxHQUFBMm1DLEVBQ0FBLEVBQUEzbUMsRUFBQSxHQUFBLEdBQUEsTUFBQWs4QixFQUFBK0IsT0FBQWorQixFQUFBLEdBQUFrOEIsRUFBQStCLE9BQUFqK0IsRUFBQSxHQUFBMm1DLEVBQUEsSUFBQUEsR0FBQUEsRUFBQSxLQUFBQSxFQUNBLElBQUF6eUQsT0FBQSxzQ0FBQXlELEtBQUFndkQsSUFFQXhCLFlBQUEsSUFHQStHLFNBQUEsU0FBQXlZLEVBQUExWSxFQUFBaHFDLEdBQ0EsT0FBQTBpRCxHQUVBL04sVUFBQSxXQUVBZ08sT0FDQS9uQixLQUFBLDRFQUNBTyxRQUFBLEVBQ0F5VixjQUFBLFNBQUE2RSxFQUFBejFDLEdBQ0EsT0FBQXkxQyxFQUFBQSxFQUFBNWxFLGVBQUF0QyxRQUFBLFVBQUEsS0FFQTZzRCxhQUNBMzVCLEtBQ0FxMUMsVUFBQSxpQ0FDQTVTLFlBQUEsRUFDQUMsT0FBQSxTQUVBeWYsS0FDQTlNLFVBQUEsZUFDQTVTLFlBQUEsRUFDQUMsT0FBQSxVQUdBOEcsU0FBQSxTQUFBeVksRUFBQTFZLEVBQUFocUMsR0FDQSxPQUFBMGlELEdBRUEvTixVQUFBLFNBRUFrTyxLQUNBam9CLEtBQUEscUJBRUFrb0IsS0FDQWxvQixLQUFBLFlBQ0FSLGFBQ0Eyb0IsR0FDQWpOLFVBQUEsNEJBQ0E1UyxZQUFBLEVBQ0FDLE9BQUEsVUFHQXNPLGlCQUFBLEVBQ0FwSSxZQUFBLEtBRUF2UCxJQXRGQUosRUFBQTl0RCxNQUFBOUQsRUFBQTZ4RCxHQUFBRCxLQUFBN3hELEVBQUFDLFFBQUE4eEQsSUF3RkEsU0FBQS94RCxFQUFBQyxFQUFBcXhELEdBQ0EsYUFDQSxJQUFBTyxFQUFBQyxFQUFBQyxFQUNBLG1CQUFBbHFELFFBQUFBLE9BQUFDLFNBRUFncUQsR0FBQVIsRUFBQSxHQUFBQSxFQUFBLFNBQ0EsS0FBQVMsRUFBQSxtQkFBQUYsRUFDQSxTQUFBL25CLEVBQUFtb0IsRUFBQTNzRCxHQUNBLFNBQUE2MUUsRUFBQUMsRUFBQWpqRCxHQUNBLElBQUEsSUFBQWtqRCxFQUFBLEdBQUF2M0UsRUFBQSxFQUFBQSxFQUFBczNFLEVBQUFuNEUsT0FBQWEsSUFBQW11RCxFQUFBbnZELFVBQUF5dkQsWUFBQTZvQixFQUFBbjlCLE9BQUFuNkMsS0FBQXEwQixFQUFBbzZCLFlBQUE2b0IsRUFBQW45QixPQUFBbjZDLEtBQUFxMEIsRUFBQXUxQyxlQUFBdDVELFFBQUFnbkUsRUFBQW45QixPQUFBbjZDLElBQUFxMEIsRUFBQXUxQyxlQUFBcHBFLE1BQUE4MkUsRUFBQW45QixPQUFBbjZDLElBQUFxMEIsRUFBQXc3QixpQkFBQXYvQyxRQUFBZ25FLEVBQUFuOUIsT0FBQW42QyxJQUFBcTBCLEVBQUF3N0IsaUJBQUFydkQsTUFBQTgyRSxFQUFBbjlCLE9BQUFuNkMsSUFBQXEwQixFQUFBdTdCLFlBQUF0L0MsUUFBQWduRSxFQUFBbjlCLE9BQUFuNkMsSUFBQXEwQixFQUFBdTdCLFlBQUFwdkQsTUFBQTgyRSxFQUFBbjlCLE9BQUFuNkMsSUFBQXEwQixFQUFBdThCLG1CQUFBMG1CLEVBQUFuOUIsT0FBQW42QyxHQUFBdTNFLEdBQUEsS0FBQUQsRUFBQW45QixPQUFBbjZDLEdBQUF1M0UsR0FBQUQsRUFBQW45QixPQUFBbjZDLEdBQ0EsT0FBQXUzRSxFQUVBLE9BQUFwcEIsRUFBQTJlLGVBQ0EwSyxTQUNBdm9CLEtBQUEsU0FBQTU2QixHQUNBLEdBQUEsSUFBQUEsRUFBQW83QixRQUFBcHRELE1BQUFneUIsRUFBQW9qRCxpQkFBQXBqRCxFQUFBb2pELGNBQUFwakQsRUFBQW83QixRQUNBcDdCLEVBQUFvN0IsT0FBQSxFQUFBcDdCLEVBQUEyc0MsaUJBQUEzc0MsRUFBQTJsQyxhQUFBLE1BQUEzbEMsRUFBQTJsQyxXQUFBM2xDLEVBQUEyc0MsZUFBQSxJQUFBLE1BQUEzc0MsRUFBQTJsQyxXQUFBM2xDLEVBQUEyc0MsZUFBQSxJQUFBM3NDLEVBQUEyc0MsZUFBQSxJQUNBLE1BQUEzc0MsRUFBQTJzQyxpQkFBQTNzQyxFQUFBd2pDLDBCQUFBcjJELEdBQUE2eUIsRUFBQXFqRCxVQUFBcmpELEVBQUFxakQsV0FBQSxLQUFBcmpELEVBQUEyc0MsZUFDQTNzQyxFQUFBcWpELFlBQUEsaUJBQUFyakQsRUFBQXNqRCxXQUFBMW1ELFNBQUFvRCxFQUFBc2pELGFBQUF0akQsRUFBQXNqRCxVQUFBMS9DLFNBQUE1RCxFQUFBc2pELFlBQ0ExbUQsU0FBQW9ELEVBQUFvakQsZ0JBQUEsQ0FDQSxJQUFBRyxFQUFBbDJFLEtBQUEyb0MsTUFBQWhXLEVBQUFvakQsY0FBQXBqRCxFQUFBc2pELFdBQUFFLEVBQUF4akQsRUFBQW9qRCxjQUFBcGpELEVBQUFzakQsVUFDQXRqRCxFQUFBb2pELGNBQUF4L0MsU0FBQTVELEVBQUFvakQsZ0JBQUEsSUFBQUksRUFBQUQsRUFBQSxFQUFBQSxHQUNBdmpELEVBQUFvakQsY0FBQSxJQUFBcGpELEVBQUFvakQsY0FBQSxLQUVBcGpELEVBQUFxN0IsWUFBQXZ3RCxPQUFBLElBQUFrMUIsRUFBQXE3QixZQUFBcjdCLEVBQUFxN0IsWUFBQXZWLE9BQUEsSUFDQSxlQUFBOWxCLEVBQUFreUMsc0JBQUEsS0FBQWx5QyxFQUFBcTdCLGNBQUEsSUFBQXI3QixFQUFBeWpELGtCQUFBempELEVBQUFreUMscUJBQUEsT0FDQWx5QyxFQUFBbzZCLFlBQUEsS0FBQXA2QixFQUFBbzZCLFlBQUEsS0FBQXA2QixFQUFBbzZCLFlBQUEsS0FBQTJiLGlCQUFBLEtBQ0EsSUFBQS8xQyxFQUFBdTZCLGVBQUF2NkIsRUFBQWt5QyxxQkFBQSxlQUFBbHlDLEVBQUFreUMscUJBQUEsTUFBQWx5QyxFQUFBa3lDLHFCQUNBbHlDLEVBQUEwakQsZ0JBQUEsRUFBQTExRSxNQUFBZ3lCLEVBQUEyakQsVUFBQTNqRCxFQUFBMmpELE9BQUEsR0FBQTNqRCxFQUFBNGpELGdCQUFBLEdBQ0EsSUFBQWhwQixFQUFBLE1BQ0EsR0FBQUEsR0FBQW9vQixFQUFBaGpELEVBQUE3QyxPQUFBNkMsSUFBQSxJQUFBQSxFQUFBeWpELGdCQUFBN29CLEdBQUEsT0FBQTU2QixFQUFBb2pELGNBQUEsSUFBQXhvQixHQUFBLEtBQUE1NkIsRUFBQW9qRCxjQUFBLElBQ0FwakQsRUFBQTJqRCxTQUFBeDJFLEVBQUEsQ0FDQTZ5QixFQUFBMGxDLDJCQUFBMWxDLEVBQUE0akQsZUFBQSxJQUFBNWpELEVBQUEybEMsV0FDQSxJQUFBa2UsRUFBQTdqRCxFQUFBMmpELE9BQUE3NkUsV0FBQThHLE1BQUEsS0FDQWd0QixTQUFBaW5ELEVBQUEsSUFBQUEsRUFBQSxJQUFBam5ELFNBQUFpbkQsRUFBQSxLQUFBanBCLEdBQUE1NkIsRUFBQTBsQywyQkFBQSxLQUFBMWxDLEVBQUEyakQsT0FBQSxLQUFBMzFFLE1BQUFneUIsRUFBQTJqRCxTQUFBLy9DLFNBQUE1RCxFQUFBMmpELFFBQUEsS0FBQTNqRCxFQUFBMGpELGVBQUE5b0IsR0FBQSxJQUFBNTZCLEVBQUEwbEMsMkJBQUEsT0FBQTFsQyxFQUFBMmpELE9BQUEsS0FBQS9vQixHQUFBNTZCLEVBQUEwbEMsMkJBQUEsS0FBQTFsQyxFQUFBMmpELE9BQUEsS0FFQSxPQUFBL29CLEdBQUFvb0IsRUFBQWhqRCxFQUFBNUMsT0FBQTRDLEdBQUE0NkIsR0FBQSxNQUFBNTZCLEVBQUFtN0IsUUFBQSxFQUFBUCxHQUVBUyxZQUFBLEdBQ0FGLFFBQUEsRUFDQXdvQixPQUFBLElBQ0FELGdCQUFBLEVBQ0FJLHFCQUFBLEVBQ0FuZSxXQUFBLElBQ0F1TSxxQkFBQSxhQUNBb1IsVUFBQSxFQUNBM1csZUFBQSxHQUNBMFcsV0FBQSxFQUNBVSxZQUFBLEVBQ0FDLGdCQUNBQyxNQUFBLElBQ0FDLEtBQUEsSUFFQWQsY0FBQSxJQUNBSyxpQkFBQSxFQUNBdG1ELE9BQUEsR0FDQUMsT0FBQSxHQUNBczRDLFlBQUEsRUFDQWtPLGdCQUFBLEVBQ0F2NkIsSUFBQSxLQUNBanVCLElBQUEsS0FDQTRDLEtBQUEsRUFDQWtuQyxZQUFBLEVBQ0FtRSxZQUFBLEVBQ0E4YSxnQkFBQSxFQUNBeFAsVUFBQSxVQUNBL08sY0FBQSxTQUFBNUosRUFBQWorQixFQUFBdTdCLEVBQUE4SyxFQUFBcGtDLEdBQ0EsR0FBQSxNQUFBczVCLEdBQUFBLElBQUF0NUIsRUFBQWdrRCxlQUFBQyxNQUFBLE9BQUEsSUFBQWprRCxFQUFBK2pELGFBQUEvakQsRUFBQW9rRCxXQUFBcGtELEVBQUFva0QsYUFBQWozRSxJQUFBNnlCLEVBQUFva0QsV0FDQSxLQUFBcG9CLEVBQUFqbUQsS0FBQSxNQUNBMnRELE1BQUEzbEMsRUFDQXNtRCxRQUFBLElBRUEsSUFBQSxJQUFBamdCLEdBQUE5SyxJQUFBdDVCLEVBQUEybEMsWUFBQTNsQyxFQUFBMmpELFNBQUF4MkUsSUFBQWEsTUFBQWd5QixFQUFBMmpELFNBQUEvL0MsU0FBQTVELEVBQUEyakQsUUFBQSxHQUFBLENBQ0EsSUFBQXZSLEVBQUF6Z0MsRUFBQS9pQyxRQUFBb3hCLEVBQUEybEMsV0FBQTNKLEdBQ0EsSUFBQSxJQUFBb1csRUFBQSxPQUFBLElBQUFweUMsRUFBQXU2QixhQUFBeDhCLElBQUFxMEMsR0FDQTFPLE1BQUEwTyxFQUFBLEdBR0EsT0FBQSxHQUVBdkssZUFBQSxTQUFBN0wsRUFBQWtrQixFQUFBbGdELEdBQ0EsSUFBQTVDLEVBQUE0QyxFQUFBNUMsT0FBQXh0QixNQUFBLElBQUF1dEIsRUFBQTZDLEVBQUE3QyxPQUFBdnRCLE1BQUEsSUFDQSxHQUFBc3dFLEVBQUFuaUQsTUFBQTV3QixHQUFBK3lFLEVBQUF4YyxRQUFBdjJELElBQUEsSUFBQSt5RSxFQUFBbUUsT0FBQSxPQUFBbkUsRUFDQSxJQUFBL1gsRUFBQStYLEVBQUF4YyxRQUFBdjJELEVBQUEreUUsRUFBQXhjLE1BQUF3YyxFQUFBbmlELElBQUEya0QsRUFBQTFtQixFQUFBdnpELFFBQ0F1M0IsRUFBQXU2QixlQUFBNE4sRUFBQXVhLEVBQUE1M0UsT0FBQXE5RCxFQUFBLEVBQUF1YSxFQUFBQSxFQUFBeCtELFdBQ0EsSUFBQW9nRSxFQUFBNUIsRUFBQXZhLEdBQ0EsR0FBQW1jLElBQUF0a0QsRUFBQTJzQyxpQkFBQTJYLEVBQUE1QixFQUFBdmEsR0FBQSxJQUNBQSxJQUFBdWEsRUFBQTUzRSxPQUFBazFCLEVBQUE1QyxPQUFBdHlCLE9BQUEsR0FBQXc1RSxJQUFBdGtELEVBQUEybEMsV0FBQSxPQUFBdWEsRUFDQW9FLElBQUFuM0UsR0FBQW0zRSxJQUFBdGtELEVBQUEybEMsWUFBQTJlLElBQUF0a0QsRUFBQWdrRCxlQUFBQyxPQUFBSyxJQUFBdGtELEVBQUFna0QsZUFBQUUsT0FBQXhCLEVBQUF2YSxHQUFBLElBQ0Fub0MsRUFBQTdDLE9BQUFyeUIsT0FBQSxHQUFBcTlELEtBQUEsSUFBQW5vQyxFQUFBb2tELFdBQUEsRUFBQSxJQUFBamMsRUFBQW5vQyxFQUFBN0MsT0FBQXJ5QixPQUFBLElBQUEsSUFBQWsxQixFQUFBb2tELFdBQUEsRUFBQSxHQUFBam5ELEVBQUFnckMsSUFBQSxJQUFBbm9DLEVBQUFva0QsV0FBQSxFQUFBLElBQUEsSUFBQXBrRCxFQUFBNUMsT0FBQXR5QixPQUFBLEdBQUFxOUQsR0FBQXVhLEVBQUE1M0UsT0FBQWsxQixFQUFBNUMsT0FBQXR5QixTQUFBLElBQUFrMUIsRUFBQW9rRCxXQUFBLEVBQUEsS0FBQWhuRCxFQUFBK3FDLEdBQUF1YSxFQUFBNTNFLE9BQUFrMUIsRUFBQTVDLE9BQUF0eUIsU0FBQSxJQUFBazFCLEVBQUFva0QsV0FBQSxFQUFBLEtBQUEsTUFDQWpuRCxFQUFBQSxFQUFBcG5CLEtBQUEsSUFBQXFuQixFQUFBQSxFQUFBcm5CLEtBQUEsSUFDQSxJQUFBd3VFLEVBQUE3QixFQUFBM3NFLEtBQUEsSUFBQXhJLFFBQUE0dkIsRUFBQSxJQUNBLEdBRUFvbkQsR0FEQUEsR0FEQUEsR0FBQUEsRUFBQUEsRUFBQWgzRSxRQUFBNnZCLEVBQUEsS0FBQTd2QixRQUFBLElBQUEwRSxPQUFBNm5ELEVBQUF5UCxZQUFBdnBDLEVBQUEyc0MsZ0JBQUEsS0FBQSxLQUNBcC9ELFFBQUEsSUFBQTBFLE9BQUEsS0FBQTZuRCxFQUFBeVAsWUFBQXZwQyxFQUFBZ2tELGVBQUFDLE9BQUEsSUFBQSxLQUFBLEtBQ0ExMkUsUUFBQSxJQUFBMEUsT0FBQTZuRCxFQUFBeVAsWUFBQXZwQyxFQUFBZ2tELGVBQUFFLE1BQUEsS0FBQSxJQUNBbDJFLE1BQUFneUIsRUFBQXE3QixlQUFBa3BCLEVBQUFBLEVBQUFoM0UsUUFBQSxJQUFBMEUsT0FBQTZuRCxFQUFBeVAsWUFBQXZwQyxFQUFBcTdCLGFBQUEsS0FBQSxLQUNBa3BCLEVBQUF6NUUsT0FBQSxHQUFBLElBQUF5NUUsRUFBQTM3RSxRQUFBbzNCLEVBQUEybEMsY0FBQSxNQUFBMmUsSUFBQUMsRUFBQUEsRUFBQWgzRSxRQUFBLE9BQUEsS0FDQWczRSxFQUFBQSxFQUFBaDNFLFFBQUEsTUFBQSxLQUFBZzNFLEVBQUF6K0IsT0FBQSxLQUFBOWxCLEVBQUEybEMsWUFBQSxLQUFBM2xDLEVBQUEybEMsYUFBQSxJQUFBM2xDLEVBQUF1NkIsZUFBQWdxQixFQUFBLElBQUFBLEdBQ0EsS0FBQUEsRUFBQSxDQUNBLEdBQUFBLEVBQUFBLEVBQUEzMEUsTUFBQSxNQUFBb3dCLEVBQUEwakQsZ0JBQUExakQsRUFBQThqRCxxQkFBQSxTQUFBNUQsRUFBQWp3RCxRQUFBMk0sU0FBQW9ELEVBQUEyakQsUUFBQSxDQUNBLElBQUFhLEVBQUE3eUMsRUFBQS9pQyxRQUFBb3hCLEVBQUEybEMsV0FBQTRlLEdBQUFFLEVBQUE5eUMsRUFBQS9pQyxRQUFBb3hCLEVBQUEybEMsV0FBQStjLElBQ0EsSUFBQThCLElBQUFELEVBQUE1N0UsS0FBQXEzQixFQUFBMmxDLFlBQUE2ZSxFQUFBRCxFQUFBejVFLE9BQUEsR0FDQSxJQUFBLElBQUFhLEVBQUEsRUFBQUEsR0FBQXEwQixFQUFBMmpELE9BQUFoNEUsSUFBQXEwQixFQUFBMGpELGtCQUFBMWpELEVBQUE4akQscUJBQUEsU0FBQTVELEVBQUFqd0QsUUFBQXMwRCxFQUFBQyxFQUFBNzRFLEtBQUF3QixHQUFBbzNFLEVBQUFDLEVBQUE3NEUsS0FBQXEwQixFQUFBcTdCLFlBQUF2VixPQUFBLElBQUEsSUFBQTIrQixHQUFBL0IsRUFBQStCLEVBQUE5NEUsS0FBQXdCLElBQUFvM0UsRUFBQUMsRUFBQTc0RSxHQUFBNDRFLEVBQUFDLEVBQUE3NEUsSUFBQSsyRSxFQUFBK0IsRUFBQTk0RSxJQUFBNDRFLEVBQUFDLEVBQUE3NEUsR0FBQXUwRSxFQUFBN2tCLGFBQUFyN0IsRUFBQXE3QixZQUFBdlYsT0FBQSxHQUVBLElBQUEsSUFBQTlsQixFQUFBcWpELFdBQUEsS0FBQXJqRCxFQUFBMnNDLGdCQUFBMlgsSUFBQXRrRCxFQUFBMmxDLFlBQUF1YSxFQUFBbmlELE1BQUE1d0IsSUFBQSt5RSxFQUFBbUUsT0FBQUUsRUFBQUEsRUFBQXh1RSxLQUFBLFFBQUEsQ0FDQSxJQUFBMnVFLEVBQUFILEVBQUFBLEVBQUF6NUUsT0FBQSxLQUFBazFCLEVBQUEybEMsWUFBQXVhLEVBQUE1bUIsSUFBQXQ1QixFQUFBMmxDLFdBQ0E0ZSxFQUFBenFCLEVBQUEsU0FBQWtDLEVBQUFoOEIsR0FDQSxJQUFBMmtELEVBQUEsR0FDQSxHQUFBQSxHQUFBLElBQUEza0QsRUFBQTJzQyxlQUFBLEtBQUEzc0MsRUFBQXNqRCxVQUFBLFFBQUEsS0FBQXRqRCxFQUFBMmxDLFdBQUEsQ0FDQSxJQUFBaWYsRUFBQTVvQixFQUFBam1ELEtBQUEsSUFBQW5HLE1BQUFvd0IsRUFBQTJsQyxZQUNBaWYsRUFBQSxLQUFBRCxHQUFBM2tELEVBQUEybEMsV0FBQSxLQUFBaWYsRUFBQSxHQUFBN3ZFLE1BQUEsY0FBQSxHQUFBakssT0FBQSxLQUVBLE9BQUE2NUUsRUFOQSxDQU9BSixFQUFBdmtELElBQ0F1NkIsY0FBQSxFQUNBaUQsWUFBQSxFQUNBcEQsYUFDQTM1QixLQUNBcTFDLFVBQUEsU0FDQTVTLFlBQUEsTUFHQWhWLE9BQUFxMkIsRUFBQXh1RSxLQUFBLEtBQUEydUUsSUFBQUgsR0FBQXZrRCxFQUFBMmxDLFlBQ0E0ZSxFQUFBeitCLE9BQUEsS0FBQTlsQixFQUFBMnNDLGdCQUFBNFgsRUFBQXp6QixPQUFBLElBR0EsR0FBQTl3QixFQUFBb2tELFlBQUEsU0FBQWxFLEVBQUFqd0QsUUFBQStQLEVBQUFva0QsV0FBQSxNQUFBRyxHQUNBQSxFQUFBcG5ELEVBQUFvbkQsRUFBQUEsR0FBQW5uRCxFQUFBNEMsRUFBQW9rRCxhQUFBRyxFQUFBdmtELEVBQUFna0QsZUFBQUMsTUFBQU0sRUFDQUEsR0FBQXZrRCxFQUFBZ2tELGVBQUFFLE1BQUFLLEVBQUFBLEVBQUEzMEUsTUFBQSxJQUNBMDBFLElBQUFuM0UsRUFBQSxHQUFBbTNFLElBQUF0a0QsRUFBQTJsQyxZQUFBMmUsSUFBQXRrRCxFQUFBZ2tELGVBQUFDLE9BQUFLLElBQUF0a0QsRUFBQWdrRCxlQUFBRSxNQUFBL2IsRUFBQXgyQixFQUFBL2lDLFFBQUEsSUFBQTIxRSxLQUFBLEVBQUFBLEVBQUFwYyxHQUFBbWMsRUFBQW5jLEVBQUErWCxFQUFBeGMsT0FBQSxPQUFBLEdBQUE0Z0IsSUFBQXRrRCxFQUFBMmxDLFlBQUEyZSxJQUFBdGtELEVBQUFna0QsZUFBQUMsT0FBQUssSUFBQXRrRCxFQUFBZ2tELGVBQUFFLEtBQUEsQ0FDQSxJQUFBVyxFQUFBbHpDLEVBQUEvaUMsUUFBQTAxRSxFQUFBQyxJQUNBLElBQUFNLElBQUExYyxFQUFBMGMsR0FFQTdrRCxFQUFBdTZCLGVBQUE0TixFQUFBb2MsRUFBQXo1RSxPQUFBcTlELEVBQUEsRUFBQW9jLEVBQUFBLEVBQUFyZ0UsV0FDQSxJQUFBc2dELEdBQ0FkLE1BQUE0Z0IsSUFBQW4zRSxHQUFBK3lFLEVBQUFuaUQsTUFBQTV3QixFQUFBZzdELEdBQUFub0MsRUFBQXU2QixjQUFBLEVBQUEsR0FBQTROLEVBQ0FuTSxPQUFBdW9CLEVBQ0FoaEIsa0JBQUEyYyxFQUFBbUUsUUFBQXJvQixFQUFBam1ELEtBQUEsTUFBQXd1RSxFQUFBeHVFLEtBQUEsS0FFQSxPQUFBeXVELEVBQUFqQixrQkFBQWlCLEVBQUEwYixHQUVBN1gsY0FBQSxTQUFBM3pELEVBQUFzbkQsRUFBQW1NLEVBQUFub0MsR0FDQSxHQUFBdHJCLEVBQUEsT0FBQUEsRUFBQTdHLE1BQ0EsSUFBQSxVQUNBLE9BQUFteUIsRUFBQTZuQyxlQUFBN0wsR0FDQTBILE1BQUF5RSxFQUNBa2MsUUFBQSxHQUNBcmtELEdBRUEsSUFBQSxPQUNBLElBQUEsV0FDQSxJQUFBOGtELEVBQ0EsSUFBQTlrRCxFQVFBQSxHQVBBK2tELHFCQUFBNTNFLElBQUEsT0FBQTZ5QixFQUFBcXBCLE1BQUFycEIsRUFBQXFwQixJQUFBcnBCLEVBQUFxcEIsSUFBQXZnRCxXQUFBeUUsUUFBQSxJQUFBMEUsT0FBQTZuRCxFQUFBeVAsWUFBQXZwQyxFQUFBMnNDLGdCQUFBLEtBQUEsSUFDQSxNQUFBM3NDLEVBQUEybEMsYUFBQTNsQyxFQUFBcXBCLElBQUFycEIsRUFBQXFwQixJQUFBOTdDLFFBQUF5eUIsRUFBQTJsQyxXQUFBLE1BQ0EzbEMsRUFBQXFwQixJQUFBenNCLFNBQUFvRCxFQUFBcXBCLEtBQUFwN0MsV0FBQSt4QixFQUFBcXBCLEtBQUEyN0IsSUFBQWgzRSxNQUFBZ3lCLEVBQUFxcEIsT0FBQXJwQixFQUFBcXBCLElBQUE0N0IsT0FBQUMsWUFDQSxPQUFBbGxELEVBQUE1RSxNQUFBNEUsRUFBQTVFLElBQUE0RSxFQUFBNUUsSUFBQXR5QixXQUFBeUUsUUFBQSxJQUFBMEUsT0FBQTZuRCxFQUFBeVAsWUFBQXZwQyxFQUFBMnNDLGdCQUFBLEtBQUEsSUFDQSxNQUFBM3NDLEVBQUEybEMsYUFBQTNsQyxFQUFBNUUsSUFBQTRFLEVBQUE1RSxJQUFBN3RCLFFBQUF5eUIsRUFBQTJsQyxXQUFBLE1BQ0EzbEMsRUFBQTVFLElBQUF3QixTQUFBb0QsRUFBQTVFLEtBQUFudEIsV0FBQSt4QixFQUFBNUUsS0FBQTRwRCxJQUFBaDNFLE1BQUFneUIsRUFBQTVFLE9BQUE0RSxFQUFBNUUsSUFBQTZwRCxPQUFBRSxZQUNBbmxELEVBQUEra0QsbUJBQUEsUUFDQSxPQUFBL2tELEVBQUFxcEIsS0FBQSxPQUFBcnBCLEVBQUE1RSxJQUFBLENBQ0EsR0FBQTBwRCxFQUFBOWtELEVBQUFpcUMsU0FBQWpPLEVBQUFqbUQsS0FBQSxJQUFBNUksRUFBQXdrQyxFQUFBcmxDLFVBQUEwekIsR0FDQW1rRCxnQkFBQSxLQUNBLE9BQUFua0QsRUFBQXFwQixLQUFBeTdCLEVBQUE5a0QsRUFBQXFwQixJQUFBLE9BQUFycEIsRUFBQW9rRCxXQUFBcGtELEVBQUFxcEIsSUFBQSxFQUNBcnBCLEVBQUE2bkMsZUFBQTduQyxFQUFBcXBCLElBQUF2Z0QsV0FBQXlFLFFBQUEsSUFBQXl5QixFQUFBMmxDLFlBQUEvMUQsTUFBQSxLQUNBOHpELE1BQUF5RSxFQUNBa2MsUUFBQSxFQUNBaHBCLFlBQUEsS0FDQXI3QixHQUNBLEdBQUEsT0FBQUEsRUFBQTVFLEtBQUEwcEQsRUFBQTlrRCxFQUFBNUUsSUFBQSxPQUFBNEUsRUFBQW9rRCxXQUFBcGtELEVBQUE1RSxJQUFBLEVBQ0E0RSxFQUFBNm5DLGVBQUE3bkMsRUFBQTVFLElBQUF0eUIsV0FBQXlFLFFBQUEsSUFBQXl5QixFQUFBMmxDLFlBQUEvMUQsTUFBQSxLQUNBOHpELE1BQUF5RSxFQUNBa2MsUUFBQSxFQUNBaHBCLFlBQUEsS0FDQXI3QixHQUVBLE9BQUFBLEVBQUE2bkMsZUFBQTdMLEdBQ0EwSCxNQUFBeUUsRUFDQTlNLFlBQUEsSUFDQXByQyxNQUFBLFFBQ0ErUCxHQUVBLElBQUEsWUFDQSxPQUNBMGpDLE1BQUF5RSxHQWhDQSxJQUFBbm9DLEdBb0NBazdCLE9BQ0FrcUIsWUFBQSxTQUFBcGxELEVBQUFxbEQsR0FDQSxPQUFBQSxFQUFBLElBQUFwekUsT0FBQSxJQUFBNm5ELEVBQUF5UCxZQUFBdnBDLEVBQUFna0QsZUFBQUMsT0FBQSxPQUFBLElBQUFoeUUsT0FBQSxJQUFBNm5ELEVBQUF5UCxZQUFBdnBDLEVBQUFna0QsZUFBQUMsT0FBQSxZQUVBcUIsYUFBQSxTQUFBdGxELEdBQ0EsT0FBQSxJQUFBL3RCLE9BQUEsT0FBQTZuRCxFQUFBeVAsWUFBQXZwQyxFQUFBMnNDLGdCQUFBN1MsRUFBQXlQLFlBQUF2cEMsRUFBQXE3QixZQUFBdlYsT0FBQSxJQUFBLFFBR0FzVSxhQUNBcC9DLEtBQ0E4NkQsVUFBQSxTQUFBcFIsRUFBQXpLLEVBQUFsOEIsRUFBQSsvQixFQUFBOTlCLEVBQUFva0MsR0FDQSxJQUFBckYsRUFBQWpCLEVBQUEsSUFBQTdyRCxPQUFBLE9BQUE2bkQsRUFBQXlQLFlBQUF2cEMsRUFBQTJzQyxnQkFBQSxLQUFBajNELEtBQUFndkQsR0FBQSxJQUFBenlELE9BQUEsU0FBQXlELEtBQUFndkQsR0FDQSxJQUFBLElBQUEzRixHQUNBLElBQUEsSUFBQS8rQixFQUFBdTZCLGNBQUFOLEVBQUE2QixlQUFBLzlCLEtBQUE1d0IsR0FBQSxNQUFBOHNELEVBQUE2QixlQUFBLzlCLEdBQUFocEIsTUFBQTJvRCxNQUFBMEcsRUFBQSxDQUNBLElBQUFtZ0IsRUFBQXRxQixFQUFBK0IsT0FBQWptRCxLQUFBLElBQUF3dkUsR0FBQWhCLEdBQUFBLEVBQUFBLEVBQUFoM0UsUUFBQSxJQUFBMEUsT0FBQSxLQUFBNm5ELEVBQUF5UCxZQUFBdnBDLEVBQUFna0QsZUFBQUMsT0FBQSxJQUFBLEtBQUEsS0FBQTEyRSxRQUFBLElBQUEwRSxPQUFBNm5ELEVBQUF5UCxZQUFBdnBDLEVBQUFna0QsZUFBQUUsTUFBQSxLQUFBLEtBQUF0MEUsTUFBQW93QixFQUFBMmxDLFlBQ0E0ZixFQUFBejZFLE9BQUEsSUFBQXk2RSxFQUFBLEdBQUFBLEVBQUEsR0FBQWg0RSxRQUFBLEtBQUF5eUIsRUFBQXE3QixZQUFBdlYsT0FBQSxLQUNBLE1BQUF5L0IsRUFBQSxLQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQWg0RSxRQUFBLEtBQUF5eUIsRUFBQXE3QixZQUFBdlYsT0FBQSxLQUNBeStCLEVBQUFnQixFQUFBLEdBQUF2bEQsRUFBQTJsQyxXQUFBNGYsRUFBQSxJQUFBLEdBQ0EsSUFBQUMsRUFBQXZyQixFQUFBOEIsUUFBQWhtRCxLQUFBLElBQ0EsSUFBQXd1RSxJQUFBdmtELEVBQUEybEMsYUFBQTRlLEVBQUFpQixHQUFBLE9BQUFqQixFQUFBeHZFLE1BQUEra0QsRUFBQXlQLFlBQUFpYyxHQUFBLE1BQUFBLEVBQUFBLEVBQUEvOEUsTUFBQSxHQUNBczJELEdBQUF3bEIsR0FBQUEsRUFBQUEsRUFBQWgzRSxRQUFBaTRFLEVBQUEsS0FBQTUxRSxNQUFBLEtBQUFtdUIsS0FBQTV3QixHQUNBNHdCLElBQUFBLEVBQ0E5WSxPQUFBOFksSUFFQUEsSUFBQUEsU0FHQSsvQixHQUFBNEcsSUFBQTFrQyxFQUFBMmxDLFlBQUExTCxFQUFBNkIsZUFBQS85QixFQUFBLEtBQUE1d0IsSUFBQThzRCxFQUFBK0IsT0FBQWorQixHQUFBLElBQ0FnaEMsR0FDQWhoQyxJQUFBQSxFQUFBLElBRUEsT0FBQWdoQyxHQUVBbUUsWUFBQSxHQUVBbm9ELEtBQ0ErNkQsVUFBQSxTQUFBcFIsRUFBQXpLLEVBQUFsOEIsRUFBQSsvQixFQUFBOTlCLEdBQ0EsT0FBQUEsRUFBQStqRCxhQUFBLE1BQUFyZixHQUFBQSxJQUFBMWtDLEVBQUFna0QsZUFBQUMsUUFFQS9nQixZQUFBLEVBQ0E3SCxZQUFBLElBRUF1bkIsS0FDQTlNLFVBQUEsU0FBQXBSLEVBQUF6SyxFQUFBbDhCLEVBQUErL0IsRUFBQTk5QixHQUNBLE9BQUFBLEVBQUErakQsWUFBQXJmLElBQUExa0MsRUFBQWdrRCxlQUFBRSxNQUVBaGhCLFlBQUEsRUFDQTdILFlBQUEsSUFFQW9xQixLQUNBM1AsVUFBQSxTQUFBcFIsRUFBQXpLLEVBQUFsOEIsRUFBQSsvQixFQUFBOTlCLEdBQ0EsSUFBQTBsRCxFQUFBLElBQUE1ckIsRUFBQXlQLFlBQUF2cEMsRUFBQTJsQyxZQUFBLElBQUE1RyxFQUFBLElBQUE5c0QsT0FBQXl6RSxHQUFBaHdFLEtBQUFndkQsR0FDQSxPQUFBM0YsR0FBQTlFLEVBQUE2QixlQUFBLzlCLElBQUFrOEIsRUFBQTZCLGVBQUEvOUIsR0FBQWhwQixNQUFBc21ELGNBQUFyN0IsRUFBQTJsQyxhQUFBNUcsR0FDQTJFLE1BQUEzbEMsRUFBQSxJQUNBZ2hDLEdBRUFtRSxZQUFBLEVBQ0E3SCxZQUFBLFNBQUFyN0IsR0FDQSxPQUFBQSxFQUFBMmxDLGNBSUFzRSxTQUFBLFNBQUF5WSxFQUFBMVksRUFBQWhxQyxHQUNBLEdBQUEsS0FBQWdxQyxJQUFBLElBQUFocUMsRUFBQXl6QyxTQUFBLE9BQUF6SixFQUNBLElBQUF1YSxFQUFBN0IsRUFBQW4xRSxRQUFBeXlCLEVBQUE3QyxPQUFBLElBQ0EsT0FBQW9uRCxHQUFBQSxFQUFBQSxFQUFBaDNFLFFBQUF5eUIsRUFBQTVDLE9BQUEsS0FBQTd2QixRQUFBLElBQUEwRSxPQUFBNm5ELEVBQUF5UCxZQUFBdnBDLEVBQUEyc0MsZ0JBQUEsS0FBQSxJQUNBLEtBQUEzc0MsRUFBQXE3QixZQUFBdlYsT0FBQSxLQUFBeStCLEVBQUFBLEVBQUFoM0UsUUFBQSxJQUFBMEUsT0FBQSt0QixFQUFBcTdCLFlBQUF2VixPQUFBLEdBQUEsS0FBQSxNQUNBOWxCLEVBQUFta0QsZ0JBQUEsS0FBQW5rRCxFQUFBMmxDLGFBQUEsSUFBQTRlLEVBQUEzN0UsUUFBQW8zQixFQUFBMmxDLGNBQUE0ZSxFQUFBQSxFQUFBaDNFLFFBQUF1c0QsRUFBQXlQLFlBQUFwZ0UsS0FBQWhCLEtBQUE2M0IsRUFBQTJsQyxZQUFBLE1BRUE0ZSxHQURBQSxFQUFBQSxFQUFBaDNFLFFBQUEsSUFBQTBFLE9BQUEsSUFBQTZuRCxFQUFBeVAsWUFBQXZwQyxFQUFBZ2tELGVBQUFDLFFBQUEsTUFDQTEyRSxRQUFBLElBQUEwRSxPQUFBNm5ELEVBQUF5UCxZQUFBdnBDLEVBQUFna0QsZUFBQUUsTUFBQSxLQUFBLElBQ0FlLE9BQUFWLElBQUFBLEdBRUF4OEIsV0FBQSxTQUFBaVUsRUFBQWg4QixHQUNBLElBQUEwaUQsRUFBQTFtQixFQUFBam1ELEtBQUEsSUFDQSxHQUFBaW1ELEVBQUF2ekQsUUFBQXNOLEtBQUEsTUFBQTJzRSxFQUFBLE9BQUEsRUFDQSxJQUFBNkIsRUFBQTdCLEVBQUFuMUUsUUFBQXl5QixFQUFBN0MsT0FBQSxJQUNBLE9BQUFvbkQsR0FBQUEsRUFBQUEsRUFBQWgzRSxRQUFBeXlCLEVBQUE1QyxPQUFBLEtBQUE3dkIsUUFBQSxJQUFBMEUsT0FBQTZuRCxFQUFBeVAsWUFBQXZwQyxFQUFBMnNDLGdCQUFBLEtBQUEsSUFDQSxNQUFBM3NDLEVBQUEybEMsYUFBQTRlLEVBQUFBLEVBQUFoM0UsUUFBQXVzRCxFQUFBeVAsWUFBQXZwQyxFQUFBMmxDLFlBQUEsTUFDQS9vQyxTQUFBMm5ELElBRUFoVCxhQUFBLFNBQUEwRCxFQUFBajFDLEdBQ0EsR0FBQUEsRUFBQW9rRCxXQUFBajNFLEVBQUE4bkUsRUFBQUEsRUFBQW5zRSxXQUFBZzlDLE9BQUFtdkIsRUFBQW5xRSxPQUFBLEtBQUFrMUIsRUFBQTJsQyxXQUFBc1AsRUFBQW5zRSxXQUFBZ29ELE9BQUEsRUFBQW1rQixFQUFBbnFFLE9BQUEsR0FBQW1xRSxFQUFBbnNFLFdBQ0EsS0FBQWszQixFQUFBMmxDLFlBQUEvb0MsU0FBQXE0QyxHQUFBLENBQ0EsSUFBQTBRLEVBQUExUSxFQUFBcmxFLE1BQUEsS0FBQTB6RSxFQUFBLEtBQUF0akQsRUFBQTJzQyxlQUFBL29DLFNBQUE1RCxFQUFBc2pELFdBQUEsRUFDQSxJQUFBcUMsRUFBQTc2RSxTQUFBNjZFLEVBQUEsR0FBQTc2RSxPQUFBdzRFLEdBQUFxQyxFQUFBLEdBQUE3NkUsT0FBQXc0RSxHQUFBcUMsRUFBQSxHQUFBNzZFLFFBQUF3NEUsR0FBQXFDLEVBQUEsR0FBQTc2RSxPQUFBdzRFLEtBQUFyTyxFQUFBQSxFQUFBMW5FLFFBQUEsSUFBQXl5QixFQUFBMmxDLGFBRUEsSUFBQWlnQixFQUFBM1EsRUFBQWxnRSxNQUFBLE1BQUE4d0UsRUFBQTVRLEVBQUFsZ0UsTUFBQSxPQUNBLEdBQUFrZ0UsRUFBQTRRLEdBQUFELEVBQUFDLEVBQUEvNkUsT0FBQTg2RSxFQUFBOTZFLFFBQUFtcUUsRUFBQUEsRUFBQTFuRSxRQUFBLE1BQUEsS0FBQUEsUUFBQSxJQUFBeXlCLEVBQUEybEMsWUFBQWlnQixFQUFBOTZFLE9BQUErNkUsRUFBQS82RSxRQUFBbXFFLEVBQUFBLEVBQUExbkUsUUFBQSxLQUFBLEtBQUFBLFFBQUEsSUFBQXl5QixFQUFBMmxDLFlBQUFzUCxFQUFBcnNFLFFBQUEsS0FBQXFzRSxFQUFBcnNFLFFBQUEsS0FBQXFzRSxFQUFBMW5FLFFBQUEsTUFBQSxJQUFBMG5FLEVBQUExbkUsUUFBQSxLQUFBLElBQUEwbkUsRUFBQTFuRSxRQUFBLElBQUEwRSxPQUFBNm5ELEVBQUF5UCxZQUFBdnBDLEVBQUEyc0MsZ0JBQUEsS0FBQSxJQUNBLElBQUEzc0MsRUFBQTJqRCxVQUFBLElBQUExTyxFQUFBcnNFLFFBQUEsS0FBQXFzRSxFQUFBQSxFQUFBdnFCLFVBQUEsRUFBQXVxQixFQUFBcnNFLFFBQUEsT0FBQSxJQUFBcXNFLEVBQUFyc0UsUUFBQSxPQUFBcXNFLEVBQUFBLEVBQUF2cUIsVUFBQSxFQUFBdXFCLEVBQUFyc0UsUUFBQSxRQUNBLEtBQUFvM0IsRUFBQTJsQyxZQUFBL29DLFNBQUFvRCxFQUFBMmpELFVBQUEsSUFBQTFPLEVBQUFyc0UsUUFBQW8zQixFQUFBMmxDLFlBQUEsQ0FDQSxJQUFBbWdCLEVBQUE3USxFQUFBcmxFLE1BQUFvd0IsRUFBQTJsQyxZQUFBLEdBQUE1d0QsTUFBQSxJQUFBOUMsT0FBQSxTQUFBLEdBQ0EsR0FBQTJ4QixTQUFBNUQsRUFBQTJqRCxRQUFBbUMsRUFBQWg5RSxXQUFBZ0MsT0FBQSxDQUNBLElBQUFpN0UsRUFBQTE0RSxLQUFBcWpELElBQUEsR0FBQTlzQixTQUFBNUQsRUFBQTJqRCxTQUNBMU8sRUFBQUEsRUFBQTFuRSxRQUFBdXNELEVBQUF5UCxZQUFBdnBDLEVBQUEybEMsWUFBQSxLQUNBc1AsR0FBQUEsRUFBQTVuRSxLQUFBdTZDLE1BQUEzNUMsV0FBQWduRSxHQUFBOFEsR0FBQUEsR0FBQWo5RSxXQUFBeUUsUUFBQSxJQUFBeXlCLEVBQUEybEMsYUFHQSxPQUFBc1AsR0FFQXJXLGlCQUFBLFNBQUEzRSxFQUFBMS9CLEVBQUEwaUMsRUFBQWEsRUFBQTk5QixHQUNBLElBQUFtbUMsRUFBQWxNLEVBQUE2QixlQUFBdmhDLEdBQUF5ckQsRUFBQTdmLEVBQUF2dEQsUUFBQW9uQixFQUFBMmxDLFlBQUEsT0FBQTFMLEVBQUE2QixlQUFBdmhDLEdBQUF4bEIsTUFBQTdLLEtBQUEsSUFBQTgxQixFQUFBNGpELGdCQUFBemQsRUFBQXZ0RCxRQUFBb25CLEVBQUEybEMsWUFBQTFMLEVBQUE2QixlQUFBdmhDLEVBQUEsSUFBQSxPQUFBMC9CLEVBQUE2QixlQUFBdmhDLEVBQUEsR0FBQXhsQixNQUFBN0ssSUFBQTB5QixTQUFBdXBDLEVBQUF2dEQsUUFBQTJoQixJQUFBMGlDLEdBQUFrSixFQUFBdnRELFFBQUFvbkIsRUFBQTJzQyxnQkFBQXhHLEVBQUF2dEQsUUFBQW9uQixFQUFBZ2tELGVBQUFDLE9BQUE5ZCxFQUFBdnRELFFBQUFvbkIsRUFBQWdrRCxlQUFBRSxLQUNBLE9BQUE4QixHQUFBLE1BQUE3ZixFQUFBcHhELE1BQUFzb0QsV0FBQSxNQUFBOEksRUFBQXB4RCxNQUFBc29ELFlBQUFyOUIsRUFBQW9rRCxZQUFBLEdBQ0E0QixHQUVBalcsVUFBQSxTQUFBcjdELEVBQUFzbkQsRUFBQW1NLEVBQUFub0MsR0FDQSxJQUFBa3ZDLEVBQUF2OUIsRUFBQXhwQyxNQUNBLEdBQUF1TSxFQUFBb2YsUUFBQSxPQUFBcGYsRUFBQThmLFNBQ0EsS0FBQXNsQyxFQUFBdGxDLFFBQUFvbEQsR0FDQTFLLEVBQUFuMUQsSUFBQTlMLFdBQUE5RixLQUFBbWdFLFVBQUF1QixpQkFBQWptQyxTQUFBNUQsRUFBQWhDLE9BQUFreEMsRUFBQXA4QyxRQUFBLFlBQ0EsTUFFQSxLQUFBZ25DLEVBQUF0bEMsUUFBQTBrRCxLQUNBaEssRUFBQW4xRCxJQUFBOUwsV0FBQTlGLEtBQUFtZ0UsVUFBQXVCLGlCQUFBam1DLFNBQUE1RCxFQUFBaEMsT0FBQWt4QyxFQUFBcDhDLFFBQUEsZUFJQW16RCxVQUNBOW9ELE9BQUEsS0FDQXd2QyxlQUFBLElBQ0E1UyxNQUFBLFVBQ0FzQixZQUFBLElBQ0Fnb0IsV0FBQSxFQUNBTSxPQUFBLEVBQ0FELGdCQUFBLEVBQ0FsUyxzQkFBQSxHQUVBMFUsU0FDQW5zQixNQUFBLFdBRUFvc0IsU0FDQXBzQixNQUFBLFVBQ0E0cEIsT0FBQSxFQUNBaGUsV0FBQSxJQUVBeWdCLFlBQ0Fyc0IsTUFBQSxVQUNBNHBCLE9BQUEsRUFDQUQsZ0JBQUEsRUFDQS9kLFdBQUEsSUFDQXRLLFlBQUEsSUFDQWdvQixXQUFBLEVBQ0FoNkIsSUFBQSxFQUNBanVCLElBQUEsSUFDQWdDLE9BQUEsS0FDQTJtRCxZQUFBLEtBRUFqcUIsSUF4VUFKLEVBQUE5dEQsTUFBQTlELEVBQUE2eEQsR0FBQUQsS0FBQTd4RCxFQUFBQyxRQUFBOHhELElBMFVBLFNBQUEveEQsRUFBQUMsRUFBQXF4RCxHQUNBLGFBQ0EsSUFBQU8sRUFBQUMsRUFBQUMsRUFDQSxtQkFBQWxxRCxRQUFBQSxPQUFBQyxTQUVBZ3FELEdBQUFSLEVBQUEsR0FBQUEsRUFBQSxTQUNBLEtBQUFTLEVBQUEsbUJBQUFGLEVBQ0EsU0FBQS9uQixFQUFBbW9CLEdBQ0EsU0FBQXVzQixFQUFBLzBFLEVBQUFDLEdBQ0EsSUFBQSswRSxHQUFBaDFFLEVBQUFzcEQsTUFBQXRwRCxHQUFBL0QsUUFBQSxLQUFBLEtBQUFBLFFBQUEsS0FBQSxLQUFBQSxRQUFBLFdBQUEsSUFBQWc1RSxHQUFBaDFFLEVBQUFxcEQsTUFBQXJwRCxHQUFBaEUsUUFBQSxLQUFBLEtBQUFBLFFBQUEsS0FBQSxLQUFBQSxRQUFBLFdBQUEsSUFBQWk1RSxHQUFBbDFFLEVBQUFzcEQsTUFBQXRwRCxHQUFBMUIsTUFBQSxLQUFBLEdBQUE2MkUsR0FBQWwxRSxFQUFBcXBELE1BQUFycEQsR0FBQTNCLE1BQUEsS0FBQSxHQUNBLE9BQUEsSUFBQTYyRSxFQUFBNzlFLFFBQUE0OUUsSUFBQSxFQUFBLElBQUFBLEVBQUE1OUUsUUFBQTY5RSxHQUFBLEVBQUFILEVBQUFJLGNBQUFILEdBRUEsSUFBQUksRUFBQTdzQixFQUFBbnZELFVBQUFreEQsWUFDQSxPQUFBL0IsRUFBQW52RCxVQUFBa3hELFlBQUEsU0FBQWpCLEVBQUFLLEVBQUFqN0IsR0FDQSxTQUFBNG1ELEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0FELEVBQUFBLEdBQUEsR0FBQUMsRUFBQUEsR0FBQUMsRUFDQSxLQUFBRixJQUFBQyxFQUFBRCxPQUNBLElBQUEsSUFBQUcsRUFBQSxHQUFBQyxFQUFBSCxFQUFBRCxJQUFBQyxFQUFBcDdFLEVBQUFrN0UsRUFBQS83RSxPQUFBLEVBQUFhLEdBQUEsRUFBQUEsSUFBQXU3RSxFQUFBRCxHQUFBcnNCLEVBQUFpc0IsRUFBQWw3RSxHQUFBaXZELE1BQUFpc0IsRUFBQWw3RSxJQUFBbWxELE9BQUEsRUFBQSxJQUFBbzJCLEVBQUFELE9BQ0FDLEVBQUFELEdBQUF0dEUsUUFBQWloRCxFQUFBOUosT0FBQSxJQUFBKzFCLEVBQUF4NkUsT0FBQVYsRUFBQSxHQUNBLElBQUEsSUFBQTB3RCxLQUFBNnFCLEVBQUFBLEVBQUE3cUIsR0FBQXZ4RCxPQUFBLEtBQUE4N0UsRUFBQU0sRUFBQTdxQixHQUFBNXpELFFBQUE0ekQsRUFBQTZxQixHQUVBLFNBQUFDLEVBQUFELEdBQ0EsSUFBQXRzQixFQUFBLEdBQUF3c0IsS0FDQSxJQUFBLElBQUEvcUIsS0FBQTZxQixFQUFBdjFDLEVBQUF6a0MsUUFBQWc2RSxFQUFBN3FCLElBQUEsSUFBQTZxQixFQUFBN3FCLEdBQUF2eEQsT0FBQXM4RSxFQUFBeitFLEtBQUEwekQsRUFBQTZxQixFQUFBN3FCLElBQUErcUIsRUFBQXorRSxLQUFBMHpELEVBQUFyOEIsRUFBQXU3QixZQUFBdC9DLE1BQUFpckUsRUFBQTdxQixHQUFBdG1ELEtBQUFpcUIsRUFBQXU3QixZQUFBcHZELElBQUE2ekIsRUFBQXU4QixpQkFBQXY4QixFQUFBdTdCLFlBQUF0L0MsT0FBQStqQixFQUFBdTdCLFlBQUFwdkQsS0FBQWk3RSxFQUFBeitFLEtBQUEwekQsRUFBQThxQixFQUFBRCxFQUFBN3FCLEtBQ0EsT0FBQSxJQUFBK3FCLEVBQUF0OEUsT0FBQTh2RCxHQUFBd3NCLEVBQUEsR0FBQXhzQixHQUFBNTZCLEVBQUF1N0IsWUFBQXQvQyxNQUFBbXJFLEVBQUFyeEUsS0FBQWlxQixFQUFBdTdCLFlBQUFwdkQsSUFBQTZ6QixFQUFBdThCLGlCQUFBdjhCLEVBQUF1N0IsWUFBQXQvQyxPQUFBK2pCLEVBQUF1N0IsWUFBQXB2RCxJQUNBeXVELEVBRUEsSUFBQW9zQixLQUNBLE9BQUFobkQsRUFBQXFuRCxhQUFBcm5ELEVBQUFxbkQsWUFBQXJuRCxFQUFBcW5ELFdBQUF2OEUsT0FBQSxNQUFBODdFLEdBQUFoc0IsRUFBQUEsRUFBQTlKLE9BQUEsRUFBQThKLEVBQUE5dkQsT0FBQSxJQUFBOEUsTUFBQW93QixFQUFBdTdCLFlBQUFwdkQsSUFBQTZ6QixFQUFBdThCLGlCQUFBdjhCLEVBQUF1N0IsWUFBQXQvQyxRQUNBMitDLEVBQUF1c0IsRUFBQUgsSUFBQXBzQixFQUFBQSxFQUFBcnRELFFBQUEsS0FBQSxRQUFBbzVFLEVBQUF4OUUsS0FBQWhCLEtBQUF5eUQsRUFBQUssRUFBQWo3QixJQUNBODVCLEVBQUEyZSxlQUNBNk8sZUFDQS9yQixhQUNBdC9DLE1BQUEsSUFDQTlQLElBQUEsS0FFQW83RSxZQUFBLEdBQ0FGLGNBQ0F6c0IsS0FBQSxTQUFBNTZCLEdBQ0EsT0FBQUEsRUFBQW82QixhQUNBb29CLElBQUExb0IsRUFBQW52RCxVQUFBeXZELFlBQUEsSUFDQXA2QixFQUFBcW5ELFdBQUFqN0UsS0FBQWk2RSxJQUVBbHFCLFlBQUEsRUFDQW9WLGFBQUEsU0FBQXBpRSxFQUFBNndCLEdBQ0EsSUFBQXduRCxFQUFBcjRFLEVBQUE1QixRQUFBLFVBQUEsSUFBQUEsUUFBQSxRQUFBLElBQ0EsT0FBQWk2RSxFQUFBNStFLFFBQUFvM0IsRUFBQXVuRCxhQUFBLElBQUEsSUFBQUMsRUFBQTUrRSxRQUFBbzNCLEVBQUF1bkQsZ0JBQUFDLEVBQUEsSUFBQXhuRCxFQUFBdW5ELFlBQUFDLEdBQ0FBLEdBRUF2ZCxTQUFBLFNBQUF5WSxFQUFBMVksRUFBQWhxQyxHQUNBLE9BQUEwaUQsRUFBQW4xRSxRQUFBLFVBQUEsS0FFQW9uRSxVQUFBLFNBRUE3YSxJQWhEQUosRUFBQTl0RCxNQUFBOUQsRUFBQTZ4RCxHQUFBRCxLQUFBN3hELEVBQUFDLFFBQUE4eEQsSUFrREEsU0FBQS94RCxFQUFBQyxFQUFBcXhELEdBQ0EsYUFDQSxJQUFBTyxFQUFBQyxFQUFBQyxFQUNBLG1CQUFBbHFELFFBQUFBLE9BQUFDLFNBRUFncUQsR0FBQVIsRUFBQSxHQUFBQSxFQUFBLFNBQ0EsS0FBQVMsRUFBQSxtQkFBQUYsRUFDQSxTQUFBL25CLEVBQUFtb0IsR0FDQSxPQUFBQSxFQUFBMmUsZUFDQWdQLE9BQ0E3c0IsS0FBQSxJQUNBTyxRQUFBLEVBQ0FDLE9BQUEsSUFDQUYsTUFBQSxLQUNBd3NCLFlBQUEsS0FDQTFQLFVBQUEsa05BQ0EyUCxpQkFBQSxhQUNBNS9CLFdBQUEsU0FBQWlVLEVBQUFoOEIsR0FDQSxPQUFBLElBQUEvdEIsT0FBQSt0QixFQUFBazdCLE1BQUFsN0IsRUFBQW1qQyxPQUFBLElBQUEsSUFBQXp0RCxLQUFBc21ELEVBQUFqbUQsS0FBQSxNQUVBcWtELGFBQ0F3dEIsR0FDQTlSLFVBQUEsU0FBQXBSLEVBQUF6SyxFQUFBbDhCLEVBQUErL0IsRUFBQTk5QixHQUNBLFNBQUE2bkQsRUFBQTFtQixFQUFBWixHQUNBcDRELEtBQUE2RyxXQUFBN0csS0FBQWc1RCxRQUFBQSxJQUFBLEVBQUFoNUQsS0FBQW80RCxhQUFBQSxJQUFBLEVBQ0FwNEQsS0FBQXk2RCxZQUNBdlosSUFBQSxFQUNBanVCLElBQUEsR0FDQWp6QixLQUFBMi9FLGtCQUFBLEVBRUEsU0FBQUMsRUFBQXJtRSxFQUFBc21FLEdBQ0EsSUFBQUMsR0FBQSxFQUNBRCxJQUFBRSxHQUFBLElBQUFDLEtBQ0EsSUFBQSxJQUFBN2dCLEVBQUEsRUFBQUEsRUFBQTVsRCxFQUFBMVMsUUFBQWxFLE9BQUF3OEQsSUFBQSxDQUNBLElBQUE4Z0IsRUFBQTFtRSxFQUFBMVMsUUFBQXM0RCxHQUNBLElBQUEsSUFBQThnQixFQUFBam5CLFFBQUE4bUIsRUFBQUYsRUFBQUssR0FBQSxRQUFBLElBQUEsSUFBQUEsRUFBQTduQixhQUFBLENBQ0EsSUFBQThuQixFQUFBMTJDLEVBQUEvaUMsUUFBQXc1RSxFQUFBMW1FLEVBQUExUyxTQUFBczVFLEVBQUE1bUUsRUFBQTFTLFFBQUFxNUUsRUFBQSxHQUFBRSxFQUFBTCxFQUNBLEdBQUFsNkUsTUFBQW82RSxFQUFBeGxCLFdBQUF4bkMsS0FBQSxDQUNBLEtBQUFndEQsRUFBQU4sY0FBQU0sRUFBQU4sZUFBQUksR0FBQUUsRUFBQU4sYUFBQWg5RSxPQUFBbzlFLEVBQUFwOUUsVUFBQW05RSxFQUFBRixFQUFBTyxHQUFBLE9BQ0FMLEVBQUFBLEdBQUFGLEVBQUFPLEdBQUEsTUFBQUYsRUFBQU4sYUFBQUksR0FDQUEsRUFBQUssRUFBQUgsRUFBQXhsQixXQUFBeG5DLFFBQ0EsQ0FDQSxJQUFBLElBQUF6dkIsRUFBQSxFQUFBNjhFLEVBQUFKLEVBQUF4bEIsV0FBQXhuQyxJQUFBLEVBQUF6dkIsRUFBQTY4RSxLQUFBUCxFQUFBRixFQUFBTyxHQUFBLElBQUEzOEUsS0FDQXU4RSxFQUFBSyxFQUFBLElBQUFILEVBQUF4bEIsV0FBQXZaLElBQUEsSUFBQSsrQixFQUFBeGxCLFdBQUF4bkMsSUFBQSxVQUVBLFFBQUEsSUFBQWd0RCxFQUFBcDVFLFFBQUEsSUFBQSxJQUFBdTlELEVBQUEsRUFBQUEsRUFBQTZiLEVBQUF0OUUsVUFBQW05RSxFQUFBRixFQUFBSyxFQUFBN2IsR0FBQXliLElBQUF6YixTQUFBLENBQ0EsSUFBQWtjLEVBQ0EsR0FBQSxLQUFBTCxFQUFBdGlDLE9BQUEsR0FBQSxDQUVBLElBREEyaUMsRUFBQVAsRUFBQU8sR0FBQUwsRUFDQWw4RSxFQUFBLEVBQUFBLEVBQUFpOEUsRUFBQWo4RSxJQUFBdThFLEdBQUEsSUFDQVIsR0FBQVMsRUFBQSxJQUFBejJFLE9BQUEsS0FBQXcyRSxFQUFBLEtBQUF6b0QsRUFBQW1qQyxPQUFBLElBQUEsS0FBQXp0RCxLQUFBMnFFLFFBQ0EsSUFBQSxJQUFBajlELEVBQUEsRUFBQXVsRSxFQUFBUCxFQUFBdDlFLE9BQUFzWSxFQUFBdWxFLEVBQUF2bEUsSUFBQSxHQUFBLE9BQUFnbEUsRUFBQXRpQyxPQUFBMWlDLEdBQUEsQ0FDQXFsRSxFQUFBUCxFQUFBTyxHQUFBQSxHQUFBTCxFQUFBdDNCLE9BQUEsRUFBQTF0QyxFQUFBLElBQUE3VixRQUFBLE1BQUEsSUFDQSxJQUFBLElBQUFyQixFQUFBLEVBQUFBLEVBQUFpOEUsRUFBQWo4RSxJQUFBdThFLEdBQUEsSUFDQSxJQUFBQyxFQUFBLElBQUF6MkUsT0FBQSxLQUFBdzJFLEVBQUEsS0FBQXpvRCxFQUFBbWpDLE9BQUEsSUFBQSxJQUNBLEdBQUE4a0IsRUFBQVMsRUFBQWh6RSxLQUFBMnFFLEdBQUEsTUFFQTZILEdBQUFFLEVBRUEsR0FBQUgsRUFBQSxNQUVBLE9BQUFELElBQUFFLEdBQUEsSUFBQUMsS0FBQUYsRUFFQSxJQUFBNUgsRUFBQXRJLEVBQUE2USxFQUFBM3VCLEVBQUErQixPQUFBdnpELFFBQUF5L0UsRUFBQSxHQUFBbnBCLEdBQUEsRUFBQW9wQixFQUFBLEVBQ0EsT0FBQW5vRCxFQUFBMG5ELGFBQUEsV0FDQSxJQUFBM3lFLEVBQUFGLEVBQUE0aUUsRUFBQSxJQUFBb1EsRUFBQWdCLEtBQ0EsSUFBQTdvRCxFQUFBMG5ELGVBQUEzeUUsRUFBQWlyQixFQUFBZzRDLFVBQUE1aUUsS0FBQTRxQixFQUFBazdCLFFBQUEsUUFBQXJtRCxFQUFBRSxFQUFBLElBQUErd0MsT0FBQSxJQUNBLElBQUEsSUFDQStpQyxFQUFBbGdGLEtBQUEsSUFBQWsvRSxHQUFBLElBQ0EsTUFFQSxJQUFBLElBQ0E5UCxFQUFBOFEsRUFBQXIzRSxNQUFBcTNFLEVBQUEvOUUsT0FBQSxFQUFBKzlFLEVBQUFBLEVBQUEvOUUsT0FBQSxHQUFBa0UsUUFBQXJHLEtBQUFvdkUsR0FBQU4sRUFBQXpvRSxRQUFBckcsS0FBQW92RSxHQUNBLE1BRUEsSUFBQSxJQUNBLElBQUEsSUFDQSxJQUFBLElBQ0EsSUFBQStRLEVBQUEsSUFBQWpCLEdBQUEsR0FBQSxHQUFBM1AsR0FBQXJqRSxFQUFBQSxFQUFBdEgsUUFBQSxRQUFBLEtBQUFxQyxNQUFBLEtBQUF1b0UsRUFBQW5xRSxNQUFBa3FFLEVBQUEsSUFBQUEsRUFBQSxHQUFBdDBDLFNBQUFzMEMsRUFBQSxJQUFBRSxFQUFBLElBQUFGLEVBQUFwdEUsT0FBQXF0RSxFQUFBbnFFLE1BQUFrcUUsRUFBQSxJQUFBQSxFQUFBLEdBQUF0MEMsU0FBQXMwQyxFQUFBLElBQ0EsR0FBQTRRLEVBQUFsbUIsWUFDQXZaLElBQUE4dUIsRUFDQS84QyxJQUFBZzlDLEdBQ0F5USxFQUFBLzlFLE9BQUEsRUFBQSxDQUNBLElBQUFrRSxFQUFBNjVFLEVBQUFBLEVBQUEvOUUsT0FBQSxHQUFBa0UsU0FDQStGLEVBQUEvRixFQUFBd0MsT0FBQTJ2RCxXQUFBNFcsRUFBQSxJQUFBOFAsR0FBQSxJQUFBNzRFLFFBQUFyRyxLQUFBb00sR0FDQUEsRUFBQWdqRSxHQUFBL29FLEVBQUFyRyxLQUFBb00sR0FBQS9GLEVBQUFyRyxLQUFBbWdGLFFBQ0EvekUsRUFBQTBpRSxFQUFBem9FLFFBQUF3QyxPQUFBMnZELFdBQUE0VyxFQUFBLElBQUE4UCxHQUFBLElBQUE3NEUsUUFBQXJHLEtBQUFvTSxHQUNBQSxFQUFBZ2pFLEdBQUFOLEVBQUF6b0UsUUFBQXJHLEtBQUFvTSxHQUFBMGlFLEVBQUF6b0UsUUFBQXJHLEtBQUFtZ0YsR0FDQSxNQUVBLFFBQ0FELEVBQUEvOUUsT0FBQSxFQUFBKzlFLEVBQUFBLEVBQUEvOUUsT0FBQSxHQUFBa0UsUUFBQXJHLEtBQUFrTSxHQUFBNGlFLEVBQUF6b0UsUUFBQXJHLEtBQUFrTSxHQUVBNGlFLEVBQUF6b0UsUUFBQWxFLE9BQUEsR0FBQWsxQixFQUFBMG5ELFlBQUEvK0UsS0FBQTh1RSxHQTdCQSxHQThCQW1SLEVBQUF2OEUsT0FBQTB4QixFQUFBLEVBQUEybUMsR0FBQTJiLEVBQUF1SSxFQUFBN3lFLEtBQUEsSUFDQSxJQUFBLElBQUFwSyxFQUFBLEVBQUFBLEVBQUFxMEIsRUFBQTBuRCxZQUFBNThFLE9BQUFhLElBQUEsQ0FDQSxJQUFBbzlFLEVBQUEvb0QsRUFBQTBuRCxZQUFBLzdFLEdBQ0EsR0FBQW96RCxFQUFBZ3BCLEVBQUFnQixFQUFBQSxFQUFBNW5CLFNBQUEsTUFFQSxPQUFBcEMsR0FFQW1FLFlBQUEsT0FJQXBKLElBbkdBSixFQUFBOXRELE1BQUE5RCxFQUFBNnhELEdBQUFELEtBQUE3eEQsRUFBQUMsUUFBQTh4RCxJQXFHQSxTQUFBL3hELEVBQUFDLEVBQUFxeEQsR0FDQSxhQUNBLElBQUFPLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUEsbUJBQUFucUQsUUFBQSxpQkFBQUEsT0FBQUMsU0FBQSxTQUFBL0IsR0FDQSxjQUFBQSxHQUNBLFNBQUFBLEdBQ0EsT0FBQUEsR0FBQSxtQkFBQThCLFFBQUE5QixFQUFBL0MsY0FBQTZFLFFBQUE5QixJQUFBOEIsT0FBQS9FLFVBQUEsZ0JBQUFpRCxHQUdBK3JELEdBQUFSLEVBQUEsR0FBQUEsRUFBQSxTQUNBLEtBQUFTLEVBQUEsbUJBQUFGLEVBQ0EsU0FBQS9uQixFQUFBbW9CLEdBQ0EsWUFBQSxJQUFBbm9CLEVBQUF6bkMsR0FBQW8rRCxZQUFBMzJCLEVBQUF6bkMsR0FBQW8rRCxVQUFBLFNBQUFwK0QsRUFBQXFDLEdBQ0EsSUFBQXk4RSxFQUFBcHdFLEVBQUF6USxLQUFBLEdBQ0EsUUFBQSxJQUFBb0UsSUFBQUEsTUFBQSxpQkFBQXJDLEVBQUEsT0FBQUEsR0FDQSxJQUFBLGdCQUNBLE9BQUEwTyxHQUFBQSxFQUFBMHZELFVBQUExdkQsRUFBQTB2RCxVQUFBdUIsZ0JBQUFsNEIsRUFBQS80QixHQUFBbUIsTUFFQSxJQUFBLFNBQ0EsT0FBQTVSLEtBQUFvRCxLQUFBLFdBQ0FwRCxLQUFBbWdFLFdBQUFuZ0UsS0FBQW1nRSxVQUFBcmpELFdBR0EsSUFBQSxlQUNBLE9BQUFyTSxHQUFBQSxFQUFBMHZELFVBQUExdkQsRUFBQTB2RCxVQUFBaU8sZUFBQSxHQUVBLElBQUEsaUJBQ0EsU0FBQTM5RCxJQUFBQSxFQUFBMHZELFlBQUExdkQsRUFBQTB2RCxVQUFBa08saUJBRUEsSUFBQSxhQUNBLE9BQUE1OUQsSUFBQUEsRUFBQTB2RCxXQUFBMXZELEVBQUEwdkQsVUFBQXZnQixhQUVBLElBQUEsY0FDQSxPQUFBbnZDLEdBQUFBLEVBQUEwdkQsVUFBQTF2RCxFQUFBMHZELFVBQUFtTyxtQkFBQSxFQUVBLElBQUEsV0FDQTlrQyxFQUFBLzRCLEdBQUFtQixJQUFBeE4sR0FBQXFNLFFBQUEsSUFBQUEsRUFBQTB2RCxXQUFBMzJCLEVBQUEvNEIsR0FBQTBzQixlQUFBLFlBQ0EsTUFFQSxJQUFBLFNBQ0EsR0FBQSxpQkFBQS80QixFQUFBLE9BQUFwRSxLQUFBb0QsS0FBQSxXQUNBLFFBQUEsSUFBQXBELEtBQUFtZ0UsVUFBQSxPQUFBbmdFLEtBQUFtZ0UsVUFBQTk2QyxPQUFBamhCLEtBRUEsR0FBQXFNLFFBQUEsSUFBQUEsRUFBQTB2RCxVQUFBLE9BQUExdkQsRUFBQTB2RCxVQUFBOTZDLE9BQUFqaEIsR0FDQSxNQUVBLFFBQ0EsT0FBQUEsRUFBQXd0RCxNQUFBN3ZELEVBQUE4K0UsRUFBQSxJQUFBbHZCLEVBQUF2dEQsR0FBQXBFLEtBQUFvRCxLQUFBLFdBQ0F5OUUsRUFBQXB1QixLQUFBenlELFlBRUEsQ0FDQSxHQUFBLGdCQUFBLElBQUErQixFQUFBLFlBQUEydkQsRUFBQTN2RCxJQUFBLE9BQUE4K0UsRUFBQSxJQUFBbHZCLEVBQUE1dkQsUUFDQSxJQUFBQSxFQUFBMHdELFdBQUEsSUFBQTF3RCxFQUFBNnZELE1BQUE1eEQsS0FBQW9ELEtBQUEsV0FDQSxRQUFBLElBQUFwRCxLQUFBbWdFLFVBQUEsT0FBQW5nRSxLQUFBbWdFLFVBQUE5NkMsT0FBQXRqQixHQUNBOCtFLEVBQUFwdUIsS0FBQXp5RCxRQUNBQSxLQUFBb0QsS0FBQSxXQUNBeTlFLEVBQUFwdUIsS0FBQXp5RCxRQUVBLFFBQUEsSUFBQStCLEVBQUEsT0FBQS9CLEtBQUFvRCxLQUFBLFlBQ0F5OUUsRUFBQSxJQUFBbHZCLEVBQUF2dEQsSUFBQXF1RCxLQUFBenlELFdBR0F3cEMsRUFBQXpuQyxHQUFBbytELFlBcERBNU8sRUFBQTl0RCxNQUFBOUQsRUFBQTZ4RCxHQUFBRCxLQUFBN3hELEVBQUFDLFFBQUE4eEQsTUN2N0ZBLFNBQUFqeUQsRUFBQUMsR0FDQSxpQkFBQUUsU0FBQSxvQkFBQUQsT0FBQUEsT0FBQUMsUUFBQUYsSUFDQSxtQkFBQTJwQyxRQUFBQSxPQUFBQyxJQUFBRCxPQUFBM3BDLEdBQ0FELEVBQUFzaEYsVUFBQXJoRixJQUhBLENBSUFPLEtBQUEsV0FBQSxhQW9CQSxJQUFBK2dGLEVBQUEzZ0YsT0FBQTRnRixRQUFBLFNBQUE3NEQsR0FDQSxJQUFBLElBQUFrVyxFQUFBNzZCLEVBQUEsRUFBQXlXLEVBQUF2VyxVQUFBZixPQUFBYSxFQUFBeVcsRUFBQXpXLElBQUEsQ0FDQTY2QixFQUFBMzZCLFVBQUFGLEdBQ0EsSUFBQSxJQUFBMHlCLEtBQUFtSSxFQUFBaitCLE9BQUFvQyxVQUFBM0IsZUFBQUcsS0FBQXE5QixFQUFBbkksS0FBQS9OLEVBQUErTixHQUFBbUksRUFBQW5JLElBRUEsT0FBQS9OLEdBR0EsU0FBQTg0RCxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE9BQUEsSUFBQUEsRUFDQSxJQUFBOTVFLEtBQUE0NUUsRUFBQS85QixXQUFBaytCLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxJQUFBLzVFLEtBQUE2NUUsRUFBQWgrQixXQUFBaytCLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FFQUgsRUFBQS85QixVQUFBZytCLEVBQUFoK0IsVUFFQSxJQUFBbStCLEVBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxPQUFBQSxFQUFBQyxPQUFBRixFQUFBLFlBQUEsWUFBQUQsSUFRQTVyRCxHQUNBZ3NELElBQUEsT0FHQWo0QyxHQUNBazRDLFlBQ0FDLFdBQ0FDLFlBQUEsRUFDQUMsVUFBQSxTQUNBQyxVQUFBLEVBQ0FDLGNBQUEscUJBQ0Exb0QsUUFBQSxpQkFBQXg1QixTQUNBLElBQUFBLE9BQUEyOEMsVUFBQUMsVUFBQWw4QyxRQUFBLFFBQ0F5aEYsZUFBQSxTQUNBQyxZQUFBLEVBQ0FDLGVBQUEsRUFDQUMsWUFBQSxLQUNBQyxXQUFBLFFBQ0FDLFlBQUEsR0FDQUMsY0FBQSxFQUNBQyxlQUFBLEVBQ0ExbEUsV0FDQTJsRSxlQUFBLEVBQ0FDLFVBQ0FDLGVBQUEsRUFDQUMsWUFBQSxFQUNBQyxhQUFBdmlFLFFBQUFDLEtBQ0F1aUUsUUFsQ0EsU0FBQUMsR0FDQSxJQUFBQyxFQUFBLElBQUEzN0UsS0FBQTA3RSxFQUFBM0wsY0FBQSxFQUFBLEdBQ0EsT0FBQW55RSxLQUFBb3JDLE9BQUEweUMsRUFBQTcvQixVQUFBOC9CLEVBQUE5L0IsV0FBQSxNQUNBOC9CLEVBQUFDLFNBQ0EsR0FDQSxJQThCQUMsY0FBQSxFQUNBQyx3QkFDQUMsUUFBQSxFQUNBNUIsT0FBQSxVQUNBNkIsZ0JBQUEsRUFDQTM1QyxLQUFBLFNBQ0E0NUMsVUFBQSx5T0FDQUMsWUFBQSxFQUNBQyxZQUNBQyxXQUNBQyxlQUNBQyxhQUNBaGMsYUFDQWljLGlCQUNBQyxVQUNBQyxpQkFDQUMsV0FDQUMsaUJBQ0FDLGdCQUNBQyxXQUNBL3hELFNBQUEsT0FDQWd5RCxxQkFBQXAvRSxFQUNBcS9FLFVBQUEsdU9BQ0FDLHVCQUFBLEVBQ0FDLFFBQUEsRUFDQUMsV0FBQSxFQUNBQyxhQUFBLEVBQ0FoK0QsTUFBQSxHQUdBaStELEdBQ0FDLFVBQ0FuRCxXQUFBLE1BQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE9BQ0FvRCxVQUNBLFNBQ0EsU0FDQSxVQUNBLFlBQ0EsV0FDQSxTQUNBLGFBR0FsRCxRQUNBRixXQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxPQUVBb0QsVUFDQSxVQUNBLFdBQ0EsUUFDQSxRQUNBLE1BQ0EsT0FDQSxPQUNBLFNBQ0EsWUFDQSxVQUNBLFdBQ0EsYUFHQUMsYUFBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsSUFDQUMsZUFBQSxFQUNBQyxRQUFBLFNBQUFDLEdBQ0EsSUFBQTNtRCxFQUFBMm1ELEVBQUEsSUFDQSxHQUFBM21ELEVBQUEsR0FBQUEsRUFBQSxHQUNBLE1BQUEsS0FDQSxPQUFBQSxFQUFBLElBQ0EsS0FBQSxFQUNBLE1BQUEsS0FDQSxLQUFBLEVBQ0EsTUFBQSxLQUNBLEtBQUEsRUFDQSxNQUFBLEtBQ0EsUUFDQSxNQUFBLE9BR0E0bUQsZUFBQSxPQUNBQyxpQkFBQSxLQUNBQyxZQUFBLHNCQUNBQyxZQUFBLGtCQUNBQyxNQUFBLEtBQUEsT0FHQUMsRUFBQSxTQUFBQyxHQUFBLE9BQUEsSUFBQUEsR0FBQWpsRixPQUFBLElBQ0FrbEYsRUFBQSxTQUFBNzZFLEdBQUEsT0FBQSxJQUFBQSxFQUFBLEVBQUEsR0FDQSxTQUFBODZFLEVBQUExbkUsRUFBQThDLEVBQUE2a0UsUUFDQSxJQUFBQSxJQUFBQSxHQUFBLEdBQ0EsSUFBQWxyRCxFQUNBLE9BQUEsV0FDQSxJQUFBMTRCLEVBQUE5QixLQUFBb0gsRUFBQTFELFVBQ0EsT0FBQTgyQixHQUFBQyxhQUFBRCxHQUNBQSxFQUFBejZCLE9BQUE2ZixXQUFBLFdBQ0E0YSxFQUFBLEtBQ0FrckQsR0FDQTNuRSxFQUFBdGEsTUFBQTNCLEVBQUFzRixJQUNBeVosR0FDQTZrRSxJQUFBbHJELEdBQ0F6YyxFQUFBdGEsTUFBQTNCLEVBQUFzRixJQUdBLElBQUF1K0UsRUFBQSxTQUFBbGdGLEdBQ0EsT0FBQUEsYUFBQVgsTUFBQVcsR0FBQUEsSUFPQSxTQUFBMjJCLEVBQUE3NEIsRUFBQXdNLEVBQUFwRixHQUNBLElBQUEsSUFBQUEsRUFDQSxPQUFBcEgsRUFBQXFpRixVQUFBdnFFLElBQUF0TCxHQUNBeE0sRUFBQXFpRixVQUFBOW9FLE9BQUEvTSxHQUVBLFNBQUF6TyxFQUFBaVAsRUFBQVIsRUFBQStMLEdBQ0EsSUFBQXZQLEVBQUF4TSxPQUFBSCxTQUFBMEIsY0FBQWlQLEdBTUEsT0FMQVIsRUFBQUEsR0FBQSxHQUNBK0wsRUFBQUEsR0FBQSxHQUNBdlAsRUFBQXdELFVBQUFBLE9BQ0EvSyxJQUFBOFcsSUFDQXZQLEVBQUE2RixZQUFBMEosR0FDQXZQLEVBTUEsU0FBQXM1RSxFQUFBcjJFLEVBQUFzMkUsR0FDQSxPQUFBQSxFQUFBdDJFLEdBQ0FBLEVBQ0FBLEVBQUE5TixXQUNBbWtGLEVBQUFyMkUsRUFBQTlOLFdBQUFva0YsUUFEQSxFQUlBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQTNrRixFQUFBLE1BQUEsbUJBQUE0a0YsRUFBQTVrRixFQUFBLFFBQUEsWUFBQTBrRixHQUFBRyxFQUFBN2tGLEVBQUEsT0FBQSxXQUFBOGtGLEVBQUE5a0YsRUFBQSxPQUFBLGFBTUEsT0FMQTRrRixFQUFBeGdGLEtBQUEsT0FDQXdnRixFQUFBaHpFLFFBQUEsT0FDQSt5RSxFQUFBeGtGLFlBQUF5a0YsR0FDQUQsRUFBQXhrRixZQUFBMGtGLEdBQ0FGLEVBQUF4a0YsWUFBQTJrRixHQUNBSCxFQUdBLElBQUFJLEVBQUEsYUFDQUMsR0FDQUMsRUFBQUYsRUFDQUcsRUFBQSxTQUFBQyxFQUFBQyxFQUFBakYsR0FDQWdGLEVBQUFFLFNBQUFsRixFQUFBQyxPQUFBa0QsU0FBQW5rRixRQUFBaW1GLEtBRUFFLEVBQUEsU0FBQUgsRUFBQUksR0FDQUosRUFBQXBGLFNBQUF2N0UsV0FBQStnRixLQUVBQyxFQUFBLFNBQUFMLEVBQUFJLEdBQ0FKLEVBQUFwRixTQUFBdjdFLFdBQUErZ0YsS0FFQUUsRUFBQSxTQUFBTixFQUFBTyxHQUNBUCxFQUFBUSxRQUFBbmhGLFdBQUFraEYsS0FFQUUsRUFBQSxTQUFBVCxFQUFBcEIsRUFBQTVELEdBQ0FnRixFQUFBcEYsU0FBQW9GLEVBQUFVLFdBQUEsR0FDQSxHQUFBM0IsRUFBQSxJQUFBMTdFLE9BQUEyM0UsRUFBQTRELEtBQUEsR0FBQSxLQUFBOTNFLEtBQUE4M0UsTUFFQStCLEVBQUEsU0FBQVgsRUFBQVksRUFBQTVGLEdBQ0FnRixFQUFBRSxTQUFBbEYsRUFBQUMsT0FBQUYsVUFBQS9nRixRQUFBNG1GLEtBRUFDLEVBQUEsU0FBQWIsRUFBQWMsR0FDQWQsRUFBQWUsV0FBQTFoRixXQUFBeWhGLEtBRUFFLEVBQUEsU0FBQXI4RSxFQUFBczhFLEdBQUEsT0FBQSxJQUFBcGdGLEtBQUEsSUFBQXhCLFdBQUE0aEYsS0FDQUMsRUFBQSxTQUFBbEIsRUFBQW1CLEdBQ0EsSUFBQUMsRUFBQXBzRCxTQUFBbXNELEdBQ0EsT0FBQSxJQUFBdGdGLEtBQUFtL0UsRUFBQXBQLGNBQUEsRUFBQSxFQUFBLEdBQUF3USxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsSUFFQUMsRUFBQSxTQUFBckIsRUFBQXhPLEdBQ0F3TyxFQUFBc0IsWUFBQWppRixXQUFBbXlFLEtBRUErUCxFQUFBLFNBQUE1OEUsRUFBQTY4RSxHQUFBLE9BQUEsSUFBQTNnRixLQUFBMmdGLElBQ0FwakMsRUFBQSxTQUFBNGhDLEVBQUFPLEdBQ0FQLEVBQUFRLFFBQUFuaEYsV0FBQWtoRixLQUVBdk4sRUFBQSxTQUFBZ04sRUFBQUksR0FDQUosRUFBQXBGLFNBQUF2N0UsV0FBQStnRixLQUVBcmpGLEVBQUEsU0FBQWlqRixFQUFBeUIsR0FDQXpCLEVBQUEwQixXQUFBcmlGLFdBQUFvaUYsS0FFQW5rRixFQUFBLFNBQUEwaUYsRUFBQU8sR0FDQVAsRUFBQVEsUUFBQW5oRixXQUFBa2hGLEtBRUEvckUsRUFBQW9yRSxFQUNBMzVFLEVBQUEsU0FBQSs1RSxFQUFBMkIsR0FDQTNCLEVBQUFFLFNBQUE3Z0YsV0FBQXNpRixHQUFBLElBRUFudUUsRUFBQSxTQUFBd3NFLEVBQUEyQixHQUNBM0IsRUFBQUUsU0FBQTdnRixXQUFBc2lGLEdBQUEsSUFFQS9wRCxFQUFBLFNBQUFvb0QsRUFBQWMsR0FDQWQsRUFBQWUsV0FBQTFoRixXQUFBeWhGLEtBRUExbkYsRUFBQXdtRixFQUNBdHlDLEVBQUEsU0FBQTB5QyxFQUFBeE8sR0FDQXdPLEVBQUFzQixZQUFBLElBQUFqaUYsV0FBQW15RSxNQUdBb1EsR0FDQTlCLEVBQUEsU0FDQUMsRUFBQSxTQUNBSSxFQUFBLGVBQ0FFLEVBQUEsZUFDQUMsRUFBQSxtQkFDQUcsRUFBQSxHQUNBRSxFQUFBLFNBQ0FFLEVBQUEsZUFDQUcsRUFBQSxPQUNBRSxFQUFBLGVBQ0FHLEVBQUEsV0FDQUUsRUFBQSxPQUNBbmpDLEVBQUEsZUFDQTQwQixFQUFBLGVBQ0FqMkUsRUFBQSxlQUNBTyxFQUFBLGVBQ0FrWCxFQUFBLFNBQ0F2TyxFQUFBLGVBQ0F1TixFQUFBLGVBQ0Fva0IsRUFBQSxlQUNBeCtCLEVBQUEsZUFDQWswQyxFQUFBLFlBRUF1MEMsR0FDQU4sRUFBQSxTQUFBaE8sR0FBQSxPQUFBQSxFQUFBdU8sZUFDQWhDLEVBQUEsU0FBQXZNLEVBQUF5SCxFQUFBcjlFLEdBQ0EsT0FBQXE5RSxFQUFBa0QsU0FBQW5ELFVBQUE4RyxFQUFBem9GLEVBQUFtNkUsRUFBQXlILEVBQUFyOUUsS0FFQW9pRixFQUFBLFNBQUF4TSxFQUFBeUgsRUFBQXI5RSxHQUNBLE9BQUFrOUUsRUFBQWdILEVBQUFydUUsRUFBQSsvRCxFQUFBeUgsRUFBQXI5RSxHQUFBLEdBQUEsRUFBQXE5RSxJQUVBbUYsRUFBQSxTQUFBNU0sRUFBQXlILEVBQUFyOUUsR0FDQSxPQUFBa2hGLEVBQUFnRCxFQUFBN08sRUFBQU8sRUFBQXlILEVBQUFyOUUsS0FFQTBpRixFQUFBLFNBQUE5TSxHQUFBLE9BQUFzTCxFQUFBdEwsRUFBQW1OLGFBQ0FKLEVBQUEsU0FBQS9NLEVBQUF5SCxHQUNBLFlBQUF6OEUsSUFBQXk4RSxFQUFBc0QsUUFDQS9LLEVBQUFwQyxVQUFBNkosRUFBQXNELFFBQUEvSyxFQUFBcEMsV0FDQW9DLEVBQUFwQyxXQUVBc1AsRUFBQSxTQUFBbE4sRUFBQXlILEdBQUEsT0FBQUEsRUFBQTRELEtBQUFHLEVBQUF4TCxFQUFBbU4sV0FBQSxNQUNBQyxFQUFBLFNBQUFwTixFQUFBeUgsR0FDQSxPQUFBSCxFQUFBdEgsRUFBQW5DLFlBQUEsRUFBQTRKLElBRUE2RixFQUFBLFNBQUF0TixHQUFBLE9BQUFzTCxFQUFBdEwsRUFBQXdPLGVBQ0FmLEVBQUEsU0FBQXpOLEdBQUEsT0FBQUEsRUFBQTcyQixVQUFBLEtBQ0F3a0MsRUFBQSxTQUFBM04sRUFBQTV1RSxFQUFBaEgsR0FDQSxPQUFBQSxFQUFBMitFLFFBQUEvSSxJQUVBOE4sRUFBQSxTQUFBOU4sR0FBQSxPQUFBQSxFQUFBM0MsZUFDQXh5QixFQUFBLFNBQUFtMUIsR0FBQSxPQUFBc0wsRUFBQXRMLEVBQUFwQyxZQUNBNkIsRUFBQSxTQUFBTyxHQUFBLE9BQUFBLEVBQUFtTixXQUFBLEdBQUFuTixFQUFBbU4sV0FBQSxHQUFBLElBQ0EzakYsRUFBQSxTQUFBdzJFLEdBQUEsT0FBQXNMLEVBQUF0TCxFQUFBeU8sZUFDQTFrRixFQUFBLFNBQUFpMkUsR0FBQSxPQUFBQSxFQUFBcEMsV0FDQTM4RCxFQUFBLFNBQUErK0QsRUFBQXlILEdBQ0EsT0FBQUEsRUFBQWtELFNBQUFDLFNBQUE1SyxFQUFBa0osV0FFQXgyRSxFQUFBLFNBQUFzdEUsR0FBQSxPQUFBc0wsRUFBQXRMLEVBQUFuQyxXQUFBLElBQ0E1OUQsRUFBQSxTQUFBKy9ELEdBQUEsT0FBQUEsRUFBQW5DLFdBQUEsR0FDQXg1QyxFQUFBLFNBQUEyN0MsR0FBQSxPQUFBQSxFQUFBd08sY0FDQTNvRixFQUFBLFNBQUFtNkUsR0FBQSxPQUFBQSxFQUFBa0osVUFDQW52QyxFQUFBLFNBQUFpbUMsR0FBQSxPQUFBeHVFLE9BQUF3dUUsRUFBQTNDLGVBQUE5MEIsVUFBQSxLQUdBLG1CQUFBbmlELE9BQUE0Z0YsU0FDQTVnRixPQUFBNGdGLE9BQUEsU0FBQXQ4RSxHQUVBLElBQUEsSUFEQTBDLEtBQ0FzaEYsRUFBQSxFQUFBQSxFQUFBaGxGLFVBQUFmLE9BQUErbEYsSUFDQXRoRixFQUFBc2hGLEVBQUEsR0FBQWhsRixVQUFBZ2xGLEdBRUEsSUFBQWhrRixFQUNBLE1BQUEwYSxVQUFBLDhDQU9BLElBQUEsSUFBQXVwRSxFQUFBLEVBQUFDLEVBQUF4aEYsRUFBQXVoRixFQUFBQyxFQUFBam1GLE9BQUFnbUYsSUFBQSxDQUNBLElBQUF0bEUsRUFBQXVsRSxFQUFBRCxJQU5BdGxFLEVBT0FBLElBTEFqakIsT0FBQTZOLEtBQUFvVixHQUFBNjVCLFFBQUEsU0FBQS91QyxHQUFBLE9BQUF6SixFQUFBeUosR0FBQWtWLEVBQUFsVixLQUZBLElBQUFrVixFQVNBLE9BQUEzZSxJQUlBLFNBQUFta0YsRUFBQTFrQyxFQUFBMmtDLEdBQ0EsSUFBQXZ1RSxLQUNBQSxFQUFBd3VFLFVBQUFBLEVBQ0F4dUUsRUFBQXl1RSxXQXU0Q0EsU0FBQXZDLEVBQUF3QyxHQUNBLFlBQUFqa0YsSUFBQXVWLEVBQUEydUUsYUFBQWxrRixJQUFBdVYsRUFBQTJ1RSxPQUFBRixXQUNBenVFLEVBQUEydUUsT0FBQUYsV0FBQXZDLEVBQUF3QyxHQUNBQSxFQUNBeGhGLE1BQUEsSUFDQW5FLElBQUEsU0FBQTZ0RCxFQUFBM3RELEVBQUF0RCxHQUNBLE9BQUFvb0YsRUFBQW4zQixJQUFBLE9BQUFqeEQsRUFBQXNELEVBQUEsR0FDQThrRixFQUFBbjNCLEdBQUFzMUIsRUFBQWxzRSxFQUFBNHVFLEtBQUE1dUUsRUFBQTJ1RSxRQUNBLE9BQUEvM0IsRUFBQUEsRUFBQSxLQUVBdmpELEtBQUEsS0FoNUNBMk0sRUFBQTZ1RSxrQkFDQTd1RSxFQUFBOHVFLGFBQ0E5dUUsRUFBQSt1RSxNQUFBemdELEVBQ0F0dUIsRUFBQWd2RSxrQkFBQUMsRUFDQWp2RSxFQUFBa3ZFLFlBQUFBLEVBQ0FsdkUsRUFBQW12RSxXQUFBQSxFQUNBbnZFLEVBQUFpekMsTUE0cUJBLFNBQUFtOEIsUUFDQSxJQUFBQSxJQUFBQSxHQUFBLEdBQ0FwdkUsRUFBQTlKLE1BQUF6SixNQUFBLEdBQ0F1VCxFQUFBeW5FLFdBQ0F6bkUsRUFBQXluRSxTQUFBaDdFLE1BQUEsSUFDQXVULEVBQUFxdkUsY0FDQXJ2RSxFQUFBcXZFLFlBQUE1aUYsTUFBQSxJQUNBdVQsRUFBQXN2RSxpQkFDQXR2RSxFQUFBdXZFLDJCQUFBOWtGLEVBQ0F1VixFQUFBd3ZFLGVBQUEsRUFDQXh2RSxFQUFBeXZFLFNBQ0FMLEdBQ0FNLEdBQUEsYUF2ckJBMXZFLEVBQUFxOUIsTUF5ckJBLFdBQ0FyOUIsRUFBQTJ2RSxRQUFBLEVBQ0EzdkUsRUFBQWtoQyxXQUNBbGhDLEVBQUE0dkUsa0JBQUF2RSxVQUFBOW9FLE9BQUEsUUFDQXZDLEVBQUE2dkUsT0FBQXhFLFVBQUE5b0UsT0FBQSxXQUVBbXRFLEdBQUEsWUE5ckJBMXZFLEVBQUE4dkUsZUFBQS9vRixFQUNBaVosRUFBQThxQyxRQStyQkEsZ0JBQ0FyZ0QsSUFBQXVWLEVBQUEydUUsUUFDQWUsR0FBQSxhQUNBLElBQUEsSUFBQXptRixFQUFBK1csRUFBQTh1RSxVQUFBMW1GLE9BQUFhLEtBQUEsQ0FDQSxJQUFBaTJFLEVBQUFsL0QsRUFBQTh1RSxVQUFBN2xGLEdBQ0FpMkUsRUFBQXQxQixRQUFBcGpDLG9CQUFBMDRELEVBQUEzeEQsTUFBQTJ4RCxFQUFBOXFFLFNBRUE0TCxFQUFBOHVFLGFBQ0E5dUUsRUFBQXF2RSxhQUNBcnZFLEVBQUFxdkUsWUFBQWxvRixZQUNBNlksRUFBQXF2RSxZQUFBbG9GLFdBQUFDLFlBQUE0WSxFQUFBcXZFLGFBQ0FydkUsRUFBQXF2RSxpQkFBQTVrRixHQUVBdVYsRUFBQTR2RSxtQkFBQTV2RSxFQUFBNHZFLGtCQUFBem9GLFlBQ0E2WSxFQUFBNHZFLGtCQUFBem9GLFdBQUFDLFlBQUE0WSxFQUFBNHZFLG1CQUNBNXZFLEVBQUF5bkUsV0FDQXpuRSxFQUFBOUosTUFBQS9LLEtBQUEsT0FDQTZVLEVBQUF5bkUsU0FBQXRnRixZQUNBNlksRUFBQXluRSxTQUFBdGdGLFdBQUFDLFlBQUE0WSxFQUFBeW5FLGlCQUNBem5FLEVBQUF5bkUsVUFFQXpuRSxFQUFBOUosUUFDQThKLEVBQUE5SixNQUFBL0ssS0FBQTZVLEVBQUE5SixNQUFBNjVFLE1BQ0EvdkUsRUFBQTlKLE1BQUFtMUUsVUFBQTlvRSxPQUFBLG1CQUNBdkMsRUFBQTlKLE1BQUF6QyxnQkFBQSxZQUNBdU0sRUFBQTlKLE1BQUF6SixNQUFBLEtBR0EsaUJBQ0Esd0JBQ0Esc0JBQ0Esc0JBQ0EsdUJBQ0EsdUJBQ0EsV0FDQSxTQUNBLG1CQUNBLGlCQUNBLGlCQUNBLE9BQ0EsZ0JBQ0EsU0FDQSxtQkFDQSxpQkFDQSxhQUNBLFdBQ0EsZ0JBQ0Esb0JBQ0EsbUJBQ0EsZUFDQSxlQUNBLHNCQUNBLHFCQUNBLHlCQUNBLG1CQUNBLFVBQ0FrMkMsUUFBQSxTQUFBa25CLEdBQ0EsV0FDQTdwRCxFQUFBNnBELEdBRUEsTUFBQWg1RCxRQTF2QkFtUCxFQUFBZ3dFLFVBQUFBLEVBQ0Fod0UsRUFBQWl3RSxXQUFBQSxFQUNBandFLEVBQUFpckIsS0FrL0JBLFNBQUFqNUIsRUFBQTYzRSxRQUNBLElBQUFBLElBQUFBLEVBQUE3cEUsRUFBQTZ2RSxRQUNBLEdBQUE3dkUsRUFBQWtoQyxTQVNBLE9BUkFsdkMsSUFDQUEsRUFBQXVkLGlCQUNBdmQsRUFBQTdILFFBQUE2SCxFQUFBN0gsT0FBQWttQixRQUVBaEwsV0FBQSxnQkFDQTVhLElBQUF1VixFQUFBcXZFLGFBQUFydkUsRUFBQXF2RSxZQUFBLytELFNBQ0EsUUFDQW8vRCxHQUFBLFVBR0EsR0FBQTF2RSxFQUFBNnZFLE9BQUFsK0UsVUFBQXFPLEVBQUEydUUsT0FBQTdGLE9BQ0EsT0FDQSxJQUFBb0gsRUFBQWx3RSxFQUFBMnZFLE9BQ0EzdkUsRUFBQTJ2RSxRQUFBLEVBQ0FRLEVBQUF0RyxHQUNBN3BFLEVBQUE0dkUsa0JBQUF2RSxVQUFBdnFFLElBQUEsUUFDQWQsRUFBQTZ2RSxPQUFBeEUsVUFBQXZxRSxJQUFBLFdBQ0FvdkUsR0FBQVIsR0FBQSxXQXJnQ0ExdkUsRUFBQXl2RSxPQUFBQSxFQUNBenZFLEVBQUFzSCxJQXl3Q0EsU0FBQXdELEVBQUFyZSxHQUNBLE9BQUFxZSxHQUFBLGlCQUFBQSxFQUNBamxCLE9BQUE0Z0YsT0FBQXptRSxFQUFBMnVFLE9BQUE3akUsR0FFQTlLLEVBQUEydUUsT0FBQTdqRSxHQUFBcmUsRUFDQXVULEVBQUF5dkUsU0FDQVEsS0E5d0NBandFLEVBQUEwc0UsUUE4eUNBLFNBQUFqTixFQUFBMlEsRUFBQTVrQyxRQUNBLElBQUE0a0MsSUFBQUEsR0FBQSxHQUNBLEdBQUEsSUFBQTNRLElBQUFBLEVBQ0EsT0FBQXovRCxFQUFBaXpDLE1BQUFtOUIsR0FDQUMsRUFBQTVRLEVBQUFqMEIsR0FDQXhyQyxFQUFBd3ZFLGNBQUF4dkUsRUFBQXN2RSxjQUFBbG5GLE9BQUEsRUFDQTRYLEVBQUF1dkUsc0JBQUF2dkUsRUFBQXN2RSxjQUFBLEdBQ0F0dkUsRUFBQXl2RSxTQUNBUSxJQUNBaEIsSUFDQXFCLEdBQUFGLEdBQ0FBLEdBQ0FWLEdBQUEsYUF6ekNBMXZFLEVBQUF5SyxPQTYvQ0EsV0FDQSxHQUFBekssRUFBQTJ2RSxPQUNBLE9BQUEzdkUsRUFBQXE5QixRQUNBcjlCLEVBQUFpckIsUUF2OUNBLFNBQUFzbEQsRUFBQS9vRixHQUNBLE9BQUFBLEVBQUE4bUMsS0FBQXR1QixHQUVBLFNBQUF3d0UsRUFBQXgrRSxHQUNBLEdBQUFnTyxFQUFBMnVFLE9BQUExRixZQUFBLElBQUFqcEUsRUFBQXN2RSxjQUFBbG5GLE9BQUEsQ0FDQSxJQUFBcW9GLEVBQUF6d0UsRUFBQTJ1RSxPQUFBOEIsUUFDQXp3RSxFQUFBMHNFLFNBQUEsSUFBQTMvRSxNQUFBKzVFLFNBQUEySixFQUFBQSxFQUFBN0QsV0FBQTVzRSxFQUFBMnVFLE9BQUEzRyxZQUFBeUksRUFBQUEsRUFBQXZDLGFBQUFsdUUsRUFBQTJ1RSxPQUFBMUcsY0FBQXdJLEdBQUF6d0UsRUFBQTJ1RSxPQUFBdEcsY0FFQW9JLEVBQUF4QyxhQURBanVFLEVBQUEydUUsT0FBQXpHLGlCQUNBLEdBQ0F3SSxJQUNBSixNQWlqREEsU0FBQXQrRSxHQUNBQSxFQUFBdWQsaUJBQ0EsSUFBQW9oRSxFQUFBLFlBQUEzK0UsRUFBQTdHLEtBQUErSyxFQUFBbEUsRUFBQTdILFlBQ0FNLElBQUF1VixFQUFBOHFFLE1BQUE5NEUsRUFBQTdILFNBQUE2VixFQUFBOHFFLE9BQ0E5cUUsRUFBQThxRSxLQUFBanpFLFlBQ0FtSSxFQUFBNHVFLEtBQUE5RCxLQUFBRyxFQUFBanJFLEVBQUE4cUUsS0FBQWp6RSxjQUFBbUksRUFBQTR1RSxLQUFBOUQsS0FBQSxNQUVBLElBQUFua0MsRUFBQTQ3QixPQUFBcnNFLEVBQUF5d0MsS0FBQWp1QixFQUFBNnBELE9BQUFyc0UsRUFBQXdpQixLQUFBNEMsRUFBQWluRCxPQUFBcnNFLEVBQUFvbEIsTUFBQW1HLEVBQUFQLFNBQUFockIsRUFBQXpKLE1BQUEsSUFBQW1rRixFQUFBNStFLEVBQUE0K0UsUUFDQUQsRUFDQSxLQUFBMytFLEVBQUEyZ0IsTUFBQSxHQUFBLEVBQ0Fob0IsS0FBQSt0QixLQUFBLEVBQUEvdEIsS0FBQWc4QyxJQUFBLEVBQUEzMEMsRUFBQTYrRSxhQUFBNytFLEVBQUE4K0UsVUFBQSxHQUNBQyxFQUFBdHZELEVBQUFuRyxFQUFBczFELEVBQ0EsUUFBQSxJQUFBMTZFLEVBQUF6SixPQUFBLElBQUF5SixFQUFBekosTUFBQXJFLE9BQUEsQ0FDQSxJQUFBNG9GLEVBQUE5NkUsSUFBQThKLEVBQUFpeEUsWUFBQUMsRUFBQWg3RSxJQUFBOEosRUFBQW14RSxjQUNBSixFQUFBcHFDLEdBQ0FvcUMsRUFDQXI0RCxFQUNBcTRELEVBQ0E5RixHQUFBK0YsSUFDQS9GLEVBQUErRixJQUFBL0YsR0FBQWpyRSxFQUFBOHFFLE9BQ0FvRyxHQUNBRSxPQUFBM21GLEdBQUEsRUFBQXVWLEVBQUFpeEUsY0FFQUYsRUFBQXI0RCxJQUNBcTRELEVBQ0E3NkUsSUFBQThKLEVBQUFpeEUsWUFBQUYsRUFBQXI0RCxFQUFBdXlELEdBQUFqckUsRUFBQThxRSxNQUFBbmtDLEVBQ0F1cUMsR0FDQUUsT0FBQTNtRixFQUFBLEVBQUF1VixFQUFBaXhFLGNBRUFqeEUsRUFBQThxRSxNQUNBa0csSUFDQSxJQUFBMTFELEVBQ0F5MUQsRUFBQXR2RCxJQUFBLEdBQ0E5MkIsS0FBQWt1QyxJQUFBazRDLEVBQUF0dkQsR0FBQW5HLEtBQ0F0YixFQUFBOHFFLEtBQUFqekUsWUFDQW1JLEVBQUE0dUUsS0FBQTlELEtBQUFHLEVBQUFqckUsRUFBQThxRSxLQUFBanpFLGNBQUFtSSxFQUFBNHVFLEtBQUE5RCxLQUFBLE1BRUE1MEUsRUFBQXpKLE1BQUFzK0UsRUFBQWdHLElBcGxEQU0sQ0FBQXIvRSxHQUNBLElBQUFnTyxFQUFBc3ZFLGNBQUFsbkYsVUFFQTRYLEVBQUFzeEUsZ0JBQ0EsVUFBQXQvRSxFQUFBN0csTUFDQTZHLEVBQUE3SCxPQUFBc0MsTUFBQXJFLFFBQUEsR0FDQXNvRixJQUNBSixNQUdBanJFLFdBQUEsV0FDQXFyRSxJQUNBSixNQUNBLE1BZUEsU0FBQUksSUFDQSxRQUFBam1GLElBQUF1VixFQUFBaXhFLGtCQUFBeG1GLElBQUF1VixFQUFBbXhFLGNBQUEsQ0FFQSxJQUFBSSxHQUFBcndELFNBQUFsaEIsRUFBQWl4RSxZQUFBeGtGLE1BQUExRyxPQUFBLEdBQUEsS0FBQSxHQUFBLEdBQUE0bkYsR0FBQXpzRCxTQUFBbGhCLEVBQUFteEUsY0FBQTFrRixNQUFBLEtBQUEsR0FBQSxHQUFBdWdGLE9BQUF2aUYsSUFBQXVWLEVBQUF3eEUsZUFDQXR3RCxTQUFBbGhCLEVBQUF3eEUsY0FBQS9rRixNQUFBLEtBQUEsR0FBQSxHQUNBLE9BQ0FoQyxJQUFBdVYsRUFBQThxRSxPQWxCQXdCLEVBbUJBaUYsRUFuQkF6RyxFQW1CQTlxRSxFQUFBOHFFLEtBQUFqekUsWUFBQTA1RSxFQWxCQWpGLEVBQUEsR0FBQSxHQUFBckIsRUFBQUgsSUFBQTlxRSxFQUFBNHVFLEtBQUE5RCxLQUFBLEtBREEsSUFBQXdCLEVBQUF4QixFQW9CQTlxRSxFQUFBMnVFLE9BQUE4QixTQUNBendFLEVBQUFzeEUsZ0JBQ0F0eEUsRUFBQXV2RSx1QkFDQSxJQUFBN0ksRUFBQTFtRSxFQUFBdXZFLHNCQUFBdnZFLEVBQUEydUUsT0FBQThCLFdBQ0FjLEVBQUE1bUYsS0FBQSt0QixJQUFBNjRELEVBQUF2eEUsRUFBQTJ1RSxPQUFBOEIsUUFBQTdELGVBQ0E1c0UsRUFBQTJ1RSxPQUFBOEIsUUFBQTdELGFBQ0FlLEVBQUFoakYsS0FBQSt0QixJQUFBaTFELEVBQUEzdEUsRUFBQTJ1RSxPQUFBOEIsUUFBQXZDLGVBRUFsdUUsRUFBQTJ1RSxPQUFBOEMsU0FDQXp4RSxFQUFBMHhFLGdCQUNBMXhFLEVBQUF1dkUsdUJBQ0EsSUFBQTdJLEVBQUExbUUsRUFBQXV2RSxzQkFBQXZ2RSxFQUFBMnVFLE9BQUE4QyxXQUNBRixFQUFBNW1GLEtBQUFnOEMsSUFBQTRxQyxFQUFBdnhFLEVBQUEydUUsT0FBQThDLFFBQUE3RSxlQUNBNXNFLEVBQUEydUUsT0FBQThDLFFBQUE3RSxhQUNBZSxFQUFBaGpGLEtBQUFnOEMsSUFBQWduQyxFQUFBM3RFLEVBQUEydUUsT0FBQThDLFFBQUF2RCxlQUVBcEgsRUFBQXlLLEVBQUE1RCxFQUFBWCxJQUVBLFNBQUFpQyxFQUFBL0MsR0FDQSxJQUFBek0sRUFBQXlNLEdBQUFsc0UsRUFBQXV2RSxzQkFDQTlQLEdBQ0FxSCxFQUFBckgsRUFBQW1OLFdBQUFuTixFQUFBeU8sYUFBQXpPLEVBQUF3TyxjQUVBLFNBQUFuSCxFQUFBeUssRUFBQTVELEVBQUFYLFFBQ0F2aUYsSUFBQXVWLEVBQUF1dkUsdUJBQ0F2dkUsRUFBQXV2RSxzQkFBQXpJLFNBQUF5SyxFQUFBLEdBQUE1RCxFQUFBWCxHQUFBLEVBQUEsR0FFQWh0RSxFQUFBaXhFLGFBQUFqeEUsRUFBQW14RSxnQkFBQW54RSxFQUFBa2hDLFdBRUFsaEMsRUFBQWl4RSxZQUFBeGtGLE1BQUFzK0UsRUFBQS9xRSxFQUFBMnVFLE9BQUExRSxVQUVBc0gsR0FEQSxHQUFBQSxHQUFBLEdBQUEsR0FBQXRHLEVBQUFzRyxFQUFBLElBQUEsSUFFQXZ4RSxFQUFBbXhFLGNBQUExa0YsTUFBQXMrRSxFQUFBNEMsUUFDQWxqRixJQUFBdVYsRUFBQThxRSxPQUNBOXFFLEVBQUE4cUUsS0FBQWp6RSxZQUFBbUksRUFBQTR1RSxLQUFBOUQsS0FBQUcsRUFBQXNHLEdBQUEsV0FDQTltRixJQUFBdVYsRUFBQXd4RSxnQkFDQXh4RSxFQUFBd3hFLGNBQUEva0YsTUFBQXMrRSxFQUFBaUMsS0FFQSxTQUFBMkUsRUFBQXBrRSxHQUNBLElBQUFtd0QsRUFBQXg4QyxTQUFBM1QsRUFBQXBqQixPQUFBc0MsUUFBQThnQixFQUFBcWpFLE9BQUEsR0FDQSxJQUFBbFQsRUFBQXQzRSxXQUFBZ0MsUUFBQSxVQUFBbWxCLEVBQUEzWixNQUNBb00sRUFBQTR4RSxtQkFBQXZoRSxPQUNBLFFBQUFyZCxLQUFBMHFFLEVBQUF0M0UsYUFDQStvRixFQUFBelIsSUFHQSxTQUFBcHZDLEVBQUFzYixFQUFBcjhCLEVBQUFuWixHQUNBLE9BQUFtWixhQUFBaGpCLE1BQ0FnakIsRUFBQW8xQixRQUFBLFNBQUFrcEIsR0FBQSxPQUFBdjlCLEVBQUFzYixFQUFBaWlCLEVBQUF6M0QsS0FDQXcxQyxhQUFBci9DLE1BQ0FxL0MsRUFBQWpILFFBQUEsU0FBQTF1QyxHQUFBLE9BQUFxNkIsRUFBQXI2QixFQUFBc1osRUFBQW5aLE1BQ0F3MUMsRUFBQXQwQyxpQkFBQWlZLEVBQUFuWixRQUNBNEwsRUFBQTh1RSxVQUFBN29GLE1BQUEyakQsUUFBQUEsRUFBQXI4QixNQUFBQSxFQUFBblosUUFBQUEsS0FFQSxTQUFBeTlFLEVBQUF6OUUsR0FDQSxPQUFBLFNBQUEwM0IsR0FDQSxJQUFBQSxFQUFBblosT0FBQXZlLEVBQUEwM0IsSUFHQSxTQUFBc2tELElBQ0FWLEdBQUEsWUFtRUEsU0FBQW9DLElBQ0E5eEUsRUFBQTZ1RSxlQUFBbHNDLFFBQUEsU0FBQXVTLEdBQUEsT0FBQUEsTUFDQWwxQyxFQUFBNnVFLGtCQUVBLFNBQUFrRCxFQUFBLy9FLEdBQ0EsR0FBQWdPLEVBQUFneUUsZUFBQWh5RSxFQUFBZ3lFLGNBQUFsZ0YsV0FBQTFKLE9BQUEsRUFDQSxPQUFBNEosRUFBQWlnRixlQUNBLElBQUEsY0FDQWp5RSxFQUFBZ3lFLGNBQUF0NEUsV0FDQXNHLEVBQUFneUUsY0FBQXQ0RSxVQUFBMnhFLFVBQUE5b0UsT0FBQSxnQkFDQXZDLEVBQUFneUUsY0FBQTVxRixZQUFBNFksRUFBQWd5RSxjQUNBbDZFLFlBQ0FrSSxFQUFBa3lFLEtBQUFseUUsRUFBQWd5RSxjQUFBbDZFLFdBQ0FnNkUsSUFDQSxNQUNBLElBQUEsZUFDQTl4RSxFQUFBZ3lFLGNBQUFsNkUsWUFDQWtJLEVBQUFneUUsY0FBQWw2RSxXQUFBdXpFLFVBQUE5b0UsT0FBQSxpQkFDQXZDLEVBQUFneUUsY0FBQTVxRixZQUFBNFksRUFBQWd5RSxjQUNBdDRFLFdBQ0FzRyxFQUFBa3lFLEtBQUFseUUsRUFBQWd5RSxjQUFBbDZFLFdBQ0FnNkUsS0FPQSxTQUFBSyxFQUFBbmdGLEdBQ0EsT0FBQUEsRUFBQWlnRixlQUNBLElBQUEsaUJBQ0EsSUFBQSxrQkFDQWp5RSxFQUFBb3lFLHVCQUFBL0csVUFBQTlvRSxPQUFBLGdCQUNBdkMsRUFBQW95RSx1QkFBQS9HLFVBQUE5b0UsT0FBQSxpQkFFQSxJQURBLElBQUE4dkUsRUFBQXJ5RSxFQUFBb3lFLHVCQUNBQyxFQUFBMzlFLGFBQ0EsT0FBQTFCLEtBQUFxL0UsRUFBQTM5RSxZQUFBYyxZQUNBd0ssRUFBQXN5RSxTQUFBbHJGLFlBQUFpckYsRUFBQTM5RSxhQUNBLEtBQUEyOUUsRUFBQUUsaUJBQ0EsT0FBQXYvRSxLQUFBcS9FLEVBQUFFLGdCQUFBLzhFLFlBQ0F3SyxFQUFBc3lFLFNBQUFsckYsWUFBQWlyRixFQUFBRSxpQkFDQXZ5RSxFQUFBd3lFLGlCQUFBL25GLEdBSUEsU0FBQXdsRixFQUFBd0MsR0FDQSxJQUFBM3ZDLE9BQUFyNEMsSUFBQWdvRixFQUNBakUsRUFBQWlFLEdBQ0F6eUUsRUFBQXV2RSx3QkFDQXZ2RSxFQUFBMnVFLE9BQUE4QixTQUFBendFLEVBQUEydUUsT0FBQThCLFFBQUF6d0UsRUFBQWxULElBQ0FrVCxFQUFBMnVFLE9BQUE4QixRQUNBendFLEVBQUEydUUsT0FBQThDLFNBQUF6eEUsRUFBQTJ1RSxPQUFBOEMsUUFBQXp4RSxFQUFBbFQsSUFDQWtULEVBQUEydUUsT0FBQThDLFFBQ0F6eEUsRUFBQWxULEtBQ0EsU0FDQXJDLElBQUFxNEMsSUFDQTlpQyxFQUFBMHlFLFlBQUE1dkMsRUFBQWc2QixjQUNBOThELEVBQUEyeUUsYUFBQTd2QyxFQUFBdzZCLFlBR0EsTUFBQXRyRSxHQUNBQSxFQUFBa1UsUUFBQSwwQkFBQTQ4QixFQUNBOWlDLEVBQUEydUUsT0FBQXBHLGFBQUF2MkUsR0FFQWdPLEVBQUF5dkUsU0FFQSxTQUFBbUQsRUFBQTVnRixJQUNBQSxFQUFBN0gsT0FBQXFMLFVBQUF0UCxRQUFBLFVBQ0FrckYsRUFBQXAvRSxFQUFBQSxFQUFBN0gsT0FBQWtoRixVQUFBbDlFLFNBQUEsV0FBQSxHQUFBLEdBRUEsU0FBQWlqRixFQUFBcC9FLEVBQUE0K0UsRUFBQWlDLEdBQ0EsSUFBQTFvRixFQUFBNkgsR0FBQUEsRUFBQTdILE9BQ0ErTCxFQUFBMjhFLEdBQ0Exb0YsR0FBQUEsRUFBQWhELFlBQUFnRCxFQUFBaEQsV0FBQTJRLFdBQ0F5VixFQUFBdWxFLEdBQUEsYUFDQXZsRSxFQUFBcWpFLE1BQUFBLEVBQ0ExNkUsR0FBQUEsRUFBQTY4RSxjQUFBeGxFLEdBd0RBLFNBQUF5bEUsRUFBQXg5RSxFQUFBaXFFLEVBQUF3VCxFQUFBaHFGLEdBQ0EsSUFBQWlxRixFQUFBbEQsRUFBQXZRLEdBQUEsR0FBQTBULEVBQUFwc0YsRUFBQSxPQUFBLGlCQUFBeU8sRUFBQWlxRSxFQUFBcEMsVUFBQWozRSxZQUNBK3NGLEVBQUFqSCxRQUFBek0sRUFDQTBULEVBQUFDLEdBQUFucUYsRUFDQWtxRixFQUFBaGdGLGFBQUEsYUFBQTZNLEVBQUF5dUUsV0FBQWhQLEVBQUF6L0QsRUFBQTJ1RSxPQUFBaEgsaUJBQ0EsSUFBQWpCLEVBQUFqSCxFQUFBei9ELEVBQUFsVCxPQUNBa1QsRUFBQXF6RSxjQUFBRixFQUNBQSxFQUFBOUgsVUFBQXZxRSxJQUFBLFVBRUFveUUsR0FDQUMsRUFBQXI0RSxVQUFBLEVBQ0F3NEUsR0FBQTdULEtBQ0EwVCxFQUFBOUgsVUFBQXZxRSxJQUFBLFlBQ0FkLEVBQUF1ekUsaUJBQUFKLEVBQ0EsVUFBQW56RSxFQUFBMnVFLE9BQUF2L0MsT0FDQXZOLEVBQUFzeEQsRUFBQSxhQUFBbnpFLEVBQUFzdkUsY0FBQSxJQUNBLElBQUE1SSxFQUFBakgsRUFBQXovRCxFQUFBc3ZFLGNBQUEsS0FDQXp0RCxFQUFBc3hELEVBQUEsV0FBQW56RSxFQUFBc3ZFLGNBQUEsSUFDQSxJQUFBNUksRUFBQWpILEVBQUF6L0QsRUFBQXN2RSxjQUFBLFNBS0E2RCxFQUFBOUgsVUFBQXZxRSxJQUFBLFlBQ0FkLEVBQUFzdkUsY0FBQSxJQUNBdHZFLEVBQUF3ekUsY0FDQS9ULEVBQUF6L0QsRUFBQXd6RSxjQUNBL1QsRUFBQXovRCxFQUFBc3ZFLGNBQUEsR0FDQXR2RSxFQUFBd3pFLGFBQUEvVCxFQUNBei9ELEVBQUFzdkUsY0FBQSxJQUNBdHZFLEVBQUF5ekUsY0FDQWhVLEVBQUF6L0QsRUFBQXl6RSxjQUNBaFUsRUFBQXovRCxFQUFBc3ZFLGNBQUEsS0FDQXR2RSxFQUFBeXpFLGFBQUFoVSxJQUVBLFVBQUF6L0QsRUFBQTJ1RSxPQUFBdi9DLE9BMHBDQXF3QyxFQXpwQ0FBLElBMHBDQSxVQUFBei9ELEVBQUEydUUsT0FBQXYvQyxNQUFBcHZCLEVBQUFzdkUsY0FBQWxuRixPQUFBLElBRUFzK0UsRUFBQWpILEVBQUF6L0QsRUFBQXN2RSxjQUFBLEtBQUEsR0FDQTVJLEVBQUFqSCxFQUFBei9ELEVBQUFzdkUsY0FBQSxLQUFBLElBN3BDQWdFLEdBQUE3VCxJQUNBMFQsRUFBQTlILFVBQUF2cUUsSUFBQSxXQUNBLElBQUFkLEVBQUFzdkUsY0FBQWxuRixhQUNBcUMsSUFBQXVWLEVBQUF3ekUsbUJBQ0Evb0YsSUFBQXVWLEVBQUF5ekUsZUFDQWhVLEVBQUF6L0QsRUFBQXd6RSxjQUFBL1QsRUFBQXovRCxFQUFBeXpFLGVBQ0FOLEVBQUE5SCxVQUFBdnFFLElBQUEsZUFtcENBLElBQUEyK0QsRUF6b0NBLE9BUkF6L0QsRUFBQWtxRSxhQUNBLGlCQUFBMTBFLEdBQ0F5OUUsRUFBQSxHQUFBLEdBQ0FqekUsRUFBQWtxRSxZQUFBd0osbUJBQUEsWUFBQSx3Q0FDQTF6RSxFQUFBMnVFLE9BQUFuRyxRQUFBL0ksR0FDQSxXQUVBaVEsR0FBQSxjQUFBeUQsR0FDQUEsRUFFQSxTQUFBUSxFQUFBaitDLEVBQUE1SSxHQUNBLElBQUE4bUQsRUFBQWwrQyxFQUFBNUksR0FBQSxFQUFBK21ELE9BQUFwcEYsSUFBQWlyQyxFQUNBMTFCLEVBQUFreUUsS0FBQXBnRixXQUFBOGhGLEdBQ0E1ekUsRUFBQXV6RSxrQkFDQXZ6RSxFQUFBcXpFLGVBQ0FyekUsRUFBQWt5RSxLQUFBcGdGLFdBQUEsR0FDQTRJLEVBQUEsWUFDQW01RSxFQUFBQSxHQUFBN3pFLEVBQUFreUUsS0FBQXBnRixXQUFBOGhGLElBQ0FsNUUsUUFDQSxVQUFBc0YsRUFBQTJ1RSxPQUFBdi9DLE1BQ0Ewa0QsRUFBQUQsSUFFQSxRQUFBcHBGLElBQUFvcEYsR0FBQSxJQUFBL21ELEVBU0EsT0FSQUEsRUFBQSxHQUNBOXNCLEVBQUFrdkUsWUFBQSxHQUFBLE9BQUF6a0YsR0FBQSxHQUNBbXBGLEdBQUEsSUFFQTltRCxFQUFBLElBQ0E5c0IsRUFBQWt2RSxhQUFBLEdBQUEsT0FBQXprRixHQUFBLEdBQ0FtcEYsR0FBQSxJQUVBRyxFQUFBcjVFLEdBRUFBLElBRUEsU0FBQXE1RSxFQUFBdnNGLElBQ0EsSUFBQXdZLEVBQUEydUUsT0FBQTN2RCxRQUFBaGYsRUFBQTZ1RSxlQUFBNW9GLEtBQUF1QixHQUFBQSxJQUVBLFNBQUF3c0YsRUFBQXBELEdBQ0EsUUFBQW5tRixJQUFBdVYsRUFBQWd5RSxjQUFBLENBR0EsSUFBQWlDLEdBQUEsSUFBQWxuRixLQUFBaVQsRUFBQTB5RSxZQUFBMXlFLEVBQUEyeUUsYUFBQSxHQUFBaEssU0FDQTNvRSxFQUFBNHVFLEtBQUFyRSxlQUNBLEdBQ0EsRUFBQTJKLEVBQUEsVUFBQWwwRSxFQUFBMnVFLE9BQUF2L0MsS0FDQStrRCxFQUFBbjBFLEVBQUFvMEUsTUFBQUMsZ0JBQUFyMEUsRUFBQTJ5RSxhQUFBLEVBQUEsSUFBQSxJQUNBckksRUFBQXRxRSxFQUFBbzBFLE1BQUFDLGlCQUFBbkMsRUFBQTFzRixPQUFBSCxTQUFBK21CLHlCQUNBNm1FLEVBQUFrQixFQUFBLEVBQUFGLEVBQUFLLEVBQUEsRUFPQSxJQU5BdDBFLEVBQUFrcUUsYUFBQWxxRSxFQUFBa3FFLFlBQUFweUUsYUFDQWtJLEVBQUFrcUUsWUFBQXJ5RSxZQUFBLElBQ0FxOEUsSUFDQWwwRSxFQUFBd3pFLGFBQUEsSUFBQXptRixLQUFBaVQsRUFBQTB5RSxZQUFBMXlFLEVBQUEyeUUsYUFBQSxFQUFBTSxHQUNBanpFLEVBQUF5ekUsYUFBQSxJQUFBMW1GLEtBQUFpVCxFQUFBMHlFLFlBQUExeUUsRUFBQTJ5RSxhQUFBLEdBQUEsR0FBQXNCLEdBQUEzSixJQUVBMkksR0FBQWtCLEVBQUFsQixJQUFBcUIsSUFDQXBDLEVBQUFockYsWUFBQThyRixFQUFBLGVBQUEsSUFBQWptRixLQUFBaVQsRUFBQTB5RSxZQUFBMXlFLEVBQUEyeUUsYUFBQSxFQUFBTSxHQUFBQSxFQUFBcUIsSUFFQSxJQUFBckIsRUFBQSxFQUFBQSxHQUFBM0ksRUFBQTJJLElBQUFxQixJQUNBcEMsRUFBQWhyRixZQUFBOHJGLEVBQUEsR0FBQSxJQUFBam1GLEtBQUFpVCxFQUFBMHlFLFlBQUExeUUsRUFBQTJ5RSxhQUFBTSxHQUFBQSxFQUFBcUIsSUFFQSxJQUFBLElBQUFDLEVBQUFqSyxFQUFBLEVBQUFpSyxHQUFBLEdBQUFOLEVBQUFNLElBQUFELElBQ0FwQyxFQUFBaHJGLFlBQUE4ckYsRUFBQSxlQUFBLElBQUFqbUYsS0FBQWlULEVBQUEweUUsWUFBQTF5RSxFQUFBMnlFLGFBQUEsRUFBQTRCLEVBQUFqSyxHQUFBaUssRUFBQUQsSUFFQUosR0FBQSxJQUFBbDBFLEVBQUFzdkUsY0FBQWxuRixRQUFBOHBGLEVBQUFwZ0YsV0FBQSxJQUNBa08sRUFBQXcwRSxvQkFDQXgwRSxFQUFBdzBFLHVCQUNBeDBFLEVBQUF3ekUsY0FDQXh6RSxFQUFBd3pFLGFBQUF0QixFQUFBcGdGLFdBQUEsR0FBQW82RSxRQUNBbHNFLEVBQUF5MEUsb0JBQ0F6MEUsRUFBQXkwRSx1QkFDQXowRSxFQUFBeXpFLGNBQ0F6ekUsRUFBQXl6RSxhQUNBLElBQUExbUYsS0FBQWlULEVBQUEweUUsWUFBQTF5RSxFQUFBMnlFLGFBQUEsRUFBQSxJQUdBK0IsS0FDQSxJQUFBQyxFQUFBNXRGLEVBQUEsTUFBQSxnQkFFQSxHQURBNHRGLEVBQUF6dEYsWUFBQWdyRixHQUNBbHlFLEVBQUEydUUsT0FBQTN2RCxjQUFBdjBCLElBQUFtbUYsRUFHQSxLQUFBNXdFLEVBQUFneUUsY0FBQWxnRixXQUFBMUosT0FBQSxHQUNBNFgsRUFBQWd5RSxjQUFBNXFGLFlBQUE0WSxFQUFBZ3lFLGNBQUFsNkUsaUJBeHBCQSxTQUFBN0MsR0FDQSxLQUFBQSxFQUFBNkMsWUFDQTdDLEVBQUE3TixZQUFBNk4sRUFBQTZDLFlBbXBCQTg4RSxDQUFBNTBFLEVBQUFneUUsZUFLQXBCLEdBQUFBLEdBQUEsRUFDQTV3RSxFQUFBZ3lFLGNBQUE5cUYsWUFBQXl0RixHQUVBMzBFLEVBQUFneUUsY0FBQS84RCxhQUFBMC9ELEVBQUEzMEUsRUFBQWd5RSxjQUFBbDZFLFlBQ0FrSSxFQUFBa3lFLEtBQUFseUUsRUFBQWd5RSxjQUFBbGdGLFdBQUEsSUEyR0EsU0FBQStpRixJQUNBNzBFLEVBQUE4MEUsbUJBQ0E5MEUsRUFBQTgwRSxpQkFBQS90RixFQUFBLE1BQUEsdUJBQ0EsSUFBQXdqRixFQUFBdnFFLEVBQUE0dUUsS0FBQXJFLGVBQ0FILEVBQUFwcUUsRUFBQTR1RSxLQUFBeEUsU0FBQW5ELFVBQUFsaEYsUUFLQSxPQUpBd2tGLEVBQUEsR0FBQUEsRUFBQUgsRUFBQWhpRixTQUNBZ2lGLEVBQUFBLEVBQUF6Z0YsT0FBQTRnRixFQUFBSCxFQUFBaGlGLFFBQUFwQyxPQUFBb2tGLEVBQUF6Z0YsT0FBQSxFQUFBNGdGLEtBRUF2cUUsRUFBQTgwRSxpQkFBQTcrRSxVQUFBLCtDQUFBbTBFLEVBQUEvMkUsS0FBQSx5Q0FBQSxzQkFDQTJNLEVBQUE4MEUsaUJBYUEsU0FBQTVGLEVBQUF6aUYsRUFBQXNvRixFQUFBLzFELEVBQUFnMkQsUUFDQSxJQUFBRCxJQUFBQSxHQUFBLFFBQ0EsSUFBQS8xRCxJQUFBQSxFQUFBaGYsRUFBQTJ1RSxPQUFBM3ZELGNBQ0EsSUFBQWcyRCxJQUFBQSxHQUFBLEdBQ0EsSUFBQXBFLEVBQUFtRSxFQUFBdG9GLEVBQUFBLEVBQUF1VCxFQUFBMnlFLGFBQ0EsS0FBQS9CLEVBQUEsR0FBQTV3RSxFQUFBdzBFLHFCQUNBNUQsRUFBQSxHQUFBNXdFLEVBQUF5MEUscUJBREEsQ0FVQSxHQVBBejBFLEVBQUEyeUUsY0FBQS9CLEdBQ0E1d0UsRUFBQTJ5RSxhQUFBLEdBQUEzeUUsRUFBQTJ5RSxhQUFBLE1BQ0EzeUUsRUFBQTB5RSxhQUFBMXlFLEVBQUEyeUUsYUFBQSxHQUFBLEdBQUEsRUFDQTN5RSxFQUFBMnlFLGNBQUEzeUUsRUFBQTJ5RSxhQUFBLElBQUEsR0FDQWpELEdBQUEsaUJBRUFzRSxFQUFBaDFELEVBQUE0eEQsT0FBQW5tRixJQUNBdTBCLEVBRUEsT0FEQTB3RCxHQUFBLGlCQUNBZ0YsS0FFQSxJQUFBckMsRUFBQXJ5RSxFQUFBb3lFLHVCQUNBLEdBQUF4QixFQUFBLEVBQ0EsS0FBQXlCLEVBQUEzOUUsYUFDQSxPQUFBMUIsS0FBQXEvRSxFQUFBMzlFLFlBQUFjLFlBQ0F3SyxFQUFBc3lFLFNBQUFsckYsWUFBQWlyRixFQUFBMzlFLGtCQUVBLEdBQUFrOEUsRUFBQSxFQUNBLEtBQUF5QixFQUFBRSxpQkFDQSxPQUFBdi9FLEtBQUFxL0UsRUFBQUUsZ0JBQUEvOEUsWUFDQXdLLEVBQUFzeUUsU0FBQWxyRixZQUFBaXJGLEVBQUFFLGlCQUVBdnlFLEVBQUF3eUUsWUFBQXh5RSxFQUFBb3lFLHVCQUNBcHlFLEVBQUFveUUsdUJBQUFweUUsRUFBQXN5RSxTQUFBcjlELGFBQUFqVixFQUFBd3lFLFlBQUE5bEUsV0FBQSxHQUFBa2tFLEVBQUEsRUFBQTV3RSxFQUFBd3lFLFlBQUE5OUUsWUFBQXNMLEVBQUF3eUUsYUFDQSxJQUFBUixFQUFBaHlFLEVBQUFneUUsY0F1QkEsR0F0QkFBLEVBQUFsNkUsWUFBQWs2RSxFQUFBdDRFLFlBQ0FrM0UsRUFBQSxHQUNBb0IsRUFBQWw2RSxXQUFBdXpFLFVBQUF2cUUsSUFBQSxhQUNBa3hFLEVBQUF0NEUsVUFBQTJ4RSxVQUFBdnFFLElBQUEsZ0JBQ0FkLEVBQUF3eUUsWUFBQW5ILFVBQUF2cUUsSUFBQSxhQUNBZCxFQUFBb3lFLHVCQUFBL0csVUFBQXZxRSxJQUFBLGlCQUVBOHZFLEVBQUEsSUFDQW9CLEVBQUFsNkUsV0FBQXV6RSxVQUFBdnFFLElBQUEsaUJBQ0FreEUsRUFBQXQ0RSxVQUFBMnhFLFVBQUF2cUUsSUFBQSxjQUNBZCxFQUFBd3lFLFlBQUFuSCxVQUFBdnFFLElBQUEsY0FDQWQsRUFBQW95RSx1QkFBQS9HLFVBQUF2cUUsSUFBQSxtQkFHQWQsRUFBQWkxRSxvQkFBQWoxRSxFQUFBb3lFLHVCQUNBdDZFLFdBQ0FrSSxFQUFBNHhFLG1CQUFBNXhFLEVBQUFveUUsdUJBQUExNEUsVUFDQTVILFdBQUEsR0FDQTRpRixLQUNBMTBFLEVBQUF3eUUsWUFBQTE2RSxhQUNBa0ksRUFBQXd5RSxZQUFBMTZFLFdBQUFELFlBQUFrdkUsRUFBQS9tRSxFQUFBMnlFLGFBQUEvQixFQUFBNXdFLEVBQUEydUUsT0FBQTVFLHNCQUFBL3BFLEVBQUE0dUUsT0FDQW1GLEVBQUEsV0FBQSxPQUFBckUsR0FBQSxtQkFDQXNGLEdBQ0EzdkYsU0FBQXNWLGVBQ0F0VixTQUFBc1YsY0FBQXk0RSxHQUFBLENBQ0EsSUFBQThCLEVBQUE3dkYsU0FBQXNWLGNBQUF5NEUsR0FDQVcsRUFBQSxXQUNBSixFQUFBdUIsRUFBQSxPQXlGQSxTQUFBQyxFQUFBbnNGLEdBQ0EsU0FBQWdYLEVBQUEydUUsT0FBQXI1RCxXQUFBdFYsRUFBQTJ1RSxPQUFBcjVELFNBQUFubkIsU0FBQW5GLEtBRUFnWCxFQUFBNHZFLGtCQUFBemhGLFNBQUFuRixHQUVBLFNBQUFvc0YsRUFBQXBqRixHQUNBLEdBQUFnTyxFQUFBMnZFLFNBQUEzdkUsRUFBQTJ1RSxPQUFBN0YsT0FBQSxDQUNBLElBQUF1TSxFQUFBRixFQUFBbmpGLEVBQUE3SCxRQUNBbXJGLEVBQUF0akYsRUFBQTdILFNBQUE2VixFQUFBOUosT0FDQWxFLEVBQUE3SCxTQUFBNlYsRUFBQXluRSxVQUNBem5FLEVBQUE0cEMsUUFBQXo3QyxTQUFBNkQsRUFBQTdILFNBQ0E2SCxFQUFBdWpGLE1BQ0F2akYsRUFBQXVqRixLQUFBcnZGLFdBQ0E4TCxFQUFBdWpGLEtBQUFydkYsUUFBQThaLEVBQUE5SixTQUNBbEUsRUFBQXVqRixLQUFBcnZGLFFBQUE4WixFQUFBeW5FLFlBQ0EsU0FBQXoxRSxFQUFBN0csS0FDQW1xRixHQUNBdGpGLEVBQUE0ZSxnQkFDQXVrRSxFQUFBbmpGLEVBQUE0ZSxnQkFDQTBrRSxJQUFBRCxLQUVBLElBQUFyMUUsRUFBQTJ1RSxPQUFBOUYscUJBQUEzaUYsUUFBQThMLEVBQUE3SCxVQUNBNlYsRUFBQXE5QixRQUNBLFVBQUFyOUIsRUFBQTJ1RSxPQUFBdi9DLE1BQUEsSUFBQXB2QixFQUFBc3ZFLGNBQUFsbkYsU0FDQTRYLEVBQUFpekMsT0FBQSxHQUNBanpDLEVBQUF5dkUsWUFLQSxTQUFBTixFQUFBcUcsR0FDQSxNQUFBQSxHQUNBeDFFLEVBQUE0eEUsbUJBQUFqckMsS0FDQTZ1QyxFQUFBdDBELFNBQUFsaEIsRUFBQTR4RSxtQkFBQWpyQyxNQUNBM21DLEVBQUE0eEUsbUJBQUFsNUQsS0FDQTg4RCxFQUFBdDBELFNBQUFsaEIsRUFBQTR4RSxtQkFBQWw1RCxNQUpBLENBTUEsSUFBQSs4RCxFQUFBRCxFQUFBRSxFQUFBMTFFLEVBQUEweUUsY0FBQStDLEVBQ0F6MUUsRUFBQTB5RSxZQUFBK0MsR0FBQXoxRSxFQUFBMHlFLFlBQ0ExeUUsRUFBQTJ1RSxPQUFBOEMsU0FDQXp4RSxFQUFBMHlFLGNBQUExeUUsRUFBQTJ1RSxPQUFBOEMsUUFBQTNVLGNBQ0E5OEQsRUFBQTJ5RSxhQUFBaG9GLEtBQUFnOEMsSUFBQTNtQyxFQUFBMnVFLE9BQUE4QyxRQUFBblUsV0FBQXQ5RCxFQUFBMnlFLGNBRUEzeUUsRUFBQTJ1RSxPQUFBOEIsU0FDQXp3RSxFQUFBMHlFLGNBQUExeUUsRUFBQTJ1RSxPQUFBOEIsUUFBQTNULGdCQUNBOThELEVBQUEyeUUsYUFBQWhvRixLQUFBK3RCLElBQUExWSxFQUFBMnVFLE9BQUE4QixRQUFBblQsV0FBQXQ5RCxFQUFBMnlFLGVBRUErQyxJQUNBMTFFLEVBQUF5dkUsU0FDQUMsR0FBQSxrQkFHQSxTQUFBTSxFQUFBdlEsRUFBQW9ILFFBQ0EsSUFBQUEsSUFBQUEsR0FBQSxHQUNBLElBQUE4TyxFQUFBMzFFLEVBQUF3dUUsVUFBQS9PLE9BQUFoMUUsRUFBQW84RSxHQUNBLEdBQUE3bUUsRUFBQTJ1RSxPQUFBOEIsU0FDQWtGLEdBQ0FqUCxFQUFBaVAsRUFBQTMxRSxFQUFBMnVFLE9BQUE4QixhQUFBaG1GLElBQUFvOEUsRUFBQUEsR0FBQTdtRSxFQUFBc3hFLGdCQUFBLEdBQ0F0eEUsRUFBQTJ1RSxPQUFBOEMsU0FDQWtFLEdBQ0FqUCxFQUFBaVAsRUFBQTMxRSxFQUFBMnVFLE9BQUE4QyxhQUFBaG5GLElBQUFvOEUsRUFBQUEsR0FBQTdtRSxFQUFBMHhFLGdCQUFBLEVBQ0EsT0FBQSxFQUNBLElBQUExeEUsRUFBQTJ1RSxPQUFBdkcsT0FBQWhnRixTQUFBNFgsRUFBQTJ1RSxPQUFBbnNFLFFBQUFwYSxPQUNBLE9BQUEsRUFDQSxRQUFBcUMsSUFBQWtyRixFQUNBLE9BQUEsRUFFQSxJQUFBLElBREF2bEYsRUFBQTRQLEVBQUEydUUsT0FBQXZHLE9BQUFoZ0YsT0FBQSxFQUFBd3RGLEVBQUF4bEYsRUFBQTRQLEVBQUEydUUsT0FBQXZHLE9BQUFwb0UsRUFBQTJ1RSxPQUFBbnNFLFFBQ0F2WixFQUFBLEVBQUFxaEQsT0FBQSxFQUFBcmhELEVBQUEyc0YsRUFBQXh0RixPQUFBYSxJQUFBLENBRUEsR0FBQSxtQkFEQXFoRCxFQUFBc3JDLEVBQUEzc0YsS0FFQXFoRCxFQUFBcXJDLEdBQ0EsT0FBQXZsRixFQUNBLEdBQUFrNkMsYUFBQXY5QyxXQUNBdEMsSUFBQWtyRixHQUNBcnJDLEVBQUExQixZQUFBK3NDLEVBQUEvc0MsVUFDQSxPQUFBeDRDLEVBQ0EsR0FBQSxpQkFBQWs2QyxRQUFBNy9DLElBQUFrckYsRUFBQSxDQUNBLElBQUFocEQsRUFBQTNzQixFQUFBd3VFLFVBQUFsa0MsT0FBQTcvQyxHQUFBLEdBQ0EsT0FBQWtpQyxHQUFBQSxFQUFBaWMsWUFBQStzQyxFQUFBL3NDLFVBQ0F4NEMsR0FDQUEsRUFFQSxHQUFBLGlCQUFBazZDLFFBQ0E3L0MsSUFBQWtyRixHQUNBcnJDLEVBQUF1ckMsTUFDQXZyQyxFQUFBdnJCLElBQ0E0MkQsRUFBQS9zQyxXQUFBMEIsRUFBQXVyQyxLQUFBanRDLFdBQ0Erc0MsRUFBQS9zQyxXQUFBMEIsRUFBQXZyQixHQUFBNnBCLFVBQ0EsT0FBQXg0QyxFQUVBLE9BQUFBLEVBRUEsU0FBQWk5RCxFQUFBcjdELEdBQ0EsSUFBQXNqRixFQUFBdGpGLEVBQUE3SCxTQUFBNlYsRUFBQTZ2RSxPQUNBaUcsRUFBQVgsRUFBQW5qRixFQUFBN0gsUUFDQW85RSxFQUFBdm5FLEVBQUEydUUsT0FBQXBILFdBQ0F3TyxFQUFBLzFFLEVBQUEydkUsVUFBQXBJLElBQUErTixHQUNBVSxFQUFBaDJFLEVBQUEydUUsT0FBQTdGLFFBQUF3TSxJQUFBL04sRUFDQSxHQUFBLFVBQUF2MUUsRUFBQTRCLEtBQUEwaEYsRUFBQSxDQUNBLEdBQUEvTixFQUlBLE9BSEF2bkUsRUFBQTBzRSxRQUFBMXNFLEVBQUE2dkUsT0FBQXBqRixPQUFBLEVBQUF1RixFQUFBN0gsU0FBQTZWLEVBQUF5bkUsU0FDQXpuRSxFQUFBMnVFLE9BQUFuSCxVQUNBeG5FLEVBQUEydUUsT0FBQTVHLFlBQ0EvMUUsRUFBQTdILE9BQUFrbUIsT0FHQXJRLEVBQUFpckIsWUFFQSxHQUFBNnFELEdBQUFDLEdBQUFDLEVBQUEsQ0FDQSxJQUFBQyxJQUFBajJFLEVBQUFrMkUsZUFDQWwyRSxFQUFBazJFLGNBQUEvbkYsU0FBQTZELEVBQUE3SCxRQUNBLE9BQUE2SCxFQUFBNEIsS0FDQSxJQUFBLFFBQ0FxaUYsRUFDQTNGLEtBRUE2RixFQUFBbmtGLEdBQ0EsTUFDQSxJQUFBLFNBQ0FBLEVBQUF1ZCxpQkFDQXZQLEVBQUFxOUIsUUFDQSxNQUNBLElBQUEsWUFDQSxJQUFBLFNBQ0FpNEMsSUFBQXQxRSxFQUFBMnVFLE9BQUFwSCxZQUNBdm5FLEVBQUFpekMsUUFDQSxNQUNBLElBQUEsWUFDQSxJQUFBLGFBQ0EsR0FBQWdqQyxFQVVBajJFLEVBQUFpeEUsYUFDQWp4RSxFQUFBaXhFLFlBQUF2MkUsYUFUQSxHQURBMUksRUFBQXVkLGlCQUNBdlAsRUFBQWd5RSxjQUFBLENBQ0EsSUFBQW9FLEVBQUEsZUFBQXBrRixFQUFBNEIsSUFBQSxHQUFBLEVBQ0E1QixFQUFBb2YsUUFHQTg5RCxFQUFBa0gsR0FBQSxPQUFBM3JGLEdBQUEsR0FGQWtwRixFQUFBM2hGLEVBQUE3SCxPQUFBaXBGLEdBQUFnRCxHQU9BLE1BQ0EsSUFBQSxVQUNBLElBQUEsWUFDQXBrRixFQUFBdWQsaUJBQ0EsSUFBQXFoRSxFQUFBLGNBQUE1K0UsRUFBQTRCLElBQUEsR0FBQSxFQUNBb00sRUFBQWd5RSxvQkFBQXZuRixJQUFBdUgsRUFBQTdILE9BQUFpcEYsR0FDQXBoRixFQUFBb2YsU0FDQSs5RCxFQUFBbnZFLEVBQUEweUUsWUFBQTlCLEdBQ0ErQyxFQUFBM2hGLEVBQUE3SCxPQUFBaXBGLEdBQUEsSUFFQTZDLEdBQ0F0QyxFQUFBM2hGLEVBQUE3SCxPQUFBaXBGLEdBQUEsRUFBQXhDLEdBRUE1d0UsRUFBQTJ1RSxPQUFBckcsY0FDQTJOLEdBQUFqMkUsRUFBQWl4RSxhQUNBanhFLEVBQUFpeEUsWUFBQXYyRSxRQUNBODFFLEVBQUF4K0UsR0FDQWdPLEVBQUFxMkUsb0JBRUEsTUFDQSxJQUFBLE1BQ0Fya0YsRUFBQTdILFNBQUE2VixFQUFBaXhFLGFBQ0FqL0UsRUFBQXVkLGlCQUNBdlAsRUFBQW14RSxjQUFBempGLFVBRUFzRSxFQUFBN0gsU0FBQTZWLEVBQUFteEUsZ0JBQ0FueEUsRUFBQXd4RSxlQUFBeHhFLEVBQUE4cUUsT0FDQTk0RSxFQUFBdWQsc0JBQ0E5a0IsSUFBQXVWLEVBQUF3eEUsY0FDQXh4RSxFQUFBd3hFLGNBQUE5MkUsYUFDQWpRLElBQUF1VixFQUFBOHFFLE1BQ0E5cUUsRUFBQThxRSxLQUFBcHdFLFNBRUExSSxFQUFBN0gsU0FBQTZWLEVBQUF3eEUsZUFBQXh4RSxFQUFBOHFFLE9BQ0E5NEUsRUFBQXVkLGlCQUNBdlAsRUFBQThxRSxLQUFBcHdFLFNBRUEsTUFDQSxLQUFBc0YsRUFBQTR1RSxLQUFBOUQsS0FBQSxHQUFBMW5DLE9BQUEsUUFDQTM0QyxJQUFBdVYsRUFBQThxRSxNQUFBOTRFLEVBQUE3SCxTQUFBNlYsRUFBQThxRSxPQUNBOXFFLEVBQUE4cUUsS0FBQWp6RSxZQUFBbUksRUFBQTR1RSxLQUFBOUQsS0FBQSxHQUNBNEYsSUFDQUosTUFFQSxNQUNBLEtBQUF0d0UsRUFBQTR1RSxLQUFBOUQsS0FBQSxHQUFBMW5DLE9BQUEsUUFDQTM0QyxJQUFBdVYsRUFBQThxRSxNQUFBOTRFLEVBQUE3SCxTQUFBNlYsRUFBQThxRSxPQUNBOXFFLEVBQUE4cUUsS0FBQWp6RSxZQUFBbUksRUFBQTR1RSxLQUFBOUQsS0FBQSxHQUNBNEYsSUFDQUosTUFNQVosR0FBQSxZQUFBMTlFLElBR0EsU0FBQThoRixFQUFBOXFGLEdBQ0EsR0FBQSxJQUFBZ1gsRUFBQXN2RSxjQUFBbG5GLFFBQ0FZLEVBQUFxaUYsVUFBQWw5RSxTQUFBLHVCQUNBMUQsSUFBQXVWLEVBQUF3ekUsbUJBQ0Evb0YsSUFBQXVWLEVBQUF5ekUsYUFIQSxDQU1BLElBQUEsSUFEQTZDLEVBQUF0dEYsRUFBQWtqRixRQUFBcUssRUFBQXYyRSxFQUFBd3VFLFVBQUF4dUUsRUFBQXN2RSxjQUFBLFFBQUE3a0YsR0FBQSxHQUFBK3JGLEVBQUE3ckYsS0FBQWc4QyxJQUFBMnZDLEVBQUExdEMsVUFBQTVvQyxFQUFBc3ZFLGNBQUEsR0FBQTFtQyxXQUFBNnRDLEVBQUE5ckYsS0FBQSt0QixJQUFBNDlELEVBQUExdEMsVUFBQTVvQyxFQUFBc3ZFLGNBQUEsR0FBQTFtQyxXQUFBOHRDLEdBQUEsRUFDQTlvRSxFQUFBNG9FLEVBQUE1b0UsRUFBQTZvRSxFQUFBN29FLEdBQUF3TixFQUFBZ3NELElBQ0EsSUFBQTRJLEVBQUEsSUFBQWpqRixLQUFBNmdCLElBQUEsQ0FDQThvRSxHQUFBLEVBQ0EsTUE0QkEsSUFBQSxJQXpCQUMsRUFBQSxTQUFBMXRGLEVBQUF3MkUsR0FDQSxJQUFBbVgsRUFBQW5YLEVBQUE3MkIsVUFDQWl1QyxFQUFBRCxFQUFBNTJFLEVBQUF3ekUsYUFBQTVxQyxXQUNBZ3VDLEVBQUE1MkUsRUFBQXl6RSxhQUFBN3FDLFVBQUFrdUMsRUFBQTkyRSxFQUFBa3lFLEtBQUFwZ0YsV0FBQTdJLEdBQ0EsR0FBQTR0RixFQUtBLE9BSkFDLEVBQUF6TCxVQUFBdnFFLElBQUEsZUFDQSxVQUFBLGFBQUEsWUFBQTZoQyxRQUFBLFNBQUFpVSxHQUNBa2dDLEVBQUF6TCxVQUFBOW9FLE9BQUFxMEMsS0FFQSxXQUVBLEdBQUE4L0IsSUFBQUcsRUFDQSxNQUFBLFlBQ0EsYUFBQSxVQUFBLFdBQUEsY0FBQWwwQyxRQUFBLFNBQUFpVSxHQUNBa2dDLEVBQUF6TCxVQUFBOW9FLE9BQUFxMEMsS0FFQSxJQUFBNDhCLEVBQUE3b0YsS0FBQSt0QixJQUFBMVksRUFBQXd6RSxhQUFBNXFDLFVBQUE0dEMsR0FBQS9DLEVBQUE5b0YsS0FBQWc4QyxJQUFBM21DLEVBQUF5ekUsYUFBQTdxQyxVQUFBNnRDLEdBQ0F6dEYsRUFBQXFpRixVQUFBdnFFLElBQUF3MUUsRUFBQXQyRSxFQUFBc3ZFLGNBQUEsR0FBQSxhQUFBLFlBQ0FpSCxFQUFBRCxHQUFBTSxJQUFBTCxFQUFBM3RDLFVBQ0FrdUMsRUFBQXpMLFVBQUF2cUUsSUFBQSxjQUNBeTFFLEVBQUFELEdBQUFNLElBQUFMLEVBQUEzdEMsV0FDQWt1QyxFQUFBekwsVUFBQXZxRSxJQUFBLFlBQ0E4MUUsR0FBQXBELEdBQUFvRCxHQUFBbkQsR0FDQXFELEVBQUF6TCxVQUFBdnFFLElBQUEsWUFFQTdYLEVBQUEsRUFBQXcyRSxFQUFBei9ELEVBQUFreUUsS0FBQXBnRixXQUFBN0ksR0FBQWlqRixRQUFBampGLEVBQUEsR0FBQUEsSUFBQXcyRSxFQUNBei9ELEVBQUFreUUsS0FBQXBnRixXQUFBN0ksSUFDQStXLEVBQUFreUUsS0FBQXBnRixXQUFBN0ksR0FBQWlqRixRQUNBeUssRUFBQTF0RixFQUFBdzJFLElBR0EsU0FBQXNYLEtBQ0EvMkUsRUFBQTJ2RSxRQUFBM3ZFLEVBQUEydUUsT0FBQTNFLFFBQUFocUUsRUFBQTJ1RSxPQUFBN0YsUUFDQXFILElBd0JBLFNBQUE2RyxFQUFBN3JGLEdBQ0EsT0FBQSxTQUFBczBFLEdBQ0EsSUFBQXlNLEVBQUFsc0UsRUFBQTJ1RSxPQUFBLElBQUF4akYsRUFBQSxRQUFBNlUsRUFBQXd1RSxVQUFBL08sR0FDQXdYLEVBQUFqM0UsRUFBQTJ1RSxPQUFBLEtBQUEsUUFBQXhqRixFQUFBLE1BQUEsT0FBQSxhQUNBVixJQUFBeWhGLElBQ0Fsc0UsRUFBQSxRQUFBN1UsRUFBQSxpQkFBQSxrQkFDQStnRixFQUFBVSxXQUFBLEdBQ0FWLEVBQUFnQyxhQUFBLEdBQ0FoQyxFQUFBK0IsYUFBQSxHQUVBanVFLEVBQUFzdkUsZ0JBQ0F0dkUsRUFBQXN2RSxjQUFBdHZFLEVBQUFzdkUsY0FBQTE1RSxPQUFBLFNBQUEwMEMsR0FBQSxPQUFBMGxDLEVBQUExbEMsS0FDQXRxQyxFQUFBc3ZFLGNBQUFsbkYsUUFBQSxRQUFBK0MsR0FDQThqRixFQUFBL0MsR0FDQW9FLE1BRUF0d0UsRUFBQWd5RSxnQkFDQXZDLFNBQ0FobEYsSUFBQXloRixFQUNBbHNFLEVBQUE0eEUsbUJBQUF6bUYsR0FBQStnRixFQUFBcFAsY0FBQTEyRSxXQUVBNFosRUFBQTR4RSxtQkFBQW4rRSxnQkFBQXRJLEdBQ0E2VSxFQUFBNHhFLG1CQUFBamdGLFdBQ0FzbEYsUUFDQXhzRixJQUFBeWhGLEdBQ0ErSyxFQUFBbmEsZ0JBQUFvUCxFQUFBcFAsZ0JBZ0hBLFNBQUFxVCxFQUFBdEcsR0FFQSxRQURBLElBQUFBLElBQUFBLEVBQUE3cEUsRUFBQWszRSx1QkFDQXpzRixJQUFBdVYsRUFBQTR2RSxrQkFBQSxDQUVBLElBQUF1SCxFQUFBbjNFLEVBQUE0dkUsa0JBQUFwbEQsYUFBQTRzRCxFQUFBcDNFLEVBQUE0dkUsa0JBQUFybEQsWUFBQThzRCxFQUFBcjNFLEVBQUEydUUsT0FBQTkyRCxTQUFBeS9ELEVBQUF6TixFQUFBenZELHdCQUFBbTlELEVBQUEveEYsT0FBQSs4QyxZQUFBKzBDLEVBQUFsK0MsT0FBQW8rQyxFQUFBLFVBQUFILEdBQ0EsVUFBQUEsR0FDQUUsRUFBQUosR0FDQUcsRUFBQWppRixJQUFBOGhGLEVBQ0E5aEYsRUFBQTdQLE9BQUFrb0MsWUFDQTRwRCxFQUFBamlGLEtBQ0FtaUYsR0FBQUwsRUFBQSxFQUFBdE4sRUFBQXIvQyxhQUFBLEdBR0EsR0FGQTNJLEVBQUE3aEIsRUFBQTR2RSxrQkFBQSxZQUFBNEgsR0FDQTMxRCxFQUFBN2hCLEVBQUE0dkUsa0JBQUEsY0FBQTRILElBQ0F4M0UsRUFBQTJ1RSxPQUFBN0YsT0FBQSxDQUVBLElBQUF6dUQsRUFBQTcwQixPQUFBb29DLFlBQUEwcEQsRUFBQWo5RCxLQUNBOGUsRUFBQTN6QyxPQUFBSCxTQUFBK2tCLEtBQUFtZ0IsWUFBQStzRCxFQUFBbitDLE1BQ0FzK0MsRUFBQXA5RCxFQUFBKzhELEVBQUE1eEYsT0FBQUgsU0FBQStrQixLQUFBbWdCLFlBQ0ExSSxFQUFBN2hCLEVBQUE0dkUsa0JBQUEsWUFBQTZILEdBQ0F6M0UsRUFBQTJ1RSxPQUFBM0UsU0FFQWhxRSxFQUFBNHZFLGtCQUFBMW1FLE1BQUE3VCxJQUFBQSxFQUFBLEtBQ0FvaUYsR0FLQXozRSxFQUFBNHZFLGtCQUFBMW1FLE1BQUFtUixLQUFBLE9BQ0FyYSxFQUFBNHZFLGtCQUFBMW1FLE1BQUFpd0IsTUFBQUEsRUFBQSxPQUxBbjVCLEVBQUE0dkUsa0JBQUExbUUsTUFBQW1SLEtBQUFBLEVBQUEsS0FDQXJhLEVBQUE0dkUsa0JBQUExbUUsTUFBQWl3QixNQUFBLFdBT0EsU0FBQXMyQyxJQUNBenZFLEVBQUEydUUsT0FBQTFGLFlBQUFqcEUsRUFBQWtoQyxXQUVBMnpDLElBQ0FILEtBQ0FWLEtBRUEsU0FBQW1DLEVBQUFua0YsR0FDQUEsRUFBQXVkLGlCQUNBdmQsRUFBQXdkLGtCQUNBLElBTUE1QixFQUFBMDlELEVBQUF0NUUsRUFBQTdILE9BTkEsU0FBQXNpRixHQUNBLE9BQUFBLEVBQUFwQixXQUNBb0IsRUFBQXBCLFVBQUFsOUUsU0FBQSxtQkFDQXMrRSxFQUFBcEIsVUFBQWw5RSxTQUFBLGNBQ0FzK0UsRUFBQXBCLFVBQUFsOUUsU0FBQSxnQkFHQSxRQUFBMUQsSUFBQW1qQixFQUFBLENBRUEsSUFBQXpqQixFQUFBeWpCLEVBQ0E4cEUsRUFBQTEzRSxFQUFBdXZFLHNCQUFBLElBQUF4aUYsS0FBQTVDLEVBQUEraEYsUUFBQXRqQyxXQUNBK3VDLEVBQUFELEVBQUFwYSxhQUFBdDlELEVBQUEyeUUsY0FDQSxVQUFBM3lFLEVBQUEydUUsT0FBQXYvQyxLQUVBLEdBREFwdkIsRUFBQXV6RSxpQkFBQXBwRixFQUNBLFdBQUE2VixFQUFBMnVFLE9BQUF2L0MsS0FDQXB2QixFQUFBc3ZFLGVBQUFvSSxRQUNBLEdBQUEsYUFBQTEzRSxFQUFBMnVFLE9BQUF2L0MsS0FBQSxDQUNBLElBQUFsMEIsRUFBQW80RSxHQUFBb0UsR0FDQXg4RSxFQUNBOEUsRUFBQXN2RSxjQUFBM2xGLE9BQUF1M0IsU0FBQWhtQixHQUFBLEdBRUE4RSxFQUFBc3ZFLGNBQUFycEYsS0FBQXl4RixPQUVBLFVBQUExM0UsRUFBQTJ1RSxPQUFBdi9DLE9BQ0EsSUFBQXB2QixFQUFBc3ZFLGNBQUFsbkYsUUFDQTRYLEVBQUFpekMsUUFDQWp6QyxFQUFBc3ZFLGNBQUFycEYsS0FBQXl4RixHQUNBLElBQUFoUixFQUFBZ1IsRUFBQTEzRSxFQUFBc3ZFLGNBQUEsSUFBQSxJQUNBdHZFLEVBQUFzdkUsY0FBQTVsRixLQUFBLFNBQUFrRixFQUFBQyxHQUFBLE9BQUFELEVBQUFnNkMsVUFBQS81QyxFQUFBKzVDLGFBR0EsR0FEQThuQyxJQUNBaUgsRUFBQSxDQUNBLElBQUFqQyxFQUFBMTFFLEVBQUEweUUsY0FBQWdGLEVBQUE1YSxjQUNBOThELEVBQUEweUUsWUFBQWdGLEVBQUE1YSxjQUNBOThELEVBQUEyeUUsYUFBQStFLEVBQUFwYSxXQUNBb1ksR0FDQWhHLEdBQUEsZ0JBQ0FBLEdBQUEsaUJBbUNBLEdBakNBc0UsSUFDQWgwRSxFQUFBMnVFLE9BQUE4QixTQUNBendFLEVBQUFzeEUsZ0JBQ0F0eEUsRUFBQTJ1RSxPQUFBckcsWUFDQSxJQUFBNUIsRUFBQWdSLEVBQUExM0UsRUFBQTJ1RSxPQUFBOEIsVUFDQXhCLEVBQUFqdkUsRUFBQTJ1RSxPQUFBOEIsU0FDQUgsS0FDQXR3RSxFQUFBMnVFLE9BQUFyRyxZQUNBampFLFdBQUEsV0FBQSxPQUFBckYsRUFBQXd2RSxlQUFBLEdBQUEsSUFDQSxVQUFBeHZFLEVBQUEydUUsT0FBQXYvQyxPQUNBLElBQUFwdkIsRUFBQXN2RSxjQUFBbG5GLFFBQ0EwckYsRUFBQTNwRixHQUNBNlYsRUFBQXcwRSxvQkFDQXgwRSxFQUFBdzBFLDBCQUNBL3BGLElBQUF1VixFQUFBd3pFLGNBQ0F4ekUsRUFBQXd6RSxhQUNBeHpFLEVBQUFreUUsS0FBQXBnRixXQUFBLEdBQUFvNkUsUUFDQWxzRSxFQUFBeTBFLG9CQUNBejBFLEVBQUF5MEUsMEJBQ0FocUYsSUFBQXVWLEVBQUF5ekUsY0FDQXp6RSxFQUFBeXpFLGFBQ0EsSUFBQTFtRixLQUFBaVQsRUFBQTB5RSxZQUFBMXlFLEVBQUEyeUUsYUFBQSxFQUFBLElBR0ErQixNQUVBaEYsR0FBQSxZQUNBaUksRUFHQTVELEVBQUEsV0FBQSxPQUFBL3pFLEVBQUF1ekUsa0JBQUF2ekUsRUFBQXV6RSxpQkFBQTc0RSxVQUZBaTVFLEVBQUF4cEYsRUFBQWlwRixHQUFBLFFBR0Ezb0YsSUFBQXVWLEVBQUFpeEUsYUFDQTVyRSxXQUFBLFdBQUEsWUFBQTVhLElBQUF1VixFQUFBaXhFLGFBQUFqeEUsRUFBQWl4RSxZQUFBdmpGLFVBQUEsS0FDQXNTLEVBQUEydUUsT0FBQTlHLGNBQUEsQ0FDQSxJQUFBK1AsRUFBQSxXQUFBNTNFLEVBQUEydUUsT0FBQXYvQyxPQUFBcHZCLEVBQUEydUUsT0FBQXJHLFdBQ0EzZ0IsRUFBQSxVQUFBM25ELEVBQUEydUUsT0FBQXYvQyxNQUNBLElBQUFwdkIsRUFBQXN2RSxjQUFBbG5GLFNBQ0E0WCxFQUFBMnVFLE9BQUFyRyxZQUNBc1AsR0FBQWp3QixJQUNBM25ELEVBQUFxOUIsVUFXQSxTQUFBZ3pDLEVBQUF3SCxFQUFBcnNDLEdBQ0EsSUFBQXNzQyxLQUNBLEdBQUFELGFBQUF0dEYsTUFDQXV0RixFQUFBRCxFQUFBOXVGLElBQUEsU0FBQXVoRCxHQUFBLE9BQUF0cUMsRUFBQXd1RSxVQUFBbGtDLEVBQUFrQixVQUNBLEdBQUFxc0MsYUFBQTlxRixNQUFBLGlCQUFBOHFGLEVBQ0FDLEdBQUE5M0UsRUFBQXd1RSxVQUFBcUosRUFBQXJzQyxTQUNBLEdBQUEsaUJBQUFxc0MsRUFDQSxPQUFBNzNFLEVBQUEydUUsT0FBQXYvQyxNQUNBLElBQUEsU0FDQTBvRCxHQUFBOTNFLEVBQUF3dUUsVUFBQXFKLEVBQUFyc0MsSUFDQSxNQUNBLElBQUEsV0FDQXNzQyxFQUFBRCxFQUNBM3FGLE1BQUE4UyxFQUFBMnVFLE9BQUE3RyxhQUNBLytFLElBQUEsU0FBQTAyRSxHQUFBLE9BQUF6L0QsRUFBQXd1RSxVQUFBL08sRUFBQWowQixLQUNBLE1BQ0EsSUFBQSxRQUNBc3NDLEVBQUFELEVBQ0EzcUYsTUFBQThTLEVBQUE0dUUsS0FBQWxFLGdCQUNBM2hGLElBQUEsU0FBQTAyRSxHQUFBLE9BQUF6L0QsRUFBQXd1RSxVQUFBL08sRUFBQWowQixVQU9BeHJDLEVBQUEydUUsT0FBQXBHLGFBQUEsSUFBQWhqRixNQUFBLDBCQUFBd2lCLEtBQUFrd0QsVUFBQTRmLEtBQ0E3M0UsRUFBQXN2RSxjQUFBd0ksRUFBQWxpRixPQUFBLFNBQUEwMEMsR0FBQSxPQUFBQSxhQUFBdjlDLE1BQUFpakYsRUFBQTFsQyxHQUFBLEtBQ0F0cUMsRUFBQXN2RSxjQUFBNWxGLEtBQUEsU0FBQWtGLEVBQUFDLEdBQUEsT0FBQUQsRUFBQWc2QyxVQUFBLzVDLEVBQUErNUMsWUFnQkEsU0FBQW12QyxFQUFBcHlGLEdBQ0EsT0FBQUEsRUFDQW9ELElBQUEsU0FBQWl2RixHQUNBLE1BQUEsaUJBQUFBLEdBQ0EsaUJBQUFBLEdBQ0FBLGFBQUFqckYsS0FDQWlULEVBQUF3dUUsVUFBQXdKLE9BQUF2dEYsR0FBQSxHQUVBdXRGLEdBQ0EsaUJBQUFBLEdBQ0FBLEVBQUFuQyxNQUNBbUMsRUFBQWo1RCxJQUVBODJELEtBQUE3MUUsRUFBQXd1RSxVQUFBd0osRUFBQW5DLFVBQUFwckYsR0FDQXMwQixHQUFBL2UsRUFBQXd1RSxVQUFBd0osRUFBQWo1RCxRQUFBdDBCLElBRUF1dEYsSUFFQXBpRixPQUFBLFNBQUEyakMsR0FBQSxPQUFBQSxJQXFEQSxTQUFBaTFDLEVBQUEvTyxFQUFBd1ksRUFBQXBSLEdBQ0EsR0FBQSxJQUFBcEgsR0FBQUEsRUFBQSxDQUVBLElBQUF5WSxFQUNBQyxFQUFBMVksRUFDQSxHQUFBQSxhQUFBMXlFLEtBQ0FtckYsRUFBQSxJQUFBbnJGLEtBQUEweUUsRUFBQTcyQixnQkFDQSxHQUFBLGlCQUFBNjJCLFFBQ0FoMUUsSUFBQWcxRSxFQUFBMlksUUFDQUYsRUFBQSxJQUFBbnJGLEtBQUEweUUsUUFDQSxHQUFBLGlCQUFBQSxFQUFBLENBQ0EsSUFBQWowQixFQUFBeXNDLElBQUFqNEUsRUFBQTJ1RSxRQUFBcEksRUFBQThSLGVBQUF0USxXQUNBdVEsRUFBQXJuRixPQUFBd3VFLEdBQUExekUsT0FDQSxHQUFBLFVBQUF1c0YsRUFDQUosRUFBQSxJQUFBbnJGLEtBQ0E4NUUsR0FBQSxPQUVBLEdBQUEsS0FBQTd6RSxLQUFBc2xGLElBQ0EsT0FBQXRsRixLQUFBc2xGLEdBQ0FKLEVBQUEsSUFBQW5yRixLQUFBMHlFLFFBQ0EsR0FBQXovRCxFQUFBMnVFLFFBQUEzdUUsRUFBQTJ1RSxPQUFBSCxVQUNBMEosRUFBQWw0RSxFQUFBMnVFLE9BQUFILFVBQUEvTyxFQUFBajBCLE9BQ0EsQ0FDQTBzQyxFQUNBbDRFLEVBQUEydUUsUUFBQTN1RSxFQUFBMnVFLE9BQUExRixXQUVBLElBQUFsOEUsTUFBQSxJQUFBQSxNQUFBKzVFLFNBQUEsRUFBQSxFQUFBLEVBQUEsSUFEQSxJQUFBLzVFLE1BQUEsSUFBQUEsTUFBQSt2RSxjQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUdBLElBQUEsSUFEQS9pRSxPQUFBLEVBQUF3K0UsS0FDQXR2RixFQUFBLEVBQUF1dkYsRUFBQSxFQUFBQyxFQUFBLEdBQUF4dkYsRUFBQXVpRCxFQUFBcGpELE9BQUFhLElBQUEsQ0FDQSxJQUFBK1YsRUFBQXdzQyxFQUFBdmlELEdBQ0F5dkYsRUFBQSxPQUFBMTVFLEVBQ0FsTyxFQUFBLE9BQUEwNkMsRUFBQXZpRCxFQUFBLElBQUF5dkYsRUFDQSxHQUFBNUssRUFBQTl1RSxLQUFBbE8sRUFBQSxDQUNBMm5GLEdBQUEzSyxFQUFBOXVFLEdBQ0EsSUFBQTNNLEVBQUEsSUFBQTlDLE9BQUFrcEYsR0FBQS9sRixLQUFBK3NFLEdBQ0FwdEUsSUFBQTBILEdBQUEsSUFDQXcrRSxFQUFBLE1BQUF2NUUsRUFBQSxPQUFBLFlBQ0F4WCxHQUFBdWtGLEVBQUEvc0UsR0FDQTNILElBQUFoRixJQUFBbW1GLFVBSUFFLElBQ0FELEdBQUEsS0FDQUYsRUFBQTUxQyxRQUFBLFNBQUF5ckMsR0FDQSxJQUFBNW1GLEVBQUE0bUYsRUFBQTVtRixHQUFBNlAsRUFBQSsyRSxFQUFBLzJFLElBQ0EsT0FBQTZnRixFQUNBMXdGLEVBQUEwd0YsRUFBQTdnRixFQUFBMkksRUFBQTR1RSxPQUFBc0osSUFHQUEsRUFBQW4rRSxFQUFBbStFLE9BQUF6dEYsR0FHQSxHQUFBeXRGLGFBQUFuckYsS0FNQSxPQUZBLElBQUE4NUUsR0FDQXFSLEVBQUFwUixTQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0FvUixFQUxBbDRFLEVBQUEydUUsT0FBQXBHLGFBQUEsSUFBQWhqRixNQUFBLDBCQUFBNHlGLEtBMEVBLFNBQUF6SSxHQUFBbmlFLEVBQUFoRyxHQUNBLElBQUFlLEVBQUF0SSxFQUFBMnVFLE9BQUFwaEUsR0FDQSxRQUFBOWlCLElBQUE2ZCxHQUFBQSxFQUFBbGdCLE9BQUEsRUFDQSxJQUFBLElBQUFhLEVBQUEsRUFBQXFmLEVBQUFyZixJQUFBQSxFQUFBcWYsRUFBQWxnQixPQUFBYSxJQUNBcWYsRUFBQXJmLEdBQUErVyxFQUFBc3ZFLGNBQUF0dkUsRUFBQTlKLE1BQUF6SixNQUFBdVQsRUFBQXVILEdBRUEsYUFBQWdHLElBQ0F2TixFQUFBOUosTUFBQTY4RSxjQUFBRCxHQUFBLFdBQ0E5eUUsRUFBQTlKLE1BQUE2OEUsY0FBQUQsR0FBQSxXQUdBLFNBQUFBLEdBQUFocEYsR0FDQSxJQUFBa0ksRUFBQTNNLFNBQUF5dEYsWUFBQSxTQUVBLE9BREE5Z0YsRUFBQTJtRixVQUFBN3VGLEdBQUEsR0FBQSxHQUNBa0ksRUFFQSxTQUFBc2hGLEdBQUE3VCxHQUNBLElBQUEsSUFBQXgyRSxFQUFBLEVBQUFBLEVBQUErVyxFQUFBc3ZFLGNBQUFsbkYsT0FBQWEsSUFDQSxHQUFBLElBQUF5OUUsRUFBQTFtRSxFQUFBc3ZFLGNBQUFybUYsR0FBQXcyRSxHQUNBLE1BQUEsR0FBQXgyRSxFQUVBLE9BQUEsRUFRQSxTQUFBeXJGLEtBQ0ExMEUsRUFBQTJ1RSxPQUFBMUYsWUFBQWpwRSxFQUFBa2hDLFdBQUFsaEMsRUFBQXN5RSxXQUVBdHlFLEVBQUFpMUUsb0JBQUFwOUUsWUFDQWt2RSxFQUFBL21FLEVBQUEyeUUsYUFBQTN5RSxFQUFBMnVFLE9BQUE1RSxzQkFBQS9wRSxFQUFBNHVFLE1BQUEsSUFDQTV1RSxFQUFBNHhFLG1CQUFBbmxGLE1BQUF1VCxFQUFBMHlFLFlBQUF0c0YsV0FDQTRaLEVBQUF3MEUseUJBQ0EvcEYsSUFBQXVWLEVBQUEydUUsT0FBQThCLFVBQ0F6d0UsRUFBQTB5RSxjQUFBMXlFLEVBQUEydUUsT0FBQThCLFFBQUEzVCxjQUNBOThELEVBQUEyeUUsY0FBQTN5RSxFQUFBMnVFLE9BQUE4QixRQUFBblQsV0FDQXQ5RCxFQUFBMHlFLFlBQUExeUUsRUFBQTJ1RSxPQUFBOEIsUUFBQTNULGVBQ0E5OEQsRUFBQXkwRSx5QkFDQWhxRixJQUFBdVYsRUFBQTJ1RSxPQUFBOEMsVUFDQXp4RSxFQUFBMHlFLGNBQUExeUUsRUFBQTJ1RSxPQUFBOEMsUUFBQTNVLGNBQ0E5OEQsRUFBQTJ5RSxhQUFBLEVBQUEzeUUsRUFBQTJ1RSxPQUFBOEMsUUFBQW5VLFdBQ0F0OUQsRUFBQTB5RSxZQUFBMXlFLEVBQUEydUUsT0FBQThDLFFBQUEzVSxnQkFFQSxTQUFBd1QsR0FBQUYsR0FFQSxRQURBLElBQUFBLElBQUFBLEdBQUEsSUFDQXB3RSxFQUFBc3ZFLGNBQUFsbkYsT0FDQSxPQUFBNFgsRUFBQWl6QyxNQUFBbTlCLFFBQ0EzbEYsSUFBQXVWLEVBQUFxdkUsYUFBQXJ2RSxFQUFBNDRFLGtCQUNBNTRFLEVBQUFxdkUsWUFBQTVpRixXQUNBaEMsSUFBQXVWLEVBQUF1dkUsc0JBQ0F2dkUsRUFBQXl1RSxXQUFBenVFLEVBQUF1dkUsc0JBQUF2dkUsRUFBQTQ0RSxpQkFDQSxJQUVBLElBQUFDLEVBQUEsVUFBQTc0RSxFQUFBMnVFLE9BQUF2L0MsS0FDQXB2QixFQUFBMnVFLE9BQUE3RyxZQUNBOW5FLEVBQUE0dUUsS0FBQWxFLGVBQ0ExcUUsRUFBQTlKLE1BQUF6SixNQUFBdVQsRUFBQXN2RSxjQUNBdm1GLElBQUEsU0FBQSt2RixHQUFBLE9BQUE5NEUsRUFBQXl1RSxXQUFBcUssRUFBQTk0RSxFQUFBMnVFLE9BQUE1RyxjQUNBMTBFLEtBQUF3bEYsUUFDQXB1RixJQUFBdVYsRUFBQXluRSxXQUNBem5FLEVBQUF5bkUsU0FBQWg3RSxNQUFBdVQsRUFBQXN2RSxjQUNBdm1GLElBQUEsU0FBQSt2RixHQUFBLE9BQUE5NEUsRUFBQXl1RSxXQUFBcUssRUFBQTk0RSxFQUFBMnVFLE9BQUFuSCxhQUNBbjBFLEtBQUF3bEYsS0FFQSxJQUFBekksR0FDQVYsR0FBQSxpQkFFQSxTQUFBcUosR0FBQS9tRixHQUNBQSxFQUFBdWQsaUJBQ0EsSUFBQXlwRSxFQUFBaDVFLEVBQUE0eEUsbUJBQUF6cUYsWUFDQTZZLEVBQUE0eEUsbUJBQUF6cUYsV0FBQWdILFNBQUE2RCxFQUFBN0gsUUFDQSxHQUFBNkgsRUFBQTdILFNBQUE2VixFQUFBaTFFLHFCQUFBK0QsRUFBQSxDQUNBLElBQUFwSSxHQTd4REE1K0UsRUE2eERBQSxHQTV4REFBLEVBQUE2K0UsYUFBQTcrRSxFQUFBOCtFLFNBQ0EsRUFBQSxHQUFBLEdBNHhEQWtJLEdBQ0E3SixFQUFBbnZFLEVBQUEweUUsWUFBQTlCLEdBQ0E1K0UsRUFBQTdILE9BQUFzQyxNQUFBdVQsRUFBQTB5RSxZQUFBdHNGLFlBR0E0WixFQUFBa3ZFLFlBQUEwQixHQUFBLEdBQUEsR0FueURBLElBQUE1K0UsRUFzeURBLFNBQUFpbkYsR0FBQWpuRixHQUNBLElBQUFrbkYsRUFBQWw1RSxFQUFBbTVFLGFBQUFockYsU0FBQTZELEVBQUE3SCxRQUNBaXZGLEVBQUFwNUUsRUFBQXE1RSxhQUFBbHJGLFNBQUE2RCxFQUFBN0gsUUFDQSt1RixHQUFBRSxFQUNBbEssRUFBQWdLLEdBQUEsRUFBQSxHQUNBbG5GLEVBQUE3SCxTQUFBNlYsRUFBQTR4RSxvQkFDQTUvRSxFQUFBdWQsaUJBQ0F2UCxFQUFBNHhFLG1CQUFBbGtGLFVBRUEsWUFBQXNFLEVBQUE3SCxPQUFBcUwsVUFDQXdLLEVBQUFtdkUsV0FBQW52RSxFQUFBMHlFLFlBQUEsR0FDQSxjQUFBMWdGLEVBQUE3SCxPQUFBcUwsV0FDQXdLLEVBQUFtdkUsV0FBQW52RSxFQUFBMHlFLFlBQUEsR0EyQ0EsT0Fob0RBMXlFLEVBQUE0cEMsUUFBQTVwQyxFQUFBOUosTUFBQTB6QyxFQUNBNXBDLEVBQUEydkUsUUFBQSxFQW1oQ0EsV0FDQSxJQUFBMkosR0FDQSxPQUNBLGNBQ0EsYUFDQSxhQUNBLFlBQ0EsYUFDQSxhQUNBLFdBQ0Esd0JBQ0EsU0FDQSxTQUNBLGdCQUNBLGlCQUVBaHhFLEdBQ0EsV0FDQSxVQUNBLGNBQ0EsWUFDQSxZQUNBLGdCQUNBLFNBQ0EsZ0JBQ0EsVUFDQSxnQkFDQSxnQkFFQXRJLEVBQUEydUUsT0FBQW5JLEtBQUFELEVBQUE4UixlQUNBLElBQUFrQixFQUFBL1MsS0FBQStILEVBQUF4bUUsS0FBQUMsTUFBQUQsS0FBQWt3RCxVQUFBcnVCLEVBQUE0dkMsZUFDQUMsS0FDQTV6RixPQUFBdWhCLGVBQUFwSCxFQUFBMnVFLE9BQUEsVUFDQXJtRixJQUFBLFdBQUEsT0FBQTBYLEVBQUEydUUsT0FBQXJILGFBQ0FoZ0UsSUFBQSxTQUFBd3dFLEdBQ0E5M0UsRUFBQTJ1RSxPQUFBckgsUUFBQXlRLEVBQUFELE1BR0FqeUYsT0FBQXVoQixlQUFBcEgsRUFBQTJ1RSxPQUFBLFdBQ0FybUYsSUFBQSxXQUFBLE9BQUEwWCxFQUFBMnVFLE9BQUF0SCxjQUNBLy9ELElBQUEsU0FBQXd3RSxHQUNBOTNFLEVBQUEydUUsT0FBQXRILFNBQUEwUSxFQUFBRCxPQUdBeUIsRUFBQXhSLFlBQUF3UixFQUFBalIsYUFDQW1SLEVBQUExUixXQUFBd1IsRUFBQXRRLFdBQ0EsT0FBQXNRLEVBQUFsUixjQUFBLEtBQUEsSUFDQTlCLEVBQUE4UixjQUFBdFEsV0FDQSxRQUNBd1IsRUFBQWxSLGNBQUEsS0FBQSxLQUVBa1IsRUFBQTlSLFVBQUE4UixFQUFBalIsYUFBQWlSLEVBQUEvUixZQUNBaVMsRUFBQWpTLFVBQUErUixFQUFBdFEsV0FDQSxPQUFBc1EsRUFBQWxSLGNBQUEsT0FBQSxNQUNBOUIsRUFBQThSLGNBQUE3USxVQUNBLFFBQUErUixFQUFBbFIsY0FBQSxLQUFBLElBQUEsTUFFQXhpRixPQUFBdWhCLGVBQUFwSCxFQUFBMnVFLE9BQUEsV0FDQXJtRixJQUFBLFdBQUEsT0FBQTBYLEVBQUEydUUsT0FBQStLLFVBQ0FweUUsSUFBQTB2RSxFQUFBLFNBRUFueEYsT0FBQXVoQixlQUFBcEgsRUFBQTJ1RSxPQUFBLFdBQ0FybUYsSUFBQSxXQUFBLE9BQUEwWCxFQUFBMnVFLE9BQUFnTCxVQUNBcnlFLElBQUEwdkUsRUFBQSxTQUVBbnhGLE9BQUE0Z0YsT0FBQXptRSxFQUFBMnVFLE9BQUE4SyxFQUFBRixHQUNBLElBQUEsSUFBQXR3RixFQUFBLEVBQUFBLEVBQUFxd0YsRUFBQWx4RixPQUFBYSxJQUNBK1csRUFBQTJ1RSxPQUFBMkssRUFBQXJ3RixLQUNBLElBQUErVyxFQUFBMnVFLE9BQUEySyxFQUFBcndGLEtBQ0EsU0FBQStXLEVBQUEydUUsT0FBQTJLLEVBQUFyd0YsSUFDQSxJQUFBLElBQUFBLEVBQUFxZixFQUFBbGdCLE9BQUFhLFVBQ0F3QixJQUFBdVYsRUFBQTJ1RSxPQUFBcm1FLEVBQUFyZixNQUNBK1csRUFBQTJ1RSxPQUFBcm1FLEVBQUFyZixJQUFBbWlGLEVBQUFwckUsRUFBQTJ1RSxPQUFBcm1FLEVBQUFyZixTQUFBRixJQUFBd25GLElBR0EsSUFBQSxJQUFBdG5GLEVBQUEsRUFBQUEsRUFBQStXLEVBQUEydUUsT0FBQS9FLFFBQUF4aEYsT0FBQWEsSUFBQSxDQUNBLElBQUEyd0YsRUFBQTU1RSxFQUFBMnVFLE9BQUEvRSxRQUFBM2dGLEdBQUErVyxPQUNBLElBQUEsSUFBQXBNLEtBQUFnbUYsR0FDQXR4RSxFQUFBcGlCLFFBQUEwTixHQUNBb00sRUFBQTJ1RSxPQUFBLzZFLEdBQUF3M0UsRUFBQXdPLEVBQUFobUYsSUFDQTdLLElBQUF3bkYsR0FDQXZxRixPQUFBZ2EsRUFBQTJ1RSxPQUFBLzZFLFNBRUEsSUFBQTJsRixFQUFBM2xGLEtBQ0FvTSxFQUFBMnVFLE9BQUEvNkUsR0FBQWdtRixFQUFBaG1GLElBR0FvTSxFQUFBa2hDLFVBQ0FsaEMsRUFBQTJ1RSxPQUFBeEcsZ0JBQ0Fub0UsRUFBQTJ1RSxPQUFBN0YsUUFDQSxXQUFBOW9FLEVBQUEydUUsT0FBQXYvQyxPQUNBcHZCLEVBQUEydUUsT0FBQW5zRSxRQUFBcGEsU0FDQTRYLEVBQUEydUUsT0FBQXZHLE9BQUFoZ0YsU0FDQTRYLEVBQUEydUUsT0FBQXpFLGFBQ0EsaUVBQUFsM0UsS0FBQW12QyxVQUFBQyxXQUNBc3RDLEdBQUEsaUJBam5DQW1LLEdBb25DQSxpQkFBQTc1RSxFQUFBMnVFLE9BQUF6SCxhQUNBLElBQUFYLEVBQUF1VCxNQUFBOTVFLEVBQUEydUUsT0FBQXpILFNBQ0FsbkUsRUFBQTJ1RSxPQUFBcEcsYUFBQSxJQUFBaGpGLE1BQUEsNkJBQUF5YSxFQUFBMnVFLE9BQUF6SCxTQUNBbG5FLEVBQUE0dUUsS0FBQXBJLEtBQUFELEVBQUF1VCxNQUFBL2lDLFFBQUEsaUJBQUEvMkMsRUFBQTJ1RSxPQUFBekgsT0FDQWxuRSxFQUFBMnVFLE9BQUF6SCxPQUNBLFlBQUFsbkUsRUFBQTJ1RSxPQUFBekgsT0FDQVgsRUFBQXVULE1BQUE5NUUsRUFBQTJ1RSxPQUFBekgsYUFDQXo4RSxHQUNBcWpGLEVBQUFuQixFQUFBLElBQUEzc0UsRUFBQTR1RSxLQUFBOUQsS0FBQSxHQUFBLElBQUE5cUUsRUFBQTR1RSxLQUFBOUQsS0FBQSxHQUFBLElBQUE5cUUsRUFBQTR1RSxLQUFBOUQsS0FBQSxHQUFBMzlFLGNBQUEsSUFBQTZTLEVBQUE0dUUsS0FBQTlELEtBQUEsR0FBQTM5RSxjQUFBLElBcVRBNlMsRUFBQTlKLE1BQUE4SixFQUFBMnVFLE9BQUF6aUUsS0FDQTA5QixFQUFBbXhCLGNBQUEsZ0JBQ0FueEIsRUFDQTVwQyxFQUFBOUosT0FJQThKLEVBQUE5SixNQUFBNjVFLE1BQUEvdkUsRUFBQTlKLE1BQUEvSyxLQUNBNlUsRUFBQTlKLE1BQUEvSyxLQUFBLE9BQ0E2VSxFQUFBOUosTUFBQW0xRSxVQUFBdnFFLElBQUEsbUJBQ0FkLEVBQUE2dkUsT0FBQTd2RSxFQUFBOUosTUFDQThKLEVBQUEydUUsT0FBQWxILFdBQ0F6bkUsRUFBQXluRSxTQUFBMWdGLEVBQUFpWixFQUFBOUosTUFBQWpELFNBQUErTSxFQUFBOUosTUFBQVYsVUFBQSxJQUFBd0ssRUFBQTJ1RSxPQUFBakgsZUFDQTFuRSxFQUFBNnZFLE9BQUE3dkUsRUFBQXluRSxTQUNBem5FLEVBQUF5bkUsU0FBQTl1QixZQUFBMzRDLEVBQUE5SixNQUFBeWlELFlBQ0EzNEMsRUFBQXluRSxTQUFBOTFFLFNBQUFxTyxFQUFBOUosTUFBQXZFLFNBQ0FxTyxFQUFBeW5FLFNBQUFzUyxTQUFBLzVFLEVBQUE5SixNQUFBNmpGLFNBQ0EvNUUsRUFBQXluRSxTQUFBdDhFLEtBQUEsT0FDQTZVLEVBQUE5SixNQUFBL0ssS0FBQSxVQUNBNlUsRUFBQTJ1RSxPQUFBM0UsUUFBQWhxRSxFQUFBOUosTUFBQS9PLFlBQ0E2WSxFQUFBOUosTUFBQS9PLFdBQUE4dEIsYUFBQWpWLEVBQUF5bkUsU0FBQXpuRSxFQUFBOUosTUFBQXhCLGNBRUFzTCxFQUFBMnVFLE9BQUFwSCxZQUNBdm5FLEVBQUE2dkUsT0FBQTE4RSxhQUFBLFdBQUEsWUFDQTZNLEVBQUFrM0UsaUJBQUFsM0UsRUFBQTJ1RSxPQUFBOUUsaUJBQUE3cEUsRUFBQTZ2RSxRQXBCQTd2RSxFQUFBMnVFLE9BQUFwRyxhQUFBLElBQUFoakYsTUFBQSxvQ0FySEEsV0FDQXlhLEVBQUFzdkUsaUJBQ0F0dkUsRUFBQWxULElBQUEsSUFBQUMsS0FDQSxJQUFBaXRGLEVBQUFoNkUsRUFBQTJ1RSxPQUFBc0wsYUFBQWo2RSxFQUFBOUosTUFBQXpKLE1BQ0F1dEYsR0FDQTNKLEVBQUEySixFQUFBaDZFLEVBQUEydUUsT0FBQTVHLFlBQ0EsSUFBQXdPLEVBQUF2MkUsRUFBQXN2RSxjQUFBbG5GLE9BQ0E0WCxFQUFBc3ZFLGNBQUEsR0FDQXR2RSxFQUFBMnVFLE9BQUE4QixTQUNBendFLEVBQUEydUUsT0FBQThCLFFBQUE3bkMsVUFBQTVvQyxFQUFBbFQsSUFBQTg3QyxVQUNBNW9DLEVBQUEydUUsT0FBQThCLFFBQ0F6d0UsRUFBQTJ1RSxPQUFBOEMsU0FDQXp4RSxFQUFBMnVFLE9BQUE4QyxRQUFBN29DLFVBQUE1b0MsRUFBQWxULElBQUE4N0MsVUFDQTVvQyxFQUFBMnVFLE9BQUE4QyxRQUNBenhFLEVBQUFsVCxJQUNBa1QsRUFBQTB5RSxZQUFBNkQsRUFBQXpaLGNBQ0E5OEQsRUFBQTJ5RSxhQUFBNEQsRUFBQWpaLFdBQ0F0OUQsRUFBQXN2RSxjQUFBbG5GLFNBQ0E0WCxFQUFBdXZFLHNCQUFBdnZFLEVBQUFzdkUsY0FBQSxJQUNBdHZFLEVBQUFzeEUsaUJBQ0F0eEUsRUFBQTJ1RSxPQUFBOEIsVUFDQXp3RSxFQUFBMnVFLE9BQUE4QixRQUFBN0QsV0FBQSxHQUNBNXNFLEVBQUEydUUsT0FBQThCLFFBQUF2QyxhQUFBLEdBQ0FsdUUsRUFBQTJ1RSxPQUFBOEIsUUFBQXhDLGFBQUEsR0FDQWp1RSxFQUFBMHhFLGlCQUNBMXhFLEVBQUEydUUsT0FBQThDLFVBQ0F6eEUsRUFBQTJ1RSxPQUFBOEMsUUFBQTdFLFdBQUEsR0FDQTVzRSxFQUFBMnVFLE9BQUE4QyxRQUFBdkQsYUFBQSxHQUNBbHVFLEVBQUEydUUsT0FBQThDLFFBQUF4RCxhQUFBLEdBQ0Fwb0YsT0FBQXVoQixlQUFBcEgsRUFBQSxpQkFDQTFYLElBQUEsV0FBQSxPQUFBMFgsRUFBQWs2RSxnQkFDQTV5RSxJQUFBLFNBQUFsWCxHQUNBNFAsRUFBQWs2RSxlQUFBOXBGLEVBQ0E0UCxFQUFBNHZFLG1CQUNBL3RELEVBQUE3aEIsRUFBQTR2RSxrQkFBQSxnQkFBQXgvRSxHQUNBKy9FLE9BaDJDQWdLLEdBaEJBbjZFLEVBQUFvMEUsT0FDQUMsZUFBQSxTQUFBeEcsRUFBQXVNLEdBR0EsWUFGQSxJQUFBdk0sSUFBQUEsRUFBQTd0RSxFQUFBMnlFLG1CQUNBLElBQUF5SCxJQUFBQSxFQUFBcDZFLEVBQUEweUUsYUFDQSxJQUFBN0UsSUFBQXVNLEVBQUEsR0FBQSxHQUFBQSxFQUFBLEtBQUEsR0FBQUEsRUFBQSxLQUFBLEdBQ0EsR0FDQXA2RSxFQUFBNHVFLEtBQUF0RSxZQUFBdUQsS0FZQTd0RSxFQUFBa2hDLFVBa1JBLFdBQ0EsSUFBQS8wQixFQUFBM21CLE9BQUFILFNBQUErbUIseUJBR0EsR0FGQXBNLEVBQUE0dkUsa0JBQUE3b0YsRUFBQSxNQUFBLHNCQUNBaVosRUFBQTR2RSxrQkFBQTkwRSxVQUFBLEdBQ0FrRixFQUFBMnVFLE9BQUExRixXQUFBLENBR0EsR0FGQTk4RCxFQUFBamxCLFlBd0xBLFdBQ0EsSUFBQW16RixFQUFBNzBGLE9BQUFILFNBQUErbUIseUJBQ0FwTSxFQUFBc3lFLFNBQUF2ckYsRUFBQSxNQUFBLG1CQUNBaVosRUFBQW01RSxhQUFBcHlGLEVBQUEsT0FBQSx3QkFDQWlaLEVBQUFtNUUsYUFBQWxqRixVQUFBK0osRUFBQTJ1RSxPQUFBN0UsVUFDQTlwRSxFQUFBaTFFLG9CQUFBbHVGLEVBQUEsT0FBQSxhQUNBaVosRUFBQWkxRSxvQkFBQXY5QyxNQUFBMTNCLEVBQUE0dUUsS0FBQWhFLFlBQ0EsSUFBQTBQLEVBQUE5TyxFQUFBLFlBeUNBLE9BeENBeHJFLEVBQUE0eEUsbUJBQUEwSSxFQUFBeG9GLFdBQUEsR0FDQWtPLEVBQUE0eEUsbUJBQUFsNkMsTUFBQTEzQixFQUFBNHVFLEtBQUFoRSxZQUNBNXFFLEVBQUEydUUsT0FBQThCLFVBQ0F6d0UsRUFBQTR4RSxtQkFBQWpyQyxJQUFBM21DLEVBQUEydUUsT0FBQThCLFFBQ0EzVCxjQUNBMTJFLFlBQ0E0WixFQUFBMnVFLE9BQUE4QyxVQUNBenhFLEVBQUE0eEUsbUJBQUFsNUQsSUFBQTFZLEVBQUEydUUsT0FBQThDLFFBQ0EzVSxjQUNBMTJFLFdBQ0E0WixFQUFBNHhFLG1CQUFBamdGLFdBQ0FxTyxFQUFBMnVFLE9BQUE4QixTQUNBendFLEVBQUEydUUsT0FBQThCLFFBQUEzVCxnQkFBQTk4RCxFQUFBMnVFLE9BQUE4QyxRQUFBM1UsZUFFQTk4RCxFQUFBcTVFLGFBQUF0eUYsRUFBQSxPQUFBLHdCQUNBaVosRUFBQXE1RSxhQUFBcGpGLFVBQUErSixFQUFBMnVFLE9BQUEzRixVQUNBaHBFLEVBQUFveUUsdUJBQUFyckYsRUFBQSxNQUFBLDJCQUNBaVosRUFBQW95RSx1QkFBQWxyRixZQUFBOFksRUFBQWkxRSxxQkFDQWoxRSxFQUFBb3lFLHVCQUFBbHJGLFlBQUFvekYsR0FDQUQsRUFBQW56RixZQUFBOFksRUFBQW01RSxjQUNBa0IsRUFBQW56RixZQUFBOFksRUFBQW95RSx3QkFDQWlJLEVBQUFuekYsWUFBQThZLEVBQUFxNUUsY0FDQXI1RSxFQUFBc3lFLFNBQUFwckYsWUFBQW16RixHQUNBeDBGLE9BQUF1aEIsZUFBQXBILEVBQUEsdUJBQ0ExWCxJQUFBLFdBQUEsT0FBQTBYLEVBQUF1NkUsc0JBQ0FqekUsSUFBQSxTQUFBbFgsR0FDQTRQLEVBQUF1NkUsdUJBQUFucUYsSUFDQTRQLEVBQUFtNUUsYUFBQWp3RSxNQUFBQyxRQUFBL1ksRUFBQSxPQUFBLFNBQ0E0UCxFQUFBdTZFLHFCQUFBbnFGLEtBR0F2SyxPQUFBdWhCLGVBQUFwSCxFQUFBLHVCQUNBMVgsSUFBQSxXQUFBLE9BQUEwWCxFQUFBdzZFLHNCQUNBbHpFLElBQUEsU0FBQWxYLEdBQ0E0UCxFQUFBdzZFLHVCQUFBcHFGLElBQ0E0UCxFQUFBcTVFLGFBQUFud0UsTUFBQUMsUUFBQS9ZLEVBQUEsT0FBQSxTQUNBNFAsRUFBQXc2RSxxQkFBQXBxRixLQUdBc2tGLEtBQ0ExMEUsRUFBQXN5RSxTQXhPQW1JLElBQ0F6NkUsRUFBQTA2RSxlQUFBM3pGLEVBQUEsTUFBQSw0QkFDQWlaLEVBQUEydUUsT0FBQXpFLFlBQUEsQ0FDQSxJQUFBa0UsRUF5U0EsV0FDQXB1RSxFQUFBNHZFLGtCQUFBdkUsVUFBQXZxRSxJQUFBLFlBQ0EsSUFBQTY1RSxFQUFBNXpGLEVBQUEsTUFBQSx5QkFDQTR6RixFQUFBenpGLFlBQUFILEVBQUEsT0FBQSxvQkFBQWlaLEVBQUE0dUUsS0FBQWpFLG1CQUNBLElBQUFULEVBQUFuakYsRUFBQSxNQUFBLG1CQUVBLE9BREE0ekYsRUFBQXp6RixZQUFBZ2pGLElBRUF5USxZQUFBQSxFQUNBelEsWUFBQUEsR0FqVEEwUSxHQUFBRCxFQUFBdk0sRUFBQXVNLFlBQUF6USxFQUFBa0UsRUFBQWxFLFlBQ0FscUUsRUFBQTA2RSxlQUFBeHpGLFlBQUF5ekYsR0FDQTM2RSxFQUFBa3FFLFlBQUFBLEVBQ0FscUUsRUFBQTI2RSxZQUFBQSxFQUVBMzZFLEVBQUE2NkUsV0FBQTl6RixFQUFBLE1BQUEsd0JBQ0FpWixFQUFBNjZFLFdBQUEzekYsWUFBQTJ0RixLQUNBNzBFLEVBQUFneUUsZ0JBQ0FoeUUsRUFBQWd5RSxjQUFBanJGLEVBQUEsTUFBQSxrQkFDQWlaLEVBQUFneUUsY0FBQWwzRSxVQUFBLEdBRUFrNUUsSUFDQWgwRSxFQUFBNjZFLFdBQUEzekYsWUFBQThZLEVBQUFneUUsZUFDQWh5RSxFQUFBMDZFLGVBQUF4ekYsWUFBQThZLEVBQUE2NkUsWUFDQTF1RSxFQUFBamxCLFlBQUE4WSxFQUFBMDZFLGdCQUVBMTZFLEVBQUEydUUsT0FBQXJHLFlBQ0FuOEQsRUFBQWpsQixZQXNOQSxXQUNBOFksRUFBQTR2RSxrQkFBQXZFLFVBQUF2cUUsSUFBQSxXQUNBZCxFQUFBMnVFLE9BQUExRixZQUNBanBFLEVBQUE0dkUsa0JBQUF2RSxVQUFBdnFFLElBQUEsY0FDQWQsRUFBQWsyRSxjQUFBbnZGLEVBQUEsTUFBQSxrQkFDQWlaLEVBQUFrMkUsY0FBQXA3RSxVQUFBLEVBQ0EsSUFBQW1oRSxFQUFBbDFFLEVBQUEsT0FBQSwyQkFBQSxLQUNBK3pGLEVBQUF0UCxFQUFBLGtCQUNBeHJFLEVBQUFpeEUsWUFBQTZKLEVBQUFocEYsV0FBQSxHQUNBLElBQUFpcEYsRUFBQXZQLEVBQUEsb0JBdUJBLEdBdEJBeHJFLEVBQUFteEUsY0FBQTRKLEVBQUFqcEYsV0FBQSxHQUNBa08sRUFBQWl4RSxZQUFBbjJFLFNBQUFrRixFQUFBbXhFLGNBQUFyMkUsVUFBQSxFQUNBa0YsRUFBQWl4RSxZQUFBeGtGLE1BQUFzK0UsRUFBQS9xRSxFQUFBdXZFLHNCQUNBdnZFLEVBQUF1dkUsc0JBQUEzQyxXQUNBNXNFLEVBQUEydUUsT0FBQTFFLFVBQ0FqcUUsRUFBQTJ1RSxPQUFBM0csWUE1ZEEsU0FBQXNFLEdBQ0EsT0FBQUEsRUFBQSxJQUNBLEtBQUEsRUFDQSxLQUFBLEdBQ0EsT0FBQSxHQUNBLFFBQ0EsT0FBQUEsRUFBQSxJQXVkQTBPLENBQUFoN0UsRUFBQTJ1RSxPQUFBM0csY0FDQWhvRSxFQUFBbXhFLGNBQUExa0YsTUFBQXMrRSxFQUFBL3FFLEVBQUF1dkUsc0JBQ0F2dkUsRUFBQXV2RSxzQkFBQXJCLGFBQ0FsdUUsRUFBQTJ1RSxPQUFBMUcsZUFDQWpvRSxFQUFBaXhFLFlBQUEzMUQsS0FBQXRiLEVBQUEydUUsT0FBQS9GLGNBQUF4aUYsV0FDQTRaLEVBQUFteEUsY0FBQTcxRCxLQUFBdGIsRUFBQTJ1RSxPQUFBNUYsZ0JBQUEzaUYsV0FDQTRaLEVBQUFpeEUsWUFBQXRxQyxJQUFBM21DLEVBQUEydUUsT0FBQTFFLFVBQUEsSUFBQSxJQUNBanFFLEVBQUFpeEUsWUFBQXY0RCxJQUFBMVksRUFBQTJ1RSxPQUFBMUUsVUFBQSxLQUFBLEtBQ0FqcUUsRUFBQW14RSxjQUFBeHFDLElBQUEsSUFDQTNtQyxFQUFBbXhFLGNBQUF6NEQsSUFBQSxLQUNBMVksRUFBQWl4RSxZQUFBdjVDLE1BQUExM0IsRUFBQW14RSxjQUFBejVDLE1BQUExM0IsRUFBQTR1RSxLQUFBaEUsWUFDQTVxRSxFQUFBazJFLGNBQUFodkYsWUFBQTR6RixHQUNBOTZFLEVBQUFrMkUsY0FBQWh2RixZQUFBKzBFLEdBQ0FqOEQsRUFBQWsyRSxjQUFBaHZGLFlBQUE2ekYsR0FDQS82RSxFQUFBMnVFLE9BQUExRSxXQUNBanFFLEVBQUFrMkUsY0FBQTdLLFVBQUF2cUUsSUFBQSxZQUNBZCxFQUFBMnVFLE9BQUF0RyxjQUFBLENBQ0Fyb0UsRUFBQWsyRSxjQUFBN0ssVUFBQXZxRSxJQUFBLGNBQ0EsSUFBQW02RSxFQUFBelAsRUFBQSxvQkFDQXhyRSxFQUFBd3hFLGNBQUF5SixFQUFBbnBGLFdBQUEsR0FDQWtPLEVBQUF3eEUsY0FBQS9rRixNQUFBcytFLEVBQUEvcUUsRUFBQXV2RSxzQkFDQXZ2RSxFQUFBdXZFLHNCQUFBdEIsYUFDQWp1RSxFQUFBMnVFLE9BQUF6RyxnQkFDQWxvRSxFQUFBd3hFLGNBQUFsMkQsS0FBQXRiLEVBQUFteEUsY0FBQTcxRCxLQUNBdGIsRUFBQXd4RSxjQUFBN3FDLElBQUEzbUMsRUFBQW14RSxjQUFBeHFDLElBQ0EzbUMsRUFBQXd4RSxjQUFBOTRELElBQUExWSxFQUFBbXhFLGNBQUF6NEQsSUFDQTFZLEVBQUFrMkUsY0FBQWh2RixZQUFBSCxFQUFBLE9BQUEsMkJBQUEsTUFDQWlaLEVBQUFrMkUsY0FBQWh2RixZQUFBK3pGLEdBVUEsT0FSQWo3RSxFQUFBMnVFLE9BQUExRSxZQUNBanFFLEVBQUE4cUUsS0FBQS9qRixFQUFBLE9BQUEsa0JBQUFpWixFQUFBNHVFLEtBQUE5RCxLQUFBRyxHQUFBanJFLEVBQUF1dkUsc0JBQ0F2dkUsRUFBQWl4RSxZQUFBeGtGLE1BQ0F1VCxFQUFBMnVFLE9BQUEzRyxhQUFBLE1BQ0Fob0UsRUFBQThxRSxLQUFBcHpDLE1BQUExM0IsRUFBQTR1RSxLQUFBL0QsWUFDQTdxRSxFQUFBOHFFLEtBQUFod0UsVUFBQSxFQUNBa0YsRUFBQWsyRSxjQUFBaHZGLFlBQUE4WSxFQUFBOHFFLE9BRUE5cUUsRUFBQWsyRSxjQTNRQWdGLElBRUFyNUQsRUFBQTdoQixFQUFBNHZFLGtCQUFBLFlBQUEsVUFBQTV2RSxFQUFBMnVFLE9BQUF2L0MsTUFDQXZOLEVBQUE3aEIsRUFBQTR2RSxrQkFBQSxVQUFBNXZFLEVBQUEydUUsT0FBQTN2RCxTQUNBaGYsRUFBQTR2RSxrQkFBQTFvRixZQUFBaWxCLEdBQ0EsSUFBQWd2RSxPQUFBMXdGLElBQUF1VixFQUFBMnVFLE9BQUFyNUQsVUFBQXRWLEVBQUEydUUsT0FBQXI1RCxTQUFBdmpCLFNBQ0EsSUFBQWlPLEVBQUEydUUsT0FBQTdGLFFBQUE5b0UsRUFBQTJ1RSxPQUFBM0UsVUFDQWhxRSxFQUFBNHZFLGtCQUFBdkUsVUFBQXZxRSxJQUFBZCxFQUFBMnVFLE9BQUE3RixPQUFBLFNBQUEsVUFDQTlvRSxFQUFBMnVFLE9BQUE3RixVQUNBcVMsR0FBQW43RSxFQUFBNHBDLFFBQUF6aUQsV0FDQTZZLEVBQUE0cEMsUUFBQXppRCxXQUFBOHRCLGFBQUFqVixFQUFBNHZFLGtCQUFBNXZFLEVBQUE2dkUsT0FBQW43RSxrQkFDQWpLLElBQUF1VixFQUFBMnVFLE9BQUFyNUQsVUFDQXRWLEVBQUEydUUsT0FBQXI1RCxTQUFBcHVCLFlBQUE4WSxFQUFBNHZFLG9CQUVBNXZFLEVBQUEydUUsT0FBQTNFLFFBQUEsQ0FDQSxJQUFBMEIsRUFBQTNrRixFQUFBLE1BQUEscUJBQ0FpWixFQUFBNHBDLFFBQUF6aUQsWUFDQTZZLEVBQUE0cEMsUUFBQXppRCxXQUFBOHRCLGFBQUF5MkQsRUFBQTFyRSxFQUFBNHBDLFNBQ0E4aEMsRUFBQXhrRixZQUFBOFksRUFBQTRwQyxTQUNBNXBDLEVBQUF5bkUsVUFDQWlFLEVBQUF4a0YsWUFBQThZLEVBQUF5bkUsVUFDQWlFLEVBQUF4a0YsWUFBQThZLEVBQUE0dkUsbUJBR0E1dkUsRUFBQTJ1RSxPQUFBM0UsUUFBQWhxRSxFQUFBMnVFLE9BQUE3RixjQUNBcitFLElBQUF1VixFQUFBMnVFLE9BQUFyNUQsU0FDQXRWLEVBQUEydUUsT0FBQXI1RCxTQUNBOXZCLE9BQUFILFNBQUEra0IsTUFBQWxqQixZQUFBOFksRUFBQTR2RSxtQkFyVUF3TCxHQWtJQSxXQVFBLEdBUEFwN0UsRUFBQTJ1RSxPQUFBemlFLE9BQ0EsT0FBQSxRQUFBLFNBQUEsU0FBQXkyQixRQUFBLFNBQUE3VyxHQUNBdmhDLE1BQUF0QyxVQUFBMDZDLFFBQUFsOEMsS0FBQXVaLEVBQUE0cEMsUUFBQXIyQyxpQkFBQSxTQUFBdTRCLEVBQUEsS0FBQSxTQUFBNzNCLEdBQ0EsT0FBQXE2QixFQUFBcjZCLEVBQUEsUUFBQStMLEVBQUE4ckIsUUFJQTlyQixFQUFBa2hDLFVBMnpDQSxXQUNBLElBQUFtNkMsRUFBQXI3RSxFQUFBMnVFLE9BQUFyRyxXQUNBdG9FLEVBQUEydUUsT0FBQTFGLFdBQUEsT0FBQSxpQkFDQSxPQUNBanBFLEVBQUFxdkUsWUFBQXRvRixFQUFBLFFBQUFpWixFQUFBOUosTUFBQVYsVUFBQSxxQkFDQXdLLEVBQUFxdkUsWUFBQS96RCxLQUFBdGIsRUFBQTlKLE1BQUFoRCxhQUFBLFNBQUEsTUFDQThNLEVBQUFxdkUsWUFBQXYwRSxTQUFBLEVBQ0FrRixFQUFBcXZFLFlBQUFsa0YsS0FBQWt3RixFQUNBcjdFLEVBQUFxdkUsWUFBQTE5RSxTQUFBcU8sRUFBQTlKLE1BQUF2RSxTQUNBcU8sRUFBQXF2RSxZQUFBMTJCLFlBQUEzNEMsRUFBQTlKLE1BQUF5aUQsWUFDQTM0QyxFQUFBNDRFLGdCQUNBLG1CQUFBeUMsRUFDQSxnQkFDQSxTQUFBQSxFQUFBLFFBQUEsUUFDQXI3RSxFQUFBc3ZFLGNBQUFsbkYsU0FDQTRYLEVBQUFxdkUsWUFBQW53RSxhQUFBYyxFQUFBcXZFLFlBQUE1aUYsTUFBQXVULEVBQUF5dUUsV0FBQXp1RSxFQUFBc3ZFLGNBQUEsR0FBQXR2RSxFQUFBNDRFLGtCQUVBNTRFLEVBQUEydUUsT0FBQThCLFVBQ0F6d0UsRUFBQXF2RSxZQUFBMW9DLElBQUEzbUMsRUFBQXl1RSxXQUFBenVFLEVBQUEydUUsT0FBQThCLFFBQUEsVUFDQXp3RSxFQUFBMnVFLE9BQUE4QyxVQUNBenhFLEVBQUFxdkUsWUFBQTMyRCxJQUFBMVksRUFBQXl1RSxXQUFBenVFLEVBQUEydUUsT0FBQThDLFFBQUEsVUFDQXp4RSxFQUFBOUosTUFBQS9LLEtBQUEsY0FDQVYsSUFBQXVWLEVBQUF5bkUsV0FDQXpuRSxFQUFBeW5FLFNBQUF0OEUsS0FBQSxVQUNBLElBQ0E2VSxFQUFBOUosTUFBQS9PLFlBQ0E2WSxFQUFBOUosTUFBQS9PLFdBQUE4dEIsYUFBQWpWLEVBQUFxdkUsWUFBQXJ2RSxFQUFBOUosTUFBQXhCLGFBRUEsTUFBQTA1RSxJQUNBOS9DLEVBQUF0dUIsRUFBQXF2RSxZQUFBLFNBQUEsU0FBQXI5RSxHQUNBZ08sRUFBQTBzRSxRQUFBMTZFLEVBQUE3SCxPQUFBc0MsT0FBQSxFQUFBdVQsRUFBQTQ0RSxpQkFDQWxKLEdBQUEsWUFDQUEsR0FBQSxhQTExQ0E0TCxPQURBLENBSUEsSUFBQUMsRUFBQXJRLEVBQUE2TCxFQUFBLElBQ0EvMkUsRUFBQXEyRSxpQkFBQW5MLEVBQUFrRixFQUFBLEtBQ0EsVUFBQXB3RSxFQUFBMnVFLE9BQUF2L0MsTUFDQXB2QixFQUFBZ3lFLGdCQUNBLG9CQUFBaC9FLEtBQUFtdkMsVUFBQUMsWUFDQTlULEVBQUF0dUIsRUFBQWd5RSxjQUFBLFlBQUEsU0FBQWhnRixHQUNBLE9BQUE4aEYsRUFBQTloRixFQUFBN0gsVUFFQW1rQyxFQUFBOW9DLE9BQUFILFNBQUEra0IsS0FBQSxVQUFBaWpELEdBQ0FydEQsRUFBQTJ1RSxPQUFBM0UsUUFDQTE3QyxFQUFBdHVCLEVBQUE2dkUsT0FBQSxVQUFBeGlCLEdBQ0FydEQsRUFBQTJ1RSxPQUFBN0YsUUFBQTlvRSxFQUFBMnVFLE9BQUEzRSxRQUNBMTdDLEVBQUE5b0MsT0FBQSxTQUFBKzFGLFFBQ0E5d0YsSUFBQWpGLE9BQUFxcEQsY0FDQXZnQixFQUFBOW9DLE9BQUFILFNBQUEra0IsS0FBQSxhQUFBZ3JFLEdBQ0E5bUQsRUFBQTlvQyxPQUFBSCxTQUFBK2tCLEtBQUEsWUFBQXluRSxFQUFBdUQsSUFDQTltRCxFQUFBdHVCLEVBQUE2dkUsT0FBQSxPQUFBdUYsSUFDQSxJQUFBcDFFLEVBQUEydUUsT0FBQS9HLGFBQ0F0NUMsRUFBQXR1QixFQUFBNnZFLE9BQUEsUUFBQTd2RSxFQUFBaXJCLE1BQ0FxRCxFQUFBdHVCLEVBQUE2dkUsT0FBQSxZQUFBZ0MsRUFBQTd4RSxFQUFBaXJCLGFBRUF4Z0MsSUFBQXVWLEVBQUFneUUsZ0JBQ0FoeUUsRUFBQXN5RSxTQUFBaDlFLGlCQUFBLFFBQUEsU0FBQXRELEdBQUEsT0FBQUEsRUFBQXVkLG1CQUNBK2UsRUFBQXR1QixFQUFBc3lFLFNBQUEsUUFBQXBILEVBQUE2TixHQUFBLEtBQ0F6cUQsRUFBQXR1QixFQUFBc3lFLFNBQUEsWUFBQVQsRUFBQW9ILEtBQ0EzcUQsRUFBQXR1QixFQUFBc3lFLFVBQUEsUUFBQSxhQUFBWCxHQUNBcmpELEVBQUF0dUIsRUFBQWd5RSxjQUFBLFlBQUFILEVBQUFzRSxJQUNBbjJFLEVBQUEydUUsT0FBQTN2RCxVQUNBc1AsRUFBQXR1QixFQUFBZ3lFLGVBQUEscUJBQUEsZ0JBQUFELEdBQ0F6akQsRUFBQXR1QixFQUFBc3lFLFVBQUEscUJBQUEsZ0JBQUFILFVBR0ExbkYsSUFBQXVWLEVBQUFrMkUsb0JBQ0F6ckYsSUFBQXVWLEVBQUFteEUsb0JBQ0ExbUYsSUFBQXVWLEVBQUFpeEUsY0FJQTNpRCxFQUFBdHVCLEVBQUFrMkUsZUFBQSxRQUFBLFFBQUEsYUFBQTFGLEdBQ0FsaUQsRUFBQXR1QixFQUFBazJFLGNBQUEsWUFBQXJFLEVBQUFlLElBQ0F0a0QsRUFBQXR1QixFQUFBazJFLGVBQUEsUUFBQSxhQUFBbDJFLEVBQUFxMkUsa0JBQ0EvbkQsRUFBQXR1QixFQUFBazJFLGNBQUEsUUFBQTlGLEdBQ0E5aEQsR0FBQXR1QixFQUFBaXhFLFlBQUFqeEUsRUFBQW14RSxnQkFBQSxRQUFBLFNBUEEsU0FBQW4vRSxHQUNBLE9BQUFBLEVBQUE3SCxPQUFBdUQsZ0JBT0FqRCxJQUFBdVYsRUFBQXd4RSxlQUNBbGpELEVBQUF0dUIsRUFBQXd4RSxjQUFBLFFBQUEsV0FBQSxPQUFBeHhFLEVBQUF3eEUsZUFBQXh4RSxFQUFBd3hFLGNBQUE5akYsZ0JBQ0FqRCxJQUFBdVYsRUFBQThxRSxNQUNBeDhDLEVBQUF0dUIsRUFBQThxRSxLQUFBLFlBQUErRyxFQUFBLFNBQUE3L0UsR0FDQXcrRSxFQUFBeCtFLEdBQ0FvK0UsU0E3TEFvTCxJQUNBeDdFLEVBQUFzdkUsY0FBQWxuRixRQUFBNFgsRUFBQTJ1RSxPQUFBMUYsY0FDQWpwRSxFQUFBMnVFLE9BQUFyRyxZQUNBMkcsRUFBQWp2RSxFQUFBMnVFLE9BQUExRixXQUNBanBFLEVBQUF1dkUsdUJBQUF2dkUsRUFBQTJ1RSxPQUFBOEIsYUFDQWhtRixHQUVBNmxGLElBQUEsSUFFQXR3RSxFQUFBd3ZFLGNBQ0F4dkUsRUFBQXN2RSxjQUFBbG5GLE9BQUEsR0FBQTRYLEVBQUEydUUsT0FBQTFGLGdCQUNBeCtFLElBQUF1VixFQUFBMjZFLGtCQUFBbHdGLElBQUF1VixFQUFBZ3lFLGdCQUNBaHlFLEVBQUE0dkUsa0JBQUExbUUsTUFBQXVOLE1BQ0F6VyxFQUFBZ3lFLGNBQUF6bkQsWUFBQXZxQixFQUFBMjZFLFlBQUFwd0QsWUFBQSxNQUVBdnFCLEVBQUFraEMsVUFDQWl2QyxJQUNBVCxHQUFBLFdBc21EQTF2RSxFQUVBLFNBQUF5N0UsRUFBQUMsRUFBQS9NLEdBR0EsSUFBQSxJQUZBdGlFLEVBQUE5aEIsTUFBQXRDLFVBQUFsQyxNQUFBVSxLQUFBaTFGLEdBQ0FDLEtBQ0ExeUYsRUFBQSxFQUFBQSxFQUFBb2pCLEVBQUFqa0IsT0FBQWEsSUFBQSxDQUNBLElBQUFnTSxFQUFBb1gsRUFBQXBqQixHQUNBLElBQ0EsR0FBQSxPQUFBZ00sRUFBQS9CLGFBQUEsZ0JBQ0EsY0FDQXpJLElBQUF3SyxFQUFBd21GLGFBQ0F4bUYsRUFBQXdtRixXQUFBM3dDLFVBQ0E3MUMsRUFBQXdtRixnQkFBQWh4RixHQUVBd0ssRUFBQXdtRixXQUFBbk4sRUFBQXI1RSxFQUFBMDVFLE9BQ0FnTixFQUFBMTFGLEtBQUFnUCxFQUFBd21GLFlBRUEsTUFBQXpwRixHQUNBZ1UsUUFBQWpiLE1BQUFpSCxJQUdBLE9BQUEsSUFBQTJwRixFQUFBdnpGLE9BQUF1ekYsRUFBQSxHQUFBQSxFQUVBLG9CQUFBQyxjQUNBQyxlQUFBNXpGLFVBQUFzK0UsVUFBQXVWLFNBQUE3ekYsVUFBQXMrRSxVQUFBLFNBQUFvSSxHQUNBLE9BQUE4TSxFQUFBaDJGLEtBQUFrcEYsSUFFQWlOLFlBQUEzekYsVUFBQXMrRSxVQUFBLFNBQUFvSSxHQUNBLE9BQUE4TSxHQUFBaDJGLE1BQUFrcEYsS0FHQSxJQUFBcEksRUFDQUEsRUFBQSxTQUFBai9FLEVBQUFxbkYsR0FDQSxPQUFBcm5GLGFBQUF3MEYsU0FDQUwsRUFBQW4wRixFQUFBcW5GLEdBRUE4TSxFQURBLGlCQUFBbjBGLEVBQ0E5QixPQUFBSCxTQUFBa08saUJBQUFqTSxJQUNBQSxHQURBcW5GLElBR0EsaUJBQUFucEYsU0FDQUEsT0FBQStnRixVQUFBQSxHQUNBQSxFQUFBOFIsY0FBQWxwRCxFQUNBbzNDLEVBQUF1VCxPQUNBejZDLEdBQUFtbkMsS0FBQTJELEdBQ0FwekIsUUFBQXl2QixLQUFBMkQsSUFFQTVELEVBQUF3VixTQUFBLFNBQUFuTixHQUNBckksRUFBQXVULE1BQUEvaUMsUUFBQXl2QixLQUFBRCxFQUFBdVQsTUFBQS9pQyxRQUFBNjNCLElBRUFySSxFQUFBeVYsWUFBQSxTQUFBck4sR0FDQXBJLEVBQUE4UixjQUFBN1IsS0FBQUQsRUFBQThSLGNBQUExSixJQUVBLG9CQUFBdG5GLFNBQ0FBLE9BQUFHLEdBQUErK0UsVUFBQSxTQUFBb0ksR0FDQSxPQUFBOE0sRUFBQWgyRixLQUFBa3BGLEtBR0E1aEYsS0FBQTlFLFVBQUFnMEYsUUFBQSxTQUFBL0osR0FDQSxPQUFBLElBQUFubEYsS0FBQXRILEtBQUFxM0UsY0FBQXIzRSxLQUFBNjNFLFdBQUE3M0UsS0FBQTQzRSxXQUFBLGlCQUFBNlUsRUFBQWh4RCxTQUFBZ3hELEVBQUEsSUFBQUEsS0FJQSxPQUZBM0wsSUN6bEVBLFNBQUF0aEYsRUFBQUMsR0FDQSxpQkFBQUUsU0FBQSxvQkFBQUQsT0FBQUQsRUFBQUUsU0FDQSxtQkFBQXlwQyxRQUFBQSxPQUFBQyxJQUFBRCxRQUFBLFdBQUEzcEMsR0FDQUEsRUFBQUQsRUFBQWkzRixPQUhBLENBSUF6MkYsS0FBQSxTQUFBTCxHQUFBLGFBRUEsSUFBQSsyRixFQUFBLG9CQUFBMzJGLGFBQUFpRixJQUFBakYsT0FBQStnRixVQUNBL2dGLE9BQUErZ0YsV0FFQXVULFVBRUFzQyxHQUNBN1IsZUFBQSxFQUNBSCxVQUNBbkQsV0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxNQUNBb0QsVUFDQSxjQUNBLGNBQ0EsVUFDQSxRQUNBLFVBQ0EsVUFDQSxZQUdBbEQsUUFDQUYsV0FDQSxNQUNBLE1BQ0EsT0FDQSxNQUNBLE1BQ0EsT0FDQSxPQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FFQW9ELFVBQ0EsU0FDQSxVQUNBLE9BQ0EsU0FDQSxNQUNBLE9BQ0EsT0FDQSxTQUNBLFdBQ0EsVUFDQSxTQUNBLFlBR0FLLGVBQUEsTUFDQUUsWUFBQSw0QkFDQUMsWUFBQSw0QkFFQXNSLEVBQUFyQyxNQUFBb0MsR0FBQUUsRUFDQSxJQUFBRixFQUFBQyxFQUFBckMsTUFFQTEwRixFQUFBZzNGLFFBQUFBLEVBQ0FoM0YsRUFBQSxRQUFBODJGLEVBRUFyMkYsT0FBQXVoQixlQUFBaGlCLEVBQUEsY0FBQXFILE9BQUEsTUNsRUEsU0FBQXhILEVBQUFDLEdBQ0EsaUJBQUFFLFNBQUEsb0JBQUFELE9BQUFBLE9BQUFDLFFBQUFGLElBQ0EsbUJBQUEycEMsUUFBQUEsT0FBQUMsSUFBQUQsT0FBQTNwQyxHQUNBRCxFQUFBbzNGLE1BQUFuM0YsSUFIQSxDQUlBTyxLQUFBLFdBQUEsYUFFQSxJQUFBNjJGLEVBQUEsb0JBQUE5MkYsT0FFQSsyRixLQUVBRCxJQUNBQyxFQUFBQyxVQUFBLDBCQUFBaDNGLE9BQ0ErMkYsRUFBQUUsY0FBQSxpQkFBQWozRixPQUNBKzJGLEVBQUFHLFlBQUEsRUFDQUgsRUFBQUksdUJBQUEsRUFDQUosRUFBQUssSUFBQSxtQkFBQTVwRixLQUFBbXZDLFVBQUEwNkMsWUFBQXIzRixPQUFBNjhDLFNBQ0FrNkMsRUFBQU8sa0JBQUEsYUFDQVAsRUFBQVEsc0JBQUEsR0FNQSxJQUFBL2tGLEdBQ0FnbEYsT0FBQSxnQkFDQUMsUUFBQSxpQkFDQUMsUUFBQSxpQkFDQUMsU0FBQSxrQkFDQUMsTUFBQSxlQUNBQyxZQUFBLG9CQUNBQyxVQUFBLGdCQUtBbnVELEdBQ0FvdUQsVUFBQSxNQUNBbnRFLFFBQUEsbUJBQ0F5TSxVQUFBLGFBQ0F4SSxNQUFBLEVBQ0FtcEUsYUFBQSxFQUNBQyxPQUFBLEVBQ0ExOUQsTUFBQSxFQUNBM0UsVUFBQSxJQUFBLEtBQ0FzaUUsYUFBQSxFQUNBQyxrQkFBQSxFQUNBQyxNQUFBLE9BQ0FDLEtBQUEsVUFDQXpqRCxTQUFBLEdBQ0F0TixPQUFBLEVBQ0FneEQsYUFBQSxFQUNBQyxVQUFBLEVBQ0FDLGNBQUEsRUFDQUMsU0FBQSxFQUNBQyxlQUFBLElBQ0FDLFFBQUEsRUFDQTdvRSxTQUFBLFdBQ0EsT0FBQWp3QixTQUFBK2tCLE1BRUF3UCxPQUFBLEtBQ0F3a0UsV0FBQSxFQUNBQyxhQUFBLEVBQ0FDLGNBQUEsRUFDQUMsTUFBQSxFQUNBQyxhQUFBLE9BQ0FDLFVBQUEsUUFDQUMsZUFBQSxHQUNBcm5FLFNBQUEsR0FDQXNuRSxpQkFDQUMsNEJBQUEsRUFDQUMsT0FBQSxhQUNBQyxRQUFBLGFBQ0FDLE9BQUEsYUFDQUMsU0FBQSxjQU9BQyxFQUFBMUMsRUFBQUMsV0FBQTMyRixPQUFBNk4sS0FBQXk3QixHQU9BLFNBQUErdkQsRUFBQXp5RixHQUNBLE1BQUEsb0JBQUE1RyxPQUFBb0MsVUFBQTdCLFNBQUFLLEtBQUFnRyxHQWlDQSxTQUFBZ3VCLEVBQUFnZSxHQUlBLElBQUEsSUFIQTBtRCxJQUFBLEVBQUEsVUFDQUMsRUFBQTNtRCxFQUFBMkssT0FBQSxHQUFBcDdDLGNBQUF5d0MsRUFBQTF5QyxNQUFBLEdBRUFrRCxFQUFBLEVBQUFBLEVBQUFrMkYsRUFBQS8yRixPQUFBYSxJQUFBLENBQ0EsSUFBQW8yRixFQUFBRixFQUFBbDJGLEdBQ0FxMkYsRUFBQUQsRUFBQSxHQUFBQSxFQUFBRCxFQUFBM21ELEVBQ0EsUUFBQSxJQUFBcHpDLFNBQUEra0IsS0FBQWxCLE1BQUFvMkUsR0FDQSxPQUFBQSxFQUlBLE9BQUEsS0E0SkEsSUFBQUMsRUFBQSxTQUFBMzdDLEVBQUE0N0MsR0FDQSxLQUFBNTdDLGFBQUE0N0MsR0FDQSxNQUFBLElBQUEzNkUsVUFBQSxzQ0FJQTQ2RSxFQUFBLFdBQ0EsU0FBQUMsRUFBQXYxRixFQUFBc21CLEdBQ0EsSUFBQSxJQUFBeG5CLEVBQUEsRUFBQUEsRUFBQXduQixFQUFBcm9CLE9BQUFhLElBQUEsQ0FDQSxJQUFBMDJGLEVBQUFsdkUsRUFBQXhuQixHQUNBMDJGLEVBQUE1dkUsV0FBQTR2RSxFQUFBNXZFLGFBQUEsRUFDQTR2RSxFQUFBdDRFLGNBQUEsRUFDQSxVQUFBczRFLElBQUFBLEVBQUExdkUsVUFBQSxHQUNBcHFCLE9BQUF1aEIsZUFBQWpkLEVBQUF3MUYsRUFBQS9yRixJQUFBK3JGLElBSUEsT0FBQSxTQUFBSCxFQUFBSSxFQUFBQyxHQUdBLE9BRkFELEdBQUFGLEVBQUFGLEVBQUF2M0YsVUFBQTIzRixHQUNBQyxHQUFBSCxFQUFBRixFQUFBSyxHQUNBTCxHQWRBLEdBd0JBTSxFQUFBajZGLE9BQUE0Z0YsUUFBQSxTQUFBdDhFLEdBQ0EsSUFBQSxJQUFBbEIsRUFBQSxFQUFBQSxFQUFBRSxVQUFBZixPQUFBYSxJQUFBLENBQ0EsSUFBQTZmLEVBQUEzZixVQUFBRixHQUVBLElBQUEsSUFBQTJLLEtBQUFrVixFQUNBampCLE9BQUFvQyxVQUFBM0IsZUFBQUcsS0FBQXFpQixFQUFBbFYsS0FDQXpKLEVBQUF5SixHQUFBa1YsRUFBQWxWLElBS0EsT0FBQXpKLEdBK0RBLFNBQUE0MUYsRUFBQUMsR0FDQSxPQUNBQyxRQUFBRCxFQUFBamxCLGNBQUEvaUUsRUFBQWlsRixTQUNBaUQsU0FBQUYsRUFBQWpsQixjQUFBL2lFLEVBQUFtbEYsVUFDQTU3RSxRQUFBeStFLEVBQUFqbEIsY0FBQS9pRSxFQUFBa2xGLFVBU0EsU0FBQWlELEVBQUFsc0YsR0FDQSxJQUFBeWpDLEVBQUF6akMsRUFBQWYsYUFBQSxTQUVBd2tDLEdBQ0F6akMsRUFBQWQsYUFBQSxzQkFBQXVrQyxHQUVBempDLEVBQUFSLGdCQUFBLFNBOEJBLElBQUEsSUFIQTJzRixFQUFBLG9CQUFBNTZGLFFBQUEsb0JBQUFILFNBQ0FnN0YsR0FBQSxPQUFBLFVBQUEsV0FDQUMsRUFBQSxFQUNBcjNGLEVBQUEsRUFBQUEsRUFBQW8zRixFQUFBajRGLE9BQUFhLEdBQUEsRUFDQSxHQUFBbTNGLEdBQUFqK0MsVUFBQUMsVUFBQWw4QyxRQUFBbTZGLEVBQUFwM0YsS0FBQSxFQUFBLENBQ0FxM0YsRUFBQSxFQUNBLE1BK0JBLElBV0FwVixFQVhBa1YsR0FBQTU2RixPQUFBKzZGLFFBM0JBLFNBQUEvNEYsR0FDQSxJQUFBNDRDLEdBQUEsRUFDQSxPQUFBLFdBQ0FBLElBR0FBLEdBQUEsRUFDQTU2QyxPQUFBKzZGLFFBQUF2OUUsVUFBQU0sS0FBQSxXQUNBODhCLEdBQUEsRUFDQTU0QyxTQUtBLFNBQUFBLEdBQ0EsSUFBQWc1RixHQUFBLEVBQ0EsT0FBQSxXQUNBQSxJQUNBQSxHQUFBLEVBQ0FuN0UsV0FBQSxXQUNBbTdFLEdBQUEsRUFDQWg1RixLQUNBODRGLE1BeUJBLFNBQUFqMkYsRUFBQW8yRixHQUVBLE9BQUFBLEdBQUEseUJBQUFyNkYsU0FBQUssS0FBQWc2RixHQVVBLFNBQUFDLEVBQUE5MkMsRUFBQW5SLEdBQ0EsR0FBQSxJQUFBbVIsRUFBQTczQyxTQUNBLFNBR0EsSUFBQXFYLEVBQUE0TSxpQkFBQTR6QixFQUFBLE1BQ0EsT0FBQW5SLEVBQUFydkIsRUFBQXF2QixHQUFBcnZCLEVBVUEsU0FBQXUzRSxFQUFBLzJDLEdBQ0EsTUFBQSxTQUFBQSxFQUFBMzJDLFNBQ0EyMkMsRUFFQUEsRUFBQXppRCxZQUFBeWlELEVBQUFsaEIsS0FVQSxTQUFBazRELEVBQUFoM0MsR0FFQSxJQUFBQSxFQUNBLE9BQUF2a0QsU0FBQStrQixLQUdBLE9BQUF3L0IsRUFBQTMyQyxVQUNBLElBQUEsT0FDQSxJQUFBLE9BQ0EsT0FBQTIyQyxFQUFBbjNDLGNBQUEyWCxLQUNBLElBQUEsWUFDQSxPQUFBdy9CLEVBQUF4L0IsS0FLQSxJQUFBeTJFLEVBQUFILEVBQUE5MkMsR0FDQXJyQixFQUFBc2lFLEVBQUF0aUUsU0FDQUMsRUFBQXFpRSxFQUFBcmlFLFVBQ0FDLEVBQUFvaUUsRUFBQXBpRSxVQUVBLE1BQUEsZ0JBQUF6ckIsS0FBQXVyQixFQUFBRSxFQUFBRCxHQUNBb3JCLEVBR0FnM0MsRUFBQUQsRUFBQS8yQyxJQVVBLFNBQUFrM0MsRUFBQWwzQyxHQUVBLElBQUE5YixFQUFBOGIsR0FBQUEsRUFBQTliLGFBQ0E3NkIsRUFBQTY2QixHQUFBQSxFQUFBNzZCLFNBRUEsT0FBQUEsR0FBQSxTQUFBQSxHQUFBLFNBQUFBLEdBVUEsS0FBQSxLQUFBLFNBQUEvTSxRQUFBNG5DLEVBQUE3NkIsV0FBQSxXQUFBeXRGLEVBQUE1eUQsRUFBQSxZQUNBZ3pELEVBQUFoekQsR0FHQUEsRUFiQThiLEVBQ0FBLEVBQUFuM0MsY0FBQXVDLGdCQUdBM1AsU0FBQTJQLGdCQTRCQSxTQUFBK3JGLEVBQUE5ckYsR0FDQSxPQUFBLE9BQUFBLEVBQUE5TixXQUNBNDVGLEVBQUE5ckYsRUFBQTlOLFlBR0E4TixFQVdBLFNBQUErckYsRUFBQUMsRUFBQUMsR0FFQSxLQUFBRCxHQUFBQSxFQUFBbHZGLFVBQUFtdkYsR0FBQUEsRUFBQW52RixVQUNBLE9BQUExTSxTQUFBMlAsZ0JBSUEsSUFBQXlrQixFQUFBd25FLEVBQUF4cUYsd0JBQUF5cUYsR0FBQUMsS0FBQUMsNEJBQ0E3bkYsRUFBQWtnQixFQUFBd25FLEVBQUFDLEVBQ0F6M0YsRUFBQWd3QixFQUFBeW5FLEVBQUFELEVBR0F0NUIsRUFBQXRpRSxTQUFBK2lFLGNBQ0FULEVBQUFpQixTQUFBcnZELEVBQUEsR0FDQW91RCxFQUFBa0IsT0FBQXAvRCxFQUFBLEdBQ0EsSUFBQXcrRCxFQUFBTixFQUFBTSx3QkFJQSxHQUFBZzVCLElBQUFoNUIsR0FBQWk1QixJQUFBajVCLEdBQUExdUQsRUFBQXBMLFNBQUExRSxHQUNBLE9BcERBLFNBQUFtZ0QsR0FDQSxJQUFBMzJDLEVBQUEyMkMsRUFBQTMyQyxTQUVBLE1BQUEsU0FBQUEsSUFHQSxTQUFBQSxHQUFBNnRGLEVBQUFsM0MsRUFBQXpmLHFCQUFBeWYsR0E4Q0F5M0MsQ0FBQXA1QixHQUNBQSxFQUdBNjRCLEVBQUE3NEIsR0FJQSxJQUFBcTVCLEVBQUFQLEVBQUFFLEdBQ0EsT0FBQUssRUFBQTU0RCxLQUNBczRELEVBQUFNLEVBQUE1NEQsS0FBQXc0RCxHQUVBRixFQUFBQyxFQUFBRixFQUFBRyxHQUFBeDRELE1BWUEsU0FBQTY0RCxFQUFBMzNDLEdBQ0EsSUFFQTQzQyxFQUFBLFNBRkFyNEYsVUFBQWYsT0FBQSxRQUFBcUMsSUFBQXRCLFVBQUEsR0FBQUEsVUFBQSxHQUFBLE9BRUEsWUFBQSxhQUNBOEosRUFBQTIyQyxFQUFBMzJDLFNBRUEsR0FBQSxTQUFBQSxHQUFBLFNBQUFBLEVBQUEsQ0FDQSxJQUFBb2hCLEVBQUF1MUIsRUFBQW4zQyxjQUFBdUMsZ0JBRUEsT0FEQTQwQyxFQUFBbjNDLGNBQUFndkYsa0JBQUFwdEUsR0FDQW10RSxHQUdBLE9BQUE1M0MsRUFBQTQzQyxHQW1DQSxTQUFBRSxFQUFBNW9FLEVBQUFxbEIsR0FDQSxJQUFBd2pELEVBQUEsTUFBQXhqRCxFQUFBLE9BQUEsTUFDQXlqRCxFQUFBLFNBQUFELEVBQUEsUUFBQSxTQUVBLE9BQUFwMkYsV0FBQXV0QixFQUFBLFNBQUE2b0UsRUFBQSxTQUFBLElBQUFwMkYsV0FBQXV0QixFQUFBLFNBQUE4b0UsRUFBQSxTQUFBLElBU0EsSUFBQUMsT0FBQXAzRixFQUVBcTNGLEVBQUEsV0FJQSxZQUhBcjNGLElBQUFvM0YsSUFDQUEsR0FBQSxJQUFBMS9DLFVBQUE0L0MsV0FBQTc3RixRQUFBLFlBRUEyN0YsR0FHQSxTQUFBRyxFQUFBN2pELEVBQUEvekIsRUFBQWlLLEVBQUE4MUMsR0FDQSxPQUFBeC9ELEtBQUErdEIsSUFBQXRPLEVBQUEsU0FBQSt6QixHQUFBL3pCLEVBQUEsU0FBQSt6QixHQUFBOXBCLEVBQUEsU0FBQThwQixHQUFBOXBCLEVBQUEsU0FBQThwQixHQUFBOXBCLEVBQUEsU0FBQThwQixHQUFBMmpELElBQUF6dEUsRUFBQSxTQUFBOHBCLEdBQUFnc0IsRUFBQSxVQUFBLFdBQUFoc0IsRUFBQSxNQUFBLFNBQUFnc0IsRUFBQSxVQUFBLFdBQUFoc0IsRUFBQSxTQUFBLFVBQUEsR0FHQSxTQUFBOGpELElBQ0EsSUFBQTczRSxFQUFBL2tCLFNBQUEra0IsS0FDQWlLLEVBQUFodkIsU0FBQTJQLGdCQUNBbTFELEVBQUEyM0IsS0FBQTlyRSxpQkFBQTNCLEdBRUEsT0FDQXNJLE9BQUFxbEUsRUFBQSxTQUFBNTNFLEVBQUFpSyxFQUFBODFDLEdBQ0ExekMsTUFBQXVyRSxFQUFBLFFBQUE1M0UsRUFBQWlLLEVBQUE4MUMsSUFJQSxJQUFBKzNCLEVBQUEsU0FBQXQrQyxFQUFBNDdDLEdBQ0EsS0FBQTU3QyxhQUFBNDdDLEdBQ0EsTUFBQSxJQUFBMzZFLFVBQUEsc0NBSUFzOUUsRUFBQSxXQUNBLFNBQUF6QyxFQUFBdjFGLEVBQUFzbUIsR0FDQSxJQUFBLElBQUF4bkIsRUFBQSxFQUFBQSxFQUFBd25CLEVBQUFyb0IsT0FBQWEsSUFBQSxDQUNBLElBQUEwMkYsRUFBQWx2RSxFQUFBeG5CLEdBQ0EwMkYsRUFBQTV2RSxXQUFBNHZFLEVBQUE1dkUsYUFBQSxFQUNBNHZFLEVBQUF0NEUsY0FBQSxFQUNBLFVBQUFzNEUsSUFBQUEsRUFBQTF2RSxVQUFBLEdBQ0FwcUIsT0FBQXVoQixlQUFBamQsRUFBQXcxRixFQUFBL3JGLElBQUErckYsSUFJQSxPQUFBLFNBQUFILEVBQUFJLEVBQUFDLEdBR0EsT0FGQUQsR0FBQUYsRUFBQUYsRUFBQXYzRixVQUFBMjNGLEdBQ0FDLEdBQUFILEVBQUFGLEVBQUFLLEdBQ0FMLEdBZEEsR0FrQkE0QyxFQUFBLFNBQUFsM0YsRUFBQTBJLEVBQUFuSCxHQVlBLE9BWEFtSCxLQUFBMUksRUFDQXJGLE9BQUF1aEIsZUFBQWxjLEVBQUEwSSxHQUNBbkgsTUFBQUEsRUFDQXNqQixZQUFBLEVBQ0ExSSxjQUFBLEVBQ0E0SSxVQUFBLElBR0Eva0IsRUFBQTBJLEdBQUFuSCxFQUdBdkIsR0FHQW0zRixFQUFBeDhGLE9BQUE0Z0YsUUFBQSxTQUFBdDhFLEdBQ0EsSUFBQSxJQUFBbEIsRUFBQSxFQUFBQSxFQUFBRSxVQUFBZixPQUFBYSxJQUFBLENBQ0EsSUFBQTZmLEVBQUEzZixVQUFBRixHQUVBLElBQUEsSUFBQTJLLEtBQUFrVixFQUNBampCLE9BQUFvQyxVQUFBM0IsZUFBQUcsS0FBQXFpQixFQUFBbFYsS0FDQXpKLEVBQUF5SixHQUFBa1YsRUFBQWxWLElBS0EsT0FBQXpKLEdBVUEsU0FBQW00RixFQUFBQyxHQUNBLE9BQUFGLEtBQUFFLEdBQ0FwcEQsTUFBQW9wRCxFQUFBbG9FLEtBQUFrb0UsRUFBQTlyRSxNQUNBMmlCLE9BQUFtcEQsRUFBQWx0RixJQUFBa3RGLEVBQUE1bEUsU0FXQSxTQUFBdkMsRUFBQXd2QixHQUNBLElBQUFwYyxLQUtBLEdBQUFzMEQsSUFDQSxJQUNBdDBELEVBQUFvYyxFQUFBeHZCLHdCQUNBLElBQUFvQixFQUFBK2xFLEVBQUEzM0MsRUFBQSxPQUNBbnVCLEVBQUE4bEUsRUFBQTMzQyxFQUFBLFFBQ0FwYyxFQUFBbjRCLEtBQUFtbUIsRUFDQWdTLEVBQUFuVCxNQUFBb0IsRUFDQStSLEVBQUE0TCxRQUFBNWQsRUFDQWdTLEVBQUEyTCxPQUFBMWQsRUFDQSxNQUFBdk8sU0FFQXNnQixFQUFBb2MsRUFBQXh2Qix3QkFHQSxJQUFBdGhCLEdBQ0F1aEIsS0FBQW1ULEVBQUFuVCxLQUNBaGxCLElBQUFtNEIsRUFBQW40QixJQUNBb2hCLE1BQUErVyxFQUFBMkwsTUFBQTNMLEVBQUFuVCxLQUNBc0MsT0FBQTZRLEVBQUE0TCxPQUFBNUwsRUFBQW40QixLQUlBbXRGLEVBQUEsU0FBQTU0QyxFQUFBMzJDLFNBQUFndkYsT0FDQXhyRSxFQUFBK3JFLEVBQUEvckUsT0FBQW16QixFQUFBcEgsYUFBQTFwQyxFQUFBcWdDLE1BQUFyZ0MsRUFBQXVoQixLQUNBc0MsRUFBQTZsRSxFQUFBN2xFLFFBQUFpdEIsRUFBQTBFLGNBQUF4MUMsRUFBQXNnQyxPQUFBdGdDLEVBQUF6RCxJQUVBb3RGLEVBQUE3NEMsRUFBQXJmLFlBQUE5VCxFQUNBaXNFLEVBQUE5NEMsRUFBQXBmLGFBQUE3TixFQUlBLEdBQUE4bEUsR0FBQUMsRUFBQSxDQUNBLElBQUE1cEUsRUFBQTRuRSxFQUFBOTJDLEdBQ0E2NEMsR0FBQWYsRUFBQTVvRSxFQUFBLEtBQ0E0cEUsR0FBQWhCLEVBQUE1b0UsRUFBQSxLQUVBaGdCLEVBQUEyZCxPQUFBZ3NFLEVBQ0EzcEYsRUFBQTZqQixRQUFBK2xFLEVBR0EsT0FBQUosRUFBQXhwRixHQUdBLFNBQUE2cEYsRUFBQXJpRixFQUFBOUcsR0FDQSxJQUFBcW9GLEVBQUFDLElBQ0FjLEVBQUEsU0FBQXBwRixFQUFBdkcsU0FDQTR2RixFQUFBem9FLEVBQUE5WixHQUNBMnBDLEVBQUE3dkIsRUFBQTVnQixHQUNBc3BGLEVBQUFsQyxFQUFBdGdGLEdBRUF3WSxFQUFBNG5FLEVBQUFsbkYsR0FDQXVwRixFQUFBeDNGLFdBQUF1dEIsRUFBQWlxRSxlQUFBLElBQ0FDLEVBQUF6M0YsV0FBQXV0QixFQUFBa3FFLGdCQUFBLElBRUFULEVBQUFELEdBQ0FqdEYsSUFBQXd0RixFQUFBeHRGLElBQUE0MEMsRUFBQTUwQyxJQUFBMHRGLEVBQ0Exb0UsS0FBQXdvRSxFQUFBeG9FLEtBQUE0dkIsRUFBQTV2QixLQUFBMm9FLEVBQ0F2c0UsTUFBQW9zRSxFQUFBcHNFLE1BQ0FrRyxPQUFBa21FLEVBQUFsbUUsU0FTQSxHQVBBNGxFLEVBQUFVLFVBQUEsRUFDQVYsRUFBQWhzRSxXQUFBLEdBTUFzckUsR0FBQWUsRUFBQSxDQUNBLElBQUFLLEVBQUExM0YsV0FBQXV0QixFQUFBbXFFLFVBQUEsSUFDQTFzRSxFQUFBaHJCLFdBQUF1dEIsRUFBQXZDLFdBQUEsSUFFQWdzRSxFQUFBbHRGLEtBQUEwdEYsRUFBQUUsRUFDQVYsRUFBQW5wRCxRQUFBMnBELEVBQUFFLEVBQ0FWLEVBQUFsb0UsTUFBQTJvRSxFQUFBenNFLEVBQ0Fnc0UsRUFBQXBwRCxPQUFBNnBELEVBQUF6c0UsRUFHQWdzRSxFQUFBVSxVQUFBQSxFQUNBVixFQUFBaHNFLFdBQUFBLEVBT0EsT0FKQXNyRSxFQUFBcm9GLEVBQUFyTCxTQUFBMjBGLEdBQUF0cEYsSUFBQXNwRixHQUFBLFNBQUFBLEVBQUE3dkYsWUFDQXN2RixFQTlOQSxTQUFBLzBELEVBQUFvYyxHQUNBLElBQUFueEIsRUFBQXR2QixVQUFBZixPQUFBLFFBQUFxQyxJQUFBdEIsVUFBQSxJQUFBQSxVQUFBLEdBRUFxeUIsRUFBQStsRSxFQUFBMzNDLEVBQUEsT0FDQW51QixFQUFBOGxFLEVBQUEzM0MsRUFBQSxRQUNBczVDLEVBQUF6cUUsR0FBQSxFQUFBLEVBS0EsT0FKQStVLEVBQUFuNEIsS0FBQW1tQixFQUFBMG5FLEVBQ0ExMUQsRUFBQTRMLFFBQUE1ZCxFQUFBMG5FLEVBQ0ExMUQsRUFBQW5ULE1BQUFvQixFQUFBeW5FLEVBQ0ExMUQsRUFBQTJMLE9BQUExZCxFQUFBeW5FLEVBQ0ExMUQsRUFvTkEyMUQsQ0FBQVosRUFBQS9vRixJQUdBK29GLEVBOEJBLFNBQUFhLEVBQUF4NUMsR0FDQSxJQUFBMzJDLEVBQUEyMkMsRUFBQTMyQyxTQUNBLE1BQUEsU0FBQUEsR0FBQSxTQUFBQSxJQUdBLFVBQUF5dEYsRUFBQTkyQyxFQUFBLGFBR0F3NUMsRUFBQXpDLEVBQUEvMkMsS0FhQSxTQUFBeTVDLEVBQUFyRCxFQUFBc0QsRUFBQS9vRSxFQUFBZ3BFLEdBRUEsSUFBQUMsR0FBQW51RixJQUFBLEVBQUFnbEIsS0FBQSxHQUNBeVQsRUFBQWt6RCxFQUFBaEIsRUFBQXNELEdBR0EsR0FBQSxhQUFBQyxFQUNBQyxFQXZEQSxTQUFBNTVDLEdBQ0EsSUFBQXYxQixFQUFBdTFCLEVBQUFuM0MsY0FBQXVDLGdCQUNBeXVGLEVBQUFkLEVBQUEvNEMsRUFBQXYxQixHQUNBb0MsRUFBQTlyQixLQUFBK3RCLElBQUFyRSxFQUFBbXVCLFlBQUFoOUMsT0FBQXVpRCxZQUFBLEdBQ0FwckIsRUFBQWh5QixLQUFBK3RCLElBQUFyRSxFQUFBaTZCLGFBQUE5b0QsT0FBQSs4QyxhQUFBLEdBRUEvbUIsRUFBQStsRSxFQUFBbHRFLEdBQ0FvSCxFQUFBOGxFLEVBQUFsdEUsRUFBQSxRQVNBLE9BQUFpdUUsR0FOQWp0RixJQUFBbW1CLEVBQUFpb0UsRUFBQXB1RixJQUFBb3VGLEVBQUFSLFVBQ0E1b0UsS0FBQW9CLEVBQUFnb0UsRUFBQXBwRSxLQUFBb3BFLEVBQUFsdEUsV0FDQUUsTUFBQUEsRUFDQWtHLE9BQUFBLElBMENBK21FLENBQUE1MUQsT0FDQSxDQUVBLElBQUE2MUQsT0FBQSxFQUNBLGlCQUFBSixFQUVBLFVBREFJLEVBQUEvQyxFQUFBRCxFQUFBMkMsS0FDQXJ3RixXQUNBMHdGLEVBQUEzRCxFQUFBdnRGLGNBQUF1QyxpQkFHQTJ1RixFQURBLFdBQUFKLEVBQ0F2RCxFQUFBdnRGLGNBQUF1QyxnQkFFQXV1RixFQUdBLElBQUFoQixFQUFBSSxFQUFBZ0IsRUFBQTcxRCxHQUdBLEdBQUEsU0FBQTYxRCxFQUFBMXdGLFVBQUFtd0YsRUFBQXQxRCxHQVdBMDFELEVBQUFqQixNQVhBLENBQ0EsSUFBQXFCLEVBQUEzQixJQUNBdGxFLEVBQUFpbkUsRUFBQWpuRSxPQUNBbEcsRUFBQW10RSxFQUFBbnRFLE1BRUErc0UsRUFBQW51RixLQUFBa3RGLEVBQUFsdEYsSUFBQWt0RixFQUFBVSxVQUNBTyxFQUFBcHFELE9BQUF6YyxFQUFBNGxFLEVBQUFsdEYsSUFDQW11RixFQUFBbnBFLE1BQUFrb0UsRUFBQWxvRSxLQUFBa29FLEVBQUFoc0UsV0FDQWl0RSxFQUFBcnFELE1BQUExaUIsRUFBQThyRSxFQUFBbG9FLE1BYUEsT0FMQW1wRSxFQUFBbnBFLE1BQUFFLEVBQ0FpcEUsRUFBQW51RixLQUFBa2xCLEVBQ0FpcEUsRUFBQXJxRCxPQUFBNWUsRUFDQWlwRSxFQUFBcHFELFFBQUE3ZSxFQUVBaXBFLEVBbUJBLFNBQUFLLEVBQUF0RyxFQUFBdUcsRUFBQTlELEVBQUFzRCxFQUFBQyxHQUNBLElBQUFocEUsRUFBQXB4QixVQUFBZixPQUFBLFFBQUFxQyxJQUFBdEIsVUFBQSxHQUFBQSxVQUFBLEdBQUEsRUFFQSxJQUFBLElBQUFvMEYsRUFBQXIzRixRQUFBLFFBQ0EsT0FBQXEzRixFQUdBLElBQUFpRyxFQUFBSCxFQUFBckQsRUFBQXNELEVBQUEvb0UsRUFBQWdwRSxHQUVBUSxHQUNBMXVGLEtBQ0FvaEIsTUFBQStzRSxFQUFBL3NFLE1BQ0FrRyxPQUFBbW5FLEVBQUF6dUYsSUFBQW11RixFQUFBbnVGLEtBRUE4akMsT0FDQTFpQixNQUFBK3NFLEVBQUFycUQsTUFBQTJxRCxFQUFBM3FELE1BQ0F4YyxPQUFBNm1FLEVBQUE3bUUsUUFFQXljLFFBQ0EzaUIsTUFBQStzRSxFQUFBL3NFLE1BQ0FrRyxPQUFBNm1FLEVBQUFwcUQsT0FBQTBxRCxFQUFBMXFELFFBRUEvZSxNQUNBNUQsTUFBQXF0RSxFQUFBenBFLEtBQUFtcEUsRUFBQW5wRSxLQUNBc0MsT0FBQTZtRSxFQUFBN21FLFNBSUFxbkUsRUFBQW4rRixPQUFBNk4sS0FBQXF3RixHQUFBaDdGLElBQUEsU0FBQTZLLEdBQ0EsT0FBQXl1RixHQUNBenVGLElBQUFBLEdBQ0Ftd0YsRUFBQW53RixJQUNBcXdGLE1BaERBQyxFQWdEQUgsRUFBQW53RixHQS9DQXN3RixFQUFBenRFLE1BQ0F5dEUsRUFBQXZuRSxVQUZBLElBQUF1bkUsSUFrREF4NkYsS0FBQSxTQUFBa0YsRUFBQUMsR0FDQSxPQUFBQSxFQUFBbzFGLEtBQUFyMUYsRUFBQXExRixPQUdBRSxFQUFBSCxFQUFBcHVGLE9BQUEsU0FBQXd1RixHQUNBLElBQUEzdEUsRUFBQTJ0RSxFQUFBM3RFLE1BQ0FrRyxFQUFBeW5FLEVBQUF6bkUsT0FDQSxPQUFBbEcsR0FBQXVwRSxFQUFBeDlDLGFBQUE3bEIsR0FBQXFqRSxFQUFBMXhDLGVBR0ErMUMsRUFBQUYsRUFBQS83RixPQUFBLEVBQUErN0YsRUFBQSxHQUFBdndGLElBQUFvd0YsRUFBQSxHQUFBcHdGLElBRUEyd0UsRUFBQWdaLEVBQUFyd0YsTUFBQSxLQUFBLEdBRUEsT0FBQW0zRixHQUFBOWYsRUFBQSxJQUFBQSxFQUFBLElBWUEsU0FBQStmLEVBQUE1Z0YsRUFBQXM4RSxFQUFBc0QsR0FFQSxPQUFBWCxFQUFBVyxFQURBdEMsRUFBQWhCLEVBQUFzRCxJQVdBLFNBQUFpQixFQUFBMzZDLEdBQ0EsSUFBQTl3QixFQUFBOUMsaUJBQUE0ekIsR0FDQXJRLEVBQUFodUMsV0FBQXV0QixFQUFBbXFFLFdBQUExM0YsV0FBQXV0QixFQUFBMHJFLGNBQ0FockQsRUFBQWp1QyxXQUFBdXRCLEVBQUF2QyxZQUFBaHJCLFdBQUF1dEIsRUFBQXBDLGFBS0EsT0FIQUQsTUFBQW16QixFQUFBcmYsWUFBQWlQLEVBQ0E3YyxPQUFBaXRCLEVBQUFwZixhQUFBK08sR0FZQSxTQUFBa3JELEVBQUFsSCxHQUNBLElBQUFoakYsR0FBQThmLEtBQUEsUUFBQThlLE1BQUEsT0FBQUMsT0FBQSxNQUFBL2pDLElBQUEsVUFDQSxPQUFBa29GLEVBQUExeUYsUUFBQSx5QkFBQSxTQUFBa1AsR0FDQSxPQUFBUSxFQUFBUixLQWNBLFNBQUEycUYsRUFBQTFFLEVBQUEyRSxFQUFBcEgsR0FDQUEsRUFBQUEsRUFBQXJ3RixNQUFBLEtBQUEsR0FHQSxJQUFBMDNGLEVBQUFMLEVBQUF2RSxHQUdBNkUsR0FDQXB1RSxNQUFBbXVFLEVBQUFudUUsTUFDQWtHLE9BQUFpb0UsRUFBQWpvRSxRQUlBbW9FLEdBQUEsS0FBQSxRQUFBLFFBQUE1K0YsUUFBQXEzRixHQUNBd0gsRUFBQUQsRUFBQSxNQUFBLE9BQ0FFLEVBQUFGLEVBQUEsT0FBQSxNQUNBRyxFQUFBSCxFQUFBLFNBQUEsUUFDQUksRUFBQUosRUFBQSxRQUFBLFNBU0EsT0FQQUQsRUFBQUUsR0FBQUosRUFBQUksR0FBQUosRUFBQU0sR0FBQSxFQUFBTCxFQUFBSyxHQUFBLEVBRUFKLEVBQUFHLEdBREF6SCxJQUFBeUgsRUFDQUwsRUFBQUssR0FBQUosRUFBQU0sR0FFQVAsRUFBQUYsRUFBQU8sSUFHQUgsRUFZQSxTQUFBL3VGLEVBQUFuUSxFQUFBa1QsR0FFQSxPQUFBdE8sTUFBQXRDLFVBQUE2TixLQUNBblEsRUFBQW1RLEtBQUErQyxHQUlBbFQsRUFBQWlRLE9BQUFpRCxHQUFBLEdBcUNBLFNBQUFzc0YsRUFBQUMsRUFBQTc5RSxFQUFBODlFLEdBb0JBLFlBbkJBNTZGLElBQUE0NkYsRUFBQUQsRUFBQUEsRUFBQXIvRixNQUFBLEVBMUJBLFNBQUFKLEVBQUE2aEIsRUFBQS9hLEdBRUEsR0FBQWxDLE1BQUF0QyxVQUFBcTlGLFVBQ0EsT0FBQTMvRixFQUFBMi9GLFVBQUEsU0FBQS93RixHQUNBLE9BQUFBLEVBQUFpVCxLQUFBL2EsSUFLQSxJQUFBNEYsRUFBQXlELEVBQUFuUSxFQUFBLFNBQUF1RixHQUNBLE9BQUFBLEVBQUFzYyxLQUFBL2EsSUFFQSxPQUFBOUcsRUFBQU8sUUFBQW1NLEdBY0FpekYsQ0FBQUYsRUFBQSxPQUFBQyxLQUVBMWlELFFBQUEsU0FBQXVnRCxHQUNBQSxFQUFBLFVBRUFsOUUsUUFBQUMsS0FBQSx5REFFQSxJQUFBemUsRUFBQTA3RixFQUFBLFVBQUFBLEVBQUExN0YsR0FDQTA3RixFQUFBbm9GLFNBQUExUSxFQUFBN0MsS0FJQStmLEVBQUFnN0UsUUFBQXZDLE9BQUFzQyxFQUFBLzZFLEVBQUFnN0UsUUFBQXZDLFFBQ0F6NEUsRUFBQWc3RSxRQUFBZSxVQUFBaEIsRUFBQS82RSxFQUFBZzdFLFFBQUFlLFdBRUEvN0UsRUFBQS9mLEVBQUErZixFQUFBMjdFLE1BSUEzN0UsRUEyREEsU0FBQWcrRSxFQUFBSCxFQUFBSSxHQUNBLE9BQUFKLEVBQUFLLEtBQUEsU0FBQXZCLEdBQ0EsSUFBQXA2RixFQUFBbzZGLEVBQUFwNkYsS0FFQSxPQURBbzZGLEVBQUFucEYsU0FDQWpSLElBQUEwN0YsSUFXQSxTQUFBRSxFQUFBanRELEdBSUEsSUFBQSxJQUhBMG1ELElBQUEsRUFBQSxLQUFBLFNBQUEsTUFBQSxLQUNBQyxFQUFBM21ELEVBQUEySyxPQUFBLEdBQUFwN0MsY0FBQXl3QyxFQUFBMXlDLE1BQUEsR0FFQWtELEVBQUEsRUFBQUEsRUFBQWsyRixFQUFBLzJGLE9BQUEsRUFBQWEsSUFBQSxDQUNBLElBQUF3eEIsRUFBQTBrRSxFQUFBbDJGLEdBQ0EwOEYsRUFBQWxyRSxFQUFBLEdBQUFBLEVBQUEya0UsRUFBQTNtRCxFQUNBLFFBQUEsSUFBQXB6QyxTQUFBK2tCLEtBQUFsQixNQUFBeThFLEdBQ0EsT0FBQUEsRUFHQSxPQUFBLEtBbUNBLFNBQUFDLEVBQUFoOEMsR0FDQSxJQUFBbjNDLEVBQUFtM0MsRUFBQW4zQyxjQUNBLE9BQUFBLEVBQUFBLEVBQUEyQyxZQUFBNVAsT0FHQSxTQUFBcWdHLEVBQUEvQyxFQUFBdjFFLEVBQUF6a0IsRUFBQWc5RixHQUNBLElBQUFDLEVBQUEsU0FBQWpELEVBQUE3dkYsU0FDQTlJLEVBQUE0N0YsRUFBQWpELEVBQUFyd0YsY0FBQTJDLFlBQUEwdEYsRUFDQTM0RixFQUFBbUwsaUJBQUFpWSxFQUFBemtCLEdBQUFrOUYsU0FBQSxJQUVBRCxHQUNBRixFQUFBakYsRUFBQXoyRixFQUFBaEQsWUFBQW9tQixFQUFBemtCLEVBQUFnOUYsR0FFQUEsRUFBQTcvRixLQUFBa0UsR0E2QkEsU0FBQTg3RixJQUNBeGdHLEtBQUFpZSxNQUFBd2lGLGdCQUNBemdHLEtBQUFpZSxNQXRCQSxTQUFBNC9FLEVBQUF6NUYsRUFBQTZaLEVBQUF5aUYsR0FFQXppRixFQUFBeWlGLFlBQUFBLEVBQ0FQLEVBQUF0QyxHQUFBaHVGLGlCQUFBLFNBQUFvTyxFQUFBeWlGLGFBQUFILFNBQUEsSUFHQSxJQUFBSSxFQUFBeEYsRUFBQTBDLEdBS0EsT0FKQXVDLEVBQUFPLEVBQUEsU0FBQTFpRixFQUFBeWlGLFlBQUF6aUYsRUFBQW9pRixlQUNBcGlGLEVBQUEwaUYsY0FBQUEsRUFDQTFpRixFQUFBd2lGLGVBQUEsRUFFQXhpRixFQVdBMmlGLENBQUE1Z0csS0FBQTY5RixVQUFBNzlGLEtBQUFvRSxRQUFBcEUsS0FBQWllLE1BQUFqZSxLQUFBNmdHLGlCQWtDQSxTQUFBQyxJQUNBOWdHLEtBQUFpZSxNQUFBd2lGLGdCQUNBMTRDLHFCQUFBL25ELEtBQUE2Z0csZ0JBQ0E3Z0csS0FBQWllLE9BM0JBNC9FLEVBMkJBNzlGLEtBQUE2OUYsVUEzQkE1L0UsRUEyQkFqZSxLQUFBaWUsTUF6QkFraUYsRUFBQXRDLEdBQUE5OEUsb0JBQUEsU0FBQTlDLEVBQUF5aUYsYUFHQXppRixFQUFBb2lGLGNBQUFuakQsUUFBQSxTQUFBeDRDLEdBQ0FBLEVBQUFxYyxvQkFBQSxTQUFBOUMsRUFBQXlpRixlQUlBemlGLEVBQUF5aUYsWUFBQSxLQUNBemlGLEVBQUFvaUYsaUJBQ0FwaUYsRUFBQTBpRixjQUFBLEtBQ0ExaUYsRUFBQXdpRixlQUFBLEVBQ0F4aUYsSUFkQSxJQUFBNC9FLEVBQUE1L0UsRUFzQ0EsU0FBQXJZLEVBQUFxVSxHQUNBLE1BQUEsS0FBQUEsSUFBQXBVLE1BQUFDLFdBQUFtVSxLQUFBd2EsU0FBQXhhLEdBV0EsU0FBQThtRixFQUFBNThDLEVBQUE5d0IsR0FDQWp6QixPQUFBNk4sS0FBQW9sQixHQUFBNnBCLFFBQUEsU0FBQW43QixHQUNBLElBQUF1QyxFQUFBLElBRUEsS0FBQSxRQUFBLFNBQUEsTUFBQSxRQUFBLFNBQUEsUUFBQTdqQixRQUFBc2hCLElBQUFuYyxFQUFBeXRCLEVBQUF0UixNQUNBdUMsRUFBQSxNQUVBNi9CLEVBQUExZ0MsTUFBQTFCLEdBQUFzUixFQUFBdFIsR0FBQXVDLElBdUxBLFNBQUEwOEUsR0FBQXJCLEVBQUFzQixFQUFBQyxHQUNBLElBQUFDLEVBQUE5d0YsRUFBQXN2RixFQUFBLFNBQUFsQixHQUVBLE9BREFBLEVBQUFwNkYsT0FDQTQ4RixJQUdBRyxJQUFBRCxHQUFBeEIsRUFBQUssS0FBQSxTQUFBdkMsR0FDQSxPQUFBQSxFQUFBcDVGLE9BQUE2OEYsR0FBQXpELEVBQUFub0YsU0FBQW1vRixFQUFBenBFLE1BQUFtdEUsRUFBQW50RSxRQUdBLElBQUFvdEUsRUFBQSxDQUNBLElBQUFDLEVBQUEsSUFBQUosRUFBQSxJQUNBSyxFQUFBLElBQUFKLEVBQUEsSUFDQTNnRixRQUFBQyxLQUFBOGdGLEVBQUEsNEJBQUFELEVBQUEsNERBQUFBLEVBQUEsS0FFQSxPQUFBRCxFQW9JQSxJQUFBRyxJQUFBLGFBQUEsT0FBQSxXQUFBLFlBQUEsTUFBQSxVQUFBLGNBQUEsUUFBQSxZQUFBLGFBQUEsU0FBQSxlQUFBLFdBQUEsT0FBQSxjQUdBQyxHQUFBRCxHQUFBamhHLE1BQUEsR0FZQSxTQUFBbWhHLEdBQUEzSixHQUNBLElBQUFsbkQsRUFBQWx0QyxVQUFBZixPQUFBLFFBQUFxQyxJQUFBdEIsVUFBQSxJQUFBQSxVQUFBLEdBRUF5WCxFQUFBcW1GLEdBQUEvZ0csUUFBQXEzRixHQUNBNTNGLEVBQUFzaEcsR0FBQWxoRyxNQUFBNmEsRUFBQSxHQUFBNWEsT0FBQWloRyxHQUFBbGhHLE1BQUEsRUFBQTZhLElBQ0EsT0FBQXkxQixFQUFBMXdDLEVBQUE2YixVQUFBN2IsRUFHQSxJQUFBd2hHLElBQ0FDLEtBQUEsT0FDQUMsVUFBQSxZQUNBQyxpQkFBQSxvQkEwTEEsU0FBQUMsR0FBQXo2RCxFQUFBKzNELEVBQUFGLEVBQUE2QyxHQUNBLElBQUFqRixHQUFBLEVBQUEsR0FLQWtGLEdBQUEsS0FBQSxRQUFBLFFBQUF2aEcsUUFBQXNoRyxHQUlBRSxFQUFBNTZELEVBQUE1L0IsTUFBQSxXQUFBbkUsSUFBQSxTQUFBNCtGLEdBQ0EsT0FBQUEsRUFBQTU3RixTQUtBNjdGLEVBQUFGLEVBQUF4aEcsUUFBQTRQLEVBQUE0eEYsRUFBQSxTQUFBQyxHQUNBLE9BQUEsSUFBQUEsRUFBQXJ4QyxPQUFBLFdBR0FveEMsRUFBQUUsS0FBQSxJQUFBRixFQUFBRSxHQUFBMWhHLFFBQUEsTUFDQThmLFFBQUFDLEtBQUEsZ0ZBS0EsSUFBQTRoRixFQUFBLGNBQ0F0UCxHQUFBLElBQUFxUCxHQUFBRixFQUFBM2hHLE1BQUEsRUFBQTZoRyxHQUFBNWhHLFFBQUEwaEcsRUFBQUUsR0FBQTE2RixNQUFBMjZGLEdBQUEsTUFBQUgsRUFBQUUsR0FBQTE2RixNQUFBMjZGLEdBQUEsSUFBQTdoRyxPQUFBMGhHLEVBQUEzaEcsTUFBQTZoRyxFQUFBLE1BQUFGLEdBcUNBLE9BbENBblAsRUFBQUEsRUFBQXh2RixJQUFBLFNBQUErK0YsRUFBQWxuRixHQUVBLElBQUFxa0YsR0FBQSxJQUFBcmtGLEdBQUE2bUYsRUFBQUEsR0FBQSxTQUFBLFFBQ0FNLEdBQUEsRUFDQSxPQUFBRCxFQUdBRSxPQUFBLFNBQUFwNUYsRUFBQUMsR0FDQSxNQUFBLEtBQUFELEVBQUFBLEVBQUF4RyxPQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUFsQyxRQUFBMkksSUFDQUQsRUFBQUEsRUFBQXhHLE9BQUEsR0FBQXlHLEVBQ0FrNUYsR0FBQSxFQUNBbjVGLEdBQ0FtNUYsR0FDQW41RixFQUFBQSxFQUFBeEcsT0FBQSxJQUFBeUcsRUFDQWs1RixHQUFBLEVBQ0FuNUYsR0FFQUEsRUFBQTVJLE9BQUE2SSxRQUlBOUYsSUFBQSxTQUFBZzZDLEdBQ0EsT0F4R0EsU0FBQUEsRUFBQWtpRCxFQUFBSixFQUFBRixHQUVBLElBQUF6M0YsRUFBQTYxQyxFQUFBMXdDLE1BQUEsNkJBQ0E1RixHQUFBUyxFQUFBLEdBQ0E2YyxFQUFBN2MsRUFBQSxHQUdBLElBQUFULEVBQ0EsT0FBQXMyQyxFQUdBLEdBQUEsSUFBQWg1QixFQUFBN2pCLFFBQUEsS0FBQSxDQUNBLElBQUEwakQsT0FBQSxFQUNBLE9BQUE3L0IsR0FDQSxJQUFBLEtBQ0E2L0IsRUFBQWk3QyxFQUNBLE1BQ0EsSUFBQSxJQUNBLElBQUEsS0FDQSxRQUNBajdDLEVBQUErNkMsRUFJQSxPQURBckMsRUFBQTE0QyxHQUNBcTdDLEdBQUEsSUFBQXg0RixFQUNBLEdBQUEsT0FBQXNkLEdBQUEsT0FBQUEsRUFRQSxPQUxBLE9BQUFBLEVBQ0FwZixLQUFBK3RCLElBQUFyekIsU0FBQTJQLGdCQUFBczVDLGFBQUE5b0QsT0FBQSs4QyxhQUFBLEdBRUE1M0MsS0FBQSt0QixJQUFBcnpCLFNBQUEyUCxnQkFBQXd0QyxZQUFBaDlDLE9BQUF1aUQsWUFBQSxJQUVBLElBQUF0N0MsRUFJQSxPQUFBQSxFQW1FQXc3RixDQUFBbGxELEVBQUFraUQsRUFBQUosRUFBQUYsUUFLQWhpRCxRQUFBLFNBQUFtbEQsRUFBQWxuRixHQUNBa25GLEVBQUFubEQsUUFBQSxTQUFBZ2xELEVBQUFPLEdBQ0E3OEYsRUFBQXM4RixLQUNBcEYsRUFBQTNoRixJQUFBK21GLEdBQUEsTUFBQUcsRUFBQUksRUFBQSxJQUFBLEVBQUEsUUFJQTNGLEVBdU5BLElBa1ZBNEYsSUFLQTVLLFVBQUEsU0FNQTJJLGVBQUEsRUFPQWtDLGlCQUFBLEVBUUFDLFNBQUEsYUFVQUMsU0FBQSxhQU9BbEQsV0FwWEF0eEYsT0FFQTJsQixNQUFBLElBRUExZSxTQUFBLEVBRUF2VCxHQTlIQSxTQUFBK2YsR0FDQSxJQUFBZzJFLEVBQUFoMkUsRUFBQWcyRSxVQUNBaUssRUFBQWpLLEVBQUFyd0YsTUFBQSxLQUFBLEdBQ0FxN0YsRUFBQWhMLEVBQUFyd0YsTUFBQSxLQUFBLEdBR0EsR0FBQXE3RixFQUFBLENBQ0EsSUFBQUMsRUFBQWpoRixFQUFBZzdFLFFBQ0FlLEVBQUFrRixFQUFBbEYsVUFDQXRELEVBQUF3SSxFQUFBeEksT0FFQXlJLEdBQUEsS0FBQSxTQUFBLE9BQUF2aUcsUUFBQXNoRyxHQUNBa0IsRUFBQUQsRUFBQSxPQUFBLE1BQ0F4RCxFQUFBd0QsRUFBQSxRQUFBLFNBRUFFLEdBQ0FwdkYsTUFBQTZvRixLQUFBc0csRUFBQXBGLEVBQUFvRixJQUNBai9GLElBQUEyNEYsS0FBQXNHLEVBQUFwRixFQUFBb0YsR0FBQXBGLEVBQUEyQixHQUFBakYsRUFBQWlGLEtBR0ExOUUsRUFBQWc3RSxRQUFBdkMsT0FBQXFDLEtBQUFyQyxFQUFBMkksRUFBQUosSUFHQSxPQUFBaGhGLElBZ0pBdWxCLFFBRUFyVCxNQUFBLElBRUExZSxTQUFBLEVBRUF2VCxHQXpRQSxTQUFBK2YsRUFBQTI4RSxHQUNBLElBQUFwM0QsRUFBQW8zRCxFQUFBcDNELE9BQ0F5d0QsRUFBQWgyRSxFQUFBZzJFLFVBQ0FpTCxFQUFBamhGLEVBQUFnN0UsUUFDQXZDLEVBQUF3SSxFQUFBeEksT0FDQXNELEVBQUFrRixFQUFBbEYsVUFFQWtFLEVBQUFqSyxFQUFBcndGLE1BQUEsS0FBQSxHQUVBcTFGLE9BQUEsRUFzQkEsT0FwQkFBLEVBREFsM0YsR0FBQXloQyxLQUNBQSxFQUFBLEdBRUF5NkQsR0FBQXo2RCxFQUFBa3pELEVBQUFzRCxFQUFBa0UsR0FHQSxTQUFBQSxHQUNBeEgsRUFBQTNxRixLQUFBa3RGLEVBQUEsR0FDQXZDLEVBQUEzbEUsTUFBQWtvRSxFQUFBLElBQ0EsVUFBQWlGLEdBQ0F4SCxFQUFBM3FGLEtBQUFrdEYsRUFBQSxHQUNBdkMsRUFBQTNsRSxNQUFBa29FLEVBQUEsSUFDQSxRQUFBaUYsR0FDQXhILEVBQUEzbEUsTUFBQWtvRSxFQUFBLEdBQ0F2QyxFQUFBM3FGLEtBQUFrdEYsRUFBQSxJQUNBLFdBQUFpRixJQUNBeEgsRUFBQTNsRSxNQUFBa29FLEVBQUEsR0FDQXZDLEVBQUEzcUYsS0FBQWt0RixFQUFBLElBR0FoN0UsRUFBQXk0RSxPQUFBQSxFQUNBejRFLEdBOE9BdWxCLE9BQUEsR0FvQkE4N0QsaUJBRUFudkUsTUFBQSxJQUVBMWUsU0FBQSxFQUVBdlQsR0E5UEEsU0FBQStmLEVBQUExZCxHQUNBLElBQUEwNUYsRUFBQTE1RixFQUFBMDVGLG1CQUFBekMsRUFBQXY1RSxFQUFBcThCLFNBQUFvOEMsUUFLQXo0RSxFQUFBcThCLFNBQUEwL0MsWUFBQUMsSUFDQUEsRUFBQXpDLEVBQUF5QyxJQUdBLElBQUFDLEVBQUFILEVBQUE5N0UsRUFBQXE4QixTQUFBbzhDLE9BQUF6NEUsRUFBQXE4QixTQUFBMC9DLFVBQUF6NUYsRUFBQTB3QixRQUFBZ3BFLEdBQ0ExNUYsRUFBQTI1RixXQUFBQSxFQUVBLElBQUEvcEUsRUFBQTV2QixFQUFBZy9GLFNBQ0E3SSxFQUFBejRFLEVBQUFnN0UsUUFBQXZDLE9BRUFubkYsR0FDQWl3RixRQUFBLFNBQUF2TCxHQUNBLElBQUE5d0YsRUFBQXV6RixFQUFBekMsR0FJQSxPQUhBeUMsRUFBQXpDLEdBQUFpRyxFQUFBakcsS0FBQTF6RixFQUFBay9GLHNCQUNBdDhGLEVBQUE5QixLQUFBK3RCLElBQUFzbkUsRUFBQXpDLEdBQUFpRyxFQUFBakcsS0FFQTZFLEtBQUE3RSxFQUFBOXdGLElBRUF1OEYsVUFBQSxTQUFBekwsR0FDQSxJQUFBd0gsRUFBQSxVQUFBeEgsRUFBQSxPQUFBLE1BQ0E5d0YsRUFBQXV6RixFQUFBK0UsR0FJQSxPQUhBL0UsRUFBQXpDLEdBQUFpRyxFQUFBakcsS0FBQTF6RixFQUFBay9GLHNCQUNBdDhGLEVBQUE5QixLQUFBZzhDLElBQUFxNUMsRUFBQStFLEdBQUF2QixFQUFBakcsSUFBQSxVQUFBQSxFQUFBeUMsRUFBQXZwRSxNQUFBdXBFLEVBQUFyakUsVUFFQXlsRSxLQUFBMkMsRUFBQXQ0RixLQVdBLE9BUEFndEIsRUFBQWtwQixRQUFBLFNBQUE0NkMsR0FDQSxJQUFBbUwsR0FBQSxLQUFBLE9BQUEsT0FBQXhpRyxRQUFBcTNGLEdBQUEsVUFBQSxZQUNBeUMsRUFBQXFDLEtBQUFyQyxFQUFBbm5GLEVBQUE2dkYsR0FBQW5MLE1BR0FoMkUsRUFBQWc3RSxRQUFBdkMsT0FBQUEsRUFFQXo0RSxHQTJOQXNoRixVQUFBLE9BQUEsUUFBQSxNQUFBLFVBT0F0dUUsUUFBQSxFQU1BZ3BFLGtCQUFBLGdCQVlBMEYsY0FFQXh2RSxNQUFBLElBRUExZSxTQUFBLEVBRUF2VCxHQTllQSxTQUFBK2YsR0FDQSxJQUFBaWhGLEVBQUFqaEYsRUFBQWc3RSxRQUNBdkMsRUFBQXdJLEVBQUF4SSxPQUNBc0QsRUFBQWtGLEVBQUFsRixVQUVBL0YsRUFBQWgyRSxFQUFBZzJFLFVBQUFyd0YsTUFBQSxLQUFBLEdBQ0FvbUMsRUFBQTNvQyxLQUFBMm9DLE1BQ0FtMUQsR0FBQSxLQUFBLE1BQUEsVUFBQXZpRyxRQUFBcTNGLEdBQ0FtTCxFQUFBRCxFQUFBLFFBQUEsU0FDQVMsRUFBQVQsRUFBQSxPQUFBLE1BQ0F4RCxFQUFBd0QsRUFBQSxRQUFBLFNBU0EsT0FQQXpJLEVBQUEwSSxHQUFBcDFELEVBQUFnd0QsRUFBQTRGLE1BQ0EzaEYsRUFBQWc3RSxRQUFBdkMsT0FBQWtKLEdBQUE1MUQsRUFBQWd3RCxFQUFBNEYsSUFBQWxKLEVBQUFpRixJQUVBakYsRUFBQWtKLEdBQUE1MUQsRUFBQWd3RCxFQUFBb0YsTUFDQW5oRixFQUFBZzdFLFFBQUF2QyxPQUFBa0osR0FBQTUxRCxFQUFBZ3dELEVBQUFvRixLQUdBbmhGLElBd2VBazJFLE9BRUFoa0UsTUFBQSxJQUVBMWUsU0FBQSxFQUVBdlQsR0F6dkJBLFNBQUErZixFQUFBMWQsR0FDQSxJQUFBcy9GLEVBR0EsSUFBQTFDLEdBQUFsL0UsRUFBQXE4QixTQUFBd2hELFVBQUEsUUFBQSxnQkFDQSxPQUFBNzlFLEVBR0EsSUFBQTZoRixFQUFBdi9GLEVBQUErL0MsUUFHQSxHQUFBLGlCQUFBdy9DLEdBSUEsS0FIQUEsRUFBQTdoRixFQUFBcThCLFNBQUFvOEMsT0FBQWpsQixjQUFBcXVCLElBSUEsT0FBQTdoRixPQUtBLElBQUFBLEVBQUFxOEIsU0FBQW84QyxPQUFBN3hGLFNBQUFpN0YsR0FFQSxPQURBcGpGLFFBQUFDLEtBQUEsaUVBQ0FzQixFQUlBLElBQUFnMkUsRUFBQWgyRSxFQUFBZzJFLFVBQUFyd0YsTUFBQSxLQUFBLEdBQ0FzN0YsRUFBQWpoRixFQUFBZzdFLFFBQ0F2QyxFQUFBd0ksRUFBQXhJLE9BQ0FzRCxFQUFBa0YsRUFBQWxGLFVBRUFtRixHQUFBLEtBQUEsT0FBQSxTQUFBdmlHLFFBQUFxM0YsR0FFQWgwRixFQUFBay9GLEVBQUEsU0FBQSxRQUNBWSxFQUFBWixFQUFBLE1BQUEsT0FDQUMsRUFBQVcsRUFBQWw4RixjQUNBbThGLEVBQUFiLEVBQUEsT0FBQSxNQUNBUyxFQUFBVCxFQUFBLFNBQUEsUUFDQWMsRUFBQWhGLEVBQUE2RSxHQUFBNy9GLEdBUUErNUYsRUFBQTRGLEdBQUFLLEVBQUF2SixFQUFBMEksS0FDQW5oRixFQUFBZzdFLFFBQUF2QyxPQUFBMEksSUFBQTFJLEVBQUEwSSxJQUFBcEYsRUFBQTRGLEdBQUFLLElBR0FqRyxFQUFBb0YsR0FBQWEsRUFBQXZKLEVBQUFrSixLQUNBM2hGLEVBQUFnN0UsUUFBQXZDLE9BQUEwSSxJQUFBcEYsRUFBQW9GLEdBQUFhLEVBQUF2SixFQUFBa0osSUFFQTNoRixFQUFBZzdFLFFBQUF2QyxPQUFBc0MsRUFBQS82RSxFQUFBZzdFLFFBQUF2QyxRQUdBLElBQUF3SixFQUFBbEcsRUFBQW9GLEdBQUFwRixFQUFBLzVGLEdBQUEsRUFBQWdnRyxFQUFBLEVBSUFuZ0YsRUFBQXMzRSxFQUFBbjVFLEVBQUFxOEIsU0FBQW84QyxRQUNBeUosRUFBQWwrRixXQUFBNmQsRUFBQSxTQUFBaWdGLEdBQUEsSUFDQUssRUFBQW4rRixXQUFBNmQsRUFBQSxTQUFBaWdGLEVBQUEsU0FBQSxJQUNBTSxFQUFBSCxFQUFBamlGLEVBQUFnN0UsUUFBQXZDLE9BQUEwSSxHQUFBZSxFQUFBQyxFQVFBLE9BTEFDLEVBQUFoL0YsS0FBQSt0QixJQUFBL3RCLEtBQUFnOEMsSUFBQXE1QyxFQUFBejJGLEdBQUFnZ0csRUFBQUksR0FBQSxHQUVBcGlGLEVBQUE2aEYsYUFBQUEsRUFDQTdoRixFQUFBZzdFLFFBQUE5RSxPQUFBMEwsS0FBQS9HLEVBQUErRyxFQUFBVCxFQUFBLzlGLEtBQUF1NkMsTUFBQXlrRCxJQUFBdkgsRUFBQStHLEVBQUFHLEVBQUEsSUFBQUgsR0FFQTVoRixHQW1yQkFxaUMsUUFBQSxhQWNBMjBDLE1BRUE5a0UsTUFBQSxJQUVBMWUsU0FBQSxFQUVBdlQsR0FqbkJBLFNBQUErZixFQUFBMWQsR0FFQSxHQUFBMDdGLEVBQUFoK0UsRUFBQXE4QixTQUFBd2hELFVBQUEsU0FDQSxPQUFBNzlFLEVBR0EsR0FBQUEsRUFBQXFpRixTQUFBcmlGLEVBQUFnMkUsWUFBQWgyRSxFQUFBc2lGLGtCQUVBLE9BQUF0aUYsRUFHQSxJQUFBaThFLEVBQUFILEVBQUE5N0UsRUFBQXE4QixTQUFBbzhDLE9BQUF6NEUsRUFBQXE4QixTQUFBMC9DLFVBQUF6NUYsRUFBQTB3QixRQUFBMXdCLEVBQUEwNUYsbUJBRUFoRyxFQUFBaDJFLEVBQUFnMkUsVUFBQXJ3RixNQUFBLEtBQUEsR0FDQTQ4RixFQUFBckYsRUFBQWxILEdBQ0FoWixFQUFBaDlELEVBQUFnMkUsVUFBQXJ3RixNQUFBLEtBQUEsSUFBQSxHQUVBNjhGLEtBRUEsT0FBQWxnRyxFQUFBbWdHLFVBQ0EsS0FBQTdDLEdBQUFDLEtBQ0EyQyxHQUFBeE0sRUFBQXVNLEdBQ0EsTUFDQSxLQUFBM0MsR0FBQUUsVUFDQTBDLEVBQUE3QyxHQUFBM0osR0FDQSxNQUNBLEtBQUE0SixHQUFBRyxpQkFDQXlDLEVBQUE3QyxHQUFBM0osR0FBQSxHQUNBLE1BQ0EsUUFDQXdNLEVBQUFsZ0csRUFBQW1nRyxTQWtEQSxPQS9DQUQsRUFBQXBuRCxRQUFBLFNBQUFybkIsRUFBQTFhLEdBQ0EsR0FBQTI4RSxJQUFBamlFLEdBQUF5dUUsRUFBQTNoRyxTQUFBd1ksRUFBQSxFQUNBLE9BQUEyRyxFQUdBZzJFLEVBQUFoMkUsRUFBQWcyRSxVQUFBcndGLE1BQUEsS0FBQSxHQUNBNDhGLEVBQUFyRixFQUFBbEgsR0FFQSxJQUFBc0gsRUFBQXQ5RSxFQUFBZzdFLFFBQUF2QyxPQUNBaUssRUFBQTFpRixFQUFBZzdFLFFBQUFlLFVBR0Fod0QsRUFBQTNvQyxLQUFBMm9DLE1BQ0E0MkQsRUFBQSxTQUFBM00sR0FBQWpxRCxFQUFBdXhELEVBQUExckQsT0FBQTdGLEVBQUEyMkQsRUFBQTV2RSxPQUFBLFVBQUFrakUsR0FBQWpxRCxFQUFBdXhELEVBQUF4cUUsTUFBQWlaLEVBQUEyMkQsRUFBQTl3RCxRQUFBLFFBQUFva0QsR0FBQWpxRCxFQUFBdXhELEVBQUF6ckQsUUFBQTlGLEVBQUEyMkQsRUFBQTUwRixNQUFBLFdBQUFrb0YsR0FBQWpxRCxFQUFBdXhELEVBQUF4dkYsS0FBQWkrQixFQUFBMjJELEVBQUE3d0QsUUFFQSt3RCxFQUFBNzJELEVBQUF1eEQsRUFBQXhxRSxNQUFBaVosRUFBQWt3RCxFQUFBbnBFLE1BQ0ErdkUsRUFBQTkyRCxFQUFBdXhELEVBQUExckQsT0FBQTdGLEVBQUFrd0QsRUFBQXJxRCxPQUNBa3hELEVBQUEvMkQsRUFBQXV4RCxFQUFBeHZGLEtBQUFpK0IsRUFBQWt3RCxFQUFBbnVGLEtBQ0FpMUYsRUFBQWgzRCxFQUFBdXhELEVBQUF6ckQsUUFBQTlGLEVBQUFrd0QsRUFBQXBxRCxRQUVBbXhELEVBQUEsU0FBQWhOLEdBQUE0TSxHQUFBLFVBQUE1TSxHQUFBNk0sR0FBQSxRQUFBN00sR0FBQThNLEdBQUEsV0FBQTlNLEdBQUErTSxFQUdBN0IsR0FBQSxLQUFBLE1BQUEsVUFBQXZpRyxRQUFBcTNGLEdBQ0FpTixJQUFBM2dHLEVBQUE0Z0csaUJBQUFoQyxHQUFBLFVBQUFsa0IsR0FBQTRsQixHQUFBMUIsR0FBQSxRQUFBbGtCLEdBQUE2bEIsSUFBQTNCLEdBQUEsVUFBQWxrQixHQUFBOGxCLElBQUE1QixHQUFBLFFBQUFsa0IsR0FBQStsQixJQUVBSixHQUFBSyxHQUFBQyxLQUVBampGLEVBQUFxaUYsU0FBQSxHQUVBTSxHQUFBSyxLQUNBaE4sRUFBQXdNLEVBQUFucEYsRUFBQSxJQUdBNHBGLElBQ0FqbUIsRUEvSUEsU0FEQUEsRUFnSkFBLEdBOUlBLFFBQ0EsVUFBQUEsRUFDQSxNQUVBQSxHQTZJQWg5RCxFQUFBZzJFLFVBQUFBLEdBQUFoWixFQUFBLElBQUFBLEVBQUEsSUFJQWg5RCxFQUFBZzdFLFFBQUF2QyxPQUFBcUMsS0FBQTk2RSxFQUFBZzdFLFFBQUF2QyxPQUFBMEUsRUFBQW45RSxFQUFBcThCLFNBQUFvOEMsT0FBQXo0RSxFQUFBZzdFLFFBQUFlLFVBQUEvN0UsRUFBQWcyRSxZQUVBaDJFLEVBQUE0OUUsRUFBQTU5RSxFQUFBcThCLFNBQUF3aEQsVUFBQTc5RSxFQUFBLFNBekpBLElBQUFnOUQsSUE0SkFoOUQsR0F3aUJBeWlGLFNBQUEsT0FLQXp2RSxRQUFBLEVBT0FncEUsa0JBQUEsWUFVQW1ILE9BRUFqeEUsTUFBQSxJQUVBMWUsU0FBQSxFQUVBdlQsR0FyUEEsU0FBQStmLEdBQ0EsSUFBQWcyRSxFQUFBaDJFLEVBQUFnMkUsVUFDQWlLLEVBQUFqSyxFQUFBcndGLE1BQUEsS0FBQSxHQUNBczdGLEVBQUFqaEYsRUFBQWc3RSxRQUNBdkMsRUFBQXdJLEVBQUF4SSxPQUNBc0QsRUFBQWtGLEVBQUFsRixVQUVBd0IsR0FBQSxLQUFBLE9BQUEsU0FBQTUrRixRQUFBc2hHLEdBRUFtRCxHQUFBLEtBQUEsTUFBQSxRQUFBemtHLFFBQUFzaEcsR0FPQSxPQUxBeEgsRUFBQThFLEVBQUEsT0FBQSxPQUFBeEIsRUFBQWtFLElBQUFtRCxFQUFBM0ssRUFBQThFLEVBQUEsUUFBQSxVQUFBLEdBRUF2OUUsRUFBQWcyRSxVQUFBa0gsRUFBQWxILEdBQ0FoMkUsRUFBQWc3RSxRQUFBdkMsT0FBQXNDLEVBQUF0QyxHQUVBejRFLElBa1BBaUQsTUFFQWlQLE1BQUEsSUFFQTFlLFNBQUEsRUFFQXZULEdBOVNBLFNBQUErZixHQUNBLElBQUFrL0UsR0FBQWwvRSxFQUFBcThCLFNBQUF3aEQsVUFBQSxPQUFBLG1CQUNBLE9BQUE3OUUsRUFHQSxJQUFBdThFLEVBQUF2OEUsRUFBQWc3RSxRQUFBZSxVQUNBc0gsRUFBQTkwRixFQUFBeVIsRUFBQXE4QixTQUFBd2hELFVBQUEsU0FBQWxDLEdBQ0EsTUFBQSxvQkFBQUEsRUFBQXA1RixPQUNBMDVGLFdBRUEsR0FBQU0sRUFBQTFxRCxPQUFBd3hELEVBQUF2MUYsS0FBQXl1RixFQUFBenBFLEtBQUF1d0UsRUFBQXp4RCxPQUFBMnFELEVBQUF6dUYsSUFBQXUxRixFQUFBeHhELFFBQUEwcUQsRUFBQTNxRCxNQUFBeXhELEVBQUF2d0UsS0FBQSxDQUVBLElBQUEsSUFBQTlTLEVBQUFpRCxLQUNBLE9BQUFqRCxFQUdBQSxFQUFBaUQsTUFBQSxFQUNBakQsRUFBQW5ZLFdBQUEsdUJBQUEsT0FDQSxDQUVBLElBQUEsSUFBQW1ZLEVBQUFpRCxLQUNBLE9BQUFqRCxFQUdBQSxFQUFBaUQsTUFBQSxFQUNBakQsRUFBQW5ZLFdBQUEsd0JBQUEsRUFHQSxPQUFBbVksSUFvU0FzakYsY0FFQXB4RSxNQUFBLElBRUExZSxTQUFBLEVBRUF2VCxHQXY5QkEsU0FBQStmLEVBQUExZCxHQUNBLElBQUEwdkMsRUFBQTF2QyxFQUFBMHZDLEVBQ0FDLEVBQUEzdkMsRUFBQTJ2QyxFQUNBd21ELEVBQUF6NEUsRUFBQWc3RSxRQUFBdkMsT0FJQThLLEVBQUFoMUYsRUFBQXlSLEVBQUFxOEIsU0FBQXdoRCxVQUFBLFNBQUFsQyxHQUNBLE1BQUEsZUFBQUEsRUFBQXA1RixPQUNBaWhHLHFCQUNBdGdHLElBQUFxZ0csR0FDQTlrRixRQUFBQyxLQUFBLGlJQUVBLElBQUE4a0YsT0FBQXRnRyxJQUFBcWdHLEVBQUFBLEVBQUFqaEcsRUFBQWtoRyxnQkFHQUMsRUFBQTV3RSxFQURBMG1FLEVBQUF2NUUsRUFBQXE4QixTQUFBbzhDLFNBSUFsbkUsR0FDQWpCLFNBQUFtb0UsRUFBQW5vRSxVQUlBMHFFLEdBQ0Fsb0UsS0FBQTF2QixLQUFBMm9DLE1BQUEwc0QsRUFBQTNsRSxNQUNBaGxCLElBQUExSyxLQUFBMm9DLE1BQUEwc0QsRUFBQTNxRixLQUNBK2pDLE9BQUF6dUMsS0FBQTJvQyxNQUFBMHNELEVBQUE1bUQsUUFDQUQsTUFBQXh1QyxLQUFBMm9DLE1BQUEwc0QsRUFBQTdtRCxRQUdBd29ELEVBQUEsV0FBQXBvRCxFQUFBLE1BQUEsU0FDQXFvRCxFQUFBLFVBQUFwb0QsRUFBQSxPQUFBLFFBS0F5eEQsRUFBQXZGLEVBQUEsYUFXQXJyRSxPQUFBLEVBQ0FobEIsT0FBQSxFQVdBLEdBVEFBLEVBREEsV0FBQXNzRixHQUNBcUosRUFBQXJ1RSxPQUFBNGxFLEVBQUFucEQsT0FFQW1wRCxFQUFBbHRGLElBR0FnbEIsRUFEQSxVQUFBdW5FLEdBQ0FvSixFQUFBdjBFLE1BQUE4ckUsRUFBQXBwRCxNQUVBb3BELEVBQUFsb0UsS0FFQTB3RSxHQUFBRSxFQUNBbnlFLEVBQUFteUUsR0FBQSxlQUFBNXdFLEVBQUEsT0FBQWhsQixFQUFBLFNBQ0F5akIsRUFBQTZvRSxHQUFBLEVBQ0E3b0UsRUFBQThvRSxHQUFBLEVBQ0E5b0UsRUFBQW95RSxXQUFBLGdCQUNBLENBRUEsSUFBQUMsRUFBQSxXQUFBeEosR0FBQSxFQUFBLEVBQ0F5SixFQUFBLFVBQUF4SixHQUFBLEVBQUEsRUFDQTlvRSxFQUFBNm9FLEdBQUF0c0YsRUFBQTgxRixFQUNBcnlFLEVBQUE4b0UsR0FBQXZuRSxFQUFBK3dFLEVBQ0F0eUUsRUFBQW95RSxXQUFBdkosRUFBQSxLQUFBQyxFQUlBLElBQUF4eUYsR0FDQWk4RixjQUFBOWpGLEVBQUFnMkUsV0FRQSxPQUpBaDJFLEVBQUFuWSxXQUFBaXpGLEtBQUFqekYsRUFBQW1ZLEVBQUFuWSxZQUNBbVksRUFBQXVSLE9BQUF1cEUsS0FBQXZwRSxFQUFBdlIsRUFBQXVSLFFBQ0F2UixFQUFBK2pGLFlBQUFqSixLQUFBOTZFLEVBQUFnN0UsUUFBQTlFLE1BQUFsMkUsRUFBQStqRixhQUVBL2pGLEdBeTRCQXdqRixpQkFBQSxFQU1BeHhELEVBQUEsU0FNQUMsRUFBQSxTQWtCQSt4RCxZQUVBOXhFLE1BQUEsSUFFQTFlLFNBQUEsRUFFQXZULEdBdmpDQSxTQUFBK2YsR0FLQWkvRSxFQUFBai9FLEVBQUFxOEIsU0FBQW84QyxPQUFBejRFLEVBQUF1UixRQXpCQTh3QixFQTZCQXJpQyxFQUFBcThCLFNBQUFvOEMsT0E3QkE1d0YsRUE2QkFtWSxFQUFBblksV0E1QkF2SixPQUFBNk4sS0FBQXRFLEdBQUF1ekMsUUFBQSxTQUFBbjdCLElBRUEsSUFEQXBZLEVBQUFvWSxHQUVBb2lDLEVBQUF6MkMsYUFBQXFVLEVBQUFwWSxFQUFBb1ksSUFFQW9pQyxFQUFBbjJDLGdCQUFBK1QsS0FOQSxJQUFBb2lDLEVBQUF4NkMsRUFvQ0EsT0FKQW1ZLEVBQUE2aEYsY0FBQXZqRyxPQUFBNk4sS0FBQTZULEVBQUErakYsYUFBQWxqRyxRQUNBbytGLEVBQUFqL0UsRUFBQTZoRixhQUFBN2hGLEVBQUErakYsYUFHQS9qRixHQXlpQ0Fpa0YsT0E1aENBLFNBQUFsSSxFQUFBdEQsRUFBQW4yRixFQUFBNGhHLEVBQUEvbkYsR0FFQSxJQUFBaWhGLEVBQUFMLEVBQUE1Z0YsRUFBQXM4RSxFQUFBc0QsR0FLQS9GLEVBQUFzRyxFQUFBaDZGLEVBQUEwekYsVUFBQW9ILEVBQUEzRSxFQUFBc0QsRUFBQXo1RixFQUFBdTdGLFVBQUE3RyxLQUFBZ0Ysa0JBQUExNUYsRUFBQXU3RixVQUFBN0csS0FBQWhrRSxTQVFBLE9BTkF5bEUsRUFBQTdzRixhQUFBLGNBQUFvcUYsR0FJQWlKLEVBQUF4RyxHQUFBbm9FLFNBQUEsYUFFQWh1QixHQW9oQ0FraEcscUJBQUF0Z0csS0FpR0FpaEcsR0FBQSxXQVNBLFNBQUFBLEVBQUFwSSxFQUFBdEQsR0FDQSxJQUFBMkwsRUFBQWxtRyxLQUVBb0UsRUFBQVYsVUFBQWYsT0FBQSxRQUFBcUMsSUFBQXRCLFVBQUEsR0FBQUEsVUFBQSxNQUNBKzRGLEVBQUF6OEYsS0FBQWltRyxHQUVBam1HLEtBQUE2Z0csZUFBQSxXQUNBLE9BQUFqcUUsc0JBQUFzdkUsRUFBQWpvRCxTQUlBaitDLEtBQUFpK0MsT0FBQXduQyxFQUFBemxGLEtBQUFpK0MsT0FBQXBWLEtBQUE3b0MsT0FHQUEsS0FBQW9FLFFBQUF3NEYsS0FBQXFKLEVBQUF2RCxTQUFBdCtGLEdBR0FwRSxLQUFBaWUsT0FDQWtvRixhQUFBLEVBQ0FDLFdBQUEsRUFDQS9GLGtCQUlBcmdHLEtBQUE2OUYsVUFBQUEsR0FBQUEsRUFBQXA3RixPQUFBbzdGLEVBQUEsR0FBQUEsRUFDQTc5RixLQUFBdTZGLE9BQUFBLEdBQUFBLEVBQUE5M0YsT0FBQTgzRixFQUFBLEdBQUFBLEVBR0F2NkYsS0FBQW9FLFFBQUF1N0YsYUFDQXYvRixPQUFBNk4sS0FBQTJ1RixLQUFBcUosRUFBQXZELFNBQUEvQyxVQUFBdjdGLEVBQUF1N0YsWUFBQXppRCxRQUFBLFNBQUE3NEMsR0FDQTZoRyxFQUFBOWhHLFFBQUF1N0YsVUFBQXQ3RixHQUFBdTRGLEtBQUFxSixFQUFBdkQsU0FBQS9DLFVBQUF0N0YsT0FBQUQsRUFBQXU3RixVQUFBdjdGLEVBQUF1N0YsVUFBQXQ3RixTQUlBckUsS0FBQTIvRixVQUFBdi9GLE9BQUE2TixLQUFBak8sS0FBQW9FLFFBQUF1N0YsV0FBQXI4RixJQUFBLFNBQUFlLEdBQ0EsT0FBQXU0RixHQUNBdjRGLEtBQUFBLEdBQ0E2aEcsRUFBQTloRyxRQUFBdTdGLFVBQUF0N0YsTUFHQUosS0FBQSxTQUFBa0YsRUFBQUMsR0FDQSxPQUFBRCxFQUFBNnFCLE1BQUE1cUIsRUFBQTRxQixRQU9BaDBCLEtBQUEyL0YsVUFBQXppRCxRQUFBLFNBQUE4b0QsR0FDQUEsRUFBQTF3RixTQUFBMVEsRUFBQW9oRyxFQUFBRCxTQUNBQyxFQUFBRCxPQUFBRyxFQUFBckksVUFBQXFJLEVBQUEzTCxPQUFBMkwsRUFBQTloRyxRQUFBNGhHLEVBQUFFLEVBQUFqb0YsU0FLQWplLEtBQUFpK0MsU0FFQSxJQUFBd2lELEVBQUF6Z0csS0FBQW9FLFFBQUFxOEYsY0FDQUEsR0FFQXpnRyxLQUFBd2dHLHVCQUdBeGdHLEtBQUFpZSxNQUFBd2lGLGNBQUFBLEVBb0RBLE9BN0NBL0QsRUFBQXVKLElBQ0E5M0YsSUFBQSxTQUNBbkgsTUFBQSxXQUNBLE9BaC9DQSxXQUVBLElBQUFoSCxLQUFBaWUsTUFBQWtvRixZQUFBLENBSUEsSUFBQXJrRixHQUNBcThCLFNBQUFuK0MsS0FDQXF6QixVQUNBd3lFLGVBQ0FsOEYsY0FDQXc2RixTQUFBLEVBQ0FySCxZQUlBaDdFLEVBQUFnN0UsUUFBQWUsVUFBQWdCLEVBQUE3K0YsS0FBQWllLE1BQUFqZSxLQUFBdTZGLE9BQUF2NkYsS0FBQTY5RixXQUtBLzdFLEVBQUFnMkUsVUFBQXNHLEVBQUFwK0YsS0FBQW9FLFFBQUEwekYsVUFBQWgyRSxFQUFBZzdFLFFBQUFlLFVBQUE3OUYsS0FBQXU2RixPQUFBdjZGLEtBQUE2OUYsVUFBQTc5RixLQUFBb0UsUUFBQXU3RixVQUFBN0csS0FBQWdGLGtCQUFBOTlGLEtBQUFvRSxRQUFBdTdGLFVBQUE3RyxLQUFBaGtFLFNBR0FoVCxFQUFBc2lGLGtCQUFBdGlGLEVBQUFnMkUsVUFHQWgyRSxFQUFBZzdFLFFBQUF2QyxPQUFBMEUsRUFBQWovRixLQUFBdTZGLE9BQUF6NEUsRUFBQWc3RSxRQUFBZSxVQUFBLzdFLEVBQUFnMkUsV0FDQWgyRSxFQUFBZzdFLFFBQUF2QyxPQUFBbm9FLFNBQUEsV0FHQXRRLEVBQUE0OUUsRUFBQTEvRixLQUFBMi9GLFVBQUE3OUUsR0FJQTloQixLQUFBaWUsTUFBQW1vRixVQUlBcG1HLEtBQUFvRSxRQUFBeStGLFNBQUEvZ0YsSUFIQTloQixLQUFBaWUsTUFBQW1vRixXQUFBLEVBQ0FwbUcsS0FBQW9FLFFBQUF3K0YsU0FBQTlnRixNQTI4Q0E5Z0IsS0FBQWhCLFNBR0FtTyxJQUFBLFVBQ0FuSCxNQUFBLFdBQ0EsT0FsNkNBLFdBbUJBLE9BbEJBaEgsS0FBQWllLE1BQUFrb0YsYUFBQSxFQUdBckcsRUFBQTkvRixLQUFBMi9GLFVBQUEsZ0JBQ0EzL0YsS0FBQXU2RixPQUFBdnNGLGdCQUFBLGVBQ0FoTyxLQUFBdTZGLE9BQUE5MkUsTUFBQW1SLEtBQUEsR0FDQTUwQixLQUFBdTZGLE9BQUE5MkUsTUFBQTJPLFNBQUEsR0FDQXB5QixLQUFBdTZGLE9BQUE5MkUsTUFBQTdULElBQUEsR0FDQTVQLEtBQUF1NkYsT0FBQTkyRSxNQUFBdzhFLEVBQUEsY0FBQSxJQUdBamdHLEtBQUE4Z0csd0JBSUE5Z0csS0FBQW9FLFFBQUF1K0YsaUJBQ0EzaUcsS0FBQXU2RixPQUFBNzRGLFdBQUFDLFlBQUEzQixLQUFBdTZGLFFBRUF2NkYsTUErNENBZ0IsS0FBQWhCLFNBR0FtTyxJQUFBLHVCQUNBbkgsTUFBQSxXQUNBLE9BQUF3NUYsRUFBQXgvRixLQUFBaEIsU0FHQW1PLElBQUEsd0JBQ0FuSCxNQUFBLFdBQ0EsT0FBQTg1RixFQUFBOS9GLEtBQUFoQixVQTJCQWltRyxFQTVIQSxHQW1KQUEsR0FBQUksT0FBQSxvQkFBQXRtRyxPQUFBQSxPQUFBUCxRQUFBOG1HLFlBQ0FMLEdBQUExRSxXQUFBQSxHQUNBMEUsR0FBQXZELFNBQUFBLEdBT0EsU0FBQTZELEdBQUFoTSxHQUNBLE9BQUFBLEVBQUE5c0YsYUFBQSxlQUFBckksUUFBQSxNQUFBLElBd0RBLFNBQUFvaEcsR0FBQTlnRyxFQUFBK2dHLEVBQUF6RCxFQUFBMEQsR0FDQSxJQUFBRCxFQUFBOWpHLE9BQUEsTUFBQSxHQXVCQSxPQXBCQXVoQixNQUNBLElBQUF1aUYsRUFBQTlqRyxPQUNBLEdBQUE4akcsRUFBQSxHQUVBekQsRUFBQXlELEVBQUEsR0FBQSxLQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQSxLQUFBQSxFQUFBLEdBR0F6cEQsVUFDQSxJQUFBeXBELEVBQUE5akcsT0FDQStqRyxHQUFBRCxFQUFBLEdBQUEsS0FBQUEsRUFBQSxHQUFBLEtBRUF6RCxFQUNBMEQsRUFBQUQsRUFBQSxHQUFBLFFBQUFBLEVBQUEsR0FBQSxLQUFBQSxFQUFBLEdBQUEsT0FBQUEsRUFBQSxHQUFBLEtBRUFDLEdBQUFELEVBQUEsR0FBQSxPQUFBQSxFQUFBLEdBQUEsS0FBQUEsRUFBQSxHQUFBLE9BQUFBLEVBQUEsR0FBQSxNQU1BL2dHLEdBU0EsU0FBQWloRyxHQUFBanVELEVBQUFzcUQsR0FDQSxJQUFBdHFELEVBQUEsTUFBQSxHQUtBLE9BQUFzcUQsRUFBQXRxRCxHQUhBdXVCLEVBQUEsSUFDQTZnQixFQUFBLEtBRUFwdkMsR0FTQSxTQUFBa3VELEdBQUFyTSxFQUFBdkMsRUFBQWlCLEdBQ0EsSUFBQW5CLEVBQUF5TyxHQUFBaE0sR0FDQXlJLEVBQUEsUUFBQWxMLEdBQUEsV0FBQUEsRUFDQTRPLEVBQUEsVUFBQTVPLEdBQUEsV0FBQUEsRUFFQStPLEVBQUEsU0FBQUMsR0FDQSxJQUFBbDZGLEVBQUFxc0YsRUFBQXJzRixNQUFBazZGLEdBQ0EsT0FBQWw2RixFQUFBQSxFQUFBLEdBQUEsSUFHQW02RixFQUFBLFNBQUFELEdBQ0EsSUFBQWw2RixFQUFBcXNGLEVBQUFyc0YsTUFBQWs2RixHQUNBLE9BQUFsNkYsRUFBQUEsRUFBQSxHQUFBbkYsTUFBQSxLQUFBbkUsSUFBQXdDLGdCQUdBZ2hHLEVBQ0EsMkJBREFBLEVBRUEsdUJBR0FqZ0csR0FDQW0yQyxXQUNBdEUsS0FBQW11RCxFQUFBLG1CQUNBSixRQUFBTSxFQUFBRCxJQUVBNWlGLE9BQ0F3MEIsS0FBQW11RCxFQUFBLGVBQ0FKLFFBQUFNLEVBQUFELEtBSUFFLEVBQUEvTixFQUFBN3pGLFFBQUEwaEcsRUFBQSxZQUFBSCxHQUFBOS9GLEVBQUFtMkMsVUFBQXRFLEtBQUFzcUQsR0FBQSxJQUFBd0QsR0FBQSxZQUFBMy9GLEVBQUFtMkMsVUFBQXlwRCxRQUFBekQsRUFBQTBELEdBQUEsS0FBQXRoRyxRQUFBMGhHLEVBQUEsUUFBQUgsR0FBQTkvRixFQUFBcWQsTUFBQXcwQixLQUFBc3FELEdBQUEsSUFBQXdELEdBQUEsUUFBQTMvRixFQUFBcWQsTUFBQXVpRixRQUFBekQsRUFBQTBELEdBQUEsS0FFQTFPLEVBQUF2MEUsTUFBQXVSLEVBQUEsY0FBQWd5RSxFQW9CQSxTQUFBQyxHQUFBdHlELEdBQ0EsUUFBQUEsRUFBQWpMLEVBQUFpTCxVQUFBLEtBT0EsU0FBQXh4QixHQUFBcGhCLEdBQ0E2MEIsc0JBQUEsV0FDQWhYLFdBQUE3ZCxLQUlBLElBQUE4RSxNQUVBLEdBQUFnd0YsRUFBQSxDQUNBLElBQUF0cUYsR0FBQTI2RixRQUFBMWtHLFVBQ0FxRSxHQUFBMEYsR0FBQTFGLFNBQUEwRixHQUFBbUUsaUJBQUFuRSxHQUFBb0UsdUJBQUFwRSxHQUFBcUUsb0JBQUFyRSxHQUFBdUUsbUJBQUEsU0FBQXV0QixHQUdBLElBRkEsSUFBQXgzQixHQUFBN0csS0FBQUosVUFBQUksS0FBQWdOLGVBQUFjLGlCQUFBdXdCLEdBQ0E3NkIsRUFBQXFELEVBQUFsRSxTQUNBYSxHQUFBLEdBQUFxRCxFQUFBczJDLEtBQUEzNUMsS0FBQXhELE9BQ0EsT0FBQXdELEdBQUEsR0FJQSxJQUFBMmpHLEdBQUF0Z0csR0FRQSxTQUFBcVUsR0FBQWlwQyxFQUFBaWpELEdBV0EsT0FWQUYsUUFBQTFrRyxVQUFBMFksU0FBQSxTQUFBclosR0FFQSxJQURBLElBQUEyTSxFQUFBeE8sS0FDQXdPLEdBQUEsQ0FDQSxHQUFBMjRGLEdBQUFubUcsS0FBQXdOLEVBQUEzTSxHQUNBLE9BQUEyTSxFQUVBQSxFQUFBQSxFQUFBODFDLGlCQUlBdGpELEtBQUFtakQsRUFBQWlqRCxHQVNBLFNBQUFDLEdBQUExeEUsRUFBQXhhLEdBQ0EsT0FBQXJXLE1BQUFDLFFBQUE0d0IsR0FBQUEsRUFBQXhhLEdBQUF3YSxFQVFBLFNBQUEyeEUsR0FBQTk2RixFQUFBOUcsR0FDQThHLEVBQUEwd0MsUUFBQSxTQUFBMXVDLEdBQ0FBLEdBQ0FBLEVBQUFkLGFBQUEsYUFBQWhJLEtBZ0JBLFNBQUE2aEcsR0FBQS82RixFQUFBbXBCLEdBQ0FucEIsRUFBQTB3QyxRQUFBLFNBQUExdUMsR0FDQUEsSUFDQUEsRUFBQWlWLE1BQUF1UixFQUFBLHVCQUFBVyxFQUFBLFFBSUEsSUFBQTZ4RSxHQUFBLFdBQ0EsSUFBQXI1RixLQUNBczVGLEVBQUEsU0FBQTNsRixHQUNBLE9BQUEsU0FBQXNpRCxHQUNBLE9BQUFBLElBQUFqMkQsR0FBQTJULElBNFFBLFNBQUE0bEYsRUFBQTUvRSxHQUNBLElBQUE2L0UsRUFBQTNuRyxLQUlBLEdBRkE0bkcsRUFBQTVtRyxLQUFBaEIsT0FFQUEsS0FBQWllLE1BQUE0bUIsUUFJQSxHQUZBN2tDLEtBQUFvTCxFQUFBK0MsR0FBQTA1RixtQkFBQSxFQUVBN25HLEtBQUFvRSxRQUFBeWMsS0FDQTdnQixLQUFBb0UsUUFBQXljLEtBQUE3ZixLQUFBaEIsS0FBQXU2RixPQUFBdjZGLEtBQUE2a0IsS0FBQWdrQixLQUFBN29DLE1BQUE4bkIsT0FEQSxDQU9BOW5CLEtBQUFvRSxRQUFBbTBGLGVBQUF6QixFQUFBRyxhQUNBajNGLEtBQUFvTCxFQUFBK0MsR0FBQTI1RixzQkE4UEEsV0FDQSxJQUFBQyxFQUFBL25HLEtBRUFBLEtBQUFvTCxFQUFBK0MsR0FBQTI1RixxQkFBQSxTQUFBaGdGLEdBRUEsSUFBQWlnRixFQUFBMzhGLEVBQUErQyxHQUFBNjVGLGtCQUFBLFVBQUFELEVBQUEzOEYsRUFBQStDLEdBQUE2NUYsaUJBQUF0aUcsS0FBQSxDQUVBcWlHLEVBQUEzOEYsRUFBQStDLEdBQUE4NUYsbUJBQUFuZ0YsRUFHQSxJQUFBb2dGLEVBQUF0b0csU0FBQTJQLGdCQUFBdTFCLGFBQUFsbEMsU0FBQStrQixLQUFBbWdCLFlBQ0FxakUsRUFBQWpqRyxLQUFBdTZDLE1BQUFzb0QsRUFBQXhOLE9BQUF6MUQsWUFBQSxHQUNBc2pFLEVBQUFsakcsS0FBQXU2QyxNQUFBc29ELEVBQUF4TixPQUFBeDFELGFBQUEsR0FDQXNDLEVBQUEwZ0UsRUFBQTNqRyxRQUFBaWpDLE9BQ0F0YixFQUFBakUsRUFBQWlFLE1BQ0FDLEVBQUFsRSxFQUFBa0UsTUFJQThyRSxFQUFBaVEsRUFBQTNqRyxRQUFBMHpGLFVBQUExeUYsUUFBQSxNQUFBLElBQ0EyaUcsRUFBQXhOLE9BQUE5c0YsYUFBQSxpQkFDQXFxRixFQUFBeU8sR0FBQXdCLEVBQUF4TixTQUdBLElBQUF6bUQsT0FBQSxFQUNBQyxPQUFBLEVBRUEsT0FBQStqRCxHQUNBLElBQUEsTUFDQWhrRCxFQUFBL25CLEVBQUFvOEUsRUFBQTlnRSxFQUNBME0sRUFBQS9uQixFQUFBLEVBQUFvOEUsRUFDQSxNQUNBLElBQUEsU0FDQXQwRCxFQUFBL25CLEVBQUFvOEUsRUFBQTlnRSxFQUNBME0sRUFBQS9uQixFQUFBLEdBQ0EsTUFDQSxJQUFBLE9BQ0E4bkIsRUFBQS9uQixFQUFBLEVBQUFvOEUsRUFDQXAwRCxFQUFBL25CLEVBQUFvOEUsRUFBQS9nRSxFQUNBLE1BQ0EsSUFBQSxRQUNBeU0sRUFBQS9uQixFQUFBLEVBQ0Fnb0IsRUFBQS9uQixFQUFBbzhFLEVBQUEvZ0UsRUFJQSxJQUFBZ2hFLEVBQUF0OEUsRUE3QkEsRUE2QkFvOEUsRUFBQTlnRSxFQUFBNmdFLEVBQ0FJLEVBQUF2OEUsRUE5QkEsRUE4QkFvOEUsRUFBQTlnRSxFQUFBLEVBR0EsUUFBQXl3RCxHQUFBLFdBQUFBLElBQ0F1USxJQUNBdjBELEVBQUFvMEQsRUFuQ0EsRUFtQ0EsRUFBQUMsR0FHQUcsSUFDQXgwRCxFQXZDQSxJQTJDQWkwRCxFQUFBeE4sT0FBQTkyRSxNQUFBdVIsRUFBQSxjQUFBLGVBQUE4ZSxFQUFBLE9BQUFDLEVBQUEsWUF6VEEveUMsS0FBQWhCLE1BRUFKLFNBQUFpUSxpQkFBQSxZQUFBN1AsS0FBQW9MLEVBQUErQyxHQUFBMjVGLHVCQUdBLElBQUF4dEUsRUFBQXgxQixNQUFBQyxRQUFBL0UsS0FBQW9FLFFBQUFrMkIsT0FBQXQ2QixLQUFBb0UsUUFBQWsyQixNQUFBLEdBQUF0NkIsS0FBQW9FLFFBQUFrMkIsTUFFQUEsRUFDQXQ2QixLQUFBb0wsRUFBQStDLEdBQUFvNkYsWUFBQTNvRixXQUFBLFdBQ0ErbkYsRUFBQTlpRixRQUNBeVYsR0FFQXQ2QixLQUFBNmtCLFFBU0EsU0FBQTJqRixJQUNBLElBQUFDLEVBQUF6b0csS0FJQSxHQUZBNG5HLEVBQUE1bUcsS0FBQWhCLE1BRUFBLEtBQUFpZSxNQUFBNG1CLFFBQUEsQ0FFQTdrQyxLQUFBb0wsRUFBQStDLEdBQUEwNUYsbUJBQUEsRUFFQSxJQUFBdnRFLEVBQUF4MUIsTUFBQUMsUUFBQS9FLEtBQUFvRSxRQUFBazJCLE9BQUF0NkIsS0FBQW9FLFFBQUFrMkIsTUFBQSxHQUFBdDZCLEtBQUFvRSxRQUFBazJCLE1BRUFBLEVBQ0F0NkIsS0FBQW9MLEVBQUErQyxHQUFBdTZGLFlBQUE5b0YsV0FBQSxXQUNBNm9GLEVBQUF4cUYsTUFBQTRtQixTQUNBNGpFLEVBQUExakYsUUFDQXVWLEdBRUF0NkIsS0FBQStrQixRQW9GQSxTQUFBNGpGLElBQ0EsSUFBQUMsRUFBQTVvRyxLQUVBdTZGLEVBQUF2NkYsS0FBQXU2RixPQUNBc0QsRUFBQTc5RixLQUFBNjlGLFVBQ0F6NUYsRUFBQXBFLEtBQUFvRSxRQUdBbzJGLEVBREFGLEVBQUFDLEdBQ0FDLFFBRUF0QixFQUFBOTBGLEVBQUE4MEYsY0FFQTJQLEVBQUEsVUFBQXprRyxFQUFBNDBGLFVBQUF6bUYsRUFBQXFsRixZQUFBcmxGLEVBQUFvbEYsTUFDQUssRUFBQXdDLEVBQUFsbEIsY0FBQXV6QixHQUVBM2YsRUFBQW1SLEdBQ0F2QyxVQUFBMXpGLEVBQUEwekYsV0FDQW9CLE9BQ0F5RyxVQUFBdEYsS0FBQW5CLEVBQUFBLEVBQUF5RyxjQUNBM0gsTUFBQXFDLEdBQ0FsMkMsUUFBQTBrRCxHQUNBM1AsR0FBQUEsRUFBQXlHLFVBQUF6RyxFQUFBeUcsVUFBQTNILFVBQ0FjLEtBQUF1QixHQUNBL2tGLFFBQUFsUixFQUFBMDBGLEtBQ0Foa0UsUUFBQTF3QixFQUFBdXdDLFNBQUEsRUFDQTR2RCxTQUFBbmdHLEVBQUEyMEYsY0FDQUcsR0FBQUEsRUFBQXlHLFVBQUF6RyxFQUFBeUcsVUFBQTdHLFNBQ0F6eEQsT0FBQWd6RCxHQUNBaHpELE9BQUFqakMsRUFBQWlqQyxRQUNBNnhELEdBQUFBLEVBQUF5RyxVQUFBekcsRUFBQXlHLFVBQUF0NEQsYUFFQXU3RCxTQUFBLFdBQ0FwSSxFQUFBLzJFLE1BQUE4aUYsR0FBQWhNLElBQUEwTSxHQUFBN2lHLEVBQUF1d0MsVUFFQXFqRCxHQUFBNXpGLEVBQUE2MEYsZ0JBQ0EyTixHQUFBck0sRUFBQXZDLEVBQUE1ekYsRUFBQTYwRixpQkFHQTRKLFNBQUEsV0FDQSxJQUFBeHZFLEVBQUFtbkUsRUFBQS8yRSxNQUNBNFAsRUFBQXpqQixJQUFBLEdBQ0F5akIsRUFBQXNnQixPQUFBLEdBQ0F0Z0IsRUFBQXVCLEtBQUEsR0FDQXZCLEVBQUFxZ0IsTUFBQSxHQUNBcmdCLEVBQUFrekUsR0FBQWhNLElBQUEwTSxHQUFBN2lHLEVBQUF1d0MsVUFFQXFqRCxHQUFBNXpGLEVBQUE2MEYsZ0JBQ0EyTixHQUFBck0sRUFBQXZDLEVBQUE1ekYsRUFBQTYwRixtQkEyQkEsT0F0QkE2UCxFQUFBOW5HLEtBQUFoQixNQUNBMEUsT0FBQTYxRixFQUNBbDNGLFNBQUEsV0FDQSxJQUFBZ3dCLEVBQUFrbkUsRUFBQTkyRSxNQUNBNFAsRUFBQTJCLEVBQUEsdUJBQUEsS0FFQSxJQUFBK3pFLEVBQUFILEVBQUFJLGVBQUE1a0csUUFBQXkrRixTQUNBK0YsRUFBQUksZUFBQTVrRyxRQUFBeStGLFNBQUEsV0FDQStGLEVBQUFyTyxPQUFBeDFELGFBQ0ExUixFQUFBMkIsRUFBQSx1QkFBQTV3QixFQUFBcTBGLGVBQUEsS0FDQW1RLEVBQUFJLGVBQUE1a0csUUFBQXkrRixTQUFBa0csR0FHQUgsRUFBQUksZUFBQS9xRCxVQUVBNzVDLFNBQ0E2a0csV0FBQSxFQUNBQyxTQUFBLEVBQ0FDLGVBQUEsS0FJQSxJQUFBbEQsR0FBQXBJLEVBQUF0RCxFQUFBclIsR0EyQ0EsU0FBQTBlLElBQ0EsSUFBQW5KLEVBQUF6K0YsS0FBQW9MLEVBQUErQyxHQUNBbzZGLEVBQUE5SixFQUFBOEosWUFDQUcsRUFBQWpLLEVBQUFpSyxZQUVBanVFLGFBQUE4dEUsR0FDQTl0RSxhQUFBaXVFLEdBZ0hBLFNBQUFJLEVBQUFuSyxHQUNBLElBQUFqNkYsRUFBQWk2RixFQUFBajZGLE9BQ0FyQixFQUFBczdGLEVBQUF0N0YsU0FDQWUsRUFBQXU2RixFQUFBdjZGLFFBRUEsR0FBQXJFLE9BQUFxcEcsaUJBQUEsQ0FFQSxJQUFBQyxFQUFBLElBQUFELGlCQUFBL2xHLEdBQ0FnbUcsRUFBQUMsUUFBQTVrRyxFQUFBTixHQUVBcEUsS0FBQW9MLEVBQUErQyxHQUFBbzdGLGtCQUFBL29HLEtBQUE2b0csSUFVQSxTQUFBRyxFQUFBN3pFLEVBQUF0eUIsR0FFQSxJQUFBc3lCLEVBQ0EsT0FBQXR5QixJQUdBLElBQ0FtM0YsRUFEQUYsRUFBQXQ2RixLQUFBdTZGLFFBQ0FDLFFBRUFpUCxFQUFBLFNBQUFyOEMsRUFBQXM4QyxHQUNBQSxHQUNBbFAsRUFBQXB0QyxFQUFBLGlCQUFBLG9CQUFBcnRELE9BQUEsZ0JBQUEsc0JBQUEycEcsSUFHQUEsRUFBQSxTQUFBQSxFQUFBbjlGLEdBQ0FBLEVBQUE3SCxTQUFBODFGLElBQ0FpUCxFQUFBLFNBQUFDLEdBQ0FybUcsTUFJQW9tRyxFQUFBLFNBQUF6cEcsS0FBQW9MLEVBQUErQyxHQUFBdzdGLHVCQUNBRixFQUFBLE1BQUFDLEdBRUExcEcsS0FBQW9MLEVBQUErQyxHQUFBdzdGLHNCQUFBRCxFQUdBLE9BQ0FFLE1BL3FCQSxXQUNBLFNBQUFBLEVBQUExZ0IsR0FDQTRRLEVBQUE5NUYsS0FBQTRwRyxHQUVBLElBQUEsSUFBQUMsS0FBQTNnQixFQUNBbHBGLEtBQUE2cEcsR0FBQTNnQixFQUFBMmdCLEdBR0E3cEcsS0FBQWllLE9BQ0E2ckYsV0FBQSxFQUNBamxFLFNBQUEsRUFDQXZ2QixTQUFBLEdBR0F0VixLQUFBb0wsRUFBQXE4RixHQUNBOEIsdUJBcU9BLE9BMU5BdlAsRUFBQTRQLElBQ0F6N0YsSUFBQSxTQUNBbkgsTUFBQSxXQUNBaEgsS0FBQWllLE1BQUEzSSxTQUFBLEtBVUFuSCxJQUFBLFVBQ0FuSCxNQUFBLFdBQ0FoSCxLQUFBaWUsTUFBQTNJLFNBQUEsS0FXQW5ILElBQUEsT0FDQW5ILE1BQUEsU0FBQTJ1QixHQUNBLElBQUF1d0UsRUFBQWxtRyxLQUVBLElBQUFBLEtBQUFpZSxNQUFBNnJGLFdBQUE5cEcsS0FBQWllLE1BQUEzSSxRQUFBLENBRUEsSUFBQWlsRixFQUFBdjZGLEtBQUF1NkYsT0FDQXNELEVBQUE3OUYsS0FBQTY5RixVQUNBejVGLEVBQUFwRSxLQUFBb0UsUUFFQTJsRyxFQUFBelAsRUFBQUMsR0FDQUMsRUFBQXVQLEVBQUF2UCxRQUNBQyxFQUFBc1AsRUFBQXRQLFNBQ0EzK0UsRUFBQWl1RixFQUFBanVGLFFBS0EraEYsRUFBQW1NLFFBQUFwcUcsU0FBQTJQLGdCQUFBN0csU0FBQW0xRixJQUtBejVGLEVBQUFnMUYsT0FBQXA0RixLQUFBdTVGLEdBRUE1a0UsRUFBQTB4RSxRQUFBcmlHLElBQUEyd0IsRUFBQUEsRUFBQXZ4QixFQUFBdXhCLFNBQUEsR0FHQTR4RSxJQUFBaE4sRUFBQUMsRUFBQUMsR0FBQSxHQUVBRixFQUFBOTJFLE1BQUE0TyxXQUFBLFVBQ0FyeUIsS0FBQWllLE1BQUE0bUIsU0FBQSxFQW9aQSxTQUFBeGhDLEdBQ0EsSUFBQTRtRyxFQUFBanFHLEtBRUFBLEtBQUFncEcsZ0JBR0FocEcsS0FBQXU2RixPQUFBOTJFLE1BQUF1UixFQUFBLGNBQUEsS0FDQWgxQixLQUFBZ3BHLGVBQUFuSSxpQkFFQTdnRyxLQUFBb0UsUUFBQW0wRixlQUFBekIsRUFBQUcsWUFDQWozRixLQUFBZ3BHLGVBQUF4SSx3QkFOQXhnRyxLQUFBZ3BHLGVBQUFMLEVBQUEzbkcsS0FBQWhCLE1BVUEsSUFBQWtxRyxFQUFBbHFHLEtBQUFncEcsZUFBQTVrRyxRQUFBdytGLFNBQ0FtRyxFQUFBL29HLEtBQUFncEcsZUFBQTVrRyxRQUFBeStGLFNBRUE3aUcsS0FBQWdwRyxlQUFBNWtHLFFBQUF3K0YsU0FBQTVpRyxLQUFBZ3BHLGVBQUE1a0csUUFBQXkrRixTQUFBLFdBQ0FvSCxFQUFBMVAsT0FBQXgxRCxhQUNBMWhDLElBQ0E0bUcsRUFBQWpCLGVBQUE1a0csUUFBQXkrRixTQUFBa0csRUFDQWtCLEVBQUFqQixlQUFBNWtHLFFBQUF3K0YsU0FBQXNILEdBR0FscUcsS0FBQW9FLFFBQUF5ckIsU0FBQW5uQixTQUFBMUksS0FBQXU2RixTQUNBdjZGLEtBQUFvRSxRQUFBeXJCLFNBQUFwdUIsWUFBQXpCLEtBQUF1NkYsU0EzYUF2NUYsS0FBQWhCLEtBQUEsV0FJQSxHQUFBa21HLEVBQUFqb0YsTUFBQTRtQixRQUFBLENBUUEsR0FOQXpnQyxFQUFBbTBGLGVBQUF6QixFQUFBRyxhQUNBaVAsRUFBQThDLGVBQUFuSSxpQkFDQTBHLElBQUFoTixHQUFBbjJGLEVBQUFxMEYsaUJBSUFyMEYsRUFBQW0wRixlQUFBekIsRUFBQUcsV0FBQSxDQUNBaVAsRUFBQThDLGVBQUFsSSx3QkFDQSxJQUFBeG1FLEVBQUF4MUIsTUFBQUMsUUFBQVgsRUFBQWsyQixPQUFBbDJCLEVBQUFrMkIsTUFBQSxHQUFBbDJCLEVBQUFrMkIsTUFDQTRyRSxFQUFBOTZGLEVBQUErQyxHQUFBNjVGLGtCQUNBOUIsRUFBQTk2RixFQUFBK0MsR0FBQTI1RixxQkFBQXh0RSxHQUFBNHJFLEVBQUE5NkYsRUFBQStDLEdBQUE4NUYsbUJBQUEvQixFQUFBOTZGLEVBQUErQyxHQUFBODVGLG1CQUFBL0IsRUFBQTk2RixFQUFBK0MsR0FBQTY1RixrQkFLQVQsSUFBQS9NLEVBQUFDLEVBQUFBLEVBQUEzK0UsRUFBQSxNQUFBNlosR0FFQThrRSxHQUNBbHFFLGlCQUFBa3FFLEdBQUF6bEUsRUFBQSxjQUdBNXdCLEVBQUE2ekYsYUFDQTRGLEVBQUFqWSxVQUFBdnFFLElBQUEsZ0JBR0FqWCxFQUFBczBGLFFBd2VBLFdBQ0EsSUFBQXlSLEVBQUFucUcsS0F5QkFtakIsR0FmQSxTQUFBaW5GLElBQ0FELEVBQUFuQixnQkFDQW1CLEVBQUFuQixlQUFBbkksaUJBVEFzSixFQUFBNVAsT0FBQTkyRSxNQUFBdVIsRUFBQSx1QkFBQW0xRSxFQUFBL2xHLFFBQUFxMEYsZUFBQSxLQWNBMFIsRUFBQWxzRixNQUFBNG1CLFFBQ0FqTyxzQkFBQXd6RSxHQVhBRCxFQUFBNVAsT0FBQTkyRSxNQUFBdVIsRUFBQSx1QkFBQSxNQS9lQWgwQixLQUFBa2xHLEdBR0FvQixJQUFBOU0sRUFBQUMsR0FBQSxXQUVBK08sRUFBQXhvRyxLQUFBa2xHLEVBQUF2d0UsRUFBQSxXQUNBdnhCLEVBQUFxMEYsZ0JBQ0ErQixFQUFBNVUsVUFBQXZxRSxJQUFBLHNCQUdBalgsRUFBQTZ6RixhQUNBc0MsRUFBQXRsRixRQUdBN1EsRUFBQWkxRixRQUFBcjRGLEtBQUF1NUYsU0E1REF2NkYsS0FBQXFsRCxjQXlFQWwzQyxJQUFBLE9BQ0FuSCxNQUFBLFNBQUEydUIsR0FDQSxJQUFBMDBFLEVBQUFycUcsS0FFQSxJQUFBQSxLQUFBaWUsTUFBQTZyRixXQUFBOXBHLEtBQUFpZSxNQUFBM0ksUUFBQSxDQUVBLElBQUFpbEYsRUFBQXY2RixLQUFBdTZGLE9BQ0FzRCxFQUFBNzlGLEtBQUE2OUYsVUFDQXo1RixFQUFBcEUsS0FBQW9FLFFBRUFrbUcsRUFBQWhRLEVBQUFDLEdBQ0FDLEVBQUE4UCxFQUFBOVAsUUFDQUMsRUFBQTZQLEVBQUE3UCxTQUNBMytFLEVBQUF3dUYsRUFBQXh1RixRQUVBMVgsRUFBQWsxRixPQUFBdDRGLEtBQUF1NUYsR0FFQTVrRSxFQUFBMHhFLFFBQUFyaUcsSUFBQTJ3QixFQUFBQSxFQUFBdnhCLEVBQUF1eEIsU0FBQSxHQUVBdnhCLEVBQUFxMEYsZ0JBQ0ErQixFQUFBNVUsVUFBQTlvRSxPQUFBLHNCQUdBMVksRUFBQTZ6RixhQUNBNEYsRUFBQWpZLFVBQUE5b0UsT0FBQSxnQkFHQXk5RSxFQUFBOTJFLE1BQUE0TyxXQUFBLFNBQ0FyeUIsS0FBQWllLE1BQUE0bUIsU0FBQSxFQUVBMGlFLElBQUEvTSxFQUFBQyxFQUFBQSxFQUFBMytFLEVBQUEsTUFBQTZaLEdBRUEyeEUsSUFBQTlNLEVBQUFDLEdBQUEsVUFFQXIyRixFQUFBNnpGLGFBQUE3ekYsRUFBQXVtQixRQUFBbHFCLFFBQUEsVUFBQSxHQS9SQSxTQUFBK04sR0FDQSxJQUFBdTVCLEVBQUF2NUIsRUFBQW1tQix3QkFFQSxPQUFBb1QsRUFBQW40QixLQUFBLEdBQUFtNEIsRUFBQW5ULE1BQUEsR0FBQW1ULEVBQUE0TCxTQUFBNXpDLE9BQUErOEMsYUFBQWw5QyxTQUFBMlAsZ0JBQUFzNUMsZUFBQTlnQixFQUFBMkwsUUFBQTN6QyxPQUFBdWlELFlBQUExaUQsU0FBQTJQLGdCQUFBd3RDLGFBNFJBd3RELENBQUExTSxJQUNBQSxFQUFBNW9GLFFBU0FrTyxHQUFBLFdBQ0FxbUYsRUFBQXhvRyxLQUFBcXBHLEVBQUExMEUsRUFBQSxZQUNBMDBFLEVBQUFwc0YsTUFBQTRtQixTQUFBemdDLEVBQUF5ckIsU0FBQW5uQixTQUFBNnhGLEtBRUE4UCxFQUFBai9GLEVBQUErQyxHQUFBMDVGLG9CQUNBam9HLFNBQUFtaEIsb0JBQUEsWUFBQXNwRixFQUFBai9GLEVBQUErQyxHQUFBMjVGLHNCQUNBdUMsRUFBQWovRixFQUFBK0MsR0FBQTg1RixtQkFBQSxNQUdBb0MsRUFBQXJCLGVBQUFsSSx3QkFDQTE4RixFQUFBeXJCLFNBQUFsdUIsWUFBQTQ0RixHQUNBbjJGLEVBQUFtMUYsU0FBQXY0RixLQUFBdTVGLFlBWUFwc0YsSUFBQSxVQUNBbkgsTUFBQSxXQUNBLElBQUF3akcsRUFBQXhxRyxLQUVBQSxLQUFBaWUsTUFBQTZyRixZQUdBOXBHLEtBQUFpZSxNQUFBNG1CLFNBQ0E3a0MsS0FBQStrQixLQUFBLEdBR0Eva0IsS0FBQXlxRyxVQUFBdnRELFFBQUEsU0FBQXdzRCxHQUNBYyxFQUFBM00sVUFBQTk4RSxvQkFBQTJvRixFQUFBNWhGLE1BQUE0aEYsRUFBQS82RixXQUlBM08sS0FBQTY5RixVQUFBbndGLGFBQUEsUUFBQTFOLEtBQUE2OUYsVUFBQXB3RixhQUFBLCtCQUVBek4sS0FBQTY5RixVQUFBNk0sUUFBQSxzQkFBQSxhQUFBLG9CQUFBeHRELFFBQUEsU0FBQXZyQyxHQUNBNjRGLEVBQUEzTSxVQUFBN3ZGLGdCQUFBMkQsS0FHQTNSLEtBQUFncEcsZ0JBQ0FocEcsS0FBQWdwRyxlQUFBM2pELFVBR0FybEQsS0FBQW9MLEVBQUErQyxHQUFBbzdGLGtCQUFBcnNELFFBQUEsU0FBQW1zRCxHQUNBQSxFQUFBc0IsZUFHQTNxRyxLQUFBaWUsTUFBQTZyRixXQUFBLE9BR0FGLEVBcFBBLEdBZ3JCQWdCLG1CQXRXQSxXQUNBLElBQUFDLEVBQUE3cUcsS0E0REEsT0FDQThxRyxjQTNEQSxTQUFBaGpGLEdBQ0EsR0FBQStpRixFQUFBNXNGLE1BQUEzSSxRQUFBLENBRUEsSUFBQXkxRixFQUFBalUsRUFBQUUsZUFBQUYsRUFBQUcsYUFBQSxlQUFBbnZFLEVBQUFwaUIsTUFBQSxVQUFBb2lCLEVBQUFwaUIsTUFFQXFsRyxHQUFBRixFQUFBem1HLFFBQUF1MEYsWUFFQWtTLEVBQUF6L0YsRUFBQStDLEdBQUE2NUYsaUJBQUFsZ0YsRUFHQSxVQUFBQSxFQUFBcGlCLE1BQUEsZUFBQW1sRyxFQUFBem1HLFFBQUFpMEYsYUFBQXdTLEVBQUE1c0YsTUFBQTRtQixRQUNBMmpFLEVBQUF4bkcsS0FBQTZwRyxHQUVBbkQsRUFBQTFtRyxLQUFBNnBHLEVBQUEvaUYsR0FJQWlqRixHQUFBalUsRUFBQUssS0FBQTBULEVBQUFoTixVQUFBaHpFLE9BQ0FnZ0YsRUFBQWhOLFVBQUFoekUsV0EwQ0FtZ0YsaUJBdENBLFNBQUFsakYsR0FDQSxLQUFBLGVBQUFBLEVBQUFwaUIsTUFBQW94RixFQUFBRSxlQUFBRixFQUFBRyxZQUFBNFQsRUFBQXptRyxRQUFBdTBGLFdBQUEsQ0FFQSxHQUFBa1MsRUFBQXptRyxRQUFBNnpGLFlBQUEsQ0FDQSxJQUFBbHpFLEVBQUF5akYsRUFBQTMvRCxLQUFBZ2lFLEdBbUJBLE9BRkFqckcsU0FBQStrQixLQUFBOVUsaUJBQUEsYUFBQWtWLFFBQ0FubEIsU0FBQWlRLGlCQUFBLFlBZkEsU0FBQW83RixFQUFBbmpGLEdBQ0EsSUFBQW9qRixFQUFBaHdGLEdBQUE0TSxFQUFBcGpCLE9BQUE2TixFQUFBc2xGLFdBQ0FzVCxFQUFBandGLEdBQUE0TSxFQUFBcGpCLE9BQUE2TixFQUFBZ2xGLFVBQUFzVCxFQUFBdFEsT0FDQTZRLEVBQUFGLElBQUFMLEVBQUFoTixVQUVBc04sR0FBQUMsR0FubUJBLFNBQUF0akYsRUFBQXl5RSxFQUFBbjJGLEdBQ0EsSUFBQW0yRixFQUFBOXNGLGFBQUEsZUFBQSxPQUFBLEVBRUEsSUFBQXFtQyxFQUFBaHNCLEVBQUF5RSxRQUNBd25CLEVBQUFqc0IsRUFBQTBFLFFBQ0EwckUsRUFBQTl6RixFQUFBOHpGLGtCQUNBdmpELEVBQUF2d0MsRUFBQXV3QyxTQUdBNU0sRUFBQXd5RCxFQUFBNWxFLHdCQUNBbWpFLEVBQUF5TyxHQUFBaE0sR0FDQThRLEVBQUFuVCxFQUFBdmpELEVBRUEyMkQsR0FDQTE3RixJQUFBbTRCLEVBQUFuNEIsSUFBQW1rQyxFQUFBbWtELEVBQ0F2a0QsT0FBQUksRUFBQWhNLEVBQUE0TCxPQUFBdWtELEVBQ0F0akUsS0FBQW1ULEVBQUFuVCxLQUFBa2YsRUFBQW9rRCxFQUNBeGtELE1BQUFJLEVBQUEvTCxFQUFBMkwsTUFBQXdrRCxHQUdBLE9BQUFKLEdBQ0EsSUFBQSxNQUNBd1QsRUFBQTE3RixJQUFBbTRCLEVBQUFuNEIsSUFBQW1rQyxFQUFBczNELEVBQ0EsTUFDQSxJQUFBLFNBQ0FDLEVBQUEzM0QsT0FBQUksRUFBQWhNLEVBQUE0TCxPQUFBMDNELEVBQ0EsTUFDQSxJQUFBLE9BQ0FDLEVBQUExMkUsS0FBQW1ULEVBQUFuVCxLQUFBa2YsRUFBQXUzRCxFQUNBLE1BQ0EsSUFBQSxRQUNBQyxFQUFBNTNELE1BQUFJLEVBQUEvTCxFQUFBMkwsTUFBQTIzRCxFQUlBLE9BQUFDLEVBQUExN0YsS0FBQTA3RixFQUFBMzNELFFBQUEyM0QsRUFBQTEyRSxNQUFBMDJFLEVBQUE1M0QsTUFra0JBNjNELENBQUF6akYsRUFBQStpRixFQUFBdFEsT0FBQXNRLEVBQUF6bUcsV0FDQXhFLFNBQUEra0IsS0FBQTVELG9CQUFBLGFBQUFnRSxHQUNBbmxCLFNBQUFtaEIsb0JBQUEsWUFBQWtxRixHQUVBekMsRUFBQXhuRyxLQUFBNnBHLE1BUUFyQyxFQUFBeG5HLEtBQUE2cEcsS0FhQVcsV0FWQSxTQUFBMWpGLEdBQ0FBLEVBQUFxRCxnQkFBQTJyRSxFQUFBRyxhQUNBLzdFLEdBQUE0TSxFQUFBcUQsY0FBQTVZLEVBQUFnbEYsU0FFQWlSLEVBQUF4bkcsS0FBQTZwRyxPQTZTQS9CLHFCQUFBQSxFQUNBSCxzQkFBQUEsRUFDQWEsaUJBQUFBLEdBM3JCQSxHQStyQkFJLEdBQUFwQyxHQUFBb0MsTUFDQWdCLEdBQUFwRCxHQUFBb0QsbUJBQ0FqQyxHQUFBbkIsR0FBQW1CLHNCQUNBRyxHQUFBdEIsR0FBQXNCLHFCQUdBMkMsR0FBQSxFQVFBLFNBQUFDLEdBQUFsL0YsRUFBQTA4RSxHQUNBLE9BQUExOEUsRUFBQSsxRixPQUFBLFNBQUFvSixFQUFBOU4sR0FDQSxJQXAzR0FBLEVBQUF6NUYsRUFvM0dBK0ksRUFBQXMrRixHQUVBcm5HLEdBdDNHQXk1RixFQXMzR0FBLEVBdDNHQXo1RixFQXMzR0E4a0YsRUFBQTBQLFlBQUExUCxFQXQ1R0EsU0FBQTJVLEVBQUErTixHQUNBLElBQUF4bkcsRUFBQW8xRixFQUFBK0ksT0FBQSxTQUFBb0osRUFBQXg5RixHQUNBLElBQUF5RCxFQUFBaXNGLEVBQUFwd0YsYUFBQSxjQUFBVSxFQUFBekcsZ0JBQUFra0csRUFBQXo5RixHQWtCQSxNQWZBLFVBQUF5RCxJQUFBQSxHQUFBLEdBQ0EsU0FBQUEsSUFBQUEsR0FBQSxHQUdBNmlCLFNBQUE3aUIsS0FBQS9MLE1BQUFDLFdBQUE4TCxNQUNBQSxFQUFBOUwsV0FBQThMLElBSUEsaUJBQUFBLEdBQUEsTUFBQUEsRUFBQXRMLE9BQUFxM0MsT0FBQSxLQUNBL3JDLEVBQUEwUSxLQUFBQyxNQUFBM1EsSUFHQSs1RixFQUFBeDlGLEdBQUF5RCxFQUVBKzVGLE9BR0EsT0FBQXRSLEtBQUF1UixFQUFBeG5HLEdBKzNHQXluRyxDQUFBaE8sRUFBQTNVLEdBcDNHQTlrRixFQUFBNHpGLFFBQ0E1ekYsRUFBQTJ6RixhQUFBLEdBR0EzekYsRUFBQXlyQixVQUFBLG1CQUFBenJCLEVBQUF5ckIsV0FDQXpyQixFQUFBeXJCLFNBQUF6ckIsRUFBQXlyQixZQUdBLG1CQUFBenJCLEVBQUF3cUIsT0FDQXhxQixFQUFBd3FCLEtBQUF4cUIsRUFBQXdxQixLQUFBaXZFLElBR0F6NUYsR0EwMkdBNnRDLEVBQUE0ckQsRUFBQXB3RixhQUFBLFNBQ0EsSUFBQXdrQyxJQUFBN3RDLEVBQUF3cUIsS0FBQSxPQUFBKzhFLEVBRUE5TixFQUFBbndGLGFBQUEsYUFBQSxJQUNBbXdGLEVBQUFud0YsYUFBQSxtQkFBQSxTQUFBUCxHQUVBdXRGLEVBQUFtRCxHQUVBLElBQUF0RCxFQXBtSEEsU0FBQXB0RixFQUFBOGtDLEVBQUE3dEMsR0FDQUEsRUFBQTB6RixVQUNBMXpGLEVBQUF1d0MsU0FEQSxJQUVBcWpELEVBQUE1ekYsRUFBQTR6RixNQUNBZ0IsRUFBQTUwRixFQUFBNDBGLFVBQ0FDLEVBQUE3MEYsRUFBQTYwRixlQUNBbEIsRUFBQTN6RixFQUFBMnpGLFlBQ0FTLEVBQUFwMEYsRUFBQW8wRixRQUNBcGhFLEVBQUFoekIsRUFBQWd6QixVQUNBZ2hFLEVBQUFoMEYsRUFBQWcwRixLQUNBRCxFQUFBL3pGLEVBQUErekYsTUFDQXZwRSxFQUFBeHFCLEVBQUF3cUIsS0FDQXVGLEVBQUEvdkIsRUFBQSt2QixPQUNBOGpFLEVBQUE3ekYsRUFBQTZ6RixZQUNBcm1FLEVBQUF4dEIsRUFBQXd0QixTQUdBMm9FLEVBQUEzNkYsU0FBQTBCLGNBQUEsT0FDQWk1RixFQUFBN3NGLGFBQUEsUUFBQSxnQkFDQTZzRixFQUFBN3NGLGFBQUEsT0FBQSxXQUNBNnNGLEVBQUE3c0YsYUFBQSxLQUFBLFNBQUFQLEdBQ0FvdEYsRUFBQTkyRSxNQUFBMFEsT0FBQUEsRUFDQW9tRSxFQUFBOTJFLE1BQUFtTyxTQUFBQSxFQUVBLElBQUE0b0UsRUFBQTU2RixTQUFBMEIsY0FBQSxPQVVBLEdBVEFrNUYsRUFBQTlzRixhQUFBLFFBQUEsaUJBQ0E4c0YsRUFBQTlzRixhQUFBLFlBQUEwcUYsR0FDQW9DLEVBQUE5c0YsYUFBQSxpQkFBQTBwQixHQUNBb2pFLEVBQUE5c0YsYUFBQSxhQUFBLFVBRUF5cUYsRUFBQTF3RixNQUFBLEtBQUF5MUMsUUFBQSxTQUFBLzBCLEdBQ0FxeUUsRUFBQTVVLFVBQUF2cUUsSUFBQThNLEVBQUEsWUFHQTZ2RSxFQUFBLENBQ0EsSUFBQThULEVBQUFsc0csU0FBQTBCLGNBQUEsT0FDQXdxRyxFQUFBcm9GLE1BQUF1UixFQUFBLGNBQUFpa0UsRUFFQSxVQUFBRCxHQUNBOFMsRUFBQWxtQixVQUFBdnFFLElBQUEsb0JBQ0F5d0YsRUFBQXQ3RixVQUFBLCtiQUVBczdGLEVBQUFsbUIsVUFBQXZxRSxJQUFBLGVBR0FtL0UsRUFBQS80RixZQUFBcXFHLEdBR0EsR0FBQS9ULEVBQUEsQ0FFQXlDLEVBQUE5c0YsYUFBQSxtQkFBQSxJQUNBLElBQUFxK0YsRUFBQW5zRyxTQUFBMEIsY0FBQSxPQUNBeXFHLEVBQUFyK0YsYUFBQSxhQUFBLFVBQ0FxK0YsRUFBQW5tQixVQUFBdnFFLElBQUEsa0JBQ0FtL0UsRUFBQS80RixZQUFBc3FHLEdBR0F2VCxHQUVBZ0MsRUFBQTlzRixhQUFBLGVBQUEsSUFHQXVxRixHQUNBdUMsRUFBQTlzRixhQUFBLG1CQUFBLElBR0EsSUFBQW9PLEVBQUFsYyxTQUFBMEIsY0FBQSxPQUdBLEdBRkF3YSxFQUFBcE8sYUFBQSxRQUFBLGlCQUVBa2hCLEVBQUEsQ0FDQSxJQUFBbzlFLE9BQUEsRUFFQXA5RSxhQUFBczRFLFNBQ0FwckYsRUFBQXJhLFlBQUFtdEIsR0FDQW85RSxFQUFBLElBQUFwOUUsRUFBQXpoQixJQUFBLHdCQUVBMk8sRUFBQXRMLFVBQUE1USxTQUFBMDFFLGNBQUExbUQsR0FBQXBlLFVBQ0F3N0YsRUFBQXA5RSxHQUdBMnJFLEVBQUE3c0YsYUFBQSxZQUFBLElBQ0F1cUYsR0FBQXNDLEVBQUE3c0YsYUFBQSxXQUFBLE1BQ0E4c0YsRUFBQTlzRixhQUFBLG1CQUFBcytGLFFBRUFsd0YsRUFBQXRMLFVBQUF5aEMsRUFNQSxPQUhBdW9ELEVBQUEvNEYsWUFBQXFhLEdBQ0F5K0UsRUFBQTk0RixZQUFBKzRGLEdBRUFELEVBMGdIQTBSLENBQUE5K0YsRUFBQThrQyxFQUFBN3RDLEdBRUF3eUYsRUFBQSxJQUFBZ1QsSUFDQXo4RixHQUFBQSxFQUNBMHdGLFVBQUFBLEVBQ0F0RCxPQUFBQSxFQUNBbjJGLFFBQUFBLEVBQ0E0a0csZUFBQSxPQUdBNWtHLEVBQUErMEYsNkJBQ0F2QyxFQUFBb1MsZUFBQUwsR0FBQTNuRyxLQUFBNDFGLEdBQ0FBLEVBQUFvUyxlQUFBbEkseUJBR0EsSUFBQTJKLEVBQUFHLEdBQUE1cEcsS0FBQTQxRixHQWtDQSxPQWpDQUEsRUFBQTZULFVBQUFybUcsRUFBQXVtQixRQUFBcmtCLE9BQUFtQixNQUFBLEtBQUE4NkYsT0FBQSxTQUFBb0osRUFBQU8sR0FDQSxPQUFBUCxFQUFBcHJHLE9BaGhIQSxTQUFBMnJHLEVBQUFyTyxFQUFBeDFFLEVBQUFzd0UsR0FDQSxJQUFBOFIsS0FFQSxNQUFBLFdBQUF5QixFQUFBekIsR0FHQTVNLEVBQUFodUYsaUJBQUFxOEYsRUFBQTdqRixFQUFBeWlGLGVBQ0FMLEVBQUFqcUcsTUFDQXNuQixNQUFBb2tGLEVBQ0F2OUYsUUFBQTBaLEVBQUF5aUYsZ0JBSUEsZUFBQW9CLElBQ0FwVixFQUFBRSxlQUFBMkIsSUFDQWtGLEVBQUFodUYsaUJBQUEsYUFBQXdZLEVBQUF5aUYsZUFDQUwsRUFBQWpxRyxNQUNBc25CLE1BQUEsYUFDQW5aLFFBQUEwWixFQUFBeWlGLGdCQUVBak4sRUFBQWh1RixpQkFBQSxXQUFBd1ksRUFBQTJpRixrQkFDQVAsRUFBQWpxRyxNQUNBc25CLE1BQUEsV0FDQW5aLFFBQUEwWixFQUFBMmlGLG9CQUlBbk4sRUFBQWh1RixpQkFBQSxhQUFBd1ksRUFBQTJpRixrQkFDQVAsRUFBQWpxRyxNQUNBc25CLE1BQUEsYUFDQW5aLFFBQUEwWixFQUFBMmlGLG9CQUlBLFVBQUFrQixJQUNBck8sRUFBQWh1RixpQkFBQSxPQUFBd1ksRUFBQW1qRixZQUNBZixFQUFBanFHLE1BQ0FzbkIsTUFBQSxPQUNBblosUUFBQTBaLEVBQUFtakYsY0FJQWYsR0FzK0dBMEIsQ0FBQUQsRUFBQXJPLEVBQUE0TSxFQUFBcm1HLEVBQUF1MEYsaUJBSUF2MEYsRUFBQXkwRixjQUNBaVEsR0FBQTluRyxLQUFBNDFGLEdBQ0FseUYsT0FBQW01RixFQUNBeDZGLFNBQUEsV0FDQSxJQUNBeVksRUFEQXcrRSxFQUFBQyxHQUNBeitFLFFBRUFtMkIsRUFBQTRyRCxFQUFBcHdGLGFBQUEsU0FDQXdrQyxJQUNBbjJCLEVBQUF0TCxVQUFBeWhDLEVBQ0F5b0QsRUFBQW1ELEtBSUF6NUYsU0FDQXVGLFlBQUEsS0FNQWswRixFQUFBNk0sT0FBQTlULEVBQ0EyRCxFQUFBNlIsV0FBQXZPLEVBRUE4TixFQUFBbnJHLEtBQUFvMkYsR0FFQTZVLEtBRUFFLE9BUUEsU0FBQVUsR0FBQUMsTUFDQWhzRyxNQUFBVSxLQUFBcEIsU0FBQWtPLGlCQUFBeUUsRUFBQWdsRixTQUVBcjZDLFFBQUEsU0FBQXE5QyxHQUNBLElBQUEzRCxFQUFBMkQsRUFBQTZSLFdBQUExQixPQUNBdG1HLEVBQUF3eUYsRUFBQXh5RixXQUdBLElBQUFBLEVBQUFpMEYsYUFBQWowRixFQUFBdW1CLFFBQUFscUIsUUFBQSxVQUFBLElBQUE2ckcsR0FBQS9SLElBQUErUixFQUFBL1IsUUFDQTNELEVBQUE3eEUsU0FpR0EsU0FBQXduRixHQUFBMXFHLEVBQUF1QyxHQXFDQSxPQXBDQTB5RixFQUFBQyxZQUFBRCxFQUFBUSx3QkExRkEsV0FDQSxJQUFBa1YsRUFBQSxXQUNBMVYsRUFBQUcsYUFFQUgsRUFBQUcsWUFBQSxFQUVBSCxFQUFBSyxLQUNBdjNGLFNBQUEra0IsS0FBQWloRSxVQUFBdnFFLElBQUEsZUFHQXk3RSxFQUFBSSx1QkFBQW4zRixPQUFBNjRGLGFBQ0FoNUYsU0FBQWlRLGlCQUFBLFlBQUE0OEYsR0FHQTNWLEVBQUFPLGtCQUFBLFdBR0FvVixFQUFBLFdBQ0EsSUFBQWx5RSxPQUFBLEVBRUEsT0FBQSxXQUNBLElBQUFsekIsRUFBQXV4RixZQUFBdnhGLE1BR0FBLEVBQUFrekIsRUFBQSxLQUNBdThELEVBQUFHLFlBQUEsRUFDQXIzRixTQUFBbWhCLG9CQUFBLFlBQUEwckYsR0FDQTNWLEVBQUFLLEtBQ0F2M0YsU0FBQStrQixLQUFBaWhFLFVBQUE5b0UsT0FBQSxlQUVBZzZFLEVBQUFPLGtCQUFBLFVBR0E5OEQsRUFBQWx6QixHQWhCQSxHQXlEQXpILFNBQUFpUSxpQkFBQSxRQXJDQSxTQUFBaVksR0FFQSxLQUFBQSxFQUFBcGpCLGtCQUFBd2lHLFNBQ0EsT0FBQW1GLEtBR0EsSUFBQXhPLEVBQUEzaUYsR0FBQTRNLEVBQUFwakIsT0FBQTZOLEVBQUFzbEYsV0FDQTBDLEVBQUFyL0UsR0FBQTRNLEVBQUFwakIsT0FBQTZOLEVBQUFnbEYsUUFFQSxJQUFBZ0QsSUFBQUEsRUFBQTZSLFdBQUExQixPQUFBdG1HLFFBQUE2ekYsWUFBQSxDQUVBLEdBQUE0RixFQUFBLENBQ0EsSUFBQXo1RixFQUFBeTVGLEVBQUE2TSxPQUFBdG1HLFFBTUEsSUFBQUEsRUFBQWswRixVQUFBeEIsRUFBQUcsYUFBQTd5RixFQUFBazBGLFVBQUFsMEYsRUFBQXVtQixRQUFBbHFCLFFBQUEsVUFBQSxFQUNBLE9BQUE0ckcsR0FBQXhPLEVBQUE2TSxRQUdBLElBQUEsSUFBQXRtRyxFQUFBaTBGLGFBQUFqMEYsRUFBQXVtQixRQUFBbHFCLFFBQUEsVUFBQSxFQUFBLE9BR0E0ckcsUUFhQXpzRyxTQUFBaVEsaUJBQUEsYUFBQTI4RixHQUNBenNHLE9BQUE4UCxpQkFBQSxPQVhBLFNBQUFpWSxHQUNBLElBQ0F0WixFQURBNU8sU0FDQXNWLGNBRUExRyxHQUFBQSxFQUFBb2MsTUFBQXU4RSxHQUFBbm1HLEtBQUF3TixFQUFBK0QsRUFBQXNsRixZQUNBcnBGLEVBQUFvYyxTQVFBa3NFLEVBQUFFLGdCQUFBdDZDLFVBQUFnd0QsaUJBQUFod0QsVUFBQWl3RCxrQkFDQS9zRyxTQUFBaVEsaUJBQUEsY0FBQTI4RixHQVlBSSxHQUNBOVYsRUFBQVEsc0JBQUEsR0FHQW1DLEVBQUE1M0YsS0FDQUEsRUFBQW1vRyxRQUFBLEVBQ0Fub0csRUFBQThILFdBQUE5SCxFQUFBOEgsZUFDQTlILEVBQUE2TCxhQUFBLFNBQUFTLEVBQUF5RCxHQUNBL1AsRUFBQThILFdBQUF3RSxHQUFBeUQsR0FFQS9QLEVBQUE0TCxhQUFBLFNBQUFVLEdBQ0EsT0FBQXRNLEVBQUE4SCxXQUFBd0UsSUFFQXRNLEVBQUFtTSxnQkFBQSxTQUFBRyxVQUNBdE0sRUFBQThILFdBQUF3RSxJQUVBdE0sRUFBQWdPLGlCQUFBLGFBQ0FoTyxFQUFBa2Ysb0JBQUEsYUFDQWxmLEVBQUErakYsV0FDQXRwRCxjQUNBamhCLElBQUEsU0FBQWxOLEdBQ0EsT0FBQXRNLEVBQUErakYsVUFBQXRwRCxXQUFBbnVCLElBQUEsR0FFQTJPLE9BQUEsU0FBQTNPLEdBRUEsY0FEQXRNLEVBQUErakYsVUFBQXRwRCxXQUFBbnVCLElBQ0EsR0FFQXpGLFNBQUEsU0FBQXlGLEdBQ0EsUUFBQXRNLEVBQUErakYsVUFBQXRwRCxXQUFBbnVCLE1BS0EvSixFQUFBaTJGLEtBQUEzd0QsRUFBQXRsQyxJQUdBdkMsU0FBQUEsRUFDQXVDLFFBQUFBLEVBQ0F5b0csU0FBQS9WLEVBQUFDLFVBQUEyVSxHQTkxSEEsU0FBQTdwRyxHQUNBLEdBQUFBLGFBQUFxbEcsU0FBQXpOLEVBQUE1M0YsR0FDQSxPQUFBQSxHQUdBLEdBQUFBLGFBQUF3MEYsU0FDQSxTQUFBLzFGLE1BQUFVLEtBQUFhLEdBR0EsR0FBQWlELE1BQUFDLFFBQUFsRCxHQUNBLE9BQUFBLEVBR0EsSUFDQSxTQUFBdkIsTUFBQVUsS0FBQXBCLFNBQUFrTyxpQkFBQWpNLElBQ0EsTUFBQXVKLEdBQ0EsVUE4MEhBMGhHLENBQUFqckcsR0FBQXVDLE1BQ0Eyb0csV0FBQSxXQUNBL3NHLEtBQUE2c0csU0FBQTN2RCxRQUFBLFNBQUFzOUMsR0FDQSxPQUFBQSxFQUFBbjFDLFlBRUFybEQsS0FBQTZzRyxjQVFBLE9BSEFOLEdBQUF6VixRQUFBQSxFQUNBeVYsR0FBQTdpRSxTQUFBQSxFQUVBNmlFLEtDMzhIQSxXQUNBLElBUUFTLEVBQUEsU0FBQXAzRixHQUNBLElBQUFxM0YsRUFBQXpqRSxFQUFBNXpCLEdBQUE0RixRQUFBLGlDQUlBLE9BSEF5eEYsRUFBQTU4RixLQUFBLCtDQUFBd1UsT0FDQW9vRixFQUFBNThGLEtBQUEsa0RBQUEwVSxRQUVBLEdBR0F5a0IsRUFBQSxxQkFBQTloQixHQUFBLFFBQUEsV0FDQSxPQUFBOGhCLEVBQUF4cEMsTUFBQTJSLEtBQUEsYUFqQkEsU0FBQWlFLEdBQ0EsSUFBQXEzRixFQUFBempFLEVBQUE1ekIsR0FBQTRGLFFBQUEsaUNBSUEsT0FIQXl4RixFQUFBNThGLEtBQUEsK0NBQUEwVSxPQUNBa29GLEVBQUE1OEYsS0FBQSxrREFBQXdVLFFBRUEsRUFlQXFvRixDQUFBbHRHLFFBR0F3cEMsRUFBQSxvQkFBQTloQixHQUFBLFFBQUEsV0FDQSxJQUFBOVIsRUFBQTVWLEtBQ0FtdEcsRUFBQTNqRSxFQUFBeHBDLE1BQUE4aEIsS0FBQSxhQUNBbXJGLEVBQUF6akUsRUFBQXhwQyxNQUFBd2IsUUFBQSxpQ0FDQXcrRCxFQUFBaXpCLEVBQUE1OEYsS0FBQSxrREFBQXVCLE1BRUEsT0FBQW9vRSxHQUtBeHdDLEVBQUFqSSxNQUNBN2pCLE9BQUEsT0FDQTJpQixJQUFBLGFBQ0FmLFNBQUEsT0FDQXhkLE1BQ0FrNEQsS0FBQUEsRUFDQW16QixVQUFBQSxFQUNBQyxPQUFBNWpFLEVBQUEsc0JBQUE1M0IsT0FFQTB4QixRQUFBLFNBQUFLLEdBQ0FzcEUsRUFBQTU4RixLQUFBLHNDQUFBOU8sS0FBQW9pQyxFQUFBMHBFLFVBQ0FMLEVBQUFwM0YsT0FJQSxJQW5CQXEzRixFQUFBNThGLEtBQUEsa0RBQUE0RSxTQUNBLEtBcUJBdTBCLEVBQUEsMkJBQUE5aEIsR0FBQSxRQUFBLFdBQ0EsT0FBQXNsRixFQUFBaHRHLFFBdERBLEdIR0F3cEMsRUFBQSxvQkFBQXBtQyxLQUFBLFdBQ0EsSUFBQWdCLEdBQ0FxOUUsT0FBQSxLQUNBYSxXQUFBLFNBRUFnckIsRUFBQTlqRSxFQUFBeHBDLE1BQUE4aEIsS0FBQSxhQUVBLElBQUEsSUFBQXVELEtBQUFpb0YsRUFDQWxwRyxFQUFBaWhCLEdBQUFpb0YsRUFBQWpvRixHQUdBbWtCLEVBQUF4cEMsTUFBQThoQixLQUFBLGdCQUdBMWQsRUFBQSxTQUNBLFNBQUE0MUUsR0FDQSxPQUFBQSxFQUFBLElBQUExeUUsUUFLQWtpQyxFQUFBeHBDLE1BQUE4Z0YsVUFBQTE4RSxLSXZCQW9sQyxFQUFBLHFCQUFBcG1DLEtBQUEsV0FDQSxJQUFBbXFHLEVBQUEvakUsRUFBQXhwQyxNQUFBeXRDLFVBQ0E1RCxjQUFBLEVBQ0F3QixPQUFBLEVBQ0FNLFVBQUEsSUFHQW5DLEVBQUEsMEJBQUEzZSxNQUFBLFdBRUEsT0FEQTBpRixFQUFBcDdELGlCQUNBLElBR0EzSSxFQUFBLDBCQUFBM2UsTUFBQSxXQUVBLE9BREEwaUYsRUFBQW43RCxpQkFDQSxJQUdBNUksRUFBQXpwQyxRQUFBeXRHLE9BQUEsV0FDQUQsRUFBQXozRCxtQkFJQXRNLEVBQUEsMkJBQUFwbUMsS0FBQSxXQUNBLElBQUFxcUcsRUFBQWprRSxFQUFBeHBDLE1BQUF5dEMsVUFDQTVELGNBQUEsRUFDQXdCLE9BQUEsRUFDQU0sVUFBQSxJQUdBbkMsRUFBQXpwQyxRQUFBeXRHLE9BQUEsV0FDQUMsRUFBQTMzRCxtQkM5QkF0TSxFQUFBLHdCQUFBcG1DLEtBQUEsV0FDQSxJQUFBc3FHLEVBQUFsa0UsRUFBQXhwQyxNQUFBeXRDLFVBQ0E1RCxjQUFBLEVBQ0F3QixPQUFBLEVBQ0FNLFVBQUEsSUFHQW5DLEVBQUF4cEMsTUFBQWtiLFFBQUEsMkJBQUE3SyxLQUFBLDZCQUFBd2EsTUFBQSxXQUVBLE9BREE2aUYsRUFBQXY3RCxpQkFDQSxJQUdBM0ksRUFBQXhwQyxNQUFBa2IsUUFBQSwyQkFBQTdLLEtBQUEsNkJBQUF3YSxNQUFBLFdBRUEsT0FEQTZpRixFQUFBdDdELGlCQUNBLElBR0E1SSxFQUFBenBDLFFBQUF5dEcsT0FBQSxXQUNBRSxFQUFBNTNELG1CQ2xCQXRNLEVBQUEsOEJBQUE5aEIsR0FBQSxTQUFBLFdBQ0EsSUFBQWsvQyxFQUFBcDlCLEVBQUF4cEMsTUFBQXdiLFFBQUEsUUFFQXpiLE9BQUE0dEcsdUJBQ0FsekUsYUFBQTE2QixPQUFBNHRHLHVCQUdBNXRHLE9BQUE0dEcsc0JBQUEvdEYsV0FBQSxXQUNBZ25ELEVBQUF0d0QsVUFDQSxRQ1ZBLFdBQ0EsU0FBQXMzRixFQUFBcmhHLEVBQUFzaEcsRUFBQUMsR0FDQXRrRSxFQUFBajlCLEVBQUE3SCxRQUFBd1csUUFBQTJ5RixHQUFBbHJHLFNBQ0FtckcsSUFDQXRrRSxFQUFBNXBDLFVBQUFtb0IsSUFBQSxRQUFBLE9BQUE2bEYsSUFJQXBrRSxFQUFBLGlCQUFBM2UsTUFBQSxXQUNBLElBQUFrakYsRUFBQSxhQUNBQyxFQUFBLCtCQVdBLFNBQUFqcEYsSUFDQXlrQixFQUFBLGtCQUFBdWtFLEdBQUE1eEUsWUFBQSxVQVNBLE9BTkFxTixFQUFBeHBDLE1BQUF1OEIsU0FBQSxVQUNBeFgsS0FiQXlrQixFQUFBLGlCQUFBMU4sU0FBQSxVQUNBME4sRUFBQXVrRSxHQUFBanlFLFNBQUEsVUFFQTBOLEVBQUE1cEMsVUFBQThuQixHQUFBLFFBQUEsT0FBQSxTQUFBbmIsR0FDQXFoRyxFQUFBcmhHLEVBQUF5aEcsRUFBQWpwRixPQWNBLElBL0JBLEdDQUEsU0FBQXlrQixHQUNBQSxFQUFBem5DLEdBQUFrc0csUUFBQSxXQThCQSxPQTdCQWp1RyxLQUFBb0QsS0FBQSxXQUNBb21DLEVBQUF4cEMsTUFBQTBuQixHQUFBLFFBQUEsU0FBQW5iLEdBQ0EsSUFBQTJoRyxFQUFBMWtFLEVBQUF4cEMsTUFBQThoQixLQUFBLFdBQUEwbkIsRUFBQXhwQyxNQUFBMlIsS0FBQSxRQUNBeXFCLEVBQUFvTixFQUFBeHBDLE1BQUE4aEIsS0FBQSxpQkFBQSxTQUNBcXNGLEVBQUEza0UsRUFBQXhwQyxNQUFBOGhCLEtBQUEsZ0JBQ0Fzc0YsRUFBQTVrRSxFQUFBeHBDLE1BQUErWixHQUFBLCtCQW9CQSxPQWxCQXdHLFFBQUF5MUIsSUFBQWs0RCxFQUFBOXhFLEVBQUEreEUsR0FFQTNrRSxFQUFBLHVCQUFBMmtFLEVBQUEsTUFBQTU1RixJQUFBdlUsTUFBQW9ELEtBQUEsV0FDQSxJQUFBc0IsRUFBQThrQyxFQUFBeHBDLE1BQUE4aEIsS0FBQSxXQUFBMG5CLEVBQUF4cEMsTUFBQTJSLEtBQUEsUUFDQTA4RixFQUFBN2tFLEVBQUF4cEMsTUFBQThoQixLQUFBLGlCQUFBLFNBRUEwbkIsRUFBQTlrQyxHQUFBeTNCLFlBQUFreUUsR0FDQTdrRSxFQUFBeHBDLE1BQUFtOEIsWUFBQWt5RSxLQUdBN2tFLEVBQUF4cEMsTUFBQXU4QixTQUFBSCxJQUFBZ3lFLEdBQ0E1a0UsRUFBQXhwQyxNQUFBbThCLFlBQUFDLEdBQ0FvTixFQUFBMGtFLEdBQUEveEUsWUFBQUMsS0FFQW9OLEVBQUF4cEMsTUFBQTg3QixTQUFBTSxHQUNBb04sRUFBQTBrRSxHQUFBcHlFLFNBQUFNLEtBR0EsTUFJQXA4QixNQS9CQSxDQWlDQTRCLFFDakNBNG5DLEVBQUE1cEMsVUFBQThhLE1BQUEsV0FDQTh1QixFQUFBLGlCQUFBeWtFLFVBQ0F6a0UsRUFBQSxVQUFBMjJCLFlBQ0F5MkIsTUFBQSxrQkFDQXVCLE1BQUEiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMi4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNy0wMy0yMFQxODo1OVpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMi4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZyxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgQXJyYXkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9LFxuXG5cdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdFx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHRcdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdFx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdFx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNjEyNVxuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuXHQvLyBhcmd1bWVudHMuXG5cdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdFx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRcdGNvbnRleHQgPSBmbjtcblx0XHRcdGZuID0gdG1wO1xuXHRcdH1cblxuXHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHRcdH07XG5cblx0XHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRcdHJldHVybiBwcm94eTtcblx0fSxcblxuXHRub3c6IERhdGUubm93LFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDgtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0ZGlzYWJsZWRBbmNlc3RvciA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRkaXNhYmxlZEFuY2VzdG9yKCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW1wbGUgc2VsZWN0b3IgdGhhdCBjYW4gYmUgZmlsdGVyZWQgZGlyZWN0bHksIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdH1cblxuXHQvLyBDb21wbGV4IHNlbGVjdG9yLCBjb21wYXJlIHRoZSB0d28gc2V0cywgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMgKTtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdCAmJiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcbiAgICAgICAgLy8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgaXQuXG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgalF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsXG5cdFx0c2NhbGUgPSAxLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdGRvIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBqUXVlcnkuaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgbm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggXCI+dGJvZHlcIiwgZWxlbSApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwiYm94LXNpemluZzpib3JkZXItYm94O1wiICtcblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ0b3A6MSU7d2lkdGg6NTAlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZGl2U3R5bGUubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XG5cdFx0cGl4ZWxNYXJnaW5SaWdodFZhbCA9IGRpdlN0eWxlLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgcGl4ZWxNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xuXHRcdFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcHJvcGVydHkgbWFwcGVkIGFsb25nIHdoYXQgalF1ZXJ5LmNzc1Byb3BzIHN1Z2dlc3RzIG9yIHRvXG4vLyBhIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eS5cbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciByZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXTtcblx0aWYgKCAhcmV0ICkge1xuXHRcdHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xuXHR9XG5cdHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGksXG5cdFx0dmFsID0gMDtcblxuXHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0aWYgKCBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdGkgPSA0O1xuXG5cdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0fSBlbHNlIHtcblx0XHRpID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcblx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9IZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdGlmICggdmFsID09PSBcImF1dG9cIiApIHtcblx0XHR2YWwgPSBlbGVtWyBcIm9mZnNldFwiICsgbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICkgXTtcblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRqUXVlcnkucHJveHkoIHJlc3VsdC5zdG9wLCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmZyYXN0cnVjdHVyZS5odG1sI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jLCBkb2NFbGVtLCByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdHdpbiA9IGRvYy5kZWZhdWx0VmlldztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7XG5cdFx0XHRcdHRvcDogcGFyZW50T2Zmc2V0LnRvcCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKSxcblx0XHRcdFx0bGVmdDogcGFyZW50T2Zmc2V0LmxlZnQgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvKipcbiAqIGJ4U2xpZGVyIHY0LjIuMTJcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUgU3RldmVuIFdhbmRlcnNraVxuICogV3JpdHRlbiB3aGlsZSBkcmlua2luZyBCZWxnaWFuIGFsZXMgYW5kIGxpc3RlbmluZyB0byBqYXp6XG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQpXG4gKi9cblxuOyhmdW5jdGlvbigkKSB7XG5cbiAgdmFyIGRlZmF1bHRzID0ge1xuXG4gICAgLy8gR0VORVJBTFxuICAgIG1vZGU6ICdob3Jpem9udGFsJyxcbiAgICBzbGlkZVNlbGVjdG9yOiAnJyxcbiAgICBpbmZpbml0ZUxvb3A6IHRydWUsXG4gICAgaGlkZUNvbnRyb2xPbkVuZDogZmFsc2UsXG4gICAgc3BlZWQ6IDUwMCxcbiAgICBlYXNpbmc6IG51bGwsXG4gICAgc2xpZGVNYXJnaW46IDAsXG4gICAgc3RhcnRTbGlkZTogMCxcbiAgICByYW5kb21TdGFydDogZmFsc2UsXG4gICAgY2FwdGlvbnM6IGZhbHNlLFxuICAgIHRpY2tlcjogZmFsc2UsXG4gICAgdGlja2VySG92ZXI6IGZhbHNlLFxuICAgIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcbiAgICBhZGFwdGl2ZUhlaWdodFNwZWVkOiA1MDAsXG4gICAgdmlkZW86IGZhbHNlLFxuICAgIHVzZUNTUzogdHJ1ZSxcbiAgICBwcmVsb2FkSW1hZ2VzOiAndmlzaWJsZScsXG4gICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICBzbGlkZVpJbmRleDogNTAsXG4gICAgd3JhcHBlckNsYXNzOiAnYngtd3JhcHBlcicsXG5cbiAgICAvLyBUT1VDSFxuICAgIHRvdWNoRW5hYmxlZDogdHJ1ZSxcbiAgICBzd2lwZVRocmVzaG9sZDogNTAsXG4gICAgb25lVG9PbmVUb3VjaDogdHJ1ZSxcbiAgICBwcmV2ZW50RGVmYXVsdFN3aXBlWDogdHJ1ZSxcbiAgICBwcmV2ZW50RGVmYXVsdFN3aXBlWTogZmFsc2UsXG5cbiAgICAvLyBBQ0NFU1NJQklMSVRZXG4gICAgYXJpYUxpdmU6IHRydWUsXG4gICAgYXJpYUhpZGRlbjogdHJ1ZSxcblxuICAgIC8vIEtFWUJPQVJEXG4gICAga2V5Ym9hcmRFbmFibGVkOiBmYWxzZSxcblxuICAgIC8vIFBBR0VSXG4gICAgcGFnZXI6IHRydWUsXG4gICAgcGFnZXJUeXBlOiAnZnVsbCcsXG4gICAgcGFnZXJTaG9ydFNlcGFyYXRvcjogJyAvICcsXG4gICAgcGFnZXJTZWxlY3RvcjogbnVsbCxcbiAgICBidWlsZFBhZ2VyOiBudWxsLFxuICAgIHBhZ2VyQ3VzdG9tOiBudWxsLFxuXG4gICAgLy8gQ09OVFJPTFNcbiAgICBjb250cm9sczogdHJ1ZSxcbiAgICBuZXh0VGV4dDogJ05leHQnLFxuICAgIHByZXZUZXh0OiAnUHJldicsXG4gICAgbmV4dFNlbGVjdG9yOiBudWxsLFxuICAgIHByZXZTZWxlY3RvcjogbnVsbCxcbiAgICBhdXRvQ29udHJvbHM6IGZhbHNlLFxuICAgIHN0YXJ0VGV4dDogJ1N0YXJ0JyxcbiAgICBzdG9wVGV4dDogJ1N0b3AnLFxuICAgIGF1dG9Db250cm9sc0NvbWJpbmU6IGZhbHNlLFxuICAgIGF1dG9Db250cm9sc1NlbGVjdG9yOiBudWxsLFxuXG4gICAgLy8gQVVUT1xuICAgIGF1dG86IGZhbHNlLFxuICAgIHBhdXNlOiA0MDAwLFxuICAgIGF1dG9TdGFydDogdHJ1ZSxcbiAgICBhdXRvRGlyZWN0aW9uOiAnbmV4dCcsXG4gICAgc3RvcEF1dG9PbkNsaWNrOiBmYWxzZSxcbiAgICBhdXRvSG92ZXI6IGZhbHNlLFxuICAgIGF1dG9EZWxheTogMCxcbiAgICBhdXRvU2xpZGVGb3JPbmVQYWdlOiBmYWxzZSxcblxuICAgIC8vIENBUk9VU0VMXG4gICAgbWluU2xpZGVzOiAxLFxuICAgIG1heFNsaWRlczogMSxcbiAgICBtb3ZlU2xpZGVzOiAwLFxuICAgIHNsaWRlV2lkdGg6IDAsXG4gICAgc2hyaW5rSXRlbXM6IGZhbHNlLFxuXG4gICAgLy8gQ0FMTEJBQ0tTXG4gICAgb25TbGlkZXJMb2FkOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgb25TbGlkZUJlZm9yZTogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICAgIG9uU2xpZGVBZnRlcjogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICAgIG9uU2xpZGVOZXh0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgb25TbGlkZVByZXY6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICBvblNsaWRlclJlc2l6ZTogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuXHRvbkF1dG9DaGFuZ2U6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSAvL2NhbGxzIHdoZW4gYXV0byBzbGlkZXMgc3RhcnRzIGFuZCBzdG9wc1xuICB9O1xuXG4gICQuZm4uYnhTbGlkZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnQgbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAodGhpcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICQodGhpcykuYnhTbGlkZXIob3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGNyZWF0ZSBhIG5hbWVzcGFjZSB0byBiZSB1c2VkIHRocm91Z2hvdXQgdGhlIHBsdWdpblxuICAgIHZhciBzbGlkZXIgPSB7fSxcbiAgICAvLyBzZXQgYSByZWZlcmVuY2UgdG8gb3VyIHNsaWRlciBlbGVtZW50XG4gICAgZWwgPSB0aGlzLFxuICAgIC8vIGdldCB0aGUgb3JpZ2luYWwgd2luZG93IGRpbWVucyAodGhhbmtzIGEgbG90IElFKVxuICAgIHdpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCksXG4gICAgd2luZG93SGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuXG4gICAgLy8gUmV0dXJuIGlmIHNsaWRlciBpcyBhbHJlYWR5IGluaXRpYWxpemVkXG4gICAgaWYgKCQoZWwpLmRhdGEoJ2J4U2xpZGVyJykpIHsgcmV0dXJuOyB9XG5cbiAgICAvKipcbiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAqID0gUFJJVkFURSBGVU5DVElPTlNcbiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgbmFtZXNwYWNlIHNldHRpbmdzIHRvIGJlIHVzZWQgdGhyb3VnaG91dCBwbHVnaW5cbiAgICAgKi9cbiAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gUmV0dXJuIGlmIHNsaWRlciBpcyBhbHJlYWR5IGluaXRpYWxpemVkXG4gICAgICBpZiAoJChlbCkuZGF0YSgnYnhTbGlkZXInKSkgeyByZXR1cm47IH1cbiAgICAgIC8vIG1lcmdlIHVzZXItc3VwcGxpZWQgb3B0aW9ucyB3aXRoIHRoZSBkZWZhdWx0c1xuICAgICAgc2xpZGVyLnNldHRpbmdzID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgIC8vIHBhcnNlIHNsaWRlV2lkdGggc2V0dGluZ1xuICAgICAgc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGggPSBwYXJzZUludChzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCk7XG4gICAgICAvLyBzdG9yZSB0aGUgb3JpZ2luYWwgY2hpbGRyZW5cbiAgICAgIHNsaWRlci5jaGlsZHJlbiA9IGVsLmNoaWxkcmVuKHNsaWRlci5zZXR0aW5ncy5zbGlkZVNlbGVjdG9yKTtcbiAgICAgIC8vIGNoZWNrIGlmIGFjdHVhbCBudW1iZXIgb2Ygc2xpZGVzIGlzIGxlc3MgdGhhbiBtaW5TbGlkZXMgLyBtYXhTbGlkZXNcbiAgICAgIGlmIChzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIDwgc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcykgeyBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzID0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aDsgfVxuICAgICAgaWYgKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggPCBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzKSB7IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgPSBzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoOyB9XG4gICAgICAvLyBpZiByYW5kb20gc3RhcnQsIHNldCB0aGUgc3RhcnRTbGlkZSBzZXR0aW5nIHRvIHJhbmRvbSBudW1iZXJcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucmFuZG9tU3RhcnQpIHsgc2xpZGVyLnNldHRpbmdzLnN0YXJ0U2xpZGUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoKTsgfVxuICAgICAgLy8gc3RvcmUgYWN0aXZlIHNsaWRlIGluZm9ybWF0aW9uXG4gICAgICBzbGlkZXIuYWN0aXZlID0geyBpbmRleDogc2xpZGVyLnNldHRpbmdzLnN0YXJ0U2xpZGUgfTtcbiAgICAgIC8vIHN0b3JlIGlmIHRoZSBzbGlkZXIgaXMgaW4gY2Fyb3VzZWwgbW9kZSAoZGlzcGxheWluZyAvIG1vdmluZyBtdWx0aXBsZSBzbGlkZXMpXG4gICAgICBzbGlkZXIuY2Fyb3VzZWwgPSBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzID4gMSB8fCBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzID4gMSA/IHRydWUgOiBmYWxzZTtcbiAgICAgIC8vIGlmIGNhcm91c2VsLCBmb3JjZSBwcmVsb2FkSW1hZ2VzID0gJ2FsbCdcbiAgICAgIGlmIChzbGlkZXIuY2Fyb3VzZWwpIHsgc2xpZGVyLnNldHRpbmdzLnByZWxvYWRJbWFnZXMgPSAnYWxsJzsgfVxuICAgICAgLy8gY2FsY3VsYXRlIHRoZSBtaW4gLyBtYXggd2lkdGggdGhyZXNob2xkcyBiYXNlZCBvbiBtaW4gLyBtYXggbnVtYmVyIG9mIHNsaWRlc1xuICAgICAgLy8gdXNlZCB0byBzZXR1cCBhbmQgdXBkYXRlIGNhcm91c2VsIHNsaWRlcyBkaW1lbnNpb25zXG4gICAgICBzbGlkZXIubWluVGhyZXNob2xkID0gKHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXMgKiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCkgKyAoKHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXMgLSAxKSAqIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbik7XG4gICAgICBzbGlkZXIubWF4VGhyZXNob2xkID0gKHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgKiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCkgKyAoKHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgLSAxKSAqIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbik7XG4gICAgICAvLyBzdG9yZSB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgc2xpZGVyIChpZiBjdXJyZW50bHkgYW5pbWF0aW5nLCB3b3JraW5nIGlzIHRydWUpXG4gICAgICBzbGlkZXIud29ya2luZyA9IGZhbHNlO1xuICAgICAgLy8gaW5pdGlhbGl6ZSB0aGUgY29udHJvbHMgb2JqZWN0XG4gICAgICBzbGlkZXIuY29udHJvbHMgPSB7fTtcbiAgICAgIC8vIGluaXRpYWxpemUgYW4gYXV0byBpbnRlcnZhbFxuICAgICAgc2xpZGVyLmludGVydmFsID0gbnVsbDtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm9wZXJ0eSB0byB1c2UgZm9yIHRyYW5zaXRpb25zXG4gICAgICBzbGlkZXIuYW5pbVByb3AgPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJyA/ICd0b3AnIDogJ2xlZnQnO1xuICAgICAgLy8gZGV0ZXJtaW5lIGlmIGhhcmR3YXJlIGFjY2VsZXJhdGlvbiBjYW4gYmUgdXNlZFxuICAgICAgc2xpZGVyLnVzaW5nQ1NTID0gc2xpZGVyLnNldHRpbmdzLnVzZUNTUyAmJiBzbGlkZXIuc2V0dGluZ3MubW9kZSAhPT0gJ2ZhZGUnICYmIChmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gY3JlYXRlIG91ciB0ZXN0IGRpdiBlbGVtZW50XG4gICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgLy8gY3NzIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICAgICAgICBwcm9wcyA9IFsnV2Via2l0UGVyc3BlY3RpdmUnLCAnTW96UGVyc3BlY3RpdmUnLCAnT1BlcnNwZWN0aXZlJywgJ21zUGVyc3BlY3RpdmUnXTtcbiAgICAgICAgLy8gdGVzdCBmb3IgZWFjaCBwcm9wZXJ0eVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGRpdi5zdHlsZVtwcm9wc1tpXV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2xpZGVyLmNzc1ByZWZpeCA9IHByb3BzW2ldLnJlcGxhY2UoJ1BlcnNwZWN0aXZlJywgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBzbGlkZXIuYW5pbVByb3AgPSAnLScgKyBzbGlkZXIuY3NzUHJlZml4ICsgJy10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0oKSk7XG4gICAgICAvLyBpZiB2ZXJ0aWNhbCBtb2RlIGFsd2F5cyBtYWtlIG1heFNsaWRlcyBhbmQgbWluU2xpZGVzIGVxdWFsXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcpIHsgc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyA9IHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXM7IH1cbiAgICAgIC8vIHNhdmUgb3JpZ2luYWwgc3R5bGUgZGF0YVxuICAgICAgZWwuZGF0YSgnb3JpZ1N0eWxlJywgZWwuYXR0cignc3R5bGUnKSk7XG4gICAgICBlbC5jaGlsZHJlbihzbGlkZXIuc2V0dGluZ3Muc2xpZGVTZWxlY3RvcikuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgJCh0aGlzKS5kYXRhKCdvcmlnU3R5bGUnLCAkKHRoaXMpLmF0dHIoJ3N0eWxlJykpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHBlcmZvcm0gYWxsIERPTSAvIENTUyBtb2RpZmljYXRpb25zXG4gICAgICBzZXR1cCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhbGwgRE9NIGFuZCBDU1MgbW9kaWZpY2F0aW9uc1xuICAgICAqL1xuICAgIHZhciBzZXR1cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHByZWxvYWRTZWxlY3RvciA9IHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuc2V0dGluZ3Muc3RhcnRTbGlkZSk7IC8vIHNldCB0aGUgZGVmYXVsdCBwcmVsb2FkIHNlbGVjdG9yICh2aXNpYmxlKVxuXG4gICAgICAvLyB3cmFwIGVsIGluIGEgd3JhcHBlclxuICAgICAgZWwud3JhcCgnPGRpdiBjbGFzcz1cIicgKyBzbGlkZXIuc2V0dGluZ3Mud3JhcHBlckNsYXNzICsgJ1wiPjxkaXYgY2xhc3M9XCJieC12aWV3cG9ydFwiPjwvZGl2PjwvZGl2PicpO1xuICAgICAgLy8gc3RvcmUgYSBuYW1lc3BhY2UgcmVmZXJlbmNlIHRvIC5ieC12aWV3cG9ydFxuICAgICAgc2xpZGVyLnZpZXdwb3J0ID0gZWwucGFyZW50KCk7XG5cbiAgICAgIC8vIGFkZCBhcmlhLWxpdmUgaWYgdGhlIHNldHRpbmcgaXMgZW5hYmxlZCBhbmQgdGlja2VyIG1vZGUgaXMgZGlzYWJsZWRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXJpYUxpdmUgJiYgIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHtcbiAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmF0dHIoJ2FyaWEtbGl2ZScsICdwb2xpdGUnKTtcbiAgICAgIH1cbiAgICAgIC8vIGFkZCBhIGxvYWRpbmcgZGl2IHRvIGRpc3BsYXkgd2hpbGUgaW1hZ2VzIGFyZSBsb2FkaW5nXG4gICAgICBzbGlkZXIubG9hZGVyID0gJCgnPGRpdiBjbGFzcz1cImJ4LWxvYWRpbmdcIiAvPicpO1xuICAgICAgc2xpZGVyLnZpZXdwb3J0LnByZXBlbmQoc2xpZGVyLmxvYWRlcik7XG4gICAgICAvLyBzZXQgZWwgdG8gYSBtYXNzaXZlIHdpZHRoLCB0byBob2xkIGFueSBuZWVkZWQgc2xpZGVzXG4gICAgICAvLyBhbHNvIHN0cmlwIGFueSBtYXJnaW4gYW5kIHBhZGRpbmcgZnJvbSBlbFxuICAgICAgZWwuY3NzKHtcbiAgICAgICAgd2lkdGg6IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAqIDEwMDAgKyAyMTUpICsgJyUnIDogJ2F1dG8nLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSk7XG4gICAgICAvLyBpZiB1c2luZyBDU1MsIGFkZCB0aGUgZWFzaW5nIHByb3BlcnR5XG4gICAgICBpZiAoc2xpZGVyLnVzaW5nQ1NTICYmIHNsaWRlci5zZXR0aW5ncy5lYXNpbmcpIHtcbiAgICAgICAgZWwuY3NzKCctJyArIHNsaWRlci5jc3NQcmVmaXggKyAnLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uJywgc2xpZGVyLnNldHRpbmdzLmVhc2luZyk7XG4gICAgICAvLyBpZiBub3QgdXNpbmcgQ1NTIGFuZCBubyBlYXNpbmcgdmFsdWUgd2FzIHN1cHBsaWVkLCB1c2UgdGhlIGRlZmF1bHQgSlMgYW5pbWF0aW9uIGVhc2luZyAoc3dpbmcpXG4gICAgICB9IGVsc2UgaWYgKCFzbGlkZXIuc2V0dGluZ3MuZWFzaW5nKSB7XG4gICAgICAgIHNsaWRlci5zZXR0aW5ncy5lYXNpbmcgPSAnc3dpbmcnO1xuICAgICAgfVxuICAgICAgLy8gbWFrZSBtb2RpZmljYXRpb25zIHRvIHRoZSB2aWV3cG9ydCAoLmJ4LXZpZXdwb3J0KVxuICAgICAgc2xpZGVyLnZpZXdwb3J0LmNzcyh7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0pO1xuICAgICAgc2xpZGVyLnZpZXdwb3J0LnBhcmVudCgpLmNzcyh7XG4gICAgICAgIG1heFdpZHRoOiBnZXRWaWV3cG9ydE1heFdpZHRoKClcbiAgICAgIH0pO1xuICAgICAgLy8gYXBwbHkgY3NzIHRvIGFsbCBzbGlkZXIgY2hpbGRyZW5cbiAgICAgIHNsaWRlci5jaGlsZHJlbi5jc3Moe1xuICAgICAgICAvLyB0aGUgZmxvYXQgYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgd29yZCBpbiBjb21wcmVzc29ycyBsaWtlIFlVSSBjb21wcmVzc29yIGFuZCBuZWVkIHRvIGJlIHF1b3RlZCAjNDhcbiAgICAgICAgJ2Zsb2F0Jzogc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/ICdsZWZ0JyA6ICdub25lJyxcbiAgICAgICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9KTtcbiAgICAgIC8vIGFwcGx5IHRoZSBjYWxjdWxhdGVkIHdpZHRoIGFmdGVyIHRoZSBmbG9hdCBpcyBhcHBsaWVkIHRvIHByZXZlbnQgc2Nyb2xsYmFyIGludGVyZmVyZW5jZVxuICAgICAgc2xpZGVyLmNoaWxkcmVuLmNzcygnd2lkdGgnLCBnZXRTbGlkZVdpZHRoKCkpO1xuICAgICAgLy8gaWYgc2xpZGVNYXJnaW4gaXMgc3VwcGxpZWQsIGFkZCB0aGUgY3NzXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyAmJiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4gPiAwKSB7IHNsaWRlci5jaGlsZHJlbi5jc3MoJ21hcmdpblJpZ2h0Jywgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKTsgfVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnICYmIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbiA+IDApIHsgc2xpZGVyLmNoaWxkcmVuLmNzcygnbWFyZ2luQm90dG9tJywgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKTsgfVxuICAgICAgLy8gaWYgXCJmYWRlXCIgbW9kZSwgYWRkIHBvc2l0aW9uaW5nIGFuZCB6LWluZGV4IENTU1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnZmFkZScpIHtcbiAgICAgICAgc2xpZGVyLmNoaWxkcmVuLmNzcyh7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgekluZGV4OiAwLFxuICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gcHJlcGFyZSB0aGUgei1pbmRleCBvbiB0aGUgc2hvd2luZyBlbGVtZW50XG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuc2V0dGluZ3Muc3RhcnRTbGlkZSkuY3NzKHt6SW5kZXg6IHNsaWRlci5zZXR0aW5ncy5zbGlkZVpJbmRleCwgZGlzcGxheTogJ2Jsb2NrJ30pO1xuICAgICAgfVxuICAgICAgLy8gY3JlYXRlIGFuIGVsZW1lbnQgdG8gY29udGFpbiBhbGwgc2xpZGVyIGNvbnRyb2xzIChwYWdlciwgc3RhcnQgLyBzdG9wLCBldGMpXG4gICAgICBzbGlkZXIuY29udHJvbHMuZWwgPSAkKCc8ZGl2IGNsYXNzPVwiYngtY29udHJvbHNcIiAvPicpO1xuICAgICAgLy8gaWYgY2FwdGlvbnMgYXJlIHJlcXVlc3RlZCwgYWRkIHRoZW1cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuY2FwdGlvbnMpIHsgYXBwZW5kQ2FwdGlvbnMoKTsgfVxuICAgICAgLy8gY2hlY2sgaWYgc3RhcnRTbGlkZSBpcyBsYXN0IHNsaWRlXG4gICAgICBzbGlkZXIuYWN0aXZlLmxhc3QgPSBzbGlkZXIuc2V0dGluZ3Muc3RhcnRTbGlkZSA9PT0gZ2V0UGFnZXJRdHkoKSAtIDE7XG4gICAgICAvLyBpZiB2aWRlbyBpcyB0cnVlLCBzZXQgdXAgdGhlIGZpdFZpZHMgcGx1Z2luXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnZpZGVvKSB7IGVsLmZpdFZpZHMoKTsgfVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wcmVsb2FkSW1hZ2VzID09PSAnYWxsJyB8fCBzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7IHByZWxvYWRTZWxlY3RvciA9IHNsaWRlci5jaGlsZHJlbjsgfVxuICAgICAgLy8gb25seSBjaGVjayBmb3IgY29udHJvbCBhZGRpdGlvbiBpZiBub3QgaW4gXCJ0aWNrZXJcIiBtb2RlXG4gICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHtcbiAgICAgICAgLy8gaWYgY29udHJvbHMgYXJlIHJlcXVlc3RlZCwgYWRkIHRoZW1cbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5jb250cm9scykgeyBhcHBlbmRDb250cm9scygpOyB9XG4gICAgICAgIC8vIGlmIGF1dG8gaXMgdHJ1ZSwgYW5kIGF1dG8gY29udHJvbHMgYXJlIHJlcXVlc3RlZCwgYWRkIHRoZW1cbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvICYmIHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHMpIHsgYXBwZW5kQ29udHJvbHNBdXRvKCk7IH1cbiAgICAgICAgLy8gaWYgcGFnZXIgaXMgcmVxdWVzdGVkLCBhZGQgaXRcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wYWdlcikgeyBhcHBlbmRQYWdlcigpOyB9XG4gICAgICAgIC8vIGlmIGFueSBjb250cm9sIG9wdGlvbiBpcyByZXF1ZXN0ZWQsIGFkZCB0aGUgY29udHJvbHMgd3JhcHBlclxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmNvbnRyb2xzIHx8IHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHMgfHwgc2xpZGVyLnNldHRpbmdzLnBhZ2VyKSB7IHNsaWRlci52aWV3cG9ydC5hZnRlcihzbGlkZXIuY29udHJvbHMuZWwpOyB9XG4gICAgICAvLyBpZiB0aWNrZXIgbW9kZSwgZG8gbm90IGFsbG93IGEgcGFnZXJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlci5zZXR0aW5ncy5wYWdlciA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgbG9hZEVsZW1lbnRzKHByZWxvYWRTZWxlY3Rvciwgc3RhcnQpO1xuICAgIH07XG5cbiAgICB2YXIgbG9hZEVsZW1lbnRzID0gZnVuY3Rpb24oc2VsZWN0b3IsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgdG90YWwgPSBzZWxlY3Rvci5maW5kKCdpbWc6bm90KFtzcmM9XCJcIl0pLCBpZnJhbWUnKS5sZW5ndGgsXG4gICAgICBjb3VudCA9IDA7XG4gICAgICBpZiAodG90YWwgPT09IDApIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VsZWN0b3IuZmluZCgnaW1nOm5vdChbc3JjPVwiXCJdKSwgaWZyYW1lJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgJCh0aGlzKS5vbmUoJ2xvYWQgZXJyb3InLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA9PT0gdG90YWwpIHsgY2FsbGJhY2soKTsgfVxuICAgICAgICB9KS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh0aGlzLmNvbXBsZXRlIHx8IHRoaXMuc3JjID09ICcnKSB7ICQodGhpcykudHJpZ2dlcignbG9hZCcpOyB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IHRoZSBzbGlkZXJcbiAgICAgKi9cbiAgICB2YXIgc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIGluZmluaXRlIGxvb3AsIHByZXBhcmUgYWRkaXRpb25hbCBzbGlkZXNcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wICYmIHNsaWRlci5zZXR0aW5ncy5tb2RlICE9PSAnZmFkZScgJiYgIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHtcbiAgICAgICAgdmFyIHNsaWNlICAgID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcgPyBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzIDogc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyxcbiAgICAgICAgc2xpY2VBcHBlbmQgID0gc2xpZGVyLmNoaWxkcmVuLnNsaWNlKDAsIHNsaWNlKS5jbG9uZSh0cnVlKS5hZGRDbGFzcygnYngtY2xvbmUnKSxcbiAgICAgICAgc2xpY2VQcmVwZW5kID0gc2xpZGVyLmNoaWxkcmVuLnNsaWNlKC1zbGljZSkuY2xvbmUodHJ1ZSkuYWRkQ2xhc3MoJ2J4LWNsb25lJyk7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXJpYUhpZGRlbikge1xuICAgICAgICAgIHNsaWNlQXBwZW5kLmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICAgICAgc2xpY2VQcmVwZW5kLmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWwuYXBwZW5kKHNsaWNlQXBwZW5kKS5wcmVwZW5kKHNsaWNlUHJlcGVuZCk7XG4gICAgICB9XG4gICAgICAvLyByZW1vdmUgdGhlIGxvYWRpbmcgRE9NIGVsZW1lbnRcbiAgICAgIHNsaWRlci5sb2FkZXIucmVtb3ZlKCk7XG4gICAgICAvLyBzZXQgdGhlIGxlZnQgLyB0b3AgcG9zaXRpb24gb2YgXCJlbFwiXG4gICAgICBzZXRTbGlkZVBvc2l0aW9uKCk7XG4gICAgICAvLyBpZiBcInZlcnRpY2FsXCIgbW9kZSwgYWx3YXlzIHVzZSBhZGFwdGl2ZUhlaWdodCB0byBwcmV2ZW50IG9kZCBiZWhhdmlvclxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7IHNsaWRlci5zZXR0aW5ncy5hZGFwdGl2ZUhlaWdodCA9IHRydWU7IH1cbiAgICAgIC8vIHNldCB0aGUgdmlld3BvcnQgaGVpZ2h0XG4gICAgICBzbGlkZXIudmlld3BvcnQuaGVpZ2h0KGdldFZpZXdwb3J0SGVpZ2h0KCkpO1xuICAgICAgLy8gbWFrZSBzdXJlIGV2ZXJ5dGhpbmcgaXMgcG9zaXRpb25lZCBqdXN0IHJpZ2h0IChzYW1lIGFzIGEgd2luZG93IHJlc2l6ZSlcbiAgICAgIGVsLnJlZHJhd1NsaWRlcigpO1xuICAgICAgLy8gb25TbGlkZXJMb2FkIGNhbGxiYWNrXG4gICAgICBzbGlkZXIuc2V0dGluZ3Mub25TbGlkZXJMb2FkLmNhbGwoZWwsIHNsaWRlci5hY3RpdmUuaW5kZXgpO1xuICAgICAgLy8gc2xpZGVyIGhhcyBiZWVuIGZ1bGx5IGluaXRpYWxpemVkXG4gICAgICBzbGlkZXIuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgLy8gYmluZCB0aGUgcmVzaXplIGNhbGwgdG8gdGhlIHdpbmRvd1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5yZXNwb25zaXZlKSB7ICQod2luZG93KS5iaW5kKCdyZXNpemUnLCByZXNpemVXaW5kb3cpOyB9XG4gICAgICAvLyBpZiBhdXRvIGlzIHRydWUgYW5kIGhhcyBtb3JlIHRoYW4gMSBwYWdlLCBzdGFydCB0aGUgc2hvd1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvICYmIHNsaWRlci5zZXR0aW5ncy5hdXRvU3RhcnQgJiYgKGdldFBhZ2VyUXR5KCkgPiAxIHx8IHNsaWRlci5zZXR0aW5ncy5hdXRvU2xpZGVGb3JPbmVQYWdlKSkgeyBpbml0QXV0bygpOyB9XG4gICAgICAvLyBpZiB0aWNrZXIgaXMgdHJ1ZSwgc3RhcnQgdGhlIHRpY2tlclxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHsgaW5pdFRpY2tlcigpOyB9XG4gICAgICAvLyBpZiBwYWdlciBpcyByZXF1ZXN0ZWQsIG1ha2UgdGhlIGFwcHJvcHJpYXRlIHBhZ2VyIGxpbmsgYWN0aXZlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnBhZ2VyKSB7IHVwZGF0ZVBhZ2VyQWN0aXZlKHNsaWRlci5zZXR0aW5ncy5zdGFydFNsaWRlKTsgfVxuICAgICAgLy8gY2hlY2sgZm9yIGFueSB1cGRhdGVzIHRvIHRoZSBjb250cm9scyAobGlrZSBoaWRlQ29udHJvbE9uRW5kIHVwZGF0ZXMpXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmNvbnRyb2xzKSB7IHVwZGF0ZURpcmVjdGlvbkNvbnRyb2xzKCk7IH1cbiAgICAgIC8vIGlmIHRvdWNoRW5hYmxlZCBpcyB0cnVlLCBzZXR1cCB0aGUgdG91Y2ggZXZlbnRzXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnRvdWNoRW5hYmxlZCAmJiAhc2xpZGVyLnNldHRpbmdzLnRpY2tlcikgeyBpbml0VG91Y2goKTsgfVxuICAgICAgLy8gaWYga2V5Ym9hcmRFbmFibGVkIGlzIHRydWUsIHNldHVwIHRoZSBrZXlib2FyZCBldmVudHNcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3Mua2V5Ym9hcmRFbmFibGVkICYmICFzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7XG4gICAgICAgICQoZG9jdW1lbnQpLmtleWRvd24oa2V5UHJlc3MpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjYWxjdWxhdGVkIGhlaWdodCBvZiB0aGUgdmlld3BvcnQsIHVzZWQgdG8gZGV0ZXJtaW5lIGVpdGhlciBhZGFwdGl2ZUhlaWdodCBvciB0aGUgbWF4SGVpZ2h0IHZhbHVlXG4gICAgICovXG4gICAgdmFyIGdldFZpZXdwb3J0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaGVpZ2h0ID0gMDtcbiAgICAgIC8vIGZpcnN0IGRldGVybWluZSB3aGljaCBjaGlsZHJlbiAoc2xpZGVzKSBzaG91bGQgYmUgdXNlZCBpbiBvdXIgaGVpZ2h0IGNhbGN1bGF0aW9uXG4gICAgICB2YXIgY2hpbGRyZW4gPSAkKCk7XG4gICAgICAvLyBpZiBtb2RlIGlzIG5vdCBcInZlcnRpY2FsXCIgYW5kIGFkYXB0aXZlSGVpZ2h0IGlzIGZhbHNlLCBpbmNsdWRlIGFsbCBjaGlsZHJlblxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlICE9PSAndmVydGljYWwnICYmICFzbGlkZXIuc2V0dGluZ3MuYWRhcHRpdmVIZWlnaHQpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBzbGlkZXIuY2hpbGRyZW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBub3QgY2Fyb3VzZWwsIHJldHVybiB0aGUgc2luZ2xlIGFjdGl2ZSBjaGlsZFxuICAgICAgICBpZiAoIXNsaWRlci5jYXJvdXNlbCkge1xuICAgICAgICAgIGNoaWxkcmVuID0gc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5hY3RpdmUuaW5kZXgpO1xuICAgICAgICAvLyBpZiBjYXJvdXNlbCwgcmV0dXJuIGEgc2xpY2Ugb2YgY2hpbGRyZW5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBnZXQgdGhlIGluZGl2aWR1YWwgc2xpZGUgaW5kZXhcbiAgICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPT09IDEgPyBzbGlkZXIuYWN0aXZlLmluZGV4IDogc2xpZGVyLmFjdGl2ZS5pbmRleCAqIGdldE1vdmVCeSgpO1xuICAgICAgICAgIC8vIGFkZCB0aGUgY3VycmVudCBzbGlkZSB0byB0aGUgY2hpbGRyZW5cbiAgICAgICAgICBjaGlsZHJlbiA9IHNsaWRlci5jaGlsZHJlbi5lcShjdXJyZW50SW5kZXgpO1xuICAgICAgICAgIC8vIGN5Y2xlIHRocm91Z2ggdGhlIHJlbWFpbmluZyBcInNob3dpbmdcIiBzbGlkZXNcbiAgICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgLSAxOyBpKyspIHtcbiAgICAgICAgICAgIC8vIGlmIGxvb3BlZCBiYWNrIHRvIHRoZSBzdGFydFxuICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCArIGkgPj0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmFkZChzbGlkZXIuY2hpbGRyZW4uZXEoaSAtIDEpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uYWRkKHNsaWRlci5jaGlsZHJlbi5lcShjdXJyZW50SW5kZXggKyBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBpZiBcInZlcnRpY2FsXCIgbW9kZSwgY2FsY3VsYXRlIHRoZSBzdW0gb2YgdGhlIGhlaWdodHMgb2YgdGhlIGNoaWxkcmVuXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgY2hpbGRyZW4uZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgIGhlaWdodCArPSAkKHRoaXMpLm91dGVySGVpZ2h0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBhZGQgdXNlci1zdXBwbGllZCBtYXJnaW5zXG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4gPiAwKSB7XG4gICAgICAgICAgaGVpZ2h0ICs9IHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbiAqIChzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzIC0gMSk7XG4gICAgICAgIH1cbiAgICAgIC8vIGlmIG5vdCBcInZlcnRpY2FsXCIgbW9kZSwgY2FsY3VsYXRlIHRoZSBtYXggaGVpZ2h0IG9mIHRoZSBjaGlsZHJlblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGVpZ2h0ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkKHRoaXMpLm91dGVySGVpZ2h0KGZhbHNlKTtcbiAgICAgICAgfSkuZ2V0KCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2xpZGVyLnZpZXdwb3J0LmNzcygnYm94LXNpemluZycpID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAgICAgaGVpZ2h0ICs9IHBhcnNlRmxvYXQoc2xpZGVyLnZpZXdwb3J0LmNzcygncGFkZGluZy10b3AnKSkgKyBwYXJzZUZsb2F0KHNsaWRlci52aWV3cG9ydC5jc3MoJ3BhZGRpbmctYm90dG9tJykpICtcbiAgICAgICAgICAgICAgcGFyc2VGbG9hdChzbGlkZXIudmlld3BvcnQuY3NzKCdib3JkZXItdG9wLXdpZHRoJykpICsgcGFyc2VGbG9hdChzbGlkZXIudmlld3BvcnQuY3NzKCdib3JkZXItYm90dG9tLXdpZHRoJykpO1xuICAgICAgfSBlbHNlIGlmIChzbGlkZXIudmlld3BvcnQuY3NzKCdib3gtc2l6aW5nJykgPT09ICdwYWRkaW5nLWJveCcpIHtcbiAgICAgICAgaGVpZ2h0ICs9IHBhcnNlRmxvYXQoc2xpZGVyLnZpZXdwb3J0LmNzcygncGFkZGluZy10b3AnKSkgKyBwYXJzZUZsb2F0KHNsaWRlci52aWV3cG9ydC5jc3MoJ3BhZGRpbmctYm90dG9tJykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGVpZ2h0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjYWxjdWxhdGVkIHdpZHRoIHRvIGJlIHVzZWQgZm9yIHRoZSBvdXRlciB3cmFwcGVyIC8gdmlld3BvcnRcbiAgICAgKi9cbiAgICB2YXIgZ2V0Vmlld3BvcnRNYXhXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHdpZHRoID0gJzEwMCUnO1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoID4gMCkge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIHdpZHRoID0gKHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgKiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCkgKyAoKHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgLSAxKSAqIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2lkdGggPSBzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHdpZHRoO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjYWxjdWxhdGVkIHdpZHRoIHRvIGJlIGFwcGxpZWQgdG8gZWFjaCBzbGlkZVxuICAgICAqL1xuICAgIHZhciBnZXRTbGlkZVdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbmV3RWxXaWR0aCA9IHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoLCAvLyBzdGFydCB3aXRoIGFueSB1c2VyLXN1cHBsaWVkIHNsaWRlIHdpZHRoXG4gICAgICB3cmFwV2lkdGggICAgICA9IHNsaWRlci52aWV3cG9ydC53aWR0aCgpOyAgICAvLyBnZXQgdGhlIGN1cnJlbnQgdmlld3BvcnQgd2lkdGhcbiAgICAgIC8vIGlmIHNsaWRlIHdpZHRoIHdhcyBub3Qgc3VwcGxpZWQsIG9yIGlzIGxhcmdlciB0aGFuIHRoZSB2aWV3cG9ydCB1c2UgdGhlIHZpZXdwb3J0IHdpZHRoXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGggPT09IDAgfHxcbiAgICAgICAgKHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoID4gd3JhcFdpZHRoICYmICFzbGlkZXIuY2Fyb3VzZWwpIHx8XG4gICAgICAgIHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIG5ld0VsV2lkdGggPSB3cmFwV2lkdGg7XG4gICAgICAvLyBpZiBjYXJvdXNlbCwgdXNlIHRoZSB0aHJlc2hvbGRzIHRvIGRldGVybWluZSB0aGUgd2lkdGhcbiAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyA+IDEgJiYgc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICBpZiAod3JhcFdpZHRoID4gc2xpZGVyLm1heFRocmVzaG9sZCkge1xuICAgICAgICAgIHJldHVybiBuZXdFbFdpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKHdyYXBXaWR0aCA8IHNsaWRlci5taW5UaHJlc2hvbGQpIHtcbiAgICAgICAgICBuZXdFbFdpZHRoID0gKHdyYXBXaWR0aCAtIChzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4gKiAoc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyAtIDEpKSkgLyBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzO1xuICAgICAgICB9IGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5zaHJpbmtJdGVtcykge1xuICAgICAgICAgIG5ld0VsV2lkdGggPSBNYXRoLmZsb29yKCh3cmFwV2lkdGggKyBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pIC8gKE1hdGguY2VpbCgod3JhcFdpZHRoICsgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKSAvIChuZXdFbFdpZHRoICsgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKSkpIC0gc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld0VsV2lkdGg7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBzbGlkZXMgY3VycmVudGx5IHZpc2libGUgaW4gdGhlIHZpZXdwb3J0IChpbmNsdWRlcyBwYXJ0aWFsbHkgdmlzaWJsZSBzbGlkZXMpXG4gICAgICovXG4gICAgdmFyIGdldE51bWJlclNsaWRlc1Nob3dpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzbGlkZXNTaG93aW5nID0gMSxcbiAgICAgIGNoaWxkV2lkdGggPSBudWxsO1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgJiYgc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGggPiAwKSB7XG4gICAgICAgIC8vIGlmIHZpZXdwb3J0IGlzIHNtYWxsZXIgdGhhbiBtaW5UaHJlc2hvbGQsIHJldHVybiBtaW5TbGlkZXNcbiAgICAgICAgaWYgKHNsaWRlci52aWV3cG9ydC53aWR0aCgpIDwgc2xpZGVyLm1pblRocmVzaG9sZCkge1xuICAgICAgICAgIHNsaWRlc1Nob3dpbmcgPSBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzO1xuICAgICAgICAvLyBpZiB2aWV3cG9ydCBpcyBsYXJnZXIgdGhhbiBtYXhUaHJlc2hvbGQsIHJldHVybiBtYXhTbGlkZXNcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIudmlld3BvcnQud2lkdGgoKSA+IHNsaWRlci5tYXhUaHJlc2hvbGQpIHtcbiAgICAgICAgICBzbGlkZXNTaG93aW5nID0gc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcztcbiAgICAgICAgLy8gaWYgdmlld3BvcnQgaXMgYmV0d2VlbiBtaW4gLyBtYXggdGhyZXNob2xkcywgZGl2aWRlIHZpZXdwb3J0IHdpZHRoIGJ5IGZpcnN0IGNoaWxkIHdpZHRoXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hpbGRXaWR0aCA9IHNsaWRlci5jaGlsZHJlbi5maXJzdCgpLndpZHRoKCkgKyBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW47XG4gICAgICAgICAgc2xpZGVzU2hvd2luZyA9IE1hdGguZmxvb3IoKHNsaWRlci52aWV3cG9ydC53aWR0aCgpICtcbiAgICAgICAgICAgIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbikgLyBjaGlsZFdpZHRoKSB8fCAxO1xuICAgICAgICB9XG4gICAgICAvLyBpZiBcInZlcnRpY2FsXCIgbW9kZSwgc2xpZGVzIHNob3dpbmcgd2lsbCBhbHdheXMgYmUgbWluU2xpZGVzXG4gICAgICB9IGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIHNsaWRlc1Nob3dpbmcgPSBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWRlc1Nob3dpbmc7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBwYWdlcyAob25lIGZ1bGwgdmlld3BvcnQgb2Ygc2xpZGVzIGlzIG9uZSBcInBhZ2VcIilcbiAgICAgKi9cbiAgICB2YXIgZ2V0UGFnZXJRdHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwYWdlclF0eSA9IDAsXG4gICAgICBicmVha1BvaW50ID0gMCxcbiAgICAgIGNvdW50ZXIgPSAwO1xuICAgICAgLy8gaWYgbW92ZVNsaWRlcyBpcyBzcGVjaWZpZWQgYnkgdGhlIHVzZXJcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcyA+IDApIHtcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3ApIHtcbiAgICAgICAgICBwYWdlclF0eSA9IE1hdGguY2VpbChzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC8gZ2V0TW92ZUJ5KCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHdoZW4gYnJlYWtwb2ludCBnb2VzIGFib3ZlIGNoaWxkcmVuIGxlbmd0aCwgY291bnRlciBpcyB0aGUgbnVtYmVyIG9mIHBhZ2VzXG4gICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCk7XG4gICAgICAgICAgICBjb3VudGVyICs9IHNsaWRlci5zZXR0aW5ncy5tb3ZlU2xpZGVzIDw9IGdldE51bWJlclNsaWRlc1Nob3dpbmcoKSA/IHNsaWRlci5zZXR0aW5ncy5tb3ZlU2xpZGVzIDogZ2V0TnVtYmVyU2xpZGVzU2hvd2luZygpO1xuICAgICAgICAgIH1cblx0XHQgIHJldHVybiBjb3VudGVyO1xuICAgICAgICB9XG4gICAgICAvLyBpZiBtb3ZlU2xpZGVzIGlzIDAgKGF1dG8pIGRpdmlkZSBjaGlsZHJlbiBsZW5ndGggYnkgc2lkZXMgc2hvd2luZywgdGhlbiByb3VuZCB1cFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnZXJRdHkgPSBNYXRoLmNlaWwoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAvIGdldE51bWJlclNsaWRlc1Nob3dpbmcoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFnZXJRdHk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBpbmRpdmlkdWFsIHNsaWRlcyBieSB3aGljaCB0byBzaGlmdCB0aGUgc2xpZGVyXG4gICAgICovXG4gICAgdmFyIGdldE1vdmVCeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaWYgbW92ZVNsaWRlcyB3YXMgc2V0IGJ5IHRoZSB1c2VyIGFuZCBtb3ZlU2xpZGVzIGlzIGxlc3MgdGhhbiBudW1iZXIgb2Ygc2xpZGVzIHNob3dpbmdcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcyA+IDAgJiYgc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPD0gZ2V0TnVtYmVyU2xpZGVzU2hvd2luZygpKSB7XG4gICAgICAgIHJldHVybiBzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcztcbiAgICAgIH1cbiAgICAgIC8vIGlmIG1vdmVTbGlkZXMgaXMgMCAoYXV0bylcbiAgICAgIHJldHVybiBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNsaWRlcidzIChlbCkgbGVmdCBvciB0b3AgcG9zaXRpb25cbiAgICAgKi9cbiAgICB2YXIgc2V0U2xpZGVQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBvc2l0aW9uLCBsYXN0Q2hpbGQsIGxhc3RTaG93aW5nSW5kZXg7XG4gICAgICAvLyBpZiBsYXN0IHNsaWRlLCBub3QgaW5maW5pdGUgbG9vcCwgYW5kIG51bWJlciBvZiBjaGlsZHJlbiBpcyBsYXJnZXIgdGhhbiBzcGVjaWZpZWQgbWF4U2xpZGVzXG4gICAgICBpZiAoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCA+IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgJiYgc2xpZGVyLmFjdGl2ZS5sYXN0ICYmICFzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgLy8gZ2V0IHRoZSBsYXN0IGNoaWxkJ3MgcG9zaXRpb25cbiAgICAgICAgICBsYXN0Q2hpbGQgPSBzbGlkZXIuY2hpbGRyZW4ubGFzdCgpO1xuICAgICAgICAgIHBvc2l0aW9uID0gbGFzdENoaWxkLnBvc2l0aW9uKCk7XG4gICAgICAgICAgLy8gc2V0IHRoZSBsZWZ0IHBvc2l0aW9uXG4gICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSgtKHBvc2l0aW9uLmxlZnQgLSAoc2xpZGVyLnZpZXdwb3J0LndpZHRoKCkgLSBsYXN0Q2hpbGQub3V0ZXJXaWR0aCgpKSksICdyZXNldCcsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgLy8gZ2V0IHRoZSBsYXN0IHNob3dpbmcgaW5kZXgncyBwb3NpdGlvblxuICAgICAgICAgIGxhc3RTaG93aW5nSW5kZXggPSBzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcztcbiAgICAgICAgICBwb3NpdGlvbiA9IHNsaWRlci5jaGlsZHJlbi5lcShsYXN0U2hvd2luZ0luZGV4KS5wb3NpdGlvbigpO1xuICAgICAgICAgIC8vIHNldCB0aGUgdG9wIHBvc2l0aW9uXG4gICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSgtcG9zaXRpb24udG9wLCAncmVzZXQnLCAwKTtcbiAgICAgICAgfVxuICAgICAgLy8gaWYgbm90IGxhc3Qgc2xpZGVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGdldCB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IHNob3dpbmcgc2xpZGVcbiAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCAqIGdldE1vdmVCeSgpKS5wb3NpdGlvbigpO1xuICAgICAgICAvLyBjaGVjayBmb3IgbGFzdCBzbGlkZVxuICAgICAgICBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gZ2V0UGFnZXJRdHkoKSAtIDEpIHsgc2xpZGVyLmFjdGl2ZS5sYXN0ID0gdHJ1ZTsgfVxuICAgICAgICAvLyBzZXQgdGhlIHJlc3BlY3RpdmUgcG9zaXRpb25cbiAgICAgICAgaWYgKHBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykgeyBzZXRQb3NpdGlvblByb3BlcnR5KC1wb3NpdGlvbi5sZWZ0LCAncmVzZXQnLCAwKTsgfVxuICAgICAgICAgIGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7IHNldFBvc2l0aW9uUHJvcGVydHkoLXBvc2l0aW9uLnRvcCwgJ3Jlc2V0JywgMCk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBlbCdzIGFuaW1hdGluZyBwcm9wZXJ0eSBwb3NpdGlvbiAod2hpY2ggaW4gdHVybiB3aWxsIHNvbWV0aW1lcyBhbmltYXRlIGVsKS5cbiAgICAgKiBJZiB1c2luZyBDU1MsIHNldHMgdGhlIHRyYW5zZm9ybSBwcm9wZXJ0eS4gSWYgbm90IHVzaW5nIENTUywgc2V0cyB0aGUgdG9wIC8gbGVmdCBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAoaW50KVxuICAgICAqICAtIHRoZSBhbmltYXRpbmcgcHJvcGVydHkncyB2YWx1ZVxuICAgICAqXG4gICAgICogQHBhcmFtIHR5cGUgKHN0cmluZykgJ3NsaWRlJywgJ3Jlc2V0JywgJ3RpY2tlcidcbiAgICAgKiAgLSB0aGUgdHlwZSBvZiBpbnN0YW5jZSBmb3Igd2hpY2ggdGhlIGZ1bmN0aW9uIGlzIGJlaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gKGludClcbiAgICAgKiAgLSB0aGUgYW1vdW50IG9mIHRpbWUgKGluIG1zKSB0aGUgdHJhbnNpdGlvbiBzaG91bGQgb2NjdXB5XG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyYW1zIChhcnJheSkgb3B0aW9uYWxcbiAgICAgKiAgLSBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgY29udGFpbmluZyBhbnkgdmFyaWFibGVzIHRoYXQgbmVlZCB0byBiZSBwYXNzZWQgaW5cbiAgICAgKi9cbiAgICB2YXIgc2V0UG9zaXRpb25Qcm9wZXJ0eSA9IGZ1bmN0aW9uKHZhbHVlLCB0eXBlLCBkdXJhdGlvbiwgcGFyYW1zKSB7XG4gICAgICB2YXIgYW5pbWF0ZU9iaiwgcHJvcFZhbHVlO1xuICAgICAgLy8gdXNlIENTUyB0cmFuc2Zvcm1cbiAgICAgIGlmIChzbGlkZXIudXNpbmdDU1MpIHtcbiAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSB0cmFuc2xhdGUzZCB2YWx1ZVxuICAgICAgICBwcm9wVmFsdWUgPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJyA/ICd0cmFuc2xhdGUzZCgwLCAnICsgdmFsdWUgKyAncHgsIDApJyA6ICd0cmFuc2xhdGUzZCgnICsgdmFsdWUgKyAncHgsIDAsIDApJztcbiAgICAgICAgLy8gYWRkIHRoZSBDU1MgdHJhbnNpdGlvbi1kdXJhdGlvblxuICAgICAgICBlbC5jc3MoJy0nICsgc2xpZGVyLmNzc1ByZWZpeCArICctdHJhbnNpdGlvbi1kdXJhdGlvbicsIGR1cmF0aW9uIC8gMTAwMCArICdzJyk7XG4gICAgICAgIGlmICh0eXBlID09PSAnc2xpZGUnKSB7XG4gICAgICAgICAgLy8gc2V0IHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICAgIGVsLmNzcyhzbGlkZXIuYW5pbVByb3AsIHByb3BWYWx1ZSk7XG4gICAgICAgICAgaWYgKGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBiaW5kIGEgY2FsbGJhY2sgbWV0aG9kIC0gZXhlY3V0ZXMgd2hlbiBDU1MgdHJhbnNpdGlvbiBjb21wbGV0ZXNcbiAgICAgICAgICAgIGVsLmJpbmQoJ3RyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCBNU1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIC8vbWFrZSBzdXJlIGl0J3MgdGhlIGNvcnJlY3Qgb25lXG4gICAgICAgICAgICAgIGlmICghJChlLnRhcmdldCkuaXMoZWwpKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICAvLyB1bmJpbmQgdGhlIGNhbGxiYWNrXG4gICAgICAgICAgICAgIGVsLnVuYmluZCgndHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIE1TVHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgICAgICB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHsgLy9kdXJhdGlvbiA9IDBcbiAgICAgICAgICAgIHVwZGF0ZUFmdGVyU2xpZGVUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdyZXNldCcpIHtcbiAgICAgICAgICBlbC5jc3Moc2xpZGVyLmFuaW1Qcm9wLCBwcm9wVmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd0aWNrZXInKSB7XG4gICAgICAgICAgLy8gbWFrZSB0aGUgdHJhbnNpdGlvbiB1c2UgJ2xpbmVhcidcbiAgICAgICAgICBlbC5jc3MoJy0nICsgc2xpZGVyLmNzc1ByZWZpeCArICctdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24nLCAnbGluZWFyJyk7XG4gICAgICAgICAgZWwuY3NzKHNsaWRlci5hbmltUHJvcCwgcHJvcFZhbHVlKTtcbiAgICAgICAgICBpZiAoZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgICAgIGVsLmJpbmQoJ3RyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCBNU1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIC8vbWFrZSBzdXJlIGl0J3MgdGhlIGNvcnJlY3Qgb25lXG4gICAgICAgICAgICAgIGlmICghJChlLnRhcmdldCkuaXMoZWwpKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICAvLyB1bmJpbmQgdGhlIGNhbGxiYWNrXG4gICAgICAgICAgICAgIGVsLnVuYmluZCgndHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIE1TVHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgICAgICAvLyByZXNldCB0aGUgcG9zaXRpb25cbiAgICAgICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eShwYXJhbXMucmVzZXRWYWx1ZSwgJ3Jlc2V0JywgMCk7XG4gICAgICAgICAgICAgIC8vIHN0YXJ0IHRoZSBsb29wIGFnYWluXG4gICAgICAgICAgICAgIHRpY2tlckxvb3AoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7IC8vZHVyYXRpb24gPSAwXG4gICAgICAgICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHBhcmFtcy5yZXNldFZhbHVlLCAncmVzZXQnLCAwKTtcbiAgICAgICAgICAgIHRpY2tlckxvb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIC8vIHVzZSBKUyBhbmltYXRlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmltYXRlT2JqID0ge307XG4gICAgICAgIGFuaW1hdGVPYmpbc2xpZGVyLmFuaW1Qcm9wXSA9IHZhbHVlO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgIGVsLmFuaW1hdGUoYW5pbWF0ZU9iaiwgZHVyYXRpb24sIHNsaWRlci5zZXR0aW5ncy5lYXNpbmcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdXBkYXRlQWZ0ZXJTbGlkZVRyYW5zaXRpb24oKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncmVzZXQnKSB7XG4gICAgICAgICAgZWwuY3NzKHNsaWRlci5hbmltUHJvcCwgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd0aWNrZXInKSB7XG4gICAgICAgICAgZWwuYW5pbWF0ZShhbmltYXRlT2JqLCBkdXJhdGlvbiwgJ2xpbmVhcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eShwYXJhbXMucmVzZXRWYWx1ZSwgJ3Jlc2V0JywgMCk7XG4gICAgICAgICAgICAvLyBydW4gdGhlIHJlY3Vyc2l2ZSBsb29wIGFmdGVyIGFuaW1hdGlvblxuICAgICAgICAgICAgdGlja2VyTG9vcCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBvcHVsYXRlcyB0aGUgcGFnZXIgd2l0aCBwcm9wZXIgYW1vdW50IG9mIHBhZ2VzXG4gICAgICovXG4gICAgdmFyIHBvcHVsYXRlUGFnZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwYWdlckh0bWwgPSAnJyxcbiAgICAgIGxpbmtDb250ZW50ID0gJycsXG4gICAgICBwYWdlclF0eSA9IGdldFBhZ2VyUXR5KCk7XG4gICAgICAvLyBsb29wIHRocm91Z2ggZWFjaCBwYWdlciBpdGVtXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZ2VyUXR5OyBpKyspIHtcbiAgICAgICAgbGlua0NvbnRlbnQgPSAnJztcbiAgICAgICAgLy8gaWYgYSBidWlsZFBhZ2VyIGZ1bmN0aW9uIGlzIHN1cHBsaWVkLCB1c2UgaXQgdG8gZ2V0IHBhZ2VyIGxpbmsgdmFsdWUsIGVsc2UgdXNlIGluZGV4ICsgMVxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmJ1aWxkUGFnZXIgJiYgJC5pc0Z1bmN0aW9uKHNsaWRlci5zZXR0aW5ncy5idWlsZFBhZ2VyKSB8fCBzbGlkZXIuc2V0dGluZ3MucGFnZXJDdXN0b20pIHtcbiAgICAgICAgICBsaW5rQ29udGVudCA9IHNsaWRlci5zZXR0aW5ncy5idWlsZFBhZ2VyKGkpO1xuICAgICAgICAgIHNsaWRlci5wYWdlckVsLmFkZENsYXNzKCdieC1jdXN0b20tcGFnZXInKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaW5rQ29udGVudCA9IGkgKyAxO1xuICAgICAgICAgIHNsaWRlci5wYWdlckVsLmFkZENsYXNzKCdieC1kZWZhdWx0LXBhZ2VyJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdmFyIGxpbmtDb250ZW50ID0gc2xpZGVyLnNldHRpbmdzLmJ1aWxkUGFnZXIgJiYgJC5pc0Z1bmN0aW9uKHNsaWRlci5zZXR0aW5ncy5idWlsZFBhZ2VyKSA/IHNsaWRlci5zZXR0aW5ncy5idWlsZFBhZ2VyKGkpIDogaSArIDE7XG4gICAgICAgIC8vIGFkZCB0aGUgbWFya3VwIHRvIHRoZSBzdHJpbmdcbiAgICAgICAgcGFnZXJIdG1sICs9ICc8ZGl2IGNsYXNzPVwiYngtcGFnZXItaXRlbVwiPjxhIGhyZWY9XCJcIiBkYXRhLXNsaWRlLWluZGV4PVwiJyArIGkgKyAnXCIgY2xhc3M9XCJieC1wYWdlci1saW5rXCI+JyArIGxpbmtDb250ZW50ICsgJzwvYT48L2Rpdj4nO1xuICAgICAgfVxuICAgICAgLy8gcG9wdWxhdGUgdGhlIHBhZ2VyIGVsZW1lbnQgd2l0aCBwYWdlciBsaW5rc1xuICAgICAgc2xpZGVyLnBhZ2VyRWwuaHRtbChwYWdlckh0bWwpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIHRoZSBwYWdlciB0byB0aGUgY29udHJvbHMgZWxlbWVudFxuICAgICAqL1xuICAgIHZhciBhcHBlbmRQYWdlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFzbGlkZXIuc2V0dGluZ3MucGFnZXJDdXN0b20pIHtcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBwYWdlciBET00gZWxlbWVudFxuICAgICAgICBzbGlkZXIucGFnZXJFbCA9ICQoJzxkaXYgY2xhc3M9XCJieC1wYWdlclwiIC8+Jyk7XG4gICAgICAgIC8vIGlmIGEgcGFnZXIgc2VsZWN0b3Igd2FzIHN1cHBsaWVkLCBwb3B1bGF0ZSBpdCB3aXRoIHRoZSBwYWdlclxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnBhZ2VyU2VsZWN0b3IpIHtcbiAgICAgICAgICAkKHNsaWRlci5zZXR0aW5ncy5wYWdlclNlbGVjdG9yKS5odG1sKHNsaWRlci5wYWdlckVsKTtcbiAgICAgICAgLy8gaWYgbm8gcGFnZXIgc2VsZWN0b3Igd2FzIHN1cHBsaWVkLCBhZGQgaXQgYWZ0ZXIgdGhlIHdyYXBwZXJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMuZWwuYWRkQ2xhc3MoJ2J4LWhhcy1wYWdlcicpLmFwcGVuZChzbGlkZXIucGFnZXJFbCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcG9wdWxhdGUgdGhlIHBhZ2VyXG4gICAgICAgIHBvcHVsYXRlUGFnZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlci5wYWdlckVsID0gJChzbGlkZXIuc2V0dGluZ3MucGFnZXJDdXN0b20pO1xuICAgICAgfVxuICAgICAgLy8gYXNzaWduIHRoZSBwYWdlciBjbGljayBiaW5kaW5nXG4gICAgICBzbGlkZXIucGFnZXJFbC5vbignY2xpY2sgdG91Y2hlbmQnLCAnYScsIGNsaWNrUGFnZXJCaW5kKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBwcmV2IC8gbmV4dCBjb250cm9scyB0byB0aGUgY29udHJvbHMgZWxlbWVudFxuICAgICAqL1xuICAgIHZhciBhcHBlbmRDb250cm9scyA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLm5leHQgPSAkKCc8YSBjbGFzcz1cImJ4LW5leHRcIiBocmVmPVwiXCI+JyArIHNsaWRlci5zZXR0aW5ncy5uZXh0VGV4dCArICc8L2E+Jyk7XG4gICAgICBzbGlkZXIuY29udHJvbHMucHJldiA9ICQoJzxhIGNsYXNzPVwiYngtcHJldlwiIGhyZWY9XCJcIj4nICsgc2xpZGVyLnNldHRpbmdzLnByZXZUZXh0ICsgJzwvYT4nKTtcbiAgICAgIC8vIGJpbmQgY2xpY2sgYWN0aW9ucyB0byB0aGUgY29udHJvbHNcbiAgICAgIHNsaWRlci5jb250cm9scy5uZXh0LmJpbmQoJ2NsaWNrIHRvdWNoZW5kJywgY2xpY2tOZXh0QmluZCk7XG4gICAgICBzbGlkZXIuY29udHJvbHMucHJldi5iaW5kKCdjbGljayB0b3VjaGVuZCcsIGNsaWNrUHJldkJpbmQpO1xuICAgICAgLy8gaWYgbmV4dFNlbGVjdG9yIHdhcyBzdXBwbGllZCwgcG9wdWxhdGUgaXRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubmV4dFNlbGVjdG9yKSB7XG4gICAgICAgICQoc2xpZGVyLnNldHRpbmdzLm5leHRTZWxlY3RvcikuYXBwZW5kKHNsaWRlci5jb250cm9scy5uZXh0KTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHByZXZTZWxlY3RvciB3YXMgc3VwcGxpZWQsIHBvcHVsYXRlIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnByZXZTZWxlY3Rvcikge1xuICAgICAgICAkKHNsaWRlci5zZXR0aW5ncy5wcmV2U2VsZWN0b3IpLmFwcGVuZChzbGlkZXIuY29udHJvbHMucHJldik7XG4gICAgICB9XG4gICAgICAvLyBpZiBubyBjdXN0b20gc2VsZWN0b3JzIHdlcmUgc3VwcGxpZWRcbiAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLm5leHRTZWxlY3RvciAmJiAhc2xpZGVyLnNldHRpbmdzLnByZXZTZWxlY3Rvcikge1xuICAgICAgICAvLyBhZGQgdGhlIGNvbnRyb2xzIHRvIHRoZSBET01cbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmRpcmVjdGlvbkVsID0gJCgnPGRpdiBjbGFzcz1cImJ4LWNvbnRyb2xzLWRpcmVjdGlvblwiIC8+Jyk7XG4gICAgICAgIC8vIGFkZCB0aGUgY29udHJvbCBlbGVtZW50cyB0byB0aGUgZGlyZWN0aW9uRWxcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmRpcmVjdGlvbkVsLmFwcGVuZChzbGlkZXIuY29udHJvbHMucHJldikuYXBwZW5kKHNsaWRlci5jb250cm9scy5uZXh0KTtcbiAgICAgICAgLy8gc2xpZGVyLnZpZXdwb3J0LmFwcGVuZChzbGlkZXIuY29udHJvbHMuZGlyZWN0aW9uRWwpO1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuZWwuYWRkQ2xhc3MoJ2J4LWhhcy1jb250cm9scy1kaXJlY3Rpb24nKS5hcHBlbmQoc2xpZGVyLmNvbnRyb2xzLmRpcmVjdGlvbkVsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBzdGFydCAvIHN0b3AgYXV0byBjb250cm9scyB0byB0aGUgY29udHJvbHMgZWxlbWVudFxuICAgICAqL1xuICAgIHZhciBhcHBlbmRDb250cm9sc0F1dG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIHNsaWRlci5jb250cm9scy5zdGFydCA9ICQoJzxkaXYgY2xhc3M9XCJieC1jb250cm9scy1hdXRvLWl0ZW1cIj48YSBjbGFzcz1cImJ4LXN0YXJ0XCIgaHJlZj1cIlwiPicgKyBzbGlkZXIuc2V0dGluZ3Muc3RhcnRUZXh0ICsgJzwvYT48L2Rpdj4nKTtcbiAgICAgIHNsaWRlci5jb250cm9scy5zdG9wID0gJCgnPGRpdiBjbGFzcz1cImJ4LWNvbnRyb2xzLWF1dG8taXRlbVwiPjxhIGNsYXNzPVwiYngtc3RvcFwiIGhyZWY9XCJcIj4nICsgc2xpZGVyLnNldHRpbmdzLnN0b3BUZXh0ICsgJzwvYT48L2Rpdj4nKTtcbiAgICAgIC8vIGFkZCB0aGUgY29udHJvbHMgdG8gdGhlIERPTVxuICAgICAgc2xpZGVyLmNvbnRyb2xzLmF1dG9FbCA9ICQoJzxkaXYgY2xhc3M9XCJieC1jb250cm9scy1hdXRvXCIgLz4nKTtcbiAgICAgIC8vIGJpbmQgY2xpY2sgYWN0aW9ucyB0byB0aGUgY29udHJvbHNcbiAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwub24oJ2NsaWNrJywgJy5ieC1zdGFydCcsIGNsaWNrU3RhcnRCaW5kKTtcbiAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwub24oJ2NsaWNrJywgJy5ieC1zdG9wJywgY2xpY2tTdG9wQmluZCk7XG4gICAgICAvLyBpZiBhdXRvQ29udHJvbHNDb21iaW5lLCBpbnNlcnQgb25seSB0aGUgXCJzdGFydFwiIGNvbnRyb2xcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzQ29tYmluZSkge1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLmFwcGVuZChzbGlkZXIuY29udHJvbHMuc3RhcnQpO1xuICAgICAgLy8gaWYgYXV0b0NvbnRyb2xzQ29tYmluZSBpcyBmYWxzZSwgaW5zZXJ0IGJvdGggY29udHJvbHNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwuYXBwZW5kKHNsaWRlci5jb250cm9scy5zdGFydCkuYXBwZW5kKHNsaWRlci5jb250cm9scy5zdG9wKTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIGF1dG8gY29udHJvbHMgc2VsZWN0b3Igd2FzIHN1cHBsaWVkLCBwb3B1bGF0ZSBpdCB3aXRoIHRoZSBjb250cm9sc1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHNTZWxlY3Rvcikge1xuICAgICAgICAkKHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHNTZWxlY3RvcikuaHRtbChzbGlkZXIuY29udHJvbHMuYXV0b0VsKTtcbiAgICAgIC8vIGlmIGF1dG8gY29udHJvbHMgc2VsZWN0b3Igd2FzIG5vdCBzdXBwbGllZCwgYWRkIGl0IGFmdGVyIHRoZSB3cmFwcGVyXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuZWwuYWRkQ2xhc3MoJ2J4LWhhcy1jb250cm9scy1hdXRvJykuYXBwZW5kKHNsaWRlci5jb250cm9scy5hdXRvRWwpO1xuICAgICAgfVxuICAgICAgLy8gdXBkYXRlIHRoZSBhdXRvIGNvbnRyb2xzXG4gICAgICB1cGRhdGVBdXRvQ29udHJvbHMoc2xpZGVyLnNldHRpbmdzLmF1dG9TdGFydCA/ICdzdG9wJyA6ICdzdGFydCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIGltYWdlIGNhcHRpb25zIHRvIHRoZSBET01cbiAgICAgKi9cbiAgICB2YXIgYXBwZW5kQ2FwdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGN5Y2xlIHRocm91Z2ggZWFjaCBjaGlsZFxuICAgICAgc2xpZGVyLmNoaWxkcmVuLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgLy8gZ2V0IHRoZSBpbWFnZSB0aXRsZSBhdHRyaWJ1dGVcbiAgICAgICAgdmFyIHRpdGxlID0gJCh0aGlzKS5maW5kKCdpbWc6Zmlyc3QnKS5hdHRyKCd0aXRsZScpO1xuICAgICAgICAvLyBhcHBlbmQgdGhlIGNhcHRpb25cbiAgICAgICAgaWYgKHRpdGxlICE9PSB1bmRlZmluZWQgJiYgKCcnICsgdGl0bGUpLmxlbmd0aCkge1xuICAgICAgICAgICQodGhpcykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiYngtY2FwdGlvblwiPjxzcGFuPicgKyB0aXRsZSArICc8L3NwYW4+PC9kaXY+Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBuZXh0IGJpbmRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIGNsaWNrTmV4dEJpbmQgPSBmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLmVsLmhhc0NsYXNzKCdkaXNhYmxlZCcpKSB7IHJldHVybjsgfVxuICAgICAgLy8gaWYgYXV0byBzaG93IGlzIHJ1bm5pbmcsIHN0b3AgaXRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0byAmJiBzbGlkZXIuc2V0dGluZ3Muc3RvcEF1dG9PbkNsaWNrKSB7IGVsLnN0b3BBdXRvKCk7IH1cbiAgICAgIGVsLmdvVG9OZXh0U2xpZGUoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgcHJldiBiaW5kaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjbGlja1ByZXZCaW5kID0gZnVuY3Rpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHNsaWRlci5jb250cm9scy5lbC5oYXNDbGFzcygnZGlzYWJsZWQnKSkgeyByZXR1cm47IH1cbiAgICAgIC8vIGlmIGF1dG8gc2hvdyBpcyBydW5uaW5nLCBzdG9wIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG8gJiYgc2xpZGVyLnNldHRpbmdzLnN0b3BBdXRvT25DbGljaykgeyBlbC5zdG9wQXV0bygpOyB9XG4gICAgICBlbC5nb1RvUHJldlNsaWRlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsaWNrIHN0YXJ0IGJpbmRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIGNsaWNrU3RhcnRCaW5kID0gZnVuY3Rpb24oZSkge1xuICAgICAgZWwuc3RhcnRBdXRvKCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsaWNrIHN0b3AgYmluZGluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIGUgKGV2ZW50KVxuICAgICAqICAtIERPTSBldmVudCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgY2xpY2tTdG9wQmluZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGVsLnN0b3BBdXRvKCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsaWNrIHBhZ2VyIGJpbmRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIGNsaWNrUGFnZXJCaW5kID0gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBhZ2VyTGluaywgcGFnZXJJbmRleDtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChzbGlkZXIuY29udHJvbHMuZWwuaGFzQ2xhc3MoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gaWYgYXV0byBzaG93IGlzIHJ1bm5pbmcsIHN0b3AgaXRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0byAgJiYgc2xpZGVyLnNldHRpbmdzLnN0b3BBdXRvT25DbGljaykgeyBlbC5zdG9wQXV0bygpOyB9XG4gICAgICBwYWdlckxpbmsgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICBpZiAocGFnZXJMaW5rLmF0dHIoJ2RhdGEtc2xpZGUtaW5kZXgnKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhZ2VySW5kZXggPSBwYXJzZUludChwYWdlckxpbmsuYXR0cignZGF0YS1zbGlkZS1pbmRleCcpKTtcbiAgICAgICAgLy8gaWYgY2xpY2tlZCBwYWdlciBsaW5rIGlzIG5vdCBhY3RpdmUsIGNvbnRpbnVlIHdpdGggdGhlIGdvVG9TbGlkZSBjYWxsXG4gICAgICAgIGlmIChwYWdlckluZGV4ICE9PSBzbGlkZXIuYWN0aXZlLmluZGV4KSB7IGVsLmdvVG9TbGlkZShwYWdlckluZGV4KTsgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBwYWdlciBsaW5rcyB3aXRoIGFuIGFjdGl2ZSBjbGFzc1xuICAgICAqXG4gICAgICogQHBhcmFtIHNsaWRlSW5kZXggKGludClcbiAgICAgKiAgLSBpbmRleCBvZiBzbGlkZSB0byBtYWtlIGFjdGl2ZVxuICAgICAqL1xuICAgIHZhciB1cGRhdGVQYWdlckFjdGl2ZSA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcbiAgICAgIC8vIGlmIFwic2hvcnRcIiBwYWdlciB0eXBlXG4gICAgICB2YXIgbGVuID0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aDsgLy8gbmIgb2YgY2hpbGRyZW5cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucGFnZXJUeXBlID09PSAnc2hvcnQnKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzID4gMSkge1xuICAgICAgICAgIGxlbiA9IE1hdGguY2VpbChzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC8gc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgc2xpZGVyLnBhZ2VyRWwuaHRtbCgoc2xpZGVJbmRleCArIDEpICsgc2xpZGVyLnNldHRpbmdzLnBhZ2VyU2hvcnRTZXBhcmF0b3IgKyBsZW4pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyByZW1vdmUgYWxsIHBhZ2VyIGFjdGl2ZSBjbGFzc2VzXG4gICAgICBzbGlkZXIucGFnZXJFbC5maW5kKCdhJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgLy8gYXBwbHkgdGhlIGFjdGl2ZSBjbGFzcyBmb3IgYWxsIHBhZ2Vyc1xuICAgICAgc2xpZGVyLnBhZ2VyRWwuZWFjaChmdW5jdGlvbihpLCBlbCkgeyAkKGVsKS5maW5kKCdhJykuZXEoc2xpZGVJbmRleCkuYWRkQ2xhc3MoJ2FjdGl2ZScpOyB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgbmVlZGVkIGFjdGlvbnMgYWZ0ZXIgYSBzbGlkZSB0cmFuc2l0aW9uXG4gICAgICovXG4gICAgdmFyIHVwZGF0ZUFmdGVyU2xpZGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpZiBpbmZpbml0ZSBsb29wIGlzIHRydWVcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wKSB7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9ICcnO1xuICAgICAgICAvLyBmaXJzdCBzbGlkZVxuICAgICAgICBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gMCkge1xuICAgICAgICAgIC8vIHNldCB0aGUgbmV3IHBvc2l0aW9uXG4gICAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEoMCkucG9zaXRpb24oKTtcbiAgICAgICAgLy8gY2Fyb3VzZWwsIGxhc3Qgc2xpZGVcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIuYWN0aXZlLmluZGV4ID09PSBnZXRQYWdlclF0eSgpIC0gMSAmJiBzbGlkZXIuY2Fyb3VzZWwpIHtcbiAgICAgICAgICBwb3NpdGlvbiA9IHNsaWRlci5jaGlsZHJlbi5lcSgoZ2V0UGFnZXJRdHkoKSAtIDEpICogZ2V0TW92ZUJ5KCkpLnBvc2l0aW9uKCk7XG4gICAgICAgIC8vIGxhc3Qgc2xpZGVcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIuYWN0aXZlLmluZGV4ID09PSBzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHBvc2l0aW9uID0gc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggLSAxKS5wb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbikge1xuICAgICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnKSB7IHNldFBvc2l0aW9uUHJvcGVydHkoLXBvc2l0aW9uLmxlZnQsICdyZXNldCcsIDApOyB9XG4gICAgICAgICAgZWxzZSBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcpIHsgc2V0UG9zaXRpb25Qcm9wZXJ0eSgtcG9zaXRpb24udG9wLCAncmVzZXQnLCAwKTsgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBkZWNsYXJlIHRoYXQgdGhlIHRyYW5zaXRpb24gaXMgY29tcGxldGVcbiAgICAgIHNsaWRlci53b3JraW5nID0gZmFsc2U7XG4gICAgICAvLyBvblNsaWRlQWZ0ZXIgY2FsbGJhY2tcbiAgICAgIHNsaWRlci5zZXR0aW5ncy5vblNsaWRlQWZ0ZXIuY2FsbChlbCwgc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5hY3RpdmUuaW5kZXgpLCBzbGlkZXIub2xkSW5kZXgsIHNsaWRlci5hY3RpdmUuaW5kZXgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBhdXRvIGNvbnRyb2xzIHN0YXRlIChlaXRoZXIgYWN0aXZlLCBvciBjb21iaW5lZCBzd2l0Y2gpXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhdGUgKHN0cmluZykgXCJzdGFydFwiLCBcInN0b3BcIlxuICAgICAqICAtIHRoZSBuZXcgc3RhdGUgb2YgdGhlIGF1dG8gc2hvd1xuICAgICAqL1xuICAgIHZhciB1cGRhdGVBdXRvQ29udHJvbHMgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgLy8gaWYgYXV0b0NvbnRyb2xzQ29tYmluZSBpcyB0cnVlLCByZXBsYWNlIHRoZSBjdXJyZW50IGNvbnRyb2wgd2l0aCB0aGUgbmV3IHN0YXRlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9Db250cm9sc0NvbWJpbmUpIHtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmF1dG9FbC5odG1sKHNsaWRlci5jb250cm9sc1tzdGF0ZV0pO1xuICAgICAgLy8gaWYgYXV0b0NvbnRyb2xzQ29tYmluZSBpcyBmYWxzZSwgYXBwbHkgdGhlIFwiYWN0aXZlXCIgY2xhc3MgdG8gdGhlIGFwcHJvcHJpYXRlIGNvbnRyb2xcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwuZmluZCgnYScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmF1dG9FbC5maW5kKCdhOm5vdCguYngtJyArIHN0YXRlICsgJyknKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGRpcmVjdGlvbiBjb250cm9scyAoY2hlY2tzIGlmIGVpdGhlciBzaG91bGQgYmUgaGlkZGVuKVxuICAgICAqL1xuICAgIHZhciB1cGRhdGVEaXJlY3Rpb25Db250cm9scyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGdldFBhZ2VyUXR5KCkgPT09IDEpIHtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLnByZXYuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5uZXh0LmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgfSBlbHNlIGlmICghc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiBzbGlkZXIuc2V0dGluZ3MuaGlkZUNvbnRyb2xPbkVuZCkge1xuICAgICAgICAvLyBpZiBmaXJzdCBzbGlkZVxuICAgICAgICBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gMCkge1xuICAgICAgICAgIHNsaWRlci5jb250cm9scy5wcmV2LmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgIHNsaWRlci5jb250cm9scy5uZXh0LnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAvLyBpZiBsYXN0IHNsaWRlXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gZ2V0UGFnZXJRdHkoKSAtIDEpIHtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMucHJldi5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgLy8gaWYgYW55IHNsaWRlIGluIHRoZSBtaWRkbGVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMucHJldi5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cdC8qIGF1dG8gc3RhcnQgYW5kIHN0b3AgZnVuY3Rpb25zICovXG5cdHZhciB3aW5kb3dGb2N1c0hhbmRsZXIgPSBmdW5jdGlvbigpIHsgZWwuc3RhcnRBdXRvKCk7IH07XG5cdHZhciB3aW5kb3dCbHVySGFuZGxlciA9IGZ1bmN0aW9uKCkgeyBlbC5zdG9wQXV0bygpOyB9O1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhdXRvIHByb2Nlc3NcbiAgICAgKi9cbiAgICB2YXIgaW5pdEF1dG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIGF1dG9EZWxheSB3YXMgc3VwcGxpZWQsIGxhdW5jaCB0aGUgYXV0byBzaG93IHVzaW5nIGEgc2V0VGltZW91dCgpIGNhbGxcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0RlbGF5ID4gMCkge1xuICAgICAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZWwuc3RhcnRBdXRvLCBzbGlkZXIuc2V0dGluZ3MuYXV0b0RlbGF5KTtcbiAgICAgIC8vIGlmIGF1dG9EZWxheSB3YXMgbm90IHN1cHBsaWVkLCBzdGFydCB0aGUgYXV0byBzaG93IG5vcm1hbGx5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5zdGFydEF1dG8oKTtcblxuICAgICAgICAvL2FkZCBmb2N1cyBhbmQgYmx1ciBldmVudHMgdG8gZW5zdXJlIGl0cyBydW5uaW5nIGlmIHRpbWVvdXQgZ2V0cyBwYXVzZWRcbiAgICAgICAgJCh3aW5kb3cpLmZvY3VzKHdpbmRvd0ZvY3VzSGFuZGxlcikuYmx1cih3aW5kb3dCbHVySGFuZGxlcik7XG4gICAgICB9XG4gICAgICAvLyBpZiBhdXRvSG92ZXIgaXMgcmVxdWVzdGVkXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9Ib3Zlcikge1xuICAgICAgICAvLyBvbiBlbCBob3ZlclxuICAgICAgICBlbC5ob3ZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAvLyBpZiB0aGUgYXV0byBzaG93IGlzIGN1cnJlbnRseSBwbGF5aW5nIChoYXMgYW4gYWN0aXZlIGludGVydmFsKVxuICAgICAgICAgIGlmIChzbGlkZXIuaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIC8vIHN0b3AgdGhlIGF1dG8gc2hvdyBhbmQgcGFzcyB0cnVlIGFyZ3VtZW50IHdoaWNoIHdpbGwgcHJldmVudCBjb250cm9sIHVwZGF0ZVxuICAgICAgICAgICAgZWwuc3RvcEF1dG8odHJ1ZSk7XG4gICAgICAgICAgICAvLyBjcmVhdGUgYSBuZXcgYXV0b1BhdXNlZCB2YWx1ZSB3aGljaCB3aWxsIGJlIHVzZWQgYnkgdGhlIHJlbGF0aXZlIFwibW91c2VvdXRcIiBldmVudFxuICAgICAgICAgICAgc2xpZGVyLmF1dG9QYXVzZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gaWYgdGhlIGF1dG9QYXVzZWQgdmFsdWUgd2FzIGNyZWF0ZWQgYmUgdGhlIHByaW9yIFwibW91c2VvdmVyXCIgZXZlbnRcbiAgICAgICAgICBpZiAoc2xpZGVyLmF1dG9QYXVzZWQpIHtcbiAgICAgICAgICAgIC8vIHN0YXJ0IHRoZSBhdXRvIHNob3cgYW5kIHBhc3MgdHJ1ZSBhcmd1bWVudCB3aGljaCB3aWxsIHByZXZlbnQgY29udHJvbCB1cGRhdGVcbiAgICAgICAgICAgIGVsLnN0YXJ0QXV0byh0cnVlKTtcbiAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBhdXRvUGF1c2VkIHZhbHVlXG4gICAgICAgICAgICBzbGlkZXIuYXV0b1BhdXNlZCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHRpY2tlciBwcm9jZXNzXG4gICAgICovXG4gICAgdmFyIGluaXRUaWNrZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzdGFydFBvc2l0aW9uID0gMCxcbiAgICAgIHBvc2l0aW9uLCB0cmFuc2Zvcm0sIHZhbHVlLCBpZHgsIHJhdGlvLCBwcm9wZXJ0eSwgbmV3U3BlZWQsIHRvdGFsRGltZW5zO1xuICAgICAgLy8gaWYgYXV0b0RpcmVjdGlvbiBpcyBcIm5leHRcIiwgYXBwZW5kIGEgY2xvbmUgb2YgdGhlIGVudGlyZSBzbGlkZXJcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0RpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIGVsLmFwcGVuZChzbGlkZXIuY2hpbGRyZW4uY2xvbmUoKS5hZGRDbGFzcygnYngtY2xvbmUnKSk7XG4gICAgICAvLyBpZiBhdXRvRGlyZWN0aW9uIGlzIFwicHJldlwiLCBwcmVwZW5kIGEgY2xvbmUgb2YgdGhlIGVudGlyZSBzbGlkZXIsIGFuZCBzZXQgdGhlIGxlZnQgcG9zaXRpb25cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnByZXBlbmQoc2xpZGVyLmNoaWxkcmVuLmNsb25lKCkuYWRkQ2xhc3MoJ2J4LWNsb25lJykpO1xuICAgICAgICBwb3NpdGlvbiA9IHNsaWRlci5jaGlsZHJlbi5maXJzdCgpLnBvc2l0aW9uKCk7XG4gICAgICAgIHN0YXJ0UG9zaXRpb24gPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gLXBvc2l0aW9uLmxlZnQgOiAtcG9zaXRpb24udG9wO1xuICAgICAgfVxuICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eShzdGFydFBvc2l0aW9uLCAncmVzZXQnLCAwKTtcbiAgICAgIC8vIGRvIG5vdCBhbGxvdyBjb250cm9scyBpbiB0aWNrZXIgbW9kZVxuICAgICAgc2xpZGVyLnNldHRpbmdzLnBhZ2VyID0gZmFsc2U7XG4gICAgICBzbGlkZXIuc2V0dGluZ3MuY29udHJvbHMgPSBmYWxzZTtcbiAgICAgIHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHMgPSBmYWxzZTtcbiAgICAgIC8vIGlmIGF1dG9Ib3ZlciBpcyByZXF1ZXN0ZWRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MudGlja2VySG92ZXIpIHtcbiAgICAgICAgaWYgKHNsaWRlci51c2luZ0NTUykge1xuICAgICAgICAgIGlkeCA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyA0IDogNTtcbiAgICAgICAgICBzbGlkZXIudmlld3BvcnQuaG92ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm0gPSBlbC5jc3MoJy0nICsgc2xpZGVyLmNzc1ByZWZpeCArICctdHJhbnNmb3JtJyk7XG4gICAgICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodHJhbnNmb3JtLnNwbGl0KCcsJylbaWR4XSk7XG4gICAgICAgICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHZhbHVlLCAncmVzZXQnLCAwKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRvdGFsRGltZW5zID0gMDtcbiAgICAgICAgICAgIHNsaWRlci5jaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgIHRvdGFsRGltZW5zICs9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAkKHRoaXMpLm91dGVyV2lkdGgodHJ1ZSkgOiAkKHRoaXMpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIHNwZWVkIHJhdGlvICh1c2VkIHRvIGRldGVybWluZSB0aGUgbmV3IHNwZWVkIHRvIGZpbmlzaCB0aGUgcGF1c2VkIGFuaW1hdGlvbilcbiAgICAgICAgICAgIHJhdGlvID0gc2xpZGVyLnNldHRpbmdzLnNwZWVkIC8gdG90YWxEaW1lbnM7XG4gICAgICAgICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJvcGVydHkgdG8gdXNlXG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgbmV3IHNwZWVkXG4gICAgICAgICAgICBuZXdTcGVlZCA9IHJhdGlvICogKHRvdGFsRGltZW5zIC0gKE1hdGguYWJzKHBhcnNlSW50KHZhbHVlKSkpKTtcbiAgICAgICAgICAgIHRpY2tlckxvb3AobmV3U3BlZWQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG9uIGVsIGhvdmVyXG4gICAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmhvdmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZWwuc3RvcCgpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSB0b3RhbCB3aWR0aCBvZiBjaGlsZHJlbiAodXNlZCB0byBjYWxjdWxhdGUgdGhlIHNwZWVkIHJhdGlvKVxuICAgICAgICAgICAgdG90YWxEaW1lbnMgPSAwO1xuICAgICAgICAgICAgc2xpZGVyLmNoaWxkcmVuLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgICAgdG90YWxEaW1lbnMgKz0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/ICQodGhpcykub3V0ZXJXaWR0aCh0cnVlKSA6ICQodGhpcykub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgc3BlZWQgcmF0aW8gKHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBuZXcgc3BlZWQgdG8gZmluaXNoIHRoZSBwYXVzZWQgYW5pbWF0aW9uKVxuICAgICAgICAgICAgcmF0aW8gPSBzbGlkZXIuc2V0dGluZ3Muc3BlZWQgLyB0b3RhbERpbWVucztcbiAgICAgICAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm9wZXJ0eSB0byB1c2VcbiAgICAgICAgICAgIHByb3BlcnR5ID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBuZXcgc3BlZWRcbiAgICAgICAgICAgIG5ld1NwZWVkID0gcmF0aW8gKiAodG90YWxEaW1lbnMgLSAoTWF0aC5hYnMocGFyc2VJbnQoZWwuY3NzKHByb3BlcnR5KSkpKSk7XG4gICAgICAgICAgICB0aWNrZXJMb29wKG5ld1NwZWVkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gc3RhcnQgdGhlIHRpY2tlciBsb29wXG4gICAgICB0aWNrZXJMb29wKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJ1bnMgYSBjb250aW51b3VzIGxvb3AsIG5ld3MgdGlja2VyLXN0eWxlXG4gICAgICovXG4gICAgdmFyIHRpY2tlckxvb3AgPSBmdW5jdGlvbihyZXN1bWVTcGVlZCkge1xuICAgICAgdmFyIHNwZWVkID0gcmVzdW1lU3BlZWQgPyByZXN1bWVTcGVlZCA6IHNsaWRlci5zZXR0aW5ncy5zcGVlZCxcbiAgICAgIHBvc2l0aW9uID0ge2xlZnQ6IDAsIHRvcDogMH0sXG4gICAgICByZXNldCA9IHtsZWZ0OiAwLCB0b3A6IDB9LFxuICAgICAgYW5pbWF0ZVByb3BlcnR5LCByZXNldFZhbHVlLCBwYXJhbXM7XG5cbiAgICAgIC8vIGlmIFwibmV4dFwiIGFuaW1hdGUgbGVmdCBwb3NpdGlvbiB0byBsYXN0IGNoaWxkLCB0aGVuIHJlc2V0IGxlZnQgdG8gMFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgcG9zaXRpb24gPSBlbC5maW5kKCcuYngtY2xvbmUnKS5maXJzdCgpLnBvc2l0aW9uKCk7XG4gICAgICAvLyBpZiBcInByZXZcIiBhbmltYXRlIGxlZnQgcG9zaXRpb24gdG8gMCwgdGhlbiByZXNldCBsZWZ0IHRvIGZpcnN0IG5vbi1jbG9uZSBjaGlsZFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzZXQgPSBzbGlkZXIuY2hpbGRyZW4uZmlyc3QoKS5wb3NpdGlvbigpO1xuICAgICAgfVxuICAgICAgYW5pbWF0ZVByb3BlcnR5ID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/IC1wb3NpdGlvbi5sZWZ0IDogLXBvc2l0aW9uLnRvcDtcbiAgICAgIHJlc2V0VmFsdWUgPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gLXJlc2V0LmxlZnQgOiAtcmVzZXQudG9wO1xuICAgICAgcGFyYW1zID0ge3Jlc2V0VmFsdWU6IHJlc2V0VmFsdWV9O1xuICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eShhbmltYXRlUHJvcGVydHksICd0aWNrZXInLCBzcGVlZCwgcGFyYW1zKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgZWwgaXMgb24gc2NyZWVuXG4gICAgICovXG4gICAgdmFyIGlzT25TY3JlZW4gPSBmdW5jdGlvbihlbCkge1xuICAgICAgdmFyIHdpbiA9ICQod2luZG93KSxcbiAgICAgIHZpZXdwb3J0ID0ge1xuICAgICAgICB0b3A6IHdpbi5zY3JvbGxUb3AoKSxcbiAgICAgICAgbGVmdDogd2luLnNjcm9sbExlZnQoKVxuICAgICAgfSxcbiAgICAgIGJvdW5kcyA9IGVsLm9mZnNldCgpO1xuXG4gICAgICB2aWV3cG9ydC5yaWdodCA9IHZpZXdwb3J0LmxlZnQgKyB3aW4ud2lkdGgoKTtcbiAgICAgIHZpZXdwb3J0LmJvdHRvbSA9IHZpZXdwb3J0LnRvcCArIHdpbi5oZWlnaHQoKTtcbiAgICAgIGJvdW5kcy5yaWdodCA9IGJvdW5kcy5sZWZ0ICsgZWwub3V0ZXJXaWR0aCgpO1xuICAgICAgYm91bmRzLmJvdHRvbSA9IGJvdW5kcy50b3AgKyBlbC5vdXRlckhlaWdodCgpO1xuXG4gICAgICByZXR1cm4gKCEodmlld3BvcnQucmlnaHQgPCBib3VuZHMubGVmdCB8fCB2aWV3cG9ydC5sZWZ0ID4gYm91bmRzLnJpZ2h0IHx8IHZpZXdwb3J0LmJvdHRvbSA8IGJvdW5kcy50b3AgfHwgdmlld3BvcnQudG9wID4gYm91bmRzLmJvdHRvbSkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBrZXlib2FyZCBldmVudHNcbiAgICAgKi9cbiAgICB2YXIga2V5UHJlc3MgPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgYWN0aXZlRWxlbWVudFRhZyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgdGFnRmlsdGVycyA9ICdpbnB1dHx0ZXh0YXJlYScsXG4gICAgICBwID0gbmV3IFJlZ0V4cChhY3RpdmVFbGVtZW50VGFnLFsnaSddKSxcbiAgICAgIHJlc3VsdCA9IHAuZXhlYyh0YWdGaWx0ZXJzKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PSBudWxsICYmIGlzT25TY3JlZW4oZWwpKSB7XG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDM5KSB7XG4gICAgICAgICAgY2xpY2tOZXh0QmluZChlKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAzNykge1xuICAgICAgICAgIGNsaWNrUHJldkJpbmQoZSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRvdWNoIGV2ZW50c1xuICAgICAqL1xuICAgIHZhciBpbml0VG91Y2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGluaXRpYWxpemUgb2JqZWN0IHRvIGNvbnRhaW4gYWxsIHRvdWNoIHZhbHVlc1xuICAgICAgc2xpZGVyLnRvdWNoID0ge1xuICAgICAgICBzdGFydDoge3g6IDAsIHk6IDB9LFxuICAgICAgICBlbmQ6IHt4OiAwLCB5OiAwfVxuICAgICAgfTtcbiAgICAgIHNsaWRlci52aWV3cG9ydC5iaW5kKCd0b3VjaHN0YXJ0IE1TUG9pbnRlckRvd24gcG9pbnRlcmRvd24nLCBvblRvdWNoU3RhcnQpO1xuXG4gICAgICAvL2ZvciBicm93c2VycyB0aGF0IGhhdmUgaW1wbGVtZW50ZWQgcG9pbnRlciBldmVudHMgYW5kIGZpcmUgYSBjbGljayBhZnRlclxuICAgICAgLy9ldmVyeSBwb2ludGVydXAgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHBvaW50ZXJ1cCBpcyBvbiBzYW1lIHNjcmVlbiBsb2NhdGlvbiBhcyBwb2ludGVyZG93biBvciBub3RcbiAgICAgIHNsaWRlci52aWV3cG9ydC5vbignY2xpY2snLCAnLmJ4c2xpZGVyIGEnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChzbGlkZXIudmlld3BvcnQuaGFzQ2xhc3MoJ2NsaWNrLWRpc2FibGVkJykpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgc2xpZGVyLnZpZXdwb3J0LnJlbW92ZUNsYXNzKCdjbGljay1kaXNhYmxlZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgXCJ0b3VjaHN0YXJ0XCJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIG9uVG91Y2hTdGFydCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIC8vZGlzYWJsZSBzbGlkZXIgY29udHJvbHMgd2hpbGUgdXNlciBpcyBpbnRlcmFjdGluZyB3aXRoIHNsaWRlcyB0byBhdm9pZCBzbGlkZXIgZnJlZXplIHRoYXQgaGFwcGVucyBvbiB0b3VjaCBkZXZpY2VzIHdoZW4gYSBzbGlkZSBzd2lwZSBoYXBwZW5zIGltbWVkaWF0ZWx5IGFmdGVyIGludGVyYWN0aW5nIHdpdGggc2xpZGVyIGNvbnRyb2xzXG4gICAgICBzbGlkZXIuY29udHJvbHMuZWwuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cbiAgICAgIGlmIChzbGlkZXIud29ya2luZykge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5lbC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlY29yZCB0aGUgb3JpZ2luYWwgcG9zaXRpb24gd2hlbiB0b3VjaCBzdGFydHNcbiAgICAgICAgc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zID0gZWwucG9zaXRpb24oKTtcbiAgICAgICAgdmFyIG9yaWcgPSBlLm9yaWdpbmFsRXZlbnQsXG4gICAgICAgIHRvdWNoUG9pbnRzID0gKHR5cGVvZiBvcmlnLmNoYW5nZWRUb3VjaGVzICE9PSAndW5kZWZpbmVkJykgPyBvcmlnLmNoYW5nZWRUb3VjaGVzIDogW29yaWddO1xuICAgICAgICAvLyByZWNvcmQgdGhlIHN0YXJ0aW5nIHRvdWNoIHgsIHkgY29vcmRpbmF0ZXNcbiAgICAgICAgc2xpZGVyLnRvdWNoLnN0YXJ0LnggPSB0b3VjaFBvaW50c1swXS5wYWdlWDtcbiAgICAgICAgc2xpZGVyLnRvdWNoLnN0YXJ0LnkgPSB0b3VjaFBvaW50c1swXS5wYWdlWTtcblxuICAgICAgICBpZiAoc2xpZGVyLnZpZXdwb3J0LmdldCgwKS5zZXRQb2ludGVyQ2FwdHVyZSkge1xuICAgICAgICAgIHNsaWRlci5wb2ludGVySWQgPSBvcmlnLnBvaW50ZXJJZDtcbiAgICAgICAgICBzbGlkZXIudmlld3BvcnQuZ2V0KDApLnNldFBvaW50ZXJDYXB0dXJlKHNsaWRlci5wb2ludGVySWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGJpbmQgYSBcInRvdWNobW92ZVwiIGV2ZW50IHRvIHRoZSB2aWV3cG9ydFxuICAgICAgICBzbGlkZXIudmlld3BvcnQuYmluZCgndG91Y2htb3ZlIE1TUG9pbnRlck1vdmUgcG9pbnRlcm1vdmUnLCBvblRvdWNoTW92ZSk7XG4gICAgICAgIC8vIGJpbmQgYSBcInRvdWNoZW5kXCIgZXZlbnQgdG8gdGhlIHZpZXdwb3J0XG4gICAgICAgIHNsaWRlci52aWV3cG9ydC5iaW5kKCd0b3VjaGVuZCBNU1BvaW50ZXJVcCBwb2ludGVydXAnLCBvblRvdWNoRW5kKTtcbiAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmJpbmQoJ01TUG9pbnRlckNhbmNlbCBwb2ludGVyY2FuY2VsJywgb25Qb2ludGVyQ2FuY2VsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FuY2VsIFBvaW50ZXIgZm9yIFdpbmRvd3MgUGhvbmVcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIG9uUG9pbnRlckNhbmNlbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIC8qIG9uUG9pbnRlckNhbmNlbCBoYW5kbGVyIGlzIG5lZWRlZCB0byBkZWFsIHdpdGggc2l0dWF0aW9ucyB3aGVuIGEgdG91Y2hlbmRcbiAgICAgIGRvZXNuJ3QgZmlyZSBhZnRlciBhIHRvdWNoc3RhcnQgKHRoaXMgaGFwcGVucyBvbiB3aW5kb3dzIHBob25lcyBvbmx5KSAqL1xuICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eShzbGlkZXIudG91Y2gub3JpZ2luYWxQb3MubGVmdCwgJ3Jlc2V0JywgMCk7XG5cbiAgICAgIC8vcmVtb3ZlIGhhbmRsZXJzXG4gICAgICBzbGlkZXIuY29udHJvbHMuZWwucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICBzbGlkZXIudmlld3BvcnQudW5iaW5kKCdNU1BvaW50ZXJDYW5jZWwgcG9pbnRlcmNhbmNlbCcsIG9uUG9pbnRlckNhbmNlbCk7XG4gICAgICBzbGlkZXIudmlld3BvcnQudW5iaW5kKCd0b3VjaG1vdmUgTVNQb2ludGVyTW92ZSBwb2ludGVybW92ZScsIG9uVG91Y2hNb3ZlKTtcbiAgICAgIHNsaWRlci52aWV3cG9ydC51bmJpbmQoJ3RvdWNoZW5kIE1TUG9pbnRlclVwIHBvaW50ZXJ1cCcsIG9uVG91Y2hFbmQpO1xuICAgICAgaWYgKHNsaWRlci52aWV3cG9ydC5nZXQoMCkucmVsZWFzZVBvaW50ZXJDYXB0dXJlKSB7XG4gICAgICAgIHNsaWRlci52aWV3cG9ydC5nZXQoMCkucmVsZWFzZVBvaW50ZXJDYXB0dXJlKHNsaWRlci5wb2ludGVySWQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBcInRvdWNobW92ZVwiXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBvblRvdWNoTW92ZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBvcmlnID0gZS5vcmlnaW5hbEV2ZW50LFxuICAgICAgdG91Y2hQb2ludHMgPSAodHlwZW9mIG9yaWcuY2hhbmdlZFRvdWNoZXMgIT09ICd1bmRlZmluZWQnKSA/IG9yaWcuY2hhbmdlZFRvdWNoZXMgOiBbb3JpZ10sXG4gICAgICAvLyBpZiBzY3JvbGxpbmcgb24geSBheGlzLCBkbyBub3QgcHJldmVudCBkZWZhdWx0XG4gICAgICB4TW92ZW1lbnQgPSBNYXRoLmFicyh0b3VjaFBvaW50c1swXS5wYWdlWCAtIHNsaWRlci50b3VjaC5zdGFydC54KSxcbiAgICAgIHlNb3ZlbWVudCA9IE1hdGguYWJzKHRvdWNoUG9pbnRzWzBdLnBhZ2VZIC0gc2xpZGVyLnRvdWNoLnN0YXJ0LnkpLFxuICAgICAgdmFsdWUgPSAwLFxuICAgICAgY2hhbmdlID0gMDtcblxuICAgICAgLy8geCBheGlzIHN3aXBlXG4gICAgICBpZiAoKHhNb3ZlbWVudCAqIDMpID4geU1vdmVtZW50ICYmIHNsaWRlci5zZXR0aW5ncy5wcmV2ZW50RGVmYXVsdFN3aXBlWCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyB5IGF4aXMgc3dpcGVcbiAgICAgIH0gZWxzZSBpZiAoKHlNb3ZlbWVudCAqIDMpID4geE1vdmVtZW50ICYmIHNsaWRlci5zZXR0aW5ncy5wcmV2ZW50RGVmYXVsdFN3aXBlWSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgIT09ICdmYWRlJyAmJiBzbGlkZXIuc2V0dGluZ3Mub25lVG9PbmVUb3VjaCkge1xuICAgICAgICAvLyBpZiBob3Jpem9udGFsLCBkcmFnIGFsb25nIHggYXhpc1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIGNoYW5nZSA9IHRvdWNoUG9pbnRzWzBdLnBhZ2VYIC0gc2xpZGVyLnRvdWNoLnN0YXJ0Lng7XG4gICAgICAgICAgdmFsdWUgPSBzbGlkZXIudG91Y2gub3JpZ2luYWxQb3MubGVmdCArIGNoYW5nZTtcbiAgICAgICAgLy8gaWYgdmVydGljYWwsIGRyYWcgYWxvbmcgeSBheGlzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlID0gdG91Y2hQb2ludHNbMF0ucGFnZVkgLSBzbGlkZXIudG91Y2guc3RhcnQueTtcbiAgICAgICAgICB2YWx1ZSA9IHNsaWRlci50b3VjaC5vcmlnaW5hbFBvcy50b3AgKyBjaGFuZ2U7XG4gICAgICAgIH1cbiAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSh2YWx1ZSwgJ3Jlc2V0JywgMCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIFwidG91Y2hlbmRcIlxuICAgICAqXG4gICAgICogQHBhcmFtIGUgKGV2ZW50KVxuICAgICAqICAtIERPTSBldmVudCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgb25Ub3VjaEVuZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHNsaWRlci52aWV3cG9ydC51bmJpbmQoJ3RvdWNobW92ZSBNU1BvaW50ZXJNb3ZlIHBvaW50ZXJtb3ZlJywgb25Ub3VjaE1vdmUpO1xuICAgICAgLy9lbmFibGUgc2xpZGVyIGNvbnRyb2xzIGFzIHNvb24gYXMgdXNlciBzdG9wcyBpbnRlcmFjaW5nIHdpdGggc2xpZGVzXG4gICAgICBzbGlkZXIuY29udHJvbHMuZWwucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICB2YXIgb3JpZyAgICA9IGUub3JpZ2luYWxFdmVudCxcbiAgICAgIHRvdWNoUG9pbnRzID0gKHR5cGVvZiBvcmlnLmNoYW5nZWRUb3VjaGVzICE9PSAndW5kZWZpbmVkJykgPyBvcmlnLmNoYW5nZWRUb3VjaGVzIDogW29yaWddLFxuICAgICAgdmFsdWUgICAgICAgPSAwLFxuICAgICAgZGlzdGFuY2UgICAgPSAwO1xuICAgICAgLy8gcmVjb3JkIGVuZCB4LCB5IHBvc2l0aW9uc1xuICAgICAgc2xpZGVyLnRvdWNoLmVuZC54ID0gdG91Y2hQb2ludHNbMF0ucGFnZVg7XG4gICAgICBzbGlkZXIudG91Y2guZW5kLnkgPSB0b3VjaFBvaW50c1swXS5wYWdlWTtcbiAgICAgIC8vIGlmIGZhZGUgbW9kZSwgY2hlY2sgaWYgYWJzb2x1dGUgeCBkaXN0YW5jZSBjbGVhcnMgdGhlIHRocmVzaG9sZFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnZmFkZScpIHtcbiAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhzbGlkZXIudG91Y2guc3RhcnQueCAtIHNsaWRlci50b3VjaC5lbmQueCk7XG4gICAgICAgIGlmIChkaXN0YW5jZSA+PSBzbGlkZXIuc2V0dGluZ3Muc3dpcGVUaHJlc2hvbGQpIHtcbiAgICAgICAgICBpZiAoc2xpZGVyLnRvdWNoLnN0YXJ0LnggPiBzbGlkZXIudG91Y2guZW5kLngpIHtcbiAgICAgICAgICAgIGVsLmdvVG9OZXh0U2xpZGUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuZ29Ub1ByZXZTbGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbC5zdG9wQXV0bygpO1xuICAgICAgICB9XG4gICAgICAvLyBub3QgZmFkZSBtb2RlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjYWxjdWxhdGUgZGlzdGFuY2UgYW5kIGVsJ3MgYW5pbWF0ZSBwcm9wZXJ0eVxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIGRpc3RhbmNlID0gc2xpZGVyLnRvdWNoLmVuZC54IC0gc2xpZGVyLnRvdWNoLnN0YXJ0Lng7XG4gICAgICAgICAgdmFsdWUgPSBzbGlkZXIudG91Y2gub3JpZ2luYWxQb3MubGVmdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaXN0YW5jZSA9IHNsaWRlci50b3VjaC5lbmQueSAtIHNsaWRlci50b3VjaC5zdGFydC55O1xuICAgICAgICAgIHZhbHVlID0gc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zLnRvcDtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBub3QgaW5maW5pdGUgbG9vcCBhbmQgZmlyc3QgLyBsYXN0IHNsaWRlLCBkbyBub3QgYXR0ZW1wdCBhIHNsaWRlIHRyYW5zaXRpb25cbiAgICAgICAgaWYgKCFzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wICYmICgoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gMCAmJiBkaXN0YW5jZSA+IDApIHx8IChzbGlkZXIuYWN0aXZlLmxhc3QgJiYgZGlzdGFuY2UgPCAwKSkpIHtcbiAgICAgICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHZhbHVlLCAncmVzZXQnLCAyMDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNoZWNrIGlmIGRpc3RhbmNlIGNsZWFycyB0aHJlc2hvbGRcbiAgICAgICAgICBpZiAoTWF0aC5hYnMoZGlzdGFuY2UpID49IHNsaWRlci5zZXR0aW5ncy5zd2lwZVRocmVzaG9sZCkge1xuICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgMCkge1xuICAgICAgICAgICAgICBlbC5nb1RvTmV4dFNsaWRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbC5nb1RvUHJldlNsaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbC5zdG9wQXV0bygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBlbC5hbmltYXRlKHByb3BlcnR5LCAyMDApO1xuICAgICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSh2YWx1ZSwgJ3Jlc2V0JywgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNsaWRlci52aWV3cG9ydC51bmJpbmQoJ3RvdWNoZW5kIE1TUG9pbnRlclVwIHBvaW50ZXJ1cCcsIG9uVG91Y2hFbmQpO1xuICAgICAgaWYgKHNsaWRlci52aWV3cG9ydC5nZXQoMCkucmVsZWFzZVBvaW50ZXJDYXB0dXJlKSB7XG4gICAgICAgIHNsaWRlci52aWV3cG9ydC5nZXQoMCkucmVsZWFzZVBvaW50ZXJDYXB0dXJlKHNsaWRlci5wb2ludGVySWQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBXaW5kb3cgcmVzaXplIGV2ZW50IGNhbGxiYWNrXG4gICAgICovXG4gICAgdmFyIHJlc2l6ZVdpbmRvdyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIC8vIGRvbid0IGRvIGFueXRoaW5nIGlmIHNsaWRlciBpc24ndCBpbml0aWFsaXplZC5cbiAgICAgIGlmICghc2xpZGVyLmluaXRpYWxpemVkKSB7IHJldHVybjsgfVxuICAgICAgLy8gRGVsYXkgaWYgc2xpZGVyIHdvcmtpbmcuXG4gICAgICBpZiAoc2xpZGVyLndvcmtpbmcpIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQocmVzaXplV2luZG93LCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnZXQgdGhlIG5ldyB3aW5kb3cgZGltZW5zIChhZ2FpbiwgdGhhbmsgeW91IElFKVxuICAgICAgICB2YXIgd2luZG93V2lkdGhOZXcgPSAkKHdpbmRvdykud2lkdGgoKSxcbiAgICAgICAgd2luZG93SGVpZ2h0TmV3ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCBpdCBpcyBhIHRydWUgd2luZG93IHJlc2l6ZVxuICAgICAgICAvLyAqd2UgbXVzdCBjaGVjayB0aGlzIGJlY2F1c2Ugb3VyIGRpbm9zYXVyIGZyaWVuZCBJRSBmaXJlcyBhIHdpbmRvdyByZXNpemUgZXZlbnQgd2hlbiBjZXJ0YWluIERPTSBlbGVtZW50c1xuICAgICAgICAvLyBhcmUgcmVzaXplZC4gQ2FuIHlvdSBqdXN0IGRpZSBhbHJlYWR5PypcbiAgICAgICAgaWYgKHdpbmRvd1dpZHRoICE9PSB3aW5kb3dXaWR0aE5ldyB8fCB3aW5kb3dIZWlnaHQgIT09IHdpbmRvd0hlaWdodE5ldykge1xuICAgICAgICAgIC8vIHNldCB0aGUgbmV3IHdpbmRvdyBkaW1lbnNcbiAgICAgICAgICB3aW5kb3dXaWR0aCA9IHdpbmRvd1dpZHRoTmV3O1xuICAgICAgICAgIHdpbmRvd0hlaWdodCA9IHdpbmRvd0hlaWdodE5ldztcbiAgICAgICAgICAvLyB1cGRhdGUgYWxsIGR5bmFtaWMgZWxlbWVudHNcbiAgICAgICAgICBlbC5yZWRyYXdTbGlkZXIoKTtcbiAgICAgICAgICAvLyBDYWxsIHVzZXIgcmVzaXplIGhhbmRsZXJcbiAgICAgICAgICBzbGlkZXIuc2V0dGluZ3Mub25TbGlkZXJSZXNpemUuY2FsbChlbCwgc2xpZGVyLmFjdGl2ZS5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBhcmlhLWhpZGRlbj10cnVlIGF0dHJpYnV0ZSB0byBlYWNoIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdGFydFZpc2libGVJbmRleCAoaW50KVxuICAgICAqICAtIHRoZSBmaXJzdCB2aXNpYmxlIGVsZW1lbnQncyBpbmRleFxuICAgICAqL1xuICAgIHZhciBhcHBseUFyaWFIaWRkZW5BdHRyaWJ1dGVzID0gZnVuY3Rpb24oc3RhcnRWaXNpYmxlSW5kZXgpIHtcbiAgICAgIHZhciBudW1iZXJPZlNsaWRlc1Nob3dpbmcgPSBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCk7XG4gICAgICAvLyBvbmx5IGFwcGx5IGF0dHJpYnV0ZXMgaWYgdGhlIHNldHRpbmcgaXMgZW5hYmxlZCBhbmQgbm90IGluIHRpY2tlciBtb2RlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFIaWRkZW4gJiYgIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHtcbiAgICAgICAgLy8gYWRkIGFyaWEtaGlkZGVuPXRydWUgdG8gYWxsIGVsZW1lbnRzXG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgIC8vIGdldCB0aGUgdmlzaWJsZSBlbGVtZW50cyBhbmQgY2hhbmdlIHRvIGFyaWEtaGlkZGVuPWZhbHNlXG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5zbGljZShzdGFydFZpc2libGVJbmRleCwgc3RhcnRWaXNpYmxlSW5kZXggKyBudW1iZXJPZlNsaWRlc1Nob3dpbmcpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5kZXggYWNjb3JkaW5nIHRvIHByZXNlbnQgcGFnZSByYW5nZVxuICAgICAqXG4gICAgICogQHBhcmFtIHNsaWRlT25kZXggKGludClcbiAgICAgKiAgLSB0aGUgZGVzaXJlZCBzbGlkZSBpbmRleFxuICAgICAqL1xuICAgIHZhciBzZXRTbGlkZUluZGV4ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuICAgICAgaWYgKHNsaWRlSW5kZXggPCAwKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wKSB7XG4gICAgICAgICAgcmV0dXJuIGdldFBhZ2VyUXR5KCkgLSAxO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgLy93ZSBkb24ndCBnbyB0byB1bmRlZmluZWQgc2xpZGVzXG4gICAgICAgICAgcmV0dXJuIHNsaWRlci5hY3RpdmUuaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIC8vIGlmIHNsaWRlSW5kZXggaXMgZ3JlYXRlciB0aGFuIGNoaWxkcmVuIGxlbmd0aCwgc2V0IGFjdGl2ZSBpbmRleCB0byAwICh0aGlzIGhhcHBlbnMgZHVyaW5nIGluZmluaXRlIGxvb3ApXG4gICAgICB9IGVsc2UgaWYgKHNsaWRlSW5kZXggPj0gZ2V0UGFnZXJRdHkoKSkge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCkge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vd2UgZG9uJ3QgbW92ZSB0byB1bmRlZmluZWQgcGFnZXNcbiAgICAgICAgICByZXR1cm4gc2xpZGVyLmFjdGl2ZS5pbmRleDtcbiAgICAgICAgfVxuICAgICAgLy8gc2V0IGFjdGl2ZSBpbmRleCB0byByZXF1ZXN0ZWQgc2xpZGVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzbGlkZUluZGV4O1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAqID0gUFVCTElDIEZVTkNUSU9OU1xuICAgICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBzbGlkZSB0cmFuc2l0aW9uIHRvIHRoZSBzcGVjaWZpZWQgc2xpZGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzbGlkZUluZGV4IChpbnQpXG4gICAgICogIC0gdGhlIGRlc3RpbmF0aW9uIHNsaWRlJ3MgaW5kZXggKHplcm8tYmFzZWQpXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGlyZWN0aW9uIChzdHJpbmcpXG4gICAgICogIC0gSU5URVJOQUwgVVNFIE9OTFkgLSB0aGUgZGlyZWN0aW9uIG9mIHRyYXZlbCAoXCJwcmV2XCIgLyBcIm5leHRcIilcbiAgICAgKi9cbiAgICBlbC5nb1RvU2xpZGUgPSBmdW5jdGlvbihzbGlkZUluZGV4LCBkaXJlY3Rpb24pIHtcbiAgICAgIC8vIG9uU2xpZGVCZWZvcmUsIG9uU2xpZGVOZXh0LCBvblNsaWRlUHJldiBjYWxsYmFja3NcbiAgICAgIC8vIEFsbG93IHRyYW5zaXRpb24gY2FuY2VsaW5nIGJhc2VkIG9uIHJldHVybmVkIHZhbHVlXG4gICAgICB2YXIgcGVyZm9ybVRyYW5zaXRpb24gPSB0cnVlLFxuICAgICAgbW92ZUJ5ID0gMCxcbiAgICAgIHBvc2l0aW9uID0ge2xlZnQ6IDAsIHRvcDogMH0sXG4gICAgICBsYXN0Q2hpbGQgPSBudWxsLFxuICAgICAgbGFzdFNob3dpbmdJbmRleCwgZXEsIHZhbHVlLCByZXF1ZXN0RWw7XG4gICAgICAvLyBzdG9yZSB0aGUgb2xkIGluZGV4XG4gICAgICBzbGlkZXIub2xkSW5kZXggPSBzbGlkZXIuYWN0aXZlLmluZGV4O1xuICAgICAgLy9zZXQgbmV3IGluZGV4XG4gICAgICBzbGlkZXIuYWN0aXZlLmluZGV4ID0gc2V0U2xpZGVJbmRleChzbGlkZUluZGV4KTtcblxuICAgICAgLy8gaWYgcGx1Z2luIGlzIGN1cnJlbnRseSBpbiBtb3Rpb24sIGlnbm9yZSByZXF1ZXN0XG4gICAgICBpZiAoc2xpZGVyLndvcmtpbmcgfHwgc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gc2xpZGVyLm9sZEluZGV4KSB7IHJldHVybjsgfVxuICAgICAgLy8gZGVjbGFyZSB0aGF0IHBsdWdpbiBpcyBpbiBtb3Rpb25cbiAgICAgIHNsaWRlci53b3JraW5nID0gdHJ1ZTtcblxuICAgICAgcGVyZm9ybVRyYW5zaXRpb24gPSBzbGlkZXIuc2V0dGluZ3Mub25TbGlkZUJlZm9yZS5jYWxsKGVsLCBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCksIHNsaWRlci5vbGRJbmRleCwgc2xpZGVyLmFjdGl2ZS5pbmRleCk7XG5cbiAgICAgIC8vIElmIHRyYW5zaXRpb25zIGNhbmNlbGVkLCByZXNldCBhbmQgcmV0dXJuXG4gICAgICBpZiAodHlwZW9mIChwZXJmb3JtVHJhbnNpdGlvbikgIT09ICd1bmRlZmluZWQnICYmICFwZXJmb3JtVHJhbnNpdGlvbikge1xuICAgICAgICBzbGlkZXIuYWN0aXZlLmluZGV4ID0gc2xpZGVyLm9sZEluZGV4OyAvLyByZXN0b3JlIG9sZCBpbmRleFxuICAgICAgICBzbGlkZXIud29ya2luZyA9IGZhbHNlOyAvLyBpcyBub3QgaW4gbW90aW9uXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIC8vIFByZXZlbnQgY2FuY2VsaW5nIGluIGZ1dHVyZSBmdW5jdGlvbnMgb3IgbGFjayB0aGVyZS1vZiBmcm9tIG5lZ2F0aW5nIHByZXZpb3VzIGNvbW1hbmRzIHRvIGNhbmNlbFxuICAgICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5vblNsaWRlTmV4dC5jYWxsKGVsLCBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCksIHNsaWRlci5vbGRJbmRleCwgc2xpZGVyLmFjdGl2ZS5pbmRleCkpIHtcbiAgICAgICAgICBwZXJmb3JtVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIC8vIFByZXZlbnQgY2FuY2VsaW5nIGluIGZ1dHVyZSBmdW5jdGlvbnMgb3IgbGFjayB0aGVyZS1vZiBmcm9tIG5lZ2F0aW5nIHByZXZpb3VzIGNvbW1hbmRzIHRvIGNhbmNlbFxuICAgICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5vblNsaWRlUHJldi5jYWxsKGVsLCBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCksIHNsaWRlci5vbGRJbmRleCwgc2xpZGVyLmFjdGl2ZS5pbmRleCkpIHtcbiAgICAgICAgICBwZXJmb3JtVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGNoZWNrIGlmIGxhc3Qgc2xpZGVcbiAgICAgIHNsaWRlci5hY3RpdmUubGFzdCA9IHNsaWRlci5hY3RpdmUuaW5kZXggPj0gZ2V0UGFnZXJRdHkoKSAtIDE7XG4gICAgICAvLyB1cGRhdGUgdGhlIHBhZ2VyIHdpdGggYWN0aXZlIGNsYXNzXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnBhZ2VyIHx8IHNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSkgeyB1cGRhdGVQYWdlckFjdGl2ZShzbGlkZXIuYWN0aXZlLmluZGV4KTsgfVxuICAgICAgLy8gLy8gY2hlY2sgZm9yIGRpcmVjdGlvbiBjb250cm9sIHVwZGF0ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5jb250cm9scykgeyB1cGRhdGVEaXJlY3Rpb25Db250cm9scygpOyB9XG4gICAgICAvLyBpZiBzbGlkZXIgaXMgc2V0IHRvIG1vZGU6IFwiZmFkZVwiXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdmYWRlJykge1xuICAgICAgICAvLyBpZiBhZGFwdGl2ZUhlaWdodCBpcyB0cnVlIGFuZCBuZXh0IGhlaWdodCBpcyBkaWZmZXJlbnQgZnJvbSBjdXJyZW50IGhlaWdodCwgYW5pbWF0ZSB0byB0aGUgbmV3IGhlaWdodFxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFkYXB0aXZlSGVpZ2h0ICYmIHNsaWRlci52aWV3cG9ydC5oZWlnaHQoKSAhPT0gZ2V0Vmlld3BvcnRIZWlnaHQoKSkge1xuICAgICAgICAgIHNsaWRlci52aWV3cG9ydC5hbmltYXRlKHtoZWlnaHQ6IGdldFZpZXdwb3J0SGVpZ2h0KCl9LCBzbGlkZXIuc2V0dGluZ3MuYWRhcHRpdmVIZWlnaHRTcGVlZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZmFkZSBvdXQgdGhlIHZpc2libGUgY2hpbGQgYW5kIHJlc2V0IGl0cyB6LWluZGV4IHZhbHVlXG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5maWx0ZXIoJzp2aXNpYmxlJykuZmFkZU91dChzbGlkZXIuc2V0dGluZ3Muc3BlZWQpLmNzcyh7ekluZGV4OiAwfSk7XG4gICAgICAgIC8vIGZhZGUgaW4gdGhlIG5ld2x5IHJlcXVlc3RlZCBzbGlkZVxuICAgICAgICBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCkuY3NzKCd6SW5kZXgnLCBzbGlkZXIuc2V0dGluZ3Muc2xpZGVaSW5kZXggKyAxKS5mYWRlSW4oc2xpZGVyLnNldHRpbmdzLnNwZWVkLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkKHRoaXMpLmNzcygnekluZGV4Jywgc2xpZGVyLnNldHRpbmdzLnNsaWRlWkluZGV4KTtcbiAgICAgICAgICB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgIC8vIHNsaWRlciBtb2RlIGlzIG5vdCBcImZhZGVcIlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgYWRhcHRpdmVIZWlnaHQgaXMgdHJ1ZSBhbmQgbmV4dCBoZWlnaHQgaXMgZGlmZmVyZW50IGZyb20gY3VycmVudCBoZWlnaHQsIGFuaW1hdGUgdG8gdGhlIG5ldyBoZWlnaHRcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hZGFwdGl2ZUhlaWdodCAmJiBzbGlkZXIudmlld3BvcnQuaGVpZ2h0KCkgIT09IGdldFZpZXdwb3J0SGVpZ2h0KCkpIHtcbiAgICAgICAgICBzbGlkZXIudmlld3BvcnQuYW5pbWF0ZSh7aGVpZ2h0OiBnZXRWaWV3cG9ydEhlaWdodCgpfSwgc2xpZGVyLnNldHRpbmdzLmFkYXB0aXZlSGVpZ2h0U3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGNhcm91c2VsIGFuZCBub3QgaW5maW5pdGUgbG9vcFxuICAgICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3AgJiYgc2xpZGVyLmNhcm91c2VsICYmIHNsaWRlci5hY3RpdmUubGFzdCkge1xuICAgICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICAvLyBnZXQgdGhlIGxhc3QgY2hpbGQgcG9zaXRpb25cbiAgICAgICAgICAgIGxhc3RDaGlsZCA9IHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGxhc3RDaGlsZC5wb3NpdGlvbigpO1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgbGFzdCBzbGlkZVxuICAgICAgICAgICAgbW92ZUJ5ID0gc2xpZGVyLnZpZXdwb3J0LndpZHRoKCkgLSBsYXN0Q2hpbGQub3V0ZXJXaWR0aCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBnZXQgbGFzdCBzaG93aW5nIGluZGV4IHBvc2l0aW9uXG4gICAgICAgICAgICBsYXN0U2hvd2luZ0luZGV4ID0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAtIHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXM7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IHNsaWRlci5jaGlsZHJlbi5lcShsYXN0U2hvd2luZ0luZGV4KS5wb3NpdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBob3Jpem9udGFsIGNhcm91c2VsLCBnb2luZyBwcmV2aW91cyB3aGlsZSBvbiBmaXJzdCBzbGlkZSAoaW5maW5pdGVMb29wIG1vZGUpXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLmNhcm91c2VsICYmIHNsaWRlci5hY3RpdmUubGFzdCAmJiBkaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBjaGlsZCBwb3NpdGlvblxuICAgICAgICAgIGVxID0gc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPT09IDEgPyBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzIC0gZ2V0TW92ZUJ5KCkgOiAoKGdldFBhZ2VyUXR5KCkgLSAxKSAqIGdldE1vdmVCeSgpKSAtIChzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyk7XG4gICAgICAgICAgbGFzdENoaWxkID0gZWwuY2hpbGRyZW4oJy5ieC1jbG9uZScpLmVxKGVxKTtcbiAgICAgICAgICBwb3NpdGlvbiA9IGxhc3RDaGlsZC5wb3NpdGlvbigpO1xuICAgICAgICAvLyBpZiBpbmZpbml0ZSBsb29wIGFuZCBcIk5leHRcIiBpcyBjbGlja2VkIG9uIHRoZSBsYXN0IHNsaWRlXG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbmV4dCcgJiYgc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gMCkge1xuICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBjbG9uZSBwb3NpdGlvblxuICAgICAgICAgIHBvc2l0aW9uID0gZWwuZmluZCgnPiAuYngtY2xvbmUnKS5lcShzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzKS5wb3NpdGlvbigpO1xuICAgICAgICAgIHNsaWRlci5hY3RpdmUubGFzdCA9IGZhbHNlO1xuICAgICAgICAvLyBub3JtYWwgbm9uLXplcm8gcmVxdWVzdHNcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZUluZGV4ID49IDApIHtcbiAgICAgICAgICAvL3BhcnNlSW50IGlzIGFwcGxpZWQgdG8gYWxsb3cgZmxvYXRzIGZvciBzbGlkZXMvcGFnZVxuICAgICAgICAgIHJlcXVlc3RFbCA9IHNsaWRlSW5kZXggKiBwYXJzZUludChnZXRNb3ZlQnkoKSk7XG4gICAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEocmVxdWVzdEVsKS5wb3NpdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogSWYgdGhlIHBvc2l0aW9uIGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICogKGUuZy4gaWYgeW91IGRlc3Ryb3kgdGhlIHNsaWRlciBvbiBhIG5leHQgY2xpY2spLFxuICAgICAgICAgKiBpdCBkb2Vzbid0IHRocm93IGFuIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHR5cGVvZiAocG9zaXRpb24pICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhbHVlID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/IC0ocG9zaXRpb24ubGVmdCAtIG1vdmVCeSkgOiAtcG9zaXRpb24udG9wO1xuICAgICAgICAgIC8vIHBsdWdpbiB2YWx1ZXMgdG8gYmUgYW5pbWF0ZWRcbiAgICAgICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHZhbHVlLCAnc2xpZGUnLCBzbGlkZXIuc2V0dGluZ3Muc3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIHNsaWRlci53b3JraW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFIaWRkZW4pIHsgYXBwbHlBcmlhSGlkZGVuQXR0cmlidXRlcyhzbGlkZXIuYWN0aXZlLmluZGV4ICogZ2V0TW92ZUJ5KCkpOyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zaXRpb25zIHRvIHRoZSBuZXh0IHNsaWRlIGluIHRoZSBzaG93XG4gICAgICovXG4gICAgZWwuZ29Ub05leHRTbGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaWYgaW5maW5pdGVMb29wIGlzIGZhbHNlIGFuZCBsYXN0IHBhZ2UgaXMgc2hvd2luZywgZGlzcmVnYXJkIGNhbGxcbiAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiBzbGlkZXIuYWN0aXZlLmxhc3QpIHsgcmV0dXJuOyB9XG5cdCAgaWYgKHNsaWRlci53b3JraW5nID09IHRydWUpeyByZXR1cm4gO31cbiAgICAgIHZhciBwYWdlckluZGV4ID0gcGFyc2VJbnQoc2xpZGVyLmFjdGl2ZS5pbmRleCkgKyAxO1xuICAgICAgZWwuZ29Ub1NsaWRlKHBhZ2VySW5kZXgsICduZXh0Jyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zaXRpb25zIHRvIHRoZSBwcmV2IHNsaWRlIGluIHRoZSBzaG93XG4gICAgICovXG4gICAgZWwuZ29Ub1ByZXZTbGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaWYgaW5maW5pdGVMb29wIGlzIGZhbHNlIGFuZCBsYXN0IHBhZ2UgaXMgc2hvd2luZywgZGlzcmVnYXJkIGNhbGxcbiAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiBzbGlkZXIuYWN0aXZlLmluZGV4ID09PSAwKSB7IHJldHVybjsgfVxuXHQgIGlmIChzbGlkZXIud29ya2luZyA9PSB0cnVlKXsgcmV0dXJuIDt9XG4gICAgICB2YXIgcGFnZXJJbmRleCA9IHBhcnNlSW50KHNsaWRlci5hY3RpdmUuaW5kZXgpIC0gMTtcbiAgICAgIGVsLmdvVG9TbGlkZShwYWdlckluZGV4LCAncHJldicpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdGFydHMgdGhlIGF1dG8gc2hvd1xuICAgICAqXG4gICAgICogQHBhcmFtIHByZXZlbnRDb250cm9sVXBkYXRlIChib29sZWFuKVxuICAgICAqICAtIGlmIHRydWUsIGF1dG8gY29udHJvbHMgc3RhdGUgd2lsbCBub3QgYmUgdXBkYXRlZFxuICAgICAqL1xuICAgIGVsLnN0YXJ0QXV0byA9IGZ1bmN0aW9uKHByZXZlbnRDb250cm9sVXBkYXRlKSB7XG4gICAgICAvLyBpZiBhbiBpbnRlcnZhbCBhbHJlYWR5IGV4aXN0cywgZGlzcmVnYXJkIGNhbGxcbiAgICAgIGlmIChzbGlkZXIuaW50ZXJ2YWwpIHsgcmV0dXJuOyB9XG4gICAgICAvLyBjcmVhdGUgYW4gaW50ZXJ2YWxcbiAgICAgIHNsaWRlci5pbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9EaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICAgIGVsLmdvVG9OZXh0U2xpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbC5nb1RvUHJldlNsaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHNsaWRlci5zZXR0aW5ncy5wYXVzZSk7XG5cdCAgLy9hbGxiYWNrIGZvciB3aGVuIHRoZSBhdXRvIHJvdGF0ZSBzdGF0dXMgY2hhbmdlc1xuXHQgIHNsaWRlci5zZXR0aW5ncy5vbkF1dG9DaGFuZ2UuY2FsbChlbCwgdHJ1ZSk7XG4gICAgICAvLyBpZiBhdXRvIGNvbnRyb2xzIGFyZSBkaXNwbGF5ZWQgYW5kIHByZXZlbnRDb250cm9sVXBkYXRlIGlzIG5vdCB0cnVlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9Db250cm9scyAmJiBwcmV2ZW50Q29udHJvbFVwZGF0ZSAhPT0gdHJ1ZSkgeyB1cGRhdGVBdXRvQ29udHJvbHMoJ3N0b3AnKTsgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdG9wcyB0aGUgYXV0byBzaG93XG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJldmVudENvbnRyb2xVcGRhdGUgKGJvb2xlYW4pXG4gICAgICogIC0gaWYgdHJ1ZSwgYXV0byBjb250cm9scyBzdGF0ZSB3aWxsIG5vdCBiZSB1cGRhdGVkXG4gICAgICovXG4gICAgZWwuc3RvcEF1dG8gPSBmdW5jdGlvbihwcmV2ZW50Q29udHJvbFVwZGF0ZSkge1xuICAgICAgLy8gaWYgbm8gaW50ZXJ2YWwgZXhpc3RzLCBkaXNyZWdhcmQgY2FsbFxuICAgICAgaWYgKCFzbGlkZXIuaW50ZXJ2YWwpIHsgcmV0dXJuOyB9XG4gICAgICAvLyBjbGVhciB0aGUgaW50ZXJ2YWxcbiAgICAgIGNsZWFySW50ZXJ2YWwoc2xpZGVyLmludGVydmFsKTtcbiAgICAgIHNsaWRlci5pbnRlcnZhbCA9IG51bGw7XG5cdCAgLy9hbGxiYWNrIGZvciB3aGVuIHRoZSBhdXRvIHJvdGF0ZSBzdGF0dXMgY2hhbmdlc1xuXHQgIHNsaWRlci5zZXR0aW5ncy5vbkF1dG9DaGFuZ2UuY2FsbChlbCwgZmFsc2UpO1xuICAgICAgLy8gaWYgYXV0byBjb250cm9scyBhcmUgZGlzcGxheWVkIGFuZCBwcmV2ZW50Q29udHJvbFVwZGF0ZSBpcyBub3QgdHJ1ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHMgJiYgcHJldmVudENvbnRyb2xVcGRhdGUgIT09IHRydWUpIHsgdXBkYXRlQXV0b0NvbnRyb2xzKCdzdGFydCcpOyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY3VycmVudCBzbGlkZSBpbmRleCAoemVyby1iYXNlZClcbiAgICAgKi9cbiAgICBlbC5nZXRDdXJyZW50U2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzbGlkZXIuYWN0aXZlLmluZGV4O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGN1cnJlbnQgc2xpZGUgZWxlbWVudFxuICAgICAqL1xuICAgIGVsLmdldEN1cnJlbnRTbGlkZUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzbGlkZSBlbGVtZW50XG4gICAgICogQHBhcmFtIGluZGV4IChpbnQpXG4gICAgICogIC0gVGhlIGluZGV4ICh6ZXJvLWJhc2VkKSBvZiB0aGUgZWxlbWVudCB5b3Ugd2FudCByZXR1cm5lZC5cbiAgICAgKi9cbiAgICBlbC5nZXRTbGlkZUVsZW1lbnQgPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIHNsaWRlci5jaGlsZHJlbi5lcShpbmRleCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgbnVtYmVyIG9mIHNsaWRlcyBpbiBzaG93XG4gICAgICovXG4gICAgZWwuZ2V0U2xpZGVDb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNsaWRlci5jaGlsZHJlbi5sZW5ndGg7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBzbGlkZXIud29ya2luZyB2YXJpYWJsZVxuICAgICAqL1xuICAgIGVsLmlzV29ya2luZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNsaWRlci53b3JraW5nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYWxsIGR5bmFtaWMgc2xpZGVyIGVsZW1lbnRzXG4gICAgICovXG4gICAgZWwucmVkcmF3U2xpZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyByZXNpemUgYWxsIGNoaWxkcmVuIGluIHJhdGlvIHRvIG5ldyBzY3JlZW4gc2l6ZVxuICAgICAgc2xpZGVyLmNoaWxkcmVuLmFkZChlbC5maW5kKCcuYngtY2xvbmUnKSkub3V0ZXJXaWR0aChnZXRTbGlkZVdpZHRoKCkpO1xuICAgICAgLy8gYWRqdXN0IHRoZSBoZWlnaHRcbiAgICAgIHNsaWRlci52aWV3cG9ydC5jc3MoJ2hlaWdodCcsIGdldFZpZXdwb3J0SGVpZ2h0KCkpO1xuICAgICAgLy8gdXBkYXRlIHRoZSBzbGlkZSBwb3NpdGlvblxuICAgICAgaWYgKCFzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7IHNldFNsaWRlUG9zaXRpb24oKTsgfVxuICAgICAgLy8gaWYgYWN0aXZlLmxhc3Qgd2FzIHRydWUgYmVmb3JlIHRoZSBzY3JlZW4gcmVzaXplLCB3ZSB3YW50XG4gICAgICAvLyB0byBrZWVwIGl0IGxhc3Qgbm8gbWF0dGVyIHdoYXQgc2NyZWVuIHNpemUgd2UgZW5kIG9uXG4gICAgICBpZiAoc2xpZGVyLmFjdGl2ZS5sYXN0KSB7IHNsaWRlci5hY3RpdmUuaW5kZXggPSBnZXRQYWdlclF0eSgpIC0gMTsgfVxuICAgICAgLy8gaWYgdGhlIGFjdGl2ZSBpbmRleCAocGFnZSkgbm8gbG9uZ2VyIGV4aXN0cyBkdWUgdG8gdGhlIHJlc2l6ZSwgc2ltcGx5IHNldCB0aGUgaW5kZXggYXMgbGFzdFxuICAgICAgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPj0gZ2V0UGFnZXJRdHkoKSkgeyBzbGlkZXIuYWN0aXZlLmxhc3QgPSB0cnVlOyB9XG4gICAgICAvLyBpZiBhIHBhZ2VyIGlzIGJlaW5nIGRpc3BsYXllZCBhbmQgYSBjdXN0b20gcGFnZXIgaXMgbm90IGJlaW5nIHVzZWQsIHVwZGF0ZSBpdFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wYWdlciAmJiAhc2xpZGVyLnNldHRpbmdzLnBhZ2VyQ3VzdG9tKSB7XG4gICAgICAgIHBvcHVsYXRlUGFnZXIoKTtcbiAgICAgICAgdXBkYXRlUGFnZXJBY3RpdmUoc2xpZGVyLmFjdGl2ZS5pbmRleCk7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFIaWRkZW4pIHsgYXBwbHlBcmlhSGlkZGVuQXR0cmlidXRlcyhzbGlkZXIuYWN0aXZlLmluZGV4ICogZ2V0TW92ZUJ5KCkpOyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgdGhlIHNsaWRlciAocmV2ZXJ0IGV2ZXJ5dGhpbmcgYmFjayB0byBvcmlnaW5hbCBzdGF0ZSlcbiAgICAgKi9cbiAgICBlbC5kZXN0cm95U2xpZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBkb24ndCBkbyBhbnl0aGluZyBpZiBzbGlkZXIgaGFzIGFscmVhZHkgYmVlbiBkZXN0cm95ZWRcbiAgICAgIGlmICghc2xpZGVyLmluaXRpYWxpemVkKSB7IHJldHVybjsgfVxuICAgICAgc2xpZGVyLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAkKCcuYngtY2xvbmUnLCB0aGlzKS5yZW1vdmUoKTtcbiAgICAgIHNsaWRlci5jaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJCh0aGlzKS5kYXRhKCdvcmlnU3R5bGUnKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgJCh0aGlzKS5hdHRyKCdzdHlsZScsICQodGhpcykuZGF0YSgnb3JpZ1N0eWxlJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICQodGhpcykucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoJCh0aGlzKS5kYXRhKCdvcmlnU3R5bGUnKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuYXR0cignc3R5bGUnLCAkKHRoaXMpLmRhdGEoJ29yaWdTdHlsZScpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQodGhpcykucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgIH1cbiAgICAgICQodGhpcykudW53cmFwKCkudW53cmFwKCk7XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLmVsKSB7IHNsaWRlci5jb250cm9scy5lbC5yZW1vdmUoKTsgfVxuICAgICAgaWYgKHNsaWRlci5jb250cm9scy5uZXh0KSB7IHNsaWRlci5jb250cm9scy5uZXh0LnJlbW92ZSgpOyB9XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLnByZXYpIHsgc2xpZGVyLmNvbnRyb2xzLnByZXYucmVtb3ZlKCk7IH1cbiAgICAgIGlmIChzbGlkZXIucGFnZXJFbCAmJiBzbGlkZXIuc2V0dGluZ3MuY29udHJvbHMgJiYgIXNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSkgeyBzbGlkZXIucGFnZXJFbC5yZW1vdmUoKTsgfVxuICAgICAgJCgnLmJ4LWNhcHRpb24nLCB0aGlzKS5yZW1vdmUoKTtcbiAgICAgIGlmIChzbGlkZXIuY29udHJvbHMuYXV0b0VsKSB7IHNsaWRlci5jb250cm9scy5hdXRvRWwucmVtb3ZlKCk7IH1cbiAgICAgIGNsZWFySW50ZXJ2YWwoc2xpZGVyLmludGVydmFsKTtcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucmVzcG9uc2l2ZSkgeyAkKHdpbmRvdykudW5iaW5kKCdyZXNpemUnLCByZXNpemVXaW5kb3cpOyB9XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmtleWJvYXJkRW5hYmxlZCkgeyAkKGRvY3VtZW50KS51bmJpbmQoJ2tleWRvd24nLCBrZXlQcmVzcyk7IH1cbiAgICAgIC8vcmVtb3ZlIHNlbGYgcmVmZXJlbmNlIGluIGRhdGFcbiAgICAgICQodGhpcykucmVtb3ZlRGF0YSgnYnhTbGlkZXInKTtcblx0ICAvLyByZW1vdmUgZ2xvYmFsIHdpbmRvdyBoYW5kbGVyc1xuXHQgICQod2luZG93KS5vZmYoJ2JsdXInLCB3aW5kb3dCbHVySGFuZGxlcikub2ZmKCdmb2N1cycsIHdpbmRvd0ZvY3VzSGFuZGxlcik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbG9hZCB0aGUgc2xpZGVyIChyZXZlcnQgYWxsIERPTSBjaGFuZ2VzLCBhbmQgcmUtaW5pdGlhbGl6ZSlcbiAgICAgKi9cbiAgICBlbC5yZWxvYWRTbGlkZXIgPSBmdW5jdGlvbihzZXR0aW5ncykge1xuICAgICAgaWYgKHNldHRpbmdzICE9PSB1bmRlZmluZWQpIHsgb3B0aW9ucyA9IHNldHRpbmdzOyB9XG4gICAgICBlbC5kZXN0cm95U2xpZGVyKCk7XG4gICAgICBpbml0KCk7XG4gICAgICAvL3N0b3JlIHJlZmVyZW5jZSB0byBzZWxmIGluIG9yZGVyIHRvIGFjY2VzcyBwdWJsaWMgZnVuY3Rpb25zIGxhdGVyXG4gICAgICAkKGVsKS5kYXRhKCdieFNsaWRlcicsIHRoaXMpO1xuICAgIH07XG5cbiAgICBpbml0KCk7XG5cbiAgICAkKGVsKS5kYXRhKCdieFNsaWRlcicsIHRoaXMpO1xuXG4gICAgLy8gcmV0dXJucyB0aGUgY3VycmVudCBqUXVlcnkgb2JqZWN0XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbn0pKGpRdWVyeSk7XG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gZmFuY3lCb3ggdjMuMi41XG4vL1xuLy8gTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxuLy8gb3IgZmFuY3lCb3ggQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxuLy9cbi8vIGh0dHA6Ly9mYW5jeWFwcHMuY29tL2ZhbmN5Ym94L1xuLy8gQ29weXJpZ2h0IDIwMTcgZmFuY3lBcHBzXG4vL1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbjsoZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsICQsIHVuZGVmaW5lZCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIC8vIElmIHRoZXJlJ3Mgbm8galF1ZXJ5LCBmYW5jeUJveCBjYW4ndCB3b3JrXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGlmICggISQgKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGlmIGZhbmN5Qm94IGlzIGFscmVhZHkgaW5pdGlhbGl6ZWRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBpZiAoICQuZm4uZmFuY3lib3ggKSB7XHJcblxyXG4gICAgICAgIGlmICggJ2NvbnNvbGUnIGluIHdpbmRvdyApIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coICdmYW5jeUJveCBhbHJlYWR5IGluaXRpYWxpemVkJyApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByaXZhdGUgZGVmYXVsdCBzZXR0aW5nc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdmFyIGRlZmF1bHRzID0ge1xyXG5cclxuICAgICAgICAvLyBFbmFibGUgaW5maW5pdGUgZ2FsbGVyeSBuYXZpZ2F0aW9uXHJcbiAgICAgICAgbG9vcCA6IGZhbHNlLFxyXG5cclxuICAgICAgICAvLyBTcGFjZSBhcm91bmQgaW1hZ2UsIGlnbm9yZWQgaWYgem9vbWVkLWluIG9yIHZpZXdwb3J0IHdpZHRoIGlzIHNtYWxsZXIgdGhhbiA4MDBweFxyXG4gICAgICAgIG1hcmdpbiA6IFs0NCwgMF0sXHJcblxyXG4gICAgICAgIC8vIEhvcml6b250YWwgc3BhY2UgYmV0d2VlbiBzbGlkZXNcclxuICAgICAgICBndXR0ZXIgOiA1MCxcclxuXHJcbiAgICAgICAgLy8gRW5hYmxlIGtleWJvYXJkIG5hdmlnYXRpb25cclxuICAgICAgICBrZXlib2FyZCA6IHRydWUsXHJcblxyXG4gICAgICAgIC8vIFNob3VsZCBkaXNwbGF5IG5hdmlnYXRpb24gYXJyb3dzIGF0IHRoZSBzY3JlZW4gZWRnZXNcclxuICAgICAgICBhcnJvd3MgOiB0cnVlLFxyXG5cclxuICAgICAgICAvLyBTaG91bGQgZGlzcGxheSBpbmZvYmFyIChjb3VudGVyIGFuZCBhcnJvd3MgYXQgdGhlIHRvcClcclxuICAgICAgICBpbmZvYmFyIDogdHJ1ZSxcclxuXHJcbiAgICAgICAgLy8gU2hvdWxkIGRpc3BsYXkgdG9vbGJhciAoYnV0dG9ucyBhdCB0aGUgdG9wKVxyXG4gICAgICAgIHRvb2xiYXIgOiB0cnVlLFxyXG5cclxuICAgICAgICAvLyBXaGF0IGJ1dHRvbnMgc2hvdWxkIGFwcGVhciBpbiB0aGUgdG9wIHJpZ2h0IGNvcm5lci5cclxuICAgICAgICAvLyBCdXR0b25zIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0ZW1wbGF0ZXMgZnJvbSBgYnRuVHBsYCBvcHRpb25cclxuICAgICAgICAvLyBhbmQgdGhleSB3aWxsIGJlIHBsYWNlZCBpbnRvIHRvb2xiYXIgKGNsYXNzPVwiZmFuY3lib3gtdG9vbGJhclwiYCBlbGVtZW50KVxyXG4gICAgICAgIGJ1dHRvbnMgOiBbXHJcbiAgICAgICAgICAgICdzbGlkZVNob3cnLFxyXG4gICAgICAgICAgICAnZnVsbFNjcmVlbicsXHJcbiAgICAgICAgICAgICd0aHVtYnMnLFxyXG4gICAgICAgICAgICAnc2hhcmUnLFxyXG4gICAgICAgICAgICAvLydkb3dubG9hZCcsXHJcbiAgICAgICAgICAgIC8vJ3pvb20nLFxyXG4gICAgICAgICAgICAnY2xvc2UnXHJcbiAgICAgICAgXSxcclxuXHJcbiAgICAgICAgLy8gRGV0ZWN0IFwiaWRsZVwiIHRpbWUgaW4gc2Vjb25kc1xyXG4gICAgICAgIGlkbGVUaW1lIDogMyxcclxuXHJcbiAgICAgICAgLy8gU2hvdWxkIGRpc3BsYXkgYnV0dG9ucyBhdCB0b3AgcmlnaHQgY29ybmVyIG9mIHRoZSBjb250ZW50XHJcbiAgICAgICAgLy8gSWYgJ2F1dG8nIC0gdGhleSB3aWxsIGJlIGNyZWF0ZWQgZm9yIGNvbnRlbnQgaGF2aW5nIHR5cGUgJ2h0bWwnLCAnaW5saW5lJyBvciAnYWpheCdcclxuICAgICAgICAvLyBVc2UgdGVtcGxhdGUgZnJvbSBgYnRuVHBsLnNtYWxsQnRuYCBmb3IgY3VzdG9taXphdGlvblxyXG4gICAgICAgIHNtYWxsQnRuIDogJ2F1dG8nLFxyXG5cclxuICAgICAgICAvLyBEaXNhYmxlIHJpZ2h0LWNsaWNrIGFuZCB1c2Ugc2ltcGxlIGltYWdlIHByb3RlY3Rpb24gZm9yIGltYWdlc1xyXG4gICAgICAgIHByb3RlY3QgOiBmYWxzZSxcclxuXHJcbiAgICAgICAgLy8gU2hvcnRjdXQgdG8gbWFrZSBjb250ZW50IFwibW9kYWxcIiAtIGRpc2FibGUga2V5Ym9hcmQgbmF2aWd0aW9uLCBoaWRlIGJ1dHRvbnMsIGV0Y1xyXG4gICAgICAgIG1vZGFsIDogZmFsc2UsXHJcblxyXG4gICAgICAgIGltYWdlIDoge1xyXG5cclxuICAgICAgICAgICAgLy8gV2FpdCBmb3IgaW1hZ2VzIHRvIGxvYWQgYmVmb3JlIGRpc3BsYXlpbmdcclxuICAgICAgICAgICAgLy8gUmVxdWlyZXMgcHJlZGVmaW5lZCBpbWFnZSBkaW1lbnNpb25zXHJcbiAgICAgICAgICAgIC8vIElmICdhdXRvJyAtIHdpbGwgem9vbSBpbiB0aHVtYm5haWwgaWYgJ3dpZHRoJyBhbmQgJ2hlaWdodCcgYXR0cmlidXRlcyBhcmUgZm91bmRcclxuICAgICAgICAgICAgcHJlbG9hZCA6IFwiYXV0b1wiXHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFqYXggOiB7XHJcblxyXG4gICAgICAgICAgICAvLyBPYmplY3QgY29udGFpbmluZyBzZXR0aW5ncyBmb3IgYWpheCByZXF1ZXN0XHJcbiAgICAgICAgICAgIHNldHRpbmdzIDoge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaGVscHMgdG8gaW5kaWNhdGUgdGhhdCByZXF1ZXN0IGNvbWVzIGZyb20gdGhlIG1vZGFsXHJcbiAgICAgICAgICAgICAgICAvLyBGZWVsIGZyZWUgdG8gY2hhbmdlIG5hbWluZ1xyXG4gICAgICAgICAgICAgICAgZGF0YSA6IHtcclxuICAgICAgICAgICAgICAgICAgICBmYW5jeWJveCA6IHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpZnJhbWUgOiB7XHJcblxyXG4gICAgICAgICAgICAvLyBJZnJhbWUgdGVtcGxhdGVcclxuICAgICAgICAgICAgdHBsIDogJzxpZnJhbWUgaWQ9XCJmYW5jeWJveC1mcmFtZXtybmR9XCIgbmFtZT1cImZhbmN5Ym94LWZyYW1le3JuZH1cIiBjbGFzcz1cImZhbmN5Ym94LWlmcmFtZVwiIGZyYW1lYm9yZGVyPVwiMFwiIHZzcGFjZT1cIjBcIiBoc3BhY2U9XCIwXCIgd2Via2l0QWxsb3dGdWxsU2NyZWVuIG1vemFsbG93ZnVsbHNjcmVlbiBhbGxvd0Z1bGxTY3JlZW4gYWxsb3d0cmFuc3BhcmVuY3k9XCJ0cnVlXCIgc3JjPVwiXCI+PC9pZnJhbWU+JyxcclxuXHJcbiAgICAgICAgICAgIC8vIFByZWxvYWQgaWZyYW1lIGJlZm9yZSBkaXNwbGF5aW5nIGl0XHJcbiAgICAgICAgICAgIC8vIFRoaXMgYWxsb3dzIHRvIGNhbGN1bGF0ZSBpZnJhbWUgY29udGVudCB3aWR0aCBhbmQgaGVpZ2h0XHJcbiAgICAgICAgICAgIC8vIChub3RlOiBEdWUgdG8gXCJTYW1lIE9yaWdpbiBQb2xpY3lcIiwgeW91IGNhbid0IGdldCBjcm9zcyBkb21haW4gZGF0YSkuXHJcbiAgICAgICAgICAgIHByZWxvYWQgOiB0cnVlLFxyXG5cclxuICAgICAgICAgICAgLy8gQ3VzdG9tIENTUyBzdHlsaW5nIGZvciBpZnJhbWUgd3JhcHBpbmcgZWxlbWVudFxyXG4gICAgICAgICAgICAvLyBZb3UgY2FuIHVzZSB0aGlzIHRvIHNldCBjdXN0b20gaWZyYW1lIGRpbWVuc2lvbnNcclxuICAgICAgICAgICAgY3NzIDoge30sXHJcblxyXG4gICAgICAgICAgICAvLyBJZnJhbWUgdGFnIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgYXR0ciA6IHtcclxuICAgICAgICAgICAgICAgIHNjcm9sbGluZyA6ICdhdXRvJ1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIERlZmF1bHQgY29udGVudCB0eXBlIGlmIGNhbm5vdCBiZSBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5XHJcbiAgICAgICAgZGVmYXVsdFR5cGUgOiAnaW1hZ2UnLFxyXG5cclxuICAgICAgICAvLyBPcGVuL2Nsb3NlIGFuaW1hdGlvbiB0eXBlXHJcbiAgICAgICAgLy8gUG9zc2libGUgdmFsdWVzOlxyXG4gICAgICAgIC8vICAgZmFsc2UgICAgICAgICAgICAtIGRpc2FibGVcclxuICAgICAgICAvLyAgIFwiem9vbVwiICAgICAgICAgICAtIHpvb20gaW1hZ2VzIGZyb20vdG8gdGh1bWJuYWlsXHJcbiAgICAgICAgLy8gICBcImZhZGVcIlxyXG4gICAgICAgIC8vICAgXCJ6b29tLWluLW91dFwiXHJcbiAgICAgICAgLy9cclxuICAgICAgICBhbmltYXRpb25FZmZlY3QgOiBcInpvb21cIixcclxuXHJcbiAgICAgICAgLy8gRHVyYXRpb24gaW4gbXMgZm9yIG9wZW4vY2xvc2UgYW5pbWF0aW9uXHJcbiAgICAgICAgYW5pbWF0aW9uRHVyYXRpb24gOiA1MDAsXHJcblxyXG4gICAgICAgIC8vIFNob3VsZCBpbWFnZSBjaGFuZ2Ugb3BhY2l0eSB3aGlsZSB6b29taW5nXHJcbiAgICAgICAgLy8gSWYgb3BhY2l0eSBpcyBcImF1dG9cIiwgdGhlbiBvcGFjaXR5IHdpbGwgYmUgY2hhbmdlZCBpZiBpbWFnZSBhbmQgdGh1bWJuYWlsIGhhdmUgZGlmZmVyZW50IGFzcGVjdCByYXRpb3NcclxuICAgICAgICB6b29tT3BhY2l0eSA6IFwiYXV0b1wiLFxyXG5cclxuICAgICAgICAvLyBUcmFuc2l0aW9uIGVmZmVjdCBiZXR3ZWVuIHNsaWRlc1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gUG9zc2libGUgdmFsdWVzOlxyXG4gICAgICAgIC8vICAgZmFsc2UgICAgICAgICAgICAtIGRpc2FibGVcclxuICAgICAgICAvLyAgIFwiZmFkZSdcclxuICAgICAgICAvLyAgIFwic2xpZGUnXHJcbiAgICAgICAgLy8gICBcImNpcmN1bGFyJ1xyXG4gICAgICAgIC8vICAgXCJ0dWJlJ1xyXG4gICAgICAgIC8vICAgXCJ6b29tLWluLW91dCdcclxuICAgICAgICAvLyAgIFwicm90YXRlJ1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdHJhbnNpdGlvbkVmZmVjdCA6IFwiZmFkZVwiLFxyXG5cclxuICAgICAgICAvLyBEdXJhdGlvbiBpbiBtcyBmb3IgdHJhbnNpdGlvbiBhbmltYXRpb25cclxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gOiAzNjYsXHJcblxyXG4gICAgICAgIC8vIEN1c3RvbSBDU1MgY2xhc3MgZm9yIHNsaWRlIGVsZW1lbnRcclxuICAgICAgICBzbGlkZUNsYXNzIDogJycsXHJcblxyXG4gICAgICAgIC8vIEN1c3RvbSBDU1MgY2xhc3MgZm9yIGxheW91dFxyXG4gICAgICAgIGJhc2VDbGFzcyA6ICcnLFxyXG5cclxuICAgICAgICAvLyBCYXNlIHRlbXBsYXRlIGZvciBsYXlvdXRcclxuICAgICAgICBiYXNlVHBsXHQ6XHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtY29udGFpbmVyXCIgcm9sZT1cImRpYWxvZ1wiIHRhYmluZGV4PVwiLTFcIj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtYmdcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtaW5uZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWluZm9iYXJcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGRhdGEtZmFuY3lib3gtaW5kZXg+PC9zcGFuPiZuYnNwOy8mbmJzcDs8c3BhbiBkYXRhLWZhbmN5Ym94LWNvdW50Pjwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC10b29sYmFyXCI+e3tidXR0b25zfX08L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LW5hdmlnYXRpb25cIj57e2Fycm93c319PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1zdGFnZVwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtY2FwdGlvbi13cmFwXCI+PGRpdiBjbGFzcz1cImZhbmN5Ym94LWNhcHRpb25cIj48L2Rpdj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgJzwvZGl2PicsXHJcblxyXG4gICAgICAgIC8vIExvYWRpbmcgaW5kaWNhdG9yIHRlbXBsYXRlXHJcbiAgICAgICAgc3Bpbm5lclRwbCA6ICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtbG9hZGluZ1wiPjwvZGl2PicsXHJcblxyXG4gICAgICAgIC8vIEVycm9yIG1lc3NhZ2UgdGVtcGxhdGVcclxuICAgICAgICBlcnJvclRwbCA6ICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtZXJyb3JcIj48cD57e0VSUk9SfX08cD48L2Rpdj4nLFxyXG5cclxuICAgICAgICBidG5UcGwgOiB7XHJcblxyXG4gICAgICAgICAgICBkb3dubG9hZCA6ICc8YSBkb3dubG9hZCBkYXRhLWZhbmN5Ym94LWRvd25sb2FkIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tZG93bmxvYWRcIiB0aXRsZT1cInt7RE9XTkxPQUR9fVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyB2aWV3Qm94PVwiMCAwIDQwIDQwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHBhdGggZD1cIk0yMCwyMyBMMjAsOCBMMjAsMjMgTDEzLDE2IEwyMCwyMyBMMjcsMTYgTDIwLDIzIE0yNiwyOCBMMTMsMjggTDI3LDI4IEwxNCwyOFwiIC8+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L3N2Zz4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9hPicsXHJcblxyXG4gICAgICAgICAgICB6b29tIDogJzxidXR0b24gZGF0YS1mYW5jeWJveC16b29tIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tem9vbVwiIHRpdGxlPVwie3taT09NfX1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmcgdmlld0JveD1cIjAgMCA0MCA0MFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwYXRoIGQ9XCJNIDE4LDE3IG0tOCwwIGEgOCw4IDAgMSwwIDE2LDAgYSA4LDggMCAxLDAgLTE2LDAgTTI1LDIzIEwzMSwyOSBMMjUsMjNcIiAvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9zdmc+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPicsXHJcblxyXG4gICAgICAgICAgICBjbG9zZSA6ICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtY2xvc2UgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1jbG9zZVwiIHRpdGxlPVwie3tDTE9TRX19XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnIHZpZXdCb3g9XCIwIDAgNDAgNDBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8cGF0aCBkPVwiTTEwLDEwIEwzMCwzMCBNMzAsMTAgTDEwLDMwXCIgLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvc3ZnPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nLFxyXG5cclxuICAgICAgICAgICAgLy8gVGhpcyBzbWFsbCBjbG9zZSBidXR0b24gd2lsbCBiZSBhcHBlbmRlZCB0byB5b3VyIGh0bWwvaW5saW5lL2FqYXggY29udGVudCBieSBkZWZhdWx0LFxyXG4gICAgICAgICAgICAvLyBpZiBcInNtYWxsQnRuXCIgb3B0aW9uIGlzIG5vdCBzZXQgdG8gZmFsc2VcclxuICAgICAgICAgICAgc21hbGxCdG4gICA6ICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtY2xvc2UgY2xhc3M9XCJmYW5jeWJveC1jbG9zZS1zbWFsbFwiIHRpdGxlPVwie3tDTE9TRX19XCI+PC9idXR0b24+JyxcclxuXHJcbiAgICAgICAgICAgIC8vIEFycm93c1xyXG4gICAgICAgICAgICBhcnJvd0xlZnQgOiAnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXByZXYgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1hcnJvd19sZWZ0XCIgdGl0bGU9XCJ7e1BSRVZ9fVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmcgdmlld0JveD1cIjAgMCA0MCA0MFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHBhdGggZD1cIk0xMCwyMCBMMzAsMjAgTDEwLDIwIEwxOCwyOCBMMTAsMjAgTDE4LDEyIEwxMCwyMFwiPjwvcGF0aD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3N2Zz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyxcclxuXHJcbiAgICAgICAgICAgIGFycm93UmlnaHQgOiAnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LW5leHQgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1hcnJvd19yaWdodFwiIHRpdGxlPVwie3tORVhUfX1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyB2aWV3Qm94PVwiMCAwIDQwIDQwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHBhdGggZD1cIk0zMCwyMCBMMTAsMjAgTDMwLDIwIEwyMiwyOCBMMzAsMjAgTDIyLDEyIEwzMCwyMFwiPjwvcGF0aD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9zdmc+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gQ29udGFpbmVyIGlzIGluamVjdGVkIGludG8gdGhpcyBlbGVtZW50XHJcbiAgICAgICAgcGFyZW50RWwgOiAnYm9keScsXHJcblxyXG5cclxuICAgICAgICAvLyBGb2N1cyBoYW5kbGluZ1xyXG4gICAgICAgIC8vID09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIC8vIFRyeSB0byBmb2N1cyBvbiB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnQgYWZ0ZXIgb3BlbmluZ1xyXG4gICAgICAgIGF1dG9Gb2N1cyA6IGZhbHNlLFxyXG5cclxuICAgICAgICAvLyBQdXQgZm9jdXMgYmFjayB0byBhY3RpdmUgZWxlbWVudCBhZnRlciBjbG9zaW5nXHJcbiAgICAgICAgYmFja0ZvY3VzIDogdHJ1ZSxcclxuXHJcbiAgICAgICAgLy8gRG8gbm90IGxldCB1c2VyIHRvIGZvY3VzIG9uIGVsZW1lbnQgb3V0c2lkZSBtb2RhbCBjb250ZW50XHJcbiAgICAgICAgdHJhcEZvY3VzIDogdHJ1ZSxcclxuXHJcblxyXG4gICAgICAgIC8vIE1vZHVsZSBzcGVjaWZpYyBvcHRpb25zXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgZnVsbFNjcmVlbiA6IHtcclxuICAgICAgICAgICAgYXV0b1N0YXJ0IDogZmFsc2UsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gU2V0IGB0b3VjaDogZmFsc2VgIHRvIGRpc2FibGUgZHJhZ2dpbmcvc3dpcGluZ1xyXG4gICAgICAgIHRvdWNoIDoge1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbCA6IHRydWUsICAvLyBBbGxvdyB0byBkcmFnIGNvbnRlbnQgdmVydGljYWxseVxyXG4gICAgICAgICAgICBtb21lbnR1bSA6IHRydWUgICAvLyBDb250aW51ZSBtb3ZlbWVudCBhZnRlciByZWxlYXNpbmcgbW91c2UvdG91Y2ggd2hlbiBwYW5uaW5nXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gSGFzaCB2YWx1ZSB3aGVuIGluaXRpYWxpemluZyBtYW51YWxseSxcclxuICAgICAgICAvLyBzZXQgYGZhbHNlYCB0byBkaXNhYmxlIGhhc2ggY2hhbmdlXHJcbiAgICAgICAgaGFzaCA6IG51bGwsXHJcblxyXG4gICAgICAgIC8vIEN1c3RvbWl6ZSBvciBhZGQgbmV3IG1lZGlhIHR5cGVzXHJcbiAgICAgICAgLy8gRXhhbXBsZTpcclxuICAgICAgICAvKlxyXG4gICAgICAgIG1lZGlhIDoge1xyXG4gICAgICAgICAgICB5b3V0dWJlIDoge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zIDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5IDogMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICovXHJcbiAgICAgICAgbWVkaWEgOiB7fSxcclxuXHJcbiAgICAgICAgc2xpZGVTaG93IDoge1xyXG4gICAgICAgICAgICBhdXRvU3RhcnQgOiBmYWxzZSxcclxuICAgICAgICAgICAgc3BlZWQgICAgIDogNDAwMFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRodW1icyA6IHtcclxuXHRcdFx0YXV0b1N0YXJ0ICAgOiBmYWxzZSwgICAgICAgICAgICAgICAgICAvLyBEaXNwbGF5IHRodW1ibmFpbHMgb24gb3BlbmluZ1xyXG5cdFx0XHRoaWRlT25DbG9zZSA6IHRydWUsICAgICAgICAgICAgICAgICAgIC8vIEhpZGUgdGh1bWJuYWlsIGdyaWQgd2hlbiBjbG9zaW5nIGFuaW1hdGlvbiBzdGFydHNcclxuXHRcdFx0cGFyZW50RWwgICAgOiAnLmZhbmN5Ym94LWNvbnRhaW5lcicsICAvLyBDb250YWluZXIgaXMgaW5qZWN0ZWQgaW50byB0aGlzIGVsZW1lbnRcclxuXHRcdFx0YXhpcyAgICAgICAgOiAneScgICAgICAgICAgICAgICAgICAgICAvLyBWZXJ0aWNhbCAoeSkgb3IgaG9yaXpvbnRhbCAoeCkgc2Nyb2xsaW5nXHJcblx0XHR9LFxyXG5cclxuICAgICAgICAvLyBDYWxsYmFja3NcclxuICAgICAgICAvLz09PT09PT09PT1cclxuXHJcbiAgICAgICAgLy8gU2VlIERvY3VtZW50YXRpb24vQVBJL0V2ZW50cyBmb3IgbW9yZSBpbmZvcm1hdGlvblxyXG4gICAgICAgIC8vIEV4YW1wbGU6XHJcbiAgICAgICAgLypcclxuICAgICAgICAgICAgYWZ0ZXJTaG93OiBmdW5jdGlvbiggaW5zdGFuY2UsIGN1cnJlbnQgKSB7XHJcbiAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCAnQ2xpY2tlZCBlbGVtZW50OicgKTtcclxuICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oIGN1cnJlbnQub3B0cy4kb3JpZyApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKi9cclxuXHJcbiAgICAgICAgb25Jbml0ICAgICAgIDogJC5ub29wLCAgLy8gV2hlbiBpbnN0YW5jZSBoYXMgYmVlbiBpbml0aWFsaXplZFxyXG5cclxuICAgICAgICBiZWZvcmVMb2FkICAgOiAkLm5vb3AsICAvLyBCZWZvcmUgdGhlIGNvbnRlbnQgb2YgYSBzbGlkZSBpcyBiZWluZyBsb2FkZWRcclxuICAgICAgICBhZnRlckxvYWQgICAgOiAkLm5vb3AsICAvLyBXaGVuIHRoZSBjb250ZW50IG9mIGEgc2xpZGUgaXMgZG9uZSBsb2FkaW5nXHJcblxyXG4gICAgICAgIGJlZm9yZVNob3cgICA6ICQubm9vcCwgIC8vIEJlZm9yZSBvcGVuIGFuaW1hdGlvbiBzdGFydHNcclxuICAgICAgICBhZnRlclNob3cgICAgOiAkLm5vb3AsICAvLyBXaGVuIGNvbnRlbnQgaXMgZG9uZSBsb2FkaW5nIGFuZCBhbmltYXRpbmdcclxuXHJcbiAgICAgICAgYmVmb3JlQ2xvc2UgIDogJC5ub29wLCAgLy8gQmVmb3JlIHRoZSBpbnN0YW5jZSBhdHRlbXB0cyB0byBjbG9zZS4gUmV0dXJuIGZhbHNlIHRvIGNhbmNlbCB0aGUgY2xvc2UuXHJcbiAgICAgICAgYWZ0ZXJDbG9zZSAgIDogJC5ub29wLCAgLy8gQWZ0ZXIgaW5zdGFuY2UgaGFzIGJlZW4gY2xvc2VkXHJcblxyXG4gICAgICAgIG9uQWN0aXZhdGUgICA6ICQubm9vcCwgIC8vIFdoZW4gaW5zdGFuY2UgaXMgYnJvdWdodCB0byBmcm9udFxyXG4gICAgICAgIG9uRGVhY3RpdmF0ZSA6ICQubm9vcCwgIC8vIFdoZW4gb3RoZXIgaW5zdGFuY2UgaGFzIGJlZW4gYWN0aXZhdGVkXHJcblxyXG5cclxuICAgICAgICAvLyBJbnRlcmFjdGlvblxyXG4gICAgICAgIC8vID09PT09PT09PT09XHJcblxyXG4gICAgICAgIC8vIFVzZSBvcHRpb25zIGJlbG93IHRvIGN1c3RvbWl6ZSB0YWtlbiBhY3Rpb24gd2hlbiB1c2VyIGNsaWNrcyBvciBkb3VibGUgY2xpY2tzIG9uIHRoZSBmYW5jeUJveCBhcmVhLFxyXG4gICAgICAgIC8vIGVhY2ggb3B0aW9uIGNhbiBiZSBzdHJpbmcgb3IgbWV0aG9kIHRoYXQgcmV0dXJucyB2YWx1ZS5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIFBvc3NpYmxlIHZhbHVlczpcclxuICAgICAgICAvLyAgIFwiY2xvc2VcIiAgICAgICAgICAgLSBjbG9zZSBpbnN0YW5jZVxyXG4gICAgICAgIC8vICAgXCJuZXh0XCIgICAgICAgICAgICAtIG1vdmUgdG8gbmV4dCBnYWxsZXJ5IGl0ZW1cclxuICAgICAgICAvLyAgIFwibmV4dE9yQ2xvc2VcIiAgICAgLSBtb3ZlIHRvIG5leHQgZ2FsbGVyeSBpdGVtIG9yIGNsb3NlIGlmIGdhbGxlcnkgaGFzIG9ubHkgb25lIGl0ZW1cclxuICAgICAgICAvLyAgIFwidG9nZ2xlQ29udHJvbHNcIiAgLSBzaG93L2hpZGUgY29udHJvbHNcclxuICAgICAgICAvLyAgIFwiem9vbVwiICAgICAgICAgICAgLSB6b29tIGltYWdlIChpZiBsb2FkZWQpXHJcbiAgICAgICAgLy8gICBmYWxzZSAgICAgICAgICAgICAtIGRvIG5vdGhpbmdcclxuXHJcbiAgICAgICAgLy8gQ2xpY2tlZCBvbiB0aGUgY29udGVudFxyXG4gICAgICAgIGNsaWNrQ29udGVudCA6IGZ1bmN0aW9uKCBjdXJyZW50LCBldmVudCApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyA/ICd6b29tJyA6IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIENsaWNrZWQgb24gdGhlIHNsaWRlXHJcbiAgICAgICAgY2xpY2tTbGlkZSA6ICdjbG9zZScsXHJcblxyXG4gICAgICAgIC8vIENsaWNrZWQgb24gdGhlIGJhY2tncm91bmQgKGJhY2tkcm9wKSBlbGVtZW50XHJcbiAgICAgICAgY2xpY2tPdXRzaWRlIDogJ2Nsb3NlJyxcclxuXHJcbiAgICAgICAgLy8gU2FtZSBhcyBwcmV2aW91cyB0d28sIGJ1dCBmb3IgZG91YmxlIGNsaWNrXHJcbiAgICAgICAgZGJsY2xpY2tDb250ZW50IDogZmFsc2UsXHJcbiAgICAgICAgZGJsY2xpY2tTbGlkZSAgIDogZmFsc2UsXHJcbiAgICAgICAgZGJsY2xpY2tPdXRzaWRlIDogZmFsc2UsXHJcblxyXG5cclxuICAgICAgICAvLyBDdXN0b20gb3B0aW9ucyB3aGVuIG1vYmlsZSBkZXZpY2UgaXMgZGV0ZWN0ZWRcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgbW9iaWxlIDoge1xyXG4gICAgICAgICAgICBtYXJnaW4gOiAwLFxyXG5cclxuICAgICAgICAgICAgY2xpY2tDb250ZW50IDogZnVuY3Rpb24oIGN1cnJlbnQsIGV2ZW50ICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyA/ICd0b2dnbGVDb250cm9scycgOiBmYWxzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2xpY2tTbGlkZSA6IGZ1bmN0aW9uKCBjdXJyZW50LCBldmVudCApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50LnR5cGUgPT09ICdpbWFnZScgPyAndG9nZ2xlQ29udHJvbHMnIDogJ2Nsb3NlJztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGJsY2xpY2tDb250ZW50IDogZnVuY3Rpb24oIGN1cnJlbnQsIGV2ZW50ICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyA/ICd6b29tJyA6IGZhbHNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYmxjbGlja1NsaWRlIDogZnVuY3Rpb24oIGN1cnJlbnQsIGV2ZW50ICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyA/ICd6b29tJyA6IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIEludGVybmF0aW9uYWxpemF0aW9uXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGxhbmcgOiAnZW4nLFxyXG4gICAgICAgIGkxOG4gOiB7XHJcbiAgICAgICAgICAgICdlbicgOiB7XHJcbiAgICAgICAgICAgICAgICBDTE9TRSAgICAgICA6ICdDbG9zZScsXHJcbiAgICAgICAgICAgICAgICBORVhUICAgICAgICA6ICdOZXh0JyxcclxuICAgICAgICAgICAgICAgIFBSRVYgICAgICAgIDogJ1ByZXZpb3VzJyxcclxuICAgICAgICAgICAgICAgIEVSUk9SICAgICAgIDogJ1RoZSByZXF1ZXN0ZWQgY29udGVudCBjYW5ub3QgYmUgbG9hZGVkLiA8YnIvPiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicsXHJcbiAgICAgICAgICAgICAgICBQTEFZX1NUQVJUICA6ICdTdGFydCBzbGlkZXNob3cnLFxyXG4gICAgICAgICAgICAgICAgUExBWV9TVE9QICAgOiAnUGF1c2Ugc2xpZGVzaG93JyxcclxuICAgICAgICAgICAgICAgIEZVTExfU0NSRUVOIDogJ0Z1bGwgc2NyZWVuJyxcclxuICAgICAgICAgICAgICAgIFRIVU1CUyAgICAgIDogJ1RodW1ibmFpbHMnLFxyXG4gICAgICAgICAgICAgICAgRE9XTkxPQUQgICAgOiAnRG93bmxvYWQnLFxyXG4gICAgICAgICAgICAgICAgU0hBUkUgICAgICAgOiAnU2hhcmUnLFxyXG4gICAgICAgICAgICAgICAgWk9PTSAgICAgICAgOiAnWm9vbSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ2RlJyA6IHtcclxuICAgICAgICAgICAgICAgIENMT1NFICAgICAgIDogJ1NjaGxpZXNzZW4nLFxyXG4gICAgICAgICAgICAgICAgTkVYVCAgICAgICAgOiAnV2VpdGVyJyxcclxuICAgICAgICAgICAgICAgIFBSRVYgICAgICAgIDogJ1p1csO8Y2snLFxyXG4gICAgICAgICAgICAgICAgRVJST1IgICAgICAgOiAnRGllIGFuZ2Vmb3JkZXJ0ZW4gRGF0ZW4ga29ubnRlbiBuaWNodCBnZWxhZGVuIHdlcmRlbi4gPGJyLz4gQml0dGUgdmVyc3VjaGVuIFNpZSBlcyBzcMOkdGVyIG5vY2htYWwuJyxcclxuICAgICAgICAgICAgICAgIFBMQVlfU1RBUlQgIDogJ0RpYXNjaGF1IHN0YXJ0ZW4nLFxyXG4gICAgICAgICAgICAgICAgUExBWV9TVE9QICAgOiAnRGlhc2NoYXUgYmVlbmRlbicsXHJcbiAgICAgICAgICAgICAgICBGVUxMX1NDUkVFTiA6ICdWb2xsYmlsZCcsXHJcbiAgICAgICAgICAgICAgICBUSFVNQlMgICAgICA6ICdWb3JzY2hhdWJpbGRlcicsXHJcbiAgICAgICAgICAgICAgICBET1dOTE9BRCAgICA6ICdIZXJ1bnRlcmxhZGVuJyxcclxuICAgICAgICAgICAgICAgIFNIQVJFICAgICAgIDogJ1RlaWxlbicsXHJcbiAgICAgICAgICAgICAgICBaT09NICAgICAgICA6ICdNYcOfc3RhYidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEZldyB1c2VmdWwgdmFyaWFibGVzIGFuZCBtZXRob2RzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHZhciAkVyA9ICQod2luZG93KTtcclxuICAgIHZhciAkRCA9ICQoZG9jdW1lbnQpO1xyXG5cclxuICAgIHZhciBjYWxsZWQgPSAwO1xyXG5cclxuXHJcbiAgICAvLyBDaGVjayBpZiBhbiBvYmplY3QgaXMgYSBqUXVlcnkgb2JqZWN0IGFuZCBub3QgYSBuYXRpdmUgSmF2YVNjcmlwdCBvYmplY3RcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHZhciBpc1F1ZXJ5ID0gZnVuY3Rpb24gKCBvYmogKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmouaGFzT3duUHJvcGVydHkgJiYgb2JqIGluc3RhbmNlb2YgJDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8vIEhhbmRsZSBtdWx0aXBsZSBicm93c2VycyBmb3IgXCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIiBhbmQgXCJjYW5jZWxBbmltYXRpb25GcmFtZVwiXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdmFyIHJlcXVlc3RBRnJhbWUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgLy8gaWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBzZXRUaW1lb3V0XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgfSkoKTtcclxuXHJcblxyXG4gICAgLy8gRGV0ZWN0IHRoZSBzdXBwb3J0ZWQgdHJhbnNpdGlvbi1lbmQgZXZlbnQgcHJvcGVydHkgbmFtZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHZhciB0cmFuc2l0aW9uRW5kID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdCwgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmFrZWVsZW1lbnRcIik7XHJcblxyXG4gICAgICAgIHZhciB0cmFuc2l0aW9ucyA9IHtcclxuICAgICAgICAgICAgXCJ0cmFuc2l0aW9uXCIgICAgICA6IFwidHJhbnNpdGlvbmVuZFwiLFxyXG4gICAgICAgICAgICBcIk9UcmFuc2l0aW9uXCIgICAgIDogXCJvVHJhbnNpdGlvbkVuZFwiLFxyXG4gICAgICAgICAgICBcIk1velRyYW5zaXRpb25cIiAgIDogXCJ0cmFuc2l0aW9uZW5kXCIsXHJcbiAgICAgICAgICAgIFwiV2Via2l0VHJhbnNpdGlvblwiOiBcIndlYmtpdFRyYW5zaXRpb25FbmRcIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZvciAodCBpbiB0cmFuc2l0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAoZWwuc3R5bGVbdF0gIT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNpdGlvbnNbdF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAndHJhbnNpdGlvbmVuZCc7XHJcbiAgICB9KSgpO1xyXG5cclxuXHJcbiAgICAvLyBGb3JjZSByZWRyYXcgb24gYW4gZWxlbWVudC5cclxuICAgIC8vIFRoaXMgaGVscHMgaW4gY2FzZXMgd2hlcmUgdGhlIGJyb3dzZXIgZG9lc24ndCByZWRyYXcgYW4gdXBkYXRlZCBlbGVtZW50IHByb3Blcmx5LlxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdmFyIGZvcmNlUmVkcmF3ID0gZnVuY3Rpb24oICRlbCApIHtcclxuICAgICAgICByZXR1cm4gKCAkZWwgJiYgJGVsLmxlbmd0aCAmJiAkZWxbMF0ub2Zmc2V0SGVpZ2h0ICk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvLyBDbGFzcyBkZWZpbml0aW9uXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdmFyIEZhbmN5Qm94ID0gZnVuY3Rpb24oIGNvbnRlbnQsIG9wdHMsIGluZGV4ICkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgc2VsZi5vcHRzID0gJC5leHRlbmQoIHRydWUsIHsgaW5kZXggOiBpbmRleCB9LCAkLmZhbmN5Ym94LmRlZmF1bHRzLCBvcHRzIHx8IHt9ICk7XHJcblxyXG4gICAgICAgIGlmICggJC5mYW5jeWJveC5pc01vYmlsZSApIHtcclxuICAgICAgICAgICAgc2VsZi5vcHRzID0gJC5leHRlbmQoIHRydWUsIHt9LCBzZWxmLm9wdHMsIHNlbGYub3B0cy5tb2JpbGUgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEV4Y2x1ZGUgYnV0dG9ucyBvcHRpb24gZnJvbSBkZWVwIG1lcmdpbmdcclxuICAgICAgICBpZiAoIG9wdHMgJiYgJC5pc0FycmF5KCBvcHRzLmJ1dHRvbnMgKSApIHtcclxuICAgICAgICAgICAgc2VsZi5vcHRzLmJ1dHRvbnMgPSBvcHRzLmJ1dHRvbnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLmlkICAgID0gc2VsZi5vcHRzLmlkIHx8ICsrY2FsbGVkO1xyXG4gICAgICAgIHNlbGYuZ3JvdXAgPSBbXTtcclxuXHJcbiAgICAgICAgc2VsZi5jdXJySW5kZXggPSBwYXJzZUludCggc2VsZi5vcHRzLmluZGV4LCAxMCApIHx8IDA7XHJcbiAgICAgICAgc2VsZi5wcmV2SW5kZXggPSBudWxsO1xyXG5cclxuICAgICAgICBzZWxmLnByZXZQb3MgPSBudWxsO1xyXG4gICAgICAgIHNlbGYuY3VyclBvcyA9IDA7XHJcblxyXG4gICAgICAgIHNlbGYuZmlyc3RSdW4gPSBudWxsO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgZ3JvdXAgZWxlbWVudHMgZnJvbSBvcmlnaW5hbCBpdGVtIGNvbGxlY3Rpb25cclxuICAgICAgICBzZWxmLmNyZWF0ZUdyb3VwKCBjb250ZW50ICk7XHJcblxyXG4gICAgICAgIGlmICggIXNlbGYuZ3JvdXAubGVuZ3RoICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTYXZlIGxhc3QgYWN0aXZlIGVsZW1lbnQgYW5kIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXHJcbiAgICAgICAgc2VsZi4kbGFzdEZvY3VzID0gJChkb2N1bWVudC5hY3RpdmVFbGVtZW50KS5ibHVyKCk7XHJcblxyXG4gICAgICAgIC8vIENvbGxlY3Rpb24gb2YgZ2FsbGVyeSBvYmplY3RzXHJcbiAgICAgICAgc2VsZi5zbGlkZXMgPSB7fTtcclxuXHJcbiAgICAgICAgc2VsZi5pbml0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgICQuZXh0ZW5kKEZhbmN5Qm94LnByb3RvdHlwZSwge1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgRE9NIHN0cnVjdHVyZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGluaXQgOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgZmlyc3RJdGVtICAgICAgPSBzZWxmLmdyb3VwWyBzZWxmLmN1cnJJbmRleCBdLFxyXG4gICAgICAgICAgICAgICAgZmlyc3RJdGVtT3B0cyAgPSBmaXJzdEl0ZW0ub3B0cyxcclxuICAgICAgICAgICAgICAgIHNjcm9sbGJhcldpZHRoID0gJC5mYW5jeWJveC5zY3JvbGxiYXJXaWR0aCxcclxuICAgICAgICAgICAgICAgICRzY3JvbGxEaXYsXHJcbiAgICAgICAgICAgICAgICAkY29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgYnV0dG9uU3RyO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5zY3JvbGxUb3AgID0gJEQuc2Nyb2xsVG9wKCk7XHJcbiAgICAgICAgICAgIHNlbGYuc2Nyb2xsTGVmdCA9ICRELnNjcm9sbExlZnQoKTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBIaWRlIHNjcm9sbGJhcnNcclxuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgICBpZiAoICEkLmZhbmN5Ym94LmdldEluc3RhbmNlKCkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJCggJ2JvZHknICkuYWRkQ2xhc3MoICdmYW5jeWJveC1hY3RpdmUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaU9TIGhhY2tcclxuICAgICAgICAgICAgICAgIGlmICggL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgIXdpbmRvdy5NU1N0cmVhbSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaU9TIGhhcyBwcm9ibGVtcyBmb3IgaW5wdXQgZWxlbWVudHMgaW5zaWRlIGZpeGVkIGNvbnRhaW5lcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHdvcmthcm91bmQgaXMgdG8gYXBwbHkgYHBvc2l0aW9uOiBmaXhlZGAgdG8gYDxib2R5PmAgZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAvLyB1bmZvcnR1bmF0ZWx5LCB0aGlzIG1ha2VzIGl0IGxvc2UgdGhlIHNjcm9sbGJhcnMgYW5kIGZvcmNlcyBhZGRyZXNzIGJhciB0byBhcHBlYXIuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggZmlyc3RJdGVtLnR5cGUgIT09ICdpbWFnZScgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoICdib2R5JyApLmNzcyggJ3RvcCcsICQoICdib2R5JyApLnNjcm9sbFRvcCgpICogLTEgKS5hZGRDbGFzcyggJ2ZhbmN5Ym94LWlvc2ZpeCcgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggISQuZmFuY3lib3guaXNNb2JpbGUgJiYgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQgPiB3aW5kb3cuaW5uZXJIZWlnaHQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2Nyb2xsYmFyV2lkdGggPT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjcm9sbERpdiA9ICQoJzxkaXYgc3R5bGU9XCJ3aWR0aDo1MHB4O2hlaWdodDo1MHB4O292ZXJmbG93OnNjcm9sbDtcIiAvPicpLmFwcGVuZFRvKCAnYm9keScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhcldpZHRoID0gJC5mYW5jeWJveC5zY3JvbGxiYXJXaWR0aCA9ICRzY3JvbGxEaXZbMF0ub2Zmc2V0V2lkdGggLSAkc2Nyb2xsRGl2WzBdLmNsaWVudFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjcm9sbERpdi5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoICdoZWFkJyApLmFwcGVuZCggJzxzdHlsZSBpZD1cImZhbmN5Ym94LXN0eWxlLW5vc2Nyb2xsXCIgdHlwZT1cInRleHQvY3NzXCI+LmNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhciB7IG1hcmdpbi1yaWdodDogJyArIHNjcm9sbGJhcldpZHRoICsgJ3B4OyB9PC9zdHlsZT4nICk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCggJ2JvZHknICkuYWRkQ2xhc3MoICdjb21wZW5zYXRlLWZvci1zY3JvbGxiYXInICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAvLyBCdWlsZCBodG1sIG1hcmt1cCBhbmQgc2V0IHJlZmVyZW5jZXNcclxuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgICAvLyBCdWlsZCBodG1sIGNvZGUgZm9yIGJ1dHRvbnMgYW5kIGluc2VydCBpbnRvIG1haW4gdGVtcGxhdGVcclxuICAgICAgICAgICAgYnV0dG9uU3RyID0gJyc7XHJcblxyXG4gICAgICAgICAgICAkLmVhY2goIGZpcnN0SXRlbU9wdHMuYnV0dG9ucywgZnVuY3Rpb24oIGluZGV4LCB2YWx1ZSApIHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvblN0ciArPSAoIGZpcnN0SXRlbU9wdHMuYnRuVHBsWyB2YWx1ZSBdIHx8ICcnICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIG1hcmt1cCBmcm9tIGJhc2UgdGVtcGxhdGUsIGl0IHdpbGwgYmUgaW5pdGlhbGx5IGhpZGRlbiB0b1xyXG4gICAgICAgICAgICAvLyBhdm9pZCB1bm5lY2Vzc2FyeSB3b3JrIGxpa2UgcGFpbnRpbmcgd2hpbGUgaW5pdGlhbGl6aW5nIGlzIG5vdCBjb21wbGV0ZVxyXG4gICAgICAgICAgICAkY29udGFpbmVyID0gJChcclxuICAgICAgICAgICAgICAgIHNlbGYudHJhbnNsYXRlKCBzZWxmLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0SXRlbU9wdHMuYmFzZVRwbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSggJ1xce1xce2J1dHRvbnNcXH1cXH0nLCBidXR0b25TdHIgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSggJ1xce1xce2Fycm93c1xcfVxcfScsIGZpcnN0SXRlbU9wdHMuYnRuVHBsLmFycm93TGVmdCArIGZpcnN0SXRlbU9wdHMuYnRuVHBsLmFycm93UmlnaHQgKVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAuYXR0ciggJ2lkJywgJ2ZhbmN5Ym94LWNvbnRhaW5lci0nICsgc2VsZi5pZCApXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdmYW5jeWJveC1pcy1oaWRkZW4nIClcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggZmlyc3RJdGVtT3B0cy5iYXNlQ2xhc3MgKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEoICdGYW5jeUJveCcsIHNlbGYgKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKCBmaXJzdEl0ZW1PcHRzLnBhcmVudEVsICk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgb2JqZWN0IGhvbGRpbmcgcmVmZXJlbmNlcyB0byBqUXVlcnkgd3JhcHBlZCBub2Rlc1xyXG4gICAgICAgICAgICBzZWxmLiRyZWZzID0ge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyIDogJGNvbnRhaW5lclxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgWyAnYmcnLCAnaW5uZXInLCAnaW5mb2JhcicsICd0b29sYmFyJywgJ3N0YWdlJywgJ2NhcHRpb24nLCAnbmF2aWdhdGlvbicgXS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuJHJlZnNbIGl0ZW0gXSA9ICRjb250YWluZXIuZmluZCggJy5mYW5jeWJveC0nICsgaXRlbSApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYudHJpZ2dlciggJ29uSW5pdCcgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEVuYWJsZSBldmVudHMsIGRlYWN0aXZlIHByZXZpb3VzIGluc3RhbmNlc1xyXG4gICAgICAgICAgICBzZWxmLmFjdGl2YXRlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBCdWlsZCBzbGlkZXMsIGxvYWQgYW5kIHJldmVhbCBjb250ZW50XHJcbiAgICAgICAgICAgIHNlbGYuanVtcFRvKCBzZWxmLmN1cnJJbmRleCApO1xyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBTaW1wbGUgaTE4biBzdXBwb3J0IC0gcmVwbGFjZXMgb2JqZWN0IGtleXMgZm91bmQgaW4gdGVtcGxhdGVcclxuICAgICAgICAvLyB3aXRoIGNvcnJlc3BvbmRpbmcgdmFsdWVzXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHRyYW5zbGF0ZSA6IGZ1bmN0aW9uKCBvYmosIHN0ciApIHtcclxuICAgICAgICAgICAgdmFyIGFyciA9IG9iai5vcHRzLmkxOG5bIG9iai5vcHRzLmxhbmcgXTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvXFx7XFx7KFxcdyspXFx9XFx9L2csIGZ1bmN0aW9uKG1hdGNoLCBuKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBhcnJbbl07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBhcnJheSBvZiBnYWxseSBpdGVtIG9iamVjdHNcclxuICAgICAgICAvLyBDaGVjayBpZiBlYWNoIG9iamVjdCBoYXMgdmFsaWQgdHlwZSBhbmQgY29udGVudFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGNyZWF0ZUdyb3VwIDogZnVuY3Rpb24gKCBjb250ZW50ICkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiAgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSAkLm1ha2VBcnJheSggY29udGVudCApO1xyXG5cclxuICAgICAgICAgICAgJC5lYWNoKGl0ZW1zLCBmdW5jdGlvbiggaSwgaXRlbSApIHtcclxuICAgICAgICAgICAgICAgIHZhciBvYmogID0ge30sXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0cyA9IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICRpdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc3JjLFxyXG4gICAgICAgICAgICAgICAgICAgIHNyY1BhcnRzO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFN0ZXAgMSAtIE1ha2Ugc3VyZSB3ZSBoYXZlIGFuIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAkLmlzUGxhaW5PYmplY3QoIGl0ZW0gKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgcHJvYmFibHkgaGF2ZSBtYW51YWwgdXNhZ2UgaGVyZSwgc29tZXRoaW5nIGxpa2VcclxuICAgICAgICAgICAgICAgICAgICAvLyAkLmZhbmN5Ym94Lm9wZW4oIFsgeyBzcmMgOiBcImltYWdlLmpwZ1wiLCB0eXBlIDogXCJpbWFnZVwiIH0gXSApXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9iaiAgPSBpdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMgPSBpdGVtLm9wdHMgfHwgaXRlbTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAkLnR5cGUoIGl0ZW0gKSA9PT0gJ29iamVjdCcgJiYgJCggaXRlbSApLmxlbmd0aCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSGVyZSB3ZSBwcm9iYWJseSBoYXZlIGpRdWVyeSBjb2xsZWN0aW9uIHJldHVybmVkIGJ5IHNvbWUgc2VsZWN0b3JcclxuICAgICAgICAgICAgICAgICAgICAkaXRlbSA9ICQoIGl0ZW0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0cyA9ICRpdGVtLmRhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICBvcHRzID0gJC5leHRlbmQoIHt9LCBvcHRzLCBvcHRzLm9wdGlvbnMgfHwge30gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSGVyZSB3ZSBzdG9yZSBjbGlja2VkIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICBvcHRzLiRvcmlnID0gJGl0ZW07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9iai5zcmMgPSBvcHRzLnNyYyB8fCAkaXRlbS5hdHRyKCAnaHJlZicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQXNzdW1lIHRoYXQgc2ltcGxlIHN5bnRheCBpcyB1c2VkLCBmb3IgZXhhbXBsZTpcclxuICAgICAgICAgICAgICAgICAgICAvLyAgIGAkLmZhbmN5Ym94Lm9wZW4oICQoXCIjdGVzdFwiKSwge30gKTtgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhb2JqLnR5cGUgJiYgIW9iai5zcmMgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai50eXBlID0gJ2lubGluZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zcmMgID0gaXRlbTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQXNzdW1lIHdlIGhhdmUgYSBzaW1wbGUgaHRtbCBjb2RlLCBmb3IgZXhhbXBsZTpcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICQuZmFuY3lib3gub3BlbiggJzxkaXY+PGgxPkhpITwvaDE+PC9kaXY+JyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgOiAnaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYyAgOiBpdGVtICsgJydcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBFYWNoIGdhbGxlcnkgb2JqZWN0IGhhcyBmdWxsIGNvbGxlY3Rpb24gb2Ygb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgb2JqLm9wdHMgPSAkLmV4dGVuZCggdHJ1ZSwge30sIHNlbGYub3B0cywgb3B0cyApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIERvIG5vdCBtZXJnZSBidXR0b25zIGFycmF5XHJcbiAgICAgICAgICAgICAgICBpZiAoICQuaXNBcnJheSggb3B0cy5idXR0b25zICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMuYnV0dG9ucyA9IG9wdHMuYnV0dG9ucztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3RlcCAyIC0gTWFrZSBzdXJlIHdlIGhhdmUgY29udGVudCB0eXBlLCBpZiBub3QgLSB0cnkgdG8gZ3Vlc3NcclxuICAgICAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgICAgICAgdHlwZSA9IG9iai50eXBlIHx8IG9iai5vcHRzLnR5cGU7XHJcbiAgICAgICAgICAgICAgICBzcmMgID0gb2JqLnNyYyB8fCAnJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICF0eXBlICYmIHNyYyApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNyYy5tYXRjaCgvKF5kYXRhOmltYWdlXFwvW2EtejAtOStcXC89XSosKXwoXFwuKGpwKGV8Z3xlZyl8Z2lmfHBuZ3xibXB8d2VicHxzdmd8aWNvKSgoXFw/fCMpLiopPyQpL2kpICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2ltYWdlJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggc3JjLm1hdGNoKC9cXC4ocGRmKSgoXFw/fCMpLiopPyQvaSkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAncGRmJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggc3JjLmNoYXJBdCgwKSA9PT0gJyMnICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2lubGluZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggdHlwZSApIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmoudHlwZSA9IHR5cGU7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnRyaWdnZXIoICdvYmplY3ROZWVkc1R5cGUnLCBvYmogKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3RlcCAzIC0gU29tZSBhZGp1c3RtZW50c1xyXG4gICAgICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgICAgIG9iai5pbmRleCA9IHNlbGYuZ3JvdXAubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmICRvcmlnIGFuZCAkdGh1bWIgb2JqZWN0cyBleGlzdFxyXG4gICAgICAgICAgICAgICAgaWYgKCBvYmoub3B0cy4kb3JpZyAmJiAhb2JqLm9wdHMuJG9yaWcubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmoub3B0cy4kb3JpZztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICFvYmoub3B0cy4kdGh1bWIgJiYgb2JqLm9wdHMuJG9yaWcgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMuJHRodW1iID0gb2JqLm9wdHMuJG9yaWcuZmluZCggJ2ltZzpmaXJzdCcgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIG9iai5vcHRzLiR0aHVtYiAmJiAhb2JqLm9wdHMuJHRodW1iLmxlbmd0aCApIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqLm9wdHMuJHRodW1iO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFwiY2FwdGlvblwiIGlzIGEgXCJzcGVjaWFsXCIgb3B0aW9uLCBpdCBjYW4gYmUgdXNlZCB0byBjdXN0b21pemUgY2FwdGlvbiBwZXIgZ2FsbGVyeSBpdGVtIC4uXHJcbiAgICAgICAgICAgICAgICBpZiAoICQudHlwZSggb2JqLm9wdHMuY2FwdGlvbiApID09PSAnZnVuY3Rpb24nICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRzLmNhcHRpb24gPSBvYmoub3B0cy5jYXB0aW9uLmFwcGx5KCBpdGVtLCBbIHNlbGYsIG9iaiBdICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAkLnR5cGUoIHNlbGYub3B0cy5jYXB0aW9uICkgPT09ICdmdW5jdGlvbicgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMuY2FwdGlvbiA9IHNlbGYub3B0cy5jYXB0aW9uLmFwcGx5KCBpdGVtLCBbIHNlbGYsIG9iaiBdICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgY2FwdGlvbiBhcyBhIHN0cmluZyBvciBqUXVlcnkgb2JqZWN0XHJcbiAgICAgICAgICAgICAgICBpZiAoICEoIG9iai5vcHRzLmNhcHRpb24gaW5zdGFuY2VvZiAkICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMuY2FwdGlvbiA9IG9iai5vcHRzLmNhcHRpb24gPT09IHVuZGVmaW5lZCA/ICcnIDogb2JqLm9wdHMuY2FwdGlvbiArICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHVybCBjb250YWlucyBcImZpbHRlclwiIHVzZWQgdG8gZmlsdGVyIHRoZSBjb250ZW50XHJcbiAgICAgICAgICAgICAgICAvLyBFeGFtcGxlOiBcImFqYXguaHRtbCAjc29tZXRoaW5nXCJcclxuICAgICAgICAgICAgICAgIGlmICggdHlwZSA9PT0gJ2FqYXgnICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNyY1BhcnRzID0gc3JjLnNwbGl0KC9cXHMrLywgMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggc3JjUGFydHMubGVuZ3RoID4gMSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNyYyA9IHNyY1BhcnRzLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0cy5maWx0ZXIgPSBzcmNQYXJ0cy5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIG9iai5vcHRzLnNtYWxsQnRuID09ICdhdXRvJyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAkLmluQXJyYXkoIHR5cGUsIFsnaHRtbCcsICdpbmxpbmUnLCAnYWpheCddICkgPiAtMSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMudG9vbGJhciAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMuc21hbGxCdG4gPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0cy5zbWFsbEJ0biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgXCJwZGZcIiwgdGhlbiBzaW1wbHkgbG9hZCBmaWxlIGludG8gaWZyYW1lXHJcbiAgICAgICAgICAgICAgICBpZiAoIHR5cGUgPT09ICdwZGYnICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai50eXBlID0gJ2lmcmFtZSc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRzLmlmcmFtZS5wcmVsb2FkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSGlkZSBhbGwgYnV0dG9ucyBhbmQgZGlzYWJsZSBpbnRlcmFjdGl2aXR5IGZvciBtb2RhbCBpdGVtc1xyXG4gICAgICAgICAgICAgICAgaWYgKCBvYmoub3B0cy5tb2RhbCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMgPSAkLmV4dGVuZCh0cnVlLCBvYmoub3B0cywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYnV0dG9uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvYmFyIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhciA6IDAsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbWFsbEJ0biA6IDAsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXNhYmxlIGtleWJvYXJkIG5hdmlnYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQgOiAwLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZSBzb21lIG1vZHVsZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVTaG93ICA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxTY3JlZW4gOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHVtYnMgICAgIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2ggICAgICA6IDAsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXNhYmxlIGNsaWNrIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQ29udGVudCAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja1NsaWRlICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tPdXRzaWRlICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRibGNsaWNrQ29udGVudCA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYmxjbGlja1NsaWRlICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGJsY2xpY2tPdXRzaWRlIDogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3RlcCA0IC0gQWRkIHByb2Nlc3NlZCBvYmplY3QgdG8gZ3JvdXBcclxuICAgICAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5ncm91cC5wdXNoKCBvYmogKTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQXR0YWNoIGFuIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb25zIGZvcjpcclxuICAgICAgICAvLyAgIC0gbmF2aWdhdGlvbiBidXR0b25zXHJcbiAgICAgICAgLy8gICAtIGJyb3dzZXIgc2Nyb2xsaW5nLCByZXNpemluZztcclxuICAgICAgICAvLyAgIC0gZm9jdXNpbmdcclxuICAgICAgICAvLyAgIC0ga2V5Ym9hcmRcclxuICAgICAgICAvLyAgIC0gZGV0ZWN0IGlkbGVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBhZGRFdmVudHMgOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5yZW1vdmVFdmVudHMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIE1ha2UgbmF2aWdhdGlvbiBlbGVtZW50cyBjbGlja2FibGVcclxuICAgICAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIub24oJ2NsaWNrLmZiLWNsb3NlJywgJ1tkYXRhLWZhbmN5Ym94LWNsb3NlXScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5jbG9zZSggZSApO1xyXG5cclxuICAgICAgICAgICAgfSkub24oICdjbGljay5mYi1wcmV2IHRvdWNoZW5kLmZiLXByZXYnLCAnW2RhdGEtZmFuY3lib3gtcHJldl0nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYucHJldmlvdXMoKTtcclxuXHJcbiAgICAgICAgICAgIH0pLm9uKCAnY2xpY2suZmItbmV4dCB0b3VjaGVuZC5mYi1uZXh0JywgJ1tkYXRhLWZhbmN5Ym94LW5leHRdJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLm5leHQoKTtcclxuXHJcbiAgICAgICAgICAgIH0pLm9uKCAnY2xpY2suZmInLCAnW2RhdGEtZmFuY3lib3gtem9vbV0nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBDbGljayBoYW5kbGVyIGZvciB6b29tIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgc2VsZlsgc2VsZi5pc1NjYWxlZERvd24oKSA/ICdzY2FsZVRvQWN0dWFsJyA6ICdzY2FsZVRvRml0JyBdKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSBwYWdlIHNjcm9sbGluZyBhbmQgYnJvd3NlciByZXNpemluZ1xyXG4gICAgICAgICAgICAkVy5vbignb3JpZW50YXRpb25jaGFuZ2UuZmIgcmVzaXplLmZiJywgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggZSAmJiBlLm9yaWdpbmFsRXZlbnQgJiYgZS5vcmlnaW5hbEV2ZW50LnR5cGUgPT09IFwicmVzaXplXCIgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5zdGFnZS5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMuc3RhZ2Uuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCA2MDApO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gVHJhcCBrZXlib2FyZCBmb2N1cyBpbnNpZGUgb2YgdGhlIG1vZGFsLCBzbyB0aGUgdXNlciBkb2VzIG5vdCBhY2NpZGVudGFsbHkgdGFiIG91dHNpZGUgb2YgdGhlIG1vZGFsXHJcbiAgICAgICAgICAgIC8vIChhLmsuYS4gXCJlc2NhcGluZyB0aGUgbW9kYWxcIilcclxuICAgICAgICAgICAgJEQub24oJ2ZvY3VzaW4uZmInLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSAkLmZhbmN5Ym94ID8gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGluc3RhbmNlLmlzQ2xvc2luZyB8fCAhaW5zdGFuY2UuY3VycmVudCB8fCAhaW5zdGFuY2UuY3VycmVudC5vcHRzLnRyYXBGb2N1cyB8fCAkKCBlLnRhcmdldCApLmhhc0NsYXNzKCAnZmFuY3lib3gtY29udGFpbmVyJyApIHx8ICQoIGUudGFyZ2V0ICkuaXMoIGRvY3VtZW50ICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggaW5zdGFuY2UgJiYgJCggZS50YXJnZXQgKS5jc3MoICdwb3NpdGlvbicgKSAhPT0gJ2ZpeGVkJyAmJiAhaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyLmhhcyggZS50YXJnZXQgKS5sZW5ndGggKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU29tZXRpbWVzIHBhZ2UgZ2V0cyBzY3JvbGxlZCwgc2V0IGl0IGJhY2tcclxuICAgICAgICAgICAgICAgICAgICAkVy5zY3JvbGxUb3AoIHNlbGYuc2Nyb2xsVG9wICkuc2Nyb2xsTGVmdCggc2VsZi5zY3JvbGxMZWZ0ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIEVuYWJsZSBrZXlib2FyZCBuYXZpZ2F0aW9uXHJcbiAgICAgICAgICAgICRELm9uKCdrZXlkb3duLmZiJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gc2VsZi5jdXJyZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGtleWNvZGUgPSBlLmtleUNvZGUgfHwgZS53aGljaDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICFjdXJyZW50IHx8ICFjdXJyZW50Lm9wdHMua2V5Ym9hcmQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggJChlLnRhcmdldCkuaXMoJ2lucHV0JykgfHwgJChlLnRhcmdldCkuaXMoJ3RleHRhcmVhJykgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEJhY2tzcGFjZSBhbmQgRXNjIGtleXNcclxuICAgICAgICAgICAgICAgIGlmICgga2V5Y29kZSA9PT0gOCB8fCBrZXljb2RlID09PSAyNyApIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2xvc2UoIGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIExlZnQgYXJyb3cgYW5kIFVwIGFycm93XHJcbiAgICAgICAgICAgICAgICBpZiAoIGtleWNvZGUgPT09IDM3IHx8IGtleWNvZGUgPT09IDM4ICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wcmV2aW91cygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmlnaCBhcnJvdyBhbmQgRG93biBhcnJvd1xyXG4gICAgICAgICAgICAgICAgaWYgKCBrZXljb2RlID09PSAzOSB8fCBrZXljb2RlID09PSA0MCApIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubmV4dCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCdhZnRlcktleWRvd24nLCBlLCBrZXljb2RlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gSGlkZSBjb250cm9scyBhZnRlciBzb21lIGluYWN0aXZpdHkgcGVyaW9kXHJcbiAgICAgICAgICAgIGlmICggc2VsZi5ncm91cFsgc2VsZi5jdXJySW5kZXggXS5vcHRzLmlkbGVUaW1lICkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICRELm9uKCdtb3VzZW1vdmUuZmItaWRsZSBtb3VzZWxlYXZlLmZiLWlkbGUgbW91c2Vkb3duLmZiLWlkbGUgdG91Y2hzdGFydC5mYi1pZGxlIHRvdWNobW92ZS5mYi1pZGxlIHNjcm9sbC5mYi1pZGxlIGtleWRvd24uZmItaWRsZScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2VsZi5pc0lkbGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2hvd0NvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmlzSWRsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5pZGxlSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIrKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA+PSBzZWxmLmdyb3VwWyBzZWxmLmN1cnJJbmRleCBdLm9wdHMuaWRsZVRpbWUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaXNJZGxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oaWRlQ29udHJvbHMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBldmVudHMgYWRkZWQgYnkgdGhlIGNvcmVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHJlbW92ZUV2ZW50cyA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAkVy5vZmYoICdvcmllbnRhdGlvbmNoYW5nZS5mYiByZXNpemUuZmInICk7XHJcbiAgICAgICAgICAgICRELm9mZiggJ2ZvY3VzaW4uZmIga2V5ZG93bi5mYiAuZmItaWRsZScgKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJHJlZnMuY29udGFpbmVyLm9mZiggJy5mYi1jbG9zZSAuZmItcHJldiAuZmItbmV4dCcgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2VsZi5pZGxlSW50ZXJ2YWwgKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCggc2VsZi5pZGxlSW50ZXJ2YWwgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLmlkbGVJbnRlcnZhbCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQ2hhbmdlIHRvIHByZXZpb3VzIGdhbGxlcnkgaXRlbVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgcHJldmlvdXMgOiBmdW5jdGlvbiggZHVyYXRpb24gKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmp1bXBUbyggdGhpcy5jdXJyUG9zIC0gMSwgZHVyYXRpb24gKTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQ2hhbmdlIHRvIG5leHQgZ2FsbGVyeSBpdGVtXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIG5leHQgOiBmdW5jdGlvbiggZHVyYXRpb24gKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmp1bXBUbyggdGhpcy5jdXJyUG9zICsgMSwgZHVyYXRpb24gKTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gU3dpdGNoIHRvIHNlbGVjdGVkIGdhbGxlcnkgaXRlbVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAganVtcFRvIDogZnVuY3Rpb24gKCBwb3MsIGR1cmF0aW9uLCBzbGlkZSApIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgZmlyc3RSdW4sXHJcbiAgICAgICAgICAgICAgICBsb29wLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudCxcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzLFxyXG4gICAgICAgICAgICAgICAgY2FudmFzV2lkdGgsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UG9zLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvblByb3BzO1xyXG5cclxuICAgICAgICAgICAgdmFyIGdyb3VwTGVuID0gc2VsZi5ncm91cC5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNlbGYuaXNTbGlkaW5nIHx8IHNlbGYuaXNDbG9zaW5nIHx8ICggc2VsZi5pc0FuaW1hdGluZyAmJiBzZWxmLmZpcnN0UnVuICkgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHBvcyAgPSBwYXJzZUludCggcG9zLCAxMCApO1xyXG4gICAgICAgICAgICBsb29wID0gc2VsZi5jdXJyZW50ID8gc2VsZi5jdXJyZW50Lm9wdHMubG9vcCA6IHNlbGYub3B0cy5sb29wO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhbG9vcCAmJiAoIHBvcyA8IDAgfHwgcG9zID49IGdyb3VwTGVuICkgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZpcnN0UnVuID0gc2VsZi5maXJzdFJ1biA9ICggc2VsZi5maXJzdFJ1biA9PT0gbnVsbCApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBncm91cExlbiA8IDIgJiYgIWZpcnN0UnVuICYmICEhc2VsZi5pc1NsaWRpbmcgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHByZXZpb3VzID0gc2VsZi5jdXJyZW50O1xyXG5cclxuICAgICAgICAgICAgc2VsZi5wcmV2SW5kZXggPSBzZWxmLmN1cnJJbmRleDtcclxuICAgICAgICAgICAgc2VsZi5wcmV2UG9zICAgPSBzZWxmLmN1cnJQb3M7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgc2xpZGVzXHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSBzZWxmLmNyZWF0ZVNsaWRlKCBwb3MgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggZ3JvdXBMZW4gPiAxICkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCBsb29wIHx8IGN1cnJlbnQuaW5kZXggPiAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY3JlYXRlU2xpZGUoIHBvcyAtIDEgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGxvb3AgfHwgY3VycmVudC5pbmRleCA8IGdyb3VwTGVuIC0gMSApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNyZWF0ZVNsaWRlKCBwb3MgKyAxICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGYuY3VycmVudCAgID0gY3VycmVudDtcclxuICAgICAgICAgICAgc2VsZi5jdXJySW5kZXggPSBjdXJyZW50LmluZGV4O1xyXG4gICAgICAgICAgICBzZWxmLmN1cnJQb3MgICA9IGN1cnJlbnQucG9zO1xyXG5cclxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCAnYmVmb3JlU2hvdycsIGZpcnN0UnVuICk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUNvbnRyb2xzKCk7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50UG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoIGN1cnJlbnQuJHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LmlzTW92ZWQgICAgICAgID0gKCBjdXJyZW50UG9zLmxlZnQgIT09IDAgfHwgY3VycmVudFBvcy50b3AgIT09IDAgKSAmJiAhY3VycmVudC4kc2xpZGUuaGFzQ2xhc3MoICdmYW5jeWJveC1hbmltYXRlZCcgKTtcclxuICAgICAgICAgICAgY3VycmVudC5mb3JjZWREdXJhdGlvbiA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgIGlmICggJC5pc051bWVyaWMoIGR1cmF0aW9uICkgKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LmZvcmNlZER1cmF0aW9uID0gZHVyYXRpb247XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IGN1cnJlbnQub3B0c1sgZmlyc3RSdW4gPyAnYW5pbWF0aW9uRHVyYXRpb24nIDogJ3RyYW5zaXRpb25EdXJhdGlvbicgXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZHVyYXRpb24gPSBwYXJzZUludCggZHVyYXRpb24sIDEwICk7XHJcblxyXG4gICAgICAgICAgICAvLyBGcmVzaCBzdGFydCAtIHJldmVhbCBjb250YWluZXIsIGN1cnJlbnQgc2xpZGUgYW5kIHN0YXJ0IGxvYWRpbmcgY29udGVudFxyXG4gICAgICAgICAgICBpZiAoIGZpcnN0UnVuICkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggY3VycmVudC5vcHRzLmFuaW1hdGlvbkVmZmVjdCAmJiBkdXJhdGlvbiApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lci5jc3MoICd0cmFuc2l0aW9uLWR1cmF0aW9uJywgZHVyYXRpb24gKyAnbXMnICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1pcy1oaWRkZW4nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yY2VSZWRyYXcoIHNlbGYuJHJlZnMuY29udGFpbmVyICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIuYWRkQ2xhc3MoICdmYW5jeWJveC1pcy1vcGVuJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIE1ha2UgZmlyc3Qgc2xpZGUgdmlzaWJsZSAodG8gZGlzcGxheSBsb2FkaW5nIGljb24sIGlmIG5lZWRlZClcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQuJHNsaWRlLmFkZENsYXNzKCAnZmFuY3lib3gtc2xpZGUtLWN1cnJlbnQnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5sb2FkU2xpZGUoIGN1cnJlbnQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnByZWxvYWQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIENsZWFuIHVwXHJcbiAgICAgICAgICAgICQuZWFjaChzZWxmLnNsaWRlcywgZnVuY3Rpb24oIGluZGV4LCBzbGlkZSApIHtcclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3guc3RvcCggc2xpZGUuJHNsaWRlICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gTWFrZSBjdXJyZW50IHRoYXQgc2xpZGUgaXMgdmlzaWJsZSBldmVuIGlmIGNvbnRlbnQgaXMgc3RpbGwgbG9hZGluZ1xyXG4gICAgICAgICAgICBjdXJyZW50LiRzbGlkZS5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91cycgKS5hZGRDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS1jdXJyZW50JyApO1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgc2xpZGVzIGhhdmUgYmVlbiBkcmFnZ2VkLCBhbmltYXRlIHRoZW0gdG8gY29ycmVjdCBwb3NpdGlvblxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQuaXNNb3ZlZCApIHtcclxuICAgICAgICAgICAgICAgIGNhbnZhc1dpZHRoID0gTWF0aC5yb3VuZCggY3VycmVudC4kc2xpZGUud2lkdGgoKSApO1xyXG5cclxuICAgICAgICAgICAgICAgICQuZWFjaChzZWxmLnNsaWRlcywgZnVuY3Rpb24oIGluZGV4LCBzbGlkZSApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gc2xpZGUucG9zIC0gY3VycmVudC5wb3M7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQuZmFuY3lib3guYW5pbWF0ZSggc2xpZGUuJHNsaWRlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0IDogKCBwb3MgKiBjYW52YXNXaWR0aCApICsgKCBwb3MgKiBzbGlkZS5vcHRzLmd1dHRlciApXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZHVyYXRpb24sIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUuJHNsaWRlLnJlbW92ZUF0dHIoJ3N0eWxlJykucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1zbGlkZS0tbmV4dCBmYW5jeWJveC1zbGlkZS0tcHJldmlvdXMnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLnBvcyA9PT0gc2VsZi5jdXJyUG9zICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5pc01vdmVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLiRyZWZzLnN0YWdlLmNoaWxkcmVuKCkucmVtb3ZlQXR0ciggJ3N0eWxlJyApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBTdGFydCB0cmFuc2l0aW9uIHRoYXQgcmV2ZWFscyBjdXJyZW50IGNvbnRlbnRcclxuICAgICAgICAgICAgLy8gb3Igd2FpdCB3aGVuIGl0IHdpbGwgYmUgbG9hZGVkXHJcblxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQuaXNMb2FkZWQgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnJldmVhbENvbnRlbnQoIGN1cnJlbnQgKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvYWRTbGlkZSggY3VycmVudCApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxmLnByZWxvYWQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggcHJldmlvdXMucG9zID09PSBjdXJyZW50LnBvcyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSGFuZGxlIHByZXZpb3VzIHNsaWRlXHJcbiAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgdHJhbnNpdGlvblByb3BzID0gJ2ZhbmN5Ym94LXNsaWRlLS0nICsgKCBwcmV2aW91cy5wb3MgPiBjdXJyZW50LnBvcyA/ICduZXh0JyA6ICdwcmV2aW91cycgKTtcclxuXHJcbiAgICAgICAgICAgIHByZXZpb3VzLiRzbGlkZS5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS1jb21wbGV0ZSBmYW5jeWJveC1zbGlkZS0tY3VycmVudCBmYW5jeWJveC1zbGlkZS0tbmV4dCBmYW5jeWJveC1zbGlkZS0tcHJldmlvdXMnICk7XHJcblxyXG4gICAgICAgICAgICBwcmV2aW91cy5pc0NvbXBsZXRlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoICFkdXJhdGlvbiB8fCAoICFjdXJyZW50LmlzTW92ZWQgJiYgIWN1cnJlbnQub3B0cy50cmFuc2l0aW9uRWZmZWN0ICkgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggY3VycmVudC5pc01vdmVkICkge1xyXG4gICAgICAgICAgICAgICAgcHJldmlvdXMuJHNsaWRlLmFkZENsYXNzKCB0cmFuc2l0aW9uUHJvcHMgKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvblByb3BzID0gJ2ZhbmN5Ym94LWFuaW1hdGVkICcgKyB0cmFuc2l0aW9uUHJvcHMgKyAnIGZhbmN5Ym94LWZ4LScgKyBjdXJyZW50Lm9wdHMudHJhbnNpdGlvbkVmZmVjdDtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoIHByZXZpb3VzLiRzbGlkZSwgdHJhbnNpdGlvblByb3BzLCBkdXJhdGlvbiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMuJHNsaWRlLnJlbW92ZUNsYXNzKCB0cmFuc2l0aW9uUHJvcHMgKS5yZW1vdmVBdHRyKCAnc3R5bGUnICk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgXCJzbGlkZVwiIGVsZW1lbnRcclxuICAgICAgICAvLyBUaGVzZSBhcmUgZ2FsbGVyeSBpdGVtcyAgdGhhdCBhcmUgYWN0dWFsbHkgYWRkZWQgdG8gRE9NXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBjcmVhdGVTbGlkZSA6IGZ1bmN0aW9uKCBwb3MgKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciAkc2xpZGU7XHJcbiAgICAgICAgICAgIHZhciBpbmRleDtcclxuXHJcbiAgICAgICAgICAgIGluZGV4ID0gcG9zICUgc2VsZi5ncm91cC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gc2VsZi5ncm91cC5sZW5ndGggKyBpbmRleCA6IGluZGV4O1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhc2VsZi5zbGlkZXNbIHBvcyBdICYmIHNlbGYuZ3JvdXBbIGluZGV4IF0gKSB7XHJcbiAgICAgICAgICAgICAgICAkc2xpZGUgPSAkKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtc2xpZGVcIj48L2Rpdj4nKS5hcHBlbmRUbyggc2VsZi4kcmVmcy5zdGFnZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuc2xpZGVzWyBwb3MgXSA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwgc2VsZi5ncm91cFsgaW5kZXggXSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcyAgICAgIDogcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICRzbGlkZSAgIDogJHNsaWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzTG9hZGVkIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZVNsaWRlKCBzZWxmLnNsaWRlc1sgcG9zIF0gKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2xpZGVzWyBwb3MgXTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gU2NhbGUgaW1hZ2UgdG8gdGhlIGFjdHVhbCBzaXplIG9mIHRoZSBpbWFnZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgc2NhbGVUb0FjdHVhbCA6IGZ1bmN0aW9uKCB4LCB5LCBkdXJhdGlvbiApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gc2VsZi5jdXJyZW50O1xyXG4gICAgICAgICAgICB2YXIgJHdoYXQgICA9IGN1cnJlbnQuJGNvbnRlbnQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgaW1nUG9zLCBwb3NYLCBwb3NZLCBzY2FsZVgsIHNjYWxlWTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjYW52YXNXaWR0aCAgPSBwYXJzZUludCggY3VycmVudC4kc2xpZGUud2lkdGgoKSwgMTAgKTtcclxuICAgICAgICAgICAgdmFyIGNhbnZhc0hlaWdodCA9IHBhcnNlSW50KCBjdXJyZW50LiRzbGlkZS5oZWlnaHQoKSwgMTAgKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBuZXdJbWdXaWR0aCAgPSBjdXJyZW50LndpZHRoO1xyXG4gICAgICAgICAgICB2YXIgbmV3SW1nSGVpZ2h0ID0gY3VycmVudC5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoICEoIGN1cnJlbnQudHlwZSA9PSAnaW1hZ2UnICYmICFjdXJyZW50Lmhhc0Vycm9yKSB8fCAhJHdoYXQgfHwgc2VsZi5pc0FuaW1hdGluZyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJC5mYW5jeWJveC5zdG9wKCAkd2hhdCApO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICB4ID0geCA9PT0gdW5kZWZpbmVkID8gY2FudmFzV2lkdGggICogMC41ICA6IHg7XHJcbiAgICAgICAgICAgIHkgPSB5ID09PSB1bmRlZmluZWQgPyBjYW52YXNIZWlnaHQgKiAwLjUgIDogeTtcclxuXHJcbiAgICAgICAgICAgIGltZ1BvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKCAkd2hhdCApO1xyXG5cclxuICAgICAgICAgICAgc2NhbGVYICA9IG5ld0ltZ1dpZHRoICAvIGltZ1Bvcy53aWR0aDtcclxuICAgICAgICAgICAgc2NhbGVZICA9IG5ld0ltZ0hlaWdodCAvIGltZ1Bvcy5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgY2VudGVyIHBvc2l0aW9uIGZvciBvcmlnaW5hbCBpbWFnZVxyXG4gICAgICAgICAgICBwb3NYID0gKCBjYW52YXNXaWR0aCAqIDAuNSAgLSBuZXdJbWdXaWR0aCAqIDAuNSApO1xyXG4gICAgICAgICAgICBwb3NZID0gKCBjYW52YXNIZWlnaHQgKiAwLjUgLSBuZXdJbWdIZWlnaHQgKiAwLjUgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBpbWFnZSBkb2VzIG5vdCBtb3ZlIGF3YXkgZnJvbSBlZGdlc1xyXG4gICAgICAgICAgICBpZiAoIG5ld0ltZ1dpZHRoID4gY2FudmFzV2lkdGggKSB7XHJcbiAgICAgICAgICAgICAgICBwb3NYID0gaW1nUG9zLmxlZnQgKiBzY2FsZVggLSAoICggeCAqIHNjYWxlWCApIC0geCApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggcG9zWCA+IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zWCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBwb3NYIDwgIGNhbnZhc1dpZHRoIC0gbmV3SW1nV2lkdGggKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zWCA9IGNhbnZhc1dpZHRoIC0gbmV3SW1nV2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggbmV3SW1nSGVpZ2h0ID4gY2FudmFzSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICBwb3NZID0gaW1nUG9zLnRvcCAgKiBzY2FsZVkgLSAoICggeSAqIHNjYWxlWSApIC0geSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggcG9zWSA+IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zWSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBwb3NZIDwgIGNhbnZhc0hlaWdodCAtIG5ld0ltZ0hlaWdodCApIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NZID0gY2FudmFzSGVpZ2h0IC0gbmV3SW1nSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUN1cnNvciggbmV3SW1nV2lkdGgsIG5ld0ltZ0hlaWdodCApO1xyXG5cclxuICAgICAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKCAkd2hhdCwge1xyXG4gICAgICAgICAgICAgICAgdG9wICAgIDogcG9zWSxcclxuICAgICAgICAgICAgICAgIGxlZnQgICA6IHBvc1gsXHJcbiAgICAgICAgICAgICAgICBzY2FsZVggOiBzY2FsZVgsXHJcbiAgICAgICAgICAgICAgICBzY2FsZVkgOiBzY2FsZVlcclxuICAgICAgICAgICAgfSwgZHVyYXRpb24gfHwgMzMwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBTdG9wIHNsaWRlc2hvd1xyXG4gICAgICAgICAgICBpZiAoIHNlbGYuU2xpZGVTaG93ICYmIHNlbGYuU2xpZGVTaG93LmlzQWN0aXZlICkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5TbGlkZVNob3cuc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFNjYWxlIGltYWdlIHRvIGZpdCBpbnNpZGUgcGFyZW50IGVsZW1lbnRcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNjYWxlVG9GaXQgOiBmdW5jdGlvbiggZHVyYXRpb24gKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHNlbGYuY3VycmVudDtcclxuICAgICAgICAgICAgdmFyICR3aGF0ICAgPSBjdXJyZW50LiRjb250ZW50O1xyXG4gICAgICAgICAgICB2YXIgZW5kO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhKCBjdXJyZW50LnR5cGUgPT0gJ2ltYWdlJyAmJiAhY3VycmVudC5oYXNFcnJvcikgfHwgISR3aGF0IHx8IHNlbGYuaXNBbmltYXRpbmcgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICQuZmFuY3lib3guc3RvcCggJHdoYXQgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgZW5kID0gc2VsZi5nZXRGaXRQb3MoIGN1cnJlbnQgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYudXBkYXRlQ3Vyc29yKCBlbmQud2lkdGgsIGVuZC5oZWlnaHQgKTtcclxuXHJcbiAgICAgICAgICAgICQuZmFuY3lib3guYW5pbWF0ZSggJHdoYXQsIHtcclxuICAgICAgICAgICAgICAgIHRvcCAgICA6IGVuZC50b3AsXHJcbiAgICAgICAgICAgICAgICBsZWZ0ICAgOiBlbmQubGVmdCxcclxuICAgICAgICAgICAgICAgIHNjYWxlWCA6IGVuZC53aWR0aCAgLyAkd2hhdC53aWR0aCgpLFxyXG4gICAgICAgICAgICAgICAgc2NhbGVZIDogZW5kLmhlaWdodCAvICR3aGF0LmhlaWdodCgpXHJcbiAgICAgICAgICAgIH0sIGR1cmF0aW9uIHx8IDMzMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBDYWxjdWxhdGUgaW1hZ2Ugc2l6ZSB0byBmaXQgaW5zaWRlIHZpZXdwb3J0XHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBnZXRGaXRQb3MgOiBmdW5jdGlvbiggc2xpZGUgKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmICA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciAkd2hhdCA9IHNsaWRlLiRjb250ZW50O1xyXG5cclxuICAgICAgICAgICAgdmFyIGltZ1dpZHRoICA9IHNsaWRlLndpZHRoO1xyXG4gICAgICAgICAgICB2YXIgaW1nSGVpZ2h0ID0gc2xpZGUuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdmFyIG1hcmdpbiA9IHNsaWRlLm9wdHMubWFyZ2luO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQsIG1pblJhdGlvLCB3aWR0aCwgaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhJHdoYXQgfHwgISR3aGF0Lmxlbmd0aCB8fCAoICFpbWdXaWR0aCAmJiAhaW1nSGVpZ2h0KSApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQ29udmVydCBcIm1hcmdpbiB0byBDU1Mgc3R5bGU6IFsgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0IF1cclxuICAgICAgICAgICAgaWYgKCAkLnR5cGUoIG1hcmdpbiApID09PSBcIm51bWJlclwiICkge1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luID0gWyBtYXJnaW4sIG1hcmdpbiBdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIG1hcmdpbi5sZW5ndGggPT0gMiApIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbiA9IFsgbWFyZ2luWzBdLCBtYXJnaW5bMV0sIG1hcmdpblswXSwgbWFyZ2luWzFdIF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFdlIGNhbiBub3QgdXNlICRzbGlkZSB3aWR0aCBoZXJlLCBiZWNhdXNlIGl0IGNhbiBoYXZlIGRpZmZlcmVudCBkaWVtZW5zaW9ucyB3aGlsZSBpbiB0cmFuc2l0b25cclxuICAgICAgICAgICAgY2FudmFzV2lkdGggID0gcGFyc2VJbnQoIHNlbGYuJHJlZnMuc3RhZ2Uud2lkdGgoKSwgMTAgKSAgLSAoIG1hcmdpblsgMSBdICsgbWFyZ2luWyAzIF0gKTtcclxuICAgICAgICAgICAgY2FudmFzSGVpZ2h0ID0gcGFyc2VJbnQoIHNlbGYuJHJlZnMuc3RhZ2UuaGVpZ2h0KCksIDEwICkgLSAoIG1hcmdpblsgMCBdICsgbWFyZ2luWyAyIF0gKTtcclxuXHJcbiAgICAgICAgICAgIG1pblJhdGlvID0gTWF0aC5taW4oMSwgY2FudmFzV2lkdGggLyBpbWdXaWR0aCwgY2FudmFzSGVpZ2h0IC8gaW1nSGVpZ2h0ICk7XHJcblxyXG4gICAgICAgICAgICB3aWR0aCAgPSBNYXRoLmZsb29yKCBtaW5SYXRpbyAqIGltZ1dpZHRoICk7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IE1hdGguZmxvb3IoIG1pblJhdGlvICogaW1nSGVpZ2h0ICk7XHJcblxyXG4gICAgICAgICAgICAvLyBVc2UgZmxvb3Igcm91bmRpbmcgdG8gbWFrZSBzdXJlIGl0IHJlYWxseSBmaXRzXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0b3AgICAgOiBNYXRoLmZsb29yKCAoIGNhbnZhc0hlaWdodCAtIGhlaWdodCApICogMC41ICkgKyBtYXJnaW5bIDAgXSxcclxuICAgICAgICAgICAgICAgIGxlZnQgICA6IE1hdGguZmxvb3IoICggY2FudmFzV2lkdGggIC0gd2lkdGggKSAgKiAwLjUgKSArIG1hcmdpblsgMyBdLFxyXG4gICAgICAgICAgICAgICAgd2lkdGggIDogd2lkdGgsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgOiBoZWlnaHRcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBwb3NpdGlvbiBhbmQgY29udGVudCBvZiBhbGwgc2xpZGVzXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgdXBkYXRlIDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAkLmVhY2goIHNlbGYuc2xpZGVzLCBmdW5jdGlvbigga2V5LCBzbGlkZSApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlU2xpZGUoIHNsaWRlICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIHNsaWRlIHBvc2l0aW9uIGFuZCBzY2FsZSBjb250ZW50IHRvIGZpdFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgdXBkYXRlU2xpZGUgOiBmdW5jdGlvbiggc2xpZGUgKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiAgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgJHdoYXQgPSBzbGlkZS4kY29udGVudDtcclxuXHJcbiAgICAgICAgICAgIGlmICggJHdoYXQgJiYgKCBzbGlkZS53aWR0aCB8fCBzbGlkZS5oZWlnaHQgKSApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJC5mYW5jeWJveC5zdG9wKCAkd2hhdCApO1xyXG5cclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCAkd2hhdCwgc2VsZi5nZXRGaXRQb3MoIHNsaWRlICkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLnBvcyA9PT0gc2VsZi5jdXJyUG9zICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlQ3Vyc29yKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNsaWRlLiRzbGlkZS50cmlnZ2VyKCAncmVmcmVzaCcgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYudHJpZ2dlciggJ29uVXBkYXRlJywgc2xpZGUgKTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIGN1cnNvciBzdHlsZSBkZXBlbmRpbmcgaWYgY29udGVudCBjYW4gYmUgem9vbWVkXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHVwZGF0ZUN1cnNvciA6IGZ1bmN0aW9uKCBuZXh0V2lkdGgsIG5leHRIZWlnaHQgKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBpc1NjYWxlZERvd247XHJcblxyXG4gICAgICAgICAgICB2YXIgJGNvbnRhaW5lciA9IHNlbGYuJHJlZnMuY29udGFpbmVyLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtaXMtem9vbWFibGUgZmFuY3lib3gtY2FuLXpvb21JbiBmYW5jeWJveC1jYW4tZHJhZyBmYW5jeWJveC1jYW4tem9vbU91dCcgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggIXNlbGYuY3VycmVudCB8fCBzZWxmLmlzQ2xvc2luZyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBzZWxmLmlzWm9vbWFibGUoKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAkY29udGFpbmVyLmFkZENsYXNzKCAnZmFuY3lib3gtaXMtem9vbWFibGUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBuZXh0V2lkdGggIT09IHVuZGVmaW5lZCAmJiBuZXh0SGVpZ2h0ICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNTY2FsZWREb3duID0gbmV4dFdpZHRoIDwgc2VsZi5jdXJyZW50LndpZHRoICYmIG5leHRIZWlnaHQgPCBzZWxmLmN1cnJlbnQuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNTY2FsZWREb3duID0gc2VsZi5pc1NjYWxlZERvd24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGlzU2NhbGVkRG93biApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgaW1hZ2UgaXMgc2NhbGVkIGRvd24sIHRoZW4sIG9idmlvdXNseSwgaXQgY2FuIGJlIHpvb21lZCB0byBmdWxsIHNpemVcclxuICAgICAgICAgICAgICAgICAgICAkY29udGFpbmVyLmFkZENsYXNzKCAnZmFuY3lib3gtY2FuLXpvb21JbicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNlbGYuY3VycmVudC5vcHRzLnRvdWNoICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgaW1hZ2Ugc2l6ZSBpciBsYXJnZW4gdGhhbiBhdmFpbGFibGUgYXZhaWxhYmxlIGFuZCB0b3VjaCBtb2R1bGUgaXMgbm90IGRpc2FibGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZW4gdXNlciBjYW4gZG8gcGFubmluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkY29udGFpbmVyLmFkZENsYXNzKCAnZmFuY3lib3gtY2FuLWRyYWcnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRjb250YWluZXIuYWRkQ2xhc3MoICdmYW5jeWJveC1jYW4tem9vbU91dCcgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICggc2VsZi5jdXJyZW50Lm9wdHMudG91Y2ggKSB7XHJcbiAgICAgICAgICAgICAgICAkY29udGFpbmVyLmFkZENsYXNzKCAnZmFuY3lib3gtY2FuLWRyYWcnICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIGN1cnJlbnQgc2xpZGUgaXMgem9vbWFibGVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGlzWm9vbWFibGUgOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gc2VsZi5jdXJyZW50O1xyXG4gICAgICAgICAgICB2YXIgZml0UG9zO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhY3VycmVudCB8fCBzZWxmLmlzQ2xvc2luZyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQXNzdW1lIHRoYXQgc2xpZGUgaXMgem9vbWFibGUgaWZcclxuICAgICAgICAgICAgLy8gICAtIGltYWdlIGlzIGxvYWRlZCBzdWNjZXNzZnVseVxyXG4gICAgICAgICAgICAvLyAgIC0gY2xpY2sgYWN0aW9uIGlzIFwiem9vbVwiXHJcbiAgICAgICAgICAgIC8vICAgLSBhY3R1YWwgc2l6ZSBvZiB0aGUgaW1hZ2UgaXMgc21hbGxlciB0aGFuIGF2YWlsYWJsZSBhcmVhXHJcbiAgICAgICAgICAgIGlmICggY3VycmVudC50eXBlID09PSAnaW1hZ2UnICYmIGN1cnJlbnQuaXNMb2FkZWQgJiYgIWN1cnJlbnQuaGFzRXJyb3IgJiZcclxuICAgICAgICAgICAgICAgICggY3VycmVudC5vcHRzLmNsaWNrQ29udGVudCA9PT0gJ3pvb20nIHx8ICggJC5pc0Z1bmN0aW9uKCBjdXJyZW50Lm9wdHMuY2xpY2tDb250ZW50ICkgJiYgY3VycmVudC5vcHRzLmNsaWNrQ29udGVudCggY3VycmVudCApID09PSAgXCJ6b29tXCIgKSApXHJcbiAgICAgICAgICAgICkge1xyXG5cclxuICAgICAgICAgICAgICAgIGZpdFBvcyA9IHNlbGYuZ2V0Rml0UG9zKCBjdXJyZW50ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBjdXJyZW50LndpZHRoID4gZml0UG9zLndpZHRoIHx8IGN1cnJlbnQuaGVpZ2h0ID4gZml0UG9zLmhlaWdodCApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIGN1cnJlbnQgaW1hZ2UgZGltZW5zaW9ucyBhcmUgc21hbGxlciB0aGFuIGFjdHVhbFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBpc1NjYWxlZERvd24gOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gc2VsZi5jdXJyZW50O1xyXG4gICAgICAgICAgICB2YXIgJHdoYXQgICA9IGN1cnJlbnQuJGNvbnRlbnQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmV6ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoICR3aGF0ICkge1xyXG4gICAgICAgICAgICAgICAgcmV6ID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoICR3aGF0ICk7XHJcbiAgICAgICAgICAgICAgICByZXogPSByZXoud2lkdGggPCBjdXJyZW50LndpZHRoIHx8IHJlei5oZWlnaHQgPCBjdXJyZW50LmhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlejtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIGltYWdlIGRpbWVuc2lvbnMgZXhjZWVkIHBhcmVudCBlbGVtZW50XHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgY2FuUGFuIDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHNlbGYuY3VycmVudDtcclxuICAgICAgICAgICAgdmFyICR3aGF0ICAgPSBjdXJyZW50LiRjb250ZW50O1xyXG5cclxuICAgICAgICAgICAgdmFyIHJleiA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAkd2hhdCApIHtcclxuICAgICAgICAgICAgICAgIHJleiA9IHNlbGYuZ2V0Rml0UG9zKCBjdXJyZW50ICk7XHJcbiAgICAgICAgICAgICAgICByZXogPSBNYXRoLmFicyggJHdoYXQud2lkdGgoKSAtIHJlei53aWR0aCApID4gMSAgfHwgTWF0aC5hYnMoICR3aGF0LmhlaWdodCgpIC0gcmV6LmhlaWdodCApID4gMTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXo7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBMb2FkIGNvbnRlbnQgaW50byB0aGUgc2xpZGVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgbG9hZFNsaWRlIDogZnVuY3Rpb24oIHNsaWRlICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCB0eXBlLCAkc2xpZGU7XHJcbiAgICAgICAgICAgIHZhciBhamF4TG9hZDtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2xpZGUuaXNMb2FkaW5nICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNsaWRlLmlzTG9hZGVkICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzbGlkZS5pc0xvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCAnYmVmb3JlTG9hZCcsIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICB0eXBlICAgPSBzbGlkZS50eXBlO1xyXG4gICAgICAgICAgICAkc2xpZGUgPSBzbGlkZS4kc2xpZGU7XHJcblxyXG4gICAgICAgICAgICAkc2xpZGVcclxuICAgICAgICAgICAgICAgIC5vZmYoICdyZWZyZXNoJyApXHJcbiAgICAgICAgICAgICAgICAudHJpZ2dlciggJ29uUmVzZXQnIClcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS0nICsgKCB0eXBlIHx8ICd1bmtub3duJyApIClcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggc2xpZGUub3B0cy5zbGlkZUNsYXNzICk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgY29udGVudCBkZXBlbmRpbmcgb24gdGhlIHR5cGVcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoIHR5cGUgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW1hZ2UnOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEltYWdlKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2lmcmFtZSc6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0SWZyYW1lKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2h0bWwnOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldENvbnRlbnQoIHNsaWRlLCBzbGlkZS5zcmMgfHwgc2xpZGUuY29udGVudCApO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2lubGluZSc6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggJCggc2xpZGUuc3JjICkubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldENvbnRlbnQoIHNsaWRlLCAkKCBzbGlkZS5zcmMgKSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEVycm9yKCBzbGlkZSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdhamF4JzpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zaG93TG9hZGluZyggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYWpheExvYWQgPSAkLmFqYXgoICQuZXh0ZW5kKCB7fSwgc2xpZGUub3B0cy5hamF4LnNldHRpbmdzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA6IHNsaWRlLnNyYyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uICggZGF0YSwgdGV4dFN0YXR1cyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRleHRTdGF0dXMgPT09ICdzdWNjZXNzJyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldENvbnRlbnQoIHNsaWRlLCBkYXRhICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA6IGZ1bmN0aW9uICgganFYSFIsIHRleHRTdGF0dXMgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBqcVhIUiAmJiB0ZXh0U3RhdHVzICE9PSAnYWJvcnQnICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0RXJyb3IoIHNsaWRlICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2xpZGUub25lKCAnb25SZXNldCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWpheExvYWQuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEVycm9yKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBVc2UgdGh1bWJuYWlsIGltYWdlLCBpZiBwb3NzaWJsZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNldEltYWdlIDogZnVuY3Rpb24oIHNsaWRlICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgICA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBzcmNzZXQgPSBzbGlkZS5vcHRzLnNyY3NldCB8fCBzbGlkZS5vcHRzLmltYWdlLnNyY3NldDtcclxuXHJcbiAgICAgICAgICAgIHZhciBmb3VuZCwgdGVtcCwgcHhSYXRpbywgd2luZG93V2lkdGg7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIFwic3Jjc2V0XCIsIHRoZW4gd2UgbmVlZCB0byBmaW5kIG1hdGNoaW5nIFwic3JjXCIgdmFsdWUuXHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5LCBiZWNhdXNlIHdoZW4geW91IHNldCBhbiBzcmMgYXR0cmlidXRlLCB0aGUgYnJvd3NlciB3aWxsIHByZWxvYWQgdGhlIGltYWdlXHJcbiAgICAgICAgICAgIC8vIGJlZm9yZSBhbnkgamF2YXNjcmlwdCBvciBldmVuIENTUyBpcyBhcHBsaWVkLlxyXG4gICAgICAgICAgICBpZiAoIHNyY3NldCApIHtcclxuICAgICAgICAgICAgICAgIHB4UmF0aW8gICAgID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcclxuICAgICAgICAgICAgICAgIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggICogcHhSYXRpbztcclxuXHJcbiAgICAgICAgICAgICAgICB0ZW1wID0gc3Jjc2V0LnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uICggZWwgKSB7XHJcbiAgICAgICAgICAgIFx0XHR2YXIgcmV0ID0ge307XHJcblxyXG4gICAgICAgICAgICBcdFx0ZWwudHJpbSgpLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoIGVsLCBpICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUludCggZWwuc3Vic3RyaW5nKDAsIGVsLmxlbmd0aCAtIDEpLCAxMCApO1xyXG5cclxuICAgICAgICAgICAgXHRcdFx0aWYgKCBpID09PSAwICkge1xyXG4gICAgICAgICAgICBcdFx0XHRcdHJldHVybiAoIHJldC51cmwgPSBlbCApO1xyXG4gICAgICAgICAgICBcdFx0XHR9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbHVlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0LnZhbHVlICAgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wb3N0Zml4ID0gZWxbIGVsLmxlbmd0aCAtIDEgXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgXHRcdH0pO1xyXG5cclxuICAgICAgICAgICAgXHRcdHJldHVybiByZXQ7XHJcbiAgICAgICAgICAgIFx0fSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU29ydCBieSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgdGVtcC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhLnZhbHVlIC0gYi52YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIE9rLCBub3cgd2UgaGF2ZSBhbiBhcnJheSBvZiBhbGwgc3Jjc2V0IHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGogPSAwOyBqIDwgdGVtcC5sZW5ndGg7IGorKyApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSB0ZW1wWyBqIF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggKCBlbC5wb3N0Zml4ID09PSAndycgJiYgZWwudmFsdWUgPj0gd2luZG93V2lkdGggKSB8fCAoIGVsLnBvc3RmaXggPT09ICd4JyAmJiBlbC52YWx1ZSA+PSBweFJhdGlvICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBub3QgZm91bmQsIHRha2UgdGhlIGxhc3Qgb25lXHJcbiAgICAgICAgICAgICAgICBpZiAoICFmb3VuZCAmJiB0ZW1wLmxlbmd0aCApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRlbXBbIHRlbXAubGVuZ3RoIC0gMSBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggZm91bmQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuc3JjID0gZm91bmQudXJsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGRlZmF1bHQgd2lkdGgvaGVpZ2h0IHZhbHVlcywgd2UgY2FuIGNhbGN1bGF0ZSBoZWlnaHQgZm9yIG1hdGNoaW5nIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2xpZGUud2lkdGggJiYgc2xpZGUuaGVpZ2h0ICYmIGZvdW5kLnBvc3RmaXggPT0gJ3cnICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5oZWlnaHQgPSAoIHNsaWRlLndpZHRoIC8gc2xpZGUuaGVpZ2h0ICkgKiBmb3VuZC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUud2lkdGggID0gZm91bmQudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgYmUgd3JhcHBlciBjb250YWluaW5nIGJvdGggZ2hvc3QgYW5kIGFjdHVhbCBpbWFnZVxyXG4gICAgICAgICAgICBzbGlkZS4kY29udGVudCA9ICQoJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1pbWFnZS13cmFwXCI+PC9kaXY+JylcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ2ZhbmN5Ym94LWlzLWhpZGRlbicgKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKCBzbGlkZS4kc2xpZGUgKTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgdGh1bWJuYWlsLCB3ZSBjYW4gZGlzcGxheSBpdCB3aGlsZSBhY3R1YWwgaW1hZ2UgaXMgbG9hZGluZ1xyXG4gICAgICAgICAgICAvLyBVc2VycyB3aWxsIG5vdCBzdGFyZSBhdCBibGFjayBzY3JlZW4gYW5kIGFjdHVhbCBpbWFnZSB3aWxsIGFwcGVhciBncmFkdWFsbHlcclxuICAgICAgICAgICAgaWYgKCBzbGlkZS5vcHRzLnByZWxvYWQgIT09IGZhbHNlICYmIHNsaWRlLm9wdHMud2lkdGggJiYgc2xpZGUub3B0cy5oZWlnaHQgJiYgKCBzbGlkZS5vcHRzLnRodW1iIHx8IHNsaWRlLm9wdHMuJHRodW1iICkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgc2xpZGUud2lkdGggID0gc2xpZGUub3B0cy53aWR0aDtcclxuICAgICAgICAgICAgICAgIHNsaWRlLmhlaWdodCA9IHNsaWRlLm9wdHMuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIHNsaWRlLiRnaG9zdCA9ICQoJzxpbWcgLz4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbmUoJ2Vycm9yJywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUuJGdob3N0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0QmlnSW1hZ2UoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uZSgnbG9hZCcsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZnRlckxvYWQoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEJpZ0ltYWdlKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ2ZhbmN5Ym94LWltYWdlJyApXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKCBzbGlkZS4kY29udGVudCApXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoICdzcmMnLCBzbGlkZS5vcHRzLnRodW1iIHx8IHNsaWRlLm9wdHMuJHRodW1iLmF0dHIoICdzcmMnICkgKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5zZXRCaWdJbWFnZSggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBmdWxsLXNpemUgaW1hZ2VcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNldEJpZ0ltYWdlIDogZnVuY3Rpb24gKCBzbGlkZSApIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgJGltZyA9ICQoJzxpbWcgLz4nKTtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlLiRpbWFnZSA9ICRpbWdcclxuICAgICAgICAgICAgICAgIC5vbmUoJ2Vycm9yJywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0RXJyb3IoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYXIgdGltZW91dCB0aGF0IGNoZWNrcyBpZiBsb2FkaW5nIGljb24gbmVlZHMgdG8gYmUgZGlzcGxheWVkXHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KCBzbGlkZS50aW1vdXRzICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLnRpbW91dHMgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNlbGYuaXNDbG9zaW5nICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS53aWR0aCAgPSB0aGlzLm5hdHVyYWxXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5oZWlnaHQgPSB0aGlzLm5hdHVyYWxIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2xpZGUub3B0cy5pbWFnZS5zcmNzZXQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbWcuYXR0ciggJ3NpemVzJywgJzEwMHZ3JyApLmF0dHIoICdzcmNzZXQnLCBzbGlkZS5vcHRzLmltYWdlLnNyY3NldCApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5oaWRlTG9hZGluZyggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzbGlkZS4kZ2hvc3QgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS50aW1vdXRzID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLnRpbW91dHMgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLiRnaG9zdC5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBNYXRoLm1pbiggMzAwLCBNYXRoLm1heCggMTAwMCwgc2xpZGUuaGVpZ2h0IC8gMTYwMCApICkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZnRlckxvYWQoIHNsaWRlICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdmYW5jeWJveC1pbWFnZScgKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIHNsaWRlLnNyYylcclxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyggc2xpZGUuJGNvbnRlbnQgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggKCAkaW1nWzBdLmNvbXBsZXRlIHx8ICRpbWdbMF0ucmVhZHlTdGF0ZSA9PSBcImNvbXBsZXRlXCIgKSAmJiAkaW1nWzBdLm5hdHVyYWxXaWR0aCAmJiAkaW1nWzBdLm5hdHVyYWxIZWlnaHQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICRpbWcudHJpZ2dlciggJ2xvYWQnICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYoICRpbWdbMF0uZXJyb3IgKSB7XHJcbiAgICAgICAgICAgICAgICAgJGltZy50cmlnZ2VyKCAnZXJyb3InICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIHNsaWRlLnRpbW91dHMgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICggISRpbWdbMF0uY29tcGxldGUgJiYgIXNsaWRlLmhhc0Vycm9yICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNob3dMb2FkaW5nKCBzbGlkZSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGlmcmFtZSB3cmFwcGVyLCBpZnJhbWUgYW5kIGJpbmRpbmdzXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNldElmcmFtZSA6IGZ1bmN0aW9uKCBzbGlkZSApIHtcclxuICAgICAgICAgICAgdmFyIHNlbGZcdD0gdGhpcyxcclxuICAgICAgICAgICAgICAgIG9wdHMgICAgPSBzbGlkZS5vcHRzLmlmcmFtZSxcclxuICAgICAgICAgICAgICAgICRzbGlkZVx0PSBzbGlkZS4kc2xpZGUsXHJcbiAgICAgICAgICAgICAgICAkaWZyYW1lO1xyXG5cclxuICAgICAgICAgICAgc2xpZGUuJGNvbnRlbnQgPSAkKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtY29udGVudCcgKyAoIG9wdHMucHJlbG9hZCA/ICcgZmFuY3lib3gtaXMtaGlkZGVuJyA6ICcnICkgKyAnXCI+PC9kaXY+JylcclxuICAgICAgICAgICAgICAgIC5jc3MoIG9wdHMuY3NzIClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyggJHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAkaWZyYW1lID0gJCggb3B0cy50cGwucmVwbGFjZSgvXFx7cm5kXFx9L2csIG5ldyBEYXRlKCkuZ2V0VGltZSgpKSApXHJcbiAgICAgICAgICAgICAgICAuYXR0ciggb3B0cy5hdHRyIClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyggc2xpZGUuJGNvbnRlbnQgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggb3B0cy5wcmVsb2FkICkge1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuc2hvd0xvYWRpbmcoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgaXQgaXMgbm90IGFsd2F5cyBwb3NzaWJsZSB0byBkZXRlcm1pbmUgaWYgaWZyYW1lIGlzIHN1Y2Nlc3NmdWxseSBsb2FkZWRcclxuICAgICAgICAgICAgICAgIC8vIChkdWUgdG8gYnJvd3NlciBzZWN1cml0eSBwb2xpY3kpXHJcblxyXG4gICAgICAgICAgICAgICAgJGlmcmFtZS5vbignbG9hZC5mYiBlcnJvci5mYicsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSAxO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS4kc2xpZGUudHJpZ2dlciggJ3JlZnJlc2gnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWZ0ZXJMb2FkKCBzbGlkZSApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVjYWxjdWxhdGUgaWZyYW1lIGNvbnRlbnQgc2l6ZVxyXG4gICAgICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgICAgICRzbGlkZS5vbigncmVmcmVzaC5mYicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkd3JhcCA9IHNsaWRlLiRjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZVdpZHRoICA9IG9wdHMuY3NzLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZUhlaWdodCA9IG9wdHMuY3NzLmhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsV2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZW50cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGJvZHk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggJGlmcmFtZVswXS5pc1JlYWR5ICE9PSAxICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBjb250ZW50IGlzIGFjY2Vzc2libGUsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQgd2lsbCBmYWlsIGlmIGZyYW1lIGlzIG5vdCB3aXRoIHRoZSBzYW1lIG9yaWdpblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkY29udGVudHMgPSAkaWZyYW1lLmNvbnRlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRib2R5ICAgICA9ICRjb250ZW50cy5maW5kKCdib2R5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGRpbWVuc2lvbnMgZm9yIHRoZSB3cmFwcGVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAkYm9keSAmJiAkYm9keS5sZW5ndGggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGZyYW1lV2lkdGggPT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFdpZHRoID0gJGlmcmFtZVswXS5jb250ZW50V2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZVdpZHRoID0gTWF0aC5jZWlsKCAkYm9keS5vdXRlcldpZHRoKHRydWUpICsgKCAkd3JhcC53aWR0aCgpIC0gc2Nyb2xsV2lkdGggKSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVXaWR0aCArPSAkd3JhcC5vdXRlcldpZHRoKCkgLSAkd3JhcC5pbm5lcldpZHRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZnJhbWVIZWlnaHQgPT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lSGVpZ2h0ID0gTWF0aC5jZWlsKCAkYm9keS5vdXRlckhlaWdodCh0cnVlKSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVIZWlnaHQgKz0gJHdyYXAub3V0ZXJIZWlnaHQoKSAtICR3cmFwLmlubmVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2l6ZSB3cmFwcGVyIHRvIGZpdCBpZnJhbWUgY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGZyYW1lV2lkdGggKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd3JhcC53aWR0aCggZnJhbWVXaWR0aCApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGZyYW1lSGVpZ2h0ICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdyYXAuaGVpZ2h0KCBmcmFtZUhlaWdodCApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkd3JhcC5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LWlzLWhpZGRlbicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hZnRlckxvYWQoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkaWZyYW1lLmF0dHIoICdzcmMnLCBzbGlkZS5zcmMgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2xpZGUub3B0cy5zbWFsbEJ0biA9PT0gdHJ1ZSApIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlLiRjb250ZW50LnByZXBlbmQoIHNlbGYudHJhbnNsYXRlKCBzbGlkZSwgc2xpZGUub3B0cy5idG5UcGwuc21hbGxCdG4gKSApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgaWZyYW1lIGlmIGNsb3Npbmcgb3IgY2hhbmdpbmcgZ2FsbGVyeSBpdGVtXHJcbiAgICAgICAgICAgICRzbGlkZS5vbmUoICdvblJlc2V0JywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaGVscHMgSUUgbm90IHRvIHRocm93IGVycm9ycyB3aGVuIGNsb3NpbmdcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoIHRoaXMgKS5maW5kKCAnaWZyYW1lJyApLmhpZGUoKS5hdHRyKCAnc3JjJywgJy8vYWJvdXQ6YmxhbmsnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoIGlnbm9yZSApIHt9XHJcblxyXG4gICAgICAgICAgICAgICAgJCggdGhpcyApLmVtcHR5KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2xpZGUuaXNMb2FkZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gV3JhcCBhbmQgYXBwZW5kIGNvbnRlbnQgdG8gdGhlIHNsaWRlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgc2V0Q29udGVudCA6IGZ1bmN0aW9uICggc2xpZGUsIGNvbnRlbnQgKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNlbGYuaXNDbG9zaW5nICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxmLmhpZGVMb2FkaW5nKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgc2xpZGUuJHNsaWRlLmVtcHR5KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGlzUXVlcnkoIGNvbnRlbnQgKSAmJiBjb250ZW50LnBhcmVudCgpLmxlbmd0aCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBjb250ZW50IGlzIGEgalF1ZXJ5IG9iamVjdCwgdGhlbiBpdCB3aWxsIGJlIG1vdmVkIHRvIHRoZSBzbGlkZS5cclxuICAgICAgICAgICAgICAgIC8vIFRoZSBwbGFjZWhvbGRlciBpcyBjcmVhdGVkIHNvIHdlIHdpbGwga25vdyB3aGVyZSB0byBwdXQgaXQgYmFjay5cclxuICAgICAgICAgICAgICAgIC8vIElmIHVzZXIgaXMgbmF2aWdhdGluZyBnYWxsZXJ5IGZhc3QsIHRoZW4gdGhlIGNvbnRlbnQgbWlnaHQgYmUgYWxyZWFkeSBpbnNpZGUgZmFuY3lCb3hcclxuICAgICAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgY29udGVudCBpcyBub3QgYWxyZWFkeSBtb3ZlZCB0byBmYW5jeUJveFxyXG4gICAgICAgICAgICAgICAgY29udGVudC5wYXJlbnQoICcuZmFuY3lib3gtc2xpZGUtLWlubGluZScgKS50cmlnZ2VyKCAnb25SZXNldCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGVtcG9yYXJ5IGVsZW1lbnQgbWFya2luZyBvcmlnaW5hbCBwbGFjZSBvZiB0aGUgY29udGVudFxyXG4gICAgICAgICAgICAgICAgc2xpZGUuJHBsYWNlaG9sZGVyID0gJCggJzxkaXY+PC9kaXY+JyApLmhpZGUoKS5pbnNlcnRBZnRlciggY29udGVudCApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBjb250ZW50IGlzIHZpc2libGVcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQuY3NzKCdkaXNwbGF5JywgJ2lubGluZS1ibG9jaycpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICggIXNsaWRlLmhhc0Vycm9yICkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIElmIGNvbnRlbnQgaXMganVzdCBhIHBsYWluIHRleHQsIHRyeSB0byBjb252ZXJ0IGl0IHRvIGh0bWxcclxuICAgICAgICAgICAgICAgIGlmICggJC50eXBlKCBjb250ZW50ICkgPT09ICdzdHJpbmcnICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSAkKCc8ZGl2PicpLmFwcGVuZCggJC50cmltKCBjb250ZW50ICkgKS5jb250ZW50cygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIHRleHQgbm9kZSwgdGhlbiBhZGQgd3JhcHBpbmcgZWxlbWVudCB0byBtYWtlIHZlcnRpY2FsIGFsaWdubWVudCB3b3JrXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjb250ZW50WzBdLm5vZGVUeXBlID09PSAzICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gJCgnPGRpdj4nKS5odG1sKCBjb250ZW50ICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIElmIFwiZmlsdGVyXCIgb3B0aW9uIGlzIHByb3ZpZGVkLCB0aGVuIGZpbHRlciBjb250ZW50XHJcbiAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLm9wdHMuZmlsdGVyICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSAkKCc8ZGl2PicpLmh0bWwoIGNvbnRlbnQgKS5maW5kKCBzbGlkZS5vcHRzLmZpbHRlciApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2xpZGUuJHNsaWRlLm9uZSgnb25SZXNldCcsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBQdXQgY29udGVudCBiYWNrXHJcbiAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLiRwbGFjZWhvbGRlciApIHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS4kcGxhY2Vob2xkZXIuYWZ0ZXIoIGNvbnRlbnQuaGlkZSgpICkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLiRwbGFjZWhvbGRlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGN1c3RvbSBjbG9zZSBidXR0b25cclxuICAgICAgICAgICAgICAgIGlmICggc2xpZGUuJHNtYWxsQnRuICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLiRzbWFsbEJ0bi5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuJHNtYWxsQnRuID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgY29udGVudCBhbmQgbWFyayBzbGlkZSBhcyBub3QgbG9hZGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoICFzbGlkZS5oYXNFcnJvciApIHtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmVtcHR5KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLmlzTG9hZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlLiRjb250ZW50ID0gJCggY29udGVudCApLmFwcGVuZFRvKCBzbGlkZS4kc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJMb2FkKCBzbGlkZSApO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIERpc3BsYXkgZXJyb3IgbWVzc2FnZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBzZXRFcnJvciA6IGZ1bmN0aW9uICggc2xpZGUgKSB7XHJcblxyXG4gICAgICAgICAgICBzbGlkZS5oYXNFcnJvciA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBzbGlkZS4kc2xpZGUucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1zbGlkZS0tJyArIHNsaWRlLnR5cGUgKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q29udGVudCggc2xpZGUsIHRoaXMudHJhbnNsYXRlKCBzbGlkZSwgc2xpZGUub3B0cy5lcnJvclRwbCApICk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBTaG93IGxvYWRpbmcgaWNvbiBpbnNpZGUgdGhlIHNsaWRlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBzaG93TG9hZGluZyA6IGZ1bmN0aW9uKCBzbGlkZSApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHNsaWRlID0gc2xpZGUgfHwgc2VsZi5jdXJyZW50O1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzbGlkZSAmJiAhc2xpZGUuJHNwaW5uZXIgKSB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZS4kc3Bpbm5lciA9ICQoIHNlbGYub3B0cy5zcGlubmVyVHBsICkuYXBwZW5kVG8oIHNsaWRlLiRzbGlkZSApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBsb2FkaW5nIGljb24gZnJvbSB0aGUgc2xpZGVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGhpZGVMb2FkaW5nIDogZnVuY3Rpb24oIHNsaWRlICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgc2xpZGUgPSBzbGlkZSB8fCBzZWxmLmN1cnJlbnQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNsaWRlICYmIHNsaWRlLiRzcGlubmVyICkge1xyXG4gICAgICAgICAgICAgICAgc2xpZGUuJHNwaW5uZXIucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHNsaWRlLiRzcGlubmVyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBBZGp1c3RtZW50cyBhZnRlciBzbGlkZSBjb250ZW50IGhhcyBiZWVuIGxvYWRlZFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGFmdGVyTG9hZCA6IGZ1bmN0aW9uKCBzbGlkZSApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIGlmICggc2VsZi5pc0Nsb3NpbmcgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNsaWRlLmlzTG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzbGlkZS5pc0xvYWRlZCAgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCAnYWZ0ZXJMb2FkJywgc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuaGlkZUxvYWRpbmcoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNsaWRlLm9wdHMuc21hbGxCdG4gJiYgIXNsaWRlLiRzbWFsbEJ0biApIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlLiRzbWFsbEJ0biA9ICQoIHNlbGYudHJhbnNsYXRlKCBzbGlkZSwgc2xpZGUub3B0cy5idG5UcGwuc21hbGxCdG4gKSApLmFwcGVuZFRvKCBzbGlkZS4kY29udGVudC5maWx0ZXIoJ2Rpdixmb3JtJykuZmlyc3QoKSApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNsaWRlLm9wdHMucHJvdGVjdCAmJiBzbGlkZS4kY29udGVudCAmJiAhc2xpZGUuaGFzRXJyb3IgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRGlzYWJsZSByaWdodCBjbGlja1xyXG4gICAgICAgICAgICAgICAgc2xpZGUuJGNvbnRlbnQub24oICdjb250ZXh0bWVudS5mYicsIGZ1bmN0aW9uKCBlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICBpZiAoIGUuYnV0dG9uID09IDIgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgZmFrZSBlbGVtZW50IG9uIHRvcCBvZiB0aGUgaW1hZ2VcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgbWFrZXMgYSBiaXQgaGFyZGVyIGZvciB1c2VyIHRvIHNlbGVjdCBpbWFnZVxyXG4gICAgICAgICAgICAgICAgaWYgKCBzbGlkZS50eXBlID09PSAnaW1hZ2UnICkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtc3BhY2ViYWxsXCI+PC9kaXY+JyApLmFwcGVuZFRvKCBzbGlkZS4kY29udGVudCApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi5yZXZlYWxDb250ZW50KCBzbGlkZSApO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gTWFrZSBjb250ZW50IHZpc2libGVcclxuICAgICAgICAvLyBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgcmlnaHQgYWZ0ZXIgY29udGVudCBoYXMgYmVlbiBsb2FkZWQgb3JcclxuICAgICAgICAvLyB1c2VyIG5hdmlnYXRlcyBnYWxsZXJ5IGFuZCB0cmFuc2l0aW9uIHNob3VsZCBzdGFydFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICByZXZlYWxDb250ZW50IDogZnVuY3Rpb24oIHNsaWRlICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgICA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciAkc2xpZGUgPSBzbGlkZS4kc2xpZGU7XHJcblxyXG4gICAgICAgICAgICB2YXIgZWZmZWN0LCBlZmZlY3RDbGFzc05hbWUsIGR1cmF0aW9uLCBvcGFjaXR5LCBlbmQsIHN0YXJ0ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBlZmZlY3QgICA9IHNsaWRlLm9wdHNbIHNlbGYuZmlyc3RSdW4gPyAnYW5pbWF0aW9uRWZmZWN0JyAgIDogJ3RyYW5zaXRpb25FZmZlY3QnIF07XHJcbiAgICAgICAgICAgIGR1cmF0aW9uID0gc2xpZGUub3B0c1sgc2VsZi5maXJzdFJ1biA/ICdhbmltYXRpb25EdXJhdGlvbicgOiAndHJhbnNpdGlvbkR1cmF0aW9uJyBdO1xyXG5cclxuICAgICAgICAgICAgZHVyYXRpb24gPSBwYXJzZUludCggc2xpZGUuZm9yY2VkRHVyYXRpb24gPT09IHVuZGVmaW5lZCA/IGR1cmF0aW9uIDogc2xpZGUuZm9yY2VkRHVyYXRpb24sIDEwICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNsaWRlLmlzTW92ZWQgfHwgc2xpZGUucG9zICE9PSBzZWxmLmN1cnJQb3MgfHwgIWR1cmF0aW9uICkge1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIGNhbiB6b29tXHJcbiAgICAgICAgICAgIGlmICggZWZmZWN0ID09PSAnem9vbScgJiYgISggc2xpZGUucG9zID09PSBzZWxmLmN1cnJQb3MgJiYgZHVyYXRpb24gJiYgc2xpZGUudHlwZSA9PT0gJ2ltYWdlJyAmJiAhc2xpZGUuaGFzRXJyb3IgJiYgKCBzdGFydCA9IHNlbGYuZ2V0VGh1bWJQb3MoIHNsaWRlICkgKSApICkge1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0ID0gJ2ZhZGUnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBab29tIGFuaW1hdGlvblxyXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgaWYgKCBlZmZlY3QgPT09ICd6b29tJyApIHtcclxuICAgICAgICAgICAgICAgIGVuZCA9IHNlbGYuZ2V0Rml0UG9zKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGVuZC5zY2FsZVggPSBlbmQud2lkdGggIC8gc3RhcnQud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBlbmQuc2NhbGVZID0gZW5kLmhlaWdodCAvIHN0YXJ0LmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgZW5kLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGVuZC5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBhbmltYXRlIG9wYWNpdHlcclxuICAgICAgICAgICAgICAgIG9wYWNpdHkgPSBzbGlkZS5vcHRzLnpvb21PcGFjaXR5O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggb3BhY2l0eSA9PSAnYXV0bycgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eSA9IE1hdGguYWJzKCBzbGlkZS53aWR0aCAvIHNsaWRlLmhlaWdodCAtIHN0YXJ0LndpZHRoIC8gc3RhcnQuaGVpZ2h0ICkgPiAwLjE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBvcGFjaXR5ICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSAwLjE7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kLm9wYWNpdHkgICA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRHJhdyBpbWFnZSBhdCBzdGFydCBwb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoIHNsaWRlLiRjb250ZW50LnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtaXMtaGlkZGVuJyApLCBzdGFydCApO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcmNlUmVkcmF3KCBzbGlkZS4kY29udGVudCApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFN0YXJ0IGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKCBzbGlkZS4kY29udGVudCwgZW5kLCBkdXJhdGlvbiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZVNsaWRlKCBzbGlkZSApO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIFNpbXBseSBzaG93IGNvbnRlbnRcclxuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgaWYgKCAhZWZmZWN0ICkge1xyXG4gICAgICAgICAgICAgICAgZm9yY2VSZWRyYXcoICRzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNsaWRlLiRjb250ZW50LnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtaXMtaGlkZGVuJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggc2xpZGUucG9zID09PSBzZWxmLmN1cnJQb3MgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJC5mYW5jeWJveC5zdG9wKCAkc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgIGVmZmVjdENsYXNzTmFtZSA9ICdmYW5jeWJveC1hbmltYXRlZCBmYW5jeWJveC1zbGlkZS0tJyArICggc2xpZGUucG9zID49IHNlbGYucHJldlBvcyA/ICduZXh0JyA6ICdwcmV2aW91cycgKSArICcgZmFuY3lib3gtZngtJyArIGVmZmVjdDtcclxuXHJcbiAgICAgICAgICAgICRzbGlkZS5yZW1vdmVBdHRyKCAnc3R5bGUnICkucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1zbGlkZS0tY3VycmVudCBmYW5jeWJveC1zbGlkZS0tbmV4dCBmYW5jeWJveC1zbGlkZS0tcHJldmlvdXMnICkuYWRkQ2xhc3MoIGVmZmVjdENsYXNzTmFtZSApO1xyXG5cclxuICAgICAgICAgICAgc2xpZGUuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1pcy1oaWRkZW4nICk7XHJcblxyXG4gICAgICAgICAgICAvL0ZvcmNlIHJlZmxvdyBmb3IgQ1NTMyB0cmFuc2l0aW9uc1xyXG4gICAgICAgICAgICBmb3JjZVJlZHJhdyggJHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoICRzbGlkZSwgJ2ZhbmN5Ym94LXNsaWRlLS1jdXJyZW50JywgZHVyYXRpb24sIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICRzbGlkZS5yZW1vdmVDbGFzcyggZWZmZWN0Q2xhc3NOYW1lICkucmVtb3ZlQXR0ciggJ3N0eWxlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggc2xpZGUucG9zID09PSBzZWxmLmN1cnJQb3MgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiB3ZSBjYW4gYW5kIGhhdmUgdG8gem9vbSBmcm9tIHRodW1ibmFpbFxyXG4gICAgICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGdldFRodW1iUG9zIDogZnVuY3Rpb24oIHNsaWRlICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgcmV6ICA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZWxlbWVudCBpcyBpbnNpZGUgdGhlIHZpZXdwb3J0IGJ5IGF0IGxlYXN0IDEgcGl4ZWxcclxuICAgICAgICAgICAgdmFyIGlzRWxlbWVudFZpc2libGUgPSBmdW5jdGlvbiggJGVsICkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSAkZWxbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRSZWN0cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB2aXNpYmxlSW5BbGxQYXJlbnRzO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlICggZWxlbWVudC5wYXJlbnRFbGVtZW50ICE9PSBudWxsICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICggJChlbGVtZW50LnBhcmVudEVsZW1lbnQpLmNzcygnb3ZlcmZsb3cnKSA9PT0gJ2hpZGRlbicgIHx8ICQoZWxlbWVudC5wYXJlbnRFbGVtZW50KS5jc3MoJ292ZXJmbG93JykgPT09ICdhdXRvJyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50UmVjdHMucHVzaChlbGVtZW50LnBhcmVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2aXNpYmxlSW5BbGxQYXJlbnRzID0gcGFyZW50UmVjdHMuZXZlcnkoZnVuY3Rpb24ocGFyZW50UmVjdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpc2libGVQaXhlbFggPSBNYXRoLm1pbihlbGVtZW50UmVjdC5yaWdodCwgcGFyZW50UmVjdC5yaWdodCkgLSBNYXRoLm1heChlbGVtZW50UmVjdC5sZWZ0LCBwYXJlbnRSZWN0LmxlZnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2aXNpYmxlUGl4ZWxZID0gTWF0aC5taW4oZWxlbWVudFJlY3QuYm90dG9tLCBwYXJlbnRSZWN0LmJvdHRvbSkgLSBNYXRoLm1heChlbGVtZW50UmVjdC50b3AsIHBhcmVudFJlY3QudG9wKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpc2libGVQaXhlbFggPiAwICYmIHZpc2libGVQaXhlbFkgPiAwO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2libGVJbkFsbFBhcmVudHMgJiZcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50UmVjdC5ib3R0b20gPiAwICYmIGVsZW1lbnRSZWN0LnJpZ2h0ID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRSZWN0LmxlZnQgPCAkKHdpbmRvdykud2lkdGgoKSAmJiBlbGVtZW50UmVjdC50b3AgPCAkKHdpbmRvdykuaGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YXIgJHRodW1iICAgPSBzbGlkZS5vcHRzLiR0aHVtYjtcclxuICAgICAgICAgICAgdmFyIHRodW1iUG9zID0gJHRodW1iID8gJHRodW1iLm9mZnNldCgpIDogMDtcclxuICAgICAgICAgICAgdmFyIHNsaWRlUG9zO1xyXG5cclxuICAgICAgICAgICAgaWYgKCB0aHVtYlBvcyAmJiAkdGh1bWJbMF0ub3duZXJEb2N1bWVudCA9PT0gZG9jdW1lbnQgJiYgaXNFbGVtZW50VmlzaWJsZSggJHRodW1iICkgKSB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZVBvcyA9IHNlbGYuJHJlZnMuc3RhZ2Uub2Zmc2V0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV6ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcCAgICA6IHRodW1iUG9zLnRvcCAgLSBzbGlkZVBvcy50b3AgICsgcGFyc2VGbG9hdCggJHRodW1iLmNzcyggXCJib3JkZXItdG9wLXdpZHRoXCIgKSB8fCAwICksXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdCAgIDogdGh1bWJQb3MubGVmdCAtIHNsaWRlUG9zLmxlZnQgKyBwYXJzZUZsb2F0KCAkdGh1bWIuY3NzKCBcImJvcmRlci1sZWZ0LXdpZHRoXCIgKSB8fCAwICksXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggIDogJHRodW1iLndpZHRoKCksXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0IDogJHRodW1iLmhlaWdodCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlWCA6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVZIDogMVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlejtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gRmluYWwgYWRqdXN0bWVudHMgYWZ0ZXIgY3VycmVudCBnYWxsZXJ5IGl0ZW0gaXMgbW92ZWQgdG8gcG9zaXRpb25cclxuICAgICAgICAvLyBhbmQgaXRgcyBjb250ZW50IGlzIGxvYWRlZFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBjb21wbGV0ZSA6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIHZhciBzbGlkZXMgID0ge307XHJcblxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQuaXNNb3ZlZCB8fCAhY3VycmVudC5pc0xvYWRlZCB8fCBjdXJyZW50LmlzQ29tcGxldGUgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnQuaXNDb21wbGV0ZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LiRzbGlkZS5zaWJsaW5ncygpLnRyaWdnZXIoICdvblJlc2V0JyApO1xyXG5cclxuICAgICAgICAgICAgLy8gVHJpZ2dlciBhbnkgQ1NTMyB0cmFuc2l0b24gaW5zaWRlIHRoZSBzbGlkZVxyXG4gICAgICAgICAgICBmb3JjZVJlZHJhdyggY3VycmVudC4kc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnQuJHNsaWRlLmFkZENsYXNzKCAnZmFuY3lib3gtc2xpZGUtLWNvbXBsZXRlJyApO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHVubmVjZXNzYXJ5IHNsaWRlc1xyXG4gICAgICAgICAgICAkLmVhY2goIHNlbGYuc2xpZGVzLCBmdW5jdGlvbigga2V5LCBzbGlkZSApIHtcclxuICAgICAgICAgICAgICAgIGlmICggc2xpZGUucG9zID49IHNlbGYuY3VyclBvcyAtIDEgJiYgc2xpZGUucG9zIDw9IHNlbGYuY3VyclBvcyArIDEgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzWyBzbGlkZS5wb3MgXSA9IHNsaWRlO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHNsaWRlICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnN0b3AoIHNsaWRlLiRzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS4kc2xpZGUub2ZmKCkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5zbGlkZXMgPSBzbGlkZXM7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUN1cnNvcigpO1xyXG5cclxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCAnYWZ0ZXJTaG93JyApO1xyXG5cclxuICAgICAgICAgICAgLy8gVHJ5IHRvIGZvY3VzIG9uIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudFxyXG4gICAgICAgICAgICBpZiAoICQoIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgKS5pcyggJ1tkaXNhYmxlZF0nICkgfHwgKCBjdXJyZW50Lm9wdHMuYXV0b0ZvY3VzICYmICEoIGN1cnJlbnQudHlwZSA9PSAnaW1hZ2UnIHx8IGN1cnJlbnQudHlwZSA9PT0gJ2lmcmFtZScgKSApICkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5mb2N1cygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBQcmVsb2FkIG5leHQgYW5kIHByZXZpb3VzIHNsaWRlc1xyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHByZWxvYWQgOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgbmV4dCwgcHJldjtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2VsZi5ncm91cC5sZW5ndGggPCAyICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBuZXh0ICA9IHNlbGYuc2xpZGVzWyBzZWxmLmN1cnJQb3MgKyAxIF07XHJcbiAgICAgICAgICAgIHByZXYgID0gc2VsZi5zbGlkZXNbIHNlbGYuY3VyclBvcyAtIDEgXTtcclxuXHJcbiAgICAgICAgICAgIGlmICggbmV4dCAmJiBuZXh0LnR5cGUgPT09ICdpbWFnZScgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvYWRTbGlkZSggbmV4dCApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIHByZXYgJiYgcHJldi50eXBlID09PSAnaW1hZ2UnICkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sb2FkU2xpZGUoIHByZXYgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYW5kIGZvY3VzIG9uIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgZm9jdXMgOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIHZhciAkZWw7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHRoaXMuaXNDbG9zaW5nICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQgJiYgY3VycmVudC5pc0NvbXBsZXRlICkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIExvb2sgZm9yIGZpcnN0IGlucHV0IHdpdGggYXV0b2ZvY3VzIGF0dHJpYnV0ZVxyXG4gICAgICAgICAgICAgICAgJGVsID0gY3VycmVudC4kc2xpZGUuZmluZCgnaW5wdXRbYXV0b2ZvY3VzXTplbmFibGVkOnZpc2libGU6Zmlyc3QnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICEkZWwubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgICAgICRlbCA9IGN1cnJlbnQuJHNsaWRlLmZpbmQoJ2J1dHRvbiw6aW5wdXQsW3RhYmluZGV4XSxhJykuZmlsdGVyKCc6ZW5hYmxlZDp2aXNpYmxlOmZpcnN0Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRlbCA9ICRlbCAmJiAkZWwubGVuZ3RoID8gJGVsIDogdGhpcy4kcmVmcy5jb250YWluZXI7XHJcblxyXG4gICAgICAgICAgICAkZWwuZm9jdXMoKTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQWN0aXZhdGVzIGN1cnJlbnQgaW5zdGFuY2UgLSBicmluZ3MgY29udGFpbmVyIHRvIHRoZSBmcm9udCBhbmQgZW5hYmxlcyBrZXlib2FyZCxcclxuICAgICAgICAvLyBub3RpZmllcyBvdGhlciBpbnN0YW5jZXMgYWJvdXQgZGVhY3RpdmF0aW5nXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGFjdGl2YXRlIDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAvLyBEZWFjdGl2YXRlIGFsbCBpbnN0YW5jZXNcclxuICAgICAgICAgICAgJCggJy5mYW5jeWJveC1jb250YWluZXInICkuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSAkKHRoaXMpLmRhdGEoICdGYW5jeUJveCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTa2lwIHNlbGYgYW5kIGNsb3NpbmcgaW5zdGFuY2VzXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuaWQgIT09IHNlbGYuaWQgJiYgIWluc3RhbmNlLmlzQ2xvc2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnRyaWdnZXIoICdvbkRlYWN0aXZhdGUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnJlbW92ZUV2ZW50cygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc1Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5pc1Zpc2libGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzZWxmLmN1cnJlbnQgfHwgc2VsZi5pc0lkbGUgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlQ29udHJvbHMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCAnb25BY3RpdmF0ZScgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuYWRkRXZlbnRzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFN0YXJ0IGNsb3NpbmcgcHJvY2VkdXJlXHJcbiAgICAgICAgLy8gVGhpcyB3aWxsIHN0YXJ0IFwiem9vbS1vdXRcIiBhbmltYXRpb24gaWYgbmVlZGVkIGFuZCBjbGVhbiBldmVyeXRoaW5nIHVwIGFmdGVyd2FyZHNcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgY2xvc2UgOiBmdW5jdGlvbiggZSwgZCApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmICAgID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgZWZmZWN0LCBkdXJhdGlvbjtcclxuICAgICAgICAgICAgdmFyICR3aGF0LCBvcGFjaXR5LCBzdGFydCwgZW5kO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRvbmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuY2xlYW5VcCggZSApO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzZWxmLmlzQ2xvc2luZyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi5pc0Nsb3NpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgYmVmb3JlQ2xvc2UgY2FsbGJhY2sgcHJldmVudHMgY2xvc2luZywgbWFrZSBzdXJlIGNvbnRlbnQgaXMgY2VudGVyZWRcclxuICAgICAgICAgICAgaWYgKCBzZWxmLnRyaWdnZXIoICdiZWZvcmVDbG9zZScsIGUgKSA9PT0gZmFsc2UgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmlzQ2xvc2luZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBldmVudHNcclxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGluc3RhbmNlcywgdGhleSB3aWxsIGJlIHNldCBhZ2FpbiBieSBcImFjdGl2YXRlXCIgbWV0aG9kXHJcbiAgICAgICAgICAgIHNlbGYucmVtb3ZlRXZlbnRzKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQudGltb3V0cyApIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCggY3VycmVudC50aW1vdXRzICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICR3aGF0ICAgID0gY3VycmVudC4kY29udGVudDtcclxuICAgICAgICAgICAgZWZmZWN0ICAgPSBjdXJyZW50Lm9wdHMuYW5pbWF0aW9uRWZmZWN0O1xyXG4gICAgICAgICAgICBkdXJhdGlvbiA9ICQuaXNOdW1lcmljKCBkICkgPyBkIDogKCBlZmZlY3QgPyBjdXJyZW50Lm9wdHMuYW5pbWF0aW9uRHVyYXRpb24gOiAwICk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgb3RoZXIgc2xpZGVzXHJcbiAgICAgICAgICAgIGN1cnJlbnQuJHNsaWRlLm9mZiggdHJhbnNpdGlvbkVuZCApLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtc2xpZGUtLWNvbXBsZXRlIGZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91cyBmYW5jeWJveC1hbmltYXRlZCcgKTtcclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnQuJHNsaWRlLnNpYmxpbmdzKCkudHJpZ2dlciggJ29uUmVzZXQnICkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGFuaW1hdGlvbnNcclxuICAgICAgICAgICAgaWYgKCBkdXJhdGlvbiApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtaXMtb3BlbicgKS5hZGRDbGFzcyggJ2ZhbmN5Ym94LWlzLWNsb3NpbmcnICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIENsZWFuIHVwXHJcbiAgICAgICAgICAgIHNlbGYuaGlkZUxvYWRpbmcoIGN1cnJlbnQgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuaGlkZUNvbnRyb2xzKCk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUN1cnNvcigpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgcG9zc2libGUgdG8gem9vbS1vdXRcclxuICAgICAgICAgICAgaWYgKCBlZmZlY3QgPT09ICd6b29tJyAmJiAhKCBlICE9PSB0cnVlICYmICR3aGF0ICYmIGR1cmF0aW9uICYmIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyAmJiAhY3VycmVudC5oYXNFcnJvciAmJiAoIGVuZCA9IHNlbGYuZ2V0VGh1bWJQb3MoIGN1cnJlbnQgKSApICkgKSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QgPSAnZmFkZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggZWZmZWN0ID09PSAnem9vbScgKSB7XHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnN0b3AoICR3aGF0ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RhcnQgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZSggJHdoYXQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzdGFydC53aWR0aCAgPSBzdGFydC53aWR0aCAgKiBzdGFydC5zY2FsZVg7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5oZWlnaHQgPSBzdGFydC5oZWlnaHQgKiBzdGFydC5zY2FsZVk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBhbmltYXRlIG9wYWNpdHlcclxuICAgICAgICAgICAgICAgIG9wYWNpdHkgPSBjdXJyZW50Lm9wdHMuem9vbU9wYWNpdHk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBvcGFjaXR5ID09ICdhdXRvJyApIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5ID0gTWF0aC5hYnMoIGN1cnJlbnQud2lkdGggLyBjdXJyZW50LmhlaWdodCAtIGVuZC53aWR0aCAvIGVuZC5oZWlnaHQgKSA+IDAuMTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIG9wYWNpdHkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHN0YXJ0LnNjYWxlWCA9IHN0YXJ0LndpZHRoICAvIGVuZC53aWR0aDtcclxuICAgICAgICAgICAgICAgIHN0YXJ0LnNjYWxlWSA9IHN0YXJ0LmhlaWdodCAvIGVuZC5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RhcnQud2lkdGggID0gZW5kLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQuaGVpZ2h0ID0gZW5kLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSggY3VycmVudC4kY29udGVudCwgc3RhcnQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3JjZVJlZHJhdyggY3VycmVudC4kY29udGVudCApO1xyXG5cclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3guYW5pbWF0ZSggY3VycmVudC4kY29udGVudCwgZW5kLCBkdXJhdGlvbiwgZG9uZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIGVmZmVjdCAmJiBkdXJhdGlvbiApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBza2lwIGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKCBlID09PSB0cnVlICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGRvbmUsIGR1cmF0aW9uICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoIGN1cnJlbnQuJHNsaWRlLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtc2xpZGUtLWN1cnJlbnQnICksICdmYW5jeWJveC1hbmltYXRlZCBmYW5jeWJveC1zbGlkZS0tcHJldmlvdXMgZmFuY3lib3gtZngtJyArIGVmZmVjdCwgZHVyYXRpb24sIGRvbmUgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkb25lKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBGaW5hbCBhZGp1c3RtZW50cyBhZnRlciByZW1vdmluZyB0aGUgaW5zdGFuY2VcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgY2xlYW5VcCA6IGZ1bmN0aW9uKCBlICkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiAgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgJGJvZHkgPSAkKCAnYm9keScgKSxcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50LiRzbGlkZS50cmlnZ2VyKCAnb25SZXNldCcgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLmVtcHR5KCkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnRyaWdnZXIoICdhZnRlckNsb3NlJywgZSApO1xyXG5cclxuICAgICAgICAgICAgLy8gUGxhY2UgYmFjayBmb2N1c1xyXG4gICAgICAgICAgICBpZiAoIHNlbGYuJGxhc3RGb2N1cyAmJiAhIXNlbGYuY3VycmVudC5vcHRzLmJhY2tGb2N1cyApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuJGxhc3RGb2N1cy5mb2N1cygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxmLmN1cnJlbnQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgYXJlIG90aGVyIGluc3RhbmNlc1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggaW5zdGFuY2UgKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5hY3RpdmF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAkVy5zY3JvbGxUb3AoIHNlbGYuc2Nyb2xsVG9wICkuc2Nyb2xsTGVmdCggc2VsZi5zY3JvbGxMZWZ0ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgJGJvZHkucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1hY3RpdmUgY29tcGVuc2F0ZS1mb3Itc2Nyb2xsYmFyJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggJGJvZHkuaGFzQ2xhc3MoICdmYW5jeWJveC1pb3NmaXgnICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gcGFyc2VJbnQoZG9jdW1lbnQuYm9keS5zdHlsZS50b3AsIDEwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJGJvZHkucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1pb3NmaXgnICkuY3NzKCAndG9wJywgJycgKS5zY3JvbGxUb3AoIG9mZnNldCAqIC0xICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJCggJyNmYW5jeWJveC1zdHlsZS1ub3Njcm9sbCcgKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIENhbGwgY2FsbGJhY2sgYW5kIHRyaWdnZXIgYW4gZXZlbnRcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHRyaWdnZXIgOiBmdW5jdGlvbiggbmFtZSwgc2xpZGUgKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmdzICA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXHJcbiAgICAgICAgICAgICAgICBzZWxmICA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBvYmogICA9IHNsaWRlICYmIHNsaWRlLm9wdHMgPyBzbGlkZSA6IHNlbGYuY3VycmVudCxcclxuICAgICAgICAgICAgICAgIHJlejtcclxuXHJcbiAgICAgICAgICAgIGlmICggb2JqICkge1xyXG4gICAgICAgICAgICAgICAgYXJncy51bnNoaWZ0KCBvYmogKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvYmogPSBzZWxmO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhcmdzLnVuc2hpZnQoIHNlbGYgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggJC5pc0Z1bmN0aW9uKCBvYmoub3B0c1sgbmFtZSBdICkgKSB7XHJcbiAgICAgICAgICAgICAgICByZXogPSBvYmoub3B0c1sgbmFtZSBdLmFwcGx5KCBvYmosIGFyZ3MgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCByZXogPT09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlejtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBuYW1lID09PSAnYWZ0ZXJDbG9zZScgfHwgIXNlbGYuJHJlZnMgKSB7XHJcbiAgICAgICAgICAgICAgICAkRC50cmlnZ2VyKCBuYW1lICsgJy5mYicsIGFyZ3MgKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lci50cmlnZ2VyKCBuYW1lICsgJy5mYicsIGFyZ3MgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIGluZm9iYXIgdmFsdWVzLCBuYXZpZ2F0aW9uIGJ1dHRvbiBzdGF0ZXMgYW5kIHJldmVhbCBjYXB0aW9uXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHVwZGF0ZUNvbnRyb2xzIDogZnVuY3Rpb24gKCBmb3JjZSApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50ICA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICAgICAgICAgIGluZGV4ICAgID0gY3VycmVudC5pbmRleCxcclxuICAgICAgICAgICAgICAgIGNhcHRpb24gID0gY3VycmVudC5vcHRzLmNhcHRpb24sXHJcbiAgICAgICAgICAgICAgICAkY29udGFpbmVyID0gc2VsZi4kcmVmcy5jb250YWluZXIsXHJcbiAgICAgICAgICAgICAgICAkY2FwdGlvbiAgID0gc2VsZi4kcmVmcy5jYXB0aW9uO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVjYWxjdWxhdGUgY29udGVudCBkaW1lbnNpb25zXHJcbiAgICAgICAgICAgIGN1cnJlbnQuJHNsaWRlLnRyaWdnZXIoICdyZWZyZXNoJyApO1xyXG5cclxuICAgICAgICAgICAgc2VsZi4kY2FwdGlvbiA9IGNhcHRpb24gJiYgY2FwdGlvbi5sZW5ndGggPyAkY2FwdGlvbi5odG1sKCBjYXB0aW9uICkgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhc2VsZi5pc0hpZGRlbkNvbnRyb2xzICYmICFzZWxmLmlzSWRsZSApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuc2hvd0NvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBpbmZvIGFuZCBuYXZpZ2F0aW9uIGVsZW1lbnRzXHJcbiAgICAgICAgICAgICRjb250YWluZXIuZmluZCgnW2RhdGEtZmFuY3lib3gtY291bnRdJykuaHRtbCggc2VsZi5ncm91cC5sZW5ndGggKTtcclxuICAgICAgICAgICAgJGNvbnRhaW5lci5maW5kKCdbZGF0YS1mYW5jeWJveC1pbmRleF0nKS5odG1sKCBpbmRleCArIDEgKTtcclxuXHJcbiAgICAgICAgICAgICRjb250YWluZXIuZmluZCgnW2RhdGEtZmFuY3lib3gtcHJldl0nKS5wcm9wKCAnZGlzYWJsZWQnLCAoICFjdXJyZW50Lm9wdHMubG9vcCAmJiBpbmRleCA8PSAwICkgKTtcclxuICAgICAgICAgICAgJGNvbnRhaW5lci5maW5kKCdbZGF0YS1mYW5jeWJveC1uZXh0XScpLnByb3AoICdkaXNhYmxlZCcsICggIWN1cnJlbnQub3B0cy5sb29wICYmIGluZGV4ID49IHNlbGYuZ3JvdXAubGVuZ3RoIC0gMSApICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgZG93bmxvYWQgYnV0dG9uIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5maW5kKCdbZGF0YS1mYW5jeWJveC1kb3dubG9hZF0nKS5hdHRyKCAnaHJlZicsIGN1cnJlbnQub3B0cy5pbWFnZS5zcmMgfHwgY3VycmVudC5zcmMgKS5zaG93KCk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5maW5kKCdbZGF0YS1mYW5jeWJveC1kb3dubG9hZF0sW2RhdGEtZmFuY3lib3gtem9vbV0nKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBIaWRlIHRvb2xiYXIgYW5kIGNhcHRpb25cclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgaGlkZUNvbnRyb2xzIDogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pc0hpZGRlbkNvbnRyb2xzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJHJlZnMuY29udGFpbmVyLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtc2hvdy1pbmZvYmFyIGZhbmN5Ym94LXNob3ctdG9vbGJhciBmYW5jeWJveC1zaG93LWNhcHRpb24gZmFuY3lib3gtc2hvdy1uYXYnICk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNob3dDb250cm9scyA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBvcHRzID0gc2VsZi5jdXJyZW50ID8gc2VsZi5jdXJyZW50Lm9wdHMgOiBzZWxmLm9wdHM7XHJcbiAgICAgICAgICAgIHZhciAkY29udGFpbmVyID0gc2VsZi4kcmVmcy5jb250YWluZXI7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmlzSGlkZGVuQ29udHJvbHMgICA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA9IDA7XHJcblxyXG4gICAgICAgICAgICAkY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAudG9nZ2xlQ2xhc3MoICdmYW5jeWJveC1zaG93LXRvb2xiYXInLCAhISggb3B0cy50b29sYmFyICYmIG9wdHMuYnV0dG9ucyApIClcclxuICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcyggJ2ZhbmN5Ym94LXNob3ctaW5mb2JhcicsICEhKCBvcHRzLmluZm9iYXIgJiYgc2VsZi5ncm91cC5sZW5ndGggPiAxICkgKVxyXG4gICAgICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCAnZmFuY3lib3gtc2hvdy1uYXYnLCAgICAgISEoIG9wdHMuYXJyb3dzICYmIHNlbGYuZ3JvdXAubGVuZ3RoID4gMSApIClcclxuICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcyggJ2ZhbmN5Ym94LWlzLW1vZGFsJywgICAgICEhb3B0cy5tb2RhbCApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzZWxmLiRjYXB0aW9uICkge1xyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyggJ2ZhbmN5Ym94LXNob3ctY2FwdGlvbiAnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICRjb250YWluZXIucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1zaG93LWNhcHRpb24nICk7XHJcbiAgICAgICAgICAgfVxyXG5cclxuICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgIC8vIFRvZ2dsZSB0b29sYmFyIGFuZCBjYXB0aW9uXHJcbiAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgIHRvZ2dsZUNvbnRyb2xzIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgaWYgKCB0aGlzLmlzSGlkZGVuQ29udHJvbHMgKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuc2hvd0NvbnRyb2xzKCk7XHJcblxyXG4gICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuaGlkZUNvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgfVxyXG5cclxuICAgICAgIH0sXHJcblxyXG5cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAkLmZhbmN5Ym94ID0ge1xyXG5cclxuICAgICAgICB2ZXJzaW9uICA6IFwiMy4yLjVcIixcclxuICAgICAgICBkZWZhdWx0cyA6IGRlZmF1bHRzLFxyXG5cclxuXHJcbiAgICAgICAgLy8gR2V0IGN1cnJlbnQgaW5zdGFuY2UgYW5kIGV4ZWN1dGUgYSBjb21tYW5kLlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gRXhhbXBsZXMgb2YgdXNhZ2U6XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyAgICRpbnN0YW5jZSA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKTtcclxuICAgICAgICAvLyAgICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKS5qdW1wVG8oIDEgKTtcclxuICAgICAgICAvLyAgICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoICdqdW1wVG8nLCAxICk7XHJcbiAgICAgICAgLy8gICAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyAgICAgICBjb25zb2xlLmluZm8oIHRoaXMuY3VyckluZGV4ICk7XHJcbiAgICAgICAgLy8gICB9KTtcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgZ2V0SW5zdGFuY2UgOiBmdW5jdGlvbiAoIGNvbW1hbmQgKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9ICQoJy5mYW5jeWJveC1jb250YWluZXI6bm90KFwiLmZhbmN5Ym94LWlzLWNsb3NpbmdcIik6bGFzdCcpLmRhdGEoICdGYW5jeUJveCcgKTtcclxuICAgICAgICAgICAgdmFyIGFyZ3MgICAgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggaW5zdGFuY2UgaW5zdGFuY2VvZiBGYW5jeUJveCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICQudHlwZSggY29tbWFuZCApID09PSAnc3RyaW5nJyApIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZVsgY29tbWFuZCBdLmFwcGx5KCBpbnN0YW5jZSwgYXJncyApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICQudHlwZSggY29tbWFuZCApID09PSAnZnVuY3Rpb24nICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQuYXBwbHkoIGluc3RhbmNlLCBhcmdzICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgbmV3IGluc3RhbmNlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBvcGVuIDogZnVuY3Rpb24gKCBpdGVtcywgb3B0cywgaW5kZXggKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmFuY3lCb3goIGl0ZW1zLCBvcHRzLCBpbmRleCApO1xyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDbG9zZSBjdXJyZW50IG9yIGFsbCBpbnN0YW5jZXNcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgY2xvc2UgOiBmdW5jdGlvbiAoIGFsbCApIHtcclxuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBpbnN0YW5jZSApIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmNsb3NlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYW5kIGNsb3NlIG5leHQgaW5zdGFuY2VcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGFsbCA9PT0gdHJ1ZSApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gQ2xvc2UgaW5zdGFuY2VzIGFuZCB1bmJpbmQgYWxsIGV2ZW50c1xyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBkZXN0cm95IDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCB0cnVlICk7XHJcblxyXG4gICAgICAgICAgICAkRC5vZmYoICdjbGljay5mYi1zdGFydCcgKTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFRyeSB0byBkZXRlY3QgbW9iaWxlIGRldmljZXNcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGlzTW9iaWxlIDogZG9jdW1lbnQuY3JlYXRlVG91Y2ggIT09IHVuZGVmaW5lZCAmJiAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXHJcblxyXG5cclxuICAgICAgICAvLyBEZXRlY3QgaWYgJ3RyYW5zbGF0ZTNkJyBzdXBwb3J0IGlzIGF2YWlsYWJsZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHVzZTNkIDogKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpICYmICEoZG9jdW1lbnQuZG9jdW1lbnRNb2RlICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSA8IDExKTtcclxuICAgICAgICB9KCkpLFxyXG5cclxuICAgICAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGN1cnJlbnQgdmlzdWFsIHN0YXRlIG9mIGFuIGVsZW1lbnRcclxuICAgICAgICAvLyByZXR1cm5zIGFycmF5WyB0b3AsIGxlZnQsIGhvcml6b250YWwtc2NhbGUsIHZlcnRpY2FsLXNjYWxlLCBvcGFjaXR5IF1cclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgZ2V0VHJhbnNsYXRlIDogZnVuY3Rpb24oICRlbCApIHtcclxuICAgICAgICAgICAgdmFyIG1hdHJpeDtcclxuXHJcbiAgICAgICAgICAgIGlmICggISRlbCB8fCAhJGVsLmxlbmd0aCApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWF0cml4ICA9ICRlbC5lcSggMCApLmNzcygndHJhbnNmb3JtJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIG1hdHJpeCAmJiBtYXRyaXguaW5kZXhPZiggJ21hdHJpeCcgKSAhPT0gLTEgKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRyaXggPSBtYXRyaXguc3BsaXQoJygnKVsxXTtcclxuICAgICAgICAgICAgICAgIG1hdHJpeCA9IG1hdHJpeC5zcGxpdCgnKScpWzBdO1xyXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gbWF0cml4LnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtYXRyaXggPSBbXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBtYXRyaXgubGVuZ3RoICkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIElmIElFXHJcbiAgICAgICAgICAgICAgICBpZiAoIG1hdHJpeC5sZW5ndGggPiAxMCApIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaXggPSBbIG1hdHJpeFsxM10sIG1hdHJpeFsxMl0sIG1hdHJpeFswXSwgbWF0cml4WzVdIF07XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaXggPSBbIG1hdHJpeFs1XSwgbWF0cml4WzRdLCBtYXRyaXhbMF0sIG1hdHJpeFszXV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gbWF0cml4Lm1hcChwYXJzZUZsb2F0KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtYXRyaXggPSBbIDAsIDAsIDEsIDEgXTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNSZWdleCA9IC9cXC4qdHJhbnNsYXRlXFwoKC4qKXB4LCguKilweFxcKS9pO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zUmV6ID0gdHJhbnNSZWdleC5leGVjKCAkZWwuZXEoIDAgKS5hdHRyKCdzdHlsZScpICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCB0cmFuc1JleiApIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaXhbIDAgXSA9IHBhcnNlRmxvYXQoIHRyYW5zUmV6WzJdICk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4WyAxIF0gPSBwYXJzZUZsb2F0KCB0cmFuc1JlelsxXSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdG9wICAgICA6IG1hdHJpeFsgMCBdLFxyXG4gICAgICAgICAgICAgICAgbGVmdCAgICA6IG1hdHJpeFsgMSBdLFxyXG4gICAgICAgICAgICAgICAgc2NhbGVYICA6IG1hdHJpeFsgMiBdLFxyXG4gICAgICAgICAgICAgICAgc2NhbGVZICA6IG1hdHJpeFsgMyBdLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eSA6IHBhcnNlRmxvYXQoICRlbC5jc3MoJ29wYWNpdHknKSApLFxyXG4gICAgICAgICAgICAgICAgd2lkdGggICA6ICRlbC53aWR0aCgpLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ICA6ICRlbC5oZWlnaHQoKVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gU2hvcnRjdXQgZm9yIHNldHRpbmcgXCJ0cmFuc2xhdGUzZFwiIHByb3BlcnRpZXMgZm9yIGVsZW1lbnRcclxuICAgICAgICAvLyBDYW4gc2V0IGJlIHVzZWQgdG8gc2V0IG9wYWNpdHksIHRvb1xyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNldFRyYW5zbGF0ZSA6IGZ1bmN0aW9uKCAkZWwsIHByb3BzICkge1xyXG4gICAgICAgICAgICB2YXIgc3RyICA9ICcnO1xyXG4gICAgICAgICAgICB2YXIgY3NzICA9IHt9O1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhJGVsIHx8ICFwcm9wcyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBwcm9wcy5sZWZ0ICE9PSB1bmRlZmluZWQgfHwgcHJvcHMudG9wICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICBzdHIgPSAoIHByb3BzLmxlZnQgPT09IHVuZGVmaW5lZCA/ICRlbC5wb3NpdGlvbigpLmxlZnQgOiBwcm9wcy5sZWZ0ICkgICsgJ3B4LCAnICsgKCBwcm9wcy50b3AgPT09IHVuZGVmaW5lZCA/ICRlbC5wb3NpdGlvbigpLnRvcCA6IHByb3BzLnRvcCApICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMudXNlM2QgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gJ3RyYW5zbGF0ZTNkKCcgKyBzdHIgKyAnLCAwcHgpJztcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9ICd0cmFuc2xhdGUoJyArIHN0ciArICcpJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBwcm9wcy5zY2FsZVggIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5zY2FsZVkgIT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAgICAgIHN0ciA9IChzdHIubGVuZ3RoID8gc3RyICsgJyAnIDogJycpICsgJ3NjYWxlKCcgKyBwcm9wcy5zY2FsZVggKyAnLCAnICsgcHJvcHMuc2NhbGVZICsgJyknO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIHN0ci5sZW5ndGggKSB7XHJcbiAgICAgICAgICAgICAgICBjc3MudHJhbnNmb3JtID0gc3RyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIHByb3BzLm9wYWNpdHkgIT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAgICAgIGNzcy5vcGFjaXR5ID0gcHJvcHMub3BhY2l0eTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBwcm9wcy53aWR0aCAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgICAgICAgY3NzLndpZHRoID0gcHJvcHMud2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggcHJvcHMuaGVpZ2h0ICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICBjc3MuaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJGVsLmNzcyggY3NzICk7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFNpbXBsZSBDU1MgdHJhbnNpdGlvbiBoYW5kbGVyXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgYW5pbWF0ZSA6IGZ1bmN0aW9uICggJGVsLCB0bywgZHVyYXRpb24sIGNhbGxiYWNrLCBsZWF2ZUFuaW1hdGlvbk5hbWUgKSB7XHJcbiAgICAgICAgICAgIGlmICggJC5pc0Z1bmN0aW9uKCBkdXJhdGlvbiApICkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBkdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCAhJC5pc1BsYWluT2JqZWN0KCB0byApICkge1xyXG4gICAgICAgICAgICAgICAgJGVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRlbC5vbiggdHJhbnNpdGlvbkVuZCwgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNraXAgZXZlbnRzIGZyb20gY2hpbGQgZWxlbWVudHMgYW5kIHotaW5kZXggY2hhbmdlXHJcbiAgICAgICAgICAgICAgICBpZiAoIGUgJiYgZS5vcmlnaW5hbEV2ZW50ICYmICggISRlbC5pcyggZS5vcmlnaW5hbEV2ZW50LnRhcmdldCApIHx8IGUub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUgPT0gJ3otaW5kZXgnICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3guc3RvcCggJGVsICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAkLmlzUGxhaW5PYmplY3QoIHRvICkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggdG8uc2NhbGVYICE9PSB1bmRlZmluZWQgJiYgdG8uc2NhbGVZICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRlbC5jc3MoICd0cmFuc2l0aW9uLWR1cmF0aW9uJywgJycgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvLndpZHRoICA9IE1hdGgucm91bmQoICRlbC53aWR0aCgpICAqIHRvLnNjYWxlWCApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0by5oZWlnaHQgPSBNYXRoLnJvdW5kKCAkZWwuaGVpZ2h0KCkgKiB0by5zY2FsZVkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvLnNjYWxlWCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvLnNjYWxlWSA9IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSggJGVsLCB0byApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBsZWF2ZUFuaW1hdGlvbk5hbWUgIT09IHRydWUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGVsLnJlbW92ZUNsYXNzKCB0byApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggJC5pc0Z1bmN0aW9uKCBjYWxsYmFjayApICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCBlICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICggJC5pc051bWVyaWMoIGR1cmF0aW9uICkgKSB7XHJcbiAgICAgICAgICAgICAgICAkZWwuY3NzKCAndHJhbnNpdGlvbi1kdXJhdGlvbicsIGR1cmF0aW9uICsgJ21zJyApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoICQuaXNQbGFpbk9iamVjdCggdG8gKSApIHtcclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCAkZWwsIHRvICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJGVsLmFkZENsYXNzKCB0byApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIHRvLnNjYWxlWCAmJiAkZWwuaGFzQ2xhc3MoICdmYW5jeWJveC1pbWFnZS13cmFwJyApICkge1xyXG4gICAgICAgICAgICAgICAgJGVsLnBhcmVudCgpLmFkZENsYXNzKCAnZmFuY3lib3gtaXMtc2NhbGluZycgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgYHRyYW5zaXRpb25lbmRgIGNhbGxiYWNrIGdldHMgZmlyZWRcclxuICAgICAgICAgICAgJGVsLmRhdGEoXCJ0aW1lclwiLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoICd0cmFuc2l0aW9uZW5kJyApO1xyXG4gICAgICAgICAgICB9LCBkdXJhdGlvbiArIDE2KSk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHN0b3AgOiBmdW5jdGlvbiggJGVsICkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoICRlbC5kYXRhKFwidGltZXJcIikgKTtcclxuXHJcbiAgICAgICAgICAgICRlbC5vZmYoICd0cmFuc2l0aW9uZW5kJyApLmNzcyggJ3RyYW5zaXRpb24tZHVyYXRpb24nLCAnJyApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAkZWwuaGFzQ2xhc3MoICdmYW5jeWJveC1pbWFnZS13cmFwJyApICkge1xyXG4gICAgICAgICAgICAgICAgJGVsLnBhcmVudCgpLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtaXMtc2NhbGluZycgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvLyBEZWZhdWx0IGNsaWNrIGhhbmRsZXIgZm9yIFwiZmFuY3lib3hlZFwiIGxpbmtzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGZ1bmN0aW9uIF9ydW4oIGUgKSB7XHJcbiAgICAgICAgdmFyICR0YXJnZXRcdD0gJCggZS5jdXJyZW50VGFyZ2V0ICksXHJcbiAgICAgICAgICAgIG9wdHNcdD0gZS5kYXRhID8gZS5kYXRhLm9wdGlvbnMgOiB7fSxcclxuICAgICAgICAgICAgdmFsdWVcdD0gJHRhcmdldC5hdHRyKCAnZGF0YS1mYW5jeWJveCcgKSB8fCAnJyxcclxuICAgICAgICAgICAgaW5kZXhcdD0gMCxcclxuICAgICAgICAgICAgaXRlbXMgICA9IFtdO1xyXG5cclxuICAgICAgICAvLyBBdm9pZCBvcGVuaW5nIG11bHRpcGxlIHRpbWVzXHJcbiAgICAgICAgaWYgKCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIC8vIEdldCBhbGwgcmVsYXRlZCBpdGVtcyBhbmQgZmluZCBpbmRleCBmb3IgY2xpY2tlZCBvbmVcclxuICAgICAgICBpZiAoIHZhbHVlICkge1xyXG4gICAgICAgICAgICBpdGVtcyA9IG9wdHMuc2VsZWN0b3IgPyAkKCBvcHRzLnNlbGVjdG9yICkgOiAoIGUuZGF0YSA/IGUuZGF0YS5pdGVtcyA6IFtdICk7XHJcbiAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMubGVuZ3RoID8gaXRlbXMuZmlsdGVyKCAnW2RhdGEtZmFuY3lib3g9XCInICsgdmFsdWUgKyAnXCJdJyApIDogJCggJ1tkYXRhLWZhbmN5Ym94PVwiJyArIHZhbHVlICsgJ1wiXScgKTtcclxuXHJcbiAgICAgICAgICAgIGluZGV4ID0gaXRlbXMuaW5kZXgoICR0YXJnZXQgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNvbWV0aW1lcyBjdXJyZW50IGl0ZW0gY2FuIG5vdCBiZSBmb3VuZFxyXG4gICAgICAgICAgICAvLyAoZm9yIGV4YW1wbGUsIHdoZW4gc2xpZGVyIGNsb25lcyBpdGVtcylcclxuICAgICAgICAgICAgaWYgKCBpbmRleCA8IDAgKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaXRlbXMgPSBbICR0YXJnZXQgXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQuZmFuY3lib3gub3BlbiggaXRlbXMsIG9wdHMsIGluZGV4ICk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIENyZWF0ZSBhIGpRdWVyeSBwbHVnaW5cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAkLmZuLmZhbmN5Ym94ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgc2VsZWN0b3I7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICBzZWxlY3RvciA9IG9wdGlvbnMuc2VsZWN0b3IgfHwgZmFsc2U7XHJcblxyXG4gICAgICAgIGlmICggc2VsZWN0b3IgKSB7XHJcblxyXG4gICAgICAgICAgICAkKCAnYm9keScgKS5vZmYoICdjbGljay5mYi1zdGFydCcsIHNlbGVjdG9yICkub24oICdjbGljay5mYi1zdGFydCcsIHNlbGVjdG9yLCB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zIDogb3B0aW9uc1xyXG4gICAgICAgICAgICB9LCBfcnVuICk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9mZiggJ2NsaWNrLmZiLXN0YXJ0JyApLm9uKCAnY2xpY2suZmItc3RhcnQnLCB7XHJcbiAgICAgICAgICAgICAgICBpdGVtcyAgIDogdGhpcyxcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMgOiBvcHRpb25zXHJcbiAgICAgICAgICAgIH0sIF9ydW4pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gU2VsZiBpbml0aWFsaXppbmcgcGx1Z2luXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAkRC5vbiggJ2NsaWNrLmZiLXN0YXJ0JywgJ1tkYXRhLWZhbmN5Ym94XScsIF9ydW4gKTtcclxuXHJcbn0oIHdpbmRvdywgZG9jdW1lbnQsIHdpbmRvdy5qUXVlcnkgfHwgalF1ZXJ5ICkpO1xyXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vXHJcbi8vIE1lZGlhXHJcbi8vIEFkZHMgYWRkaXRpb25hbCBtZWRpYSB0eXBlIHN1cHBvcnRcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuOyhmdW5jdGlvbiAoJCkge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdC8vIEZvcm1hdHMgbWF0Y2hpbmcgdXJsIHRvIGZpbmFsIGZvcm1cclxuXHJcblx0dmFyIGZvcm1hdCA9IGZ1bmN0aW9uICh1cmwsIHJleiwgcGFyYW1zKSB7XHJcblx0XHRpZiAoICF1cmwgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRwYXJhbXMgPSBwYXJhbXMgfHwgJyc7XHJcblxyXG5cdFx0aWYgKCAkLnR5cGUocGFyYW1zKSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0cGFyYW1zID0gJC5wYXJhbShwYXJhbXMsIHRydWUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdCQuZWFjaChyZXosIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcblx0XHRcdHVybCA9IHVybC5yZXBsYWNlKCckJyArIGtleSwgdmFsdWUgfHwgJycpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0aWYgKHBhcmFtcy5sZW5ndGgpIHtcclxuXHRcdFx0dXJsICs9ICh1cmwuaW5kZXhPZignPycpID4gMCA/ICcmJyA6ICc/JykgKyBwYXJhbXM7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHVybDtcclxuXHR9O1xyXG5cclxuXHQvLyBPYmplY3QgY29udGFpbmluZyBwcm9wZXJ0aWVzIGZvciBlYWNoIG1lZGlhIHR5cGVcclxuXHJcblx0dmFyIGRlZmF1bHRzID0ge1xyXG5cdFx0eW91dHViZSA6IHtcclxuXHRcdFx0bWF0Y2hlciA6IC8oeW91dHViZVxcLmNvbXx5b3V0dVxcLmJlfHlvdXR1YmVcXC1ub2Nvb2tpZVxcLmNvbSlcXC8od2F0Y2hcXD8oLiomKT92PXx2XFwvfHVcXC98ZW1iZWRcXC8/KT8odmlkZW9zZXJpZXNcXD9saXN0PSguKil8W1xcdy1dezExfXxcXD9saXN0VHlwZT0oLiopJmxpc3Q9KC4qKSkoLiopL2ksXHJcblx0XHRcdHBhcmFtcyAgOiB7XHJcblx0XHRcdFx0YXV0b3BsYXkgOiAxLFxyXG5cdFx0XHRcdGF1dG9oaWRlIDogMSxcclxuXHRcdFx0XHRmcyAgOiAxLFxyXG5cdFx0XHRcdHJlbCA6IDAsXHJcblx0XHRcdFx0aGQgIDogMSxcclxuXHRcdFx0XHR3bW9kZSA6ICd0cmFuc3BhcmVudCcsXHJcblx0XHRcdFx0ZW5hYmxlanNhcGkgOiAxLFxyXG5cdFx0XHRcdGh0bWw1IDogMVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRwYXJhbVBsYWNlIDogOCxcclxuXHRcdFx0dHlwZSAgOiAnaWZyYW1lJyxcclxuXHRcdFx0dXJsICAgOiAnLy93d3cueW91dHViZS5jb20vZW1iZWQvJDQnLFxyXG5cdFx0XHR0aHVtYiA6ICcvL2ltZy55b3V0dWJlLmNvbS92aS8kNC9ocWRlZmF1bHQuanBnJ1xyXG5cdFx0fSxcclxuXHJcblx0XHR2aW1lbyA6IHtcclxuXHRcdFx0bWF0Y2hlciA6IC9eLit2aW1lby5jb21cXC8oLipcXC8pPyhbXFxkXSspKC4qKT8vLFxyXG5cdFx0XHRwYXJhbXMgIDoge1xyXG5cdFx0XHRcdGF1dG9wbGF5IDogMSxcclxuXHRcdFx0XHRoZCA6IDEsXHJcblx0XHRcdFx0c2hvd190aXRsZSAgICA6IDEsXHJcblx0XHRcdFx0c2hvd19ieWxpbmUgICA6IDEsXHJcblx0XHRcdFx0c2hvd19wb3J0cmFpdCA6IDAsXHJcblx0XHRcdFx0ZnVsbHNjcmVlbiAgICA6IDEsXHJcblx0XHRcdFx0YXBpIDogMVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRwYXJhbVBsYWNlIDogMyxcclxuXHRcdFx0dHlwZSA6ICdpZnJhbWUnLFxyXG5cdFx0XHR1cmwgOiAnLy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLyQyJ1xyXG5cdFx0fSxcclxuXHJcblx0XHRtZXRhY2FmZSA6IHtcclxuXHRcdFx0bWF0Y2hlciA6IC9tZXRhY2FmZS5jb21cXC93YXRjaFxcLyhcXGQrKVxcLyguKik/LyxcclxuXHRcdFx0dHlwZSAgICA6ICdpZnJhbWUnLFxyXG5cdFx0XHR1cmwgICAgIDogJy8vd3d3Lm1ldGFjYWZlLmNvbS9lbWJlZC8kMS8/YXA9MSdcclxuXHRcdH0sXHJcblxyXG5cdFx0ZGFpbHltb3Rpb24gOiB7XHJcblx0XHRcdG1hdGNoZXIgOiAvZGFpbHltb3Rpb24uY29tXFwvdmlkZW9cXC8oLiopXFwvPyguKikvLFxyXG5cdFx0XHRwYXJhbXMgOiB7XHJcblx0XHRcdFx0YWRkaXRpb25hbEluZm9zIDogMCxcclxuXHRcdFx0XHRhdXRvU3RhcnQgOiAxXHJcblx0XHRcdH0sXHJcblx0XHRcdHR5cGUgOiAnaWZyYW1lJyxcclxuXHRcdFx0dXJsICA6ICcvL3d3dy5kYWlseW1vdGlvbi5jb20vZW1iZWQvdmlkZW8vJDEnXHJcblx0XHR9LFxyXG5cclxuXHRcdHZpbmUgOiB7XHJcblx0XHRcdG1hdGNoZXIgOiAvdmluZS5jb1xcL3ZcXC8oW2EtekEtWjAtOVxcP1xcPVxcLV0rKS8sXHJcblx0XHRcdHR5cGUgICAgOiAnaWZyYW1lJyxcclxuXHRcdFx0dXJsICAgICA6ICcvL3ZpbmUuY28vdi8kMS9lbWJlZC9zaW1wbGUnXHJcblx0XHR9LFxyXG5cclxuXHRcdGluc3RhZ3JhbSA6IHtcclxuXHRcdFx0bWF0Y2hlciA6IC8oaW5zdGFnclxcLmFtfGluc3RhZ3JhbVxcLmNvbSlcXC9wXFwvKFthLXpBLVowLTlfXFwtXSspXFwvPy9pLFxyXG5cdFx0XHR0eXBlICAgIDogJ2ltYWdlJyxcclxuXHRcdFx0dXJsICAgICA6ICcvLyQxL3AvJDIvbWVkaWEvP3NpemU9bCdcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRXhhbXBsZXM6XHJcblx0XHQvLyBodHRwOi8vbWFwcy5nb29nbGUuY29tLz9sbD00OC44NTc5OTUsMi4yOTQyOTcmc3BuPTAuMDA3NjY2LDAuMDIxMTM2JnQ9bSZ6PTE2XHJcblx0XHQvLyBodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvQDM3Ljc4NTIwMDYsLTEyMi40MTQ2MzU1LDE0LjY1elxyXG5cdFx0Ly8gaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL3BsYWNlL0dvb2dsZXBsZXgvQDM3LjQyMjAwNDEsLTEyMi4wODMzNDk0LDE3ei9kYXRhPSE0bTUhM200ITFzMHgwOjB4NmMyOTZjNjY2MTkzNjdlMCE4bTIhM2QzNy40MjE5OTk4ITRkLTEyMi4wODQwNTcyXHJcblx0XHRnbWFwX3BsYWNlIDoge1xyXG5cdFx0XHRtYXRjaGVyIDogLyhtYXBzXFwuKT9nb29nbGVcXC4oW2Etel17MiwzfShcXC5bYS16XXsyfSk/KVxcLygoKG1hcHNcXC8ocGxhY2VcXC8oLiopXFwvKT9cXEAoLiopLChcXGQrLj9cXGQrPyl6KSl8KFxcP2xsPSkpKC4qKT8vaSxcclxuXHRcdFx0dHlwZSAgICA6ICdpZnJhbWUnLFxyXG5cdFx0XHR1cmwgICAgIDogZnVuY3Rpb24gKHJleikge1xyXG5cdFx0XHRcdHJldHVybiAnLy9tYXBzLmdvb2dsZS4nICsgcmV6WzJdICsgJy8/bGw9JyArICggcmV6WzldID8gcmV6WzldICsgJyZ6PScgKyBNYXRoLmZsb29yKCAgcmV6WzEwXSAgKSArICggcmV6WzEyXSA/IHJlelsxMl0ucmVwbGFjZSgvXlxcLy8sIFwiJlwiKSA6ICcnICkgIDogcmV6WzEyXSApICsgJyZvdXRwdXQ9JyArICggcmV6WzEyXSAmJiByZXpbMTJdLmluZGV4T2YoJ2xheWVyPWMnKSA+IDAgPyAnc3ZlbWJlZCcgOiAnZW1iZWQnICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRXhhbXBsZXM6XHJcblx0XHQvLyBodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvc2VhcmNoL0VtcGlyZStTdGF0ZStCdWlsZGluZy9cclxuXHRcdC8vIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9zZWFyY2gvP2FwaT0xJnF1ZXJ5PWNlbnR1cnlsaW5rK2ZpZWxkXHJcblx0XHQvLyBodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvc2VhcmNoLz9hcGk9MSZxdWVyeT00Ny41OTUxNTE4LC0xMjIuMzMxNjM5M1xyXG5cdFx0Z21hcF9zZWFyY2ggOiB7XHJcblx0XHRcdG1hdGNoZXIgOiAvKG1hcHNcXC4pP2dvb2dsZVxcLihbYS16XXsyLDN9KFxcLlthLXpdezJ9KT8pXFwvKG1hcHNcXC9zZWFyY2hcXC8pKC4qKS9pLFxyXG5cdFx0XHR0eXBlICAgIDogJ2lmcmFtZScsXHJcblx0XHRcdHVybCAgICAgOiBmdW5jdGlvbiAocmV6KSB7XHJcblx0XHRcdFx0cmV0dXJuICcvL21hcHMuZ29vZ2xlLicgKyByZXpbMl0gKyAnL21hcHM/cT0nICsgcmV6WzVdLnJlcGxhY2UoJ3F1ZXJ5PScsICdxPScpLnJlcGxhY2UoJ2FwaT0xJywgJycpICsgJyZvdXRwdXQ9ZW1iZWQnO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0JChkb2N1bWVudCkub24oJ29iamVjdE5lZWRzVHlwZS5mYicsIGZ1bmN0aW9uIChlLCBpbnN0YW5jZSwgaXRlbSkge1xyXG5cclxuXHRcdHZhciB1cmxcdCA9IGl0ZW0uc3JjIHx8ICcnLFxyXG5cdFx0XHR0eXBlID0gZmFsc2UsXHJcblx0XHRcdG1lZGlhLFxyXG5cdFx0XHR0aHVtYixcclxuXHRcdFx0cmV6LFxyXG5cdFx0XHRwYXJhbXMsXHJcblx0XHRcdHVybFBhcmFtcyxcclxuXHRcdFx0cGFyYW1PYmosXHJcblx0XHRcdHByb3ZpZGVyO1xyXG5cclxuXHRcdG1lZGlhID0gJC5leHRlbmQoIHRydWUsIHt9LCBkZWZhdWx0cywgaXRlbS5vcHRzLm1lZGlhICk7XHJcblxyXG5cdFx0Ly8gTG9vayBmb3IgYW55IG1hdGNoaW5nIG1lZGlhIHR5cGVcclxuXHRcdCQuZWFjaChtZWRpYSwgZnVuY3Rpb24gKCBwcm92aWRlck5hbWUsIHByb3ZpZGVyT3B0cyApIHtcclxuXHRcdFx0cmV6ID0gdXJsLm1hdGNoKCBwcm92aWRlck9wdHMubWF0Y2hlciApO1xyXG5cclxuXHRcdFx0aWYgKCAhcmV6ICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dHlwZSAgICAgPSBwcm92aWRlck9wdHMudHlwZTtcclxuXHRcdFx0cGFyYW1PYmogPSB7fTtcclxuXHJcblx0XHRcdGlmICggcHJvdmlkZXJPcHRzLnBhcmFtUGxhY2UgJiYgcmV6WyBwcm92aWRlck9wdHMucGFyYW1QbGFjZSBdICkge1xyXG5cdFx0XHRcdHVybFBhcmFtcyA9IHJlelsgcHJvdmlkZXJPcHRzLnBhcmFtUGxhY2UgXTtcclxuXHJcblx0XHRcdFx0aWYgKCB1cmxQYXJhbXNbIDAgXSA9PSAnPycgKSB7XHJcblx0XHRcdFx0XHR1cmxQYXJhbXMgPSB1cmxQYXJhbXMuc3Vic3RyaW5nKDEpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dXJsUGFyYW1zID0gdXJsUGFyYW1zLnNwbGl0KCcmJyk7XHJcblxyXG5cdFx0XHRcdGZvciAoIHZhciBtID0gMDsgbSA8IHVybFBhcmFtcy5sZW5ndGg7ICsrbSApIHtcclxuXHRcdFx0XHRcdHZhciBwID0gdXJsUGFyYW1zWyBtIF0uc3BsaXQoJz0nLCAyKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHAubGVuZ3RoID09IDIgKSB7XHJcblx0XHRcdFx0XHRcdHBhcmFtT2JqWyBwWzBdIF0gPSBkZWNvZGVVUklDb21wb25lbnQoIHBbMV0ucmVwbGFjZSgvXFwrL2csIFwiIFwiKSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cGFyYW1zID0gJC5leHRlbmQoIHRydWUsIHt9LCBwcm92aWRlck9wdHMucGFyYW1zLCBpdGVtLm9wdHNbIHByb3ZpZGVyTmFtZSBdLCBwYXJhbU9iaiApO1xyXG5cclxuXHRcdFx0dXJsICAgPSAkLnR5cGUoIHByb3ZpZGVyT3B0cy51cmwgKSA9PT0gXCJmdW5jdGlvblwiID8gcHJvdmlkZXJPcHRzLnVybC5jYWxsKCB0aGlzLCByZXosIHBhcmFtcywgaXRlbSApIDogZm9ybWF0KCBwcm92aWRlck9wdHMudXJsLCByZXosIHBhcmFtcyApO1xyXG5cdFx0XHR0aHVtYiA9ICQudHlwZSggcHJvdmlkZXJPcHRzLnRodW1iICkgPT09IFwiZnVuY3Rpb25cIiA/IHByb3ZpZGVyT3B0cy50aHVtYi5jYWxsKCB0aGlzLCByZXosIHBhcmFtcywgaXRlbSApIDogZm9ybWF0KCBwcm92aWRlck9wdHMudGh1bWIsIHJleiApO1xyXG5cclxuXHRcdFx0aWYgKCBwcm92aWRlck5hbWUgPT09ICd2aW1lbycgKSB7XHJcblx0XHRcdFx0dXJsID0gdXJsLnJlcGxhY2UoJyYlMjMnLCAnIycpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBJZiBpdCBpcyBmb3VuZCwgdGhlbiBjaGFuZ2UgY29udGVudCB0eXBlIGFuZCB1cGRhdGUgdGhlIHVybFxyXG5cclxuXHRcdGlmICggdHlwZSApIHtcclxuXHRcdFx0aXRlbS5zcmMgID0gdXJsO1xyXG5cdFx0XHRpdGVtLnR5cGUgPSB0eXBlO1xyXG5cclxuXHRcdFx0aWYgKCAhaXRlbS5vcHRzLnRodW1iICYmICEoIGl0ZW0ub3B0cy4kdGh1bWIgJiYgaXRlbS5vcHRzLiR0aHVtYi5sZW5ndGggKSApIHtcclxuXHRcdFx0XHRpdGVtLm9wdHMudGh1bWIgPSB0aHVtYjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB0eXBlID09PSAnaWZyYW1lJyApIHtcclxuXHRcdFx0XHQkLmV4dGVuZCh0cnVlLCBpdGVtLm9wdHMsIHtcclxuXHRcdFx0XHRcdGlmcmFtZSA6IHtcclxuXHRcdFx0XHRcdFx0cHJlbG9hZCA6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XHRhdHRyIDoge1xyXG5cdFx0XHRcdFx0XHRcdHNjcm9sbGluZyA6IFwibm9cIlxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdGl0ZW0uY29udGVudFByb3ZpZGVyID0gcHJvdmlkZXI7XHJcblxyXG5cdFx0XHRcdGl0ZW0ub3B0cy5zbGlkZUNsYXNzICs9ICcgZmFuY3lib3gtc2xpZGUtLScgKyAoIHByb3ZpZGVyID09ICdnbWFwX3BsYWNlJyB8fCBwcm92aWRlciA9PSAnZ21hcF9zZWFyY2gnID8gJ21hcCcgOiAndmlkZW8nICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgaWYgKCB1cmwgKSB7XHJcblx0XHRcdGl0ZW0udHlwZSA9IGl0ZW0ub3B0cy5kZWZhdWx0VHlwZTtcclxuXHRcdH1cclxuXHJcblx0fSk7XHJcblxyXG59KCB3aW5kb3cualF1ZXJ5IHx8IGpRdWVyeSApKTtcclxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBHdWVzdHVyZXNcclxuLy8gQWRkcyB0b3VjaCBndWVzdHVyZXMsIGhhbmRsZXMgY2xpY2sgYW5kIHRhcCBldmVudHNcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuOyhmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCwgJCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIHJlcXVlc3RBRnJhbWUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgLy8gaWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBzZXRUaW1lb3V0XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgfSkoKTtcclxuXHJcblxyXG4gICAgdmFyIGNhbmNlbEFGcmFtZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5vQ2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaWQpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgIH0pKCk7XHJcblxyXG5cclxuXHR2YXIgcG9pbnRlcnMgPSBmdW5jdGlvbiggZSApIHtcclxuXHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHJcblx0XHRlID0gZS5vcmlnaW5hbEV2ZW50IHx8IGUgfHwgd2luZG93LmU7XHJcblx0XHRlID0gZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPyBlLnRvdWNoZXMgOiAoIGUuY2hhbmdlZFRvdWNoZXMgJiYgZS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPyBlLmNoYW5nZWRUb3VjaGVzIDogWyBlIF0gKTtcclxuXHJcblx0XHRmb3IgKCB2YXIga2V5IGluIGUgKSB7XHJcblxyXG5cdFx0XHRpZiAoIGVbIGtleSBdLnBhZ2VYICkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKCB7IHggOiBlWyBrZXkgXS5wYWdlWCwgeSA6IGVbIGtleSBdLnBhZ2VZIH0gKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIGVbIGtleSBdLmNsaWVudFggKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goIHsgeCA6IGVbIGtleSBdLmNsaWVudFgsIHkgOiBlWyBrZXkgXS5jbGllbnRZIH0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fTtcclxuXHJcblx0dmFyIGRpc3RhbmNlID0gZnVuY3Rpb24oIHBvaW50MiwgcG9pbnQxLCB3aGF0ICkge1xyXG5cdFx0aWYgKCAhcG9pbnQxIHx8ICFwb2ludDIgKSB7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggd2hhdCA9PT0gJ3gnICkge1xyXG5cdFx0XHRyZXR1cm4gcG9pbnQyLnggLSBwb2ludDEueDtcclxuXHJcblx0XHR9IGVsc2UgaWYgKCB3aGF0ID09PSAneScgKSB7XHJcblx0XHRcdHJldHVybiBwb2ludDIueSAtIHBvaW50MS55O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBNYXRoLnNxcnQoIE1hdGgucG93KCBwb2ludDIueCAtIHBvaW50MS54LCAyICkgKyBNYXRoLnBvdyggcG9pbnQyLnkgLSBwb2ludDEueSwgMiApICk7XHJcblx0fTtcclxuXHJcblx0dmFyIGlzQ2xpY2thYmxlID0gZnVuY3Rpb24oICRlbCApIHtcclxuXHJcblx0XHRpZiAoICRlbC5pcygnYSxhcmVhLGJ1dHRvbixbcm9sZT1cImJ1dHRvblwiXSxpbnB1dCxsYWJlbCxzZWxlY3Qsc3VtbWFyeSx0ZXh0YXJlYScpIHx8ICQuaXNGdW5jdGlvbiggJGVsLmdldCgwKS5vbmNsaWNrICkgfHwgJGVsLmRhdGEoJ3NlbGVjdGFibGUnKSApIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgZm9yIGF0dHJpYnV0ZXMgbGlrZSBkYXRhLWZhbmN5Ym94LW5leHQgb3IgZGF0YS1mYW5jeWJveC1jbG9zZVxyXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBhdHRzID0gJGVsWzBdLmF0dHJpYnV0ZXMsIG4gPSBhdHRzLmxlbmd0aDsgaSA8IG47IGkrKyApIHtcclxuICAgICAgICAgICAgaWYgKCBhdHRzW2ldLm5vZGVOYW1lLnN1YnN0cigwLCAxNCkgPT09ICdkYXRhLWZhbmN5Ym94LScgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblx0IFx0cmV0dXJuIGZhbHNlO1xyXG5cdH07XHJcblxyXG5cdHZhciBoYXNTY3JvbGxiYXJzID0gZnVuY3Rpb24oIGVsICkge1xyXG5cdFx0dmFyIG92ZXJmbG93WSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBlbCApWydvdmVyZmxvdy15J107XHJcblx0XHR2YXIgb3ZlcmZsb3dYID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGVsIClbJ292ZXJmbG93LXgnXTtcclxuXHJcblx0XHR2YXIgdmVydGljYWwgICA9IChvdmVyZmxvd1kgPT09ICdzY3JvbGwnIHx8IG92ZXJmbG93WSA9PT0gJ2F1dG8nKSAmJiBlbC5zY3JvbGxIZWlnaHQgPiBlbC5jbGllbnRIZWlnaHQ7XHJcblx0XHR2YXIgaG9yaXpvbnRhbCA9IChvdmVyZmxvd1ggPT09ICdzY3JvbGwnIHx8IG92ZXJmbG93WCA9PT0gJ2F1dG8nKSAmJiBlbC5zY3JvbGxXaWR0aCA+IGVsLmNsaWVudFdpZHRoO1xyXG5cclxuXHRcdHJldHVybiB2ZXJ0aWNhbCB8fCBob3Jpem9udGFsO1xyXG5cdH07XHJcblxyXG5cdHZhciBpc1Njcm9sbGFibGUgPSBmdW5jdGlvbiAoICRlbCApIHtcclxuXHRcdHZhciByZXogPSBmYWxzZTtcclxuXHJcblx0XHR3aGlsZSAoIHRydWUgKSB7XHJcblx0XHRcdHJlelx0PSBoYXNTY3JvbGxiYXJzKCAkZWwuZ2V0KDApICk7XHJcblxyXG5cdFx0XHRpZiAoIHJleiApIHtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0JGVsID0gJGVsLnBhcmVudCgpO1xyXG5cclxuXHRcdFx0aWYgKCAhJGVsLmxlbmd0aCB8fCAkZWwuaGFzQ2xhc3MoICdmYW5jeWJveC1zdGFnZScgKSB8fCAkZWwuaXMoICdib2R5JyApICkge1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJlejtcclxuXHR9O1xyXG5cclxuXHJcblx0dmFyIEd1ZXN0dXJlcyA9IGZ1bmN0aW9uICggaW5zdGFuY2UgKSB7XHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0c2VsZi5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG5cclxuXHRcdHNlbGYuJGJnICAgICAgICA9IGluc3RhbmNlLiRyZWZzLmJnO1xyXG5cdFx0c2VsZi4kc3RhZ2UgICAgID0gaW5zdGFuY2UuJHJlZnMuc3RhZ2U7XHJcblx0XHRzZWxmLiRjb250YWluZXIgPSBpbnN0YW5jZS4kcmVmcy5jb250YWluZXI7XHJcblxyXG5cdFx0c2VsZi5kZXN0cm95KCk7XHJcblxyXG5cdFx0c2VsZi4kY29udGFpbmVyLm9uKCAndG91Y2hzdGFydC5mYi50b3VjaCBtb3VzZWRvd24uZmIudG91Y2gnLCAkLnByb3h5KHNlbGYsICdvbnRvdWNoc3RhcnQnKSApO1xyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy4kY29udGFpbmVyLm9mZiggJy5mYi50b3VjaCcgKTtcclxuXHR9O1xyXG5cclxuXHRHdWVzdHVyZXMucHJvdG90eXBlLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uKCBlICkge1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdHZhciAkdGFyZ2V0ICA9ICQoIGUudGFyZ2V0ICk7XHJcblx0XHR2YXIgaW5zdGFuY2UgPSBzZWxmLmluc3RhbmNlO1xyXG5cdFx0dmFyIGN1cnJlbnQgID0gaW5zdGFuY2UuY3VycmVudDtcclxuXHRcdHZhciAkY29udGVudCA9IGN1cnJlbnQuJGNvbnRlbnQ7XHJcblxyXG5cdFx0dmFyIGlzVG91Y2hEZXZpY2UgPSAoIGUudHlwZSA9PSAndG91Y2hzdGFydCcgKTtcclxuXHJcblx0XHQvLyBEbyBub3QgcmVzcG9uZCB0byBib3RoIGV2ZW50c1xyXG5cdFx0aWYgKCBpc1RvdWNoRGV2aWNlICkge1xyXG5cdCAgICAgICAgc2VsZi4kY29udGFpbmVyLm9mZiggJ21vdXNlZG93bi5mYi50b3VjaCcgKTtcclxuXHQgICAgfVxyXG5cclxuXHRcdC8vIElnbm9yZSBjbGlja3Mgd2hpbGUgem9vbWluZyBvciBjbG9zaW5nXHJcblx0XHRpZiAoICFjdXJyZW50IHx8IHNlbGYuaW5zdGFuY2UuaXNBbmltYXRpbmcgfHwgc2VsZi5pbnN0YW5jZS5pc0Nsb3NpbmcgKSB7XHJcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZ25vcmUgcmlnaHQgY2xpY2tcclxuXHRcdGlmICggZS5vcmlnaW5hbEV2ZW50ICYmIGUub3JpZ2luYWxFdmVudC5idXR0b24gPT0gMiApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElnbm9yZSB0YXBpbmcgb24gbGlua3MsIGJ1dHRvbnMsIGlucHV0IGVsZW1lbnRzXHJcblx0XHRpZiAoICEkdGFyZ2V0Lmxlbmd0aCB8fCBpc0NsaWNrYWJsZSggJHRhcmdldCApIHx8IGlzQ2xpY2thYmxlKCAkdGFyZ2V0LnBhcmVudCgpICkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZ25vcmUgY2xpY2tzIG9uIHRoZSBzY3JvbGxiYXJcclxuXHRcdGlmICggZS5vcmlnaW5hbEV2ZW50LmNsaWVudFggPiAkdGFyZ2V0WzBdLmNsaWVudFdpZHRoICsgJHRhcmdldC5vZmZzZXQoKS5sZWZ0ICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0c2VsZi5zdGFydFBvaW50cyA9IHBvaW50ZXJzKCBlICk7XHJcblxyXG5cdFx0Ly8gUHJldmVudCB6b29taW5nIGlmIGFscmVhZHkgc3dpcGluZ1xyXG5cdFx0aWYgKCAhc2VsZi5zdGFydFBvaW50cyB8fCAoIHNlbGYuc3RhcnRQb2ludHMubGVuZ3RoID4gMSAmJiBpbnN0YW5jZS5pc1NsaWRpbmcgKSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHNlbGYuJHRhcmdldCAgPSAkdGFyZ2V0O1xyXG5cdFx0c2VsZi4kY29udGVudCA9ICRjb250ZW50O1xyXG5cdFx0c2VsZi5jYW5UYXAgICA9IHRydWU7XHJcblx0XHRzZWxmLm9wdHMgICAgID0gY3VycmVudC5vcHRzLnRvdWNoO1xyXG5cclxuXHRcdCQoZG9jdW1lbnQpLm9mZiggJy5mYi50b3VjaCcgKTtcclxuXHJcblx0XHQkKGRvY3VtZW50KS5vbiggaXNUb3VjaERldmljZSA/ICd0b3VjaGVuZC5mYi50b3VjaCB0b3VjaGNhbmNlbC5mYi50b3VjaCcgOiAnbW91c2V1cC5mYi50b3VjaCBtb3VzZWxlYXZlLmZiLnRvdWNoJywgICQucHJveHkoc2VsZiwgXCJvbnRvdWNoZW5kXCIpKTtcclxuXHRcdCQoZG9jdW1lbnQpLm9uKCBpc1RvdWNoRGV2aWNlID8gJ3RvdWNobW92ZS5mYi50b3VjaCcgOiAnbW91c2Vtb3ZlLmZiLnRvdWNoJywgICQucHJveHkoc2VsZiwgXCJvbnRvdWNobW92ZVwiKSk7XHJcblxyXG5cdFx0aWYgKCAhKHNlbGYub3B0cyB8fCBpbnN0YW5jZS5jYW5QYW4oKSApIHx8ICEoICR0YXJnZXQuaXMoIHNlbGYuJHN0YWdlICkgfHwgc2VsZi4kc3RhZ2UuZmluZCggJHRhcmdldCApLmxlbmd0aCApICkge1xyXG5cclxuXHRcdFx0Ly8gUHJldmVudCBnaG9zdGluZ1xyXG5cdFx0XHRpZiAoICR0YXJnZXQuaXMoJ2ltZycpICkge1xyXG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG5cdFx0aWYgKCAhKCAkLmZhbmN5Ym94LmlzTW9iaWxlICYmICggaXNTY3JvbGxhYmxlKCBzZWxmLiR0YXJnZXQgKSB8fCBpc1Njcm9sbGFibGUoIHNlbGYuJHRhcmdldC5wYXJlbnQoKSApICkgKSApIHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHNlbGYuY2FudmFzV2lkdGggID0gTWF0aC5yb3VuZCggY3VycmVudC4kc2xpZGVbMF0uY2xpZW50V2lkdGggKTtcclxuXHRcdHNlbGYuY2FudmFzSGVpZ2h0ID0gTWF0aC5yb3VuZCggY3VycmVudC4kc2xpZGVbMF0uY2xpZW50SGVpZ2h0ICk7XHJcblxyXG5cdFx0c2VsZi5zdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHRcdHNlbGYuZGlzdGFuY2VYID0gc2VsZi5kaXN0YW5jZVkgPSBzZWxmLmRpc3RhbmNlID0gMDtcclxuXHJcblx0XHRzZWxmLmlzUGFubmluZyA9IGZhbHNlO1xyXG5cdFx0c2VsZi5pc1N3aXBpbmcgPSBmYWxzZTtcclxuXHRcdHNlbGYuaXNab29taW5nID0gZmFsc2U7XHJcblxyXG5cdFx0c2VsZi5zbGlkZXJTdGFydFBvcyAgPSBzZWxmLnNsaWRlckxhc3RQb3MgfHwgeyB0b3A6IDAsIGxlZnQ6IDAgfTtcclxuXHRcdHNlbGYuY29udGVudFN0YXJ0UG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoIHNlbGYuJGNvbnRlbnQgKTtcclxuXHRcdHNlbGYuY29udGVudExhc3RQb3MgID0gbnVsbDtcclxuXHJcblx0XHRpZiAoIHNlbGYuc3RhcnRQb2ludHMubGVuZ3RoID09PSAxICYmICFzZWxmLmlzWm9vbWluZyApIHtcclxuXHRcdFx0c2VsZi5jYW5UYXAgPSAhaW5zdGFuY2UuaXNTbGlkaW5nO1xyXG5cclxuXHRcdFx0aWYgKCBjdXJyZW50LnR5cGUgPT09ICdpbWFnZScgJiYgKCBzZWxmLmNvbnRlbnRTdGFydFBvcy53aWR0aCA+IHNlbGYuY2FudmFzV2lkdGggKyAxIHx8IHNlbGYuY29udGVudFN0YXJ0UG9zLmhlaWdodCA+IHNlbGYuY2FudmFzSGVpZ2h0ICsgMSApICkge1xyXG5cclxuXHRcdFx0XHQkLmZhbmN5Ym94LnN0b3AoIHNlbGYuJGNvbnRlbnQgKTtcclxuXHJcblx0XHRcdFx0c2VsZi4kY29udGVudC5jc3MoICd0cmFuc2l0aW9uLWR1cmF0aW9uJywgJzBtcycgKTtcclxuXHJcblx0XHRcdFx0c2VsZi5pc1Bhbm5pbmcgPSB0cnVlO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0c2VsZi5pc1N3aXBpbmcgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzZWxmLiRjb250YWluZXIuYWRkQ2xhc3MoJ2ZhbmN5Ym94LWNvbnRyb2xzLS1pc0dyYWJiaW5nJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzZWxmLnN0YXJ0UG9pbnRzLmxlbmd0aCA9PT0gMiAmJiAhaW5zdGFuY2UuaXNBbmltYXRpbmcgJiYgIWN1cnJlbnQuaGFzRXJyb3IgJiYgY3VycmVudC50eXBlID09PSAnaW1hZ2UnICYmICggY3VycmVudC5pc0xvYWRlZCB8fCBjdXJyZW50LiRnaG9zdCApICkge1xyXG5cdFx0XHRzZWxmLmlzWm9vbWluZyA9IHRydWU7XHJcblxyXG5cdFx0XHRzZWxmLmlzU3dpcGluZyA9IGZhbHNlO1xyXG5cdFx0XHRzZWxmLmlzUGFubmluZyA9IGZhbHNlO1xyXG5cclxuXHRcdFx0JC5mYW5jeWJveC5zdG9wKCBzZWxmLiRjb250ZW50ICk7XHJcblxyXG5cdFx0XHRzZWxmLiRjb250ZW50LmNzcyggJ3RyYW5zaXRpb24tZHVyYXRpb24nLCAnMG1zJyApO1xyXG5cclxuXHRcdFx0c2VsZi5jZW50ZXJQb2ludFN0YXJ0WCA9ICggKCBzZWxmLnN0YXJ0UG9pbnRzWzBdLnggKyBzZWxmLnN0YXJ0UG9pbnRzWzFdLnggKSAqIDAuNSApIC0gJCh3aW5kb3cpLnNjcm9sbExlZnQoKTtcclxuXHRcdFx0c2VsZi5jZW50ZXJQb2ludFN0YXJ0WSA9ICggKCBzZWxmLnN0YXJ0UG9pbnRzWzBdLnkgKyBzZWxmLnN0YXJ0UG9pbnRzWzFdLnkgKSAqIDAuNSApIC0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xyXG5cclxuXHRcdFx0c2VsZi5wZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFggPSAoIHNlbGYuY2VudGVyUG9pbnRTdGFydFggLSBzZWxmLmNvbnRlbnRTdGFydFBvcy5sZWZ0ICkgLyBzZWxmLmNvbnRlbnRTdGFydFBvcy53aWR0aDtcclxuXHRcdFx0c2VsZi5wZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFkgPSAoIHNlbGYuY2VudGVyUG9pbnRTdGFydFkgLSBzZWxmLmNvbnRlbnRTdGFydFBvcy50b3AgICkgLyBzZWxmLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQ7XHJcblxyXG5cdFx0XHRzZWxmLnN0YXJ0RGlzdGFuY2VCZXR3ZWVuRmluZ2VycyA9IGRpc3RhbmNlKCBzZWxmLnN0YXJ0UG9pbnRzWzBdLCBzZWxmLnN0YXJ0UG9pbnRzWzFdICk7XHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUub250b3VjaG1vdmUgPSBmdW5jdGlvbiggZSApIHtcclxuXHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0c2VsZi5uZXdQb2ludHMgPSBwb2ludGVycyggZSApO1xyXG5cclxuXHRcdGlmICggJC5mYW5jeWJveC5pc01vYmlsZSAmJiAoIGlzU2Nyb2xsYWJsZSggc2VsZi4kdGFyZ2V0ICkgfHwgaXNTY3JvbGxhYmxlKCBzZWxmLiR0YXJnZXQucGFyZW50KCkgKSApICkge1xyXG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuXHRcdFx0c2VsZi5jYW5UYXAgPSBmYWxzZTtcclxuXHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoICEoIHNlbGYub3B0cyB8fCBzZWxmLmluc3RhbmNlLmNhblBhbigpICkgfHwgIXNlbGYubmV3UG9pbnRzIHx8ICFzZWxmLm5ld1BvaW50cy5sZW5ndGggKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLmRpc3RhbmNlWCA9IGRpc3RhbmNlKCBzZWxmLm5ld1BvaW50c1swXSwgc2VsZi5zdGFydFBvaW50c1swXSwgJ3gnICk7XHJcblx0XHRzZWxmLmRpc3RhbmNlWSA9IGRpc3RhbmNlKCBzZWxmLm5ld1BvaW50c1swXSwgc2VsZi5zdGFydFBvaW50c1swXSwgJ3knICk7XHJcblxyXG5cdFx0c2VsZi5kaXN0YW5jZSA9IGRpc3RhbmNlKCBzZWxmLm5ld1BvaW50c1swXSwgc2VsZi5zdGFydFBvaW50c1swXSApO1xyXG5cclxuXHRcdC8vIFNraXAgZmFsc2Ugb250b3VjaG1vdmUgZXZlbnRzIChDaHJvbWUpXHJcblx0XHRpZiAoIHNlbGYuZGlzdGFuY2UgPiAwICkge1xyXG5cclxuXHRcdFx0aWYgKCAhKCBzZWxmLiR0YXJnZXQuaXMoIHNlbGYuJHN0YWdlICkgfHwgc2VsZi4kc3RhZ2UuZmluZCggc2VsZi4kdGFyZ2V0ICkubGVuZ3RoICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHRpZiAoIHNlbGYuaXNTd2lwaW5nICkge1xyXG5cdFx0XHRcdHNlbGYub25Td2lwZSgpO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggc2VsZi5pc1Bhbm5pbmcgKSB7XHJcblx0XHRcdFx0c2VsZi5vblBhbigpO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggc2VsZi5pc1pvb21pbmcgKSB7XHJcblx0XHRcdFx0c2VsZi5vblpvb20oKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fTtcclxuXHJcblx0R3Vlc3R1cmVzLnByb3RvdHlwZS5vblN3aXBlID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdHZhciBzd2lwaW5nID0gc2VsZi5pc1N3aXBpbmc7XHJcblx0XHR2YXIgbGVmdCAgICA9IHNlbGYuc2xpZGVyU3RhcnRQb3MubGVmdCB8fCAwO1xyXG5cdFx0dmFyIGFuZ2xlO1xyXG5cclxuXHRcdGlmICggc3dpcGluZyA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdGlmICggTWF0aC5hYnMoIHNlbGYuZGlzdGFuY2UgKSA+IDEwICkgIHtcclxuXHJcblx0XHRcdFx0c2VsZi5jYW5UYXAgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0aWYgKCBzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCA8IDIgJiYgc2VsZi5vcHRzLnZlcnRpY2FsICkge1xyXG5cdFx0XHRcdFx0c2VsZi5pc1N3aXBpbmcgID0gJ3knO1xyXG5cclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzZWxmLmluc3RhbmNlLmlzU2xpZGluZyB8fCBzZWxmLm9wdHMudmVydGljYWwgPT09IGZhbHNlIHx8ICggc2VsZi5vcHRzLnZlcnRpY2FsID09PSAnYXV0bycgJiYgJCggd2luZG93ICkud2lkdGgoKSA+IDgwMCApICkge1xyXG5cdFx0XHRcdFx0c2VsZi5pc1N3aXBpbmcgID0gJ3gnO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0YW5nbGUgPSBNYXRoLmFicyggTWF0aC5hdGFuMiggc2VsZi5kaXN0YW5jZVksIHNlbGYuZGlzdGFuY2VYICkgKiAxODAgLyBNYXRoLlBJICk7XHJcblxyXG5cdFx0XHRcdFx0c2VsZi5pc1N3aXBpbmcgPSAoIGFuZ2xlID4gNDUgJiYgYW5nbGUgPCAxMzUgKSA/ICd5JyA6ICd4JztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHNlbGYuaW5zdGFuY2UuaXNTbGlkaW5nID0gc2VsZi5pc1N3aXBpbmc7XHJcblxyXG5cdFx0XHRcdC8vIFJlc2V0IHBvaW50cyB0byBhdm9pZCBqdW1waW5nLCBiZWNhdXNlIHdlIGRyb3BwZWQgZmlyc3Qgc3dpcGVzIHRvIGNhbGN1bGF0ZSB0aGUgYW5nbGVcclxuXHRcdFx0XHRzZWxmLnN0YXJ0UG9pbnRzID0gc2VsZi5uZXdQb2ludHM7XHJcblxyXG5cdFx0XHRcdCQuZWFjaChzZWxmLmluc3RhbmNlLnNsaWRlcywgZnVuY3Rpb24oIGluZGV4LCBzbGlkZSApIHtcclxuXHRcdFx0XHRcdCQuZmFuY3lib3guc3RvcCggc2xpZGUuJHNsaWRlICk7XHJcblxyXG5cdFx0XHRcdFx0c2xpZGUuJHNsaWRlLmNzcyggJ3RyYW5zaXRpb24tZHVyYXRpb24nLCAnMG1zJyApO1xyXG5cclxuXHRcdFx0XHRcdHNsaWRlLmluVHJhbnNpdGlvbiA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdGlmICggc2xpZGUucG9zID09PSBzZWxmLmluc3RhbmNlLmN1cnJlbnQucG9zICkge1xyXG5cdFx0XHRcdFx0XHRzZWxmLnNsaWRlclN0YXJ0UG9zLmxlZnQgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZSggc2xpZGUuJHNsaWRlICkubGVmdDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0Ly9zZWxmLmluc3RhbmNlLmN1cnJlbnQuaXNNb3ZlZCA9IHRydWU7XHJcblxyXG5cdFx0XHRcdC8vIFN0b3Agc2xpZGVzaG93XHJcblx0XHRcdFx0aWYgKCBzZWxmLmluc3RhbmNlLlNsaWRlU2hvdyAmJiBzZWxmLmluc3RhbmNlLlNsaWRlU2hvdy5pc0FjdGl2ZSApIHtcclxuXHRcdFx0XHRcdHNlbGYuaW5zdGFuY2UuU2xpZGVTaG93LnN0b3AoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0aWYgKCBzd2lwaW5nID09ICd4JyApIHtcclxuXHJcblx0XHRcdFx0Ly8gU3RpY2t5IGVkZ2VzXHJcblx0XHRcdFx0aWYgKCBzZWxmLmRpc3RhbmNlWCA+IDAgJiYgKCBzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCA8IDIgfHwgKCBzZWxmLmluc3RhbmNlLmN1cnJlbnQuaW5kZXggPT09IDAgJiYgIXNlbGYuaW5zdGFuY2UuY3VycmVudC5vcHRzLmxvb3AgKSApICkge1xyXG5cdFx0XHRcdFx0bGVmdCA9IGxlZnQgKyBNYXRoLnBvdyggc2VsZi5kaXN0YW5jZVgsIDAuOCApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzZWxmLmRpc3RhbmNlWCA8IDAgJiYgKCBzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCA8IDIgfHwgKCBzZWxmLmluc3RhbmNlLmN1cnJlbnQuaW5kZXggPT09IHNlbGYuaW5zdGFuY2UuZ3JvdXAubGVuZ3RoIC0gMSAmJiAhc2VsZi5pbnN0YW5jZS5jdXJyZW50Lm9wdHMubG9vcCApICkgKSB7XHJcblx0XHRcdFx0XHRsZWZ0ID0gbGVmdCAtIE1hdGgucG93KCAtc2VsZi5kaXN0YW5jZVgsIDAuOCApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0bGVmdCA9IGxlZnQgKyBzZWxmLmRpc3RhbmNlWDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzZWxmLnNsaWRlckxhc3RQb3MgPSB7XHJcblx0XHRcdFx0dG9wICA6IHN3aXBpbmcgPT0gJ3gnID8gMCA6IHNlbGYuc2xpZGVyU3RhcnRQb3MudG9wICsgc2VsZi5kaXN0YW5jZVksXHJcblx0XHRcdFx0bGVmdCA6IGxlZnRcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGlmICggc2VsZi5yZXF1ZXN0SWQgKSB7XHJcblx0XHRcdFx0Y2FuY2VsQUZyYW1lKCBzZWxmLnJlcXVlc3RJZCApO1xyXG5cclxuXHRcdFx0XHRzZWxmLnJlcXVlc3RJZCA9IG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNlbGYucmVxdWVzdElkID0gcmVxdWVzdEFGcmFtZShmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0aWYgKCBzZWxmLnNsaWRlckxhc3RQb3MgKSB7XHJcblx0XHRcdFx0XHQkLmVhY2goc2VsZi5pbnN0YW5jZS5zbGlkZXMsIGZ1bmN0aW9uKCBpbmRleCwgc2xpZGUgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBwb3MgPSBzbGlkZS5wb3MgLSBzZWxmLmluc3RhbmNlLmN1cnJQb3M7XHJcblxyXG5cdFx0XHRcdFx0XHQkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSggc2xpZGUuJHNsaWRlLCB7XHJcblx0XHRcdFx0XHRcdFx0dG9wICA6IHNlbGYuc2xpZGVyTGFzdFBvcy50b3AsXHJcblx0XHRcdFx0XHRcdFx0bGVmdCA6IHNlbGYuc2xpZGVyTGFzdFBvcy5sZWZ0ICsgKCBwb3MgKiBzZWxmLmNhbnZhc1dpZHRoICkgKyAoIHBvcyAqIHNsaWRlLm9wdHMuZ3V0dGVyIClcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRzZWxmLiRjb250YWluZXIuYWRkQ2xhc3MoICdmYW5jeWJveC1pcy1zbGlkaW5nJyApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fTtcclxuXHJcblx0R3Vlc3R1cmVzLnByb3RvdHlwZS5vblBhbiA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHR2YXIgbmV3T2Zmc2V0WCwgbmV3T2Zmc2V0WSwgbmV3UG9zO1xyXG5cclxuXHRcdHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcblxyXG5cdFx0aWYgKCBzZWxmLmNvbnRlbnRTdGFydFBvcy53aWR0aCA+IHNlbGYuY2FudmFzV2lkdGggKSB7XHJcblx0XHRcdG5ld09mZnNldFggPSBzZWxmLmNvbnRlbnRTdGFydFBvcy5sZWZ0ICsgc2VsZi5kaXN0YW5jZVg7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bmV3T2Zmc2V0WCA9IHNlbGYuY29udGVudFN0YXJ0UG9zLmxlZnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0bmV3T2Zmc2V0WSA9IHNlbGYuY29udGVudFN0YXJ0UG9zLnRvcCArIHNlbGYuZGlzdGFuY2VZO1xyXG5cclxuXHRcdG5ld1BvcyA9IHNlbGYubGltaXRNb3ZlbWVudCggbmV3T2Zmc2V0WCwgbmV3T2Zmc2V0WSwgc2VsZi5jb250ZW50U3RhcnRQb3Mud2lkdGgsIHNlbGYuY29udGVudFN0YXJ0UG9zLmhlaWdodCApO1xyXG5cclxuXHRcdG5ld1Bvcy5zY2FsZVggPSBzZWxmLmNvbnRlbnRTdGFydFBvcy5zY2FsZVg7XHJcblx0XHRuZXdQb3Muc2NhbGVZID0gc2VsZi5jb250ZW50U3RhcnRQb3Muc2NhbGVZO1xyXG5cclxuXHRcdHNlbGYuY29udGVudExhc3RQb3MgPSBuZXdQb3M7XHJcblxyXG5cdFx0aWYgKCBzZWxmLnJlcXVlc3RJZCApIHtcclxuXHRcdFx0Y2FuY2VsQUZyYW1lKCBzZWxmLnJlcXVlc3RJZCApO1xyXG5cclxuXHRcdFx0c2VsZi5yZXF1ZXN0SWQgPSBudWxsO1xyXG5cdFx0fVxyXG5cclxuXHRcdHNlbGYucmVxdWVzdElkID0gcmVxdWVzdEFGcmFtZShmdW5jdGlvbigpIHtcclxuXHRcdFx0JC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoIHNlbGYuJGNvbnRlbnQsIHNlbGYuY29udGVudExhc3RQb3MgKTtcclxuXHRcdH0pO1xyXG5cdH07XHJcblxyXG5cdC8vIE1ha2UgcGFubmluZyBzdGlja3kgdG8gdGhlIGVkZ2VzXHJcblx0R3Vlc3R1cmVzLnByb3RvdHlwZS5saW1pdE1vdmVtZW50ID0gZnVuY3Rpb24oIG5ld09mZnNldFgsIG5ld09mZnNldFksIG5ld1dpZHRoLCBuZXdIZWlnaHQgKSB7XHJcblxyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdHZhciBtaW5UcmFuc2xhdGVYLCBtaW5UcmFuc2xhdGVZLCBtYXhUcmFuc2xhdGVYLCBtYXhUcmFuc2xhdGVZO1xyXG5cclxuXHRcdHZhciBjYW52YXNXaWR0aCAgPSBzZWxmLmNhbnZhc1dpZHRoO1xyXG5cdFx0dmFyIGNhbnZhc0hlaWdodCA9IHNlbGYuY2FudmFzSGVpZ2h0O1xyXG5cclxuXHRcdHZhciBjdXJyZW50T2Zmc2V0WCA9IHNlbGYuY29udGVudFN0YXJ0UG9zLmxlZnQ7XHJcblx0XHR2YXIgY3VycmVudE9mZnNldFkgPSBzZWxmLmNvbnRlbnRTdGFydFBvcy50b3A7XHJcblxyXG5cdFx0dmFyIGRpc3RhbmNlWCA9IHNlbGYuZGlzdGFuY2VYO1xyXG5cdFx0dmFyIGRpc3RhbmNlWSA9IHNlbGYuZGlzdGFuY2VZO1xyXG5cclxuXHRcdC8vIFNsb3cgZG93biBwcm9wb3J0aW9uYWxseSB0byB0cmF2ZWxlZCBkaXN0YW5jZVxyXG5cclxuXHRcdG1pblRyYW5zbGF0ZVggPSBNYXRoLm1heCgwLCBjYW52YXNXaWR0aCAgKiAwLjUgLSBuZXdXaWR0aCAgKiAwLjUgKTtcclxuXHRcdG1pblRyYW5zbGF0ZVkgPSBNYXRoLm1heCgwLCBjYW52YXNIZWlnaHQgKiAwLjUgLSBuZXdIZWlnaHQgKiAwLjUgKTtcclxuXHJcblx0XHRtYXhUcmFuc2xhdGVYID0gTWF0aC5taW4oIGNhbnZhc1dpZHRoICAtIG5ld1dpZHRoLCAgY2FudmFzV2lkdGggICogMC41IC0gbmV3V2lkdGggICogMC41ICk7XHJcblx0XHRtYXhUcmFuc2xhdGVZID0gTWF0aC5taW4oIGNhbnZhc0hlaWdodCAtIG5ld0hlaWdodCwgY2FudmFzSGVpZ2h0ICogMC41IC0gbmV3SGVpZ2h0ICogMC41ICk7XHJcblxyXG5cdFx0aWYgKCBuZXdXaWR0aCA+IGNhbnZhc1dpZHRoICkge1xyXG5cclxuXHRcdFx0Ly8gICAtPlxyXG5cdFx0XHRpZiAoIGRpc3RhbmNlWCA+IDAgJiYgbmV3T2Zmc2V0WCA+IG1pblRyYW5zbGF0ZVggKSB7XHJcblx0XHRcdFx0bmV3T2Zmc2V0WCA9IG1pblRyYW5zbGF0ZVggLSAxICsgTWF0aC5wb3coIC1taW5UcmFuc2xhdGVYICsgY3VycmVudE9mZnNldFggKyBkaXN0YW5jZVgsIDAuOCApIHx8IDA7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vICAgIDwtXHJcblx0XHRcdGlmICggZGlzdGFuY2VYICA8IDAgJiYgbmV3T2Zmc2V0WCA8IG1heFRyYW5zbGF0ZVggKSB7XHJcblx0XHRcdFx0bmV3T2Zmc2V0WCA9IG1heFRyYW5zbGF0ZVggKyAxIC0gTWF0aC5wb3coIG1heFRyYW5zbGF0ZVggLSBjdXJyZW50T2Zmc2V0WCAtIGRpc3RhbmNlWCwgMC44ICkgfHwgMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG5ld0hlaWdodCA+IGNhbnZhc0hlaWdodCApIHtcclxuXHJcblx0XHRcdC8vICAgXFwvXHJcblx0XHRcdGlmICggZGlzdGFuY2VZID4gMCAmJiBuZXdPZmZzZXRZID4gbWluVHJhbnNsYXRlWSApIHtcclxuXHRcdFx0XHRuZXdPZmZzZXRZID0gbWluVHJhbnNsYXRlWSAtIDEgKyBNYXRoLnBvdygtbWluVHJhbnNsYXRlWSArIGN1cnJlbnRPZmZzZXRZICsgZGlzdGFuY2VZLCAwLjggKSB8fCAwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyAgIC9cXFxyXG5cdFx0XHRpZiAoIGRpc3RhbmNlWSA8IDAgJiYgbmV3T2Zmc2V0WSA8IG1heFRyYW5zbGF0ZVkgKSB7XHJcblx0XHRcdFx0bmV3T2Zmc2V0WSA9IG1heFRyYW5zbGF0ZVkgKyAxIC0gTWF0aC5wb3cgKCBtYXhUcmFuc2xhdGVZIC0gY3VycmVudE9mZnNldFkgLSBkaXN0YW5jZVksIDAuOCApIHx8IDA7XHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dG9wICA6IG5ld09mZnNldFksXHJcblx0XHRcdGxlZnQgOiBuZXdPZmZzZXRYXHJcblx0XHR9O1xyXG5cclxuXHR9O1xyXG5cclxuXHJcblx0R3Vlc3R1cmVzLnByb3RvdHlwZS5saW1pdFBvc2l0aW9uID0gZnVuY3Rpb24oIG5ld09mZnNldFgsIG5ld09mZnNldFksIG5ld1dpZHRoLCBuZXdIZWlnaHQgKSB7XHJcblxyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdHZhciBjYW52YXNXaWR0aCAgPSBzZWxmLmNhbnZhc1dpZHRoO1xyXG5cdFx0dmFyIGNhbnZhc0hlaWdodCA9IHNlbGYuY2FudmFzSGVpZ2h0O1xyXG5cclxuXHRcdGlmICggbmV3V2lkdGggPiBjYW52YXNXaWR0aCApIHtcclxuXHRcdFx0bmV3T2Zmc2V0WCA9IG5ld09mZnNldFggPiAwID8gMCA6IG5ld09mZnNldFg7XHJcblx0XHRcdG5ld09mZnNldFggPSBuZXdPZmZzZXRYIDwgY2FudmFzV2lkdGggLSBuZXdXaWR0aCA/IGNhbnZhc1dpZHRoIC0gbmV3V2lkdGggOiBuZXdPZmZzZXRYO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBDZW50ZXIgaG9yaXpvbnRhbGx5XHJcblx0XHRcdG5ld09mZnNldFggPSBNYXRoLm1heCggMCwgY2FudmFzV2lkdGggLyAyIC0gbmV3V2lkdGggLyAyICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggbmV3SGVpZ2h0ID4gY2FudmFzSGVpZ2h0ICkge1xyXG5cdFx0XHRuZXdPZmZzZXRZID0gbmV3T2Zmc2V0WSA+IDAgPyAwIDogbmV3T2Zmc2V0WTtcclxuXHRcdFx0bmV3T2Zmc2V0WSA9IG5ld09mZnNldFkgPCBjYW52YXNIZWlnaHQgLSBuZXdIZWlnaHQgPyBjYW52YXNIZWlnaHQgLSBuZXdIZWlnaHQgOiBuZXdPZmZzZXRZO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBDZW50ZXIgdmVydGljYWxseVxyXG5cdFx0XHRuZXdPZmZzZXRZID0gTWF0aC5tYXgoIDAsIGNhbnZhc0hlaWdodCAvIDIgLSBuZXdIZWlnaHQgLyAyICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRvcCAgOiBuZXdPZmZzZXRZLFxyXG5cdFx0XHRsZWZ0IDogbmV3T2Zmc2V0WFxyXG5cdFx0fTtcclxuXHJcblx0fTtcclxuXHJcblx0R3Vlc3R1cmVzLnByb3RvdHlwZS5vblpvb20gPSBmdW5jdGlvbigpIHtcclxuXHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0Ly8gQ2FsY3VsYXRlIGN1cnJlbnQgZGlzdGFuY2UgYmV0d2VlbiBwb2ludHMgdG8gZ2V0IHBpbmNoIHJhdGlvIGFuZCBuZXcgd2lkdGggYW5kIGhlaWdodFxyXG5cclxuXHRcdHZhciBjdXJyZW50V2lkdGggID0gc2VsZi5jb250ZW50U3RhcnRQb3Mud2lkdGg7XHJcblx0XHR2YXIgY3VycmVudEhlaWdodCA9IHNlbGYuY29udGVudFN0YXJ0UG9zLmhlaWdodDtcclxuXHJcblx0XHR2YXIgY3VycmVudE9mZnNldFggPSBzZWxmLmNvbnRlbnRTdGFydFBvcy5sZWZ0O1xyXG5cdFx0dmFyIGN1cnJlbnRPZmZzZXRZID0gc2VsZi5jb250ZW50U3RhcnRQb3MudG9wO1xyXG5cclxuXHRcdHZhciBlbmREaXN0YW5jZUJldHdlZW5GaW5nZXJzID0gZGlzdGFuY2UoIHNlbGYubmV3UG9pbnRzWzBdLCBzZWxmLm5ld1BvaW50c1sxXSApO1xyXG5cclxuXHRcdHZhciBwaW5jaFJhdGlvID0gZW5kRGlzdGFuY2VCZXR3ZWVuRmluZ2VycyAvIHNlbGYuc3RhcnREaXN0YW5jZUJldHdlZW5GaW5nZXJzO1xyXG5cclxuXHRcdHZhciBuZXdXaWR0aCAgPSBNYXRoLmZsb29yKCBjdXJyZW50V2lkdGggICogcGluY2hSYXRpbyApO1xyXG5cdFx0dmFyIG5ld0hlaWdodCA9IE1hdGguZmxvb3IoIGN1cnJlbnRIZWlnaHQgKiBwaW5jaFJhdGlvICk7XHJcblxyXG5cdFx0Ly8gVGhpcyBpcyB0aGUgdHJhbnNsYXRpb24gZHVlIHRvIHBpbmNoLXpvb21pbmdcclxuXHRcdHZhciB0cmFuc2xhdGVGcm9tWm9vbWluZ1ggPSAoY3VycmVudFdpZHRoICAtIG5ld1dpZHRoKSAgKiBzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WDtcclxuXHRcdHZhciB0cmFuc2xhdGVGcm9tWm9vbWluZ1kgPSAoY3VycmVudEhlaWdodCAtIG5ld0hlaWdodCkgKiBzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WTtcclxuXHJcblx0XHQvL1BvaW50IGJldHdlZW4gdGhlIHR3byB0b3VjaGVzXHJcblxyXG5cdFx0dmFyIGNlbnRlclBvaW50RW5kWCA9ICgoc2VsZi5uZXdQb2ludHNbMF0ueCArIHNlbGYubmV3UG9pbnRzWzFdLngpIC8gMikgLSAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpO1xyXG5cdFx0dmFyIGNlbnRlclBvaW50RW5kWSA9ICgoc2VsZi5uZXdQb2ludHNbMF0ueSArIHNlbGYubmV3UG9pbnRzWzFdLnkpIC8gMikgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XHJcblxyXG5cdFx0Ly8gQW5kIHRoaXMgaXMgdGhlIHRyYW5zbGF0aW9uIGR1ZSB0byB0cmFuc2xhdGlvbiBvZiB0aGUgY2VudGVycG9pbnRcclxuXHRcdC8vIGJldHdlZW4gdGhlIHR3byBmaW5nZXJzXHJcblxyXG5cdFx0dmFyIHRyYW5zbGF0ZUZyb21UcmFuc2xhdGluZ1ggPSBjZW50ZXJQb2ludEVuZFggLSBzZWxmLmNlbnRlclBvaW50U3RhcnRYO1xyXG5cdFx0dmFyIHRyYW5zbGF0ZUZyb21UcmFuc2xhdGluZ1kgPSBjZW50ZXJQb2ludEVuZFkgLSBzZWxmLmNlbnRlclBvaW50U3RhcnRZO1xyXG5cclxuXHRcdC8vIFRoZSBuZXcgb2Zmc2V0IGlzIHRoZSBvbGQvY3VycmVudCBvbmUgcGx1cyB0aGUgdG90YWwgdHJhbnNsYXRpb25cclxuXHJcblx0XHR2YXIgbmV3T2Zmc2V0WCA9IGN1cnJlbnRPZmZzZXRYICsgKCB0cmFuc2xhdGVGcm9tWm9vbWluZ1ggKyB0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdYICk7XHJcblx0XHR2YXIgbmV3T2Zmc2V0WSA9IGN1cnJlbnRPZmZzZXRZICsgKCB0cmFuc2xhdGVGcm9tWm9vbWluZ1kgKyB0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdZICk7XHJcblxyXG5cdFx0dmFyIG5ld1BvcyA9IHtcclxuXHRcdFx0dG9wICAgIDogbmV3T2Zmc2V0WSxcclxuXHRcdFx0bGVmdCAgIDogbmV3T2Zmc2V0WCxcclxuXHRcdFx0c2NhbGVYIDogc2VsZi5jb250ZW50U3RhcnRQb3Muc2NhbGVYICogcGluY2hSYXRpbyxcclxuXHRcdFx0c2NhbGVZIDogc2VsZi5jb250ZW50U3RhcnRQb3Muc2NhbGVZICogcGluY2hSYXRpb1xyXG5cdFx0fTtcclxuXHJcblx0XHRzZWxmLmNhblRhcCA9IGZhbHNlO1xyXG5cclxuXHRcdHNlbGYubmV3V2lkdGggID0gbmV3V2lkdGg7XHJcblx0XHRzZWxmLm5ld0hlaWdodCA9IG5ld0hlaWdodDtcclxuXHJcblx0XHRzZWxmLmNvbnRlbnRMYXN0UG9zID0gbmV3UG9zO1xyXG5cclxuXHRcdGlmICggc2VsZi5yZXF1ZXN0SWQgKSB7XHJcblx0XHRcdGNhbmNlbEFGcmFtZSggc2VsZi5yZXF1ZXN0SWQgKTtcclxuXHJcblx0XHRcdHNlbGYucmVxdWVzdElkID0gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLnJlcXVlc3RJZCA9IHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24oKSB7XHJcblx0XHRcdCQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCBzZWxmLiRjb250ZW50LCBzZWxmLmNvbnRlbnRMYXN0UG9zICk7XHJcblx0XHR9KTtcclxuXHJcblx0fTtcclxuXHJcblx0R3Vlc3R1cmVzLnByb3RvdHlwZS5vbnRvdWNoZW5kID0gZnVuY3Rpb24oIGUgKSB7XHJcblxyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0dmFyIGRNcyAgPSBNYXRoLm1heCggKG5ldyBEYXRlKCkuZ2V0VGltZSgpICkgLSBzZWxmLnN0YXJ0VGltZSwgMSk7XHJcblxyXG5cdFx0dmFyIHN3aXBpbmcgPSBzZWxmLmlzU3dpcGluZztcclxuXHRcdHZhciBwYW5uaW5nID0gc2VsZi5pc1Bhbm5pbmc7XHJcblx0XHR2YXIgem9vbWluZyA9IHNlbGYuaXNab29taW5nO1xyXG5cclxuXHRcdHNlbGYuZW5kUG9pbnRzID0gcG9pbnRlcnMoIGUgKTtcclxuXHJcblx0XHRzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1jb250cm9scy0taXNHcmFiYmluZycgKTtcclxuXHJcblx0XHQkKGRvY3VtZW50KS5vZmYoICcuZmIudG91Y2gnICk7XHJcblxyXG5cdFx0aWYgKCBzZWxmLnJlcXVlc3RJZCApIHtcclxuXHRcdFx0Y2FuY2VsQUZyYW1lKCBzZWxmLnJlcXVlc3RJZCApO1xyXG5cclxuXHRcdFx0c2VsZi5yZXF1ZXN0SWQgPSBudWxsO1xyXG5cdFx0fVxyXG5cclxuXHRcdHNlbGYuaXNTd2lwaW5nID0gZmFsc2U7XHJcblx0XHRzZWxmLmlzUGFubmluZyA9IGZhbHNlO1xyXG5cdFx0c2VsZi5pc1pvb21pbmcgPSBmYWxzZTtcclxuXHJcblx0XHRpZiAoIHNlbGYuY2FuVGFwICkgIHtcclxuXHRcdFx0cmV0dXJuIHNlbGYub25UYXAoIGUgKTtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLnNwZWVkID0gMzY2O1xyXG5cclxuXHRcdC8vIFNwZWVkIGluIHB4L21zXHJcblx0XHRzZWxmLnZlbG9jaXR5WCA9IHNlbGYuZGlzdGFuY2VYIC8gZE1zICogMC41O1xyXG5cdFx0c2VsZi52ZWxvY2l0eVkgPSBzZWxmLmRpc3RhbmNlWSAvIGRNcyAqIDAuNTtcclxuXHJcblx0XHRzZWxmLnNwZWVkWCA9IE1hdGgubWF4KCBzZWxmLnNwZWVkICogMC41LCBNYXRoLm1pbiggc2VsZi5zcGVlZCAqIDEuNSwgKCAxIC8gTWF0aC5hYnMoIHNlbGYudmVsb2NpdHlYICkgKSAqIHNlbGYuc3BlZWQgKSApO1xyXG5cclxuXHRcdGlmICggcGFubmluZyApIHtcclxuXHRcdFx0c2VsZi5lbmRQYW5uaW5nKCk7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggem9vbWluZyApIHtcclxuXHRcdFx0c2VsZi5lbmRab29taW5nKCk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c2VsZi5lbmRTd2lwaW5nKCBzd2lwaW5nICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuO1xyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUuZW5kU3dpcGluZyA9IGZ1bmN0aW9uKCBzd2lwaW5nICkge1xyXG5cclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdHZhciByZXQgPSBmYWxzZTtcclxuXHJcblx0XHRzZWxmLmluc3RhbmNlLmlzU2xpZGluZyA9IGZhbHNlO1xyXG5cdFx0c2VsZi5zbGlkZXJMYXN0UG9zICAgICAgPSBudWxsO1xyXG5cclxuXHRcdC8vIENsb3NlIGlmIHN3aXBlZCB2ZXJ0aWNhbGx5IC8gbmF2aWdhdGUgaWYgaG9yaXpvbnRhbGx5XHJcblx0XHRpZiAoIHN3aXBpbmcgPT0gJ3knICYmIE1hdGguYWJzKCBzZWxmLmRpc3RhbmNlWSApID4gNTAgKSB7XHJcblxyXG5cdFx0XHQvLyBDb250aW51ZSB2ZXJ0aWNhbCBtb3ZlbWVudFxyXG5cdFx0XHQkLmZhbmN5Ym94LmFuaW1hdGUoIHNlbGYuaW5zdGFuY2UuY3VycmVudC4kc2xpZGUsIHtcclxuXHRcdFx0XHR0b3AgICAgIDogc2VsZi5zbGlkZXJTdGFydFBvcy50b3AgKyBzZWxmLmRpc3RhbmNlWSArICggc2VsZi52ZWxvY2l0eVkgKiAxNTAgKSxcclxuXHRcdFx0XHRvcGFjaXR5IDogMFxyXG5cdFx0XHR9LCAxNTAgKTtcclxuXHJcblx0XHRcdHJldCA9IHNlbGYuaW5zdGFuY2UuY2xvc2UoIHRydWUsIDMwMCApO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIHN3aXBpbmcgPT0gJ3gnICYmIHNlbGYuZGlzdGFuY2VYID4gNTAgJiYgc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggPiAxICkge1xyXG5cdFx0XHRyZXQgPSBzZWxmLmluc3RhbmNlLnByZXZpb3VzKCBzZWxmLnNwZWVkWCApO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIHN3aXBpbmcgPT0gJ3gnICYmIHNlbGYuZGlzdGFuY2VYIDwgLTUwICAmJiBzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCA+IDEgKSB7XHJcblx0XHRcdHJldCA9IHNlbGYuaW5zdGFuY2UubmV4dCggc2VsZi5zcGVlZFggKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHJldCA9PT0gZmFsc2UgJiYgKCBzd2lwaW5nID09ICd4JyB8fCBzd2lwaW5nID09ICd5JyApICkge1xyXG5cdFx0XHRzZWxmLmluc3RhbmNlLmp1bXBUbyggc2VsZi5pbnN0YW5jZS5jdXJyZW50LmluZGV4LCAxNTAgKTtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1pcy1zbGlkaW5nJyApO1xyXG5cclxuXHR9O1xyXG5cclxuXHQvLyBMaW1pdCBwYW5uaW5nIGZyb20gZWRnZXNcclxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcblx0R3Vlc3R1cmVzLnByb3RvdHlwZS5lbmRQYW5uaW5nID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0dmFyIG5ld09mZnNldFgsIG5ld09mZnNldFksIG5ld1BvcztcclxuXHJcblx0XHRpZiAoICFzZWxmLmNvbnRlbnRMYXN0UG9zICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzZWxmLm9wdHMubW9tZW50dW0gPT09IGZhbHNlICkge1xyXG5cdFx0XHRuZXdPZmZzZXRYID0gc2VsZi5jb250ZW50TGFzdFBvcy5sZWZ0O1xyXG5cdFx0XHRuZXdPZmZzZXRZID0gc2VsZi5jb250ZW50TGFzdFBvcy50b3A7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIENvbnRpbnVlIG1vdmVtZW50XHJcblx0XHRcdG5ld09mZnNldFggPSBzZWxmLmNvbnRlbnRMYXN0UG9zLmxlZnQgKyAoIHNlbGYudmVsb2NpdHlYICogc2VsZi5zcGVlZCApO1xyXG5cdFx0XHRuZXdPZmZzZXRZID0gc2VsZi5jb250ZW50TGFzdFBvcy50b3AgICsgKCBzZWxmLnZlbG9jaXR5WSAqIHNlbGYuc3BlZWQgKTtcclxuXHRcdH1cclxuXHJcblx0XHRuZXdQb3MgPSBzZWxmLmxpbWl0UG9zaXRpb24oIG5ld09mZnNldFgsIG5ld09mZnNldFksIHNlbGYuY29udGVudFN0YXJ0UG9zLndpZHRoLCBzZWxmLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQgKTtcclxuXHJcblx0XHQgbmV3UG9zLndpZHRoICA9IHNlbGYuY29udGVudFN0YXJ0UG9zLndpZHRoO1xyXG5cdFx0IG5ld1Bvcy5oZWlnaHQgPSBzZWxmLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQ7XHJcblxyXG5cdFx0JC5mYW5jeWJveC5hbmltYXRlKCBzZWxmLiRjb250ZW50LCBuZXdQb3MsIDMzMCApO1xyXG5cdH07XHJcblxyXG5cclxuXHRHdWVzdHVyZXMucHJvdG90eXBlLmVuZFpvb21pbmcgPSBmdW5jdGlvbigpIHtcclxuXHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0dmFyIGN1cnJlbnQgPSBzZWxmLmluc3RhbmNlLmN1cnJlbnQ7XHJcblxyXG5cdFx0dmFyIG5ld09mZnNldFgsIG5ld09mZnNldFksIG5ld1BvcywgcmVzZXQ7XHJcblxyXG5cdFx0dmFyIG5ld1dpZHRoICA9IHNlbGYubmV3V2lkdGg7XHJcblx0XHR2YXIgbmV3SGVpZ2h0ID0gc2VsZi5uZXdIZWlnaHQ7XHJcblxyXG5cdFx0aWYgKCAhc2VsZi5jb250ZW50TGFzdFBvcyApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdG5ld09mZnNldFggPSBzZWxmLmNvbnRlbnRMYXN0UG9zLmxlZnQ7XHJcblx0XHRuZXdPZmZzZXRZID0gc2VsZi5jb250ZW50TGFzdFBvcy50b3A7XHJcblxyXG5cdFx0cmVzZXQgPSB7XHJcblx0XHQgICBcdHRvcCAgICA6IG5ld09mZnNldFksXHJcblx0XHQgICBcdGxlZnQgICA6IG5ld09mZnNldFgsXHJcblx0XHQgICBcdHdpZHRoICA6IG5ld1dpZHRoLFxyXG5cdFx0ICAgXHRoZWlnaHQgOiBuZXdIZWlnaHQsXHJcblx0XHRcdHNjYWxlWCA6IDEsXHJcblx0XHRcdHNjYWxlWSA6IDFcclxuXHQgICB9O1xyXG5cclxuXHQgICAvLyBSZXNldCBzY2FsZXgvc2NhbGVZIHZhbHVlczsgdGhpcyBoZWxwcyBmb3IgcGVyZm9tYW5jZSBhbmQgZG9lcyBub3QgYnJlYWsgYW5pbWF0aW9uXHJcblx0ICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoIHNlbGYuJGNvbnRlbnQsIHJlc2V0ICk7XHJcblxyXG5cdFx0aWYgKCBuZXdXaWR0aCA8IHNlbGYuY2FudmFzV2lkdGggJiYgbmV3SGVpZ2h0IDwgc2VsZi5jYW52YXNIZWlnaHQgKSB7XHJcblx0XHRcdHNlbGYuaW5zdGFuY2Uuc2NhbGVUb0ZpdCggMTUwICk7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggbmV3V2lkdGggPiBjdXJyZW50LndpZHRoIHx8IG5ld0hlaWdodCA+IGN1cnJlbnQuaGVpZ2h0ICkge1xyXG5cdFx0XHRzZWxmLmluc3RhbmNlLnNjYWxlVG9BY3R1YWwoIHNlbGYuY2VudGVyUG9pbnRTdGFydFgsIHNlbGYuY2VudGVyUG9pbnRTdGFydFksIDE1MCApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRuZXdQb3MgPSBzZWxmLmxpbWl0UG9zaXRpb24oIG5ld09mZnNldFgsIG5ld09mZnNldFksIG5ld1dpZHRoLCBuZXdIZWlnaHQgKTtcclxuXHJcblx0XHRcdC8vIFN3aXRjaCBmcm9tIHNjYWxlKCkgdG8gd2lkdGgvaGVpZ2h0IG9yIGFuaW1hdGlvbiB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseVxyXG5cdFx0XHQkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSggc2VsZi5jb250ZW50LCAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZSggc2VsZi4kY29udGVudCApICk7XHJcblxyXG5cdFx0XHQkLmZhbmN5Ym94LmFuaW1hdGUoIHNlbGYuJGNvbnRlbnQsIG5ld1BvcywgMTUwICk7XHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUub25UYXAgPSBmdW5jdGlvbihlKSB7XHJcblx0XHR2YXIgc2VsZiAgICA9IHRoaXM7XHJcblx0XHR2YXIgJHRhcmdldCA9ICQoIGUudGFyZ2V0ICk7XHJcblxyXG5cdFx0dmFyIGluc3RhbmNlID0gc2VsZi5pbnN0YW5jZTtcclxuXHRcdHZhciBjdXJyZW50ICA9IGluc3RhbmNlLmN1cnJlbnQ7XHJcblxyXG5cdFx0dmFyIGVuZFBvaW50cyA9ICggZSAmJiBwb2ludGVycyggZSApICkgfHwgc2VsZi5zdGFydFBvaW50cztcclxuXHJcblx0XHR2YXIgdGFwWCA9IGVuZFBvaW50c1swXSA/IGVuZFBvaW50c1swXS54IC0gc2VsZi4kc3RhZ2Uub2Zmc2V0KCkubGVmdCA6IDA7XHJcblx0XHR2YXIgdGFwWSA9IGVuZFBvaW50c1swXSA/IGVuZFBvaW50c1swXS55IC0gc2VsZi4kc3RhZ2Uub2Zmc2V0KCkudG9wICA6IDA7XHJcblxyXG5cdFx0dmFyIHdoZXJlO1xyXG5cclxuXHRcdHZhciBwcm9jZXNzID0gZnVuY3Rpb24gKCBwcmVmaXggKSB7XHJcblxyXG5cdFx0XHR2YXIgYWN0aW9uID0gY3VycmVudC5vcHRzWyBwcmVmaXggXTtcclxuXHJcblx0XHRcdGlmICggJC5pc0Z1bmN0aW9uKCBhY3Rpb24gKSApIHtcclxuXHRcdFx0XHRhY3Rpb24gPSBhY3Rpb24uYXBwbHkoIGluc3RhbmNlLCBbIGN1cnJlbnQsIGUgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoICFhY3Rpb24pIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHN3aXRjaCAoIGFjdGlvbiApIHtcclxuXHJcblx0XHRcdFx0Y2FzZSBcImNsb3NlXCIgOlxyXG5cclxuXHRcdFx0XHRcdGluc3RhbmNlLmNsb3NlKCBzZWxmLnN0YXJ0RXZlbnQgKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgXCJ0b2dnbGVDb250cm9sc1wiIDpcclxuXHJcblx0XHRcdFx0XHRpbnN0YW5jZS50b2dnbGVDb250cm9scyggdHJ1ZSApO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSBcIm5leHRcIiA6XHJcblxyXG5cdFx0XHRcdFx0aW5zdGFuY2UubmV4dCgpO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSBcIm5leHRPckNsb3NlXCIgOlxyXG5cclxuXHRcdFx0XHRcdGlmICggaW5zdGFuY2UuZ3JvdXAubGVuZ3RoID4gMSApIHtcclxuXHRcdFx0XHRcdFx0aW5zdGFuY2UubmV4dCgpO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGluc3RhbmNlLmNsb3NlKCBzZWxmLnN0YXJ0RXZlbnQgKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgXCJ6b29tXCIgOlxyXG5cclxuXHRcdFx0XHRcdGlmICggY3VycmVudC50eXBlID09ICdpbWFnZScgJiYgKCBjdXJyZW50LmlzTG9hZGVkIHx8IGN1cnJlbnQuJGdob3N0ICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIGluc3RhbmNlLmNhblBhbigpICkge1xyXG5cdFx0XHRcdFx0XHRcdGluc3RhbmNlLnNjYWxlVG9GaXQoKTtcclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGluc3RhbmNlLmlzU2NhbGVkRG93bigpICkge1xyXG5cdFx0XHRcdFx0XHRcdGluc3RhbmNlLnNjYWxlVG9BY3R1YWwoIHRhcFgsIHRhcFkgKTtcclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGluc3RhbmNlLmdyb3VwLmxlbmd0aCA8IDIgKSB7XHJcblx0XHRcdFx0XHRcdFx0aW5zdGFuY2UuY2xvc2UoIHNlbGYuc3RhcnRFdmVudCApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBJZ25vcmUgcmlnaHQgY2xpY2tcclxuXHRcdGlmICggZS5vcmlnaW5hbEV2ZW50ICYmIGUub3JpZ2luYWxFdmVudC5idXR0b24gPT0gMiApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNraXAgaWYgY3VycmVudCBzbGlkZSBpcyBub3QgaW4gdGhlIGNlbnRlclxyXG5cdFx0aWYgKCBpbnN0YW5jZS5pc1NsaWRpbmcgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTa2lwIGlmIGNsaWNrZWQgb24gdGhlIHNjcm9sbGJhclxyXG5cdFx0aWYgKCB0YXBYID4gJHRhcmdldFswXS5jbGllbnRXaWR0aCArICR0YXJnZXQub2Zmc2V0KCkubGVmdCApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENoZWNrIHdoZXJlIGlzIGNsaWNrZWRcclxuXHRcdGlmICggJHRhcmdldC5pcyggJy5mYW5jeWJveC1iZywuZmFuY3lib3gtaW5uZXIsLmZhbmN5Ym94LW91dGVyLC5mYW5jeWJveC1jb250YWluZXInICkgKSB7XHJcblx0XHRcdHdoZXJlID0gJ091dHNpZGUnO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoICR0YXJnZXQuaXMoICcuZmFuY3lib3gtc2xpZGUnICkgKSB7XHJcblx0XHRcdHdoZXJlID0gJ1NsaWRlJztcclxuXHJcblx0XHR9IGVsc2UgaWYgICggaW5zdGFuY2UuY3VycmVudC4kY29udGVudCAmJiBpbnN0YW5jZS5jdXJyZW50LiRjb250ZW50LmhhcyggZS50YXJnZXQgKS5sZW5ndGggKSB7XHJcblx0XHQgXHR3aGVyZSA9ICdDb250ZW50JztcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgdGhpcyBpcyBhIGRvdWJsZSB0YXBcclxuXHRcdGlmICggc2VsZi50YXBwZWQgKSB7XHJcblxyXG5cdFx0XHQvLyBTdG9wIHByZXZpb3VzbHkgY3JlYXRlZCBzaW5nbGUgdGFwXHJcblx0XHRcdGNsZWFyVGltZW91dCggc2VsZi50YXBwZWQgKTtcclxuXHRcdFx0c2VsZi50YXBwZWQgPSBudWxsO1xyXG5cclxuXHRcdFx0Ly8gU2tpcCBpZiBkaXN0YW5jZSBiZXR3ZWVuIHRhcHMgaXMgdG9vIGJpZ1xyXG5cdFx0XHRpZiAoIE1hdGguYWJzKCB0YXBYIC0gc2VsZi50YXBYICkgPiA1MCB8fCBNYXRoLmFicyggdGFwWSAtIHNlbGYudGFwWSApID4gNTAgfHwgaW5zdGFuY2UuaXNTbGlkaW5nICkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPSywgbm93IHdlIGFzc3VtZSB0aGF0IHRoaXMgaXMgYSBkb3VibGUtdGFwXHJcblx0XHRcdHByb2Nlc3MoICdkYmxjbGljaycgKyB3aGVyZSApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBTaW5nbGUgdGFwIHdpbGwgYmUgcHJvY2Vzc2VkIGlmIHVzZXIgaGFzIG5vdCBjbGlja2VkIHNlY29uZCB0aW1lIHdpdGhpbiAzMDBtc1xyXG5cdFx0XHQvLyBvciB0aGVyZSBpcyBubyBuZWVkIHRvIHdhaXQgZm9yIGRvdWJsZS10YXBcclxuXHRcdFx0c2VsZi50YXBYID0gdGFwWDtcclxuXHRcdFx0c2VsZi50YXBZID0gdGFwWTtcclxuXHJcblx0XHRcdGlmICggY3VycmVudC5vcHRzWyAnZGJsY2xpY2snICsgd2hlcmUgXSAmJiBjdXJyZW50Lm9wdHNbICdkYmxjbGljaycgKyB3aGVyZSBdICE9PSBjdXJyZW50Lm9wdHNbICdjbGljaycgKyB3aGVyZSBdICkge1xyXG5cdFx0XHRcdHNlbGYudGFwcGVkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHNlbGYudGFwcGVkID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHRwcm9jZXNzKCAnY2xpY2snICsgd2hlcmUgKTtcclxuXHJcblx0XHRcdFx0fSwgMzAwKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cHJvY2VzcyggJ2NsaWNrJyArIHdoZXJlICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHJcblx0JChkb2N1bWVudCkub24oJ29uQWN0aXZhdGUuZmInLCBmdW5jdGlvbiAoZSwgaW5zdGFuY2UpIHtcclxuXHRcdGlmICggaW5zdGFuY2UgJiYgIWluc3RhbmNlLkd1ZXN0dXJlcyApIHtcclxuXHRcdFx0aW5zdGFuY2UuR3Vlc3R1cmVzID0gbmV3IEd1ZXN0dXJlcyggaW5zdGFuY2UgKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0JChkb2N1bWVudCkub24oJ2JlZm9yZUNsb3NlLmZiJywgZnVuY3Rpb24gKGUsIGluc3RhbmNlKSB7XHJcblx0XHRpZiAoIGluc3RhbmNlICYmIGluc3RhbmNlLkd1ZXN0dXJlcyApIHtcclxuXHRcdFx0aW5zdGFuY2UuR3Vlc3R1cmVzLmRlc3Ryb3koKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblxyXG59KCB3aW5kb3csIGRvY3VtZW50LCB3aW5kb3cualF1ZXJ5IHx8IGpRdWVyeSApKTtcclxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBTbGlkZVNob3dcclxuLy8gRW5hYmxlcyBzbGlkZXNob3cgZnVuY3Rpb25hbGl0eVxyXG4vL1xyXG4vLyBFeGFtcGxlIG9mIHVzYWdlOlxyXG4vLyAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCkuU2xpZGVTaG93LnN0YXJ0KClcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuOyhmdW5jdGlvbiAoZG9jdW1lbnQsICQpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdCQuZXh0ZW5kKHRydWUsICQuZmFuY3lib3guZGVmYXVsdHMsIHtcclxuXHRcdGJ0blRwbCA6IHtcclxuXHRcdFx0c2xpZGVTaG93IDpcclxuXHRcdFx0XHQnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXBsYXkgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1wbGF5XCIgdGl0bGU9XCJ7e1BMQVlfU1RBUlR9fVwiPicgK1xyXG5cdFx0XHRcdFx0Jzxzdmcgdmlld0JveD1cIjAgMCA0MCA0MFwiPicgK1xyXG5cdFx0XHRcdFx0XHQnPHBhdGggZD1cIk0xMywxMiBMMjcsMjAgTDEzLDI3IFpcIiAvPicgK1xyXG5cdFx0XHRcdFx0XHQnPHBhdGggZD1cIk0xNSwxMCB2MTkgTTIzLDEwIHYxOVwiIC8+JyArXHJcblx0XHRcdFx0XHQnPC9zdmc+JyArXHJcblx0XHRcdFx0JzwvYnV0dG9uPidcclxuXHRcdH0sXHJcblx0XHRzbGlkZVNob3cgOiB7XHJcblx0XHRcdGF1dG9TdGFydCA6IGZhbHNlLFxyXG4gICAgICAgICAgICBzcGVlZCAgICAgOiAzMDAwXHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdHZhciBTbGlkZVNob3cgPSBmdW5jdGlvbiggaW5zdGFuY2UgKSB7XHJcblx0XHR0aGlzLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcblx0XHR0aGlzLmluaXQoKTtcclxuXHR9O1xyXG5cclxuXHQkLmV4dGVuZCggU2xpZGVTaG93LnByb3RvdHlwZSwge1xyXG5cdFx0dGltZXIgICAgOiBudWxsLFxyXG5cdFx0aXNBY3RpdmUgOiBmYWxzZSxcclxuXHRcdCRidXR0b24gIDogbnVsbCxcclxuXHJcblx0XHRpbml0IDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHRcdHNlbGYuJGJ1dHRvbiA9IHNlbGYuaW5zdGFuY2UuJHJlZnMudG9vbGJhci5maW5kKCdbZGF0YS1mYW5jeWJveC1wbGF5XScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHNlbGYudG9nZ2xlKCk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aWYgKCBzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCA8IDIgfHwgIXNlbGYuaW5zdGFuY2UuZ3JvdXBbIHNlbGYuaW5zdGFuY2UuY3VyckluZGV4IF0ub3B0cy5zbGlkZVNob3cgKSB7XHJcblx0XHRcdFx0c2VsZi4kYnV0dG9uLmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRzZXQgOiBmdW5jdGlvbiggZm9yY2UgKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHRcdC8vIENoZWNrIGlmIHJlYWNoZWQgbGFzdCBlbGVtZW50XHJcblx0XHRcdGlmICggc2VsZi5pbnN0YW5jZSAmJiBzZWxmLmluc3RhbmNlLmN1cnJlbnQgJiYgKGZvcmNlID09PSB0cnVlIHx8IHNlbGYuaW5zdGFuY2UuY3VycmVudC5vcHRzLmxvb3AgfHwgc2VsZi5pbnN0YW5jZS5jdXJySW5kZXggPCBzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCAtIDEgKSkge1xyXG5cdFx0XHRcdHNlbGYudGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aWYgKCBzZWxmLmlzQWN0aXZlICkge1xyXG5cdFx0XHRcdFx0XHRzZWxmLmluc3RhbmNlLmp1bXBUbyggKHNlbGYuaW5zdGFuY2UuY3VyckluZGV4ICsgMSkgJSBzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9LCBzZWxmLmluc3RhbmNlLmN1cnJlbnQub3B0cy5zbGlkZVNob3cuc3BlZWQpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzZWxmLnN0b3AoKTtcclxuXHRcdFx0XHRzZWxmLmluc3RhbmNlLmlkbGVTZWNvbmRzQ291bnRlciA9IDA7XHJcblx0XHRcdFx0c2VsZi5pbnN0YW5jZS5zaG93Q29udHJvbHMoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRjbGVhciA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0XHRjbGVhclRpbWVvdXQoIHNlbGYudGltZXIgKTtcclxuXHJcblx0XHRcdHNlbGYudGltZXIgPSBudWxsO1xyXG5cdFx0fSxcclxuXHJcblx0XHRzdGFydCA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdHZhciBjdXJyZW50ID0gc2VsZi5pbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuXHRcdFx0aWYgKCBjdXJyZW50ICkge1xyXG5cdFx0XHRcdHNlbGYuaXNBY3RpdmUgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRzZWxmLiRidXR0b25cclxuXHRcdFx0XHRcdC5hdHRyKCAndGl0bGUnLCBjdXJyZW50Lm9wdHMuaTE4blsgY3VycmVudC5vcHRzLmxhbmcgXS5QTEFZX1NUT1AgKVxyXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtYnV0dG9uLS1wbGF5JyApXHJcblx0XHRcdFx0XHQuYWRkQ2xhc3MoICdmYW5jeWJveC1idXR0b24tLXBhdXNlJyApO1xyXG5cclxuXHRcdFx0XHRcdHNlbGYuc2V0KCB0cnVlICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0c3RvcCA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdHZhciBjdXJyZW50ID0gc2VsZi5pbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuXHRcdFx0c2VsZi5jbGVhcigpO1xyXG5cclxuXHRcdFx0c2VsZi4kYnV0dG9uXHJcblx0XHRcdFx0LmF0dHIoICd0aXRsZScsIGN1cnJlbnQub3B0cy5pMThuWyBjdXJyZW50Lm9wdHMubGFuZyBdLlBMQVlfU1RBUlQgKVxyXG5cdFx0XHRcdC5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LWJ1dHRvbi0tcGF1c2UnIClcclxuXHRcdFx0XHQuYWRkQ2xhc3MoICdmYW5jeWJveC1idXR0b24tLXBsYXknICk7XHJcblxyXG5cdFx0XHRzZWxmLmlzQWN0aXZlID0gZmFsc2U7XHJcblx0XHR9LFxyXG5cclxuXHRcdHRvZ2dsZSA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0XHRpZiAoIHNlbGYuaXNBY3RpdmUgKSB7XHJcblx0XHRcdFx0c2VsZi5zdG9wKCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlbGYuc3RhcnQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHR9KTtcclxuXHJcblx0JChkb2N1bWVudCkub24oe1xyXG5cdFx0J29uSW5pdC5mYicgOiBmdW5jdGlvbihlLCBpbnN0YW5jZSkge1xyXG5cdFx0XHRpZiAoIGluc3RhbmNlICYmICFpbnN0YW5jZS5TbGlkZVNob3cgKSB7XHJcblx0XHRcdFx0aW5zdGFuY2UuU2xpZGVTaG93ID0gbmV3IFNsaWRlU2hvdyggaW5zdGFuY2UgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQnYmVmb3JlU2hvdy5mYicgOiBmdW5jdGlvbihlLCBpbnN0YW5jZSwgY3VycmVudCwgZmlyc3RSdW4pIHtcclxuXHRcdFx0dmFyIFNsaWRlU2hvdyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlNsaWRlU2hvdztcclxuXHJcblx0XHRcdGlmICggZmlyc3RSdW4gKSB7XHJcblxyXG5cdFx0XHRcdGlmICggU2xpZGVTaG93ICYmIGN1cnJlbnQub3B0cy5zbGlkZVNob3cuYXV0b1N0YXJ0ICkge1xyXG5cdFx0XHRcdFx0U2xpZGVTaG93LnN0YXJ0KCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggU2xpZGVTaG93ICYmIFNsaWRlU2hvdy5pc0FjdGl2ZSApICB7XHJcblx0XHRcdFx0U2xpZGVTaG93LmNsZWFyKCk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0J2FmdGVyU2hvdy5mYicgOiBmdW5jdGlvbihlLCBpbnN0YW5jZSwgY3VycmVudCkge1xyXG5cdFx0XHR2YXIgU2xpZGVTaG93ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuU2xpZGVTaG93O1xyXG5cclxuXHRcdFx0aWYgKCBTbGlkZVNob3cgJiYgU2xpZGVTaG93LmlzQWN0aXZlICkge1xyXG5cdFx0XHRcdFNsaWRlU2hvdy5zZXQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQnYWZ0ZXJLZXlkb3duLmZiJyA6IGZ1bmN0aW9uKGUsIGluc3RhbmNlLCBjdXJyZW50LCBrZXlwcmVzcywga2V5Y29kZSkge1xyXG5cdFx0XHR2YXIgU2xpZGVTaG93ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuU2xpZGVTaG93O1xyXG5cclxuXHRcdFx0Ly8gXCJQXCIgb3IgU3BhY2ViYXJcclxuXHRcdFx0aWYgKCBTbGlkZVNob3cgJiYgY3VycmVudC5vcHRzLnNsaWRlU2hvdyAmJiAoIGtleWNvZGUgPT09IDgwIHx8IGtleWNvZGUgPT09IDMyICkgJiYgISQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoICdidXR0b24sYSxpbnB1dCcgKSApIHtcclxuXHRcdFx0XHRrZXlwcmVzcy5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0XHRTbGlkZVNob3cudG9nZ2xlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0J2JlZm9yZUNsb3NlLmZiIG9uRGVhY3RpdmF0ZS5mYicgOiBmdW5jdGlvbihlLCBpbnN0YW5jZSkge1xyXG5cdFx0XHR2YXIgU2xpZGVTaG93ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuU2xpZGVTaG93O1xyXG5cclxuXHRcdFx0aWYgKCBTbGlkZVNob3cgKSB7XHJcblx0XHRcdFx0U2xpZGVTaG93LnN0b3AoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHQvLyBQYWdlIFZpc2liaWxpdHkgQVBJIHRvIHBhdXNlIHNsaWRlc2hvdyB3aGVuIHdpbmRvdyBpcyBub3QgYWN0aXZlXHJcblx0JChkb2N1bWVudCkub24oXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGluc3RhbmNlICA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKTtcclxuXHRcdHZhciBTbGlkZVNob3cgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5TbGlkZVNob3c7XHJcblxyXG5cdFx0aWYgKCBTbGlkZVNob3cgJiYgU2xpZGVTaG93LmlzQWN0aXZlICkge1xyXG5cdFx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiApIHtcclxuXHRcdFx0XHRTbGlkZVNob3cuY2xlYXIoKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0U2xpZGVTaG93LnNldCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG59KCBkb2N1bWVudCwgd2luZG93LmpRdWVyeSB8fCBqUXVlcnkgKSk7XHJcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gRnVsbFNjcmVlblxyXG4vLyBBZGRzIGZ1bGxzY3JlZW4gZnVuY3Rpb25hbGl0eVxyXG4vL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG47KGZ1bmN0aW9uIChkb2N1bWVudCwgJCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0Ly8gQ29sbGVjdGlvbiBvZiBtZXRob2RzIHN1cHBvcnRlZCBieSB1c2VyIGJyb3dzZXJcclxuXHR2YXIgZm4gPSAoZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBmbk1hcCA9IFtcclxuXHRcdFx0W1xyXG5cdFx0XHRcdCdyZXF1ZXN0RnVsbHNjcmVlbicsXHJcblx0XHRcdFx0J2V4aXRGdWxsc2NyZWVuJyxcclxuXHRcdFx0XHQnZnVsbHNjcmVlbkVsZW1lbnQnLFxyXG5cdFx0XHRcdCdmdWxsc2NyZWVuRW5hYmxlZCcsXHJcblx0XHRcdFx0J2Z1bGxzY3JlZW5jaGFuZ2UnLFxyXG5cdFx0XHRcdCdmdWxsc2NyZWVuZXJyb3InXHJcblx0XHRcdF0sXHJcblx0XHRcdC8vIG5ldyBXZWJLaXRcclxuXHRcdFx0W1xyXG5cdFx0XHRcdCd3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbicsXHJcblx0XHRcdFx0J3dlYmtpdEV4aXRGdWxsc2NyZWVuJyxcclxuXHRcdFx0XHQnd2Via2l0RnVsbHNjcmVlbkVsZW1lbnQnLFxyXG5cdFx0XHRcdCd3ZWJraXRGdWxsc2NyZWVuRW5hYmxlZCcsXHJcblx0XHRcdFx0J3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxyXG5cdFx0XHRcdCd3ZWJraXRmdWxsc2NyZWVuZXJyb3InXHJcblxyXG5cdFx0XHRdLFxyXG5cdFx0XHQvLyBvbGQgV2ViS2l0IChTYWZhcmkgNS4xKVxyXG5cdFx0XHRbXHJcblx0XHRcdFx0J3dlYmtpdFJlcXVlc3RGdWxsU2NyZWVuJyxcclxuXHRcdFx0XHQnd2Via2l0Q2FuY2VsRnVsbFNjcmVlbicsXHJcblx0XHRcdFx0J3dlYmtpdEN1cnJlbnRGdWxsU2NyZWVuRWxlbWVudCcsXHJcblx0XHRcdFx0J3dlYmtpdENhbmNlbEZ1bGxTY3JlZW4nLFxyXG5cdFx0XHRcdCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJyxcclxuXHRcdFx0XHQnd2Via2l0ZnVsbHNjcmVlbmVycm9yJ1xyXG5cclxuXHRcdFx0XSxcclxuXHRcdFx0W1xyXG5cdFx0XHRcdCdtb3pSZXF1ZXN0RnVsbFNjcmVlbicsXHJcblx0XHRcdFx0J21vekNhbmNlbEZ1bGxTY3JlZW4nLFxyXG5cdFx0XHRcdCdtb3pGdWxsU2NyZWVuRWxlbWVudCcsXHJcblx0XHRcdFx0J21vekZ1bGxTY3JlZW5FbmFibGVkJyxcclxuXHRcdFx0XHQnbW96ZnVsbHNjcmVlbmNoYW5nZScsXHJcblx0XHRcdFx0J21vemZ1bGxzY3JlZW5lcnJvcidcclxuXHRcdFx0XSxcclxuXHRcdFx0W1xyXG5cdFx0XHRcdCdtc1JlcXVlc3RGdWxsc2NyZWVuJyxcclxuXHRcdFx0XHQnbXNFeGl0RnVsbHNjcmVlbicsXHJcblx0XHRcdFx0J21zRnVsbHNjcmVlbkVsZW1lbnQnLFxyXG5cdFx0XHRcdCdtc0Z1bGxzY3JlZW5FbmFibGVkJyxcclxuXHRcdFx0XHQnTVNGdWxsc2NyZWVuQ2hhbmdlJyxcclxuXHRcdFx0XHQnTVNGdWxsc2NyZWVuRXJyb3InXHJcblx0XHRcdF1cclxuXHRcdF07XHJcblxyXG5cdFx0dmFyIHZhbDtcclxuXHRcdHZhciByZXQgPSB7fTtcclxuXHRcdHZhciBpLCBqO1xyXG5cclxuXHRcdGZvciAoIGkgPSAwOyBpIDwgZm5NYXAubGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdHZhbCA9IGZuTWFwWyBpIF07XHJcblxyXG5cdFx0XHRpZiAoIHZhbCAmJiB2YWxbIDEgXSBpbiBkb2N1bWVudCApIHtcclxuXHRcdFx0XHRmb3IgKCBqID0gMDsgaiA8IHZhbC5sZW5ndGg7IGorKyApIHtcclxuXHRcdFx0XHRcdHJldFsgZm5NYXBbIDAgXVsgaiBdIF0gPSB2YWxbIGogXTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fSkoKTtcclxuXHJcblx0Ly8gSWYgYnJvd3NlciBkb2VzIG5vdCBoYXZlIEZ1bGwgU2NyZWVuIEFQSSwgdGhlbiBzaW1wbHkgdW5zZXQgZGVmYXVsdCBidXR0b24gdGVtcGxhdGUgYW5kIHN0b3BcclxuXHRpZiAoICFmbiApIHtcclxuXHJcblx0XHRpZiAoICQgJiYgJC5mYW5jeWJveCApIHtcclxuXHRcdFx0JC5mYW5jeWJveC5kZWZhdWx0cy5idG5UcGwuZnVsbFNjcmVlbiA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHZhciBGdWxsU2NyZWVuID0ge1xyXG5cclxuXHRcdHJlcXVlc3QgOiBmdW5jdGlvbiAoIGVsZW0gKSB7XHJcblxyXG5cdFx0XHRlbGVtID0gZWxlbSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cdFx0XHRlbGVtWyBmbi5yZXF1ZXN0RnVsbHNjcmVlbiBdKCBlbGVtLkFMTE9XX0tFWUJPQVJEX0lOUFVUICk7XHJcblxyXG5cdFx0fSxcclxuXHRcdGV4aXQgOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRkb2N1bWVudFsgZm4uZXhpdEZ1bGxzY3JlZW4gXSgpO1xyXG5cclxuXHRcdH0sXHJcblx0XHR0b2dnbGUgOiBmdW5jdGlvbiAoIGVsZW0gKSB7XHJcblxyXG5cdFx0XHRlbGVtID0gZWxlbSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cdFx0XHRpZiAoIHRoaXMuaXNGdWxsc2NyZWVuKCkgKSB7XHJcblx0XHRcdFx0dGhpcy5leGl0KCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMucmVxdWVzdCggZWxlbSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSxcclxuXHRcdGlzRnVsbHNjcmVlbiA6IGZ1bmN0aW9uKCkgIHtcclxuXHJcblx0XHRcdHJldHVybiBCb29sZWFuKCBkb2N1bWVudFsgZm4uZnVsbHNjcmVlbkVsZW1lbnQgXSApO1xyXG5cclxuXHRcdH0sXHJcblx0XHRlbmFibGVkIDogZnVuY3Rpb24oKSAge1xyXG5cclxuXHRcdFx0cmV0dXJuIEJvb2xlYW4oIGRvY3VtZW50WyBmbi5mdWxsc2NyZWVuRW5hYmxlZCBdICk7XHJcblxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdCQuZXh0ZW5kKHRydWUsICQuZmFuY3lib3guZGVmYXVsdHMsIHtcclxuXHRcdGJ0blRwbCA6IHtcclxuXHRcdFx0ZnVsbFNjcmVlbiA6XHJcblx0XHRcdFx0JzxidXR0b24gZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tZnVsbHNjcmVlblwiIHRpdGxlPVwie3tGVUxMX1NDUkVFTn19XCI+JyArXHJcblx0XHRcdFx0XHQnPHN2ZyB2aWV3Qm94PVwiMCAwIDQwIDQwXCI+JyArXHJcblx0XHRcdFx0XHRcdCc8cGF0aCBkPVwiTTksMTIgaDIyIHYxNiBoLTIyIHYtMTYgdjE2IGgyMiB2LTE2IFpcIiAvPicgK1xyXG5cdFx0XHRcdFx0Jzwvc3ZnPicgK1xyXG5cdFx0XHRcdCc8L2J1dHRvbj4nXHJcblx0XHR9LFxyXG5cdFx0ZnVsbFNjcmVlbiA6IHtcclxuXHRcdFx0YXV0b1N0YXJ0IDogZmFsc2VcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0JChkb2N1bWVudCkub24oe1xyXG5cdFx0J29uSW5pdC5mYicgOiBmdW5jdGlvbihlLCBpbnN0YW5jZSkge1xyXG5cdFx0XHR2YXIgJGNvbnRhaW5lcjtcclxuXHJcblx0XHRcdGlmICggaW5zdGFuY2UgJiYgaW5zdGFuY2UuZ3JvdXBbIGluc3RhbmNlLmN1cnJJbmRleCBdLm9wdHMuZnVsbFNjcmVlbiApIHtcclxuXHRcdFx0XHQkY29udGFpbmVyID0gaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyO1xyXG5cclxuXHRcdFx0XHQkY29udGFpbmVyLm9uKCdjbGljay5mYi1mdWxsc2NyZWVuJywgJ1tkYXRhLWZhbmN5Ym94LWZ1bGxzY3JlZW5dJywgZnVuY3Rpb24oZSkge1xyXG5cclxuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHRcdFx0RnVsbFNjcmVlbi50b2dnbGUoICRjb250YWluZXJbIDAgXSApO1xyXG5cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0aWYgKCBpbnN0YW5jZS5vcHRzLmZ1bGxTY3JlZW4gJiYgaW5zdGFuY2Uub3B0cy5mdWxsU2NyZWVuLmF1dG9TdGFydCA9PT0gdHJ1ZSApIHtcclxuXHRcdFx0XHRcdEZ1bGxTY3JlZW4ucmVxdWVzdCggJGNvbnRhaW5lclsgMCBdICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBFeHBvc2UgQVBJXHJcblx0XHRcdFx0aW5zdGFuY2UuRnVsbFNjcmVlbiA9IEZ1bGxTY3JlZW47XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBpbnN0YW5jZSApIHtcclxuXHRcdFx0XHRpbnN0YW5jZS4kcmVmcy50b29sYmFyLmZpbmQoJ1tkYXRhLWZhbmN5Ym94LWZ1bGxzY3JlZW5dJykuaGlkZSgpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHQnYWZ0ZXJLZXlkb3duLmZiJyA6IGZ1bmN0aW9uKGUsIGluc3RhbmNlLCBjdXJyZW50LCBrZXlwcmVzcywga2V5Y29kZSkge1xyXG5cclxuXHRcdFx0Ly8gXCJQXCIgb3IgU3BhY2ViYXJcclxuXHRcdFx0aWYgKCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5GdWxsU2NyZWVuICYmIGtleWNvZGUgPT09IDcwICkge1xyXG5cdFx0XHRcdGtleXByZXNzLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHRcdGluc3RhbmNlLkZ1bGxTY3JlZW4udG9nZ2xlKCBpbnN0YW5jZS4kcmVmcy5jb250YWluZXJbIDAgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHQnYmVmb3JlQ2xvc2UuZmInIDogZnVuY3Rpb24oIGluc3RhbmNlICkge1xyXG5cdFx0XHRpZiAoIGluc3RhbmNlICYmIGluc3RhbmNlLkZ1bGxTY3JlZW4gKSB7XHJcblx0XHRcdFx0RnVsbFNjcmVlbi5leGl0KCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0JChkb2N1bWVudCkub24oZm4uZnVsbHNjcmVlbmNoYW5nZSwgZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaXNGdWxsc2NyZWVuID0gRnVsbFNjcmVlbi5pc0Z1bGxzY3JlZW4oKSxcclxuXHRcdFx0aW5zdGFuY2UgPSAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCk7XHJcblxyXG5cdFx0aWYgKCBpbnN0YW5jZSApIHtcclxuXHJcblx0XHRcdC8vIElmIGltYWdlIGlzIHpvb21pbmcsIHRoZW4gZm9yY2UgdG8gc3RvcCBhbmQgcmVwb3NpdGlvbiBwcm9wZXJseVxyXG5cdFx0XHRpZiAoIGluc3RhbmNlLmN1cnJlbnQgJiYgaW5zdGFuY2UuY3VycmVudC50eXBlID09PSAnaW1hZ2UnICYmIGluc3RhbmNlLmlzQW5pbWF0aW5nICkge1xyXG5cdFx0XHRcdGluc3RhbmNlLmN1cnJlbnQuJGNvbnRlbnQuY3NzKCAndHJhbnNpdGlvbicsICdub25lJyApO1xyXG5cclxuXHRcdFx0XHRpbnN0YW5jZS5pc0FuaW1hdGluZyA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRpbnN0YW5jZS51cGRhdGUoIHRydWUsIHRydWUsIDAgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aW5zdGFuY2UudHJpZ2dlciggJ29uRnVsbHNjcmVlbkNoYW5nZScsIGlzRnVsbHNjcmVlbiApO1xyXG5cclxuXHRcdFx0aW5zdGFuY2UuJHJlZnMuY29udGFpbmVyLnRvZ2dsZUNsYXNzKCAnZmFuY3lib3gtaXMtZnVsbHNjcmVlbicsIGlzRnVsbHNjcmVlbiApO1xyXG5cdFx0fVxyXG5cclxuXHR9KTtcclxuXHJcbn0oIGRvY3VtZW50LCB3aW5kb3cualF1ZXJ5IHx8IGpRdWVyeSApKTtcclxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBUaHVtYnNcclxuLy8gRGlzcGxheXMgdGh1bWJuYWlscyBpbiBhIGdyaWRcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuOyhmdW5jdGlvbiAoZG9jdW1lbnQsICQpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdC8vIE1ha2Ugc3VyZSB0aGVyZSBhcmUgZGVmYXVsdCB2YWx1ZXNcclxuXHQkLmZhbmN5Ym94LmRlZmF1bHRzID0gJC5leHRlbmQodHJ1ZSwge1xyXG5cdFx0YnRuVHBsIDoge1xyXG5cdFx0XHR0aHVtYnMgOlxyXG5cdFx0XHQnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXRodW1icyBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLXRodW1ic1wiIHRpdGxlPVwie3tUSFVNQlN9fVwiPicgK1xyXG5cdFx0XHRcdCc8c3ZnIHZpZXdCb3g9XCIwIDAgMTIwIDEyMFwiPicgK1xyXG5cdFx0XHRcdFx0JzxwYXRoIGQ9XCJNMzAsMzAgaDE0IHYxNCBoLTE0IFogTTUwLDMwIGgxNCB2MTQgaC0xNCBaIE03MCwzMCBoMTQgdjE0IGgtMTQgWiBNMzAsNTAgaDE0IHYxNCBoLTE0IFogTTUwLDUwIGgxNCB2MTQgaC0xNCBaIE03MCw1MCBoMTQgdjE0IGgtMTQgWiBNMzAsNzAgaDE0IHYxNCBoLTE0IFogTTUwLDcwIGgxNCB2MTQgaC0xNCBaIE03MCw3MCBoMTQgdjE0IGgtMTQgWlwiIC8+JyArXHJcblx0XHRcdFx0Jzwvc3ZnPicgK1xyXG5cdFx0XHQnPC9idXR0b24+J1xyXG5cdFx0fSxcclxuXHRcdHRodW1icyA6IHtcclxuXHRcdFx0YXV0b1N0YXJ0ICAgOiBmYWxzZSwgICAgICAgICAgICAgICAgICAvLyBEaXNwbGF5IHRodW1ibmFpbHMgb24gb3BlbmluZ1xyXG5cdFx0XHRoaWRlT25DbG9zZSA6IHRydWUsICAgICAgICAgICAgICAgICAgIC8vIEhpZGUgdGh1bWJuYWlsIGdyaWQgd2hlbiBjbG9zaW5nIGFuaW1hdGlvbiBzdGFydHNcclxuXHRcdFx0cGFyZW50RWwgICAgOiAnLmZhbmN5Ym94LWNvbnRhaW5lcicsICAvLyBDb250YWluZXIgaXMgaW5qZWN0ZWQgaW50byB0aGlzIGVsZW1lbnRcclxuXHRcdFx0YXhpcyAgICAgICAgOiAneScgICAgICAgICAgICAgICAgICAgICAvLyBWZXJ0aWNhbCAoeSkgb3IgaG9yaXpvbnRhbCAoeCkgc2Nyb2xsaW5nXHJcblx0XHR9XHJcblx0fSwgJC5mYW5jeWJveC5kZWZhdWx0cyk7XHJcblxyXG5cdHZhciBGYW5jeVRodW1icyA9IGZ1bmN0aW9uKCBpbnN0YW5jZSApIHtcclxuXHRcdHRoaXMuaW5pdCggaW5zdGFuY2UgKTtcclxuXHR9O1xyXG5cclxuXHQkLmV4dGVuZCggRmFuY3lUaHVtYnMucHJvdG90eXBlLCB7XHJcblxyXG5cdFx0JGJ1dHRvblx0XHQ6IG51bGwsXHJcblx0XHQkZ3JpZFx0XHQ6IG51bGwsXHJcblx0XHQkbGlzdFx0XHQ6IG51bGwsXHJcblx0XHRpc1Zpc2libGVcdDogZmFsc2UsXHJcblx0XHRpc0FjdGl2ZVx0OiBmYWxzZSxcclxuXHJcblx0XHRpbml0IDogZnVuY3Rpb24oIGluc3RhbmNlICkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0XHRzZWxmLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcblxyXG5cdFx0XHRpbnN0YW5jZS5UaHVtYnMgPSBzZWxmO1xyXG5cclxuXHRcdFx0Ly8gRW5hYmxlIHRodW1icyBpZiBhdCBsZWFzdCB0d28gZ3JvdXAgaXRlbXMgaGF2ZSB0aHVtYm5haWxzXHJcblx0XHRcdHZhciBmaXJzdCAgPSBpbnN0YW5jZS5ncm91cFswXSxcclxuXHRcdFx0XHRzZWNvbmQgPSBpbnN0YW5jZS5ncm91cFsxXTtcclxuXHJcblx0XHRcdHNlbGYub3B0cyA9IGluc3RhbmNlLmdyb3VwWyBpbnN0YW5jZS5jdXJySW5kZXggXS5vcHRzLnRodW1icztcclxuXHJcblx0XHRcdHNlbGYuJGJ1dHRvbiA9IGluc3RhbmNlLiRyZWZzLnRvb2xiYXIuZmluZCggJ1tkYXRhLWZhbmN5Ym94LXRodW1ic10nICk7XHJcblxyXG5cdFx0XHRpZiAoIHNlbGYub3B0cyAmJiBmaXJzdCAmJiBzZWNvbmQgJiYgKFxyXG5cdFx0ICAgIFx0XHQoIGZpcnN0LnR5cGUgPT0gJ2ltYWdlJyAgfHwgZmlyc3Qub3B0cy50aHVtYiAgfHwgZmlyc3Qub3B0cy4kdGh1bWIgKSAmJlxyXG5cdFx0ICAgIFx0XHQoIHNlY29uZC50eXBlID09ICdpbWFnZScgfHwgc2Vjb25kLm9wdHMudGh1bWIgfHwgc2Vjb25kLm9wdHMuJHRodW1iIClcclxuXHRcdFx0KSkge1xyXG5cclxuXHRcdFx0XHRzZWxmLiRidXR0b24uc2hvdygpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0c2VsZi50b2dnbGUoKTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0c2VsZi5pc0FjdGl2ZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlbGYuJGJ1dHRvbi5oaWRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0Y3JlYXRlIDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRpbnN0YW5jZSA9IHNlbGYuaW5zdGFuY2UsXHJcblx0XHRcdFx0cGFyZW50RWwgPSBzZWxmLm9wdHMucGFyZW50RWwsXHJcblx0XHRcdFx0bGlzdCxcclxuXHRcdFx0XHRzcmM7XHJcblxyXG5cdFx0XHRzZWxmLiRncmlkID0gJCgnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXRodW1icyBmYW5jeWJveC10aHVtYnMtJyArIHNlbGYub3B0cy5heGlzICsgJ1wiPjwvZGl2PicpLmFwcGVuZFRvKCBpbnN0YW5jZS4kcmVmcy5jb250YWluZXIuZmluZCggcGFyZW50RWwgKS5hZGRCYWNrKCkuZmlsdGVyKCBwYXJlbnRFbCApICk7XHJcblxyXG5cdFx0XHQvLyBCdWlsZCBsaXN0IEhUTUxcclxuXHRcdFx0bGlzdCA9ICc8dWw+JztcclxuXHJcblx0XHRcdCQuZWFjaChpbnN0YW5jZS5ncm91cCwgZnVuY3Rpb24oIGksIGl0ZW0gKSB7XHJcblx0XHRcdFx0c3JjID0gaXRlbS5vcHRzLnRodW1iIHx8ICggaXRlbS5vcHRzLiR0aHVtYiA/IGl0ZW0ub3B0cy4kdGh1bWIuYXR0ciggJ3NyYycgKSA6IG51bGwgKTtcclxuXHJcblx0XHRcdFx0aWYgKCAhc3JjICYmIGl0ZW0udHlwZSA9PT0gJ2ltYWdlJyApIHtcclxuXHRcdFx0XHRcdHNyYyA9IGl0ZW0uc3JjO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBzcmMgJiYgc3JjLmxlbmd0aCApIHtcclxuXHRcdFx0XHRcdGxpc3QgKz0gJzxsaSBkYXRhLWluZGV4PVwiJyArIGkgKyAnXCIgIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwiZmFuY3lib3gtdGh1bWJzLWxvYWRpbmdcIj48aW1nIGRhdGEtc3JjPVwiJyArIHNyYyArICdcIiAvPjwvbGk+JztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0bGlzdCArPSAnPC91bD4nO1xyXG5cclxuXHRcdFx0c2VsZi4kbGlzdCA9ICQoIGxpc3QgKS5hcHBlbmRUbyggc2VsZi4kZ3JpZCApLm9uKCdjbGljaycsICdsaScsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGluc3RhbmNlLmp1bXBUbyggJCh0aGlzKS5kYXRhKCdpbmRleCcpICk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0c2VsZi4kbGlzdC5maW5kKCAnaW1nJyApLmhpZGUoKS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgJHBhcmVudFx0XHQ9ICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC10aHVtYnMtbG9hZGluZycgKSxcclxuXHRcdFx0XHRcdHRodW1iV2lkdGhcdD0gJHBhcmVudC5vdXRlcldpZHRoKCksXHJcblx0XHRcdFx0XHR0aHVtYkhlaWdodFx0PSAkcGFyZW50Lm91dGVySGVpZ2h0KCksXHJcblx0XHRcdFx0XHR3aWR0aCxcclxuXHRcdFx0XHRcdGhlaWdodCxcclxuXHRcdFx0XHRcdHdpZHRoUmF0aW8sXHJcblx0XHRcdFx0XHRoZWlnaHRSYXRpbztcclxuXHJcblx0XHRcdFx0d2lkdGggID0gdGhpcy5uYXR1cmFsV2lkdGhcdHx8IHRoaXMud2lkdGg7XHJcblx0XHRcdFx0aGVpZ2h0ID0gdGhpcy5uYXR1cmFsSGVpZ2h0XHR8fCB0aGlzLmhlaWdodDtcclxuXHJcblx0XHRcdFx0Ly8gQ2FsY3VsYXRlIHRodW1ibmFpbCBkaW1lbnNpb25zOyBjZW50ZXIgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5XHJcblx0XHRcdFx0d2lkdGhSYXRpbyAgPSB3aWR0aCAgLyB0aHVtYldpZHRoO1xyXG5cdFx0XHRcdGhlaWdodFJhdGlvID0gaGVpZ2h0IC8gdGh1bWJIZWlnaHQ7XHJcblxyXG5cdFx0XHRcdGlmICh3aWR0aFJhdGlvID49IDEgJiYgaGVpZ2h0UmF0aW8gPj0gMSkge1xyXG5cdFx0XHRcdFx0aWYgKHdpZHRoUmF0aW8gPiBoZWlnaHRSYXRpbykge1xyXG5cdFx0XHRcdFx0XHR3aWR0aCAgPSB3aWR0aCAvIGhlaWdodFJhdGlvO1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgPSB0aHVtYkhlaWdodDtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR3aWR0aCAgPSB0aHVtYldpZHRoO1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgPSBoZWlnaHQgLyB3aWR0aFJhdGlvO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0JCh0aGlzKS5jc3Moe1xyXG5cdFx0XHRcdFx0d2lkdGggICAgICAgICA6IE1hdGguZmxvb3Iod2lkdGgpLFxyXG5cdFx0XHRcdFx0aGVpZ2h0ICAgICAgICA6IE1hdGguZmxvb3IoaGVpZ2h0KSxcclxuXHRcdFx0XHRcdCdtYXJnaW4tdG9wJyAgOiBoZWlnaHQgPiB0aHVtYkhlaWdodCA/ICggTWF0aC5mbG9vcih0aHVtYkhlaWdodCAqIDAuMyAtIGhlaWdodCAqIDAuMyApICkgOiBNYXRoLmZsb29yKHRodW1iSGVpZ2h0ICogMC41IC0gaGVpZ2h0ICogMC41ICksXHJcblx0XHRcdFx0XHQnbWFyZ2luLWxlZnQnIDogTWF0aC5mbG9vcih0aHVtYldpZHRoICogMC41IC0gd2lkdGggKiAwLjUgKVxyXG5cdFx0XHRcdH0pLnNob3coKTtcclxuXHJcblx0XHRcdH0pXHJcblx0XHRcdC5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHRoaXMuc3JjID0gJCggdGhpcyApLmRhdGEoICdzcmMnICk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aWYgKCBzZWxmLm9wdHMuYXhpcyA9PT0gJ3gnICkge1xyXG5cdFx0XHRcdHNlbGYuJGxpc3Qud2lkdGgoIHBhcnNlSW50KCBzZWxmLiRncmlkLmNzcyhcInBhZGRpbmctcmlnaHRcIikgKSArICggaW5zdGFuY2UuZ3JvdXAubGVuZ3RoICogc2VsZi4kbGlzdC5jaGlsZHJlbigpLmVxKDApLm91dGVyV2lkdGgodHJ1ZSkgKSArICdweCcgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRmb2N1cyA6IGZ1bmN0aW9uKCBkdXJhdGlvbiApIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxyXG5cdFx0XHRcdCRsaXN0ID0gc2VsZi4kbGlzdCxcclxuXHRcdFx0XHR0aHVtYixcclxuXHRcdFx0XHR0aHVtYlBvcztcclxuXHJcblx0XHRcdGlmICggc2VsZi5pbnN0YW5jZS5jdXJyZW50ICkge1xyXG5cdFx0XHRcdHRodW1iID0gJGxpc3QuY2hpbGRyZW4oKVxyXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtdGh1bWJzLWFjdGl2ZScgKVxyXG5cdFx0XHRcdFx0LmZpbHRlcignW2RhdGEtaW5kZXg9XCInICsgc2VsZi5pbnN0YW5jZS5jdXJyZW50LmluZGV4ICArICdcIl0nKVxyXG5cdFx0XHRcdFx0LmFkZENsYXNzKCdmYW5jeWJveC10aHVtYnMtYWN0aXZlJyk7XHJcblxyXG5cdFx0XHRcdHRodW1iUG9zID0gdGh1bWIucG9zaXRpb24oKTtcclxuXHJcblx0XHRcdFx0Ly8gQ2hlY2sgaWYgbmVlZCB0byBzY3JvbGwgdG8gbWFrZSBjdXJyZW50IHRodW1iIHZpc2libGVcclxuXHRcdFx0XHRpZiAoIHNlbGYub3B0cy5heGlzID09PSAneScgJiYgKCB0aHVtYlBvcy50b3AgPCAwIHx8IHRodW1iUG9zLnRvcCA+ICggJGxpc3QuaGVpZ2h0KCkgLSB0aHVtYi5vdXRlckhlaWdodCgpICkgKSApIHtcclxuXHRcdFx0XHRcdCRsaXN0LnN0b3AoKS5hbmltYXRlKHsgJ3Njcm9sbFRvcCcgOiAkbGlzdC5zY3JvbGxUb3AoKSArIHRodW1iUG9zLnRvcCB9LCBkdXJhdGlvbik7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHNlbGYub3B0cy5heGlzID09PSAneCcgJiYgKFxyXG5cdFx0XHRcdFx0XHR0aHVtYlBvcy5sZWZ0IDwgJGxpc3QucGFyZW50KCkuc2Nyb2xsTGVmdCgpIHx8XHJcblx0XHRcdFx0XHRcdHRodW1iUG9zLmxlZnQgPiAoICRsaXN0LnBhcmVudCgpLnNjcm9sbExlZnQoKSArICggJGxpc3QucGFyZW50KCkud2lkdGgoKSAtIHRodW1iLm91dGVyV2lkdGgoKSApIClcclxuXHRcdFx0XHRcdClcclxuXHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdCRsaXN0LnBhcmVudCgpLnN0b3AoKS5hbmltYXRlKHsgJ3Njcm9sbExlZnQnIDogdGh1bWJQb3MubGVmdCB9LCBkdXJhdGlvbik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHVwZGF0ZSA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0aGlzLmluc3RhbmNlLiRyZWZzLmNvbnRhaW5lci50b2dnbGVDbGFzcyggJ2ZhbmN5Ym94LXNob3ctdGh1bWJzJywgdGhpcy5pc1Zpc2libGUgKTtcclxuXHJcblx0XHRcdGlmICggdGhpcy5pc1Zpc2libGUgKSB7XHJcblx0XHRcdFx0aWYgKCAhdGhpcy4kZ3JpZCApIHtcclxuXHRcdFx0XHRcdHRoaXMuY3JlYXRlKCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR0aGlzLmluc3RhbmNlLnRyaWdnZXIoICdvblRodW1ic1Nob3cnICk7XHJcblxyXG5cdFx0XHRcdHRoaXMuZm9jdXMoIDAgKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHRoaXMuJGdyaWQgKSB7XHJcblx0XHRcdFx0dGhpcy5pbnN0YW5jZS50cmlnZ2VyKCAnb25UaHVtYnNIaWRlJyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBVcGRhdGUgY29udGVudCBwb3NpdGlvblxyXG5cdFx0XHR0aGlzLmluc3RhbmNlLnVwZGF0ZSgpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRoaWRlIDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMudXBkYXRlKCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdHNob3cgOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dGhpcy5pc1Zpc2libGUgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0fSxcclxuXHJcblx0XHR0b2dnbGUgOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dGhpcy5pc1Zpc2libGUgPSAhdGhpcy5pc1Zpc2libGU7XHJcblx0XHRcdHRoaXMudXBkYXRlKCk7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKHtcclxuXHJcblx0XHQnb25Jbml0LmZiJyA6IGZ1bmN0aW9uKGUsIGluc3RhbmNlKSB7XHJcblx0XHRcdHZhciBUaHVtYnM7XHJcblxyXG5cdFx0XHRpZiAoIGluc3RhbmNlICYmICFpbnN0YW5jZS5UaHVtYnMgKSB7XHJcblx0XHRcdFx0VGh1bWJzID0gbmV3IEZhbmN5VGh1bWJzKCBpbnN0YW5jZSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIFRodW1icy5pc0FjdGl2ZSAmJiBUaHVtYnMub3B0cy5hdXRvU3RhcnQgPT09IHRydWUgKSB7XHJcblx0XHRcdFx0XHRUaHVtYnMuc2hvdygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQnYmVmb3JlU2hvdy5mYicgOiBmdW5jdGlvbihlLCBpbnN0YW5jZSwgaXRlbSwgZmlyc3RSdW4pIHtcclxuXHRcdFx0dmFyIFRodW1icyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlRodW1icztcclxuXHJcblx0XHRcdGlmICggVGh1bWJzICYmIFRodW1icy5pc1Zpc2libGUgKSB7XHJcblx0XHRcdFx0VGh1bWJzLmZvY3VzKCBmaXJzdFJ1biA/IDAgOiAyNTAgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQnYWZ0ZXJLZXlkb3duLmZiJyA6IGZ1bmN0aW9uKGUsIGluc3RhbmNlLCBjdXJyZW50LCBrZXlwcmVzcywga2V5Y29kZSkge1xyXG5cdFx0XHR2YXIgVGh1bWJzID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuVGh1bWJzO1xyXG5cclxuXHRcdFx0Ly8gXCJHXCJcclxuXHRcdFx0aWYgKCBUaHVtYnMgJiYgVGh1bWJzLmlzQWN0aXZlICYmIGtleWNvZGUgPT09IDcxICkge1xyXG5cdFx0XHRcdGtleXByZXNzLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHRcdFRodW1icy50b2dnbGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQnYmVmb3JlQ2xvc2UuZmInIDogZnVuY3Rpb24oIGUsIGluc3RhbmNlICkge1xyXG5cdFx0XHR2YXIgVGh1bWJzID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuVGh1bWJzO1xyXG5cclxuXHRcdFx0aWYgKCBUaHVtYnMgJiYgVGh1bWJzLmlzVmlzaWJsZSAmJiBUaHVtYnMub3B0cy5oaWRlT25DbG9zZSAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0VGh1bWJzLiRncmlkLmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHR9KTtcclxuXHJcbn0oZG9jdW1lbnQsIHdpbmRvdy5qUXVlcnkpKTtcclxuXG4vLy8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vXHJcbi8vIFNoYXJlXHJcbi8vIERpc3BsYXlzIHNpbXBsZSBmb3JtIGZvciBzaGFyaW5nIGN1cnJlbnQgdXJsXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbjsoZnVuY3Rpb24gKGRvY3VtZW50LCAkKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQkLmV4dGVuZCh0cnVlLCAkLmZhbmN5Ym94LmRlZmF1bHRzLCB7XHJcblx0XHRidG5UcGwgOiB7XHJcblx0XHRcdHNoYXJlIDpcclxuXHRcdFx0XHQnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXNoYXJlIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tc2hhcmVcIiB0aXRsZT1cInt7U0hBUkV9fVwiPicgK1xyXG5cdFx0XHRcdFx0Jzxzdmcgdmlld0JveD1cIjAgMCA0MCA0MFwiPicgK1xyXG5cdFx0XHRcdFx0XHQnPHBhdGggZD1cIk02LDMwIEM4LDE4IDE5LDE2IDIzLDE2IEwyMywxNiBMMjMsMTAgTDMzLDIwIEwyMywyOSBMMjMsMjQgQzE5LDI0IDgsMjcgNiwzMCBaXCI+JyArXHJcblx0XHRcdFx0XHQnPC9zdmc+JyArXHJcblx0XHRcdFx0JzwvYnV0dG9uPidcclxuXHRcdH0sXHJcblx0XHRzaGFyZSA6IHtcclxuXHRcdFx0dHBsIDpcclxuXHRcdFx0XHQnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXNoYXJlXCI+JyArXHJcblx0XHRcdFx0XHQnPGgxPnt7U0hBUkV9fTwvaDE+JyArXHJcblx0XHRcdFx0XHQnPHA+JyArXHJcblx0XHRcdFx0XHRcdCc8YSBocmVmPVwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9e3tzcmN9fVwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwiZmFuY3lib3gtc2hhcmVfYnV0dG9uXCI+JyArXHJcblx0XHRcdFx0XHRcdFx0JzxzdmcgdmVyc2lvbj1cIjEuMVwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBmaWxsPVwiIzNiNTk5OFwiPjxwYXRoIGQ9XCJNMjcuNiAzaC0yMy4yYy0uOCAwLTEuNC42LTEuNCAxLjR2MjMuMWMwIC45LjYgMS41IDEuNCAxLjVoMTIuNXYtMTAuMWgtMy40di0zLjloMy40di0yLjljMC0zLjQgMi4xLTUuMiA1LTUuMiAxLjQgMCAyLjcuMSAzIC4ydjMuNWgtMi4xYy0xLjYgMC0xLjkuOC0xLjkgMS45djIuNWgzLjlsLS41IDMuOWgtMy40djEwLjFoNi42Yy44IDAgMS40LS42IDEuNC0xLjR2LTIzLjJjLjEtLjgtLjUtMS40LTEuMy0xLjR6XCI+PC9wYXRoPjwvc3ZnPicgK1xyXG5cdFx0XHRcdFx0XHRcdCc8c3Bhbj5GYWNlYm9vazwvc3Bhbj4nICtcclxuXHRcdFx0XHRcdFx0JzwvYT4nICtcclxuXHRcdFx0XHRcdFx0JzxhIGhyZWY9XCJodHRwczovL3d3dy5waW50ZXJlc3QuY29tL3Bpbi9jcmVhdGUvYnV0dG9uLz91cmw9e3tzcmN9fSZhbXA7ZGVzY3JpcHRpb249e3tkZXNjcn19XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJmYW5jeWJveC1zaGFyZV9idXR0b25cIj4nICtcclxuXHRcdFx0XHRcdFx0XHQnPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGZpbGw9XCIjYzkyMjI4XCI+PHBhdGggZD1cIk0xNiAzYy03LjIgMC0xMyA1LjgtMTMgMTMgMCA1LjUgMy40IDEwLjIgOC4zIDEyLjEtLjEtMS0uMi0yLjYgMC0zLjcuMi0xIDEuNS02LjUgMS41LTYuNXMtLjQtLjgtLjQtMS45YzAtMS44IDEtMy4yIDIuNC0zLjIgMS4xIDAgMS42LjggMS42IDEuOCAwIDEuMS0uNyAyLjgtMS4xIDQuMy0uMyAxLjMuNiAyLjMgMS45IDIuMyAyLjMgMCA0LjEtMi40IDQuMS02IDAtMy4xLTIuMi01LjMtNS40LTUuMy0zLjcgMC01LjkgMi44LTUuOSA1LjYgMCAxLjEuNCAyLjMgMSAzIC4xLjEuMS4yLjEuNC0uMS40LS4zIDEuMy0uNCAxLjUtLjEuMi0uMi4zLS40LjItMS42LS44LTIuNi0zLjEtMi42LTUgMC00LjEgMy03LjkgOC42LTcuOSA0LjUgMCA4IDMuMiA4IDcuNSAwIDQuNS0yLjggOC4xLTYuNyA4LjEtMS4zIDAtMi42LS43LTMtMS41IDAgMC0uNyAyLjUtLjggMy4xLS4zIDEuMS0xLjEgMi41LTEuNiAzLjQgMS4yLjQgMi41LjYgMy44LjYgNy4yIDAgMTMtNS44IDEzLTEzIDAtNy4xLTUuOC0xMi45LTEzLTEyLjl6XCI+PC9wYXRoPjwvc3ZnPicgK1xyXG5cdFx0XHRcdFx0XHRcdCc8c3Bhbj5QaW50ZXJlc3Q8L3NwYW4+JyArXHJcblx0XHRcdFx0XHRcdCc8L2E+JyArXHJcblx0XHRcdFx0XHRcdCc8YSBocmVmPVwiaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/dXJsPXt7c3JjfX0mYW1wO3RleHQ9e3tkZXNjcn19XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJmYW5jeWJveC1zaGFyZV9idXR0b25cIj4nICtcclxuXHRcdFx0XHRcdFx0XHQnPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGZpbGw9XCIjMWRhMWYyXCI+PHBhdGggZD1cIk0zMCA3LjNjLTEgLjUtMi4xLjgtMy4zLjkgMS4yLS43IDIuMS0xLjggMi41LTMuMi0xLjEuNy0yLjMgMS4xLTMuNiAxLjQtMS0xLjEtMi41LTEuOC00LjItMS44LTMuMiAwLTUuNyAyLjYtNS43IDUuNyAwIC41LjEuOS4xIDEuMy00LjgtLjItOS0yLjUtMTEuOC02LS41LjktLjggMS45LS44IDMgMCAyIDEgMy44IDIuNiA0LjgtLjkgMC0xLjgtLjMtMi42LS43di4xYzAgMi44IDIgNS4xIDQuNiA1LjYtLjUuMS0xIC4yLTEuNS4yLS40IDAtLjcgMC0xLjEtLjEuNyAyLjMgMi45IDMuOSA1LjQgNC0yIDEuNS00LjQgMi41LTcuMSAyLjUtLjUgMC0uOSAwLTEuNC0uMSAyLjUgMS42IDUuNiAyLjYgOC44IDIuNiAxMC42IDAgMTYuMy04LjggMTYuMy0xNi4zdi0uN2MxLjEtMSAyLTIgMi44LTMuMnpcIj48L3BhdGg+PC9zdmc+JyArXHJcblx0XHRcdFx0XHRcdFx0JzxzcGFuPlR3aXR0ZXI8L3NwYW4+JyArXHJcblx0XHRcdFx0XHRcdCc8L2E+JyArXHJcblx0XHRcdFx0XHQnPC9wPicgK1xyXG5cdFx0XHRcdFx0JzxwPjxpbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPVwie3tzcmNfcmF3fX1cIiBvbmZvY3VzPVwidGhpcy5zZWxlY3QoKVwiIC8+PC9wPicgK1xyXG5cdFx0XHRcdCc8L2Rpdj4nXHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdGZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyaW5nKSB7XHJcblx0XHR2YXIgZW50aXR5TWFwID0ge1xyXG5cdFx0ICAnJic6ICcmYW1wOycsXHJcblx0XHQgICc8JzogJyZsdDsnLFxyXG5cdFx0ICAnPic6ICcmZ3Q7JyxcclxuXHRcdCAgJ1wiJzogJyZxdW90OycsXHJcblx0XHQgIFwiJ1wiOiAnJiMzOTsnLFxyXG5cdFx0ICAnLyc6ICcmI3gyRjsnLFxyXG5cdFx0ICAnYCc6ICcmI3g2MDsnLFxyXG5cdFx0ICAnPSc6ICcmI3gzRDsnXHJcblx0XHR9O1xyXG5cclxuXHRcdHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKC9bJjw+XCInYD1cXC9dL2csIGZ1bmN0aW9uIChzKSB7XHJcblx0XHRcdHJldHVybiBlbnRpdHlNYXBbc107XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdbZGF0YS1mYW5jeWJveC1zaGFyZV0nLCBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBmID0gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpLFxyXG5cdFx0XHR1cmwsXHJcblx0XHRcdHRwbDtcclxuXHJcblx0XHRpZiAoIGYgKSB7XHJcblx0XHRcdHVybCA9IGYuY3VycmVudC5vcHRzLmhhc2ggPT09IGZhbHNlID8gZi5jdXJyZW50LnNyYyA6IHdpbmRvdy5sb2NhdGlvbjtcclxuXHRcdFx0dHBsID0gZi5jdXJyZW50Lm9wdHMuc2hhcmUudHBsXHJcblx0XHRcdFx0XHQucmVwbGFjZSggL1xce1xce3NyY1xcfVxcfS9nLCBlbmNvZGVVUklDb21wb25lbnQoIHVybCApIClcclxuXHRcdFx0XHRcdC5yZXBsYWNlKCAvXFx7XFx7c3JjX3Jhd1xcfVxcfS9nLCBlc2NhcGVIdG1sKCB1cmwgKSApXHJcblx0XHRcdFx0XHQucmVwbGFjZSggL1xce1xce2Rlc2NyXFx9XFx9L2csIGYuJGNhcHRpb24gPyBlbmNvZGVVUklDb21wb25lbnQoIGYuJGNhcHRpb24udGV4dCgpICkgOiAnJyApO1xyXG5cclxuXHRcdFx0JC5mYW5jeWJveC5vcGVuKHtcclxuXHRcdFx0XHRzcmMgIDogZi50cmFuc2xhdGUoIGYsIHRwbCApLFxyXG5cdFx0XHRcdHR5cGUgOiAnaHRtbCcsXHJcblx0XHRcdFx0b3B0cyA6IHtcclxuXHRcdFx0XHRcdGFuaW1hdGlvbkVmZmVjdCAgIDogXCJmYWRlXCIsXHJcblx0XHRcdFx0XHRhbmltYXRpb25EdXJhdGlvbiA6IDI1MFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdH0pO1xyXG5cclxufSggZG9jdW1lbnQsIHdpbmRvdy5qUXVlcnkgfHwgalF1ZXJ5ICkpO1xyXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vXHJcbi8vIEhhc2hcclxuLy8gRW5hYmxlcyBsaW5raW5nIHRvIGVhY2ggbW9kYWxcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuOyhmdW5jdGlvbiAoZG9jdW1lbnQsIHdpbmRvdywgJCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0Ly8gU2ltcGxlICQuZXNjYXBlU2VsZWN0b3IgcG9seWZpbGwgKGZvciBqUXVlcnkgcHJpb3IgdjMpXHJcblx0aWYgKCAhJC5lc2NhcGVTZWxlY3RvciApIHtcclxuXHRcdCQuZXNjYXBlU2VsZWN0b3IgPSBmdW5jdGlvbiggc2VsICkge1xyXG5cdFx0XHR2YXIgcmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxceDgwLVxcdUZGRkZcXHctXS9nO1xyXG5cdFx0XHR2YXIgZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XHJcblx0XHRcdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcclxuXHRcdFx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxyXG5cdFx0XHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXHJcblx0XHRcdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxyXG5cdFx0XHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0cmV0dXJuICggc2VsICsgXCJcIiApLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHQvLyBDcmVhdGUgbmV3IGhpc3RvcnkgZW50cnkgb25seSBvbmNlXHJcblx0dmFyIHNob3VsZENyZWF0ZUhpc3RvcnkgPSB0cnVlO1xyXG5cclxuXHQvLyBWYXJpYWJsZSBjb250YWluaW5nIGxhc3QgaGFzaCB2YWx1ZSBzZXQgYnkgZmFuY3lCb3hcclxuXHQvLyBJdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIGZhbmN5Qm94IG5lZWRzIHRvIGNsb3NlIGFmdGVyIGhhc2ggY2hhbmdlIGlzIGRldGVjdGVkXHJcbiAgICB2YXIgY3VycmVudEhhc2ggPSBudWxsO1xyXG5cclxuXHQvLyBUaHJvdHRsaW5nIHRoZSBoaXN0b3J5IGNoYW5nZVxyXG5cdHZhciB0aW1lcklEID0gbnVsbDtcclxuXHJcblx0Ly8gR2V0IGluZm8gYWJvdXQgZ2FsbGVyeSBuYW1lIGFuZCBjdXJyZW50IGluZGV4IGZyb20gdXJsXHJcbiAgICBmdW5jdGlvbiBwYXJzZVVybCgpIHtcclxuICAgICAgICB2YXIgaGFzaCAgICA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0ciggMSApO1xyXG4gICAgICAgIHZhciByZXogICAgID0gaGFzaC5zcGxpdCggJy0nICk7XHJcbiAgICAgICAgdmFyIGluZGV4ICAgPSByZXoubGVuZ3RoID4gMSAmJiAvXlxcKz9cXGQrJC8udGVzdCggcmV6WyByZXoubGVuZ3RoIC0gMSBdICkgPyBwYXJzZUludCggcmV6LnBvcCggLTEgKSwgMTAgKSB8fCAxIDogMTtcclxuICAgICAgICB2YXIgZ2FsbGVyeSA9IHJlei5qb2luKCAnLScgKTtcclxuXHJcblx0XHQvLyBJbmRleCBpcyBzdGFydGluZyBmcm9tIDFcclxuXHRcdGlmICggaW5kZXggPCAxICkge1xyXG5cdFx0XHRpbmRleCA9IDE7XHJcblx0XHR9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGhhc2ggICAgOiBoYXNoLFxyXG4gICAgICAgICAgICBpbmRleCAgIDogaW5kZXgsXHJcbiAgICAgICAgICAgIGdhbGxlcnkgOiBnYWxsZXJ5XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcblx0Ly8gVHJpZ2dlciBjbGljayBldm50IG9uIGxpbmtzIHRvIG9wZW4gbmV3IGZhbmN5Qm94IGluc3RhbmNlXHJcblx0ZnVuY3Rpb24gdHJpZ2dlckZyb21VcmwoIHVybCApIHtcclxuXHRcdHZhciAkZWw7XHJcblxyXG4gICAgICAgIGlmICggdXJsLmdhbGxlcnkgIT09ICcnICkge1xyXG5cclxuXHRcdFx0Ly8gSWYgd2UgY2FuIGZpbmQgZWxlbWVudCBtYXRjaGluZyAnZGF0YS1mYW5jeWJveCcgYXRyaWJ1dGUsIHRoZW4gdHJpZ2dlciBjbGljayBldmVudCBmb3IgdGhhdCAuLlxyXG5cdFx0XHQkZWwgPSAkKCBcIltkYXRhLWZhbmN5Ym94PSdcIiArICQuZXNjYXBlU2VsZWN0b3IoIHVybC5nYWxsZXJ5ICkgKyBcIiddXCIgKS5lcSggdXJsLmluZGV4IC0gMSApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhJGVsLmxlbmd0aCApIHtcclxuXHRcdFx0XHQvLyAuLiBpZiBub3QsIHRyeSBmaW5kaW5nIGVsZW1lbnQgYnkgSURcclxuXHRcdFx0XHQkZWwgPSAkKCBcIiNcIiArICQuZXNjYXBlU2VsZWN0b3IoIHVybC5nYWxsZXJ5ICkgKyBcIlwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggJGVsLmxlbmd0aCApIHtcclxuXHRcdFx0XHRzaG91bGRDcmVhdGVIaXN0b3J5ID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdCRlbC50cmlnZ2VyKCAnY2xpY2snICk7XHJcblx0XHRcdH1cclxuXHJcbiAgICAgICAgfVxyXG5cdH1cclxuXHJcblx0Ly8gR2V0IGdhbGxlcnkgbmFtZSBmcm9tIGN1cnJlbnQgaW5zdGFuY2VcclxuXHRmdW5jdGlvbiBnZXRHYWxsZXJ5SUQoIGluc3RhbmNlICkge1xyXG5cdFx0dmFyIG9wdHM7XHJcblxyXG5cdFx0aWYgKCAhaW5zdGFuY2UgKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRvcHRzID0gaW5zdGFuY2UuY3VycmVudCA/IGluc3RhbmNlLmN1cnJlbnQub3B0cyA6IGluc3RhbmNlLm9wdHM7XHJcblxyXG5cdFx0cmV0dXJuIG9wdHMuaGFzaCB8fCAoIG9wdHMuJG9yaWcgPyBvcHRzLiRvcmlnLmRhdGEoICdmYW5jeWJveCcgKSA6ICcnICApO1xyXG5cdH1cclxuXHJcblx0Ly8gU3RhcnQgd2hlbiBET00gYmVjb21lcyByZWFkeVxyXG4gICAgJChmdW5jdGlvbigpIHtcclxuXHJcblx0XHQvLyBDaGVjayBpZiB1c2VyIGhhcyBkaXNhYmxlZCB0aGlzIG1vZHVsZVxyXG5cdFx0aWYgKCAkLmZhbmN5Ym94LmRlZmF1bHRzLmhhc2ggPT09IGZhbHNlICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVXBkYXRlIGhhc2ggd2hlbiBvcGVuaW5nL2Nsb3NpbmcgZmFuY3lCb3hcclxuXHQgICAgJChkb2N1bWVudCkub24oe1xyXG5cdFx0XHQnb25Jbml0LmZiJyA6IGZ1bmN0aW9uKCBlLCBpbnN0YW5jZSApIHtcclxuXHRcdFx0XHR2YXIgdXJsLCBnYWxsZXJ5O1xyXG5cclxuXHRcdFx0XHRpZiAoIGluc3RhbmNlLmdyb3VwWyBpbnN0YW5jZS5jdXJySW5kZXggXS5vcHRzLmhhc2ggPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dXJsICAgICA9IHBhcnNlVXJsKCk7XHJcblx0XHRcdFx0Z2FsbGVyeSA9IGdldEdhbGxlcnlJRCggaW5zdGFuY2UgKTtcclxuXHJcblx0XHRcdFx0Ly8gTWFrZSBzdXJlIGdhbGxlcnkgc3RhcnQgaW5kZXggbWF0Y2hlcyBpbmRleCBmcm9tIGhhc2hcclxuXHRcdFx0XHRpZiAoIGdhbGxlcnkgJiYgdXJsLmdhbGxlcnkgJiYgZ2FsbGVyeSA9PSB1cmwuZ2FsbGVyeSApIHtcclxuXHRcdFx0XHRcdGluc3RhbmNlLmN1cnJJbmRleCA9IHVybC5pbmRleCAtIDE7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0J2JlZm9yZVNob3cuZmInIDogZnVuY3Rpb24oIGUsIGluc3RhbmNlLCBjdXJyZW50ICkge1xyXG5cdFx0XHRcdHZhciBnYWxsZXJ5O1xyXG5cclxuXHRcdFx0XHRpZiAoICFjdXJyZW50IHx8IGN1cnJlbnQub3B0cy5oYXNoID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdCAgICAgICAgICAgIGdhbGxlcnkgPSBnZXRHYWxsZXJ5SUQoIGluc3RhbmNlICk7XHJcblxyXG5cdCAgICAgICAgICAgIC8vIFVwZGF0ZSB3aW5kb3cgaGFzaFxyXG5cdCAgICAgICAgICAgIGlmICggZ2FsbGVyeSAmJiBnYWxsZXJ5ICE9PSAnJyApIHtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHdpbmRvdy5sb2NhdGlvbi5oYXNoLmluZGV4T2YoIGdhbGxlcnkgKSA8IDAgKSB7XHJcblx0XHQgICAgICAgICAgICAgICAgaW5zdGFuY2Uub3B0cy5vcmlnSGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xyXG5cdFx0ICAgICAgICAgICAgfVxyXG5cclxuXHRcdFx0XHRcdGN1cnJlbnRIYXNoID0gZ2FsbGVyeSArICggaW5zdGFuY2UuZ3JvdXAubGVuZ3RoID4gMSA/ICctJyArICggY3VycmVudC5pbmRleCArIDEgKSA6ICcnICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCAncmVwbGFjZVN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCB0aW1lcklEICkge1xyXG5cdFx0XHRcdFx0XHRcdGNsZWFyVGltZW91dCggdGltZXJJRCApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR0aW1lcklEID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuaGlzdG9yeVsgc2hvdWxkQ3JlYXRlSGlzdG9yeSA/ICdwdXNoU3RhdGUnIDogJ3JlcGxhY2VTdGF0ZScgXSgge30gLCBkb2N1bWVudC50aXRsZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArICcjJyArICBjdXJyZW50SGFzaCApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR0aW1lcklEID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHRcdFx0c2hvdWxkQ3JlYXRlSGlzdG9yeSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdFx0fSwgMzAwKTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaGFzaCA9IGN1cnJlbnRIYXNoO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfSxcclxuXHJcblx0XHRcdCdiZWZvcmVDbG9zZS5mYicgOiBmdW5jdGlvbiggZSwgaW5zdGFuY2UsIGN1cnJlbnQgKSB7XHJcblx0XHRcdFx0dmFyIGdhbGxlcnksIG9yaWdIYXNoO1xyXG5cclxuXHRcdFx0XHRpZiAoIHRpbWVySUQgKSB7XHJcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVySUQgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggY3VycmVudC5vcHRzLmhhc2ggPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Z2FsbGVyeSAgPSBnZXRHYWxsZXJ5SUQoIGluc3RhbmNlICk7XHJcblx0XHRcdFx0b3JpZ0hhc2ggPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5vcHRzLm9yaWdIYXNoID8gaW5zdGFuY2Uub3B0cy5vcmlnSGFzaCA6ICcnO1xyXG5cclxuXHQgICAgICAgICAgICAvLyBSZW1vdmUgaGFzaCBmcm9tIGxvY2F0aW9uIGJhclxyXG5cdCAgICAgICAgICAgIGlmICggZ2FsbGVyeSAmJiBnYWxsZXJ5ICE9PSAnJyApIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmICggJ3JlcGxhY2VTdGF0ZScgaW4gaGlzdG9yeSApIHtcclxuXHRcdFx0XHRcdFx0d2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKCB7fSAsIGRvY3VtZW50LnRpdGxlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgb3JpZ0hhc2ggKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gb3JpZ0hhc2g7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBLZWVwIG9yaWdpbmFsIHNjcm9sbCBwb3NpdGlvblxyXG5cdFx0XHRcdFx0XHQkKCB3aW5kb3cgKS5zY3JvbGxUb3AoIGluc3RhbmNlLnNjcm9sbFRvcCApLnNjcm9sbExlZnQoIGluc3RhbmNlLnNjcm9sbExlZnQgKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0XHRcdFx0Y3VycmVudEhhc2ggPSBudWxsO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9KTtcclxuXHJcblx0XHQvLyBDaGVjayBpZiBuZWVkIHRvIGNsb3NlIGFmdGVyIHVybCBoYXMgY2hhbmdlZFxyXG5cdFx0JCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlLmZiJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciB1cmwgPSBwYXJzZVVybCgpO1xyXG5cclxuXHRcdFx0aWYgKCAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCkgKSB7XHJcblx0XHRcdFx0aWYgKCBjdXJyZW50SGFzaCAmJiBjdXJyZW50SGFzaCAhPT0gdXJsLmdhbGxlcnkgKyAnLScgKyB1cmwuaW5kZXggJiYgISggdXJsLmluZGV4ID09PSAxICYmIGN1cnJlbnRIYXNoID09IHVybC5nYWxsZXJ5ICkgKSB7XHJcblx0XHRcdFx0XHRjdXJyZW50SGFzaCA9IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0JC5mYW5jeWJveC5jbG9zZSgpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHVybC5nYWxsZXJ5ICE9PSAnJyApIHtcclxuXHRcdFx0XHR0cmlnZ2VyRnJvbVVybCggdXJsICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIENoZWNrIGN1cnJlbnQgaGFzaCBhbmQgdHJpZ2dlciBjbGljayBldmVudCBvbiBtYXRjaGluZyBlbGVtZW50IHRvIHN0YXJ0IGZhbmN5Qm94LCBpZiBuZWVkZWRcclxuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRyaWdnZXJGcm9tVXJsKCBwYXJzZVVybCgpICk7XHJcblx0XHR9LCA1MCk7XHJcbiAgICB9KTtcclxuXHJcbn0oIGRvY3VtZW50LCB3aW5kb3csIHdpbmRvdy5qUXVlcnkgfHwgalF1ZXJ5ICkpO1xyXG4iLCIvKiFcbioganF1ZXJ5LmlucHV0bWFzay5idW5kbGUuanNcbiogaHR0cHM6Ly9naXRodWIuY29tL1JvYmluSGVyYm90cy9JbnB1dG1hc2tcbiogQ29weXJpZ2h0IChjKSAyMDEwIC0gMjAxNyBSb2JpbiBIZXJib3RzXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXG4qIFZlcnNpb246IDMuMy4xMVxuKi9cblxuIWZ1bmN0aW9uKG1vZHVsZXMpIHtcbiAgICBmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4gICAgICAgIGlmIChpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkgcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gICAgICAgIHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiAgICAgICAgICAgIGk6IG1vZHVsZUlkLFxuICAgICAgICAgICAgbDogITEsXG4gICAgICAgICAgICBleHBvcnRzOiB7fVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyksIFxuICAgICAgICBtb2R1bGUubCA9ICEwLCBtb2R1bGUuZXhwb3J0cztcbiAgICB9XG4gICAgdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiAgICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpIHx8IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6ICExLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgICAgICBnZXQ6IGdldHRlclxuICAgICAgICB9KTtcbiAgICB9LCBfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgICAgdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZS5kZWZhdWx0O1xuICAgICAgICB9IDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgXCJhXCIsIGdldHRlciksIGdldHRlcjtcbiAgICB9LCBfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7XG4gICAgfSwgX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIiwgX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzKTtcbn0oWyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXztcbiAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gICAgIWZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAgICAgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFsgX193ZWJwYWNrX3JlcXVpcmVfXygyKSBdLCB2b2lkIDAgIT09IChfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IGZhY3RvcnkpID8gX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyk7XG4gICAgfShmdW5jdGlvbigkKSB7XG4gICAgICAgIHJldHVybiAkO1xuICAgIH0pO1xufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18sIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfSA6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gICAgIWZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAgICAgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFsgX193ZWJwYWNrX3JlcXVpcmVfXygwKSwgX193ZWJwYWNrX3JlcXVpcmVfXygxMCksIF9fd2VicGFja19yZXF1aXJlX18oMTEpIF0sIFxuICAgICAgICB2b2lkIDAgIT09IChfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IGZhY3RvcnkpID8gX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyk7XG4gICAgfShmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcbiAgICAgICAgZnVuY3Rpb24gSW5wdXRtYXNrKGFsaWFzLCBvcHRpb25zLCBpbnRlcm5hbCkge1xuICAgICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIElucHV0bWFzaykpIHJldHVybiBuZXcgSW5wdXRtYXNrKGFsaWFzLCBvcHRpb25zLCBpbnRlcm5hbCk7XG4gICAgICAgICAgICB0aGlzLmVsID0gdW5kZWZpbmVkLCB0aGlzLmV2ZW50cyA9IHt9LCB0aGlzLm1hc2tzZXQgPSB1bmRlZmluZWQsIHRoaXMucmVmcmVzaFZhbHVlID0gITEsIFxuICAgICAgICAgICAgITAgIT09IGludGVybmFsICYmICgkLmlzUGxhaW5PYmplY3QoYWxpYXMpID8gb3B0aW9ucyA9IGFsaWFzIDogKG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9KS5hbGlhcyA9IGFsaWFzLCBcbiAgICAgICAgICAgIHRoaXMub3B0cyA9ICQuZXh0ZW5kKCEwLCB7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyksIHRoaXMubm9NYXNrc0NhY2hlID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlZmluaXRpb25zICE9PSB1bmRlZmluZWQsIFxuICAgICAgICAgICAgdGhpcy51c2VyT3B0aW9ucyA9IG9wdGlvbnMgfHwge30sIHRoaXMuaXNSVEwgPSB0aGlzLm9wdHMubnVtZXJpY0lucHV0LCByZXNvbHZlQWxpYXModGhpcy5vcHRzLmFsaWFzLCBvcHRpb25zLCB0aGlzLm9wdHMpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlQWxpYXMoYWxpYXNTdHIsIG9wdGlvbnMsIG9wdHMpIHtcbiAgICAgICAgICAgIHZhciBhbGlhc0RlZmluaXRpb24gPSBJbnB1dG1hc2sucHJvdG90eXBlLmFsaWFzZXNbYWxpYXNTdHJdO1xuICAgICAgICAgICAgcmV0dXJuIGFsaWFzRGVmaW5pdGlvbiA/IChhbGlhc0RlZmluaXRpb24uYWxpYXMgJiYgcmVzb2x2ZUFsaWFzKGFsaWFzRGVmaW5pdGlvbi5hbGlhcywgdW5kZWZpbmVkLCBvcHRzKSwgXG4gICAgICAgICAgICAkLmV4dGVuZCghMCwgb3B0cywgYWxpYXNEZWZpbml0aW9uKSwgJC5leHRlbmQoITAsIG9wdHMsIG9wdGlvbnMpLCAhMCkgOiAobnVsbCA9PT0gb3B0cy5tYXNrICYmIChvcHRzLm1hc2sgPSBhbGlhc1N0ciksIFxuICAgICAgICAgICAgITEpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlTWFza1NldChvcHRzLCBub2NhY2hlKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZU1hc2sobWFzaywgbWV0YWRhdGEsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVnZXhNYXNrID0gITE7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IG1hc2sgJiYgXCJcIiAhPT0gbWFzayB8fCAoKHJlZ2V4TWFzayA9IG51bGwgIT09IG9wdHMucmVnZXgpID8gbWFzayA9IChtYXNrID0gb3B0cy5yZWdleCkucmVwbGFjZSgvXihcXF4pKC4qKShcXCQpJC8sIFwiJDJcIikgOiAocmVnZXhNYXNrID0gITAsIFxuICAgICAgICAgICAgICAgIG1hc2sgPSBcIi4qXCIpKSwgMSA9PT0gbWFzay5sZW5ndGggJiYgITEgPT09IG9wdHMuZ3JlZWR5ICYmIDAgIT09IG9wdHMucmVwZWF0ICYmIChvcHRzLnBsYWNlaG9sZGVyID0gXCJcIiksIFxuICAgICAgICAgICAgICAgIG9wdHMucmVwZWF0ID4gMCB8fCBcIipcIiA9PT0gb3B0cy5yZXBlYXQgfHwgXCIrXCIgPT09IG9wdHMucmVwZWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXBlYXRTdGFydCA9IFwiKlwiID09PSBvcHRzLnJlcGVhdCA/IDAgOiBcIitcIiA9PT0gb3B0cy5yZXBlYXQgPyAxIDogb3B0cy5yZXBlYXQ7XG4gICAgICAgICAgICAgICAgICAgIG1hc2sgPSBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0ICsgbWFzayArIG9wdHMuZ3JvdXBtYXJrZXIuZW5kICsgb3B0cy5xdWFudGlmaWVybWFya2VyLnN0YXJ0ICsgcmVwZWF0U3RhcnQgKyBcIixcIiArIG9wdHMucmVwZWF0ICsgb3B0cy5xdWFudGlmaWVybWFya2VyLmVuZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tzZXREZWZpbml0aW9uLCBtYXNrZGVmS2V5ID0gcmVnZXhNYXNrID8gXCJyZWdleF9cIiArIG9wdHMucmVnZXggOiBvcHRzLm51bWVyaWNJbnB1dCA/IG1hc2suc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBtYXNrO1xuICAgICAgICAgICAgICAgIHJldHVybiBJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0gPT09IHVuZGVmaW5lZCB8fCAhMCA9PT0gbm9jYWNoZSA/IChtYXNrc2V0RGVmaW5pdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgbWFzazogbWFzayxcbiAgICAgICAgICAgICAgICAgICAgbWFza1Rva2VuOiBJbnB1dG1hc2sucHJvdG90eXBlLmFuYWx5c2VNYXNrKG1hc2ssIHJlZ2V4TWFzaywgb3B0cyksXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkUG9zaXRpb25zOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgX2J1ZmZlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBidWZmZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgdGVzdHM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgICAgIG1hc2tMZW5ndGg6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0sICEwICE9PSBub2NhY2hlICYmIChJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0gPSBtYXNrc2V0RGVmaW5pdGlvbiwgXG4gICAgICAgICAgICAgICAgbWFza3NldERlZmluaXRpb24gPSAkLmV4dGVuZCghMCwge30sIElucHV0bWFzay5wcm90b3R5cGUubWFza3NDYWNoZVttYXNrZGVmS2V5XSkpKSA6IG1hc2tzZXREZWZpbml0aW9uID0gJC5leHRlbmQoITAsIHt9LCBJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0pLCBcbiAgICAgICAgICAgICAgICBtYXNrc2V0RGVmaW5pdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5tYXNrKSAmJiAob3B0cy5tYXNrID0gb3B0cy5tYXNrKG9wdHMpKSwgJC5pc0FycmF5KG9wdHMubWFzaykpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5tYXNrLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5rZWVwU3RhdGljID0gbnVsbCA9PT0gb3B0cy5rZWVwU3RhdGljIHx8IG9wdHMua2VlcFN0YXRpYztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFsdE1hc2sgPSBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5lYWNoKG9wdHMubnVtZXJpY0lucHV0ID8gb3B0cy5tYXNrLnJldmVyc2UoKSA6IG9wdHMubWFzaywgZnVuY3Rpb24obmR4LCBtc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hc2subGVuZ3RoID4gMSAmJiAoYWx0TWFzayArPSBvcHRzLmdyb3VwbWFya2VyLmVuZCArIG9wdHMuYWx0ZXJuYXRvcm1hcmtlciArIG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zay5tYXNrID09PSB1bmRlZmluZWQgfHwgJC5pc0Z1bmN0aW9uKG1zay5tYXNrKSA/IGFsdE1hc2sgKz0gbXNrIDogYWx0TWFzayArPSBtc2subWFzaztcbiAgICAgICAgICAgICAgICAgICAgfSksIGFsdE1hc2sgKz0gb3B0cy5ncm91cG1hcmtlci5lbmQsIGdlbmVyYXRlTWFzayhhbHRNYXNrLCBvcHRzLm1hc2ssIG9wdHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRzLm1hc2sgPSBvcHRzLm1hc2sucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3B0cy5tYXNrICYmIG9wdHMubWFzay5tYXNrICE9PSB1bmRlZmluZWQgJiYgISQuaXNGdW5jdGlvbihvcHRzLm1hc2subWFzaykgPyBnZW5lcmF0ZU1hc2sob3B0cy5tYXNrLm1hc2ssIG9wdHMubWFzaywgb3B0cykgOiBnZW5lcmF0ZU1hc2sob3B0cy5tYXNrLCBvcHRzLm1hc2ssIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1hc2tTY29wZShhY3Rpb25PYmosIG1hc2tzZXQsIG9wdHMpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE1hc2tUZW1wbGF0ZShiYXNlT25JbnB1dCwgbWluaW1hbFBvcywgaW5jbHVkZU1vZGUpIHtcbiAgICAgICAgICAgICAgICBtaW5pbWFsUG9zID0gbWluaW1hbFBvcyB8fCAwO1xuICAgICAgICAgICAgICAgIHZhciBuZHhJbnRsenIsIHRlc3QsIHRlc3RQb3MsIG1hc2tUZW1wbGF0ZSA9IFtdLCBwb3MgPSAwLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgITAgPT09IGJhc2VPbklucHV0ICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdID8gKHRlc3QgPSAodGVzdFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdKS5tYXRjaCwgXG4gICAgICAgICAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpLCBtYXNrVGVtcGxhdGUucHVzaCghMCA9PT0gaW5jbHVkZU1vZGUgPyB0ZXN0UG9zLmlucHV0IDogITEgPT09IGluY2x1ZGVNb2RlID8gdGVzdC5uYXRpdmVEZWYgOiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpKSkgOiAodGVzdCA9ICh0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKSkubWF0Y2gsIFxuICAgICAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKSwgKCExID09PSBvcHRzLmppdE1hc2tpbmcgfHwgcG9zIDwgbHZwIHx8IFwibnVtYmVyXCIgPT0gdHlwZW9mIG9wdHMuaml0TWFza2luZyAmJiBpc0Zpbml0ZShvcHRzLmppdE1hc2tpbmcpICYmIG9wdHMuaml0TWFza2luZyA+IHBvcykgJiYgbWFza1RlbXBsYXRlLnB1c2goITEgPT09IGluY2x1ZGVNb2RlID8gdGVzdC5uYXRpdmVEZWYgOiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpKSksIFxuICAgICAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgICB9IHdoaWxlICgobWF4TGVuZ3RoID09PSB1bmRlZmluZWQgfHwgcG9zIDwgbWF4TGVuZ3RoKSAmJiAobnVsbCAhPT0gdGVzdC5mbiB8fCBcIlwiICE9PSB0ZXN0LmRlZikgfHwgbWluaW1hbFBvcyA+IHBvcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCIgPT09IG1hc2tUZW1wbGF0ZVttYXNrVGVtcGxhdGUubGVuZ3RoIC0gMV0gJiYgbWFza1RlbXBsYXRlLnBvcCgpLCBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCA9IHBvcyArIDEsIFxuICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE1hc2tTZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiByZXNldE1hc2tTZXQoc29mdCkge1xuICAgICAgICAgICAgICAgIHZhciBtYXNrc2V0ID0gZ2V0TWFza1NldCgpO1xuICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyID0gdW5kZWZpbmVkLCAhMCAhPT0gc29mdCAmJiAobWFza3NldC52YWxpZFBvc2l0aW9ucyA9IHt9LCBtYXNrc2V0LnAgPSAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldExhc3RWYWxpZFBvc2l0aW9uKGNsb3Nlc3RUbywgc3RyaWN0LCB2YWxpZFBvc2l0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhciBiZWZvcmUgPSAtMSwgYWZ0ZXIgPSAtMSwgdmFsaWRzID0gdmFsaWRQb3NpdGlvbnMgfHwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zO1xuICAgICAgICAgICAgICAgIGNsb3Nlc3RUbyA9PT0gdW5kZWZpbmVkICYmIChjbG9zZXN0VG8gPSAtMSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcG9zTmR4IGluIHZhbGlkcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHNOZHggPSBwYXJzZUludChwb3NOZHgpO1xuICAgICAgICAgICAgICAgICAgICB2YWxpZHNbcHNOZHhdICYmIChzdHJpY3QgfHwgITAgIT09IHZhbGlkc1twc05keF0uZ2VuZXJhdGVkSW5wdXQpICYmIChwc05keCA8PSBjbG9zZXN0VG8gJiYgKGJlZm9yZSA9IHBzTmR4KSwgXG4gICAgICAgICAgICAgICAgICAgIHBzTmR4ID49IGNsb3Nlc3RUbyAmJiAoYWZ0ZXIgPSBwc05keCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gLTEgIT09IGJlZm9yZSAmJiBjbG9zZXN0VG8gLSBiZWZvcmUgPiAxIHx8IGFmdGVyIDwgY2xvc2VzdFRvID8gYmVmb3JlIDogYWZ0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBzdHJpcFZhbGlkUG9zaXRpb25zKHN0YXJ0LCBlbmQsIG5vY2hlY2ssIHN0cmljdCkge1xuICAgICAgICAgICAgICAgIHZhciBpLCBzdGFydFBvcyA9IHN0YXJ0LCBwb3NpdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKCEwLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKSwgbmVlZHNWYWxpZGF0aW9uID0gITE7XG4gICAgICAgICAgICAgICAgZm9yIChnZXRNYXNrU2V0KCkucCA9IHN0YXJ0LCBpID0gZW5kIC0gMTsgaSA+PSBzdGFydFBvczsgaS0tKSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0gIT09IHVuZGVmaW5lZCAmJiAoITAgIT09IG5vY2hlY2sgJiYgKCFnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0ubWF0Y2gub3B0aW9uYWxpdHkgJiYgZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NNYXRjaCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBudWxsID09PSBwb3NNYXRjaC5tYXRjaC5mbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZNYXRjaCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MgLSAxXSwgbmV4dE1hdGNoID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BvcyArIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZNYXRjaCAhPT0gdW5kZWZpbmVkICYmIG5leHRNYXRjaCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICB9KGkpIHx8ICExID09PSBvcHRzLmNhbkNsZWFyUG9zaXRpb24oZ2V0TWFza1NldCgpLCBpLCBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBzdHJpY3QsIG9wdHMpKSB8fCBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldKTtcbiAgICAgICAgICAgICAgICBmb3IgKHJlc2V0TWFza1NldCghMCksIGkgPSBzdGFydFBvcyArIDE7IGkgPD0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTsgKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoO2dldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tzdGFydFBvc10gIT09IHVuZGVmaW5lZDsgKSBzdGFydFBvcysrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IHN0YXJ0UG9zICYmIChpID0gc3RhcnRQb3MgKyAxKSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldID09PSB1bmRlZmluZWQgJiYgaXNNYXNrKGkpKSBpKys7IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBnZXRUZXN0VGVtcGxhdGUoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAhMSA9PT0gbmVlZHNWYWxpZGF0aW9uICYmIHBvc2l0aW9uc0Nsb25lW3N0YXJ0UG9zXSAmJiBwb3NpdGlvbnNDbG9uZVtzdGFydFBvc10ubWF0Y2guZGVmID09PSB0Lm1hdGNoLmRlZiA/IChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbc3RhcnRQb3NdID0gJC5leHRlbmQoITAsIHt9LCBwb3NpdGlvbnNDbG9uZVtzdGFydFBvc10pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tzdGFydFBvc10uaW5wdXQgPSB0LmlucHV0LCBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKykgOiBwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbihzdGFydFBvcywgdC5tYXRjaC5kZWYpID8gITEgIT09IGlzVmFsaWQoc3RhcnRQb3MsIHQuaW5wdXQgfHwgZ2V0UGxhY2Vob2xkZXIoaSksICEwKSAmJiAoZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBpKyssIG5lZWRzVmFsaWRhdGlvbiA9ICEwKSA6IGlzTWFzayhpKSB8fCAoaSsrLCBzdGFydFBvcy0tKSwgc3RhcnRQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoITApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKHRlc3RzLCBndWVzc05leHRCZXN0KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdGVzdFBvcywgdGVzdFBvc2l0aW9ucyA9IHRlc3RzLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBsdlRlc3QgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZwXSB8fCBnZXRUZXN0cygwKVswXSwgbHZUZXN0QWx0QXJyID0gbHZUZXN0LmFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyBsdlRlc3QubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpIDogW10sIG5keCA9IDA7IG5keCA8IHRlc3RQb3NpdGlvbnMubGVuZ3RoICYmICghKCh0ZXN0UG9zID0gdGVzdFBvc2l0aW9uc1tuZHhdKS5tYXRjaCAmJiAob3B0cy5ncmVlZHkgJiYgITAgIT09IHRlc3RQb3MubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyIHx8ICghMSA9PT0gdGVzdFBvcy5tYXRjaC5vcHRpb25hbGl0eSB8fCAhMSA9PT0gdGVzdFBvcy5tYXRjaC5uZXdCbG9ja01hcmtlcikgJiYgITAgIT09IHRlc3RQb3MubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyKSAmJiAobHZUZXN0LmFsdGVybmF0aW9uID09PSB1bmRlZmluZWQgfHwgbHZUZXN0LmFsdGVybmF0aW9uICE9PSB0ZXN0UG9zLmFsdGVybmF0aW9uIHx8IHRlc3RQb3MubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dICE9PSB1bmRlZmluZWQgJiYgY2hlY2tBbHRlcm5hdGlvbk1hdGNoKHRlc3RQb3MubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpLCBsdlRlc3RBbHRBcnIpKSkgfHwgITAgPT09IGd1ZXNzTmV4dEJlc3QgJiYgKG51bGwgIT09IHRlc3RQb3MubWF0Y2guZm4gfHwgL1swLTlhLWJBLVpdLy50ZXN0KHRlc3RQb3MubWF0Y2guZGVmKSkpOyBuZHgrKykgO1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0UG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCB0c3RQcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSB8fCBkZXRlcm1pbmVUZXN0VGVtcGxhdGUoZ2V0VGVzdHMocG9zLCBuZHhJbnRsenIgPyBuZHhJbnRsenIuc2xpY2UoKSA6IG5keEludGx6ciwgdHN0UHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFRlc3QocG9zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdID8gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gOiBnZXRUZXN0cyhwb3MpWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcG9zaXRpb25DYW5NYXRjaERlZmluaXRpb24ocG9zLCBkZWYpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB2YWxpZCA9ICExLCB0ZXN0cyA9IGdldFRlc3RzKHBvcyksIHRuZHggPSAwOyB0bmR4IDwgdGVzdHMubGVuZ3RoOyB0bmR4KyspIGlmICh0ZXN0c1t0bmR4XS5tYXRjaCAmJiB0ZXN0c1t0bmR4XS5tYXRjaC5kZWYgPT09IGRlZikge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9ICEwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdHMocG9zLCBuZHhJbnRsenIsIHRzdFBzKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWFza1Rva2VuLCBuZHhJbml0aWFsaXplciwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlTWF0Y2gobWF0Y2gsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3RNYXRjaCA9IDAgPT09ICQuaW5BcnJheShsYXRlc3RNYXRjaCwgdG9rZW5Hcm91cC5tYXRjaGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RNYXRjaCB8fCAkLmVhY2godG9rZW5Hcm91cC5tYXRjaGVzLCBmdW5jdGlvbihuZHgsIG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghMCA9PT0gbWF0Y2guaXNRdWFudGlmaWVyICYmIChmaXJzdE1hdGNoID0gaXNGaXJzdE1hdGNoKGxhdGVzdE1hdGNoLCB0b2tlbkdyb3VwLm1hdGNoZXNbbmR4IC0gMV0pKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmaXJzdE1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZU5keEluaXRpYWxpemVyKHBvcywgYWx0ZXJuYXRlTmR4LCB0YXJnZXRBbHRlcm5hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiZXN0TWF0Y2gsIGluZGV4UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV0gJiYgdGFyZ2V0QWx0ZXJuYXRpb24gJiYgZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10pIGZvciAodmFyIHZwQWx0ZXJuYXRpb24gPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV0ubG9jYXRvciwgdHBBbHRlcm5hdGlvbiA9IGdldE1hc2tTZXQoKS50ZXN0c1twb3NdWzBdLmxvY2F0b3IsIGkgPSAwOyBpIDwgdGFyZ2V0QWx0ZXJuYXRpb247IGkrKykgaWYgKHZwQWx0ZXJuYXRpb25baV0gIT09IHRwQWx0ZXJuYXRpb25baV0pIHJldHVybiB2cEFsdGVybmF0aW9uLnNsaWNlKHRhcmdldEFsdGVybmF0aW9uICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSB8fCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSkgJiYgJC5lYWNoKGdldE1hc2tTZXQoKS50ZXN0c1twb3NdIHx8IFsgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gXSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRlcm5hdGlvbiA9IHRhcmdldEFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyB0YXJnZXRBbHRlcm5hdGlvbiA6IGxtbnQuYWx0ZXJuYXRpb24sIG5keFBvcyA9IGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0gIT09IHVuZGVmaW5lZCA/IGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5pbmRleE9mKGFsdGVybmF0ZU5keCkgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGluZGV4UG9zID09PSB1bmRlZmluZWQgfHwgbmR4UG9zIDwgaW5kZXhQb3MpICYmIC0xICE9PSBuZHhQb3MgJiYgKGJlc3RNYXRjaCA9IGxtbnQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleFBvcyA9IG5keFBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGJlc3RNYXRjaCA/IGJlc3RNYXRjaC5sb2NhdG9yLnNsaWNlKCh0YXJnZXRBbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gdGFyZ2V0QWx0ZXJuYXRpb24gOiBiZXN0TWF0Y2guYWx0ZXJuYXRpb24pICsgMSkgOiB0YXJnZXRBbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gcmVzb2x2ZU5keEluaXRpYWxpemVyKHBvcywgYWx0ZXJuYXRlTmR4KSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0UG9zID4gMWU0KSB0aHJvdyBcIklucHV0bWFzazogVGhlcmUgaXMgcHJvYmFibHkgYW4gZXJyb3IgaW4geW91ciBtYXNrIGRlZmluaXRpb24gb3IgaW4gdGhlIGNvZGUuIENyZWF0ZSBhbiBpc3N1ZSBvbiBnaXRodWIgd2l0aCBhbiBleGFtcGxlIG9mIHRoZSBtYXNrIHlvdSBhcmUgdXNpbmcuIFwiICsgZ2V0TWFza1NldCgpLm1hc2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA9PT0gcG9zICYmIG1hdGNoLm1hdGNoZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG1hdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IG1hdGNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0b3I6IGxvb3BOZHgucmV2ZXJzZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNkOiBjYWNoZURlcGVuZGVuY3lcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaC5tYXRjaGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guaXNHcm91cCAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gbWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID0gaGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KG1hdGNoLCBtYXNrVG9rZW4ubWF0Y2hlcykgKyAxXSwgbG9vcE5keCkpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzT3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsVG9rZW4gPSBtYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWF0Y2gsIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXRlc3RNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5tYXRjaCwgIWlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgb3B0aW9uYWxUb2tlbikpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFN0b3AgPSAhMCwgdGVzdFBvcyA9IHBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2guaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYWx0TWF0Y2hlcywgYWx0ZXJuYXRlVG9rZW4gPSBtYXRjaCwgbWFsdGVybmF0ZU1hdGNoZXMgPSBbXSwgY3VycmVudE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKCksIGxvb3BOZHhDbnQgPSBsb29wTmR4Lmxlbmd0aCwgYWx0SW5kZXggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLTEgPT09IGFsdEluZGV4IHx8IFwic3RyaW5nXCIgPT0gdHlwZW9mIGFsdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW1uZHgsIGN1cnJlbnRQb3MgPSB0ZXN0UG9zLCBuZHhJbml0aWFsaXplckNsb25lID0gbmR4SW5pdGlhbGl6ZXIuc2xpY2UoKSwgYWx0SW5kZXhBcnIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBhbHRJbmRleCkgYWx0SW5kZXhBcnIgPSBhbHRJbmRleC5zcGxpdChcIixcIik7IGVsc2UgZm9yIChhbW5keCA9IDA7IGFtbmR4IDwgYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlcy5sZW5ndGg7IGFtbmR4KyspIGFsdEluZGV4QXJyLnB1c2goYW1uZHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4ID0gMDsgbmR4IDwgYWx0SW5kZXhBcnIubGVuZ3RoOyBuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbW5keCA9IHBhcnNlSW50KGFsdEluZGV4QXJyW25keF0pLCBtYXRjaGVzID0gW10sIG5keEluaXRpYWxpemVyID0gcmVzb2x2ZU5keEluaXRpYWxpemVyKHRlc3RQb3MsIGFtbmR4LCBsb29wTmR4Q250KSB8fCBuZHhJbml0aWFsaXplckNsb25lLnNsaWNlKCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEwICE9PSAobWF0Y2ggPSBoYW5kbGVNYXRjaChhbHRlcm5hdGVUb2tlbi5tYXRjaGVzW2FtbmR4XSB8fCBtYXNrVG9rZW4ubWF0Y2hlc1thbW5keF0sIFsgYW1uZHggXS5jb25jYXQobG9vcE5keCksIHF1YW50aWZpZXJSZWN1cnNlKSB8fCBtYXRjaCkgJiYgbWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBhbHRJbmRleEFyclthbHRJbmRleEFyci5sZW5ndGggLSAxXSA8IGFsdGVybmF0ZVRva2VuLm1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBudG5keCA9ICQuaW5BcnJheShtYXRjaCwgbWFza1Rva2VuLm1hdGNoZXMpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXMubGVuZ3RoID4gbnRuZHggJiYgKG1hdGNoID0gaGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbbnRuZHhdLCBbIG50bmR4IF0uY29uY2F0KGxvb3BOZHguc2xpY2UoMSwgbG9vcE5keC5sZW5ndGgpKSwgcXVhbnRpZmllclJlY3Vyc2UpKSAmJiAoYWx0SW5kZXhBcnIucHVzaChudG5keC50b1N0cmluZygpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChtYXRjaGVzLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxtbnQuYWx0ZXJuYXRpb24gPSBsb29wTmR4Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKCksIHRlc3RQb3MgPSBjdXJyZW50UG9zLCBtYXRjaGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4MSA9IDA7IG5keDEgPCBtYWx0TWF0Y2hlcy5sZW5ndGg7IG5keDErKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0TWF0Y2ggPSBtYWx0TWF0Y2hlc1tuZHgxXSwgZHJvcE1hdGNoID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hdGNoLmFsdGVybmF0aW9uID0gYWx0TWF0Y2guYWx0ZXJuYXRpb24gfHwgbG9vcE5keENudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4MiA9IDA7IG5keDIgPCBtYWx0ZXJuYXRlTWF0Y2hlcy5sZW5ndGg7IG5keDIrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdE1hdGNoMiA9IG1hbHRlcm5hdGVNYXRjaGVzW25keDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGFsdEluZGV4IHx8IC0xICE9PSAkLmluQXJyYXkoYWx0TWF0Y2gubG9jYXRvclthbHRNYXRjaC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKSwgYWx0SW5kZXhBcnIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bmN0aW9uKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2UubWF0Y2gubmF0aXZlRGVmID09PSB0YXJnZXQubWF0Y2gubmF0aXZlRGVmIHx8IHNvdXJjZS5tYXRjaC5kZWYgPT09IHRhcmdldC5tYXRjaC5uYXRpdmVEZWYgfHwgc291cmNlLm1hdGNoLm5hdGl2ZURlZiA9PT0gdGFyZ2V0Lm1hdGNoLmRlZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KGFsdE1hdGNoLCBhbHRNYXRjaDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BNYXRjaCA9ICEwLCBhbHRNYXRjaC5hbHRlcm5hdGlvbiA9PT0gYWx0TWF0Y2gyLmFsdGVybmF0aW9uICYmIC0xID09PSBhbHRNYXRjaDIubG9jYXRvclthbHRNYXRjaDIuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuaW5kZXhPZihhbHRNYXRjaC5sb2NhdG9yW2FsdE1hdGNoLmFsdGVybmF0aW9uXSkgJiYgKGFsdE1hdGNoMi5sb2NhdG9yW2FsdE1hdGNoMi5hbHRlcm5hdGlvbl0gPSBhbHRNYXRjaDIubG9jYXRvclthbHRNYXRjaDIuYWx0ZXJuYXRpb25dICsgXCIsXCIgKyBhbHRNYXRjaC5sb2NhdG9yW2FsdE1hdGNoLmFsdGVybmF0aW9uXSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hdGNoMi5hbHRlcm5hdGlvbiA9IGFsdE1hdGNoLmFsdGVybmF0aW9uKSwgYWx0TWF0Y2gubWF0Y2gubmF0aXZlRGVmID09PSBhbHRNYXRjaDIubWF0Y2guZGVmICYmIChhbHRNYXRjaC5sb2NhdG9yW2FsdE1hdGNoLmFsdGVybmF0aW9uXSA9IGFsdE1hdGNoMi5sb2NhdG9yW2FsdE1hdGNoMi5hbHRlcm5hdGlvbl0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWx0ZXJuYXRlTWF0Y2hlcy5zcGxpY2UobWFsdGVybmF0ZU1hdGNoZXMuaW5kZXhPZihhbHRNYXRjaDIpLCAxLCBhbHRNYXRjaCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdE1hdGNoLm1hdGNoLmRlZiA9PT0gYWx0TWF0Y2gyLm1hdGNoLmRlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wTWF0Y2ggPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmdW5jdGlvbihzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PT0gc291cmNlLm1hdGNoLmZuICYmIG51bGwgIT09IHRhcmdldC5tYXRjaC5mbiAmJiB0YXJnZXQubWF0Y2guZm4udGVzdChzb3VyY2UubWF0Y2guZGVmLCBnZXRNYXNrU2V0KCksIHBvcywgITEsIG9wdHMsICExKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KGFsdE1hdGNoLCBhbHRNYXRjaDIpIHx8IGZ1bmN0aW9uKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9PSBzb3VyY2UubWF0Y2guZm4gJiYgbnVsbCAhPT0gdGFyZ2V0Lm1hdGNoLmZuICYmIHRhcmdldC5tYXRjaC5mbi50ZXN0KHNvdXJjZS5tYXRjaC5kZWYucmVwbGFjZSgvW1xcW1xcXV0vZywgXCJcIiksIGdldE1hc2tTZXQoKSwgcG9zLCAhMSwgb3B0cywgITEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oYWx0TWF0Y2gsIGFsdE1hdGNoMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0TWF0Y2guYWx0ZXJuYXRpb24gPT09IGFsdE1hdGNoMi5hbHRlcm5hdGlvbiAmJiAtMSA9PT0gYWx0TWF0Y2gubG9jYXRvclthbHRNYXRjaC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5pbmRleE9mKGFsdE1hdGNoMi5sb2NhdG9yW2FsdE1hdGNoMi5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5zcGxpdChcIlwiKVswXSkgJiYgKGFsdE1hdGNoLm5hID0gYWx0TWF0Y2gubmEgfHwgYWx0TWF0Y2gubG9jYXRvclthbHRNYXRjaC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0xID09PSBhbHRNYXRjaC5uYS5pbmRleE9mKGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCJcIilbMF0pICYmIChhbHRNYXRjaC5uYSA9IGFsdE1hdGNoLm5hICsgXCIsXCIgKyBhbHRNYXRjaC5sb2NhdG9yW2FsdE1hdGNoMi5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5zcGxpdChcIlwiKVswXSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wTWF0Y2ggPSAhMCwgYWx0TWF0Y2gubG9jYXRvclthbHRNYXRjaC5hbHRlcm5hdGlvbl0gPSBhbHRNYXRjaDIubG9jYXRvclthbHRNYXRjaDIuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCJcIilbMF0gKyBcIixcIiArIGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdGVybmF0ZU1hdGNoZXMuc3BsaWNlKG1hbHRlcm5hdGVNYXRjaGVzLmluZGV4T2YoYWx0TWF0Y2gyKSwgMCwgYWx0TWF0Y2gpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BNYXRjaCB8fCBtYWx0ZXJuYXRlTWF0Y2hlcy5wdXNoKGFsdE1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0cmluZ1wiID09IHR5cGVvZiBhbHRJbmRleCAmJiAobWFsdGVybmF0ZU1hdGNoZXMgPSAkLm1hcChtYWx0ZXJuYXRlTWF0Y2hlcywgZnVuY3Rpb24obG1udCwgbmR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRmluaXRlKG5keCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdGVybmF0aW9uID0gbG1udC5hbHRlcm5hdGlvbiwgYWx0TG9jQXJyID0gbG1udC5sb2NhdG9yW2FsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG1udC5sb2NhdG9yW2FsdGVybmF0aW9uXSA9IHVuZGVmaW5lZCwgbG1udC5hbHRlcm5hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYWxuZHggPSAwOyBhbG5keCA8IGFsdExvY0Fyci5sZW5ndGg7IGFsbmR4KyspIC0xICE9PSAkLmluQXJyYXkoYWx0TG9jQXJyW2FsbmR4XSwgYWx0SW5kZXhBcnIpICYmIChsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dICE9PSB1bmRlZmluZWQgPyAobG1udC5sb2NhdG9yW2FsdGVybmF0aW9uXSArPSBcIixcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0gKz0gYWx0TG9jQXJyW2FsbmR4XSkgOiBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dID0gcGFyc2VJbnQoYWx0TG9jQXJyW2FsbmR4XSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbW50LmFsdGVybmF0aW9uID0gYWx0ZXJuYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG1udC5sb2NhdG9yW2FsdGVybmF0aW9uXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gbG1udDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSksIG1hdGNoZXMgPSBjdXJyZW50TWF0Y2hlcy5jb25jYXQobWFsdGVybmF0ZU1hdGNoZXMpLCB0ZXN0UG9zID0gcG9zLCBpbnNlcnRTdG9wID0gbWF0Y2hlcy5sZW5ndGggPiAwLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gbWFsdGVybmF0ZU1hdGNoZXMubGVuZ3RoID4gMCwgbmR4SW5pdGlhbGl6ZXIgPSBuZHhJbml0aWFsaXplckNsb25lLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtYXRjaCA9IGhhbmRsZU1hdGNoKGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYWx0SW5kZXhdIHx8IG1hc2tUb2tlbi5tYXRjaGVzW2FsdEluZGV4XSwgWyBhbHRJbmRleCBdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzUXVhbnRpZmllciAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gbWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KG1hdGNoLCBtYXNrVG9rZW4ubWF0Y2hlcykgLSAxXSkgZm9yICh2YXIgcXQgPSBtYXRjaCwgcW5keCA9IG5keEluaXRpYWxpemVyLmxlbmd0aCA+IDAgPyBuZHhJbml0aWFsaXplci5zaGlmdCgpIDogMDsgcW5keCA8IChpc05hTihxdC5xdWFudGlmaWVyLm1heCkgPyBxbmR4ICsgMSA6IHF0LnF1YW50aWZpZXIubWF4KSAmJiB0ZXN0UG9zIDw9IHBvczsgcW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbkdyb3VwID0gbWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KHF0LCBtYXNrVG9rZW4ubWF0Y2hlcykgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID0gaGFuZGxlTWF0Y2godG9rZW5Hcm91cCwgWyBxbmR4IF0uY29uY2F0KGxvb3BOZHgpLCB0b2tlbkdyb3VwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhdGVzdE1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLm1hdGNoLCBsYXRlc3RNYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgPSBxbmR4ID4gcXQucXVhbnRpZmllci5taW4gLSAxLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgdG9rZW5Hcm91cCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocW5keCA+IHF0LnF1YW50aWZpZXIubWluIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRTdG9wID0gITAsIHRlc3RQb3MgPSBwb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWF0Y2gsIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSkpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0ZXN0UG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdG5keCA9IG5keEluaXRpYWxpemVyLmxlbmd0aCA+IDAgPyBuZHhJbml0aWFsaXplci5zaGlmdCgpIDogMDsgdG5keCA8IG1hc2tUb2tlbi5tYXRjaGVzLmxlbmd0aDsgdG5keCsrKSBpZiAoITAgIT09IG1hc2tUb2tlbi5tYXRjaGVzW3RuZHhdLmlzUXVhbnRpZmllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gaGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbdG5keF0sIFsgdG5keCBdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICYmIHRlc3RQb3MgPT09IHBvcykgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RQb3MgPiBwb3MpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZpbHRlclRlc3RzKHRlc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmtlZXBTdGF0aWMgJiYgcG9zID4gMCAmJiB0ZXN0cy5sZW5ndGggPiAxICsgKFwiXCIgPT09IHRlc3RzW3Rlc3RzLmxlbmd0aCAtIDFdLm1hdGNoLmRlZiA/IDEgOiAwKSAmJiAhMCAhPT0gdGVzdHNbMF0ubWF0Y2gub3B0aW9uYWxpdHkgJiYgITAgIT09IHRlc3RzWzBdLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAmJiBudWxsID09PSB0ZXN0c1swXS5tYXRjaC5mbiAmJiAhL1swLTlhLWJBLVpdLy50ZXN0KHRlc3RzWzBdLm1hdGNoLmRlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV0gPT09IHVuZGVmaW5lZCkgcmV0dXJuIFsgZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKHRlc3RzKSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MgLSAxXS5hbHRlcm5hdGlvbiA9PT0gdGVzdHNbMF0uYWx0ZXJuYXRpb24pIHJldHVybiBbIGRldGVybWluZVRlc3RUZW1wbGF0ZSh0ZXN0cykgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV0pIHJldHVybiBbIGRldGVybWluZVRlc3RUZW1wbGF0ZSh0ZXN0cykgXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVzdHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBsYXRlc3RNYXRjaCwgbWFza1Rva2VucyA9IGdldE1hc2tTZXQoKS5tYXNrVG9rZW4sIHRlc3RQb3MgPSBuZHhJbnRsenIgPyB0c3RQcyA6IDAsIG5keEluaXRpYWxpemVyID0gbmR4SW50bHpyID8gbmR4SW50bHpyLnNsaWNlKCkgOiBbIDAgXSwgbWF0Y2hlcyA9IFtdLCBpbnNlcnRTdG9wID0gITEsIGNhY2hlRGVwZW5kZW5jeSA9IG5keEludGx6ciA/IG5keEludGx6ci5qb2luKFwiXCIpIDogXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAocG9zID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5keEludGx6ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0ZXN0LCBwcmV2aW91c1BvcyA9IHBvcyAtIDE7ICh0ZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3ByZXZpb3VzUG9zXSB8fCBnZXRNYXNrU2V0KCkudGVzdHNbcHJldmlvdXNQb3NdKSA9PT0gdW5kZWZpbmVkICYmIHByZXZpb3VzUG9zID4gLTE7ICkgcHJldmlvdXNQb3MtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3QgIT09IHVuZGVmaW5lZCAmJiBwcmV2aW91c1BvcyA+IC0xICYmIChuZHhJbml0aWFsaXplciA9IGZ1bmN0aW9uKHRlc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0b3IgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5pc0FycmF5KHRlc3RzKSB8fCAodGVzdHMgPSBbIHRlc3RzIF0pLCB0ZXN0cy5sZW5ndGggPiAwICYmICh0ZXN0c1swXS5hbHRlcm5hdGlvbiA9PT0gdW5kZWZpbmVkID8gMCA9PT0gKGxvY2F0b3IgPSBkZXRlcm1pbmVUZXN0VGVtcGxhdGUodGVzdHMuc2xpY2UoKSkubG9jYXRvci5zbGljZSgpKS5sZW5ndGggJiYgKGxvY2F0b3IgPSB0ZXN0c1swXS5sb2NhdG9yLnNsaWNlKCkpIDogJC5lYWNoKHRlc3RzLCBmdW5jdGlvbihuZHgsIHRzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJcIiAhPT0gdHN0LmRlZikgaWYgKDAgPT09IGxvY2F0b3IubGVuZ3RoKSBsb2NhdG9yID0gdHN0LmxvY2F0b3Iuc2xpY2UoKTsgZWxzZSBmb3IgKHZhciBpID0gMDsgaSA8IGxvY2F0b3IubGVuZ3RoOyBpKyspIHRzdC5sb2NhdG9yW2ldICYmIC0xID09PSBsb2NhdG9yW2ldLnRvU3RyaW5nKCkuaW5kZXhPZih0c3QubG9jYXRvcltpXSkgJiYgKGxvY2F0b3JbaV0gKz0gXCIsXCIgKyB0c3QubG9jYXRvcltpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCBsb2NhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSh0ZXN0KSwgY2FjaGVEZXBlbmRlbmN5ID0gbmR4SW5pdGlhbGl6ZXIuam9pbihcIlwiKSwgdGVzdFBvcyA9IHByZXZpb3VzUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gJiYgZ2V0TWFza1NldCgpLnRlc3RzW3Bvc11bMF0uY2QgPT09IGNhY2hlRGVwZW5kZW5jeSkgcmV0dXJuIGZpbHRlclRlc3RzKGdldE1hc2tTZXQoKS50ZXN0c1twb3NdKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbXRuZHggPSBuZHhJbml0aWFsaXplci5zaGlmdCgpOyBtdG5keCA8IG1hc2tUb2tlbnMubGVuZ3RoICYmICEocmVzb2x2ZVRlc3RGcm9tVG9rZW4obWFza1Rva2Vuc1ttdG5keF0sIG5keEluaXRpYWxpemVyLCBbIG10bmR4IF0pICYmIHRlc3RQb3MgPT09IHBvcyB8fCB0ZXN0UG9zID4gcG9zKTsgbXRuZHgrKykgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gKDAgPT09IG1hdGNoZXMubGVuZ3RoIHx8IGluc2VydFN0b3ApICYmIG1hdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6ICEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRvcjogW10sXG4gICAgICAgICAgICAgICAgICAgIGNkOiBjYWNoZURlcGVuZGVuY3lcbiAgICAgICAgICAgICAgICB9KSwgbmR4SW50bHpyICE9PSB1bmRlZmluZWQgJiYgZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gPyBmaWx0ZXJUZXN0cygkLmV4dGVuZCghMCwgW10sIG1hdGNoZXMpKSA6IChnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSA9ICQuZXh0ZW5kKCEwLCBbXSwgbWF0Y2hlcyksIFxuICAgICAgICAgICAgICAgIGZpbHRlclRlc3RzKGdldE1hc2tTZXQoKS50ZXN0c1twb3NdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRCdWZmZXJUZW1wbGF0ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFza1NldCgpLl9idWZmZXIgPT09IHVuZGVmaW5lZCAmJiAoZ2V0TWFza1NldCgpLl9idWZmZXIgPSBnZXRNYXNrVGVtcGxhdGUoITEsIDEpLCBcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuYnVmZmVyID09PSB1bmRlZmluZWQgJiYgKGdldE1hc2tTZXQoKS5idWZmZXIgPSBnZXRNYXNrU2V0KCkuX2J1ZmZlci5zbGljZSgpKSksIFxuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5fYnVmZmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QnVmZmVyKG5vQ2FjaGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFza1NldCgpLmJ1ZmZlciAhPT0gdW5kZWZpbmVkICYmICEwICE9PSBub0NhY2hlIHx8IChnZXRNYXNrU2V0KCkuYnVmZmVyID0gZ2V0TWFza1RlbXBsYXRlKCEwLCBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCAhMCkpLCBcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuYnVmZmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcmVmcmVzaEZyb21CdWZmZXIoc3RhcnQsIGVuZCwgYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGksIHA7XG4gICAgICAgICAgICAgICAgaWYgKCEwID09PSBzdGFydCkgcmVzZXRNYXNrU2V0KCksIHN0YXJ0ID0gMCwgZW5kID0gYnVmZmVyLmxlbmd0aDsgZWxzZSBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgIGZvciAocCA9IHN0YXJ0LCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykgaWYgKHJlc2V0TWFza1NldCghMCksIGJ1ZmZlcltpXSAhPT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxSZXN1bHQgPSBpc1ZhbGlkKHAsIGJ1ZmZlcltpXSwgITAsICEwKTtcbiAgICAgICAgICAgICAgICAgICAgITEgIT09IHZhbFJlc3VsdCAmJiAocmVzZXRNYXNrU2V0KCEwKSwgcCA9IHZhbFJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkID8gdmFsUmVzdWx0LmNhcmV0IDogdmFsUmVzdWx0LnBvcyArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhc2luZyhlbGVtLCB0ZXN0LCBwb3MpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9wdHMuY2FzaW5nIHx8IHRlc3QuY2FzaW5nKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwidXBwZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJsb3dlclwiOlxuICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBcInRpdGxlXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NCZWZvcmUgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGVsZW0gPSAwID09PSBwb3MgfHwgcG9zQmVmb3JlICYmIHBvc0JlZm9yZS5pbnB1dCA9PT0gU3RyaW5nLmZyb21DaGFyQ29kZShJbnB1dG1hc2sua2V5Q29kZS5TUEFDRSkgPyBlbGVtLnRvVXBwZXJDYXNlKCkgOiBlbGVtLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMuY2FzaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksIGVsZW0gPSBvcHRzLmNhc2luZy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrQWx0ZXJuYXRpb25NYXRjaChhbHRBcnIxLCBhbHRBcnIyLCBuYSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG5hTmR4LCBhbHRBcnJDID0gb3B0cy5ncmVlZHkgPyBhbHRBcnIyIDogYWx0QXJyMi5zbGljZSgwLCAxKSwgaXNNYXRjaCA9ICExLCBuYUFyciA9IG5hICE9PSB1bmRlZmluZWQgPyBuYS5zcGxpdChcIixcIikgOiBbXSwgaSA9IDA7IGkgPCBuYUFyci5sZW5ndGg7IGkrKykgLTEgIT09IChuYU5keCA9IGFsdEFycjEuaW5kZXhPZihuYUFycltpXSkpICYmIGFsdEFycjEuc3BsaWNlKG5hTmR4LCAxKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBhbG5keCA9IDA7IGFsbmR4IDwgYWx0QXJyMS5sZW5ndGg7IGFsbmR4KyspIGlmICgtMSAhPT0gJC5pbkFycmF5KGFsdEFycjFbYWxuZHhdLCBhbHRBcnJDKSkge1xuICAgICAgICAgICAgICAgICAgICBpc01hdGNoID0gITA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNNYXRjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVmFsaWQocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCwgZnJvbUFsdGVybmF0ZSwgdmFsaWRhdGVPbmx5KSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNTZWxlY3Rpb24ocG9zT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSBpc1JUTCA/IHBvc09iai5iZWdpbiAtIHBvc09iai5lbmQgPiAxIHx8IHBvc09iai5iZWdpbiAtIHBvc09iai5lbmQgPT0gMSA6IHBvc09iai5lbmQgLSBwb3NPYmouYmVnaW4gPiAxIHx8IHBvc09iai5lbmQgLSBwb3NPYmouYmVnaW4gPT0gMTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbiAmJiAwID09PSBwb3NPYmouYmVnaW4gJiYgcG9zT2JqLmVuZCA9PT0gZ2V0TWFza1NldCgpLm1hc2tMZW5ndGggPyBcImZ1bGxcIiA6IHNlbGVjdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gX2lzVmFsaWQocG9zaXRpb24sIGMsIHN0cmljdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcnNsdCA9ICExO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5lYWNoKGdldFRlc3RzKHBvc2l0aW9uKSwgZnVuY3Rpb24obmR4LCB0c3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHRlc3QgPSB0c3QubWF0Y2gsIGxvb3BlbmQgPSBjID8gMSA6IDAsIGNocnMgPSBcIlwiLCBpID0gdGVzdC5jYXJkaW5hbGl0eTsgaSA+IGxvb3BlbmQ7IGktLSkgY2hycyArPSBnZXRCdWZmZXJFbGVtZW50KHBvc2l0aW9uIC0gKGkgLSAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYyAmJiAoY2hycyArPSBjKSwgZ2V0QnVmZmVyKCEwKSwgITEgIT09IChyc2x0ID0gbnVsbCAhPSB0ZXN0LmZuID8gdGVzdC5mbi50ZXN0KGNocnMsIGdldE1hc2tTZXQoKSwgcG9zaXRpb24sIHN0cmljdCwgb3B0cywgaXNTZWxlY3Rpb24ocG9zKSkgOiAoYyA9PT0gdGVzdC5kZWYgfHwgYyA9PT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyKSAmJiBcIlwiICE9PSB0ZXN0LmRlZiAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogZ2V0UGxhY2Vob2xkZXIocG9zaXRpb24sIHRlc3QsICEwKSB8fCB0ZXN0LmRlZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtID0gcnNsdC5jICE9PSB1bmRlZmluZWQgPyByc2x0LmMgOiBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtID09PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgJiYgbnVsbCA9PT0gdGVzdC5mbiA/IGdldFBsYWNlaG9sZGVyKHBvc2l0aW9uLCB0ZXN0LCAhMCkgfHwgdGVzdC5kZWYgOiBlbGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZGF0ZWRQb3MgPSBwb3NpdGlvbiwgcG9zc2libGVNb2RpZmllZEJ1ZmZlciA9IGdldEJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0LnJlbW92ZSAhPT0gdW5kZWZpbmVkICYmICgkLmlzQXJyYXkocnNsdC5yZW1vdmUpIHx8IChyc2x0LnJlbW92ZSA9IFsgcnNsdC5yZW1vdmUgXSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChyc2x0LnJlbW92ZS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIgLSBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXBWYWxpZFBvc2l0aW9ucyhsbW50LCBsbW50ICsgMSwgITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgcnNsdC5pbnNlcnQgIT09IHVuZGVmaW5lZCAmJiAoJC5pc0FycmF5KHJzbHQuaW5zZXJ0KSB8fCAocnNsdC5pbnNlcnQgPSBbIHJzbHQuaW5zZXJ0IF0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gocnNsdC5pbnNlcnQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQobG1udC5wb3MsIGxtbnQuYywgITAsIGZyb21TZXRWYWxpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCByc2x0LnJlZnJlc2hGcm9tQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZyZXNoID0gcnNsdC5yZWZyZXNoRnJvbUJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZnJlc2hGcm9tQnVmZmVyKCEwID09PSByZWZyZXNoID8gcmVmcmVzaCA6IHJlZnJlc2guc3RhcnQsIHJlZnJlc2guZW5kLCBwb3NzaWJsZU1vZGlmaWVkQnVmZmVyKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJzbHQucG9zID09PSB1bmRlZmluZWQgJiYgcnNsdC5jID09PSB1bmRlZmluZWQpIHJldHVybiByc2x0LnBvcyA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh2YWxpZGF0ZWRQb3MgPSByc2x0LnBvcyAhPT0gdW5kZWZpbmVkID8gcnNsdC5wb3MgOiBwb3NpdGlvbikgIT09IHBvc2l0aW9uKSByZXR1cm4gcnNsdCA9ICQuZXh0ZW5kKHJzbHQsIGlzVmFsaWQodmFsaWRhdGVkUG9zLCBlbGVtLCAhMCwgZnJvbVNldFZhbGlkKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEwICE9PSByc2x0ICYmIHJzbHQucG9zICE9PSB1bmRlZmluZWQgJiYgcnNsdC5wb3MgIT09IHBvc2l0aW9uICYmICh2YWxpZGF0ZWRQb3MgPSByc2x0LnBvcywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXIocG9zaXRpb24sIHZhbGlkYXRlZFBvcywgZ2V0QnVmZmVyKCkuc2xpY2UoKSksIHZhbGlkYXRlZFBvcyAhPT0gcG9zaXRpb24pKSByZXR1cm4gcnNsdCA9ICQuZXh0ZW5kKHJzbHQsIGlzVmFsaWQodmFsaWRhdGVkUG9zLCBlbGVtLCAhMCkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCEwID09PSByc2x0IHx8IHJzbHQucG9zICE9PSB1bmRlZmluZWQgfHwgcnNsdC5jICE9PSB1bmRlZmluZWQpICYmIChuZHggPiAwICYmIHJlc2V0TWFza1NldCghMCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbGlkUG9zaXRpb24odmFsaWRhdGVkUG9zLCAkLmV4dGVuZCh7fSwgdHN0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBjYXNpbmcoZWxlbSwgdGVzdCwgdmFsaWRhdGVkUG9zKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmcm9tU2V0VmFsaWQsIGlzU2VsZWN0aW9uKHBvcykpIHx8IChyc2x0ID0gITEpLCAhMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLCByc2x0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRWYWxpZFBvc2l0aW9uKHBvcywgdmFsaWRUZXN0LCBmcm9tU2V0VmFsaWQsIGlzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1NlbGVjdGlvbiB8fCBvcHRzLmluc2VydE1vZGUgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gIT09IHVuZGVmaW5lZCAmJiBmcm9tU2V0VmFsaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGksIHBvc2l0aW9uc0Nsb25lID0gJC5leHRlbmQoITAsIHt9LCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsICEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IHBvczsgaSA8PSBsdnA7IGkrKykgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdID0gJC5leHRlbmQoITAsIHt9LCB2YWxpZFRlc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGosIHZhbGlkID0gITAsIHZwcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucywgbmVlZHNWYWxpZGF0aW9uID0gITEsIGluaXRpYWxMZW5ndGggPSBnZXRNYXNrU2V0KCkubWFza0xlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGogPSBwb3M7IGkgPD0gbHZwOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHBvc2l0aW9uc0Nsb25lW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ICE9PSB1bmRlZmluZWQpIGZvciAodmFyIHBvc01hdGNoID0gajsgcG9zTWF0Y2ggPCBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCAmJiAobnVsbCA9PT0gdC5tYXRjaC5mbiAmJiB2cHNbaV0gJiYgKCEwID09PSB2cHNbaV0ubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyIHx8ICEwID09PSB2cHNbaV0ubWF0Y2gub3B0aW9uYWxpdHkpIHx8IG51bGwgIT0gdC5tYXRjaC5mbik7ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zTWF0Y2grKywgITEgPT09IG5lZWRzVmFsaWRhdGlvbiAmJiBwb3NpdGlvbnNDbG9uZVtwb3NNYXRjaF0gJiYgcG9zaXRpb25zQ2xvbmVbcG9zTWF0Y2hdLm1hdGNoLmRlZiA9PT0gdC5tYXRjaC5kZWYpIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NNYXRjaF0gPSAkLmV4dGVuZCghMCwge30sIHBvc2l0aW9uc0Nsb25lW3Bvc01hdGNoXSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zTWF0Y2hdLmlucHV0ID0gdC5pbnB1dCwgZmlsbE1pc3NpbmdOb25NYXNrKHBvc01hdGNoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGogPSBwb3NNYXRjaCwgdmFsaWQgPSAhMDsgZWxzZSBpZiAocG9zaXRpb25DYW5NYXRjaERlZmluaXRpb24ocG9zTWF0Y2gsIHQubWF0Y2guZGVmKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGlzVmFsaWQocG9zTWF0Y2gsIHQuaW5wdXQsICEwLCAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9ICExICE9PSByZXN1bHQsIGogPSByZXN1bHQuY2FyZXQgfHwgcmVzdWx0Lmluc2VydCA/IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgOiBwb3NNYXRjaCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkc1ZhbGlkYXRpb24gPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghKHZhbGlkID0gITAgPT09IHQuZ2VuZXJhdGVkSW5wdXQpICYmIHBvc01hdGNoID49IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoIC0gMSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkubWFza0xlbmd0aCA8IGluaXRpYWxMZW5ndGggJiYgKGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoID0gaW5pdGlhbExlbmd0aCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmFsaWQpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZCkgcmV0dXJuIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9ICQuZXh0ZW5kKCEwLCB7fSwgcG9zaXRpb25zQ2xvbmUpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCksICExO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gPSAkLmV4dGVuZCghMCwge30sIHZhbGlkVGVzdCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNldE1hc2tTZXQoITApLCAhMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZmlsbE1pc3NpbmdOb25NYXNrKG1hc2tQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcG5keCA9IG1hc2tQb3MgLSAxOyBwbmR4ID4gLTEgJiYgIWdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twbmR4XTsgcG5keC0tKSA7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0VGVtcGxhdGUsIHRlc3RzRnJvbVBvcztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChwbmR4Kys7IHBuZHggPCBtYXNrUG9zOyBwbmR4KyspIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twbmR4XSA9PT0gdW5kZWZpbmVkICYmICghMSA9PT0gb3B0cy5qaXRNYXNraW5nIHx8IG9wdHMuaml0TWFza2luZyA+IHBuZHgpICYmIChcIlwiID09PSAodGVzdHNGcm9tUG9zID0gZ2V0VGVzdHMocG5keCwgZ2V0VGVzdFRlbXBsYXRlKHBuZHggLSAxKS5sb2NhdG9yLCBwbmR4IC0gMSkuc2xpY2UoKSlbdGVzdHNGcm9tUG9zLmxlbmd0aCAtIDFdLm1hdGNoLmRlZiAmJiB0ZXN0c0Zyb21Qb3MucG9wKCksIFxuICAgICAgICAgICAgICAgICAgICAodGVzdFRlbXBsYXRlID0gZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKHRlc3RzRnJvbVBvcykpICYmICh0ZXN0VGVtcGxhdGUubWF0Y2guZGVmID09PSBvcHRzLnJhZGl4UG9pbnREZWZpbml0aW9uU3ltYm9sIHx8ICFpc01hc2socG5keCwgITApIHx8ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGdldEJ1ZmZlcigpKSA8IHBuZHggJiYgdGVzdFRlbXBsYXRlLm1hdGNoLmZuICYmIHRlc3RUZW1wbGF0ZS5tYXRjaC5mbi50ZXN0KGdldFBsYWNlaG9sZGVyKHBuZHgpLCBnZXRNYXNrU2V0KCksIHBuZHgsICExLCBvcHRzKSkgJiYgITEgIT09IChyZXN1bHQgPSBfaXNWYWxpZChwbmR4LCBnZXRQbGFjZWhvbGRlcihwbmR4LCB0ZXN0VGVtcGxhdGUubWF0Y2gsICEwKSB8fCAobnVsbCA9PSB0ZXN0VGVtcGxhdGUubWF0Y2guZm4gPyB0ZXN0VGVtcGxhdGUubWF0Y2guZGVmIDogXCJcIiAhPT0gZ2V0UGxhY2Vob2xkZXIocG5keCkgPyBnZXRQbGFjZWhvbGRlcihwbmR4KSA6IGdldEJ1ZmZlcigpW3BuZHhdKSwgITApKSAmJiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Jlc3VsdC5wb3MgfHwgcG5keF0uZ2VuZXJhdGVkSW5wdXQgPSAhMCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJpY3QgPSAhMCA9PT0gc3RyaWN0O1xuICAgICAgICAgICAgICAgIHZhciBtYXNrUG9zID0gcG9zO1xuICAgICAgICAgICAgICAgIHBvcy5iZWdpbiAhPT0gdW5kZWZpbmVkICYmIChtYXNrUG9zID0gaXNSVEwgJiYgIWlzU2VsZWN0aW9uKHBvcykgPyBwb3MuZW5kIDogcG9zLmJlZ2luKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gITAsIHBvc2l0aW9uc0Nsb25lID0gJC5leHRlbmQoITAsIHt9LCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5wcmVWYWxpZGF0aW9uKSAmJiAhc3RyaWN0ICYmICEwICE9PSBmcm9tU2V0VmFsaWQgJiYgITAgIT09IHZhbGlkYXRlT25seSAmJiAocmVzdWx0ID0gb3B0cy5wcmVWYWxpZGF0aW9uKGdldEJ1ZmZlcigpLCBtYXNrUG9zLCBjLCBpc1NlbGVjdGlvbihwb3MpLCBvcHRzKSksIFxuICAgICAgICAgICAgICAgICEwID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGxNaXNzaW5nTm9uTWFzayhtYXNrUG9zKSwgaXNTZWxlY3Rpb24ocG9zKSAmJiAoaGFuZGxlUmVtb3ZlKHVuZGVmaW5lZCwgSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFLCBwb3MsICEwLCAhMCksIFxuICAgICAgICAgICAgICAgICAgICBtYXNrUG9zID0gZ2V0TWFza1NldCgpLnApLCBtYXNrUG9zIDwgZ2V0TWFza1NldCgpLm1hc2tMZW5ndGggJiYgKG1heExlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IG1hc2tQb3MgPCBtYXhMZW5ndGgpICYmIChyZXN1bHQgPSBfaXNWYWxpZChtYXNrUG9zLCBjLCBzdHJpY3QpLCBcbiAgICAgICAgICAgICAgICAgICAgKCFzdHJpY3QgfHwgITAgPT09IGZyb21TZXRWYWxpZCkgJiYgITEgPT09IHJlc3VsdCAmJiAhMCAhPT0gdmFsaWRhdGVPbmx5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3NWYWxpZCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1ttYXNrUG9zXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3VycmVudFBvc1ZhbGlkIHx8IG51bGwgIT09IGN1cnJlbnRQb3NWYWxpZC5tYXRjaC5mbiB8fCBjdXJyZW50UG9zVmFsaWQubWF0Y2guZGVmICE9PSBjICYmIGMgIT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgob3B0cy5pbnNlcnRNb2RlIHx8IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tzZWVrTmV4dChtYXNrUG9zKV0gPT09IHVuZGVmaW5lZCkgJiYgIWlzTWFzayhtYXNrUG9zLCAhMCkpIGZvciAodmFyIG5Qb3MgPSBtYXNrUG9zICsgMSwgc25Qb3MgPSBzZWVrTmV4dChtYXNrUG9zKTsgblBvcyA8PSBzblBvczsgblBvcysrKSBpZiAoITEgIT09IChyZXN1bHQgPSBfaXNWYWxpZChuUG9zLCBjLCBzdHJpY3QpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhZnVuY3Rpb24ob3JpZ2luYWxQb3MsIG5ld1Bvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZwID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW25ld1Bvc107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodnApIGZvciAodmFyIHRhcmdldExvY2F0b3IgPSB2cC5sb2NhdG9yLCB0bGwgPSB0YXJnZXRMb2NhdG9yLmxlbmd0aCwgcHMgPSBvcmlnaW5hbFBvczsgcHMgPCBuZXdQb3M7IHBzKyspIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcHNdID09PSB1bmRlZmluZWQgJiYgIWlzTWFzayhwcywgITApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RzID0gZ2V0VGVzdHMocHMpLnNsaWNlKCksIGJlc3RNYXRjaCA9IGRldGVybWluZVRlc3RUZW1wbGF0ZSh0ZXN0cywgITApLCBlcXVhbGl0eSA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXCIgPT09IHRlc3RzW3Rlc3RzLmxlbmd0aCAtIDFdLm1hdGNoLmRlZiAmJiB0ZXN0cy5wb3AoKSwgJC5lYWNoKHRlc3RzLCBmdW5jdGlvbihuZHgsIHRzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRsbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHN0LmxvY2F0b3JbaV0gPT09IHVuZGVmaW5lZCB8fCAhY2hlY2tBbHRlcm5hdGlvbk1hdGNoKHRzdC5sb2NhdG9yW2ldLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpLCB0YXJnZXRMb2NhdG9yW2ldLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpLCB0c3QubmEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEFJID0gdGFyZ2V0TG9jYXRvcltpXSwgYmVzdE1hdGNoQUkgPSBiZXN0TWF0Y2gubG9jYXRvcltpXSwgdHN0QUkgPSB0c3QubG9jYXRvcltpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBSSAtIGJlc3RNYXRjaEFJID4gTWF0aC5hYnModGFyZ2V0QUkgLSB0c3RBSSkgJiYgKGJlc3RNYXRjaCA9IHRzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcXVhbGl0eSA8IGkgJiYgKGVxdWFsaXR5ID0gaSwgYmVzdE1hdGNoID0gdHN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAoYmVzdE1hdGNoID0gJC5leHRlbmQoe30sIGJlc3RNYXRjaCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZ2V0UGxhY2Vob2xkZXIocHMsIGJlc3RNYXRjaC5tYXRjaCwgITApIHx8IGJlc3RNYXRjaC5tYXRjaC5kZWZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkuZ2VuZXJhdGVkSW5wdXQgPSAhMCwgc2V0VmFsaWRQb3NpdGlvbihwcywgYmVzdE1hdGNoLCAhMCksIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tuZXdQb3NdID0gdW5kZWZpbmVkLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXNWYWxpZChuZXdQb3MsIHZwLmlucHV0LCAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0obWFza1BvcywgcmVzdWx0LnBvcyAhPT0gdW5kZWZpbmVkID8gcmVzdWx0LnBvcyA6IG5Qb3MpLCBtYXNrUG9zID0gblBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogc2Vla05leHQobWFza1BvcylcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgITEgPT09IHJlc3VsdCAmJiBvcHRzLmtlZXBTdGF0aWMgJiYgIXN0cmljdCAmJiAhMCAhPT0gZnJvbUFsdGVybmF0ZSAmJiAocmVzdWx0ID0gZnVuY3Rpb24ocG9zLCBjLCBzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXN0QWx0LCBhbHRlcm5hdGlvbiwgYWx0UG9zLCBwcmV2QWx0UG9zLCBpLCB2YWxpZFBvcywgYWx0TmR4cywgZGVjaXNpb25Qb3MsIHZhbGlkUHNDbG9uZSA9ICQuZXh0ZW5kKCEwLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKSwgaXNWYWxpZFJzbHQgPSAhMSwgbEFsdFBvcyA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHByZXZBbHRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbEFsdFBvc107IGxBbHRQb3MgPj0gMDsgbEFsdFBvcy0tKSBpZiAoKGFsdFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsQWx0UG9zXSkgJiYgYWx0UG9zLmFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEFsdCA9IGxBbHRQb3MsIGFsdGVybmF0aW9uID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2xhc3RBbHRdLmFsdGVybmF0aW9uLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2QWx0UG9zLmxvY2F0b3JbYWx0UG9zLmFsdGVybmF0aW9uXSAhPT0gYWx0UG9zLmxvY2F0b3JbYWx0UG9zLmFsdGVybmF0aW9uXSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldkFsdFBvcyA9IGFsdFBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjaXNpb25Qb3MgPSBwYXJzZUludChsYXN0QWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVjaXNpb25UYWtlciA9IHByZXZBbHRQb3MubG9jYXRvcltwcmV2QWx0UG9zLmFsdGVybmF0aW9uIHx8IGFsdGVybmF0aW9uXSAhPT0gdW5kZWZpbmVkID8gcHJldkFsdFBvcy5sb2NhdG9yW3ByZXZBbHRQb3MuYWx0ZXJuYXRpb24gfHwgYWx0ZXJuYXRpb25dIDogYWx0TmR4c1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNpc2lvblRha2VyLmxlbmd0aCA+IDAgJiYgKGRlY2lzaW9uVGFrZXIgPSBkZWNpc2lvblRha2VyLnNwbGl0KFwiLFwiKVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3NpYmlsaXR5UG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2RlY2lzaW9uUG9zXSwgcHJldlBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tkZWNpc2lvblBvcyAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChnZXRUZXN0cyhkZWNpc2lvblBvcywgcHJldlBvcyA/IHByZXZQb3MubG9jYXRvciA6IHVuZGVmaW5lZCwgZGVjaXNpb25Qb3MgLSAxKSwgZnVuY3Rpb24obmR4LCB0ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdE5keHMgPSB0ZXN0LmxvY2F0b3JbYWx0ZXJuYXRpb25dID8gdGVzdC5sb2NhdG9yW2FsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtbmR4ID0gMDsgbW5keCA8IGFsdE5keHMubGVuZ3RoOyBtbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZElucHV0cyA9IFtdLCBzdGF0aWNJbnB1dHNCZWZvcmVQb3MgPSAwLCBzdGF0aWNJbnB1dHNCZWZvcmVQb3NBbHRlcm5hdGUgPSAwLCB2ZXJpZnlWYWxpZElucHV0ID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVjaXNpb25UYWtlciA8IGFsdE5keHNbbW5keF0gJiYgKHRlc3QubmEgPT09IHVuZGVmaW5lZCB8fCAtMSA9PT0gJC5pbkFycmF5KGFsdE5keHNbbW5keF0sIHRlc3QubmEuc3BsaXQoXCIsXCIpKSB8fCAtMSA9PT0gJC5pbkFycmF5KGRlY2lzaW9uVGFrZXIudG9TdHJpbmcoKSwgYWx0TmR4cykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2RlY2lzaW9uUG9zXSA9ICQuZXh0ZW5kKCEwLCB7fSwgdGVzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3NpYmlsaXRpZXMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZGVjaXNpb25Qb3NdLmxvY2F0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZGVjaXNpb25Qb3NdLmxvY2F0b3JbYWx0ZXJuYXRpb25dID0gcGFyc2VJbnQoYWx0TmR4c1ttbmR4XSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT0gdGVzdC5tYXRjaC5mbiA/IChwb3NzaWJpbGl0eVBvcy5pbnB1dCAhPT0gdGVzdC5tYXRjaC5kZWYgJiYgKHZlcmlmeVZhbGlkSW5wdXQgPSAhMCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITAgIT09IHBvc3NpYmlsaXR5UG9zLmdlbmVyYXRlZElucHV0ICYmIHZhbGlkSW5wdXRzLnB1c2gocG9zc2liaWxpdHlQb3MuaW5wdXQpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljSW5wdXRzQmVmb3JlUG9zQWx0ZXJuYXRlKyssIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tkZWNpc2lvblBvc10uZ2VuZXJhdGVkSW5wdXQgPSAhL1swLTlhLWJBLVpdLy50ZXN0KHRlc3QubWF0Y2guZGVmKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2RlY2lzaW9uUG9zXS5pbnB1dCA9IHRlc3QubWF0Y2guZGVmKSA6IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tkZWNpc2lvblBvc10uaW5wdXQgPSBwb3NzaWJpbGl0eVBvcy5pbnB1dCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGRlY2lzaW9uUG9zICsgMTsgaSA8IGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgITApICsgMTsgaSsrKSAodmFsaWRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0pICYmICEwICE9PSB2YWxpZFBvcy5nZW5lcmF0ZWRJbnB1dCAmJiAvWzAtOWEtYkEtWl0vLnRlc3QodmFsaWRQb3MuaW5wdXQpID8gdmFsaWRJbnB1dHMucHVzaCh2YWxpZFBvcy5pbnB1dCkgOiBpIDwgcG9zICYmIHN0YXRpY0lucHV0c0JlZm9yZVBvcysrLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmVyaWZ5VmFsaWRJbnB1dCAmJiB2YWxpZElucHV0c1swXSA9PT0gdGVzdC5tYXRjaC5kZWYgJiYgdmFsaWRJbnB1dHMuc2hpZnQoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRNYXNrU2V0KCEwKSwgaXNWYWxpZFJzbHQgPSAhMDsgdmFsaWRJbnB1dHMubGVuZ3RoID4gMDsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHZhbGlkSW5wdXRzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCAhPT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyICYmICEoaXNWYWxpZFJzbHQgPSBpc1ZhbGlkKGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgITApICsgMSwgaW5wdXQsICExLCBmcm9tU2V0VmFsaWQsICEwKSkpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZFJzbHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2RlY2lzaW9uUG9zXS5sb2NhdG9yID0gcG9zc2liaWxpdGllcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHBvcykgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBkZWNpc2lvblBvcyArIDE7IGkgPCBnZXRMYXN0VmFsaWRQb3NpdGlvbigpICsgMTsgaSsrKSAoKHZhbGlkUG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldKSA9PT0gdW5kZWZpbmVkIHx8IG51bGwgPT0gdmFsaWRQb3MubWF0Y2guZm4pICYmIGkgPCBwb3MgKyAoc3RhdGljSW5wdXRzQmVmb3JlUG9zQWx0ZXJuYXRlIC0gc3RhdGljSW5wdXRzQmVmb3JlUG9zKSAmJiBzdGF0aWNJbnB1dHNCZWZvcmVQb3NBbHRlcm5hdGUrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZFJzbHQgPSBpc1ZhbGlkKChwb3MgKz0gc3RhdGljSW5wdXRzQmVmb3JlUG9zQWx0ZXJuYXRlIC0gc3RhdGljSW5wdXRzQmVmb3JlUG9zKSA+IHRhcmdldEx2cCA/IHRhcmdldEx2cCA6IHBvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQsICEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRSc2x0KSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRNYXNrU2V0KCksIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9ICQuZXh0ZW5kKCEwLCB7fSwgdmFsaWRQc0Nsb25lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWRSc2x0O1xuICAgICAgICAgICAgICAgICAgICB9KG1hc2tQb3MsIGMsIHN0cmljdCkpLCAhMCA9PT0gcmVzdWx0ICYmIChyZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IG1hc2tQb3NcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5wb3N0VmFsaWRhdGlvbikgJiYgITEgIT09IHJlc3VsdCAmJiAhc3RyaWN0ICYmICEwICE9PSBmcm9tU2V0VmFsaWQgJiYgITAgIT09IHZhbGlkYXRlT25seSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdFJlc3VsdCA9IG9wdHMucG9zdFZhbGlkYXRpb24oZ2V0QnVmZmVyKCEwKSwgcmVzdWx0LCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc3RSZXN1bHQucmVmcmVzaEZyb21CdWZmZXIgJiYgcG9zdFJlc3VsdC5idWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZyZXNoID0gcG9zdFJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKCEwID09PSByZWZyZXNoID8gcmVmcmVzaCA6IHJlZnJlc2guc3RhcnQsIHJlZnJlc2guZW5kLCBwb3N0UmVzdWx0LmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gITAgPT09IHBvc3RSZXN1bHQgPyByZXN1bHQgOiBwb3N0UmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC5wb3MgPT09IHVuZGVmaW5lZCAmJiAocmVzdWx0LnBvcyA9IG1hc2tQb3MpLCAhMSAhPT0gcmVzdWx0ICYmICEwICE9PSB2YWxpZGF0ZU9ubHkgfHwgKHJlc2V0TWFza1NldCghMCksIFxuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9ICQuZXh0ZW5kKCEwLCB7fSwgcG9zaXRpb25zQ2xvbmUpKSwgcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNNYXNrKHBvcywgc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRlc3QgPSBnZXRUZXN0VGVtcGxhdGUocG9zKS5tYXRjaDtcbiAgICAgICAgICAgICAgICBpZiAoXCJcIiA9PT0gdGVzdC5kZWYgJiYgKHRlc3QgPSBnZXRUZXN0KHBvcykubWF0Y2gpLCBudWxsICE9IHRlc3QuZm4pIHJldHVybiB0ZXN0LmZuO1xuICAgICAgICAgICAgICAgIGlmICghMCAhPT0gc3RyaWN0ICYmIHBvcyA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0cyA9IGdldFRlc3RzKHBvcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0cy5sZW5ndGggPiAxICsgKFwiXCIgPT09IHRlc3RzW3Rlc3RzLmxlbmd0aCAtIDFdLm1hdGNoLmRlZiA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gc2Vla05leHQocG9zLCBuZXdCbG9jaykge1xuICAgICAgICAgICAgICAgIHZhciBtYXNrTCA9IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChwb3MgPj0gbWFza0wpIHJldHVybiBtYXNrTDtcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3M7XG4gICAgICAgICAgICAgICAgZm9yIChnZXRUZXN0cyhtYXNrTCArIDEpLmxlbmd0aCA+IDEgJiYgKGdldE1hc2tUZW1wbGF0ZSghMCwgbWFza0wgKyAxLCAhMCksIG1hc2tMID0gZ2V0TWFza1NldCgpLm1hc2tMZW5ndGgpOyArK3Bvc2l0aW9uIDwgbWFza0wgJiYgKCEwID09PSBuZXdCbG9jayAmJiAoITAgIT09IGdldFRlc3QocG9zaXRpb24pLm1hdGNoLm5ld0Jsb2NrTWFya2VyIHx8ICFpc01hc2socG9zaXRpb24pKSB8fCAhMCAhPT0gbmV3QmxvY2sgJiYgIWlzTWFzayhwb3NpdGlvbikpOyApIDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBzZWVrUHJldmlvdXMocG9zLCBuZXdCbG9jaykge1xuICAgICAgICAgICAgICAgIHZhciB0ZXN0cywgcG9zaXRpb24gPSBwb3M7XG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uIDw9IDApIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIGZvciAoOy0tcG9zaXRpb24gPiAwICYmICghMCA9PT0gbmV3QmxvY2sgJiYgITAgIT09IGdldFRlc3QocG9zaXRpb24pLm1hdGNoLm5ld0Jsb2NrTWFya2VyIHx8ICEwICE9PSBuZXdCbG9jayAmJiAhaXNNYXNrKHBvc2l0aW9uKSAmJiAoKHRlc3RzID0gZ2V0VGVzdHMocG9zaXRpb24pKS5sZW5ndGggPCAyIHx8IDIgPT09IHRlc3RzLmxlbmd0aCAmJiBcIlwiID09PSB0ZXN0c1sxXS5tYXRjaC5kZWYpKTsgKSA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QnVmZmVyRWxlbWVudChwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zaXRpb25dID09PSB1bmRlZmluZWQgPyBnZXRQbGFjZWhvbGRlcihwb3NpdGlvbikgOiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zaXRpb25dLmlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgY2FyZXRQb3MsIGV2ZW50LCB0cmlnZ2VySW5wdXRFdmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudCAmJiAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZVdyaXRlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb3B0cy5vbkJlZm9yZVdyaXRlLmNhbGwoaW5wdXRtYXNrLCBldmVudCwgYnVmZmVyLCBjYXJldFBvcywgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVmcmVzaEZyb21CdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaCA9IHJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcighMCA9PT0gcmVmcmVzaCA/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcmVzdWx0LmJ1ZmZlciB8fCBidWZmZXIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBnZXRCdWZmZXIoITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgIT09IHVuZGVmaW5lZCAmJiAoY2FyZXRQb3MgPSByZXN1bHQuY2FyZXQgIT09IHVuZGVmaW5lZCA/IHJlc3VsdC5jYXJldCA6IGNhcmV0UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnB1dCAhPT0gdW5kZWZpbmVkICYmIChpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KGJ1ZmZlci5qb2luKFwiXCIpKSwgY2FyZXRQb3MgPT09IHVuZGVmaW5lZCB8fCBldmVudCAhPT0gdW5kZWZpbmVkICYmIFwiYmx1clwiID09PSBldmVudC50eXBlID8gcmVuZGVyQ29sb3JNYXNrKGlucHV0LCBjYXJldFBvcywgMCA9PT0gYnVmZmVyLmxlbmd0aCkgOiBhbmRyb2lkICYmIGV2ZW50ICYmIFwiaW5wdXRcIiA9PT0gZXZlbnQudHlwZSA/IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgfSwgMCkgOiBjYXJldChpbnB1dCwgY2FyZXRQb3MpLCAhMCA9PT0gdHJpZ2dlcklucHV0RXZlbnQgJiYgKHNraXBJbnB1dEV2ZW50ID0gITAsIFxuICAgICAgICAgICAgICAgICQoaW5wdXQpLnRyaWdnZXIoXCJpbnB1dFwiKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0LCByZXR1cm5QTCkge1xuICAgICAgICAgICAgICAgIGlmICgodGVzdCA9IHRlc3QgfHwgZ2V0VGVzdChwb3MpLm1hdGNoKS5wbGFjZWhvbGRlciAhPT0gdW5kZWZpbmVkIHx8ICEwID09PSByZXR1cm5QTCkgcmV0dXJuICQuaXNGdW5jdGlvbih0ZXN0LnBsYWNlaG9sZGVyKSA/IHRlc3QucGxhY2Vob2xkZXIob3B0cykgOiB0ZXN0LnBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgICAgIGlmIChudWxsID09PSB0ZXN0LmZuKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPiAtMSAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldlRlc3QsIHRlc3RzID0gZ2V0VGVzdHMocG9zKSwgc3RhdGljQWx0ZXJuYXRpb25zID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHMubGVuZ3RoID4gMSArIChcIlwiID09PSB0ZXN0c1t0ZXN0cy5sZW5ndGggLSAxXS5tYXRjaC5kZWYgPyAxIDogMCkpIGZvciAodmFyIGkgPSAwOyBpIDwgdGVzdHMubGVuZ3RoOyBpKyspIGlmICghMCAhPT0gdGVzdHNbaV0ubWF0Y2gub3B0aW9uYWxpdHkgJiYgITAgIT09IHRlc3RzW2ldLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAmJiAobnVsbCA9PT0gdGVzdHNbaV0ubWF0Y2guZm4gfHwgcHJldlRlc3QgPT09IHVuZGVmaW5lZCB8fCAhMSAhPT0gdGVzdHNbaV0ubWF0Y2guZm4udGVzdChwcmV2VGVzdC5tYXRjaC5kZWYsIGdldE1hc2tTZXQoKSwgcG9zLCAhMCwgb3B0cykpICYmIChzdGF0aWNBbHRlcm5hdGlvbnMucHVzaCh0ZXN0c1tpXSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA9PT0gdGVzdHNbaV0ubWF0Y2guZm4gJiYgKHByZXZUZXN0ID0gdGVzdHNbaV0pLCBzdGF0aWNBbHRlcm5hdGlvbnMubGVuZ3RoID4gMSAmJiAvWzAtOWEtYkEtWl0vLnRlc3Qoc3RhdGljQWx0ZXJuYXRpb25zWzBdLm1hdGNoLmRlZikpKSByZXR1cm4gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQocG9zICUgb3B0cy5wbGFjZWhvbGRlci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0LmRlZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KHBvcyAlIG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrVmFsKGlucHV0LCB3cml0ZU91dCwgc3RyaWN0LCBucHR2bCwgaW5pdGlhdGluZ0V2ZW50KSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNUZW1wbGF0ZU1hdGNoKG5keCwgY2hhckNvZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMSAhPT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZShuZHgsIHNlZWtOZXh0KG5keCkpLmpvaW4oXCJcIikuaW5kZXhPZihjaGFyQ29kZXMpICYmICFpc01hc2sobmR4KSAmJiBnZXRUZXN0KG5keCkubWF0Y2gubmF0aXZlRGVmID09PSBjaGFyQ29kZXMuY2hhckF0KGNoYXJDb2Rlcy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0VmFsdWUgPSBucHR2bC5zbGljZSgpLCBjaGFyQ29kZXMgPSBcIlwiLCBpbml0aWFsTmR4ID0gLTEsIHJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAocmVzZXRNYXNrU2V0KCksIHN0cmljdCB8fCAhMCA9PT0gb3B0cy5hdXRvVW5tYXNrKSBpbml0aWFsTmR4ID0gc2Vla05leHQoaW5pdGlhbE5keCk7IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGljSW5wdXQgPSBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKDAsIHNlZWtOZXh0KC0xKSkuam9pbihcIlwiKSwgbWF0Y2hlcyA9IGlucHV0VmFsdWUuam9pbihcIlwiKS5tYXRjaChuZXcgUmVnRXhwKFwiXlwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KHN0YXRpY0lucHV0KSwgXCJnXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA+IDAgJiYgKGlucHV0VmFsdWUuc3BsaWNlKDAsIG1hdGNoZXMubGVuZ3RoICogc3RhdGljSW5wdXQubGVuZ3RoKSwgXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxOZHggPSBzZWVrTmV4dChpbml0aWFsTmR4KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgtMSA9PT0gaW5pdGlhbE5keCA/IChnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KGluaXRpYWxOZHgpLCBpbml0aWFsTmR4ID0gMCkgOiBnZXRNYXNrU2V0KCkucCA9IGluaXRpYWxOZHgsIFxuICAgICAgICAgICAgICAgICQuZWFjaChpbnB1dFZhbHVlLCBmdW5jdGlvbihuZHgsIGNoYXJDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSAhPT0gdW5kZWZpbmVkKSBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW25keF0gPT09IHVuZGVmaW5lZCAmJiBpbnB1dFZhbHVlW25keF0gPT09IGdldFBsYWNlaG9sZGVyKG5keCkgJiYgaXNNYXNrKG5keCwgITApICYmICExID09PSBpc1ZhbGlkKG5keCwgaW5wdXRWYWx1ZVtuZHhdLCAhMCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsICEwKSkgZ2V0TWFza1NldCgpLnArKzsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcIl9jaGVja3ZhbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gY2hhckNvZGUuY2hhckNvZGVBdCgwKSwgY2hhckNvZGVzICs9IGNoYXJDb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgITApLCBsdlRlc3QgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZwXSwgbmV4dFRlc3QgPSBnZXRUZXN0VGVtcGxhdGUobHZwICsgMSwgbHZUZXN0ID8gbHZUZXN0LmxvY2F0b3Iuc2xpY2UoKSA6IHVuZGVmaW5lZCwgbHZwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNUZW1wbGF0ZU1hdGNoKGluaXRpYWxOZHgsIGNoYXJDb2RlcykgfHwgc3RyaWN0IHx8IG9wdHMuYXV0b1VubWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBzdHJpY3QgPyBuZHggOiBudWxsID09IG5leHRUZXN0Lm1hdGNoLmZuICYmIG5leHRUZXN0Lm1hdGNoLm9wdGlvbmFsaXR5ICYmIGx2cCArIDEgPCBnZXRNYXNrU2V0KCkucCA/IGx2cCArIDEgOiBnZXRNYXNrU2V0KCkucDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsICEwLCAhMSwgc3RyaWN0LCBwb3MpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsTmR4ID0gcG9zICsgMSwgY2hhckNvZGVzID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXN1bHQgPSBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsICEwLCAhMSwgITAsIGx2cCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCExICE9PSByZXN1bHQgJiYgIXN0cmljdCAmJiAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZVdyaXRlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcmlnUmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPSBvcHRzLm9uQmVmb3JlV3JpdGUuY2FsbChpbnB1dG1hc2ssIGtleXByZXNzLCBnZXRCdWZmZXIoKSwgcmVzdWx0LmZvcndhcmRQb3NpdGlvbiwgb3B0cyksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZXN1bHQgPSAkLmV4dGVuZChvcmlnUmVzdWx0LCByZXN1bHQpKSAmJiByZXN1bHQucmVmcmVzaEZyb21CdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2ggPSByZXN1bHQucmVmcmVzaEZyb21CdWZmZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKCEwID09PSByZWZyZXNoID8gcmVmcmVzaCA6IHJlZnJlc2guc3RhcnQsIHJlZnJlc2guZW5kLCByZXN1bHQuYnVmZmVyKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCksIHJlc3VsdC5jYXJldCAmJiAoZ2V0TWFza1NldCgpLnAgPSByZXN1bHQuY2FyZXQsIHJlc3VsdC5mb3J3YXJkUG9zaXRpb24gPSByZXN1bHQuY2FyZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLCB3cml0ZU91dCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGlucHV0ICYmIHJlc3VsdCAmJiAoY2FyZXRQb3MgPSBvcHRzLm51bWVyaWNJbnB1dCA/IHNlZWtQcmV2aW91cyhyZXN1bHQuZm9yd2FyZFBvc2l0aW9uKSA6IHJlc3VsdC5mb3J3YXJkUG9zaXRpb24pLCBcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBjYXJldFBvcywgaW5pdGlhdGluZ0V2ZW50IHx8IG5ldyAkLkV2ZW50KFwiY2hlY2t2YWxcIiksIGluaXRpYXRpbmdFdmVudCAmJiBcImlucHV0XCIgPT09IGluaXRpYXRpbmdFdmVudC50eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB1bm1hc2tlZHZhbHVlKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbnB1dG1hc2sgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGlucHV0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2sgJiYgaW5wdXQuaW5wdXRtYXNrLnJlZnJlc2hWYWx1ZSAmJiBFdmVudEhhbmRsZXJzLnNldFZhbHVlRXZlbnQuY2FsbChpbnB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB1bVZhbHVlID0gW10sIHZwcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwbmR4IGluIHZwcykgdnBzW3BuZHhdLm1hdGNoICYmIG51bGwgIT0gdnBzW3BuZHhdLm1hdGNoLmZuICYmIHVtVmFsdWUucHVzaCh2cHNbcG5keF0uaW5wdXQpO1xuICAgICAgICAgICAgICAgIHZhciB1bm1hc2tlZFZhbHVlID0gMCA9PT0gdW1WYWx1ZS5sZW5ndGggPyBcIlwiIDogKGlzUlRMID8gdW1WYWx1ZS5yZXZlcnNlKCkgOiB1bVZhbHVlKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5vblVuTWFzaykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlclZhbHVlID0gKGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkgOiBnZXRCdWZmZXIoKSkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdW5tYXNrZWRWYWx1ZSA9IG9wdHMub25Vbk1hc2suY2FsbChpbnB1dG1hc2ssIGJ1ZmZlclZhbHVlLCB1bm1hc2tlZFZhbHVlLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVubWFza2VkVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjYXJldChpbnB1dCwgYmVnaW4sIGVuZCwgbm90cmFuc2xhdGUpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0cmFuc2xhdGVQb3NpdGlvbihwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwID09PSBub3RyYW5zbGF0ZSB8fCAhaXNSVEwgfHwgXCJudW1iZXJcIiAhPSB0eXBlb2YgcG9zIHx8IG9wdHMuZ3JlZWR5ICYmIFwiXCIgPT09IG9wdHMucGxhY2Vob2xkZXIgfHwgKHBvcyA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikubGVuZ3RoIC0gcG9zKSwgXG4gICAgICAgICAgICAgICAgICAgIHBvcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlO1xuICAgICAgICAgICAgICAgIGlmIChiZWdpbiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gaW5wdXQuc2V0U2VsZWN0aW9uUmFuZ2UgPyAoYmVnaW4gPSBpbnB1dC5zZWxlY3Rpb25TdGFydCwgXG4gICAgICAgICAgICAgICAgZW5kID0gaW5wdXQuc2VsZWN0aW9uRW5kKSA6IHdpbmRvdy5nZXRTZWxlY3Rpb24gPyAocmFuZ2UgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKSkuY29tbW9uQW5jZXN0b3JDb250YWluZXIucGFyZW50Tm9kZSAhPT0gaW5wdXQgJiYgcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIgIT09IGlucHV0IHx8IChiZWdpbiA9IHJhbmdlLnN0YXJ0T2Zmc2V0LCBcbiAgICAgICAgICAgICAgICBlbmQgPSByYW5nZS5lbmRPZmZzZXQpIDogZG9jdW1lbnQuc2VsZWN0aW9uICYmIGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSAmJiAoZW5kID0gKGJlZ2luID0gMCAtIChyYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpKS5kdXBsaWNhdGUoKS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgLWlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGgpKSArIHJhbmdlLnRleHQubGVuZ3RoKSwgXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbjogdHJhbnNsYXRlUG9zaXRpb24oYmVnaW4pLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IHRyYW5zbGF0ZVBvc2l0aW9uKGVuZClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChiZWdpbi5iZWdpbiAhPT0gdW5kZWZpbmVkICYmIChlbmQgPSBiZWdpbi5lbmQsIGJlZ2luID0gYmVnaW4uYmVnaW4pLCBcIm51bWJlclwiID09IHR5cGVvZiBiZWdpbikge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IHRyYW5zbGF0ZVBvc2l0aW9uKGJlZ2luKSwgZW5kID0gXCJudW1iZXJcIiA9PSB0eXBlb2YgKGVuZCA9IHRyYW5zbGF0ZVBvc2l0aW9uKGVuZCkpID8gZW5kIDogYmVnaW47XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxDYWxjID0gcGFyc2VJbnQoKChpbnB1dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdykuZ2V0Q29tcHV0ZWRTdHlsZSA/IChpbnB1dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdykuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dCwgbnVsbCkgOiBpbnB1dC5jdXJyZW50U3R5bGUpLmZvbnRTaXplKSAqIGVuZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnNjcm9sbExlZnQgPSBzY3JvbGxDYWxjID4gaW5wdXQuc2Nyb2xsV2lkdGggPyBzY3JvbGxDYWxjIDogMCwgbW9iaWxlIHx8ICExICE9PSBvcHRzLmluc2VydE1vZGUgfHwgYmVnaW4gIT09IGVuZCB8fCBlbmQrKywgXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNldFNlbGVjdGlvblJhbmdlKSBpbnB1dC5zZWxlY3Rpb25TdGFydCA9IGJlZ2luLCBpbnB1dC5zZWxlY3Rpb25FbmQgPSBlbmQ7IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCksIGlucHV0LmZpcnN0Q2hpbGQgPT09IHVuZGVmaW5lZCB8fCBudWxsID09PSBpbnB1dC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuYXBwZW5kQ2hpbGQodGV4dE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoaW5wdXQuZmlyc3RDaGlsZCwgYmVnaW4gPCBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoID8gYmVnaW4gOiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQoaW5wdXQuZmlyc3RDaGlsZCwgZW5kIDwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCA/IGVuZCA6IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKCEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCksIHNlbC5hZGRSYW5nZShyYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UgJiYgKChyYW5nZSA9IGlucHV0LmNyZWF0ZVRleHRSYW5nZSgpKS5jb2xsYXBzZSghMCksIFxuICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlRW5kKFwiY2hhcmFjdGVyXCIsIGVuZCksIHJhbmdlLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCBiZWdpbiksIHJhbmdlLnNlbGVjdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyQ29sb3JNYXNrKGlucHV0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogYmVnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbihyZXR1cm5EZWZpbml0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvcywgdGVzdFBvcywgYnVmZmVyID0gZ2V0QnVmZmVyKCksIGJsID0gYnVmZmVyLmxlbmd0aCwgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgcG9zaXRpb25zID0ge30sIGx2VGVzdCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdLCBuZHhJbnRsenIgPSBsdlRlc3QgIT09IHVuZGVmaW5lZCA/IGx2VGVzdC5sb2NhdG9yLnNsaWNlKCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZm9yIChwb3MgPSBsdnAgKyAxOyBwb3MgPCBidWZmZXIubGVuZ3RoOyBwb3MrKykgbmR4SW50bHpyID0gKHRlc3RQb3MgPSBnZXRUZXN0VGVtcGxhdGUocG9zLCBuZHhJbnRsenIsIHBvcyAtIDEpKS5sb2NhdG9yLnNsaWNlKCksIFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uc1twb3NdID0gJC5leHRlbmQoITAsIHt9LCB0ZXN0UG9zKTtcbiAgICAgICAgICAgICAgICB2YXIgbHZUZXN0QWx0ID0gbHZUZXN0ICYmIGx2VGVzdC5hbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gbHZUZXN0LmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBmb3IgKHBvcyA9IGJsIC0gMTsgcG9zID4gbHZwICYmICgoKHRlc3RQb3MgPSBwb3NpdGlvbnNbcG9zXSkubWF0Y2gub3B0aW9uYWxpdHkgfHwgdGVzdFBvcy5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgJiYgdGVzdFBvcy5tYXRjaC5uZXdCbG9ja01hcmtlciB8fCBsdlRlc3RBbHQgJiYgKGx2VGVzdEFsdCAhPT0gcG9zaXRpb25zW3Bvc10ubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dICYmIG51bGwgIT0gdGVzdFBvcy5tYXRjaC5mbiB8fCBudWxsID09PSB0ZXN0UG9zLm1hdGNoLmZuICYmIHRlc3RQb3MubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dICYmIGNoZWNrQWx0ZXJuYXRpb25NYXRjaCh0ZXN0UG9zLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSwgbHZUZXN0QWx0LnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpKSAmJiBcIlwiICE9PSBnZXRUZXN0cyhwb3MpWzBdLmRlZikpICYmIGJ1ZmZlcltwb3NdID09PSBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3RQb3MubWF0Y2gpKTsgcG9zLS0pIGJsLS07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldHVybkRlZmluaXRpb24gPyB7XG4gICAgICAgICAgICAgICAgICAgIGw6IGJsLFxuICAgICAgICAgICAgICAgICAgICBkZWY6IHBvc2l0aW9uc1tibF0gPyBwb3NpdGlvbnNbYmxdLm1hdGNoIDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgfSA6IGJsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdmFsaWRQb3MsIHJsID0gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24oKSwgYmwgPSBidWZmZXIubGVuZ3RoLCBsdiA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tnZXRMYXN0VmFsaWRQb3NpdGlvbigpXTsgcmwgPCBibCAmJiAhaXNNYXNrKHJsLCAhMCkgJiYgKHZhbGlkUG9zID0gbHYgIT09IHVuZGVmaW5lZCA/IGdldFRlc3RUZW1wbGF0ZShybCwgbHYubG9jYXRvci5zbGljZShcIlwiKSwgbHYpIDogZ2V0VGVzdChybCkpICYmICEwICE9PSB2YWxpZFBvcy5tYXRjaC5vcHRpb25hbGl0eSAmJiAoITAgIT09IHZhbGlkUG9zLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAmJiAhMCAhPT0gdmFsaWRQb3MubWF0Y2gubmV3QmxvY2tNYXJrZXIgfHwgcmwgKyAxID09PSBibCAmJiBcIlwiID09PSAobHYgIT09IHVuZGVmaW5lZCA/IGdldFRlc3RUZW1wbGF0ZShybCArIDEsIGx2LmxvY2F0b3Iuc2xpY2UoXCJcIiksIGx2KSA6IGdldFRlc3QocmwgKyAxKSkubWF0Y2guZGVmKTsgKSBybCsrO1xuICAgICAgICAgICAgICAgIGZvciAoOyh2YWxpZFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tybCAtIDFdKSAmJiB2YWxpZFBvcyAmJiB2YWxpZFBvcy5tYXRjaC5vcHRpb25hbGl0eSAmJiB2YWxpZFBvcy5pbnB1dCA9PT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyOyApIHJsLS07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5zcGxpY2UocmwpLCBidWZmZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc0NvbXBsZXRlKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5pc0NvbXBsZXRlKSkgcmV0dXJuIG9wdHMuaXNDb21wbGV0ZShidWZmZXIsIG9wdHMpO1xuICAgICAgICAgICAgICAgIGlmIChcIipcIiA9PT0gb3B0cy5yZXBlYXQpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlID0gITEsIGxycCA9IGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKCEwKSwgYW1sID0gc2Vla1ByZXZpb3VzKGxycC5sKTtcbiAgICAgICAgICAgICAgICBpZiAobHJwLmRlZiA9PT0gdW5kZWZpbmVkIHx8IGxycC5kZWYubmV3QmxvY2tNYXJrZXIgfHwgbHJwLmRlZi5vcHRpb25hbGl0eSB8fCBscnAuZGVmLm9wdGlvbmFsUXVhbnRpZmllcikge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSA9ICEwO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBhbWw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3QgPSBnZXRUZXN0VGVtcGxhdGUoaSkubWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gdGVzdC5mbiAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0gPT09IHVuZGVmaW5lZCAmJiAhMCAhPT0gdGVzdC5vcHRpb25hbGl0eSAmJiAhMCAhPT0gdGVzdC5vcHRpb25hbFF1YW50aWZpZXIgfHwgbnVsbCA9PT0gdGVzdC5mbiAmJiBidWZmZXJbaV0gIT09IGdldFBsYWNlaG9sZGVyKGksIHRlc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGxldGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVSZW1vdmUoaW5wdXQsIGssIHBvcywgc3RyaWN0LCBmcm9tSXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIGlmICgob3B0cy5udW1lcmljSW5wdXQgfHwgaXNSVEwpICYmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0UgPyBrID0gSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFIDogayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFICYmIChrID0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFKSwgXG4gICAgICAgICAgICAgICAgaXNSVEwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwZW5kID0gcG9zLmVuZDtcbiAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCA9IHBvcy5iZWdpbiwgcG9zLmJlZ2luID0gcGVuZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFICYmIChwb3MuZW5kIC0gcG9zLmJlZ2luIDwgMSB8fCAhMSA9PT0gb3B0cy5pbnNlcnRNb2RlKSA/IChwb3MuYmVnaW4gPSBzZWVrUHJldmlvdXMocG9zLmJlZ2luKSwgXG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5iZWdpbl0gIT09IHVuZGVmaW5lZCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXS5pbnB1dCA9PT0gb3B0cy5ncm91cFNlcGFyYXRvciAmJiBwb3MuYmVnaW4tLSkgOiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgJiYgcG9zLmJlZ2luID09PSBwb3MuZW5kICYmIChwb3MuZW5kID0gaXNNYXNrKHBvcy5lbmQsICEwKSAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmVuZF0gJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5lbmRdLmlucHV0ICE9PSBvcHRzLnJhZGl4UG9pbnQgPyBwb3MuZW5kICsgMSA6IHNlZWtOZXh0KHBvcy5lbmQpICsgMSwgXG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5iZWdpbl0gIT09IHVuZGVmaW5lZCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXS5pbnB1dCA9PT0gb3B0cy5ncm91cFNlcGFyYXRvciAmJiBwb3MuZW5kKyspLCBcbiAgICAgICAgICAgICAgICBzdHJpcFZhbGlkUG9zaXRpb25zKHBvcy5iZWdpbiwgcG9zLmVuZCwgITEsIHN0cmljdCksICEwICE9PSBzdHJpY3QgJiYgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmtlZXBTdGF0aWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHZhbGlkSW5wdXRzID0gW10sIGxhc3RBbHQgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigtMSwgITApLCBwb3NpdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKCEwLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKSwgcHJldkFsdFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsYXN0QWx0XTsgbGFzdEFsdCA+PSAwOyBsYXN0QWx0LS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0UG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2xhc3RBbHRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEwICE9PSBhbHRQb3MuZ2VuZXJhdGVkSW5wdXQgJiYgL1swLTlhLWJBLVpdLy50ZXN0KGFsdFBvcy5pbnB1dCkgJiYgdmFsaWRJbnB1dHMucHVzaChhbHRQb3MuaW5wdXQpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsYXN0QWx0XSwgYWx0UG9zLmFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgJiYgYWx0UG9zLmxvY2F0b3JbYWx0UG9zLmFsdGVybmF0aW9uXSAhPT0gcHJldkFsdFBvcy5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0pIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2QWx0UG9zID0gYWx0UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0QWx0ID4gLTEpIGZvciAoZ2V0TWFza1NldCgpLnAgPSBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigtMSwgITApKTsgdmFsaWRJbnB1dHMubGVuZ3RoID4gMDsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleXByZXNzID0gbmV3ICQuRXZlbnQoXCJrZXlwcmVzc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IHZhbGlkSW5wdXRzLnBvcCgpLmNoYXJDb2RlQXQoMCksIEV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcywgITAsICExLCAhMSwgZ2V0TWFza1NldCgpLnApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9ICQuZXh0ZW5kKCEwLCB7fSwgcG9zaXRpb25zQ2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSgpO1xuICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbihwb3MuYmVnaW4sICEwKTtcbiAgICAgICAgICAgICAgICBpZiAobHZwIDwgcG9zLmJlZ2luKSBnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KGx2cCk7IGVsc2UgaWYgKCEwICE9PSBzdHJpY3QgJiYgKGdldE1hc2tTZXQoKS5wID0gcG9zLmJlZ2luLCBcbiAgICAgICAgICAgICAgICAhMCAhPT0gZnJvbUlzVmFsaWQpKSBmb3IgKDtnZXRNYXNrU2V0KCkucCA8IGx2cCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZ2V0TWFza1NldCgpLnBdID09PSB1bmRlZmluZWQ7ICkgZ2V0TWFza1NldCgpLnArKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGluaXRpYWxpemVDb2xvck1hc2soaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBmaW5kQ2FyZXRQb3MoY2xpZW50eCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MsIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc3R5bGUgaW4gY29tcHV0ZWRTdHlsZSkgaXNOYU4oc3R5bGUpICYmIC0xICE9PSBzdHlsZS5pbmRleE9mKFwiZm9udFwiKSAmJiAoZS5zdHlsZVtzdHlsZV0gPSBjb21wdXRlZFN0eWxlW3N0eWxlXSk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3R5bGUudGV4dFRyYW5zZm9ybSA9IGNvbXB1dGVkU3R5bGUudGV4dFRyYW5zZm9ybSwgZS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gY29tcHV0ZWRTdHlsZS5sZXR0ZXJTcGFjaW5nLCBcbiAgICAgICAgICAgICAgICAgICAgZS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIiwgZS5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIiwgZS5zdHlsZS53aWR0aCA9IFwiYXV0b1wiLCBcbiAgICAgICAgICAgICAgICAgICAgZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIiwgZS5zdHlsZS53aGl0ZVNwYWNlID0gXCJub3dyYXBcIiwgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0bCwgaW5wdXRUZXh0ID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLCBwcmV2aW91c1dpZHRoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjYXJldFBvcyA9IDAsIGl0bCA9IGlucHV0VGV4dC5sZW5ndGg7IGNhcmV0UG9zIDw9IGl0bDsgY2FyZXRQb3MrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuaW5uZXJIVE1MICs9IGlucHV0VGV4dC5jaGFyQXQoY2FyZXRQb3MpIHx8IFwiX1wiLCBlLm9mZnNldFdpZHRoID49IGNsaWVudHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0MSA9IGNsaWVudHggLSBwcmV2aW91c1dpZHRoLCBvZmZzZXQyID0gZS5vZmZzZXRXaWR0aCAtIGNsaWVudHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5pbm5lckhUTUwgPSBpbnB1dFRleHQuY2hhckF0KGNhcmV0UG9zKSwgY2FyZXRQb3MgPSAob2Zmc2V0MSAtPSBlLm9mZnNldFdpZHRoIC8gMykgPCBvZmZzZXQyID8gY2FyZXRQb3MgLSAxIDogY2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1dpZHRoID0gZS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlKSwgY2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gKGlucHV0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93KS5nZXRDb21wdXRlZFN0eWxlKGlucHV0LCBudWxsKSwgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlLnN0eWxlLndpZHRoID0gY29tcHV0ZWRTdHlsZS53aWR0aCwgdGVtcGxhdGUuc3R5bGUudGV4dEFsaWduID0gY29tcHV0ZWRTdHlsZS50ZXh0QWxpZ24sIFxuICAgICAgICAgICAgICAgIChjb2xvck1hc2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKS5jbGFzc05hbWUgPSBcImltLWNvbG9ybWFza1wiLCBpbnB1dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjb2xvck1hc2ssIGlucHV0KSwgXG4gICAgICAgICAgICAgICAgaW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpbnB1dCksIGNvbG9yTWFzay5hcHBlbmRDaGlsZCh0ZW1wbGF0ZSksIGNvbG9yTWFzay5hcHBlbmRDaGlsZChpbnB1dCksIFxuICAgICAgICAgICAgICAgIGlucHV0LnN0eWxlLmxlZnQgPSB0ZW1wbGF0ZS5vZmZzZXRMZWZ0ICsgXCJweFwiLCAkKGlucHV0KS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhcmV0KGlucHV0LCBmaW5kQ2FyZXRQb3MoZS5jbGllbnRYKSksIEV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudC5jYWxsKGlucHV0LCBbIGUgXSk7XG4gICAgICAgICAgICAgICAgfSksICQoaW5wdXQpLm9uKFwia2V5ZG93blwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuc2hpZnRLZXkgfHwgITEgPT09IG9wdHMuaW5zZXJ0TW9kZSB8fCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyQ29sb3JNYXNrKGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiByZW5kZXJDb2xvck1hc2soaW5wdXQsIGNhcmV0UG9zLCBjbGVhcikge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVN0YXRpYygpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNTdGF0aWMgfHwgbnVsbCAhPT0gdGVzdC5mbiAmJiB0ZXN0UG9zLmlucHV0ICE9PSB1bmRlZmluZWQgPyBpc1N0YXRpYyAmJiAobnVsbCAhPT0gdGVzdC5mbiAmJiB0ZXN0UG9zLmlucHV0ICE9PSB1bmRlZmluZWQgfHwgXCJcIiA9PT0gdGVzdC5kZWYpICYmIChpc1N0YXRpYyA9ICExLCBcbiAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlICs9IFwiPC9zcGFuPlwiKSA6IChpc1N0YXRpYyA9ICEwLCBtYXNrVGVtcGxhdGUgKz0gXCI8c3BhbiBjbGFzcz0naW0tc3RhdGljJz5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZUNhcmV0KGZvcmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICEwICE9PSBmb3JjZSAmJiBwb3MgIT09IGNhcmV0UG9zLmJlZ2luIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGlucHV0IHx8IChtYXNrVGVtcGxhdGUgKz0gXCI8c3BhbiBjbGFzcz0naW0tY2FyZXQnIHN0eWxlPSdib3JkZXItcmlnaHQtd2lkdGg6IDFweDtib3JkZXItcmlnaHQtc3R5bGU6IHNvbGlkOyc+PC9zcGFuPlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHRlc3QsIHRlc3RQb3MsIG5keEludGx6ciwgbWFza1RlbXBsYXRlID0gXCJcIiwgaXNTdGF0aWMgPSAhMSwgcG9zID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoY29sb3JNYXNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3MgPT09IHVuZGVmaW5lZCA/IGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpIDogY2FyZXRQb3MuYmVnaW4gPT09IHVuZGVmaW5lZCAmJiAoY2FyZXRQb3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGNhcmV0UG9zXG4gICAgICAgICAgICAgICAgICAgIH0pLCAhMCAhPT0gY2xlYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUNhcmV0KCksIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdID8gKHRlc3RQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdCA9IHRlc3RQb3MubWF0Y2gsIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpLCBoYW5kbGVTdGF0aWMoKSwgbWFza1RlbXBsYXRlICs9IGJ1ZmZlcltwb3NdKSA6ICh0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdCA9IHRlc3RQb3MubWF0Y2gsIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpLCAoITEgPT09IG9wdHMuaml0TWFza2luZyB8fCBwb3MgPCBsdnAgfHwgXCJudW1iZXJcIiA9PSB0eXBlb2Ygb3B0cy5qaXRNYXNraW5nICYmIGlzRmluaXRlKG9wdHMuaml0TWFza2luZykgJiYgb3B0cy5qaXRNYXNraW5nID4gcG9zKSAmJiAoaGFuZGxlU3RhdGljKCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZSArPSBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpKSksIHBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoKG1heExlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IHBvcyA8IG1heExlbmd0aCkgJiYgKG51bGwgIT09IHRlc3QuZm4gfHwgXCJcIiAhPT0gdGVzdC5kZWYpIHx8IGx2cCA+IHBvcyB8fCBpc1N0YXRpYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAtMSA9PT0gbWFza1RlbXBsYXRlLmluZGV4T2YoXCJpbS1jYXJldFwiKSAmJiBoYW5kbGVDYXJldCghMCksIGlzU3RhdGljICYmIGhhbmRsZVN0YXRpYygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IGNvbG9yTWFzay5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKVswXTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gbWFza1RlbXBsYXRlLCBpbnB1dC5pbnB1dG1hc2sucG9zaXRpb25Db2xvck1hc2soaW5wdXQsIHRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXNrc2V0ID0gbWFza3NldCB8fCB0aGlzLm1hc2tzZXQsIG9wdHMgPSBvcHRzIHx8IHRoaXMub3B0cztcbiAgICAgICAgICAgIHZhciB1bmRvVmFsdWUsICRlbCwgbWF4TGVuZ3RoLCBjb2xvck1hc2ssIGlucHV0bWFzayA9IHRoaXMsIGVsID0gdGhpcy5lbCwgaXNSVEwgPSB0aGlzLmlzUlRMLCBza2lwS2V5UHJlc3NFdmVudCA9ICExLCBza2lwSW5wdXRFdmVudCA9ICExLCBpZ25vcmFibGUgPSAhMSwgbW91c2VFbnRlciA9ICExLCBFdmVudFJ1bGVyID0ge1xuICAgICAgICAgICAgICAgIG9uOiBmdW5jdGlvbihpbnB1dCwgZXZlbnROYW1lLCBldmVudEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXRtYXNrID09PSB1bmRlZmluZWQgJiYgXCJGT1JNXCIgIT09IHRoaXMubm9kZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1PcHRzID0gJC5kYXRhKHRoaXMsIFwiX2lucHV0bWFza19vcHRzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltT3B0cyA/IG5ldyBJbnB1dG1hc2soaW1PcHRzKS5tYXNrKHRoaXMpIDogRXZlbnRSdWxlci5vZmYodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInNldHZhbHVlXCIgPT09IGUudHlwZSB8fCBcIkZPUk1cIiA9PT0gdGhpcy5ub2RlTmFtZSB8fCAhKHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5yZWFkT25seSAmJiAhKFwia2V5ZG93blwiID09PSBlLnR5cGUgJiYgZS5jdHJsS2V5ICYmIDY3ID09PSBlLmtleUNvZGUgfHwgITEgPT09IG9wdHMudGFiVGhyb3VnaCAmJiBlLmtleUNvZGUgPT09IElucHV0bWFzay5rZXlDb2RlLlRBQikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoITAgPT09IHNraXBJbnB1dEV2ZW50KSByZXR1cm4gc2tpcElucHV0RXZlbnQgPSAhMSwgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcEtleVByZXNzRXZlbnQgPSAhMSwgc2tpcElucHV0RXZlbnQgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoITAgPT09IHNraXBLZXlQcmVzc0V2ZW50KSByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcEtleVByZXNzRXZlbnQgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNsaWNrXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWVtb2JpbGUgfHwgaXBob25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCksICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXR1cm5WYWwgPSBldmVudEhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExID09PSByZXR1cm5WYWwgJiYgKGUucHJldmVudERlZmF1bHQoKSwgZS5zdG9wUHJvcGFnYXRpb24oKSksIHJldHVyblZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suZXZlbnRzW2V2ZW50TmFtZV0gPSBpbnB1dC5pbnB1dG1hc2suZXZlbnRzW2V2ZW50TmFtZV0gfHwgW10sIGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXS5wdXNoKGV2KSwgXG4gICAgICAgICAgICAgICAgICAgIC0xICE9PSAkLmluQXJyYXkoZXZlbnROYW1lLCBbIFwic3VibWl0XCIsIFwicmVzZXRcIiBdKSA/IG51bGwgIT09IGlucHV0LmZvcm0gJiYgJChpbnB1dC5mb3JtKS5vbihldmVudE5hbWUsIGV2KSA6ICQoaW5wdXQpLm9uKGV2ZW50TmFtZSwgZXYpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb2ZmOiBmdW5jdGlvbihpbnB1dCwgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmlucHV0bWFzayAmJiBpbnB1dC5pbnB1dG1hc2suZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQgPyAoZXZlbnRzID0gW10pW2V2ZW50XSA9IGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnRdIDogZXZlbnRzID0gaW5wdXQuaW5wdXRtYXNrLmV2ZW50cywgXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZXZlbnRzLCBmdW5jdGlvbihldmVudE5hbWUsIGV2QXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7ZXZBcnIubGVuZ3RoID4gMDsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldiA9IGV2QXJyLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtMSAhPT0gJC5pbkFycmF5KGV2ZW50TmFtZSwgWyBcInN1Ym1pdFwiLCBcInJlc2V0XCIgXSkgPyBudWxsICE9PSBpbnB1dC5mb3JtICYmICQoaW5wdXQuZm9ybSkub2ZmKGV2ZW50TmFtZSwgZXYpIDogJChpbnB1dCkub2ZmKGV2ZW50TmFtZSwgZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBFdmVudEhhbmRsZXJzID0ge1xuICAgICAgICAgICAgICAgIGtleWRvd25FdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCAkaW5wdXQgPSAkKGlucHV0KSwgayA9IGUua2V5Q29kZSwgcG9zID0gY2FyZXQoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFIHx8IGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSB8fCBpcGhvbmUgJiYgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFX1NBRkFSSSB8fCBlLmN0cmxLZXkgJiYgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuWCAmJiAhZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksIGV2TmFtZSA9IFwib25cIiArIGV2ZW50TmFtZSwgaXNTdXBwb3J0ZWQgPSBldk5hbWUgaW4gZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNTdXBwb3J0ZWQgfHwgKGVsLnNldEF0dHJpYnV0ZShldk5hbWUsIFwicmV0dXJuO1wiKSwgaXNTdXBwb3J0ZWQgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGVsW2V2TmFtZV0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsID0gbnVsbCwgaXNTdXBwb3J0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0oXCJjdXRcIikpIGUucHJldmVudERlZmF1bHQoKSwgaGFuZGxlUmVtb3ZlKGlucHV0LCBrLCBwb3MpLCB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCEwKSwgZ2V0TWFza1NldCgpLnAsIGUsIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSksIFxuICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSA/ICRpbnB1dC50cmlnZ2VyKFwiY2xlYXJlZFwiKSA6ICEwID09PSBpc0NvbXBsZXRlKGdldEJ1ZmZlcigpKSAmJiAkaW5wdXQudHJpZ2dlcihcImNvbXBsZXRlXCIpOyBlbHNlIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5FTkQgfHwgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUEFHRV9ET1dOKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuaW5zZXJ0TW9kZSB8fCBjYXJldFBvcyAhPT0gZ2V0TWFza1NldCgpLm1hc2tMZW5ndGggfHwgZS5zaGlmdEtleSB8fCBjYXJldFBvcy0tLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBlLnNoaWZ0S2V5ID8gcG9zLmJlZ2luIDogY2FyZXRQb3MsIGNhcmV0UG9zLCAhMCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5IT01FICYmICFlLnNoaWZ0S2V5IHx8IGsgPT09IElucHV0bWFzay5rZXlDb2RlLlBBR0VfVVAgPyAoZS5wcmV2ZW50RGVmYXVsdCgpLCBcbiAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIDAsIGUuc2hpZnRLZXkgPyBwb3MuYmVnaW4gOiAwLCAhMCkpIDogKG9wdHMudW5kb09uRXNjYXBlICYmIGsgPT09IElucHV0bWFzay5rZXlDb2RlLkVTQ0FQRSB8fCA5MCA9PT0gayAmJiBlLmN0cmxLZXkpICYmICEwICE9PSBlLmFsdEtleSA/IChjaGVja1ZhbChpbnB1dCwgITAsICExLCB1bmRvVmFsdWUuc3BsaXQoXCJcIikpLCBcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjbGlja1wiKSkgOiBrICE9PSBJbnB1dG1hc2sua2V5Q29kZS5JTlNFUlQgfHwgZS5zaGlmdEtleSB8fCBlLmN0cmxLZXkgPyAhMCA9PT0gb3B0cy50YWJUaHJvdWdoICYmIGsgPT09IElucHV0bWFzay5rZXlDb2RlLlRBQiA/ICghMCA9PT0gZS5zaGlmdEtleSA/IChudWxsID09PSBnZXRUZXN0KHBvcy5iZWdpbikubWF0Y2guZm4gJiYgKHBvcy5iZWdpbiA9IHNlZWtOZXh0KHBvcy5iZWdpbikpLCBcbiAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCA9IHNlZWtQcmV2aW91cyhwb3MuYmVnaW4sICEwKSwgcG9zLmJlZ2luID0gc2Vla1ByZXZpb3VzKHBvcy5lbmQsICEwKSkgOiAocG9zLmJlZ2luID0gc2Vla05leHQocG9zLmJlZ2luLCAhMCksIFxuICAgICAgICAgICAgICAgICAgICBwb3MuZW5kID0gc2Vla05leHQocG9zLmJlZ2luLCAhMCksIHBvcy5lbmQgPCBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCAmJiBwb3MuZW5kLS0pLCBcbiAgICAgICAgICAgICAgICAgICAgcG9zLmJlZ2luIDwgZ2V0TWFza1NldCgpLm1hc2tMZW5ndGggJiYgKGUucHJldmVudERlZmF1bHQoKSwgY2FyZXQoaW5wdXQsIHBvcy5iZWdpbiwgcG9zLmVuZCkpKSA6IGUuc2hpZnRLZXkgfHwgITEgPT09IG9wdHMuaW5zZXJ0TW9kZSAmJiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUklHSFQgPyBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGNhcmV0UG9zLmJlZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCkgOiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5MRUZUICYmIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBjYXJldChpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgaXNSVEwgPyBjYXJldFBvcy5iZWdpbiArIDEgOiBjYXJldFBvcy5iZWdpbiAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKSkgOiAob3B0cy5pbnNlcnRNb2RlID0gIW9wdHMuaW5zZXJ0TW9kZSwgY2FyZXQoaW5wdXQsIG9wdHMuaW5zZXJ0TW9kZSB8fCBwb3MuYmVnaW4gIT09IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoID8gcG9zLmJlZ2luIDogcG9zLmJlZ2luIC0gMSkpO1xuICAgICAgICAgICAgICAgICAgICBvcHRzLm9uS2V5RG93bi5jYWxsKHRoaXMsIGUsIGdldEJ1ZmZlcigpLCBjYXJldChpbnB1dCkuYmVnaW4sIG9wdHMpLCBpZ25vcmFibGUgPSAtMSAhPT0gJC5pbkFycmF5KGssIG9wdHMuaWdub3JhYmxlcyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBrZXlwcmVzc0V2ZW50OiBmdW5jdGlvbihlLCBjaGVja3ZhbCwgd3JpdGVPdXQsIHN0cmljdCwgbmR4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsICRpbnB1dCA9ICQoaW5wdXQpLCBrID0gZS53aGljaCB8fCBlLmNoYXJDb2RlIHx8IGUua2V5Q29kZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoITAgPT09IGNoZWNrdmFsIHx8IGUuY3RybEtleSAmJiBlLmFsdEtleSkgJiYgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgaWdub3JhYmxlKSkgcmV0dXJuIGsgPT09IElucHV0bWFzay5rZXlDb2RlLkVOVEVSICYmIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAmJiAodW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImNoYW5nZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCkpLCAhMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIDQ2ID09PSBrICYmICExID09PSBlLnNoaWZ0S2V5ICYmIFwiXCIgIT09IG9wdHMucmFkaXhQb2ludCAmJiAoayA9IG9wdHMucmFkaXhQb2ludC5jaGFyQ29kZUF0KDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3J3YXJkUG9zaXRpb24sIHBvcyA9IGNoZWNrdmFsID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBuZHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBuZHhcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBjYXJldChpbnB1dCksIGMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGspO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLndyaXRlT3V0QnVmZmVyID0gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsUmVzdWx0ID0gaXNWYWxpZChwb3MsIGMsIHN0cmljdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoITEgIT09IHZhbFJlc3VsdCAmJiAocmVzZXRNYXNrU2V0KCEwKSwgZm9yd2FyZFBvc2l0aW9uID0gdmFsUmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgPyB2YWxSZXN1bHQuY2FyZXQgOiBjaGVja3ZhbCA/IHZhbFJlc3VsdC5wb3MgKyAxIDogc2Vla05leHQodmFsUmVzdWx0LnBvcyksIFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnAgPSBmb3J3YXJkUG9zaXRpb24pLCAhMSAhPT0gd3JpdGVPdXQgJiYgKHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5vbktleVZhbGlkYXRpb24uY2FsbChpbnB1dCwgaywgdmFsUmVzdWx0LCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApLCBnZXRNYXNrU2V0KCkud3JpdGVPdXRCdWZmZXIgJiYgITEgIT09IHZhbFJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgb3B0cy5udW1lcmljSW5wdXQgJiYgdmFsUmVzdWx0LmNhcmV0ID09PSB1bmRlZmluZWQgPyBzZWVrUHJldmlvdXMoZm9yd2FyZFBvc2l0aW9uKSA6IGZvcndhcmRQb3NpdGlvbiwgZSwgITAgIT09IGNoZWNrdmFsKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgITAgIT09IGNoZWNrdmFsICYmIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEwID09PSBpc0NvbXBsZXRlKGJ1ZmZlcikgJiYgJGlucHV0LnRyaWdnZXIoXCJjb21wbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KCksIGNoZWNrdmFsKSByZXR1cm4gITEgIT09IHZhbFJlc3VsdCAmJiAodmFsUmVzdWx0LmZvcndhcmRQb3NpdGlvbiA9IGZvcndhcmRQb3NpdGlvbiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsUmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYXN0ZUV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wVmFsdWUsIGlucHV0ID0gdGhpcywgZXYgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZSwgJGlucHV0ID0gJChpbnB1dCksIGlucHV0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKSwgY2FyZXRQb3MgPSBjYXJldChpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIGlzUlRMICYmICh0ZW1wVmFsdWUgPSBjYXJldFBvcy5lbmQsIGNhcmV0UG9zLmVuZCA9IGNhcmV0UG9zLmJlZ2luLCBjYXJldFBvcy5iZWdpbiA9IHRlbXBWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUJlZm9yZUNhcmV0ID0gaW5wdXRWYWx1ZS5zdWJzdHIoMCwgY2FyZXRQb3MuYmVnaW4pLCB2YWx1ZUFmdGVyQ2FyZXQgPSBpbnB1dFZhbHVlLnN1YnN0cihjYXJldFBvcy5lbmQsIGlucHV0VmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlQmVmb3JlQ2FyZXQgPT09IChpc1JUTCA/IGdldEJ1ZmZlclRlbXBsYXRlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyVGVtcGxhdGUoKSkuc2xpY2UoMCwgY2FyZXRQb3MuYmVnaW4pLmpvaW4oXCJcIikgJiYgKHZhbHVlQmVmb3JlQ2FyZXQgPSBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlQWZ0ZXJDYXJldCA9PT0gKGlzUlRMID8gZ2V0QnVmZmVyVGVtcGxhdGUoKS5yZXZlcnNlKCkgOiBnZXRCdWZmZXJUZW1wbGF0ZSgpKS5zbGljZShjYXJldFBvcy5lbmQpLmpvaW4oXCJcIikgJiYgKHZhbHVlQWZ0ZXJDYXJldCA9IFwiXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgaXNSVEwgJiYgKHRlbXBWYWx1ZSA9IHZhbHVlQmVmb3JlQ2FyZXQsIHZhbHVlQmVmb3JlQ2FyZXQgPSB2YWx1ZUFmdGVyQ2FyZXQsIHZhbHVlQWZ0ZXJDYXJldCA9IHRlbXBWYWx1ZSksIFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xpcGJvYXJkRGF0YSAmJiB3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKSBpbnB1dFZhbHVlID0gdmFsdWVCZWZvcmVDYXJldCArIHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJUZXh0XCIpICsgdmFsdWVBZnRlckNhcmV0OyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXYuY2xpcGJvYXJkRGF0YSB8fCAhZXYuY2xpcGJvYXJkRGF0YS5nZXREYXRhKSByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gdmFsdWVCZWZvcmVDYXJldCArIGV2LmNsaXBib2FyZERhdGEuZ2V0RGF0YShcInRleHQvcGxhaW5cIikgKyB2YWx1ZUFmdGVyQ2FyZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhc3RlVmFsdWUgPSBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVQYXN0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghMSA9PT0gKHBhc3RlVmFsdWUgPSBvcHRzLm9uQmVmb3JlUGFzdGUuY2FsbChpbnB1dG1hc2ssIGlucHV0VmFsdWUsIG9wdHMpKSkgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3RlVmFsdWUgfHwgKHBhc3RlVmFsdWUgPSBpbnB1dFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tWYWwoaW5wdXQsICExLCAhMSwgaXNSVEwgPyBwYXN0ZVZhbHVlLnNwbGl0KFwiXCIpLnJldmVyc2UoKSA6IHBhc3RlVmFsdWUudG9TdHJpbmcoKS5zcGxpdChcIlwiKSksIFxuICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpLCBlLCB1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpLCBcbiAgICAgICAgICAgICAgICAgICAgITAgPT09IGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpICYmICRpbnB1dC50cmlnZ2VyKFwiY29tcGxldGVcIiksIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0RmFsbEJhY2tFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCBpbnB1dFZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAhPT0gaW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCExID09PSBmdW5jdGlvbihpbnB1dCwgaW5wdXRWYWx1ZSwgY2FyZXRQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCIuXCIgPT09IGlucHV0VmFsdWUuY2hhckF0KGNhcmV0UG9zLmJlZ2luIC0gMSkgJiYgXCJcIiAhPT0gb3B0cy5yYWRpeFBvaW50ICYmICgoaW5wdXRWYWx1ZSA9IGlucHV0VmFsdWUuc3BsaXQoXCJcIikpW2NhcmV0UG9zLmJlZ2luIC0gMV0gPSBvcHRzLnJhZGl4UG9pbnQuY2hhckF0KDApLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gaW5wdXRWYWx1ZS5qb2luKFwiXCIpKSwgaW5wdXRWYWx1ZS5jaGFyQXQoY2FyZXRQb3MuYmVnaW4gLSAxKSA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIGlucHV0VmFsdWUubGVuZ3RoID4gZ2V0QnVmZmVyKCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlwcmVzcyA9IG5ldyAkLkV2ZW50KFwia2V5cHJlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlwcmVzcy53aGljaCA9IG9wdHMucmFkaXhQb2ludC5jaGFyQ29kZUF0KDApLCBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsICEwLCAhMCwgITEsIGNhcmV0UG9zLmJlZ2luIC0gMSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KGlucHV0LCBpbnB1dFZhbHVlLCBjYXJldFBvcykpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlID0gaW5wdXRWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgoZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpKSArIFwiKSpcIiksIFwiXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICExID09PSBmdW5jdGlvbihpbnB1dCwgaW5wdXRWYWx1ZSwgY2FyZXRQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWVtb2JpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0Q2hhciA9IGlucHV0VmFsdWUucmVwbGFjZShnZXRCdWZmZXIoKS5qb2luKFwiXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPT09IGlucHV0Q2hhci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlwcmVzcyA9IG5ldyAkLkV2ZW50KFwia2V5cHJlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5cHJlc3Mud2hpY2ggPSBpbnB1dENoYXIuY2hhckNvZGVBdCgwKSwgRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzLCAhMCwgITAsICExLCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbY2FyZXRQb3MuYmVnaW4gLSAxXSA/IGNhcmV0UG9zLmJlZ2luIDogY2FyZXRQb3MuYmVnaW4gLSAxKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0oaW5wdXQsIGlucHV0VmFsdWUsIGNhcmV0UG9zKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MuYmVnaW4gPiBpbnB1dFZhbHVlLmxlbmd0aCAmJiAoY2FyZXQoaW5wdXQsIGlucHV0VmFsdWUubGVuZ3RoKSwgY2FyZXRQb3MgPSBjYXJldChpbnB1dCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIiksIGZyb250UGFydCA9IGlucHV0VmFsdWUuc3Vic3RyKDAsIGNhcmV0UG9zLmJlZ2luKSwgYmFja1BhcnQgPSBpbnB1dFZhbHVlLnN1YnN0cihjYXJldFBvcy5iZWdpbiksIGZyb250QnVmZmVyUGFydCA9IGJ1ZmZlci5zdWJzdHIoMCwgY2FyZXRQb3MuYmVnaW4pLCBiYWNrQnVmZmVyUGFydCA9IGJ1ZmZlci5zdWJzdHIoY2FyZXRQb3MuYmVnaW4pLCBzZWxlY3Rpb24gPSBjYXJldFBvcywgZW50cmllcyA9IFwiXCIsIGlzRW50cnkgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcm9udFBhcnQgIT09IGZyb250QnVmZmVyUGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5iZWdpbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZnBsID0gKGlzRW50cnkgPSBmcm9udFBhcnQubGVuZ3RoID49IGZyb250QnVmZmVyUGFydC5sZW5ndGgpID8gZnJvbnRQYXJ0Lmxlbmd0aCA6IGZyb250QnVmZmVyUGFydC5sZW5ndGgsIGkgPSAwOyBmcm9udFBhcnQuY2hhckF0KGkpID09PSBmcm9udEJ1ZmZlclBhcnQuY2hhckF0KGkpICYmIGkgPCBmcGw7IGkrKykgc2VsZWN0aW9uLmJlZ2luKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNFbnRyeSAmJiAoZW50cmllcyArPSBmcm9udFBhcnQuc2xpY2Uoc2VsZWN0aW9uLmJlZ2luLCBzZWxlY3Rpb24uZW5kKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrUGFydCAhPT0gYmFja0J1ZmZlclBhcnQgJiYgKGJhY2tQYXJ0Lmxlbmd0aCA+IGJhY2tCdWZmZXJQYXJ0Lmxlbmd0aCA/IGlzRW50cnkgJiYgKHNlbGVjdGlvbi5lbmQgPSBzZWxlY3Rpb24uYmVnaW4pIDogYmFja1BhcnQubGVuZ3RoIDwgYmFja0J1ZmZlclBhcnQubGVuZ3RoID8gc2VsZWN0aW9uLmVuZCArPSBiYWNrQnVmZmVyUGFydC5sZW5ndGggLSBiYWNrUGFydC5sZW5ndGggOiBiYWNrUGFydC5jaGFyQXQoMCkgIT09IGJhY2tCdWZmZXJQYXJ0LmNoYXJBdCgwKSAmJiBzZWxlY3Rpb24uZW5kKyspLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgc2VsZWN0aW9uKSwgZW50cmllcy5sZW5ndGggPiAwID8gJC5lYWNoKGVudHJpZXMuc3BsaXQoXCJcIiksIGZ1bmN0aW9uKG5keCwgZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcImtleXByZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gZW50cnkuY2hhckNvZGVBdCgwKSwgaWdub3JhYmxlID0gITEsIEV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSA6IChzZWxlY3Rpb24uYmVnaW4gPT09IHNlbGVjdGlvbi5lbmQgLSAxICYmIGNhcmV0KGlucHV0LCBzZWVrUHJldmlvdXMoc2VsZWN0aW9uLmJlZ2luICsgMSksIHNlbGVjdGlvbi5lbmQpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGUua2V5Q29kZSA9IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSwgRXZlbnRIYW5kbGVycy5rZXlkb3duRXZlbnQuY2FsbChpbnB1dCwgZSkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0VmFsdWVFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0bWFzay5yZWZyZXNoVmFsdWUgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgdmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKTtcbiAgICAgICAgICAgICAgICAgICAgJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSAmJiAodmFsdWUgPSBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKGlucHV0bWFzaywgdmFsdWUsIG9wdHMpIHx8IHZhbHVlKSwgXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoXCJcIiksIGNoZWNrVmFsKGlucHV0LCAhMCwgITEsIGlzUlRMID8gdmFsdWUucmV2ZXJzZSgpIDogdmFsdWUpLCBcbiAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSwgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgfHwgb3B0cy5jbGVhckluY29tcGxldGUpICYmIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpICYmIGlucHV0LmlucHV0bWFzay5fdmFsdWVTZXQoXCJcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmb2N1c0V2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIG5wdFZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgICAgICBvcHRzLnNob3dNYXNrT25Gb2N1cyAmJiAoIW9wdHMuc2hvd01hc2tPbkhvdmVyIHx8IG9wdHMuc2hvd01hc2tPbkhvdmVyICYmIFwiXCIgPT09IG5wdFZhbHVlKSAmJiAoaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpID8gd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSkgOiAhMSA9PT0gbW91c2VFbnRlciAmJiBjYXJldChpbnB1dCwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSkpKSwgXG4gICAgICAgICAgICAgICAgICAgICEwID09PSBvcHRzLnBvc2l0aW9uQ2FyZXRPblRhYiAmJiAhMSA9PT0gbW91c2VFbnRlciAmJiBcIlwiICE9PSBucHRWYWx1ZSAmJiAod3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBjYXJldChpbnB1dCkpLCBcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVycy5jbGlja0V2ZW50LmFwcGx5KGlucHV0LCBbIGUsICEwIF0pKSwgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1vdXNlbGVhdmVFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBpZiAobW91c2VFbnRlciA9ICExLCBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKSwgbnB0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBucHRWYWx1ZSAhPT0gaW5wdXQuZ2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikgJiYgXCJcIiAhPT0gbnB0VmFsdWUgJiYgKC0xID09PSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpICYmIG5wdFZhbHVlID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikgPyBidWZmZXIgPSBbXSA6IGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlciksIFxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlcikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjbGlja0V2ZW50OiBmdW5jdGlvbihlLCB0YWJiZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9SYWRpeEZvY3VzKGNsaWNrUG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJcIiAhPT0gb3B0cy5yYWRpeFBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZwcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodnBzW2NsaWNrUG9zXSA9PT0gdW5kZWZpbmVkIHx8IHZwc1tjbGlja1Bvc10uaW5wdXQgPT09IGdldFBsYWNlaG9sZGVyKGNsaWNrUG9zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2tQb3MgPCBzZWVrTmV4dCgtMSkpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgZ2V0QnVmZmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLTEgIT09IHJhZGl4UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB2cCBpbiB2cHMpIGlmIChyYWRpeFBvcyA8IHZwICYmIHZwc1t2cF0uaW5wdXQgIT09IGdldFBsYWNlaG9sZGVyKHZwKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRDYXJldCA9IGNhcmV0KGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFiYmVkICYmIChpc1JUTCA/IHNlbGVjdGVkQ2FyZXQuZW5kID0gc2VsZWN0ZWRDYXJldC5iZWdpbiA6IHNlbGVjdGVkQ2FyZXQuYmVnaW4gPSBzZWxlY3RlZENhcmV0LmVuZCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2FyZXQuYmVnaW4gPT09IHNlbGVjdGVkQ2FyZXQuZW5kKSBzd2l0Y2ggKG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub25lXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwicmFkaXhGb2N1c1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9SYWRpeEZvY3VzKHNlbGVjdGVkQ2FyZXQuYmVnaW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBvcHRzLm51bWVyaWNJbnB1dCA/IHNlZWtOZXh0KHJhZGl4UG9zKSA6IHJhZGl4UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGlja1Bvc2l0aW9uID0gc2VsZWN0ZWRDYXJldC5iZWdpbiwgbHZjbGlja1Bvc2l0aW9uID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oY2xpY2tQb3NpdGlvbiwgITApLCBsYXN0UG9zaXRpb24gPSBzZWVrTmV4dChsdmNsaWNrUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2tQb3NpdGlvbiA8IGxhc3RQb3NpdGlvbikgY2FyZXQoaW5wdXQsIGlzTWFzayhjbGlja1Bvc2l0aW9uLCAhMCkgfHwgaXNNYXNrKGNsaWNrUG9zaXRpb24gLSAxLCAhMCkgPyBjbGlja1Bvc2l0aW9uIDogc2Vla05leHQoY2xpY2tQb3NpdGlvbikpOyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZjbGlja1Bvc2l0aW9uXSwgdHQgPSBnZXRUZXN0VGVtcGxhdGUobGFzdFBvc2l0aW9uLCBsdnAgPyBsdnAubWF0Y2gubG9jYXRvciA6IHVuZGVmaW5lZCwgbHZwKSwgcGxhY2Vob2xkZXIgPSBnZXRQbGFjZWhvbGRlcihsYXN0UG9zaXRpb24sIHR0Lm1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIlwiICE9PSBwbGFjZWhvbGRlciAmJiBnZXRCdWZmZXIoKVtsYXN0UG9zaXRpb25dICE9PSBwbGFjZWhvbGRlciAmJiAhMCAhPT0gdHQubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICYmICEwICE9PSB0dC5tYXRjaC5uZXdCbG9ja01hcmtlciB8fCAhaXNNYXNrKGxhc3RQb3NpdGlvbiwgITApICYmIHR0Lm1hdGNoLmRlZiA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UG9zID0gc2Vla05leHQobGFzdFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2tQb3NpdGlvbiA+PSBuZXdQb3MgfHwgY2xpY2tQb3NpdGlvbiA9PT0gbGFzdFBvc2l0aW9uKSAmJiAobGFzdFBvc2l0aW9uID0gbmV3UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBsYXN0UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRibGNsaWNrRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCAwLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3V0RXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIHBvcyA9IGNhcmV0KGlucHV0KSwgZXYgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZSwgY2xpcGJvYXJkRGF0YSA9IHdpbmRvdy5jbGlwYm9hcmREYXRhIHx8IGV2LmNsaXBib2FyZERhdGEsIGNsaXBEYXRhID0gaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZShwb3MuZW5kLCBwb3MuYmVnaW4pIDogZ2V0QnVmZmVyKCkuc2xpY2UocG9zLmJlZ2luLCBwb3MuZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgY2xpcGJvYXJkRGF0YS5zZXREYXRhKFwidGV4dFwiLCBpc1JUTCA/IGNsaXBEYXRhLnJldmVyc2UoKS5qb2luKFwiXCIpIDogY2xpcERhdGEuam9pbihcIlwiKSksIFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCAmJiBkb2N1bWVudC5leGVjQ29tbWFuZChcImNvcHlcIiksIGhhbmRsZVJlbW92ZShpbnB1dCwgSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFLCBwb3MpLCBcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBnZXRNYXNrU2V0KCkucCwgZSwgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSwgXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpICYmICRpbnB1dC50cmlnZ2VyKFwiY2xlYXJlZFwiKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJsdXJFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKSwgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaW5wdXRtYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnB0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCksIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIlwiICE9PSBucHRWYWx1ZSAmJiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiAoLTEgPT09IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgJiYgbnB0VmFsdWUgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSA/IGJ1ZmZlciA9IFtdIDogY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgITEgPT09IGlzQ29tcGxldGUoYnVmZmVyKSAmJiAoc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImluY29tcGxldGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKSwgb3B0cy5jbGVhckluY29tcGxldGUgJiYgKHJlc2V0TWFza1NldCgpLCBidWZmZXIgPSBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzID8gW10gOiBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKCkpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgYnVmZmVyLCB1bmRlZmluZWQsIGUpKSwgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpICYmICh1bmRvVmFsdWUgPSBidWZmZXIuam9pbihcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImNoYW5nZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1vdXNlZW50ZXJFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBtb3VzZUVudGVyID0gITAsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGlucHV0ICYmIG9wdHMuc2hvd01hc2tPbkhvdmVyICYmIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAmJiB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VibWl0RXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpICYmICRlbC50cmlnZ2VyKFwiY2hhbmdlXCIpLCBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIC0xID09PSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpICYmIGVsLmlucHV0bWFzay5fdmFsdWVHZXQgJiYgZWwuaW5wdXRtYXNrLl92YWx1ZUdldCgpID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikgJiYgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIG9wdHMucmVtb3ZlTWFza09uU3VibWl0ICYmIChlbC5pbnB1dG1hc2suX3ZhbHVlU2V0KGVsLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCksICEwKSwgXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihlbCwgZ2V0QnVmZmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXNldEV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5yZWZyZXNoVmFsdWUgPSAhMCwgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRlbC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBJbnB1dG1hc2sucHJvdG90eXBlLnBvc2l0aW9uQ29sb3JNYXNrID0gZnVuY3Rpb24oaW5wdXQsIHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuc3R5bGUubGVmdCA9IHRlbXBsYXRlLm9mZnNldExlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHZhbHVlQnVmZmVyO1xuICAgICAgICAgICAgaWYgKGFjdGlvbk9iaiAhPT0gdW5kZWZpbmVkKSBzd2l0Y2ggKGFjdGlvbk9iai5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgY2FzZSBcImlzQ29tcGxldGVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwgPSBhY3Rpb25PYmouZWwsIGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJ1bm1hc2tlZHZhbHVlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsICE9PSB1bmRlZmluZWQgJiYgYWN0aW9uT2JqLnZhbHVlID09PSB1bmRlZmluZWQgfHwgKHZhbHVlQnVmZmVyID0gYWN0aW9uT2JqLnZhbHVlLCBcbiAgICAgICAgICAgICAgICB2YWx1ZUJ1ZmZlciA9ICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIHZhbHVlQnVmZmVyLCBvcHRzKSB8fCB2YWx1ZUJ1ZmZlciA6IHZhbHVlQnVmZmVyKS5zcGxpdChcIlwiKSwgXG4gICAgICAgICAgICAgICAgY2hlY2tWYWwodW5kZWZpbmVkLCAhMSwgITEsIGlzUlRMID8gdmFsdWVCdWZmZXIucmV2ZXJzZSgpIDogdmFsdWVCdWZmZXIpLCAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZVdyaXRlKSAmJiBvcHRzLm9uQmVmb3JlV3JpdGUuY2FsbChpbnB1dG1hc2ssIHVuZGVmaW5lZCwgZ2V0QnVmZmVyKCksIDAsIG9wdHMpKSwgXG4gICAgICAgICAgICAgICAgdW5tYXNrZWR2YWx1ZShlbCk7XG5cbiAgICAgICAgICAgICAgY2FzZSBcIm1hc2tcIjpcbiAgICAgICAgICAgICAgICAhZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9mZihlbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzU3VwcG9ydGVkID0gZnVuY3Rpb24oaW5wdXQsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50VHlwZSA9IGlucHV0LmdldEF0dHJpYnV0ZShcInR5cGVcIiksIGlzU3VwcG9ydGVkID0gXCJJTlBVVFwiID09PSBpbnB1dC50YWdOYW1lICYmIC0xICE9PSAkLmluQXJyYXkoZWxlbWVudFR5cGUsIG9wdHMuc3VwcG9ydHNJbnB1dFR5cGUpIHx8IGlucHV0LmlzQ29udGVudEVkaXRhYmxlIHx8IFwiVEVYVEFSRUFcIiA9PT0gaW5wdXQudGFnTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNTdXBwb3J0ZWQpIGlmIChcIklOUFVUXCIgPT09IGlucHV0LnRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBlbGVtZW50VHlwZSksIGlzU3VwcG9ydGVkID0gXCJ0ZXh0XCIgPT09IGVsLnR5cGUsIGVsID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpc1N1cHBvcnRlZCA9IFwicGFydGlhbFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExICE9PSBpc1N1cHBvcnRlZCA/IGZ1bmN0aW9uKG5wdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldHRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRtYXNrID8gdGhpcy5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrID8gdGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpIDogLTEgIT09IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgfHwgITAgIT09IG9wdHMubnVsbGFibGUgPyBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0aGlzICYmIG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgPyAoaXNSVEwgPyBjbGVhck9wdGlvbmFsVGFpbChnZXRCdWZmZXIoKS5zbGljZSgpKS5yZXZlcnNlKCkgOiBjbGVhck9wdGlvbmFsVGFpbChnZXRCdWZmZXIoKS5zbGljZSgpKSkuam9pbihcIlwiKSA6IHZhbHVlR2V0LmNhbGwodGhpcykgOiBcIlwiIDogdmFsdWVHZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0dGVyKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0LmNhbGwodGhpcywgdmFsdWUpLCB0aGlzLmlucHV0bWFzayAmJiAkKHRoaXMpLnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlR2V0LCB2YWx1ZVNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5wdC5pbnB1dG1hc2suX192YWx1ZUdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoITAgIT09IG9wdHMubm9WYWx1ZVBhdGNoaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YgPSBcIm9iamVjdFwiID09PSBfdHlwZW9mKFwidGVzdFwiLl9fcHJvdG9fXykgPyBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5fX3Byb3RvX187XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVQcm9wZXJ0eSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LmdldFByb3RvdHlwZU9mKG5wdCksIFwidmFsdWVcIikgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVQcm9wZXJ0eSAmJiB2YWx1ZVByb3BlcnR5LmdldCAmJiB2YWx1ZVByb3BlcnR5LnNldCA/ICh2YWx1ZUdldCA9IHZhbHVlUHJvcGVydHkuZ2V0LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldCA9IHZhbHVlUHJvcGVydHkuc2V0LCBPYmplY3QuZGVmaW5lUHJvcGVydHkobnB0LCBcInZhbHVlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBnZXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldDogc2V0dGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpIDogXCJJTlBVVFwiICE9PSBucHQudGFnTmFtZSAmJiAodmFsdWVHZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdmFsdWVTZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5wdCwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZ2V0dGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fICYmIG5wdC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIikgJiYgKHZhbHVlR2V0ID0gbnB0Ll9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldCA9IG5wdC5fX2xvb2t1cFNldHRlcl9fKFwidmFsdWVcIiksIG5wdC5fX2RlZmluZUdldHRlcl9fKFwidmFsdWVcIiwgZ2V0dGVyKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBucHQuX19kZWZpbmVTZXR0ZXJfXyhcInZhbHVlXCIsIHNldHRlcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0LmlucHV0bWFzay5fX3ZhbHVlR2V0ID0gdmFsdWVHZXQsIG5wdC5pbnB1dG1hc2suX192YWx1ZVNldCA9IHZhbHVlU2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5wdC5pbnB1dG1hc2suX3ZhbHVlR2V0ID0gZnVuY3Rpb24ob3ZlcnJ1bGVSVEwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1JUTCAmJiAhMCAhPT0gb3ZlcnJ1bGVSVEwgPyB2YWx1ZUdldC5jYWxsKHRoaXMuZWwpLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogdmFsdWVHZXQuY2FsbCh0aGlzLmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgbnB0LmlucHV0bWFzay5fdmFsdWVTZXQgPSBmdW5jdGlvbih2YWx1ZSwgb3ZlcnJ1bGVSVEwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0LmNhbGwodGhpcy5lbCwgbnVsbCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiAhMCAhPT0gb3ZlcnJ1bGVSVEwgJiYgaXNSVEwgPyB2YWx1ZS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdmFsdWVHZXQgPT09IHVuZGVmaW5lZCAmJiAodmFsdWVHZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB2YWx1ZVNldCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLnZhbEhvb2tzICYmICgkLnZhbEhvb2tzW3R5cGVdID09PSB1bmRlZmluZWQgfHwgITAgIT09ICQudmFsSG9va3NbdHlwZV0uaW5wdXRtYXNrcGF0Y2gpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGhvb2tHZXQgPSAkLnZhbEhvb2tzW3R5cGVdICYmICQudmFsSG9va3NbdHlwZV0uZ2V0ID8gJC52YWxIb29rc1t0eXBlXS5nZXQgOiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHZhbGhvb2tTZXQgPSAkLnZhbEhvb2tzW3R5cGVdICYmICQudmFsSG9va3NbdHlwZV0uc2V0ID8gJC52YWxIb29rc1t0eXBlXS5zZXQgOiBmdW5jdGlvbihlbGVtLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS52YWx1ZSA9IHZhbHVlLCBlbGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC52YWxIb29rc1t0eXBlXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrKSByZXR1cm4gZWxlbS5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2YWxob29rR2V0KGVsZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMSAhPT0gZ2V0TGFzdFZhbGlkUG9zaXRpb24odW5kZWZpbmVkLCB1bmRlZmluZWQsIGVsZW0uaW5wdXRtYXNrLm1hc2tzZXQudmFsaWRQb3NpdGlvbnMpIHx8ICEwICE9PSBvcHRzLm51bGxhYmxlID8gcmVzdWx0IDogXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxob29rR2V0KGVsZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGVsZW0sIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0LCAkZWxlbSA9ICQoZWxlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ID0gdmFsaG9va1NldChlbGVtLCB2YWx1ZSksIGVsZW0uaW5wdXRtYXNrICYmICRlbGVtLnRyaWdnZXIoXCJzZXR2YWx1ZVwiKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0bWFza3BhdGNoOiAhMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0obnB0LnR5cGUpLCBmdW5jdGlvbihucHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24obnB0LCBcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0bWFzay5fdmFsdWVHZXQoKSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAmJiAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0obnB0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfShpbnB1dCkgOiBpbnB1dC5pbnB1dG1hc2sgPSB1bmRlZmluZWQsIGlzU3VwcG9ydGVkO1xuICAgICAgICAgICAgICAgICAgICB9KGVsZW0sIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoITEgIT09IGlzU3VwcG9ydGVkICYmIChlbCA9IGVsZW0sICRlbCA9ICQoZWwpLCAtMSA9PT0gKG1heExlbmd0aCA9IGVsICE9PSB1bmRlZmluZWQgPyBlbC5tYXhMZW5ndGggOiB1bmRlZmluZWQpICYmIChtYXhMZW5ndGggPSB1bmRlZmluZWQpLCBcbiAgICAgICAgICAgICAgICAgICAgITAgPT09IG9wdHMuY29sb3JNYXNrICYmIGluaXRpYWxpemVDb2xvck1hc2soZWwpLCBhbmRyb2lkICYmIChlbC5oYXNPd25Qcm9wZXJ0eShcImlucHV0bW9kZVwiKSAmJiAoZWwuaW5wdXRtb2RlID0gb3B0cy5pbnB1dG1vZGUsIFxuICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJpbnB1dG1vZGVcIiwgb3B0cy5pbnB1dG1vZGUpKSwgXCJydGZtXCIgPT09IG9wdHMuYW5kcm9pZEhhY2sgJiYgKCEwICE9PSBvcHRzLmNvbG9yTWFzayAmJiBpbml0aWFsaXplQ29sb3JNYXNrKGVsKSwgXG4gICAgICAgICAgICAgICAgICAgIGVsLnR5cGUgPSBcInBhc3N3b3JkXCIpKSwgITAgPT09IGlzU3VwcG9ydGVkICYmIChFdmVudFJ1bGVyLm9uKGVsLCBcInN1Ym1pdFwiLCBFdmVudEhhbmRsZXJzLnN1Ym1pdEV2ZW50KSwgXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwicmVzZXRcIiwgRXZlbnRIYW5kbGVycy5yZXNldEV2ZW50KSwgRXZlbnRSdWxlci5vbihlbCwgXCJtb3VzZWVudGVyXCIsIEV2ZW50SGFuZGxlcnMubW91c2VlbnRlckV2ZW50KSwgXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiYmx1clwiLCBFdmVudEhhbmRsZXJzLmJsdXJFdmVudCksIEV2ZW50UnVsZXIub24oZWwsIFwiZm9jdXNcIiwgRXZlbnRIYW5kbGVycy5mb2N1c0V2ZW50KSwgXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwibW91c2VsZWF2ZVwiLCBFdmVudEhhbmRsZXJzLm1vdXNlbGVhdmVFdmVudCksICEwICE9PSBvcHRzLmNvbG9yTWFzayAmJiBFdmVudFJ1bGVyLm9uKGVsLCBcImNsaWNrXCIsIEV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImRibGNsaWNrXCIsIEV2ZW50SGFuZGxlcnMuZGJsY2xpY2tFdmVudCksIEV2ZW50UnVsZXIub24oZWwsIFwicGFzdGVcIiwgRXZlbnRIYW5kbGVycy5wYXN0ZUV2ZW50KSwgXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiZHJhZ2Ryb3BcIiwgRXZlbnRIYW5kbGVycy5wYXN0ZUV2ZW50KSwgRXZlbnRSdWxlci5vbihlbCwgXCJkcm9wXCIsIEV2ZW50SGFuZGxlcnMucGFzdGVFdmVudCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImN1dFwiLCBFdmVudEhhbmRsZXJzLmN1dEV2ZW50KSwgRXZlbnRSdWxlci5vbihlbCwgXCJjb21wbGV0ZVwiLCBvcHRzLm9uY29tcGxldGUpLCBcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJpbmNvbXBsZXRlXCIsIG9wdHMub25pbmNvbXBsZXRlKSwgRXZlbnRSdWxlci5vbihlbCwgXCJjbGVhcmVkXCIsIG9wdHMub25jbGVhcmVkKSwgXG4gICAgICAgICAgICAgICAgICAgIGFuZHJvaWQgfHwgITAgPT09IG9wdHMuaW5wdXRFdmVudE9ubHkgPyBlbC5yZW1vdmVBdHRyaWJ1dGUoXCJtYXhMZW5ndGhcIikgOiAoRXZlbnRSdWxlci5vbihlbCwgXCJrZXlkb3duXCIsIEV2ZW50SGFuZGxlcnMua2V5ZG93bkV2ZW50KSwgXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwia2V5cHJlc3NcIiwgRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50KSksIEV2ZW50UnVsZXIub24oZWwsIFwiY29tcG9zaXRpb25zdGFydFwiLCAkLm5vb3ApLCBcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJjb21wb3NpdGlvbnVwZGF0ZVwiLCAkLm5vb3ApLCBFdmVudFJ1bGVyLm9uKGVsLCBcImNvbXBvc2l0aW9uZW5kXCIsICQubm9vcCksIFxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImtleXVwXCIsICQubm9vcCksIEV2ZW50UnVsZXIub24oZWwsIFwiaW5wdXRcIiwgRXZlbnRIYW5kbGVycy5pbnB1dEZhbGxCYWNrRXZlbnQpLCBcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJiZWZvcmVpbnB1dFwiLCAkLm5vb3ApKSwgRXZlbnRSdWxlci5vbihlbCwgXCJzZXR2YWx1ZVwiLCBFdmVudEhhbmRsZXJzLnNldFZhbHVlRXZlbnQpLCBcbiAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpLCBcIlwiICE9PSBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKSB8fCAhMSA9PT0gb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIGVsLmlucHV0bWFzay5fdmFsdWVHZXQoITApLCBvcHRzKSB8fCBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKSA6IGVsLmlucHV0bWFzay5fdmFsdWVHZXQoITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJcIiAhPT0gaW5pdGlhbFZhbHVlICYmIGNoZWNrVmFsKGVsLCAhMCwgITEsIGlzUlRMID8gaW5pdGlhbFZhbHVlLnNwbGl0KFwiXCIpLnJldmVyc2UoKSA6IGluaXRpYWxWYWx1ZS5zcGxpdChcIlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGJ1ZmZlci5qb2luKFwiXCIpLCAhMSA9PT0gaXNDb21wbGV0ZShidWZmZXIpICYmIG9wdHMuY2xlYXJJbmNvbXBsZXRlICYmIHJlc2V0TWFza1NldCgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWwgJiYgKC0xID09PSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpID8gYnVmZmVyID0gW10gOiBjbGVhck9wdGlvbmFsVGFpbChidWZmZXIpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihlbCwgYnVmZmVyKSwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZWwgJiYgY2FyZXQoZWwsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0oZWwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJmb3JtYXRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVCdWZmZXIgPSAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSA/IG9wdHMub25CZWZvcmVNYXNrLmNhbGwoaW5wdXRtYXNrLCBhY3Rpb25PYmoudmFsdWUsIG9wdHMpIHx8IGFjdGlvbk9iai52YWx1ZSA6IGFjdGlvbk9iai52YWx1ZSkuc3BsaXQoXCJcIiksIFxuICAgICAgICAgICAgICAgIGNoZWNrVmFsKHVuZGVmaW5lZCwgITAsICExLCBpc1JUTCA/IHZhbHVlQnVmZmVyLnJldmVyc2UoKSA6IHZhbHVlQnVmZmVyKSwgYWN0aW9uT2JqLm1ldGFkYXRhID8ge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogZ2V0QnVmZmVyKCkuam9pbihcIlwiKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJnZXRtZXRhZGF0YVwiXG4gICAgICAgICAgICAgICAgICAgIH0sIG1hc2tzZXQsIG9wdHMpXG4gICAgICAgICAgICAgICAgfSA6IGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImlzVmFsaWRcIjpcbiAgICAgICAgICAgICAgICBhY3Rpb25PYmoudmFsdWUgPyAodmFsdWVCdWZmZXIgPSBhY3Rpb25PYmoudmFsdWUuc3BsaXQoXCJcIiksIGNoZWNrVmFsKHVuZGVmaW5lZCwgITAsICEwLCBpc1JUTCA/IHZhbHVlQnVmZmVyLnJldmVyc2UoKSA6IHZhbHVlQnVmZmVyKSkgOiBhY3Rpb25PYmoudmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLCBybCA9IGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKCksIGxtaWIgPSBidWZmZXIubGVuZ3RoIC0gMTsgbG1pYiA+IHJsICYmICFpc01hc2sobG1pYik7IGxtaWItLSkgO1xuICAgICAgICAgICAgICAgIHJldHVybiBidWZmZXIuc3BsaWNlKHJsLCBsbWliICsgMSAtIHJsKSwgaXNDb21wbGV0ZShidWZmZXIpICYmIGFjdGlvbk9iai52YWx1ZSA9PT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcblxuICAgICAgICAgICAgICBjYXNlIFwiZ2V0ZW1wdHltYXNrXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKTtcblxuICAgICAgICAgICAgICBjYXNlIFwicmVtb3ZlXCI6XG4gICAgICAgICAgICAgICAgaWYgKGVsICYmIGVsLmlucHV0bWFzaykge1xuICAgICAgICAgICAgICAgICAgICAkZWwgPSAkKGVsKSwgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChvcHRzLmF1dG9Vbm1hc2sgPyB1bm1hc2tlZHZhbHVlKGVsKSA6IGVsLmlucHV0bWFzay5fdmFsdWVHZXQoITApKSwgXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub2ZmKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZihlbCksIFwidmFsdWVcIikgJiYgZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCBcInZhbHVlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IGVsLmlucHV0bWFzay5fX3ZhbHVlU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgICAgICAgICAgICAgICAgICB9KSA6IGRvY3VtZW50Ll9fbG9va3VwR2V0dGVyX18gJiYgZWwuX19sb29rdXBHZXR0ZXJfXyhcInZhbHVlXCIpICYmIGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0ICYmIChlbC5fX2RlZmluZUdldHRlcl9fKFwidmFsdWVcIiwgZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQpLCBcbiAgICAgICAgICAgICAgICAgICAgZWwuX19kZWZpbmVTZXR0ZXJfXyhcInZhbHVlXCIsIGVsLmlucHV0bWFzay5fX3ZhbHVlU2V0KSksIGVsLmlucHV0bWFzayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJnZXRtZXRhZGF0YVwiOlxuICAgICAgICAgICAgICAgIGlmICgkLmlzQXJyYXkobWFza3NldC5tZXRhZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2tUYXJnZXQgPSBnZXRNYXNrVGVtcGxhdGUoITAsIDAsICExKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5lYWNoKG1hc2tzZXQubWV0YWRhdGEsIGZ1bmN0aW9uKG5keCwgbXRkdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG10ZHQubWFzayA9PT0gbWFza1RhcmdldCkgcmV0dXJuIG1hc2tUYXJnZXQgPSBtdGR0LCAhMTtcbiAgICAgICAgICAgICAgICAgICAgfSksIG1hc2tUYXJnZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrc2V0Lm1ldGFkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQsIG1vYmlsZSA9IC9tb2JpbGUvaS50ZXN0KHVhKSwgaWVtb2JpbGUgPSAvaWVtb2JpbGUvaS50ZXN0KHVhKSwgaXBob25lID0gL2lwaG9uZS9pLnRlc3QodWEpICYmICFpZW1vYmlsZSwgYW5kcm9pZCA9IC9hbmRyb2lkL2kudGVzdCh1YSkgJiYgIWllbW9iaWxlO1xuICAgICAgICByZXR1cm4gSW5wdXRtYXNrLnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIGRhdGFBdHRyaWJ1dGU6IFwiZGF0YS1pbnB1dG1hc2tcIixcbiAgICAgICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiX1wiLFxuICAgICAgICAgICAgICAgIG9wdGlvbmFsbWFya2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBcIltcIixcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBcIl1cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcXVhbnRpZmllcm1hcmtlcjoge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJ7XCIsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogXCJ9XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdyb3VwbWFya2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBcIihcIixcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBcIilcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWx0ZXJuYXRvcm1hcmtlcjogXCJ8XCIsXG4gICAgICAgICAgICAgICAgZXNjYXBlQ2hhcjogXCJcXFxcXCIsXG4gICAgICAgICAgICAgICAgbWFzazogbnVsbCxcbiAgICAgICAgICAgICAgICByZWdleDogbnVsbCxcbiAgICAgICAgICAgICAgICBvbmNvbXBsZXRlOiAkLm5vb3AsXG4gICAgICAgICAgICAgICAgb25pbmNvbXBsZXRlOiAkLm5vb3AsXG4gICAgICAgICAgICAgICAgb25jbGVhcmVkOiAkLm5vb3AsXG4gICAgICAgICAgICAgICAgcmVwZWF0OiAwLFxuICAgICAgICAgICAgICAgIGdyZWVkeTogITAsXG4gICAgICAgICAgICAgICAgYXV0b1VubWFzazogITEsXG4gICAgICAgICAgICAgICAgcmVtb3ZlTWFza09uU3VibWl0OiAhMSxcbiAgICAgICAgICAgICAgICBjbGVhck1hc2tPbkxvc3RGb2N1czogITAsXG4gICAgICAgICAgICAgICAgaW5zZXJ0TW9kZTogITAsXG4gICAgICAgICAgICAgICAgY2xlYXJJbmNvbXBsZXRlOiAhMSxcbiAgICAgICAgICAgICAgICBhbGlhczogbnVsbCxcbiAgICAgICAgICAgICAgICBvbktleURvd246ICQubm9vcCxcbiAgICAgICAgICAgICAgICBvbkJlZm9yZU1hc2s6IG51bGwsXG4gICAgICAgICAgICAgICAgb25CZWZvcmVQYXN0ZTogZnVuY3Rpb24ocGFzdGVkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKHRoaXMsIHBhc3RlZFZhbHVlLCBvcHRzKSA6IHBhc3RlZFZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25CZWZvcmVXcml0ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBvblVuTWFzazogbnVsbCxcbiAgICAgICAgICAgICAgICBzaG93TWFza09uRm9jdXM6ICEwLFxuICAgICAgICAgICAgICAgIHNob3dNYXNrT25Ib3ZlcjogITAsXG4gICAgICAgICAgICAgICAgb25LZXlWYWxpZGF0aW9uOiAkLm5vb3AsXG4gICAgICAgICAgICAgICAgc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcjogXCIgXCIsXG4gICAgICAgICAgICAgICAgbnVtZXJpY0lucHV0OiAhMSxcbiAgICAgICAgICAgICAgICByaWdodEFsaWduOiAhMSxcbiAgICAgICAgICAgICAgICB1bmRvT25Fc2NhcGU6ICEwLFxuICAgICAgICAgICAgICAgIHJhZGl4UG9pbnQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgcmFkaXhQb2ludERlZmluaXRpb25TeW1ib2w6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBncm91cFNlcGFyYXRvcjogXCJcIixcbiAgICAgICAgICAgICAgICBrZWVwU3RhdGljOiBudWxsLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2FyZXRPblRhYjogITAsXG4gICAgICAgICAgICAgICAgdGFiVGhyb3VnaDogITEsXG4gICAgICAgICAgICAgICAgc3VwcG9ydHNJbnB1dFR5cGU6IFsgXCJ0ZXh0XCIsIFwidGVsXCIsIFwicGFzc3dvcmRcIiBdLFxuICAgICAgICAgICAgICAgIGlnbm9yYWJsZXM6IFsgOCwgOSwgMTMsIDE5LCAyNywgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0NSwgNDYsIDkzLCAxMTIsIDExMywgMTE0LCAxMTUsIDExNiwgMTE3LCAxMTgsIDExOSwgMTIwLCAxMjEsIDEyMiwgMTIzLCAwLCAyMjkgXSxcbiAgICAgICAgICAgICAgICBpc0NvbXBsZXRlOiBudWxsLFxuICAgICAgICAgICAgICAgIGNhbkNsZWFyUG9zaXRpb246ICQubm9vcCxcbiAgICAgICAgICAgICAgICBwcmVWYWxpZGF0aW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXRpY0RlZmluaXRpb25TeW1ib2w6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBqaXRNYXNraW5nOiAhMSxcbiAgICAgICAgICAgICAgICBudWxsYWJsZTogITAsXG4gICAgICAgICAgICAgICAgaW5wdXRFdmVudE9ubHk6ICExLFxuICAgICAgICAgICAgICAgIG5vVmFsdWVQYXRjaGluZzogITEsXG4gICAgICAgICAgICAgICAgcG9zaXRpb25DYXJldE9uQ2xpY2s6IFwibHZwXCIsXG4gICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxuICAgICAgICAgICAgICAgIGlucHV0bW9kZTogXCJ2ZXJiYXRpbVwiLFxuICAgICAgICAgICAgICAgIGNvbG9yTWFzazogITEsXG4gICAgICAgICAgICAgICAgYW5kcm9pZEhhY2s6ICExLFxuICAgICAgICAgICAgICAgIGltcG9ydERhdGFBdHRyaWJ1dGVzOiAhMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgXCI5XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTnvvJEt77yZXVwiLFxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvblN5bWJvbDogXCIqXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLVphLXrQkC3Rj9CB0ZHDgC3Dv8K1XVwiLFxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvblN5bWJvbDogXCIqXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiKlwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC0577yRLe+8mUEtWmEtetCQLdGP0IHRkcOALcO/wrVdXCIsXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFsaWFzZXM6IHt9LFxuICAgICAgICAgICAgbWFza3NDYWNoZToge30sXG4gICAgICAgICAgICBtYXNrOiBmdW5jdGlvbihlbGVtcykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGltcG9ydEF0dHJpYnV0ZU9wdGlvbnMobnB0LCBvcHRzLCB1c2VyT3B0aW9ucywgZGF0YUF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoITAgPT09IG9wdHMuaW1wb3J0RGF0YUF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb24sIGRhdGFvcHRpb25zLCBvcHRpb25EYXRhLCBwLCBpbXBvcnRPcHRpb24gPSBmdW5jdGlvbihvcHRpb24sIG9wdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9PSAob3B0aW9uRGF0YSA9IG9wdGlvbkRhdGEgIT09IHVuZGVmaW5lZCA/IG9wdGlvbkRhdGEgOiBucHQuZ2V0QXR0cmlidXRlKGRhdGFBdHRyaWJ1dGUgKyBcIi1cIiArIG9wdGlvbikpICYmIChcInN0cmluZ1wiID09IHR5cGVvZiBvcHRpb25EYXRhICYmICgwID09PSBvcHRpb24uaW5kZXhPZihcIm9uXCIpID8gb3B0aW9uRGF0YSA9IHdpbmRvd1tvcHRpb25EYXRhXSA6IFwiZmFsc2VcIiA9PT0gb3B0aW9uRGF0YSA/IG9wdGlvbkRhdGEgPSAhMSA6IFwidHJ1ZVwiID09PSBvcHRpb25EYXRhICYmIChvcHRpb25EYXRhID0gITApKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck9wdGlvbnNbb3B0aW9uXSA9IG9wdGlvbkRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgYXR0ck9wdGlvbnMgPSBucHQuZ2V0QXR0cmlidXRlKGRhdGFBdHRyaWJ1dGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJPcHRpb25zICYmIFwiXCIgIT09IGF0dHJPcHRpb25zICYmIChhdHRyT3B0aW9ucyA9IGF0dHJPcHRpb25zLnJlcGxhY2UobmV3IFJlZ0V4cChcIidcIiwgXCJnXCIpLCAnXCInKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhb3B0aW9ucyA9IEpTT04ucGFyc2UoXCJ7XCIgKyBhdHRyT3B0aW9ucyArIFwifVwiKSksIGRhdGFvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHAgaW4gZGF0YW9wdGlvbnMpIGlmIChcImFsaWFzXCIgPT09IHAudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gZGF0YW9wdGlvbnNbcF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydE9wdGlvbihcImFsaWFzXCIsIG9wdGlvbkRhdGEpLCB1c2VyT3B0aW9ucy5hbGlhcyAmJiByZXNvbHZlQWxpYXModXNlck9wdGlvbnMuYWxpYXMsIHVzZXJPcHRpb25zLCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAob3B0aW9uIGluIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YW9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwIGluIGRhdGFvcHRpb25zKSBpZiAocC50b0xvd2VyQ2FzZSgpID09PSBvcHRpb24udG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IGRhdGFvcHRpb25zW3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0T3B0aW9uKG9wdGlvbiwgb3B0aW9uRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKCEwLCBvcHRzLCB1c2VyT3B0aW9ucyksIChcInJ0bFwiID09PSBucHQuZGlyIHx8IG9wdHMucmlnaHRBbGlnbikgJiYgKG5wdC5zdHlsZS50ZXh0QWxpZ24gPSBcInJpZ2h0XCIpLCBcbiAgICAgICAgICAgICAgICAgICAgKFwicnRsXCIgPT09IG5wdC5kaXIgfHwgb3B0cy5udW1lcmljSW5wdXQpICYmIChucHQuZGlyID0gXCJsdHJcIiwgbnB0LnJlbW92ZUF0dHJpYnV0ZShcImRpclwiKSwgXG4gICAgICAgICAgICAgICAgICAgIG9wdHMuaXNSVEwgPSAhMCksIG9wdHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZWxlbXMgJiYgKGVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbXMpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbXMpKSwgXG4gICAgICAgICAgICAgICAgZWxlbXMgPSBlbGVtcy5ub2RlTmFtZSA/IFsgZWxlbXMgXSA6IGVsZW1zLCAkLmVhY2goZWxlbXMsIGZ1bmN0aW9uKG5keCwgZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjb3BlZE9wdHMgPSAkLmV4dGVuZCghMCwge30sIHRoYXQub3B0cyk7XG4gICAgICAgICAgICAgICAgICAgIGltcG9ydEF0dHJpYnV0ZU9wdGlvbnMoZWwsIHNjb3BlZE9wdHMsICQuZXh0ZW5kKCEwLCB7fSwgdGhhdC51c2VyT3B0aW9ucyksIHRoYXQuZGF0YUF0dHJpYnV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrc2V0ID0gZ2VuZXJhdGVNYXNrU2V0KHNjb3BlZE9wdHMsIHRoYXQubm9NYXNrc0NhY2hlKTtcbiAgICAgICAgICAgICAgICAgICAgbWFza3NldCAhPT0gdW5kZWZpbmVkICYmIChlbC5pbnB1dG1hc2sgIT09IHVuZGVmaW5lZCAmJiAoZWwuaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzayA9ICEwLCBcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLnJlbW92ZSgpKSwgZWwuaW5wdXRtYXNrID0gbmV3IElucHV0bWFzayh1bmRlZmluZWQsIHVuZGVmaW5lZCwgITApLCBcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLm9wdHMgPSBzY29wZWRPcHRzLCBlbC5pbnB1dG1hc2subm9NYXNrc0NhY2hlID0gdGhhdC5ub01hc2tzQ2FjaGUsIGVsLmlucHV0bWFzay51c2VyT3B0aW9ucyA9ICQuZXh0ZW5kKCEwLCB7fSwgdGhhdC51c2VyT3B0aW9ucyksIFxuICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2suaXNSVEwgPSBzY29wZWRPcHRzLmlzUlRMIHx8IHNjb3BlZE9wdHMubnVtZXJpY0lucHV0LCBlbC5pbnB1dG1hc2suZWwgPSBlbCwgXG4gICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5tYXNrc2V0ID0gbWFza3NldCwgJC5kYXRhKGVsLCBcIl9pbnB1dG1hc2tfb3B0c1wiLCBzY29wZWRPcHRzKSwgbWFza1Njb3BlLmNhbGwoZWwuaW5wdXRtYXNrLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwibWFza1wiXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSwgZWxlbXMgJiYgZWxlbXNbMF0gPyBlbGVtc1swXS5pbnB1dG1hc2sgfHwgdGhpcyA6IHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0aW9uOiBmdW5jdGlvbihvcHRpb25zLCBub3JlbWFzaykge1xuICAgICAgICAgICAgICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiBvcHRpb25zID8gdGhpcy5vcHRzW29wdGlvbnNdIDogXCJvYmplY3RcIiA9PT0gKHZvaWQgMCA9PT0gb3B0aW9ucyA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9wdGlvbnMpKSA/ICgkLmV4dGVuZCh0aGlzLnVzZXJPcHRpb25zLCBvcHRpb25zKSwgXG4gICAgICAgICAgICAgICAgdGhpcy5lbCAmJiAhMCAhPT0gbm9yZW1hc2sgJiYgdGhpcy5tYXNrKHRoaXMuZWwpLCB0aGlzKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bm1hc2tlZHZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpLCBcbiAgICAgICAgICAgICAgICBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJ1bm1hc2tlZHZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlbW92ZVwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0ZW1wdHltYXNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXNrc2V0ID0gdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKSwgXG4gICAgICAgICAgICAgICAgbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0ZW1wdHltYXNrXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNNYXNrZWRWYWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLm9wdHMuYXV0b1VubWFzaztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0NvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXNrc2V0ID0gdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKSwgXG4gICAgICAgICAgICAgICAgbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiaXNDb21wbGV0ZVwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0bWV0YWRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpLCBcbiAgICAgICAgICAgICAgICBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJnZXRtZXRhZGF0YVwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNWYWxpZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXNrc2V0ID0gdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKSwgXG4gICAgICAgICAgICAgICAgbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiaXNWYWxpZFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb3JtYXQ6IGZ1bmN0aW9uKHZhbHVlLCBtZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpLCBcbiAgICAgICAgICAgICAgICBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJmb3JtYXRcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbWV0YWRhdGFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmFseXNlTWFzazogZnVuY3Rpb24obWFzaywgcmVnZXhNYXNrLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gTWFza1Rva2VuKGlzR3JvdXAsIGlzT3B0aW9uYWwsIGlzUXVhbnRpZmllciwgaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IFtdLCB0aGlzLm9wZW5Hcm91cCA9IGlzR3JvdXAgfHwgITEsIHRoaXMuYWx0ZXJuYXRvckdyb3VwID0gITEsIHRoaXMuaXNHcm91cCA9IGlzR3JvdXAgfHwgITEsIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzT3B0aW9uYWwgPSBpc09wdGlvbmFsIHx8ICExLCB0aGlzLmlzUXVhbnRpZmllciA9IGlzUXVhbnRpZmllciB8fCAhMSwgdGhpcy5pc0FsdGVybmF0b3IgPSBpc0FsdGVybmF0b3IgfHwgITEsIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1YW50aWZpZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg6IDFcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5zZXJ0VGVzdERlZmluaXRpb24obXRva2VuLCBlbGVtZW50LCBwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uICE9PSB1bmRlZmluZWQgPyBwb3NpdGlvbiA6IG10b2tlbi5tYXRjaGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZNYXRjaCA9IG10b2tlbi5tYXRjaGVzW3Bvc2l0aW9uIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWdleE1hc2spIDAgPT09IGVsZW1lbnQuaW5kZXhPZihcIltcIikgfHwgZXNjYXBlZCAmJiAvXFxcXGR8XFxcXHN8XFxcXHddL2kudGVzdChlbGVtZW50KSB8fCBcIi5cIiA9PT0gZWxlbWVudCA/IG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbjogbmV3IFJlZ0V4cChlbGVtZW50LCBvcHRzLmNhc2luZyA/IFwiaVwiIDogXCJcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBtdG9rZW4uaXNPcHRpb25hbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCB8fCBwcmV2TWF0Y2guZGVmICE9PSBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB9KSA6IChlc2NhcGVkICYmIChlbGVtZW50ID0gZWxlbWVudFtlbGVtZW50Lmxlbmd0aCAtIDFdKSwgJC5lYWNoKGVsZW1lbnQuc3BsaXQoXCJcIiksIGZ1bmN0aW9uKG5keCwgbG1udCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldk1hdGNoID0gbXRva2VuLm1hdGNoZXNbcG9zaXRpb24gLSAxXSwgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogbXRva2VuLmlzT3B0aW9uYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHByZXZNYXRjaCA9PT0gdW5kZWZpbmVkIHx8IHByZXZNYXRjaC5kZWYgIT09IGxtbnQgJiYgbnVsbCAhPT0gcHJldk1hdGNoLmZuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbCB8fCBsbW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgIT09IHVuZGVmaW5lZCA/IGxtbnQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRGVmOiBsbW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLCBlc2NhcGVkID0gITE7IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2tkZWYgPSAob3B0cy5kZWZpbml0aW9ucyA/IG9wdHMuZGVmaW5pdGlvbnNbZWxlbWVudF0gOiB1bmRlZmluZWQpIHx8IElucHV0bWFzay5wcm90b3R5cGUuZGVmaW5pdGlvbnNbZWxlbWVudF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza2RlZiAmJiAhZXNjYXBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByZXZhbGlkYXRvcnMgPSBtYXNrZGVmLnByZXZhbGlkYXRvciwgcHJldmFsaWRhdG9yc0wgPSBwcmV2YWxpZGF0b3JzID8gcHJldmFsaWRhdG9ycy5sZW5ndGggOiAwLCBpID0gMTsgaSA8IG1hc2tkZWYuY2FyZGluYWxpdHk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmFsaWRhdG9yID0gcHJldmFsaWRhdG9yc0wgPj0gaSA/IHByZXZhbGlkYXRvcnNbaSAtIDFdIDogW10sIHZhbGlkYXRvciA9IHByZXZhbGlkYXRvci52YWxpZGF0b3IsIGNhcmRpbmFsaXR5ID0gcHJldmFsaWRhdG9yLmNhcmRpbmFsaXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdG9rZW4ubWF0Y2hlcy5zcGxpY2UocG9zaXRpb24rKywgMCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IHZhbGlkYXRvciA/IFwic3RyaW5nXCIgPT0gdHlwZW9mIHZhbGlkYXRvciA/IG5ldyBSZWdFeHAodmFsaWRhdG9yLCBvcHRzLmNhc2luZyA/IFwiaVwiIDogXCJcIikgOiBuZXcgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXN0ID0gdmFsaWRhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSgpIDogbmV3IFJlZ0V4cChcIi5cIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogY2FyZGluYWxpdHkgfHwgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBtdG9rZW4uaXNPcHRpb25hbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCB8fCBwcmV2TWF0Y2guZGVmICE9PSAobWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBtYXNrZGVmLmNhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogbWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbWFza2RlZi5wbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgcHJldk1hdGNoID0gbXRva2VuLm1hdGNoZXNbcG9zaXRpb24gLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG1hc2tkZWYudmFsaWRhdG9yID8gXCJzdHJpbmdcIiA9PSB0eXBlb2YgbWFza2RlZi52YWxpZGF0b3IgPyBuZXcgUmVnRXhwKG1hc2tkZWYudmFsaWRhdG9yLCBvcHRzLmNhc2luZyA/IFwiaVwiIDogXCJcIikgOiBuZXcgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRlc3QgPSBtYXNrZGVmLnZhbGlkYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSgpIDogbmV3IFJlZ0V4cChcIi5cIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiBtYXNrZGVmLmNhcmRpbmFsaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogbXRva2VuLmlzT3B0aW9uYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCB8fCBwcmV2TWF0Y2guZGVmICE9PSAobWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG1hc2tkZWYuY2FzaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG1hc2tkZWYuZGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbWFza2RlZi5wbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRGVmOiBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogbXRva2VuLmlzT3B0aW9uYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHByZXZNYXRjaCA9PT0gdW5kZWZpbmVkIHx8IHByZXZNYXRjaC5kZWYgIT09IGVsZW1lbnQgJiYgbnVsbCAhPT0gcHJldk1hdGNoLmZuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgIT09IHVuZGVmaW5lZCA/IGVsZW1lbnQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRGVmOiBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgZXNjYXBlZCA9ICExO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHZlcmlmeUdyb3VwTWFya2VyKG1hc2tUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4gJiYgbWFza1Rva2VuLm1hdGNoZXMgJiYgJC5lYWNoKG1hc2tUb2tlbi5tYXRjaGVzLCBmdW5jdGlvbihuZHgsIHRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFRva2VuID0gbWFza1Rva2VuLm1hdGNoZXNbbmR4ICsgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAobmV4dFRva2VuID09PSB1bmRlZmluZWQgfHwgbmV4dFRva2VuLm1hdGNoZXMgPT09IHVuZGVmaW5lZCB8fCAhMSA9PT0gbmV4dFRva2VuLmlzUXVhbnRpZmllcikgJiYgdG9rZW4gJiYgdG9rZW4uaXNHcm91cCAmJiAodG9rZW4uaXNHcm91cCA9ICExLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4TWFzayB8fCAoaW5zZXJ0VGVzdERlZmluaXRpb24odG9rZW4sIG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQsIDApLCAhMCAhPT0gdG9rZW4ub3Blbkdyb3VwICYmIGluc2VydFRlc3REZWZpbml0aW9uKHRva2VuLCBvcHRzLmdyb3VwbWFya2VyLmVuZCkpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZnlHcm91cE1hcmtlcih0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZWZhdWx0Q2FzZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0sIGluc2VydFRlc3REZWZpbml0aW9uKGN1cnJlbnRPcGVuaW5nVG9rZW4sIG0pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4uaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbW5keCA9IDA7IG1uZHggPCBhbHRlcm5hdG9yLm1hdGNoZXMubGVuZ3RoOyBtbmR4KyspIGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5pc0dyb3VwID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5sZW5ndGggPiAwID8gKGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0pLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKSA6IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpbnNlcnRUZXN0RGVmaW5pdGlvbihjdXJyZW50VG9rZW4sIG0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXZlcnNlVG9rZW5zKG1hc2tUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlcyA9IG1hc2tUb2tlbi5tYXRjaGVzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbWF0Y2ggaW4gbWFza1Rva2VuLm1hdGNoZXMpIGlmIChtYXNrVG9rZW4ubWF0Y2hlcy5oYXNPd25Qcm9wZXJ0eShtYXRjaCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnRNYXRjaCA9IHBhcnNlSW50KG1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0uaXNRdWFudGlmaWVyICYmIG1hc2tUb2tlbi5tYXRjaGVzW2ludE1hdGNoICsgMV0gJiYgbWFza1Rva2VuLm1hdGNoZXNbaW50TWF0Y2ggKyAxXS5pc0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF0ID0gbWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbi5tYXRjaGVzLnNwbGljZShtYXRjaCwgMSksIG1hc2tUb2tlbi5tYXRjaGVzLnNwbGljZShpbnRNYXRjaCArIDEsIDAsIHF0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXS5tYXRjaGVzICE9PSB1bmRlZmluZWQgPyBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0gPSByZXZlcnNlVG9rZW5zKG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSkgOiBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0gPSBmdW5jdGlvbihzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdCA9PT0gb3B0cy5vcHRpb25hbG1hcmtlci5zdGFydCA/IHN0ID0gb3B0cy5vcHRpb25hbG1hcmtlci5lbmQgOiBzdCA9PT0gb3B0cy5vcHRpb25hbG1hcmtlci5lbmQgPyBzdCA9IG9wdHMub3B0aW9uYWxtYXJrZXIuc3RhcnQgOiBzdCA9PT0gb3B0cy5ncm91cG1hcmtlci5zdGFydCA/IHN0ID0gb3B0cy5ncm91cG1hcmtlci5lbmQgOiBzdCA9PT0gb3B0cy5ncm91cG1hcmtlci5lbmQgJiYgKHN0ID0gb3B0cy5ncm91cG1hcmtlci5zdGFydCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfShtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXNrVG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBtYXRjaCwgbSwgb3BlbmluZ1Rva2VuLCBjdXJyZW50T3BlbmluZ1Rva2VuLCBhbHRlcm5hdG9yLCBsYXN0TWF0Y2gsIGdyb3VwVG9rZW4sIHRva2VuaXplciA9IC8oPzpbPyorXXxcXHtbMC05XFwrXFwqXSsoPzosWzAtOVxcK1xcKl0qKT9cXH0pfFteLj8qK14ke1tdKCl8XFxcXF0rfC4vZywgcmVnZXhUb2tlbml6ZXIgPSAvXFxbXFxeP10/KD86W15cXFxcXFxdXSt8XFxcXFtcXFNcXHNdPykqXT98XFxcXCg/OjAoPzpbMC0zXVswLTddezAsMn18WzQtN11bMC03XT8pP3xbMS05XVswLTldKnx4WzAtOUEtRmEtZl17Mn18dVswLTlBLUZhLWZdezR9fGNbQS1aYS16XXxbXFxTXFxzXT8pfFxcKCg/OlxcP1s6PSFdPyk/fCg/Ols/KitdfFxce1swLTldKyg/OixbMC05XSopP1xcfSlcXD8/fFteLj8qK14ke1soKXxcXFxcXSt8Li9nLCBlc2NhcGVkID0gITEsIGN1cnJlbnRUb2tlbiA9IG5ldyBNYXNrVG9rZW4oKSwgb3BlbmVuaW5ncyA9IFtdLCBtYXNrVG9rZW5zID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChyZWdleE1hc2sgJiYgKG9wdHMub3B0aW9uYWxtYXJrZXIuc3RhcnQgPSB1bmRlZmluZWQsIG9wdHMub3B0aW9uYWxtYXJrZXIuZW5kID0gdW5kZWZpbmVkKTsgbWF0Y2ggPSByZWdleE1hc2sgPyByZWdleFRva2VuaXplci5leGVjKG1hc2spIDogdG9rZW5pemVyLmV4ZWMobWFzayk7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobSA9IG1hdGNoWzBdLCByZWdleE1hc2spIHN3aXRjaCAobS5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiP1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbSA9IFwiezAsMX1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIitcIjpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiKlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbSA9IFwie1wiICsgbSArIFwifVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlc2NhcGVkKSBkZWZhdWx0Q2FzZSgpOyBlbHNlIHN3aXRjaCAobS5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIG9wdHMuZXNjYXBlQ2hhcjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAhMCwgcmVnZXhNYXNrICYmIGRlZmF1bHRDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5vcHRpb25hbG1hcmtlci5lbmQ6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmdyb3VwbWFya2VyLmVuZDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzLnBvcCgpLCBvcGVuaW5nVG9rZW4ub3Blbkdyb3VwID0gITEsIG9wZW5pbmdUb2tlbiAhPT0gdW5kZWZpbmVkKSBpZiAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdKS5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5pc0FsdGVybmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgYWx0ZXJuYXRvci5tYXRjaGVzLmxlbmd0aDsgbW5keCsrKSBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCA9ICExLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvci5tYXRjaGVzW21uZHhdLmFsdGVybmF0b3JHcm91cCA9ICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLmxlbmd0aCA+IDAgPyAoY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXSkubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpIDogY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pOyBlbHNlIGRlZmF1bHRDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5vcHRpb25hbG1hcmtlci5zdGFydDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChuZXcgTWFza1Rva2VuKCExLCAhMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2gobmV3IE1hc2tUb2tlbighMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIG9wdHMucXVhbnRpZmllcm1hcmtlci5zdGFydDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdWFudGlmaWVyID0gbmV3IE1hc2tUb2tlbighMSwgITEsICEwKSwgbXEgPSAobSA9IG0ucmVwbGFjZSgvW3t9XS9nLCBcIlwiKSkuc3BsaXQoXCIsXCIpLCBtcTAgPSBpc05hTihtcVswXSkgPyBtcVswXSA6IHBhcnNlSW50KG1xWzBdKSwgbXExID0gMSA9PT0gbXEubGVuZ3RoID8gbXEwIDogaXNOYU4obXFbMV0pID8gbXFbMV0gOiBwYXJzZUludChtcVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCIqXCIgIT09IG1xMSAmJiBcIitcIiAhPT0gbXExIHx8IChtcTAgPSBcIipcIiA9PT0gbXExID8gMCA6IDEpLCBxdWFudGlmaWVyLnF1YW50aWZpZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluOiBtcTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBtcTFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLm1hdGNoZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1hdGNoID0gbWF0Y2hlcy5wb3AoKSkuaXNHcm91cCB8fCAoKGdyb3VwVG9rZW4gPSBuZXcgTWFza1Rva2VuKCEwKSkubWF0Y2hlcy5wdXNoKG1hdGNoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBncm91cFRva2VuKSwgbWF0Y2hlcy5wdXNoKG1hdGNoKSwgbWF0Y2hlcy5wdXNoKHF1YW50aWZpZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIChtYXRjaCA9IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnBvcCgpKS5pc0dyb3VwIHx8IChyZWdleE1hc2sgJiYgbnVsbCA9PT0gbWF0Y2guZm4gJiYgXCIuXCIgPT09IG1hdGNoLmRlZiAmJiAobWF0Y2guZm4gPSBuZXcgUmVnRXhwKG1hdGNoLmRlZiwgb3B0cy5jYXNpbmcgPyBcImlcIiA6IFwiXCIpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAoZ3JvdXBUb2tlbiA9IG5ldyBNYXNrVG9rZW4oITApKS5tYXRjaGVzLnB1c2gobWF0Y2gpLCBtYXRjaCA9IGdyb3VwVG9rZW4pLCBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKG1hdGNoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKHF1YW50aWZpZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIG9wdHMuYWx0ZXJuYXRvcm1hcmtlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViVG9rZW4gPSAoY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXSkubWF0Y2hlc1tjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoID0gY3VycmVudE9wZW5pbmdUb2tlbi5vcGVuR3JvdXAgJiYgKHN1YlRva2VuLm1hdGNoZXMgPT09IHVuZGVmaW5lZCB8fCAhMSA9PT0gc3ViVG9rZW4uaXNHcm91cCAmJiAhMSA9PT0gc3ViVG9rZW4uaXNBbHRlcm5hdG9yKSA/IG9wZW5lbmluZ3MucG9wKCkgOiBjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgbGFzdE1hdGNoID0gY3VycmVudFRva2VuLm1hdGNoZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hdGNoLmlzQWx0ZXJuYXRvcikgb3BlbmVuaW5ncy5wdXNoKGxhc3RNYXRjaCk7IGVsc2UgaWYgKGxhc3RNYXRjaC5hbHRlcm5hdG9yR3JvdXAgPyAoYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoLmFsdGVybmF0b3JHcm91cCA9ICExKSA6IGFsdGVybmF0b3IgPSBuZXcgTWFza1Rva2VuKCExLCAhMSwgITEsICEwKSwgYWx0ZXJuYXRvci5tYXRjaGVzLnB1c2gobGFzdE1hdGNoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2goYWx0ZXJuYXRvciksIGxhc3RNYXRjaC5vcGVuR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2gub3Blbkdyb3VwID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdGVybmF0b3JHcm91cCA9IG5ldyBNYXNrVG9rZW4oITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3JHcm91cC5hbHRlcm5hdG9yR3JvdXAgPSAhMCwgb3BlbmVuaW5ncy5wdXNoKGFsdGVybmF0b3JHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoO29wZW5lbmluZ3MubGVuZ3RoID4gMDsgKSBvcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzLnBvcCgpLCBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKG9wZW5pbmdUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCA+IDAgJiYgKHZlcmlmeUdyb3VwTWFya2VyKGN1cnJlbnRUb2tlbiksIG1hc2tUb2tlbnMucHVzaChjdXJyZW50VG9rZW4pKSwgXG4gICAgICAgICAgICAgICAgKG9wdHMubnVtZXJpY0lucHV0IHx8IG9wdHMuaXNSVEwpICYmIHJldmVyc2VUb2tlbnMobWFza1Rva2Vuc1swXSksIG1hc2tUb2tlbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIElucHV0bWFzay5leHRlbmREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICQuZXh0ZW5kKCEwLCBJbnB1dG1hc2sucHJvdG90eXBlLmRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgICAgfSwgSW5wdXRtYXNrLmV4dGVuZERlZmluaXRpb25zID0gZnVuY3Rpb24oZGVmaW5pdGlvbikge1xuICAgICAgICAgICAgJC5leHRlbmQoITAsIElucHV0bWFzay5wcm90b3R5cGUuZGVmaW5pdGlvbnMsIGRlZmluaXRpb24pO1xuICAgICAgICB9LCBJbnB1dG1hc2suZXh0ZW5kQWxpYXNlcyA9IGZ1bmN0aW9uKGFsaWFzKSB7XG4gICAgICAgICAgICAkLmV4dGVuZCghMCwgSW5wdXRtYXNrLnByb3RvdHlwZS5hbGlhc2VzLCBhbGlhcyk7XG4gICAgICAgIH0sIElucHV0bWFzay5mb3JtYXQgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucywgbWV0YWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBJbnB1dG1hc2sob3B0aW9ucykuZm9ybWF0KHZhbHVlLCBtZXRhZGF0YSk7XG4gICAgICAgIH0sIElucHV0bWFzay51bm1hc2sgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIElucHV0bWFzayhvcHRpb25zKS51bm1hc2tlZHZhbHVlKHZhbHVlKTtcbiAgICAgICAgfSwgSW5wdXRtYXNrLmlzVmFsaWQgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIElucHV0bWFzayhvcHRpb25zKS5pc1ZhbGlkKHZhbHVlKTtcbiAgICAgICAgfSwgSW5wdXRtYXNrLnJlbW92ZSA9IGZ1bmN0aW9uKGVsZW1zKSB7XG4gICAgICAgICAgICAkLmVhY2goZWxlbXMsIGZ1bmN0aW9uKG5keCwgZWwpIHtcbiAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sgJiYgZWwuaW5wdXRtYXNrLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIElucHV0bWFzay5lc2NhcGVSZWdleCA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICAgICAgdmFyIHNwZWNpYWxzID0gWyBcIi9cIiwgXCIuXCIsIFwiKlwiLCBcIitcIiwgXCI/XCIsIFwifFwiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBcIlxcXFxcIiwgXCIkXCIsIFwiXlwiIF07XG4gICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChcIihcXFxcXCIgKyBzcGVjaWFscy5qb2luKFwifFxcXFxcIikgKyBcIilcIiwgXCJnaW1cIiksIFwiXFxcXCQxXCIpO1xuICAgICAgICB9LCBJbnB1dG1hc2sua2V5Q29kZSA9IHtcbiAgICAgICAgICAgIEFMVDogMTgsXG4gICAgICAgICAgICBCQUNLU1BBQ0U6IDgsXG4gICAgICAgICAgICBCQUNLU1BBQ0VfU0FGQVJJOiAxMjcsXG4gICAgICAgICAgICBDQVBTX0xPQ0s6IDIwLFxuICAgICAgICAgICAgQ09NTUE6IDE4OCxcbiAgICAgICAgICAgIENPTU1BTkQ6IDkxLFxuICAgICAgICAgICAgQ09NTUFORF9MRUZUOiA5MSxcbiAgICAgICAgICAgIENPTU1BTkRfUklHSFQ6IDkzLFxuICAgICAgICAgICAgQ09OVFJPTDogMTcsXG4gICAgICAgICAgICBERUxFVEU6IDQ2LFxuICAgICAgICAgICAgRE9XTjogNDAsXG4gICAgICAgICAgICBFTkQ6IDM1LFxuICAgICAgICAgICAgRU5URVI6IDEzLFxuICAgICAgICAgICAgRVNDQVBFOiAyNyxcbiAgICAgICAgICAgIEhPTUU6IDM2LFxuICAgICAgICAgICAgSU5TRVJUOiA0NSxcbiAgICAgICAgICAgIExFRlQ6IDM3LFxuICAgICAgICAgICAgTUVOVTogOTMsXG4gICAgICAgICAgICBOVU1QQURfQUREOiAxMDcsXG4gICAgICAgICAgICBOVU1QQURfREVDSU1BTDogMTEwLFxuICAgICAgICAgICAgTlVNUEFEX0RJVklERTogMTExLFxuICAgICAgICAgICAgTlVNUEFEX0VOVEVSOiAxMDgsXG4gICAgICAgICAgICBOVU1QQURfTVVMVElQTFk6IDEwNixcbiAgICAgICAgICAgIE5VTVBBRF9TVUJUUkFDVDogMTA5LFxuICAgICAgICAgICAgUEFHRV9ET1dOOiAzNCxcbiAgICAgICAgICAgIFBBR0VfVVA6IDMzLFxuICAgICAgICAgICAgUEVSSU9EOiAxOTAsXG4gICAgICAgICAgICBSSUdIVDogMzksXG4gICAgICAgICAgICBTSElGVDogMTYsXG4gICAgICAgICAgICBTUEFDRTogMzIsXG4gICAgICAgICAgICBUQUI6IDksXG4gICAgICAgICAgICBVUDogMzgsXG4gICAgICAgICAgICBXSU5ET1dTOiA5MSxcbiAgICAgICAgICAgIFg6IDg4XG4gICAgICAgIH0sIElucHV0bWFzaztcbiAgICB9KTtcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0galF1ZXJ5O1xufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IG9ialxuICAgICAgICB9O1xuICAgIH1cbiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKSwgX193ZWJwYWNrX3JlcXVpcmVfXygxMyksIFxuICAgIF9fd2VicGFja19yZXF1aXJlX18oMTQpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcbiAgICB2YXIgX2lucHV0bWFzazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMSkpLCBfaW5wdXRtYXNrNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygwKSksIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcbiAgICBfaW5wdXRtYXNrNC5kZWZhdWx0ID09PSBfanF1ZXJ5Mi5kZWZhdWx0ICYmIF9fd2VicGFja19yZXF1aXJlX18oMTYpLCB3aW5kb3cuSW5wdXRtYXNrID0gX2lucHV0bWFzazIuZGVmYXVsdDtcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgIHZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcbiAgICBcInN0cmluZ1wiID09IHR5cGVvZiBjb250ZW50ICYmIChjb250ZW50ID0gWyBbIG1vZHVsZS5pLCBjb250ZW50LCBcIlwiIF0gXSk7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIGhtcjogITBcbiAgICB9O1xuICAgIG9wdGlvbnMudHJhbnNmb3JtID0gdm9pZCAwO1xuICAgIF9fd2VicGFja19yZXF1aXJlX18oNykoY29udGVudCwgb3B0aW9ucyk7XG4gICAgY29udGVudC5sb2NhbHMgJiYgKG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMpO1xufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgKG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KSh2b2lkIDApKS5wdXNoKFsgbW9kdWxlLmksIFwic3Bhbi5pbS1jYXJldCB7XFxyXFxuICAgIC13ZWJraXQtYW5pbWF0aW9uOiAxcyBibGluayBzdGVwLWVuZCBpbmZpbml0ZTtcXHJcXG4gICAgYW5pbWF0aW9uOiAxcyBibGluayBzdGVwLWVuZCBpbmZpbml0ZTtcXHJcXG59XFxyXFxuXFxyXFxuQGtleWZyYW1lcyBibGluayB7XFxyXFxuICAgIGZyb20sIHRvIHtcXHJcXG4gICAgICAgIGJvcmRlci1yaWdodC1jb2xvcjogYmxhY2s7XFxyXFxuICAgIH1cXHJcXG4gICAgNTAlIHtcXHJcXG4gICAgICAgIGJvcmRlci1yaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuQC13ZWJraXQta2V5ZnJhbWVzIGJsaW5rIHtcXHJcXG4gICAgZnJvbSwgdG8ge1xcclxcbiAgICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiBibGFjaztcXHJcXG4gICAgfVxcclxcbiAgICA1MCUge1xcclxcbiAgICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG5zcGFuLmltLXN0YXRpYyB7XFxyXFxuICAgIGNvbG9yOiBncmV5O1xcclxcbn1cXHJcXG5cXHJcXG5kaXYuaW0tY29sb3JtYXNrIHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICBib3JkZXItc3R5bGU6IGluc2V0O1xcclxcbiAgICBib3JkZXItd2lkdGg6IDJweDtcXHJcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XFxyXFxuICAgIC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xcclxcbiAgICBhcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XFxyXFxufVxcclxcblxcclxcbmRpdi5pbS1jb2xvcm1hc2sgPiBpbnB1dCB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gICAgY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGNhcmV0O1xcclxcbiAgICAtbW96LWFwcGVhcmFuY2U6IGNhcmV0O1xcclxcbiAgICBhcHBlYXJhbmNlOiBjYXJldDtcXHJcXG4gICAgYm9yZGVyLXN0eWxlOiBub25lO1xcclxcbiAgICBsZWZ0OiAwOyAvKmNhbGN1bGF0ZWQqL1xcclxcbn1cXHJcXG5cXHJcXG5kaXYuaW0tY29sb3JtYXNrID4gaW5wdXQ6Zm9jdXMge1xcclxcbiAgICBvdXRsaW5lOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5kaXYuaW0tY29sb3JtYXNrID4gaW5wdXQ6Oi1tb3otc2VsZWN0aW9ue1xcclxcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5kaXYuaW0tY29sb3JtYXNrID4gaW5wdXQ6OnNlbGVjdGlvbntcXHJcXG4gICAgYmFja2dyb3VuZDogbm9uZTtcXHJcXG59XFxyXFxuZGl2LmltLWNvbG9ybWFzayA+IGlucHV0OjotbW96LXNlbGVjdGlvbntcXHJcXG4gICAgYmFja2dyb3VuZDogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuZGl2LmltLWNvbG9ybWFzayA+IGRpdiB7XFxyXFxuICAgIGNvbG9yOiBibGFjaztcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICB3aWR0aDogMTAwcHg7IC8qY2FsY3VsYXRlZCovXFxyXFxufVwiLCBcIlwiIF0pO1xufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG4gICAgZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8IFwiXCIsIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICAgICAgICBpZiAoIWNzc01hcHBpbmcpIHJldHVybiBjb250ZW50O1xuICAgICAgICBpZiAodXNlU291cmNlTWFwICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYnRvYSkge1xuICAgICAgICAgICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyksIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyBcIiAqL1wiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gWyBjb250ZW50IF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbIHNvdXJjZU1hcHBpbmcgXSkuam9pbihcIlxcblwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gWyBjb250ZW50IF0uam9pbihcIlxcblwiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm4gXCIvKiMgXCIgKyAoXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkpICsgXCIgKi9cIjtcbiAgICB9XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcbiAgICAgICAgdmFyIGxpc3QgPSBbXTtcbiAgICAgICAgcmV0dXJuIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1bMl0gPyBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIiA6IGNvbnRlbnQ7XG4gICAgICAgICAgICB9KS5qb2luKFwiXCIpO1xuICAgICAgICB9LCBsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgICBcInN0cmluZ1wiID09IHR5cGVvZiBtb2R1bGVzICYmIChtb2R1bGVzID0gWyBbIG51bGwsIG1vZHVsZXMsIFwiXCIgXSBdKTtcbiAgICAgICAgICAgIGZvciAodmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fSwgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcbiAgICAgICAgICAgICAgICBcIm51bWJlclwiID09IHR5cGVvZiBpZCAmJiAoYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSAhMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tpXTtcbiAgICAgICAgICAgICAgICBcIm51bWJlclwiID09IHR5cGVvZiBpdGVtWzBdICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0gfHwgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0gPyBpdGVtWzJdID0gbWVkaWFRdWVyeSA6IG1lZGlhUXVlcnkgJiYgKGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIiksIFxuICAgICAgICAgICAgICAgIGxpc3QucHVzaChpdGVtKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGxpc3Q7XG4gICAgfTtcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgIGZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV0sIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG4gICAgICAgICAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgICAgICAgICAgICBkb21TdHlsZS5yZWZzKys7XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcbiAgICAgICAgICAgICAgICBmb3IgKDtqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHBhcnRzID0gW10sIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykgcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICByZWZzOiAxLFxuICAgICAgICAgICAgICAgICAgICBwYXJ0czogcGFydHNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKSB7XG4gICAgICAgIGZvciAodmFyIHN0eWxlcyA9IFtdLCBuZXdTdHlsZXMgPSB7fSwgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGxpc3RbaV0sIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF0sIHBhcnQgPSB7XG4gICAgICAgICAgICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgICAgICAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgICAgICAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5ld1N0eWxlc1tpZF0gPyBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCkgOiBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge1xuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICBwYXJ0czogWyBwYXJ0IF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pO1xuICAgICAgICBpZiAoIXRhcmdldCkgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgICAgIHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKFwidG9wXCIgPT09IG9wdGlvbnMuaW5zZXJ0QXQpIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID8gbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcgPyB0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykgOiB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpIDogdGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpLCBcbiAgICAgICAgc3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTsgZWxzZSBpZiAoXCJib3R0b21cIiA9PT0gb3B0aW9ucy5pbnNlcnRBdCkgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTsgZWxzZSB7XG4gICAgICAgICAgICBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCB8fCAhb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuICAgICAgICAgICAgdmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcbiAgICAgICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgICAgICAgaWYgKG51bGwgPT09IHN0eWxlLnBhcmVudE5vZGUpIHJldHVybiAhMTtcbiAgICAgICAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgICAgIHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuICAgICAgICBpZHggPj0gMCAmJiBzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICAgICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCIsIGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKSwgaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKSwgXG4gICAgICAgIHN0eWxlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKSB7XG4gICAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCIsIG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCIsIGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpLCBcbiAgICAgICAgaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspLCBsaW5rO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRBdHRycyhlbCwgYXR0cnMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICAgICAgICB2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG4gICAgICAgIGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG4gICAgICAgICAgICBpZiAoIShyZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKSkpIHJldHVybiBmdW5jdGlvbigpIHt9O1xuICAgICAgICAgICAgb2JqLmNzcyA9IHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICAgICAgICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgICAgICAgICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSksIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgITEpLCBcbiAgICAgICAgICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgITApO1xuICAgICAgICB9IGVsc2Ugb2JqLnNvdXJjZU1hcCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFVSTCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgQmxvYiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGJ0b2EgPyAoc3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKSwgXG4gICAgICAgIHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyksIHJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSwgc3R5bGUuaHJlZiAmJiBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuICAgICAgICB9KSA6IChzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSwgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKSwgXG4gICAgICAgIHJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1cGRhdGUob2JqKSwgZnVuY3Rpb24obmV3T2JqKSB7XG4gICAgICAgICAgICBpZiAobmV3T2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgICAgICAgICAgfSBlbHNlIHJlbW92ZSgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgICAgICAgdmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpLCBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcbiAgICAgICAgICAgIGNoaWxkTm9kZXNbaW5kZXhdICYmIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKSwgY2hpbGROb2Rlcy5sZW5ndGggPyBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pIDogc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb2JqKSB7XG4gICAgICAgIHZhciBjc3MgPSBvYmouY3NzLCBtZWRpYSA9IG9iai5tZWRpYTtcbiAgICAgICAgaWYgKG1lZGlhICYmIHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKSwgc3R5bGUuc3R5bGVTaGVldCkgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzOyBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoO3N0eWxlLmZpcnN0Q2hpbGQ7ICkgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVMaW5rKGxpbmssIG9wdGlvbnMsIG9iaikge1xuICAgICAgICB2YXIgY3NzID0gb2JqLmNzcywgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcCwgYXV0b0ZpeFVybHMgPSB2b2lkIDAgPT09IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzICYmIHNvdXJjZU1hcDtcbiAgICAgICAgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSAmJiAoY3NzID0gZml4VXJscyhjc3MpKSwgc291cmNlTWFwICYmIChjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCIpO1xuICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFsgY3NzIF0sIHtcbiAgICAgICAgICAgIHR5cGU6IFwidGV4dC9jc3NcIlxuICAgICAgICB9KSwgb2xkU3JjID0gbGluay5ocmVmO1xuICAgICAgICBsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpLCBvbGRTcmMgJiYgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xuICAgIH1cbiAgICB2YXIgc3R5bGVzSW5Eb20gPSB7fSwgaXNPbGRJRSA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIHZhciBtZW1vO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSBtZW1vICYmIChtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKSksIG1lbW87XG4gICAgICAgIH07XG4gICAgfShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xuICAgIH0pLCBnZXRFbGVtZW50ID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgdmFyIG1lbW8gPSB7fTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBpZiAodm9pZCAwID09PSBtZW1vW3NlbGVjdG9yXSkge1xuICAgICAgICAgICAgICAgIHZhciBzdHlsZVRhcmdldCA9IGZuLmNhbGwodGhpcywgc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWVtb1tzZWxlY3Rvcl0gPSBzdHlsZVRhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZW1vW3NlbGVjdG9yXTtcbiAgICAgICAgfTtcbiAgICB9KGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICAgIH0pLCBzaW5nbGV0b24gPSBudWxsLCBzaW5nbGV0b25Db3VudGVyID0gMCwgc3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdLCBmaXhVcmxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIERFQlVHICYmIERFQlVHICYmIFwib2JqZWN0XCIgIT0gdHlwZW9mIGRvY3VtZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG4gICAgICAgIChvcHRpb25zID0gb3B0aW9ucyB8fCB7fSkuYXR0cnMgPSBcIm9iamVjdFwiID09IHR5cGVvZiBvcHRpb25zLmF0dHJzID8gb3B0aW9ucy5hdHRycyA6IHt9LCBcbiAgICAgICAgb3B0aW9ucy5zaW5nbGV0b24gfHwgKG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpKSwgb3B0aW9ucy5pbnNlcnRJbnRvIHx8IChvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIiksIFxuICAgICAgICBvcHRpb25zLmluc2VydEF0IHx8IChvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIik7XG4gICAgICAgIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpLCBmdW5jdGlvbihuZXdMaXN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBtYXlSZW1vdmUgPSBbXSwgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXTtcbiAgICAgICAgICAgICAgICAoZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXSkucmVmcy0tLCBtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdMaXN0ICYmIGFkZFN0eWxlc1RvRG9tKGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBkb21TdHlsZS5yZWZzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudCwgdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpO1xuICAgICAgICB9O1xuICAgIH0oKTtcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY3NzKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyAmJiB3aW5kb3cubG9jYXRpb247XG4gICAgICAgIGlmICghbG9jYXRpb24pIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICAgICAgICBpZiAoIWNzcyB8fCBcInN0cmluZ1wiICE9IHR5cGVvZiBjc3MpIHJldHVybiBjc3M7XG4gICAgICAgIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0LCBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuICAgICAgICByZXR1cm4gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcbiAgICAgICAgICAgIHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsLnRyaW0oKS5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJDE7XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQxO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC8pL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSByZXR1cm4gZnVsbE1hdGNoO1xuICAgICAgICAgICAgdmFyIG5ld1VybDtcbiAgICAgICAgICAgIHJldHVybiBuZXdVcmwgPSAwID09PSB1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID8gdW5xdW90ZWRPcmlnVXJsIDogMCA9PT0gdW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID8gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybCA6IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpLCBcbiAgICAgICAgICAgIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuICAgICAgICB9KTtcbiAgICB9O1xufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187XG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yO1xuICAgICFmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgICAgIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbIF9fd2VicGFja19yZXF1aXJlX18oMCksIF9fd2VicGFja19yZXF1aXJlX18oMSkgXSwgXG4gICAgICAgIHZvaWQgMCAhPT0gKF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiAoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gZmFjdG9yeSkgPyBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKTtcbiAgICB9KGZ1bmN0aW9uKCQsIElucHV0bWFzaykge1xuICAgICAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICAgICAgICAgIHJldHVybiBpc05hTih5ZWFyKSB8fCAyOSA9PT0gbmV3IERhdGUoeWVhciwgMiwgMCkuZ2V0RGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBJbnB1dG1hc2suZXh0ZW5kQWxpYXNlcyh7XG4gICAgICAgICAgICBcImRkL21tL3l5eXlcIjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiMS8yL3lcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJkZC9tbS95eXl5XCIsXG4gICAgICAgICAgICAgICAgcmVnZXg6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsMXByZTogbmV3IFJlZ0V4cChcIlswLTNdXCIpLFxuICAgICAgICAgICAgICAgICAgICB2YWwxOiBuZXcgUmVnRXhwKFwiMFsxLTldfFsxMl1bMC05XXwzWzAxXVwiKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsMnByZTogZnVuY3Rpb24oc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxLTldfFsxMl1bMC05XXwzWzAxXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIlswMV0pXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB2YWwyOiBmdW5jdGlvbihzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkU2VwYXJhdG9yID0gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgc2VwYXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKCgwWzEtOV18WzEyXVswLTldKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiKDBbMS05XXwxWzAxMl0pKXwoMzBcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIigwWzEzLTldfDFbMDEyXSkpfCgzMVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiKDBbMTM1NzhdfDFbMDJdKSlcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxlYXBkYXk6IFwiMjkvMDIvXCIsXG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi9cIixcbiAgICAgICAgICAgICAgICB5ZWFycmFuZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgbWlueWVhcjogMTkwMCxcbiAgICAgICAgICAgICAgICAgICAgbWF4eWVhcjogMjA5OVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaXNJblllYXJSYW5nZTogZnVuY3Rpb24oY2hycywgbWlueWVhciwgbWF4eWVhcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oY2hycykpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVudGVyZWR5ZWFyID0gcGFyc2VJbnQoY2hycy5jb25jYXQobWlueWVhci50b1N0cmluZygpLnNsaWNlKGNocnMubGVuZ3RoKSkpLCBlbnRlcmVkeWVhcjIgPSBwYXJzZUludChjaHJzLmNvbmNhdChtYXh5ZWFyLnRvU3RyaW5nKCkuc2xpY2UoY2hycy5sZW5ndGgpKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXNOYU4oZW50ZXJlZHllYXIpICYmIChtaW55ZWFyIDw9IGVudGVyZWR5ZWFyICYmIGVudGVyZWR5ZWFyIDw9IG1heHllYXIpIHx8ICFpc05hTihlbnRlcmVkeWVhcjIpICYmIChtaW55ZWFyIDw9IGVudGVyZWR5ZWFyMiAmJiBlbnRlcmVkeWVhcjIgPD0gbWF4eWVhcik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZXRlcm1pbmViYXNleWVhcjogZnVuY3Rpb24obWlueWVhciwgbWF4eWVhciwgaGludCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudHllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtaW55ZWFyID4gY3VycmVudHllYXIpIHJldHVybiBtaW55ZWFyO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF4eWVhciA8IGN1cnJlbnR5ZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtYXhZZWFyUHJlZml4ID0gbWF4eWVhci50b1N0cmluZygpLnNsaWNlKDAsIDIpLCBtYXhZZWFyUG9zdGZpeCA9IG1heHllYXIudG9TdHJpbmcoKS5zbGljZSgyLCA0KTsgbWF4eWVhciA8IG1heFllYXJQcmVmaXggKyBoaW50OyApIG1heFllYXJQcmVmaXgtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXh4WWVhciA9IG1heFllYXJQcmVmaXggKyBtYXhZZWFyUG9zdGZpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtaW55ZWFyID4gbWF4eFllYXIgPyBtaW55ZWFyIDogbWF4eFllYXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1pbnllYXIgPD0gY3VycmVudHllYXIgJiYgY3VycmVudHllYXIgPD0gbWF4eWVhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgY3VycmVudFllYXJQcmVmaXggPSBjdXJyZW50eWVhci50b1N0cmluZygpLnNsaWNlKDAsIDIpOyBtYXh5ZWFyIDwgY3VycmVudFllYXJQcmVmaXggKyBoaW50OyApIGN1cnJlbnRZZWFyUHJlZml4LS07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFllYXJBbmRIaW50ID0gY3VycmVudFllYXJQcmVmaXggKyBoaW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRZZWFyQW5kSGludCA8IG1pbnllYXIgPyBtaW55ZWFyIDogY3VycmVudFllYXJBbmRIaW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50eWVhcjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24oZSwgYnVmZmVyLCBjYXJldFBvcywgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT09IElucHV0bWFzay5rZXlDb2RlLlJJR0hUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbCh0b2RheS5nZXREYXRlKCkudG9TdHJpbmcoKSArICh0b2RheS5nZXRNb250aCgpICsgMSkudG9TdHJpbmcoKSArIHRvZGF5LmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0RnJvbnRWYWx1ZTogZnVuY3Rpb24obWFzaywgYnVmZmVyLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHN0YXJ0ID0gMCwgbGVuZ3RoID0gMCwgaSA9IDA7IGkgPCBtYXNrLmxlbmd0aCAmJiBcIjJcIiAhPT0gbWFzay5jaGFyQXQoaSk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmluaXRpb24gPSBvcHRzLmRlZmluaXRpb25zW21hc2suY2hhckF0KGkpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb24gPyAoc3RhcnQgKz0gbGVuZ3RoLCBsZW5ndGggPSBkZWZpbml0aW9uLmNhcmRpbmFsaXR5KSA6IGxlbmd0aCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBidWZmZXIuam9pbihcIlwiKS5zdWJzdHIoc3RhcnQsIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwb3N0VmFsaWRhdGlvbjogZnVuY3Rpb24oYnVmZmVyLCBjdXJyZW50UmVzdWx0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXlNb250aFZhbHVlLCB5ZWFyLCBidWZmZXJTdHIgPSBidWZmZXIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgPT09IG9wdHMubWFzay5pbmRleE9mKFwieVwiKSA/ICh5ZWFyID0gYnVmZmVyU3RyLnN1YnN0cigwLCA0KSwgZGF5TW9udGhWYWx1ZSA9IGJ1ZmZlclN0ci5zdWJzdHJpbmcoNCwgMTApKSA6ICh5ZWFyID0gYnVmZmVyU3RyLnN1YnN0cmluZyg2LCAxMCksIFxuICAgICAgICAgICAgICAgICAgICBkYXlNb250aFZhbHVlID0gYnVmZmVyU3RyLnN1YnN0cigwLCA2KSksIGN1cnJlbnRSZXN1bHQgJiYgKGRheU1vbnRoVmFsdWUgIT09IG9wdHMubGVhcGRheSB8fCBpc0xlYXBZZWFyKHllYXIpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiMVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLnJlZ2V4LnZhbDEudGVzdChjaHJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaWN0IHx8IGlzVmFsaWQgfHwgY2hycy5jaGFyQXQoMSkgIT09IG9wdHMuc2VwYXJhdG9yICYmIC0xID09PSBcIi0uL1wiLmluZGV4T2YoY2hycy5jaGFyQXQoMSkpIHx8ICEoaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMS50ZXN0KFwiMFwiICsgY2hycy5jaGFyQXQoMCkpKSA/IGlzVmFsaWQgOiAobWFza3NldC5idWZmZXJbcG9zIC0gMV0gPSBcIjBcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHBvcyAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogY2hycy5jaGFyQXQoMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZhbGlkYXRvcjogWyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGNocnMgPSBjaHJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05hTihtYXNrc2V0LmJ1ZmZlcltwb3MgKyAxXSkgfHwgKHBjaHJzICs9IG1hc2tzZXQuYnVmZmVyW3BvcyArIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSAxID09PSBwY2hycy5sZW5ndGggPyBvcHRzLnJlZ2V4LnZhbDFwcmUudGVzdChwY2hycykgOiBvcHRzLnJlZ2V4LnZhbDEudGVzdChwY2hycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSAmJiAob3B0cy5yZWdleC52YWwyKG9wdHMuc2VwYXJhdG9yKS50ZXN0KGNocnMgKyBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10uaW5wdXQpIHx8IChtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10uaW5wdXQgPSBcIjBcIiA9PT0gY2hycyA/IFwiMVwiIDogXCIwXCIpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFzdHJpY3QgJiYgIWlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwxLnRlc3QoY2hycyArIFwiMFwiKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3Bvc10gPSBjaHJzLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyWysrcG9zXSA9IFwiMFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogXCIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMS50ZXN0KFwiMFwiICsgY2hycykpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltwb3NdID0gXCIwXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zKyssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9IF1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCIyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbnRWYWx1ZSA9IG9wdHMuZ2V0RnJvbnRWYWx1ZShtYXNrc2V0Lm1hc2ssIG1hc2tzZXQuYnVmZmVyLCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtMSAhPT0gZnJvbnRWYWx1ZS5pbmRleE9mKG9wdHMucGxhY2Vob2xkZXJbMF0pICYmIChmcm9udFZhbHVlID0gXCIwMVwiICsgb3B0cy5zZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwyKG9wdHMuc2VwYXJhdG9yKS50ZXN0KGZyb250VmFsdWUgKyBjaHJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaWN0IHx8IGlzVmFsaWQgfHwgY2hycy5jaGFyQXQoMSkgIT09IG9wdHMuc2VwYXJhdG9yICYmIC0xID09PSBcIi0uL1wiLmluZGV4T2YoY2hycy5jaGFyQXQoMSkpIHx8ICEoaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMihvcHRzLnNlcGFyYXRvcikudGVzdChmcm9udFZhbHVlICsgXCIwXCIgKyBjaHJzLmNoYXJBdCgwKSkpID8gaXNWYWxpZCA6IChtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSA9IFwiMFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBjaHJzLmNoYXJBdCgwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBbIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTmFOKG1hc2tzZXQuYnVmZmVyW3BvcyArIDFdKSB8fCAoY2hycyArPSBtYXNrc2V0LmJ1ZmZlcltwb3MgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcm9udFZhbHVlID0gb3B0cy5nZXRGcm9udFZhbHVlKG1hc2tzZXQubWFzaywgbWFza3NldC5idWZmZXIsIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtMSAhPT0gZnJvbnRWYWx1ZS5pbmRleE9mKG9wdHMucGxhY2Vob2xkZXJbMF0pICYmIChmcm9udFZhbHVlID0gXCIwMVwiICsgb3B0cy5zZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IDEgPT09IGNocnMubGVuZ3RoID8gb3B0cy5yZWdleC52YWwycHJlKG9wdHMuc2VwYXJhdG9yKS50ZXN0KGZyb250VmFsdWUgKyBjaHJzKSA6IG9wdHMucmVnZXgudmFsMihvcHRzLnNlcGFyYXRvcikudGVzdChmcm9udFZhbHVlICsgY2hycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSAmJiAob3B0cy5yZWdleC52YWwyKG9wdHMuc2VwYXJhdG9yKS50ZXN0KGNocnMgKyBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10uaW5wdXQpIHx8IChtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10uaW5wdXQgPSBcIjBcIiA9PT0gY2hycyA/IFwiMVwiIDogXCIwXCIpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmljdCB8fCBpc1ZhbGlkIHx8ICEoaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMihvcHRzLnNlcGFyYXRvcikudGVzdChmcm9udFZhbHVlICsgXCIwXCIgKyBjaHJzKSkgPyBpc1ZhbGlkIDogKG1hc2tzZXQuYnVmZmVyW3Bvc10gPSBcIjBcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcysrLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9IF1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmlzSW5ZZWFyUmFuZ2UoY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2YWxpZGF0b3I6IFsge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLmlzSW5ZZWFyUmFuZ2UoY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICFpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeWVhclByZWZpeCA9IG9wdHMuZGV0ZXJtaW5lYmFzZXllYXIob3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhciwgY2hycyArIFwiMFwiKS50b1N0cmluZygpLnNsaWNlKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgPSBvcHRzLmlzSW5ZZWFyUmFuZ2UoeWVhclByZWZpeCArIGNocnMsIG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIpKSByZXR1cm4gbWFza3NldC5idWZmZXJbcG9zKytdID0geWVhclByZWZpeC5jaGFyQXQoMCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHllYXJQcmVmaXggPSBvcHRzLmRldGVybWluZWJhc2V5ZWFyKG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIsIGNocnMgKyBcIjBcIikudG9TdHJpbmcoKS5zbGljZSgwLCAyKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gb3B0cy5pc0luWWVhclJhbmdlKHllYXJQcmVmaXggKyBjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3BvcysrXSA9IHllYXJQcmVmaXguY2hhckF0KDApLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyW3BvcysrXSA9IHllYXJQcmVmaXguY2hhckF0KDEpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLmlzSW5ZZWFyUmFuZ2UoY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICFpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeWVhclByZWZpeCA9IG9wdHMuZGV0ZXJtaW5lYmFzZXllYXIob3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhciwgY2hycykudG9TdHJpbmcoKS5zbGljZSgwLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkID0gb3B0cy5pc0luWWVhclJhbmdlKGNocnNbMF0gKyB5ZWFyUHJlZml4WzFdICsgY2hyc1sxXSwgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcikpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltwb3MrK10gPSB5ZWFyUHJlZml4LmNoYXJBdCgxKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVhclByZWZpeCA9IG9wdHMuZGV0ZXJtaW5lYmFzZXllYXIob3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhciwgY2hycykudG9TdHJpbmcoKS5zbGljZSgwLCAyKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gb3B0cy5pc0luWWVhclJhbmdlKHllYXJQcmVmaXggKyBjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdID0geWVhclByZWZpeC5jaGFyQXQoMCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC5idWZmZXJbcG9zKytdID0geWVhclByZWZpeC5jaGFyQXQoMSksIG1hc2tzZXQuYnVmZmVyW3BvcysrXSA9IGNocnMuY2hhckF0KDApLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zIC0gMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmlzSW5ZZWFyUmFuZ2UoY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogM1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGluc2VydE1vZGU6ICExLFxuICAgICAgICAgICAgICAgIGF1dG9Vbm1hc2s6ICExXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJtbS9kZC95eXl5XCI6IHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJtbS9kZC95eXl5XCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwiZGQvbW0veXl5eVwiLFxuICAgICAgICAgICAgICAgIHJlZ2V4OiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbDJwcmU6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMTMtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAtM10pfCgwMlwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAtMl0pXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB2YWwyOiBmdW5jdGlvbihzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkU2VwYXJhdG9yID0gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgc2VwYXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKCgwWzEtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiKDBbMS05XXxbMTJdWzAtOV0pKXwoKDBbMTMtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiMzApfCgoMFsxMzU3OF18MVswMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIzMSlcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbDFwcmU6IG5ldyBSZWdFeHAoXCJbMDFdXCIpLFxuICAgICAgICAgICAgICAgICAgICB2YWwxOiBuZXcgUmVnRXhwKFwiMFsxLTldfDFbMDEyXVwiKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGVhcGRheTogXCIwMi8yOS9cIixcbiAgICAgICAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSBJbnB1dG1hc2sua2V5Q29kZS5SSUdIVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC52YWwoKHRvZGF5LmdldE1vbnRoKCkgKyAxKS50b1N0cmluZygpICsgdG9kYXkuZ2V0RGF0ZSgpLnRvU3RyaW5nKCkgKyB0b2RheS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ5eXl5L21tL2RkXCI6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcInkvMS8yXCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwieXl5eS9tbS9kZFwiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcIm1tL2RkL3l5eXlcIixcbiAgICAgICAgICAgICAgICBsZWFwZGF5OiBcIi8wMi8yOVwiLFxuICAgICAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24oZSwgYnVmZmVyLCBjYXJldFBvcywgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT09IElucHV0bWFzay5rZXlDb2RlLlJJR0hUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbCh0b2RheS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkgKyAodG9kYXkuZ2V0TW9udGgoKSArIDEpLnRvU3RyaW5nKCkgKyB0b2RheS5nZXREYXRlKCkudG9TdHJpbmcoKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImRkLm1tLnl5eXlcIjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiMS4yLnlcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJkZC5tbS55eXl5XCIsXG4gICAgICAgICAgICAgICAgbGVhcGRheTogXCIyOS4wMi5cIixcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3I6IFwiLlwiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcImRkL21tL3l5eXlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZGQtbW0teXl5eVwiOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCIxLTIteVwiLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImRkLW1tLXl5eXlcIixcbiAgICAgICAgICAgICAgICBsZWFwZGF5OiBcIjI5LTAyLVwiLFxuICAgICAgICAgICAgICAgIHNlcGFyYXRvcjogXCItXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwiZGQvbW0veXl5eVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJtbS5kZC55eXl5XCI6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcIjEuMi55XCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwibW0uZGQueXl5eVwiLFxuICAgICAgICAgICAgICAgIGxlYXBkYXk6IFwiMDIuMjkuXCIsXG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi5cIixcbiAgICAgICAgICAgICAgICBhbGlhczogXCJtbS9kZC95eXl5XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIm1tLWRkLXl5eXlcIjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiMS0yLXlcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJtbS1kZC15eXl5XCIsXG4gICAgICAgICAgICAgICAgbGVhcGRheTogXCIwMi0yOS1cIixcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3I6IFwiLVwiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcIm1tL2RkL3l5eXlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwieXl5eS5tbS5kZFwiOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCJ5LjEuMlwiLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcInl5eXkubW0uZGRcIixcbiAgICAgICAgICAgICAgICBsZWFwZGF5OiBcIi4wMi4yOVwiLFxuICAgICAgICAgICAgICAgIHNlcGFyYXRvcjogXCIuXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwieXl5eS9tbS9kZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ5eXl5LW1tLWRkXCI6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcInktMS0yXCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwieXl5eS1tbS1kZFwiLFxuICAgICAgICAgICAgICAgIGxlYXBkYXk6IFwiLTAyLTI5XCIsXG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi1cIixcbiAgICAgICAgICAgICAgICBhbGlhczogXCJ5eXl5L21tL2RkXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRldGltZToge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiMS8yL3kgaDpzXCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiZGQvbW0veXl5eSBoaDptbVwiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcImRkL21tL3l5eXlcIixcbiAgICAgICAgICAgICAgICByZWdleDoge1xuICAgICAgICAgICAgICAgICAgICBocnNwcmU6IG5ldyBSZWdFeHAoXCJbMDEyXVwiKSxcbiAgICAgICAgICAgICAgICAgICAgaHJzMjQ6IG5ldyBSZWdFeHAoXCIyWzAtNF18MVszLTldXCIpLFxuICAgICAgICAgICAgICAgICAgICBocnM6IG5ldyBSZWdFeHAoXCJbMDFdWzAtOV18MlswLTRdXCIpLFxuICAgICAgICAgICAgICAgICAgICBhbXBtOiBuZXcgUmVnRXhwKFwiXlthfHB8QXxQXVttfE1dXCIpLFxuICAgICAgICAgICAgICAgICAgICBtc3ByZTogbmV3IFJlZ0V4cChcIlswLTVdXCIpLFxuICAgICAgICAgICAgICAgICAgICBtczogbmV3IFJlZ0V4cChcIlswLTVdWzAtOV1cIilcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRpbWVzZXBhcmF0b3I6IFwiOlwiLFxuICAgICAgICAgICAgICAgIGhvdXJGb3JtYXQ6IFwiMjRcIixcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBoOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiMjRcIiA9PT0gb3B0cy5ob3VyRm9ybWF0ICYmIDI0ID09PSBwYXJzZUludChjaHJzLCAxMCkpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSA9IFwiMFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlcltwb3NdID0gXCIwXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogXCIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gb3B0cy5yZWdleC5ocnMudGVzdChjaHJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhaXNWYWxpZCAmJiAoY2hycy5jaGFyQXQoMSkgPT09IG9wdHMudGltZXNlcGFyYXRvciB8fCAtMSAhPT0gXCItLjpcIi5pbmRleE9mKGNocnMuY2hhckF0KDEpKSkgJiYgKGlzVmFsaWQgPSBvcHRzLnJlZ2V4Lmhycy50ZXN0KFwiMFwiICsgY2hycy5jaGFyQXQoMCkpKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdID0gXCIwXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyW3Bvc10gPSBjaHJzLmNoYXJBdCgwKSwgcG9zKyssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IG9wdHMudGltZXNlcGFyYXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgJiYgXCIyNFwiICE9PSBvcHRzLmhvdXJGb3JtYXQgJiYgb3B0cy5yZWdleC5ocnMyNC50ZXN0KGNocnMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSBwYXJzZUludChjaHJzLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyNCA9PT0gdG1wID8gKG1hc2tzZXQuYnVmZmVyW3BvcyArIDVdID0gXCJhXCIsIG1hc2tzZXQuYnVmZmVyW3BvcyArIDZdID0gXCJtXCIpIDogKG1hc2tzZXQuYnVmZmVyW3BvcyArIDVdID0gXCJwXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlcltwb3MgKyA2XSA9IFwibVwiKSwgKHRtcCAtPSAxMikgPCAxMCA/IChtYXNrc2V0LmJ1ZmZlcltwb3NdID0gdG1wLnRvU3RyaW5nKCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSA9IFwiMFwiKSA6IChtYXNrc2V0LmJ1ZmZlcltwb3NdID0gdG1wLnRvU3RyaW5nKCkuY2hhckF0KDEpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC5idWZmZXJbcG9zIC0gMV0gPSB0bXAudG9TdHJpbmcoKS5jaGFyQXQoMCkpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcG9zICsgNlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IG1hc2tzZXQuYnVmZmVyW3Bvc11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2YWxpZGF0b3I6IFsge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLnJlZ2V4Lmhyc3ByZS50ZXN0KGNocnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaWN0IHx8IGlzVmFsaWQgfHwgIShpc1ZhbGlkID0gb3B0cy5yZWdleC5ocnMudGVzdChcIjBcIiArIGNocnMpKSA/IGlzVmFsaWQgOiAobWFza3NldC5idWZmZXJbcG9zXSA9IFwiMFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zKyssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtNV1bMC05XVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2YWxpZGF0b3I6IFsge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLnJlZ2V4Lm1zcHJlLnRlc3QoY2hycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpY3QgfHwgaXNWYWxpZCB8fCAhKGlzVmFsaWQgPSBvcHRzLnJlZ2V4Lm1zLnRlc3QoXCIwXCIgKyBjaHJzKSkgPyBpc1ZhbGlkIDogKG1hc2tzZXQuYnVmZmVyW3Bvc10gPSBcIjBcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcysrLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9IF1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnJlZ2V4LmFtcG0udGVzdChjaHJzICsgXCJtXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogXCJsb3dlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5zZXJ0TW9kZTogITEsXG4gICAgICAgICAgICAgICAgYXV0b1VubWFzazogITFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRldGltZTEyOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCIxLzIveSBoOnMgdFxcXFxtXCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiZGQvbW0veXl5eSBoaDptbSB4bVwiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICAgICAgaG91ckZvcm1hdDogXCIxMlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJtbS9kZC95eXl5IGhoOm1tIHhtXCI6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcIjEvMi95IGg6cyB0XFxcXG1cIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJtbS9kZC95eXl5IGhoOm1tIHhtXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwiZGF0ZXRpbWUxMlwiLFxuICAgICAgICAgICAgICAgIHJlZ2V4OiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbDJwcmU6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMTMtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAtM10pfCgwMlwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAtMl0pXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB2YWwyOiBmdW5jdGlvbihzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkU2VwYXJhdG9yID0gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgc2VwYXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKCgwWzEtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiKDBbMS05XXxbMTJdWzAtOV0pKXwoKDBbMTMtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiMzApfCgoMFsxMzU3OF18MVswMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIzMSlcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbDFwcmU6IG5ldyBSZWdFeHAoXCJbMDFdXCIpLFxuICAgICAgICAgICAgICAgICAgICB2YWwxOiBuZXcgUmVnRXhwKFwiMFsxLTldfDFbMDEyXVwiKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGVhcGRheTogXCIwMi8yOS9cIixcbiAgICAgICAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSBJbnB1dG1hc2sua2V5Q29kZS5SSUdIVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC52YWwoKHRvZGF5LmdldE1vbnRoKCkgKyAxKS50b1N0cmluZygpICsgdG9kYXkuZ2V0RGF0ZSgpLnRvU3RyaW5nKCkgKyB0b2RheS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJoaDptbSB0XCI6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcImg6cyB0XFxcXG1cIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJoaDptbSB4bVwiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICAgICAgaG91ckZvcm1hdDogXCIxMlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJoOnMgdFwiOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCJoOnMgdFxcXFxtXCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiaGg6bW0geG1cIixcbiAgICAgICAgICAgICAgICBhbGlhczogXCJkYXRldGltZVwiLFxuICAgICAgICAgICAgICAgIGhvdXJGb3JtYXQ6IFwiMTJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiaGg6bW06c3NcIjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiaDpzOnNcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJoaDptbTpzc1wiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICAgICAgYXV0b1VubWFzazogITFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImhoOm1tXCI6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcImg6c1wiLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImhoOm1tXCIsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICBhdXRvVW5tYXNrOiAhMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBhbGlhczogXCJkZC9tbS95eXl5XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIm1tL3l5eXlcIjoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiMS95XCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwibW0veXl5eVwiLFxuICAgICAgICAgICAgICAgIGxlYXBkYXk6IFwiZG9ub3R1c2VcIixcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3I6IFwiL1wiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcIm1tL2RkL3l5eXlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNoYW1zaToge1xuICAgICAgICAgICAgICAgIHJlZ2V4OiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbDJwcmU6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCJbMC0zXSlcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbDI6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIoMFsxLTldfFsxMl1bMC05XSkpfCgoMFsxLTldfDFbMDEyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIjMwKXwoKDBbMS02XSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIjMxKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsMXByZTogbmV3IFJlZ0V4cChcIlswMV1cIiksXG4gICAgICAgICAgICAgICAgICAgIHZhbDE6IG5ldyBSZWdFeHAoXCIwWzEtOV18MVswMTJdXCIpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5ZWFycmFuZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgbWlueWVhcjogMTMwMCxcbiAgICAgICAgICAgICAgICAgICAgbWF4eWVhcjogMTQ5OVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWFzazogXCJ5LzEvMlwiLFxuICAgICAgICAgICAgICAgIGxlYXBkYXk6IFwiLzEyLzMwXCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwieXl5eS9tbS9kZFwiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcIm1tL2RkL3l5eXlcIixcbiAgICAgICAgICAgICAgICBjbGVhckluY29tcGxldGU6ICEwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ5eXl5LW1tLWRkIGhoOm1tOnNzXCI6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcInktMS0yIGg6czpzXCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwieXl5eS1tbS1kZCBoaDptbTpzc1wiLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi1cIixcbiAgICAgICAgICAgICAgICBsZWFwZGF5OiBcIi0wMi0yOVwiLFxuICAgICAgICAgICAgICAgIHJlZ2V4OiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbDJwcmU6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMTMtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAtM10pfCgwMlwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAtMl0pXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB2YWwyOiBmdW5jdGlvbihzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkU2VwYXJhdG9yID0gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgc2VwYXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKCgwWzEtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiKDBbMS05XXxbMTJdWzAtOV0pKXwoKDBbMTMtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiMzApfCgoMFsxMzU3OF18MVswMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIzMSlcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbDFwcmU6IG5ldyBSZWdFeHAoXCJbMDFdXCIpLFxuICAgICAgICAgICAgICAgICAgICB2YWwxOiBuZXcgUmVnRXhwKFwiMFsxLTldfDFbMDEyXVwiKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbihlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgSW5wdXRtYXNrO1xuICAgIH0pO1xufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fO1xuICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcjtcbiAgICB2b2lkIDAgIT09IChfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH0uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fLCBleHBvcnRzLCBtb2R1bGUpKSAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyk7XG59LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187XG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yO1xuICAgIHZvaWQgMCAhPT0gKF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICB9LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXywgZXhwb3J0cywgbW9kdWxlKSkgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pO1xufSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187XG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yO1xuICAgICFmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgICAgIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbIF9fd2VicGFja19yZXF1aXJlX18oMCksIF9fd2VicGFja19yZXF1aXJlX18oMSkgXSwgXG4gICAgICAgIHZvaWQgMCAhPT0gKF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiAoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gZmFjdG9yeSkgPyBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKTtcbiAgICB9KGZ1bmN0aW9uKCQsIElucHV0bWFzaykge1xuICAgICAgICByZXR1cm4gSW5wdXRtYXNrLmV4dGVuZERlZmluaXRpb25zKHtcbiAgICAgICAgICAgIEE6IHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiW0EtWmEtetCQLdGP0IHRkcOALcO/wrVdXCIsXG4gICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgY2FzaW5nOiBcInVwcGVyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIiZcIjoge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05QS1aYS160JAt0Y/QgdGRw4Atw7/CtV1cIixcbiAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcbiAgICAgICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiI1wiOiB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLUZhLWZdXCIsXG4gICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgY2FzaW5nOiBcInVwcGVyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIElucHV0bWFzay5leHRlbmRBbGlhc2VzKHtcbiAgICAgICAgICAgIHVybDoge1xuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIGk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCIuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYXNrOiBcIihcXFxcaHR0cDovLyl8KFxcXFxodHRwXFxcXHM6Ly8pfChmdHA6Ly8pfChmdHBcXFxcczovLylpeyt9XCIsXG4gICAgICAgICAgICAgICAgaW5zZXJ0TW9kZTogITEsXG4gICAgICAgICAgICAgICAgYXV0b1VubWFzazogITEsXG4gICAgICAgICAgICAgICAgaW5wdXRtb2RlOiBcInVybFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXA6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBcImlbaVtpXV0uaVtpW2ldXS5pW2lbaV1dLmlbaVtpXV1cIixcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBpOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcyAtIDEgPiAtMSAmJiBcIi5cIiAhPT0gbWFza3NldC5idWZmZXJbcG9zIC0gMV0gPyAoY2hycyA9IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdICsgY2hycywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hycyA9IHBvcyAtIDIgPiAtMSAmJiBcIi5cIiAhPT0gbWFza3NldC5idWZmZXJbcG9zIC0gMl0gPyBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAyXSArIGNocnMgOiBcIjBcIiArIGNocnMpIDogY2hycyA9IFwiMDBcIiArIGNocnMsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoXCIyNVswLTVdfDJbMC00XVswLTldfFswMV1bMC05XVswLTldXCIpLnRlc3QoY2hycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25Vbk1hc2s6IGZ1bmN0aW9uKG1hc2tlZFZhbHVlLCB1bm1hc2tlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0bW9kZTogXCJudW1lcmljXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbWFpbDoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiKnsxLDY0fVsuKnsxLDY0fV1bLip7MSw2NH1dWy4qezEsNjN9XUAtezEsNjN9Li17MSw2M31bLi17MSw2M31dWy4tezEsNjN9XVwiLFxuICAgICAgICAgICAgICAgIGdyZWVkeTogITEsXG4gICAgICAgICAgICAgICAgb25CZWZvcmVQYXN0ZTogZnVuY3Rpb24ocGFzdGVkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChwYXN0ZWRWYWx1ZSA9IHBhc3RlZFZhbHVlLnRvTG93ZXJDYXNlKCkpLnJlcGxhY2UoXCJtYWlsdG86XCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgXCIqXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05QS1aYS16ISMkJSYnKisvPT9eX2B7fH1+LV1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBcImxvd2VyXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCItXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05QS1aYS16LV1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBcImxvd2VyXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25Vbk1hc2s6IGZ1bmN0aW9uKG1hc2tlZFZhbHVlLCB1bm1hc2tlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0bW9kZTogXCJlbWFpbFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFjOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCIjIzojIzojIzojIzojIzojI1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmluOiB7XG4gICAgICAgICAgICAgICAgbWFzazogXCJWezEzfTl7NH1cIixcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBWOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiW0EtSEotTlBSLVphLWhqLW5wci16XFxcXGRdXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogXCJ1cHBlclwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNsZWFySW5jb21wbGV0ZTogITAsXG4gICAgICAgICAgICAgICAgYXV0b1VubWFzazogITBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIElucHV0bWFzaztcbiAgICB9KTtcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fO1xuICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcjtcbiAgICAhZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgICAgICBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gWyBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpIF0sIFxuICAgICAgICB2b2lkIDAgIT09IChfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IGZhY3RvcnkpID8gX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyk7XG4gICAgfShmdW5jdGlvbigkLCBJbnB1dG1hc2ssIHVuZGVmaW5lZCkge1xuICAgICAgICBmdW5jdGlvbiBhdXRvRXNjYXBlKHR4dCwgb3B0cykge1xuICAgICAgICAgICAgZm9yICh2YXIgZXNjYXBlZFR4dCA9IFwiXCIsIGkgPSAwOyBpIDwgdHh0Lmxlbmd0aDsgaSsrKSBJbnB1dG1hc2sucHJvdG90eXBlLmRlZmluaXRpb25zW3R4dC5jaGFyQXQoaSldIHx8IG9wdHMuZGVmaW5pdGlvbnNbdHh0LmNoYXJBdChpKV0gfHwgb3B0cy5vcHRpb25hbG1hcmtlci5zdGFydCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLm9wdGlvbmFsbWFya2VyLmVuZCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLnF1YW50aWZpZXJtYXJrZXIuc3RhcnQgPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5xdWFudGlmaWVybWFya2VyLmVuZCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0ID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMuZ3JvdXBtYXJrZXIuZW5kID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMuYWx0ZXJuYXRvcm1hcmtlciA9PT0gdHh0LmNoYXJBdChpKSA/IGVzY2FwZWRUeHQgKz0gXCJcXFxcXCIgKyB0eHQuY2hhckF0KGkpIDogZXNjYXBlZFR4dCArPSB0eHQuY2hhckF0KGkpO1xuICAgICAgICAgICAgcmV0dXJuIGVzY2FwZWRUeHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIElucHV0bWFzay5leHRlbmRBbGlhc2VzKHtcbiAgICAgICAgICAgIG51bWVyaWM6IHtcbiAgICAgICAgICAgICAgICBtYXNrOiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgwICE9PSBvcHRzLnJlcGVhdCAmJiBpc05hTihvcHRzLmludGVnZXJEaWdpdHMpICYmIChvcHRzLmludGVnZXJEaWdpdHMgPSBvcHRzLnJlcGVhdCksIFxuICAgICAgICAgICAgICAgICAgICBvcHRzLnJlcGVhdCA9IDAsIG9wdHMuZ3JvdXBTZXBhcmF0b3IgPT09IG9wdHMucmFkaXhQb2ludCAmJiAoXCIuXCIgPT09IG9wdHMucmFkaXhQb2ludCA/IG9wdHMuZ3JvdXBTZXBhcmF0b3IgPSBcIixcIiA6IFwiLFwiID09PSBvcHRzLnJhZGl4UG9pbnQgPyBvcHRzLmdyb3VwU2VwYXJhdG9yID0gXCIuXCIgOiBvcHRzLmdyb3VwU2VwYXJhdG9yID0gXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICBcIiBcIiA9PT0gb3B0cy5ncm91cFNlcGFyYXRvciAmJiAob3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyID0gdW5kZWZpbmVkKSwgb3B0cy5hdXRvR3JvdXAgPSBvcHRzLmF1dG9Hcm91cCAmJiBcIlwiICE9PSBvcHRzLmdyb3VwU2VwYXJhdG9yLCBcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5hdXRvR3JvdXAgJiYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIG9wdHMuZ3JvdXBTaXplICYmIGlzRmluaXRlKG9wdHMuZ3JvdXBTaXplKSAmJiAob3B0cy5ncm91cFNpemUgPSBwYXJzZUludChvcHRzLmdyb3VwU2l6ZSkpLCBcbiAgICAgICAgICAgICAgICAgICAgaXNGaW5pdGUob3B0cy5pbnRlZ2VyRGlnaXRzKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXBzID0gTWF0aC5mbG9vcihvcHRzLmludGVnZXJEaWdpdHMgLyBvcHRzLmdyb3VwU2l6ZSksIG1vZCA9IG9wdHMuaW50ZWdlckRpZ2l0cyAlIG9wdHMuZ3JvdXBTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnRlZ2VyRGlnaXRzID0gcGFyc2VJbnQob3B0cy5pbnRlZ2VyRGlnaXRzKSArICgwID09PSBtb2QgPyBzZXBzIC0gMSA6IHNlcHMpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuaW50ZWdlckRpZ2l0cyA8IDEgJiYgKG9wdHMuaW50ZWdlckRpZ2l0cyA9IFwiKlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvcHRzLnBsYWNlaG9sZGVyLmxlbmd0aCA+IDEgJiYgKG9wdHMucGxhY2Vob2xkZXIgPSBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSksIFxuICAgICAgICAgICAgICAgICAgICBcInJhZGl4Rm9jdXNcIiA9PT0gb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljayAmJiBcIlwiID09PSBvcHRzLnBsYWNlaG9sZGVyICYmICExID09PSBvcHRzLmludGVnZXJPcHRpb25hbCAmJiAob3B0cy5wb3NpdGlvbkNhcmV0T25DbGljayA9IFwibHZwXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5kZWZpbml0aW9uc1tcIjtcIl0gPSBvcHRzLmRlZmluaXRpb25zW1wiflwiXSwgb3B0cy5kZWZpbml0aW9uc1tcIjtcIl0uZGVmaW5pdGlvblN5bWJvbCA9IFwiflwiLCBcbiAgICAgICAgICAgICAgICAgICAgITAgPT09IG9wdHMubnVtZXJpY0lucHV0ICYmIChvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrID0gXCJyYWRpeEZvY3VzXCIgPT09IG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2sgPyBcImx2cFwiIDogb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljaywgXG4gICAgICAgICAgICAgICAgICAgIG9wdHMuZGlnaXRzT3B0aW9uYWwgPSAhMSwgaXNOYU4ob3B0cy5kaWdpdHMpICYmIChvcHRzLmRpZ2l0cyA9IDIpLCBvcHRzLmRlY2ltYWxQcm90ZWN0ID0gITEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFzayA9IFwiWytdXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXNrICs9IGF1dG9Fc2NhcGUob3B0cy5wcmVmaXgsIG9wdHMpLCAhMCA9PT0gb3B0cy5pbnRlZ2VyT3B0aW9uYWwgPyBtYXNrICs9IFwifnsxLFwiICsgb3B0cy5pbnRlZ2VyRGlnaXRzICsgXCJ9XCIgOiBtYXNrICs9IFwifntcIiArIG9wdHMuaW50ZWdlckRpZ2l0cyArIFwifVwiLCBcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5kaWdpdHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5yYWRpeFBvaW50RGVmaW5pdGlvblN5bWJvbCA9IG9wdHMuZGVjaW1hbFByb3RlY3QgPyBcIjpcIiA6IG9wdHMucmFkaXhQb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkcSA9IG9wdHMuZGlnaXRzLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNGaW5pdGUoZHFbMF0gJiYgZHFbMV0gJiYgaXNGaW5pdGUoZHFbMV0pKSA/IG1hc2sgKz0gb3B0cy5yYWRpeFBvaW50RGVmaW5pdGlvblN5bWJvbCArIFwiO3tcIiArIG9wdHMuZGlnaXRzICsgXCJ9XCIgOiAoaXNOYU4ob3B0cy5kaWdpdHMpIHx8IHBhcnNlSW50KG9wdHMuZGlnaXRzKSA+IDApICYmIChvcHRzLmRpZ2l0c09wdGlvbmFsID8gbWFzayArPSBcIltcIiArIG9wdHMucmFkaXhQb2ludERlZmluaXRpb25TeW1ib2wgKyBcIjt7MSxcIiArIG9wdHMuZGlnaXRzICsgXCJ9XVwiIDogbWFzayArPSBvcHRzLnJhZGl4UG9pbnREZWZpbml0aW9uU3ltYm9sICsgXCI7e1wiICsgb3B0cy5kaWdpdHMgKyBcIn1cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hc2sgKz0gYXV0b0VzY2FwZShvcHRzLnN1ZmZpeCwgb3B0cyksIG1hc2sgKz0gXCJbLV1cIiwgb3B0cy5ncmVlZHkgPSAhMSwgbWFzaztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiLFxuICAgICAgICAgICAgICAgIGdyZWVkeTogITEsXG4gICAgICAgICAgICAgICAgZGlnaXRzOiBcIipcIixcbiAgICAgICAgICAgICAgICBkaWdpdHNPcHRpb25hbDogITAsXG4gICAgICAgICAgICAgICAgZW5mb3JjZURpZ2l0c09uQmx1cjogITEsXG4gICAgICAgICAgICAgICAgcmFkaXhQb2ludDogXCIuXCIsXG4gICAgICAgICAgICAgICAgcG9zaXRpb25DYXJldE9uQ2xpY2s6IFwicmFkaXhGb2N1c1wiLFxuICAgICAgICAgICAgICAgIGdyb3VwU2l6ZTogMyxcbiAgICAgICAgICAgICAgICBncm91cFNlcGFyYXRvcjogXCJcIixcbiAgICAgICAgICAgICAgICBhdXRvR3JvdXA6ICExLFxuICAgICAgICAgICAgICAgIGFsbG93TWludXM6ICEwLFxuICAgICAgICAgICAgICAgIG5lZ2F0aW9uU3ltYm9sOiB7XG4gICAgICAgICAgICAgICAgICAgIGZyb250OiBcIi1cIixcbiAgICAgICAgICAgICAgICAgICAgYmFjazogXCJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW50ZWdlckRpZ2l0czogXCIrXCIsXG4gICAgICAgICAgICAgICAgaW50ZWdlck9wdGlvbmFsOiAhMCxcbiAgICAgICAgICAgICAgICBwcmVmaXg6IFwiXCIsXG4gICAgICAgICAgICAgICAgc3VmZml4OiBcIlwiLFxuICAgICAgICAgICAgICAgIHJpZ2h0QWxpZ246ICEwLFxuICAgICAgICAgICAgICAgIGRlY2ltYWxQcm90ZWN0OiAhMCxcbiAgICAgICAgICAgICAgICBtaW46IG51bGwsXG4gICAgICAgICAgICAgICAgbWF4OiBudWxsLFxuICAgICAgICAgICAgICAgIHN0ZXA6IDEsXG4gICAgICAgICAgICAgICAgaW5zZXJ0TW9kZTogITAsXG4gICAgICAgICAgICAgICAgYXV0b1VubWFzazogITEsXG4gICAgICAgICAgICAgICAgdW5tYXNrQXNOdW1iZXI6ICExLFxuICAgICAgICAgICAgICAgIGlucHV0bW9kZTogXCJudW1lcmljXCIsXG4gICAgICAgICAgICAgICAgcHJlVmFsaWRhdGlvbjogZnVuY3Rpb24oYnVmZmVyLCBwb3MsIGMsIGlzU2VsZWN0aW9uLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcIi1cIiA9PT0gYyB8fCBjID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSByZXR1cm4gITAgPT09IG9wdHMuYWxsb3dNaW51cyAmJiAob3B0cy5pc05lZ2F0aXZlID0gb3B0cy5pc05lZ2F0aXZlID09PSB1bmRlZmluZWQgfHwgIW9wdHMuaXNOZWdhdGl2ZSwgXG4gICAgICAgICAgICAgICAgICAgIFwiXCIgPT09IGJ1ZmZlci5qb2luKFwiXCIpIHx8IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBwb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb3Bvc3Q6ICEwXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoITEgPT09IGlzU2VsZWN0aW9uICYmIGMgPT09IG9wdHMucmFkaXhQb2ludCAmJiBvcHRzLmRpZ2l0cyAhPT0gdW5kZWZpbmVkICYmIChpc05hTihvcHRzLmRpZ2l0cykgfHwgcGFyc2VJbnQob3B0cy5kaWdpdHMpID4gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFBvcyA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoLTEgIT09IHJhZGl4UG9zKSByZXR1cm4gITAgPT09IG9wdHMubnVtZXJpY0lucHV0ID8gcG9zID09PSByYWRpeFBvcyA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcmFkaXhQb3MgKyAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBmdW5jdGlvbihidWZmZXIsIGN1cnJlbnRSZXN1bHQsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1ZmZpeCA9IG9wdHMuc3VmZml4LnNwbGl0KFwiXCIpLCBwcmVmaXggPSBvcHRzLnByZWZpeC5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSZXN1bHQucG9zID09PSB1bmRlZmluZWQgJiYgY3VycmVudFJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkICYmICEwICE9PSBjdXJyZW50UmVzdWx0LmRvcG9zdCkgcmV0dXJuIGN1cnJlbnRSZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IGN1cnJlbnRSZXN1bHQuY2FyZXQgIT09IHVuZGVmaW5lZCA/IGN1cnJlbnRSZXN1bHQuY2FyZXQgOiBjdXJyZW50UmVzdWx0LnBvcywgbWFza2VkVmFsdWUgPSBidWZmZXIuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5udW1lcmljSW5wdXQgJiYgKGNhcmV0UG9zID0gbWFza2VkVmFsdWUubGVuZ3RoIC0gY2FyZXRQb3MgLSAxLCBtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJldmVyc2UoKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGFyQXRQb3MgPSBtYXNrZWRWYWx1ZVtjYXJldFBvc107XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQXRQb3MgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgJiYgKGNoYXJBdFBvcyA9IG1hc2tlZFZhbHVlW2NhcmV0UG9zICs9IDFdKSwgXG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zID09PSBtYXNrZWRWYWx1ZS5sZW5ndGggLSBvcHRzLnN1ZmZpeC5sZW5ndGggLSAxICYmIGNoYXJBdFBvcyA9PT0gb3B0cy5yYWRpeFBvaW50KSByZXR1cm4gY3VycmVudFJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgY2hhckF0UG9zICE9PSB1bmRlZmluZWQgJiYgY2hhckF0UG9zICE9PSBvcHRzLnJhZGl4UG9pbnQgJiYgY2hhckF0UG9zICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250ICYmIGNoYXJBdFBvcyAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrICYmIChtYXNrZWRWYWx1ZVtjYXJldFBvc10gPSBcIj9cIiwgXG4gICAgICAgICAgICAgICAgICAgIG9wdHMucHJlZml4Lmxlbmd0aCA+IDAgJiYgY2FyZXRQb3MgPj0gKCExID09PSBvcHRzLmlzTmVnYXRpdmUgPyAxIDogMCkgJiYgY2FyZXRQb3MgPCBvcHRzLnByZWZpeC5sZW5ndGggLSAxICsgKCExID09PSBvcHRzLmlzTmVnYXRpdmUgPyAxIDogMCkgPyBwcmVmaXhbY2FyZXRQb3MgLSAoITEgPT09IG9wdHMuaXNOZWdhdGl2ZSA/IDEgOiAwKV0gPSBcIj9cIiA6IG9wdHMuc3VmZml4Lmxlbmd0aCA+IDAgJiYgY2FyZXRQb3MgPj0gbWFza2VkVmFsdWUubGVuZ3RoIC0gb3B0cy5zdWZmaXgubGVuZ3RoIC0gKCExID09PSBvcHRzLmlzTmVnYXRpdmUgPyAxIDogMCkgJiYgKHN1ZmZpeFtjYXJldFBvcyAtIChtYXNrZWRWYWx1ZS5sZW5ndGggLSBvcHRzLnN1ZmZpeC5sZW5ndGggLSAoITEgPT09IG9wdHMuaXNOZWdhdGl2ZSA/IDEgOiAwKSldID0gXCI/XCIpKSwgXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeCA9IHByZWZpeC5qb2luKFwiXCIpLCBzdWZmaXggPSBzdWZmaXguam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NWYWx1ZSA9IG1hc2tlZFZhbHVlLmpvaW4oXCJcIikucmVwbGFjZShwcmVmaXgsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2Uoc3VmZml4LCBcIlwiKSwgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiWy1cIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiXVwiLCBcImdcIiksIFwiXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSArIFwiJFwiKSwgXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICBpc05hTihvcHRzLnBsYWNlaG9sZGVyKSAmJiAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5wbGFjZWhvbGRlciksIFwiZ1wiKSwgXCJcIikpLCBcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlLmxlbmd0aCA+IDEgJiYgMSAhPT0gcHJvY2Vzc1ZhbHVlLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KSAmJiAoXCIwXCIgPT09IGNoYXJBdFBvcyAmJiAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UoL15cXD8vZywgXCJcIikpLCBcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UoL14wL2csIFwiXCIpKSwgcHJvY2Vzc1ZhbHVlLmNoYXJBdCgwKSA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIFwiXCIgIT09IG9wdHMucmFkaXhQb2ludCAmJiAhMCAhPT0gb3B0cy5udW1lcmljSW5wdXQgJiYgKHByb2Nlc3NWYWx1ZSA9IFwiMFwiICsgcHJvY2Vzc1ZhbHVlKSwgXG4gICAgICAgICAgICAgICAgICAgIFwiXCIgIT09IHByb2Nlc3NWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5zcGxpdChcIlwiKSwgKCFvcHRzLmRpZ2l0c09wdGlvbmFsIHx8IG9wdHMuZW5mb3JjZURpZ2l0c09uQmx1ciAmJiBcImJsdXJcIiA9PT0gY3VycmVudFJlc3VsdC5ldmVudCkgJiYgaXNGaW5pdGUob3B0cy5kaWdpdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zaXRpb24gPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBwcm9jZXNzVmFsdWUpLCBycGIgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBtYXNrZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLTEgPT09IHJhZGl4UG9zaXRpb24gJiYgKHByb2Nlc3NWYWx1ZS5wdXNoKG9wdHMucmFkaXhQb2ludCksIHJhZGl4UG9zaXRpb24gPSBwcm9jZXNzVmFsdWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gb3B0cy5kaWdpdHM7IGkrKykgb3B0cy5kaWdpdHNPcHRpb25hbCAmJiAoIW9wdHMuZW5mb3JjZURpZ2l0c09uQmx1ciB8fCBcImJsdXJcIiAhPT0gY3VycmVudFJlc3VsdC5ldmVudCkgfHwgcHJvY2Vzc1ZhbHVlW3JhZGl4UG9zaXRpb24gKyBpXSAhPT0gdW5kZWZpbmVkICYmIHByb2Nlc3NWYWx1ZVtyYWRpeFBvc2l0aW9uICsgaV0gIT09IG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApID8gLTEgIT09IHJwYiAmJiBtYXNrZWRWYWx1ZVtycGIgKyBpXSAhPT0gdW5kZWZpbmVkICYmIChwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldID0gcHJvY2Vzc1ZhbHVlW3JhZGl4UG9zaXRpb24gKyBpXSB8fCBtYXNrZWRWYWx1ZVtycGIgKyBpXSkgOiBwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldID0gY3VycmVudFJlc3VsdC5wbGFjZWhvbGRlciB8fCBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghMCAhPT0gb3B0cy5hdXRvR3JvdXAgfHwgXCJcIiA9PT0gb3B0cy5ncm91cFNlcGFyYXRvciB8fCBjaGFyQXRQb3MgPT09IG9wdHMucmFkaXhQb2ludCAmJiBjdXJyZW50UmVzdWx0LnBvcyA9PT0gdW5kZWZpbmVkICYmICFjdXJyZW50UmVzdWx0LmRvcG9zdCkgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLmpvaW4oXCJcIik7IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZGRSYWRpeCA9IHByb2Nlc3NWYWx1ZVtwcm9jZXNzVmFsdWUubGVuZ3RoIC0gMV0gPT09IG9wdHMucmFkaXhQb2ludCAmJiBjdXJyZW50UmVzdWx0LmMgPT09IG9wdHMucmFkaXhQb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBJbnB1dG1hc2soZnVuY3Rpb24oYnVmZmVyLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3N0TWFzayA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3N0TWFzayArPSBcIihcIiArIG9wdHMuZ3JvdXBTZXBhcmF0b3IgKyBcIip7XCIgKyBvcHRzLmdyb3VwU2l6ZSArIFwifSl7Kn1cIiwgXCJcIiAhPT0gb3B0cy5yYWRpeFBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhTcGxpdCA9IGJ1ZmZlci5qb2luKFwiXCIpLnNwbGl0KG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpeFNwbGl0WzFdICYmIChwb3N0TWFzayArPSBvcHRzLnJhZGl4UG9pbnQgKyBcIip7XCIgKyByYWRpeFNwbGl0WzFdLm1hdGNoKC9eXFxkKlxcPz9cXGQqLylbMF0ubGVuZ3RoICsgXCJ9XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3N0TWFzaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KHByb2Nlc3NWYWx1ZSwgb3B0cyksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJpY0lucHV0OiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaml0TWFza2luZzogITAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIipcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05P11cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuZm9ybWF0KHByb2Nlc3NWYWx1ZS5qb2luKFwiXCIpKSwgYWRkUmFkaXggJiYgKHByb2Nlc3NWYWx1ZSArPSBvcHRzLnJhZGl4UG9pbnQpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUuY2hhckF0KDApID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yICYmIHByb2Nlc3NWYWx1ZS5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuaXNOZWdhdGl2ZSAmJiBcImJsdXJcIiA9PT0gY3VycmVudFJlc3VsdC5ldmVudCAmJiAob3B0cy5pc05lZ2F0aXZlID0gXCIwXCIgIT09IHByb2Nlc3NWYWx1ZSksIFxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcmVmaXggKyBwcm9jZXNzVmFsdWUsIHByb2Nlc3NWYWx1ZSArPSBzdWZmaXgsIG9wdHMuaXNOZWdhdGl2ZSAmJiAocHJvY2Vzc1ZhbHVlID0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCArIHByb2Nlc3NWYWx1ZSwgXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSArPSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spLCBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUuc3BsaXQoXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICBjaGFyQXRQb3MgIT09IHVuZGVmaW5lZCkgaWYgKGNoYXJBdFBvcyAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIGNoYXJBdFBvcyAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCAmJiBjaGFyQXRQb3MgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKGNhcmV0UG9zID0gJC5pbkFycmF5KFwiP1wiLCBwcm9jZXNzVmFsdWUpKSA+IC0xID8gcHJvY2Vzc1ZhbHVlW2NhcmV0UG9zXSA9IGNoYXJBdFBvcyA6IGNhcmV0UG9zID0gY3VycmVudFJlc3VsdC5jYXJldCB8fCAwOyBlbHNlIGlmIChjaGFyQXRQb3MgPT09IG9wdHMucmFkaXhQb2ludCB8fCBjaGFyQXRQb3MgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgfHwgY2hhckF0UG9zID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdDYXJldFBvcyA9ICQuaW5BcnJheShjaGFyQXRQb3MsIHByb2Nlc3NWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAtMSAhPT0gbmV3Q2FyZXRQb3MgJiYgKGNhcmV0UG9zID0gbmV3Q2FyZXRQb3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9wdHMubnVtZXJpY0lucHV0ICYmIChjYXJldFBvcyA9IHByb2Nlc3NWYWx1ZS5sZW5ndGggLSBjYXJldFBvcyAtIDEsIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXZlcnNlKCkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcnNsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBjaGFyQXRQb3MgPT09IHVuZGVmaW5lZCB8fCBjdXJyZW50UmVzdWx0LnBvcyAhPT0gdW5kZWZpbmVkID8gY2FyZXRQb3MgKyAob3B0cy5udW1lcmljSW5wdXQgPyAtMSA6IDEpIDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXI6IHByb2Nlc3NWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiBjdXJyZW50UmVzdWx0LmRvcG9zdCB8fCBidWZmZXIuam9pbihcIlwiKSAhPT0gcHJvY2Vzc1ZhbHVlLmpvaW4oXCJcIilcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJzbHQucmVmcmVzaEZyb21CdWZmZXIgPyByc2x0IDogY3VycmVudFJlc3VsdDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQmVmb3JlV3JpdGU6IGZ1bmN0aW9uKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBvc3RWYWxpZGF0aW9uKGJ1ZmZlciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBjYXJldFBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3Bvc3Q6ICEwXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBvcHRzKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJibHVyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNoZWNrdmFsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5tYXNrZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMucGFyc2VNaW5NYXhPcHRpb25zID09PSB1bmRlZmluZWQgJiYgKG51bGwgIT09IG9wdHMubWluICYmIChvcHRzLm1pbiA9IG9wdHMubWluLnRvU3RyaW5nKCkucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIsXCIgPT09IG9wdHMucmFkaXhQb2ludCAmJiAob3B0cy5taW4gPSBvcHRzLm1pbi5yZXBsYWNlKG9wdHMucmFkaXhQb2ludCwgXCIuXCIpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5taW4gPSBpc0Zpbml0ZShvcHRzLm1pbikgPyBwYXJzZUZsb2F0KG9wdHMubWluKSA6IE5hTiwgaXNOYU4ob3B0cy5taW4pICYmIChvcHRzLm1pbiA9IE51bWJlci5NSU5fVkFMVUUpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gb3B0cy5tYXggJiYgKG9wdHMubWF4ID0gb3B0cy5tYXgudG9TdHJpbmcoKS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIixcIiA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChvcHRzLm1heCA9IG9wdHMubWF4LnJlcGxhY2Uob3B0cy5yYWRpeFBvaW50LCBcIi5cIikpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLm1heCA9IGlzRmluaXRlKG9wdHMubWF4KSA/IHBhcnNlRmxvYXQob3B0cy5tYXgpIDogTmFOLCBpc05hTihvcHRzLm1heCkgJiYgKG9wdHMubWF4ID0gTnVtYmVyLk1BWF9WQUxVRSkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLnBhcnNlTWluTWF4T3B0aW9ucyA9IFwiZG9uZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0ob3B0cyksIG51bGwgIT09IG9wdHMubWluIHx8IG51bGwgIT09IG9wdHMubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVubWFza2VkID0gb3B0cy5vblVuTWFzayhidWZmZXIuam9pbihcIlwiKSwgdW5kZWZpbmVkLCAkLmV4dGVuZCh7fSwgb3B0cywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bm1hc2tBc051bWJlcjogITBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSksIG51bGwgIT09IG9wdHMubWluICYmIHVubWFza2VkIDwgb3B0cy5taW4pIHJldHVybiBvcHRzLmlzTmVnYXRpdmUgPSBvcHRzLm1pbiA8IDAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMucG9zdFZhbGlkYXRpb24ob3B0cy5taW4udG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBvcHRzLnJhZGl4UG9pbnQpLnNwbGl0KFwiXCIpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBjYXJldFBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9wb3N0OiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IG9wdHMubWF4ICYmIHVubWFza2VkID4gb3B0cy5tYXgpIHJldHVybiBvcHRzLmlzTmVnYXRpdmUgPSBvcHRzLm1heCA8IDAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMucG9zdFZhbGlkYXRpb24ob3B0cy5tYXgudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBvcHRzLnJhZGl4UG9pbnQpLnNwbGl0KFwiXCIpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBjYXJldFBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9wb3N0OiAhMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5wb3N0VmFsaWRhdGlvbihidWZmZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcImJsdXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiX2NoZWNrdmFsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBjYXJldFBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVnZXg6IHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZWdlclBhcnQ6IGZ1bmN0aW9uKG9wdHMsIGVtcHR5Q2hlY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eUNoZWNrID8gbmV3IFJlZ0V4cChcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiK10/XCIpIDogbmV3IFJlZ0V4cChcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiK10/XFxcXGQrXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpbnRlZ2VyTlBhcnQ6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiW1xcXFxkXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvcikgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpICsgXCJdK1wiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ+XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMsIGlzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBzdHJpY3QgPyBuZXcgUmVnRXhwKFwiWzAtOVwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpICsgXCJdXCIpLnRlc3QoY2hycykgOiBuZXcgUmVnRXhwKFwiWzAtOV1cIikudGVzdChjaHJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoITAgPT09IGlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEwICE9PSBvcHRzLm51bWVyaWNJbnB1dCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gIT09IHVuZGVmaW5lZCAmJiBcIn5cIiA9PT0gbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoLmRlZiAmJiAhaXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzVmFsdWUgPSBtYXNrc2V0LmJ1ZmZlci5qb2luKFwiXCIpLCBwdlJhZGl4U3BsaXQgPSAocHJvY2Vzc1ZhbHVlID0gKHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJbLVwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpICsgXCJdXCIsIFwiZ1wiKSwgXCJcIikpLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSArIFwiJFwiKSwgXCJcIikpLnNwbGl0KG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdlJhZGl4U3BsaXQubGVuZ3RoID4gMSAmJiAocHZSYWRpeFNwbGl0WzFdID0gcHZSYWRpeFNwbGl0WzFdLnJlcGxhY2UoLzAvZywgb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIjBcIiA9PT0gcHZSYWRpeFNwbGl0WzBdICYmIChwdlJhZGl4U3BsaXRbMF0gPSBwdlJhZGl4U3BsaXRbMF0ucmVwbGFjZSgvMC9nLCBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHB2UmFkaXhTcGxpdFswXSArIG9wdHMucmFkaXhQb2ludCArIHB2UmFkaXhTcGxpdFsxXSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlclRlbXBsYXRlID0gbWFza3NldC5fYnVmZmVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHByb2Nlc3NWYWx1ZSA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChwcm9jZXNzVmFsdWUgPSBidWZmZXJUZW1wbGF0ZSk7IG51bGwgPT09IHByb2Nlc3NWYWx1ZS5tYXRjaChJbnB1dG1hc2suZXNjYXBlUmVnZXgoYnVmZmVyVGVtcGxhdGUpICsgXCIkXCIpOyApIGJ1ZmZlclRlbXBsYXRlID0gYnVmZmVyVGVtcGxhdGUuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gKHByb2Nlc3NWYWx1ZSA9IChwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShidWZmZXJUZW1wbGF0ZSwgXCJcIikpLnNwbGl0KFwiXCIpKVtwb3NdID09PSB1bmRlZmluZWQgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugc3RyaWN0IHx8IGNocnMgIT09IG9wdHMucmFkaXhQb2ludCB8fCBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3BvcyAtIDFdICE9PSB1bmRlZmluZWQgfHwgKG1hc2tzZXQuYnVmZmVyW3Bvc10gPSBcIjBcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MgKyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCIrXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24oY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5hbGxvd01pbnVzICYmIChcIi1cIiA9PT0gY2hycyB8fCBjaHJzID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiLVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuYWxsb3dNaW51cyAmJiBjaHJzID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIjpcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeCA9IFwiW1wiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMucmFkaXhQb2ludCkgKyBcIl1cIiwgaXNWYWxpZCA9IG5ldyBSZWdFeHAocmFkaXgpLnRlc3QoY2hycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQgJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXS5tYXRjaC5wbGFjZWhvbGRlciA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBpc1ZhbGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5yYWRpeFBvaW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvblVuTWFzazogZnVuY3Rpb24obWFza2VkVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiXCIgPT09IHVubWFza2VkVmFsdWUgJiYgITAgPT09IG9wdHMubnVsbGFibGUpIHJldHVybiB1bm1hc2tlZFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc1ZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShvcHRzLnByZWZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShvcHRzLnN1ZmZpeCwgXCJcIiksIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgXCJcIiAhPT0gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkgJiYgKHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAob3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCksIFwiZ1wiKSwgXCIwXCIpKSwgXG4gICAgICAgICAgICAgICAgICAgIG9wdHMudW5tYXNrQXNOdW1iZXIgPyAoXCJcIiAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIC0xICE9PSBwcm9jZXNzVmFsdWUuaW5kZXhPZihvcHRzLnJhZGl4UG9pbnQpICYmIChwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIikpLCBcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChcIl5cIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSksIFwiLVwiKSwgXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgTnVtYmVyKHByb2Nlc3NWYWx1ZSkpIDogcHJvY2Vzc1ZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZTogZnVuY3Rpb24oYnVmZmVyLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrZWRWYWx1ZSA9IGJ1ZmZlci5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLnNsaWNlKCkuam9pbihcIlwiKSAhPT0gbWFza2VkVmFsdWUpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2Uob3B0cy5wcmVmaXgsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2Uob3B0cy5zdWZmaXgsIFwiXCIpLCBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIFwiLFwiID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgKHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIikpLCBcbiAgICAgICAgICAgICAgICAgICAgaXNGaW5pdGUocHJvY2Vzc1ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQmVmb3JlTWFzazogZnVuY3Rpb24oaW5pdGlhbFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmlzTmVnYXRpdmUgPSB1bmRlZmluZWQsIGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS50b1N0cmluZygpLmNoYXJBdChpbml0aWFsVmFsdWUubGVuZ3RoIC0gMSkgPT09IG9wdHMucmFkaXhQb2ludCA/IGluaXRpYWxWYWx1ZS50b1N0cmluZygpLnN1YnN0cigwLCBpbml0aWFsVmFsdWUubGVuZ3RoIC0gMSkgOiBpbml0aWFsVmFsdWUudG9TdHJpbmcoKSwgXG4gICAgICAgICAgICAgICAgICAgIFwiXCIgIT09IG9wdHMucmFkaXhQb2ludCAmJiBpc0Zpbml0ZShpbml0aWFsVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdnMgPSBpbml0aWFsVmFsdWUuc3BsaXQoXCIuXCIpLCBncm91cFNpemUgPSBcIlwiICE9PSBvcHRzLmdyb3VwU2VwYXJhdG9yID8gcGFyc2VJbnQob3B0cy5ncm91cFNpemUpIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIDIgPT09IHZzLmxlbmd0aCAmJiAodnNbMF0ubGVuZ3RoID4gZ3JvdXBTaXplIHx8IHZzWzFdLmxlbmd0aCA+IGdyb3VwU2l6ZSB8fCB2c1swXS5sZW5ndGggPD0gZ3JvdXBTaXplICYmIHZzWzFdLmxlbmd0aCA8IGdyb3VwU2l6ZSkgJiYgKGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5yZXBsYWNlKFwiLlwiLCBvcHRzLnJhZGl4UG9pbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIga29tbWFNYXRjaGVzID0gaW5pdGlhbFZhbHVlLm1hdGNoKC8sL2cpLCBkb3RNYXRjaGVzID0gaW5pdGlhbFZhbHVlLm1hdGNoKC9cXC4vZyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsVmFsdWUgPSBkb3RNYXRjaGVzICYmIGtvbW1hTWF0Y2hlcyA/IGRvdE1hdGNoZXMubGVuZ3RoID4ga29tbWFNYXRjaGVzLmxlbmd0aCA/IChpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZSgvXFwuL2csIFwiXCIpKS5yZXBsYWNlKFwiLFwiLCBvcHRzLnJhZGl4UG9pbnQpIDoga29tbWFNYXRjaGVzLmxlbmd0aCA+IGRvdE1hdGNoZXMubGVuZ3RoID8gKGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5yZXBsYWNlKC8sL2csIFwiXCIpKS5yZXBsYWNlKFwiLlwiLCBvcHRzLnJhZGl4UG9pbnQpIDogaW5pdGlhbFZhbHVlLmluZGV4T2YoXCIuXCIpIDwgaW5pdGlhbFZhbHVlLmluZGV4T2YoXCIsXCIpID8gaW5pdGlhbFZhbHVlLnJlcGxhY2UoL1xcLi9nLCBcIlwiKSA6IGluaXRpYWxWYWx1ZS5yZXBsYWNlKC8sL2csIFwiXCIpIDogaW5pdGlhbFZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIiksIFxuICAgICAgICAgICAgICAgICAgICAwID09PSBvcHRzLmRpZ2l0cyAmJiAoLTEgIT09IGluaXRpYWxWYWx1ZS5pbmRleE9mKFwiLlwiKSA/IGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5zdWJzdHJpbmcoMCwgaW5pdGlhbFZhbHVlLmluZGV4T2YoXCIuXCIpKSA6IC0xICE9PSBpbml0aWFsVmFsdWUuaW5kZXhPZihcIixcIikgJiYgKGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5zdWJzdHJpbmcoMCwgaW5pdGlhbFZhbHVlLmluZGV4T2YoXCIsXCIpKSkpLCBcbiAgICAgICAgICAgICAgICAgICAgXCJcIiAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIGlzRmluaXRlKG9wdHMuZGlnaXRzKSAmJiAtMSAhPT0gaW5pdGlhbFZhbHVlLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlY1BhcnQgPSBpbml0aWFsVmFsdWUuc3BsaXQob3B0cy5yYWRpeFBvaW50KVsxXS5tYXRjaChuZXcgUmVnRXhwKFwiXFxcXGQqXCIpKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChvcHRzLmRpZ2l0cykgPCBkZWNQYXJ0LnRvU3RyaW5nKCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpZ2l0c0ZhY3RvciA9IE1hdGgucG93KDEwLCBwYXJzZUludChvcHRzLmRpZ2l0cykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5yZXBsYWNlKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IChpbml0aWFsVmFsdWUgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoaW5pdGlhbFZhbHVlKSAqIGRpZ2l0c0ZhY3RvcikgLyBkaWdpdHNGYWN0b3IpLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgb3B0cy5yYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5pdGlhbFZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FuQ2xlYXJQb3NpdGlvbjogZnVuY3Rpb24obWFza3NldCwgcG9zaXRpb24sIGx2cCwgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2cCA9IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zaXRpb25dLCBjYW5DbGVhciA9IHZwLmlucHV0ICE9PSBvcHRzLnJhZGl4UG9pbnQgfHwgbnVsbCAhPT0gbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NpdGlvbl0ubWF0Y2guZm4gJiYgITEgPT09IG9wdHMuZGVjaW1hbFByb3RlY3QgfHwgdnAuaW5wdXQgPT09IG9wdHMucmFkaXhQb2ludCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc2l0aW9uICsgMV0gJiYgbnVsbCA9PT0gbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NpdGlvbiArIDFdLm1hdGNoLmZuIHx8IGlzRmluaXRlKHZwLmlucHV0KSB8fCBwb3NpdGlvbiA9PT0gbHZwIHx8IHZwLmlucHV0ID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yIHx8IHZwLmlucHV0ID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250IHx8IHZwLmlucHV0ID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2s7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhY2FuQ2xlYXIgfHwgXCIrXCIgIT09IHZwLm1hdGNoLm5hdGl2ZURlZiAmJiBcIi1cIiAhPT0gdnAubWF0Y2gubmF0aXZlRGVmIHx8IChvcHRzLmlzTmVnYXRpdmUgPSAhMSksIFxuICAgICAgICAgICAgICAgICAgICBjYW5DbGVhcjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24oZSwgYnVmZmVyLCBjYXJldFBvcywgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSkgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIElucHV0bWFzay5rZXlDb2RlLlVQOlxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbChwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkgKyBwYXJzZUludChvcHRzLnN0ZXApKSwgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBJbnB1dG1hc2sua2V5Q29kZS5ET1dOOlxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbChwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkgLSBwYXJzZUludChvcHRzLnN0ZXApKSwgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdXJyZW5jeToge1xuICAgICAgICAgICAgICAgIHByZWZpeDogXCIkIFwiLFxuICAgICAgICAgICAgICAgIGdyb3VwU2VwYXJhdG9yOiBcIixcIixcbiAgICAgICAgICAgICAgICBhbGlhczogXCJudW1lcmljXCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxuICAgICAgICAgICAgICAgIGF1dG9Hcm91cDogITAsXG4gICAgICAgICAgICAgICAgZGlnaXRzOiAyLFxuICAgICAgICAgICAgICAgIGRpZ2l0c09wdGlvbmFsOiAhMSxcbiAgICAgICAgICAgICAgICBjbGVhck1hc2tPbkxvc3RGb2N1czogITFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWNpbWFsOiB7XG4gICAgICAgICAgICAgICAgYWxpYXM6IFwibnVtZXJpY1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW50ZWdlcjoge1xuICAgICAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgICAgICBkaWdpdHM6IDAsXG4gICAgICAgICAgICAgICAgcmFkaXhQb2ludDogXCJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBlcmNlbnRhZ2U6IHtcbiAgICAgICAgICAgICAgICBhbGlhczogXCJudW1lcmljXCIsXG4gICAgICAgICAgICAgICAgZGlnaXRzOiAyLFxuICAgICAgICAgICAgICAgIGRpZ2l0c09wdGlvbmFsOiAhMCxcbiAgICAgICAgICAgICAgICByYWRpeFBvaW50OiBcIi5cIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCIsXG4gICAgICAgICAgICAgICAgYXV0b0dyb3VwOiAhMSxcbiAgICAgICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAgICAgbWF4OiAxMDAsXG4gICAgICAgICAgICAgICAgc3VmZml4OiBcIiAlXCIsXG4gICAgICAgICAgICAgICAgYWxsb3dNaW51czogITFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIElucHV0bWFzaztcbiAgICB9KTtcbn0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fO1xuICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcjtcbiAgICAhZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgICAgICBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gWyBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpIF0sIFxuICAgICAgICB2b2lkIDAgIT09IChfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IGZhY3RvcnkpID8gX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyk7XG4gICAgfShmdW5jdGlvbigkLCBJbnB1dG1hc2spIHtcbiAgICAgICAgZnVuY3Rpb24gbWFza1NvcnQoYSwgYikge1xuICAgICAgICAgICAgdmFyIG1hc2thID0gKGEubWFzayB8fCBhKS5yZXBsYWNlKC8jL2csIFwiOVwiKS5yZXBsYWNlKC9cXCkvLCBcIjlcIikucmVwbGFjZSgvWysoKSMtXS9nLCBcIlwiKSwgbWFza2IgPSAoYi5tYXNrIHx8IGIpLnJlcGxhY2UoLyMvZywgXCI5XCIpLnJlcGxhY2UoL1xcKS8sIFwiOVwiKS5yZXBsYWNlKC9bKygpIy1dL2csIFwiXCIpLCBtYXNrYXMgPSAoYS5tYXNrIHx8IGEpLnNwbGl0KFwiI1wiKVswXSwgbWFza2JzID0gKGIubWFzayB8fCBiKS5zcGxpdChcIiNcIilbMF07XG4gICAgICAgICAgICByZXR1cm4gMCA9PT0gbWFza2JzLmluZGV4T2YobWFza2FzKSA/IC0xIDogMCA9PT0gbWFza2FzLmluZGV4T2YobWFza2JzKSA/IDEgOiBtYXNrYS5sb2NhbGVDb21wYXJlKG1hc2tiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYW5hbHlzZU1hc2tCYXNlID0gSW5wdXRtYXNrLnByb3RvdHlwZS5hbmFseXNlTWFzaztcbiAgICAgICAgcmV0dXJuIElucHV0bWFzay5wcm90b3R5cGUuYW5hbHlzZU1hc2sgPSBmdW5jdGlvbihtYXNrLCByZWdleE1hc2ssIG9wdHMpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlZHVjZVZhcmlhdGlvbnMobWFza3MsIHByZXZpb3VzVmFyaWF0aW9uLCBwcmV2aW91c21hc2tHcm91cCkge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzVmFyaWF0aW9uID0gcHJldmlvdXNWYXJpYXRpb24gfHwgXCJcIiwgcHJldmlvdXNtYXNrR3JvdXAgPSBwcmV2aW91c21hc2tHcm91cCB8fCBtYXNrR3JvdXBzLCBcbiAgICAgICAgICAgICAgICBcIlwiICE9PSBwcmV2aW91c1ZhcmlhdGlvbiAmJiAocHJldmlvdXNtYXNrR3JvdXBbcHJldmlvdXNWYXJpYXRpb25dID0ge30pO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHZhcmlhdGlvbiA9IFwiXCIsIG1hc2tHcm91cCA9IHByZXZpb3VzbWFza0dyb3VwW3ByZXZpb3VzVmFyaWF0aW9uXSB8fCBwcmV2aW91c21hc2tHcm91cCwgaSA9IG1hc2tzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBtYXNrR3JvdXBbdmFyaWF0aW9uID0gKG1hc2sgPSBtYXNrc1tpXS5tYXNrIHx8IG1hc2tzW2ldKS5zdWJzdHIoMCwgMSldID0gbWFza0dyb3VwW3ZhcmlhdGlvbl0gfHwgW10sIFxuICAgICAgICAgICAgICAgIG1hc2tHcm91cFt2YXJpYXRpb25dLnVuc2hpZnQobWFzay5zdWJzdHIoMSkpLCBtYXNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4IGluIG1hc2tHcm91cCkgbWFza0dyb3VwW25keF0ubGVuZ3RoID4gNTAwICYmIHJlZHVjZVZhcmlhdGlvbnMobWFza0dyb3VwW25keF0uc2xpY2UoKSwgbmR4LCBtYXNrR3JvdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcmVidWlsZChtYXNrR3JvdXApIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFzayA9IFwiXCIsIHN1Ym1hc2tzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4IGluIG1hc2tHcm91cCkgJC5pc0FycmF5KG1hc2tHcm91cFtuZHhdKSA/IDEgPT09IG1hc2tHcm91cFtuZHhdLmxlbmd0aCA/IHN1Ym1hc2tzLnB1c2gobmR4ICsgbWFza0dyb3VwW25keF0pIDogc3VibWFza3MucHVzaChuZHggKyBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0ICsgbWFza0dyb3VwW25keF0uam9pbihvcHRzLmdyb3VwbWFya2VyLmVuZCArIG9wdHMuYWx0ZXJuYXRvcm1hcmtlciArIG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQpICsgb3B0cy5ncm91cG1hcmtlci5lbmQpIDogc3VibWFza3MucHVzaChuZHggKyByZWJ1aWxkKG1hc2tHcm91cFtuZHhdKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgPT09IHN1Ym1hc2tzLmxlbmd0aCA/IG1hc2sgKz0gc3VibWFza3NbMF0gOiBtYXNrICs9IG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQgKyBzdWJtYXNrcy5qb2luKG9wdHMuZ3JvdXBtYXJrZXIuZW5kICsgb3B0cy5hbHRlcm5hdG9ybWFya2VyICsgb3B0cy5ncm91cG1hcmtlci5zdGFydCkgKyBvcHRzLmdyb3VwbWFya2VyLmVuZCwgXG4gICAgICAgICAgICAgICAgbWFzaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtYXNrR3JvdXBzID0ge307XG4gICAgICAgICAgICByZXR1cm4gb3B0cy5waG9uZUNvZGVzICYmIChvcHRzLnBob25lQ29kZXMgJiYgb3B0cy5waG9uZUNvZGVzLmxlbmd0aCA+IDFlMyAmJiAocmVkdWNlVmFyaWF0aW9ucygobWFzayA9IG1hc2suc3Vic3RyKDEsIG1hc2subGVuZ3RoIC0gMikpLnNwbGl0KG9wdHMuZ3JvdXBtYXJrZXIuZW5kICsgb3B0cy5hbHRlcm5hdG9ybWFya2VyICsgb3B0cy5ncm91cG1hcmtlci5zdGFydCkpLCBcbiAgICAgICAgICAgIG1hc2sgPSByZWJ1aWxkKG1hc2tHcm91cHMpKSwgbWFzayA9IG1hc2sucmVwbGFjZSgvOS9nLCBcIlxcXFw5XCIpKSwgYW5hbHlzZU1hc2tCYXNlLmNhbGwodGhpcywgbWFzaywgcmVnZXhNYXNrLCBvcHRzKTtcbiAgICAgICAgfSwgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xuICAgICAgICAgICAgYWJzdHJhY3RwaG9uZToge1xuICAgICAgICAgICAgICAgIGdyb3VwbWFya2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBcIjxcIixcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBcIj5cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY291bnRyeWNvZGU6IFwiXCIsXG4gICAgICAgICAgICAgICAgcGhvbmVDb2RlczogW10sXG4gICAgICAgICAgICAgICAgbWFzazogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5kZWZpbml0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiI1wiOiBJbnB1dG1hc2sucHJvdG90eXBlLmRlZmluaXRpb25zWzldXG4gICAgICAgICAgICAgICAgICAgIH0sIG9wdHMucGhvbmVDb2Rlcy5zb3J0KG1hc2tTb3J0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGtlZXBTdGF0aWM6ICEwLFxuICAgICAgICAgICAgICAgIG9uQmVmb3JlTWFzazogZnVuY3Rpb24odmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gdmFsdWUucmVwbGFjZSgvXjB7MSwyfS8sIFwiXCIpLnJlcGxhY2UoL1tcXHNdL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHByb2Nlc3NlZFZhbHVlLmluZGV4T2Yob3B0cy5jb3VudHJ5Y29kZSkgPiAxIHx8IC0xID09PSBwcm9jZXNzZWRWYWx1ZS5pbmRleE9mKG9wdHMuY291bnRyeWNvZGUpKSAmJiAocHJvY2Vzc2VkVmFsdWUgPSBcIitcIiArIG9wdHMuY291bnRyeWNvZGUgKyBwcm9jZXNzZWRWYWx1ZSksIFxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFza2VkVmFsdWUucmVwbGFjZSgvWygpIy1dL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5wdXRtb2RlOiBcInRlbFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBJbnB1dG1hc2s7XG4gICAgfSk7XG59LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXztcbiAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gICAgIWZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAgICAgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFsgX193ZWJwYWNrX3JlcXVpcmVfXygwKSwgX193ZWJwYWNrX3JlcXVpcmVfXygxKSBdLCBcbiAgICAgICAgdm9pZCAwICE9PSAoX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSBmYWN0b3J5KSA/IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXykgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pO1xuICAgIH0oZnVuY3Rpb24oJCwgSW5wdXRtYXNrKSB7XG4gICAgICAgIHJldHVybiBJbnB1dG1hc2suZXh0ZW5kQWxpYXNlcyh7XG4gICAgICAgICAgICBSZWdleDoge1xuICAgICAgICAgICAgICAgIG1hc2s6IFwiclwiLFxuICAgICAgICAgICAgICAgIGdyZWVkeTogITEsXG4gICAgICAgICAgICAgICAgcmVwZWF0OiBcIipcIixcbiAgICAgICAgICAgICAgICByZWdleDogbnVsbCxcbiAgICAgICAgICAgICAgICByZWdleFRva2VuczogbnVsbCxcbiAgICAgICAgICAgICAgICB0b2tlbml6ZXI6IC9cXFtcXF4/XT8oPzpbXlxcXFxcXF1dK3xcXFxcW1xcU1xcc10/KSpdP3xcXFxcKD86MCg/OlswLTNdWzAtN117MCwyfXxbNC03XVswLTddPyk/fFsxLTldWzAtOV0qfHhbMC05QS1GYS1mXXsyfXx1WzAtOUEtRmEtZl17NH18Y1tBLVphLXpdfFtcXFNcXHNdPyl8XFwoKD86XFw/Wzo9IV0/KT98KD86Wz8qK118XFx7WzAtOV0rKD86LFswLTldKik/XFx9KVxcPz98W14uPyorXiR7WygpfFxcXFxdK3wuL2csXG4gICAgICAgICAgICAgICAgcXVhbnRpZmllckZpbHRlcjogL1swLTldK1teLF0vLFxuICAgICAgICAgICAgICAgIGlzQ29tcGxldGU6IGZ1bmN0aW9uKGJ1ZmZlciwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChvcHRzLnJlZ2V4LCBvcHRzLmNhc2luZyA/IFwiaVwiIDogXCJcIikudGVzdChidWZmZXIuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICByOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUmVnZXhUb2tlbihpc0dyb3VwLCBpc1F1YW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVzID0gW10sIHRoaXMuaXNHcm91cCA9IGlzR3JvdXAgfHwgITEsIHRoaXMuaXNRdWFudGlmaWVyID0gaXNRdWFudGlmaWVyIHx8ICExLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWFudGlmaWVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMucmVwZWF0ZXJQYXJ0ID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZVJlZ2V4VG9rZW4odG9rZW4sIGZyb21Hcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXN2YWxpZCA9ICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tR3JvdXAgJiYgKHJlZ2V4UGFydCArPSBcIihcIiwgb3Blbkdyb3VwQ291bnQrKyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgdG9rZW4ubWF0Y2hlcy5sZW5ndGg7IG1uZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoVG9rZW4gPSB0b2tlbi5tYXRjaGVzW21uZHhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEwID09PSBtYXRjaFRva2VuLmlzR3JvdXApIGlzdmFsaWQgPSB2YWxpZGF0ZVJlZ2V4VG9rZW4obWF0Y2hUb2tlbiwgITApOyBlbHNlIGlmICghMCA9PT0gbWF0Y2hUb2tlbi5pc1F1YW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JybnRuZHggPSAkLmluQXJyYXkobWF0Y2hUb2tlbiwgdG9rZW4ubWF0Y2hlcyksIG1hdGNoR3JvdXAgPSB0b2tlbi5tYXRjaGVzW2Nycm50bmR4IC0gMV0sIHJlZ2V4UGFydEJhayA9IHJlZ2V4UGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4obWF0Y2hUb2tlbi5xdWFudGlmaWVyLm1heCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7bWF0Y2hUb2tlbi5yZXBlYXRlclBhcnQgJiYgbWF0Y2hUb2tlbi5yZXBlYXRlclBhcnQgIT09IHJlZ2V4UGFydCAmJiBtYXRjaFRva2VuLnJlcGVhdGVyUGFydC5sZW5ndGggPiByZWdleFBhcnQubGVuZ3RoICYmICEoaXN2YWxpZCA9IHZhbGlkYXRlUmVnZXhUb2tlbihtYXRjaEdyb3VwLCAhMCkpOyApIDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlzdmFsaWQgPSBpc3ZhbGlkIHx8IHZhbGlkYXRlUmVnZXhUb2tlbihtYXRjaEdyb3VwLCAhMCkpICYmIChtYXRjaFRva2VuLnJlcGVhdGVyUGFydCA9IHJlZ2V4UGFydCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleFBhcnQgPSByZWdleFBhcnRCYWsgKyBtYXRjaFRva2VuLnF1YW50aWZpZXIubWF4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBxbSA9IG1hdGNoVG9rZW4ucXVhbnRpZmllci5tYXggLSAxOyBpIDwgcW0gJiYgIShpc3ZhbGlkID0gdmFsaWRhdGVSZWdleFRva2VuKG1hdGNoR3JvdXAsICEwKSk7IGkrKykgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleFBhcnQgPSByZWdleFBhcnRCYWsgKyBcIntcIiArIG1hdGNoVG9rZW4ucXVhbnRpZmllci5taW4gKyBcIixcIiArIG1hdGNoVG9rZW4ucXVhbnRpZmllci5tYXggKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZvaWQgMCAhPT0gbWF0Y2hUb2tlbi5tYXRjaGVzKSBmb3IgKHZhciBrID0gMDsgayA8IG1hdGNoVG9rZW4ubGVuZ3RoICYmICEoaXN2YWxpZCA9IHZhbGlkYXRlUmVnZXhUb2tlbihtYXRjaFRva2VuW2tdLCBmcm9tR3JvdXApKTsgaysrKSA7IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0RXhwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIltcIiA9PSBtYXRjaFRva2VuLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0RXhwID0gcmVnZXhQYXJ0LCB0ZXN0RXhwICs9IG1hdGNoVG9rZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBvcGVuR3JvdXBDb3VudDsgaisrKSB0ZXN0RXhwICs9IFwiKVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc3ZhbGlkID0gKGV4cCA9IG5ldyBSZWdFeHAoXCJeKFwiICsgdGVzdEV4cCArIFwiKSRcIiwgb3B0cy5jYXNpbmcgPyBcImlcIiA6IFwiXCIpKS50ZXN0KGJ1ZmZlclN0cik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGZvciAodmFyIGwgPSAwLCB0bCA9IG1hdGNoVG9rZW4ubGVuZ3RoOyBsIDwgdGw7IGwrKykgaWYgKFwiXFxcXFwiICE9PSBtYXRjaFRva2VuLmNoYXJBdChsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0RXhwID0gcmVnZXhQYXJ0LCB0ZXN0RXhwID0gKHRlc3RFeHAgKz0gbWF0Y2hUb2tlbi5zdWJzdHIoMCwgbCArIDEpKS5yZXBsYWNlKC9cXHwkLywgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb3Blbkdyb3VwQ291bnQ7IGorKykgdGVzdEV4cCArPSBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cCA9IG5ldyBSZWdFeHAoXCJeKFwiICsgdGVzdEV4cCArIFwiKSRcIiwgb3B0cy5jYXNpbmcgPyBcImlcIiA6IFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXN2YWxpZCA9IGV4cC50ZXN0KGJ1ZmZlclN0cikpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleFBhcnQgKz0gbWF0Y2hUb2tlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3ZhbGlkKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJvbUdyb3VwICYmIChyZWdleFBhcnQgKz0gXCIpXCIsIG9wZW5Hcm91cENvdW50LS0pLCBpc3ZhbGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyU3RyLCBncm91cFRva2VuLCBjYnVmZmVyID0gbWFza3NldC5idWZmZXIuc2xpY2UoKSwgcmVnZXhQYXJ0ID0gXCJcIiwgaXNWYWxpZCA9ICExLCBvcGVuR3JvdXBDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA9PT0gb3B0cy5yZWdleFRva2VucyAmJiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoLCBtLCBjdXJyZW50VG9rZW4gPSBuZXcgUmVnZXhUb2tlbigpLCBvcGVuZ3JvdXBzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAob3B0cy5yZWdleFRva2VucyA9IFtdOyBtYXRjaCA9IG9wdHMudG9rZW5pemVyLmV4ZWMob3B0cy5yZWdleCk7ICkgc3dpdGNoICgobSA9IG1hdGNoWzBdKS5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiKFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Blbmdyb3Vwcy5wdXNoKG5ldyBSZWdleFRva2VuKCEwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIpXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cFRva2VuID0gb3Blbmdyb3Vwcy5wb3AoKSwgb3Blbmdyb3Vwcy5sZW5ndGggPiAwID8gb3Blbmdyb3Vwc1tvcGVuZ3JvdXBzLmxlbmd0aCAtIDFdLm1hdGNoZXMucHVzaChncm91cFRva2VuKSA6IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2goZ3JvdXBUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ7XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIitcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiKlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1YW50aWZpZXJUb2tlbiA9IG5ldyBSZWdleFRva2VuKCExLCAhMCksIG1xID0gKG0gPSBtLnJlcGxhY2UoL1t7fV0vZywgXCJcIikpLnNwbGl0KFwiLFwiKSwgbXEwID0gaXNOYU4obXFbMF0pID8gbXFbMF0gOiBwYXJzZUludChtcVswXSksIG1xMSA9IDEgPT09IG1xLmxlbmd0aCA/IG1xMCA6IGlzTmFOKG1xWzFdKSA/IG1xWzFdIDogcGFyc2VJbnQobXFbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1YW50aWZpZXJUb2tlbi5xdWFudGlmaWVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogbXEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heDogbXExXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBvcGVuZ3JvdXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IG9wZW5ncm91cHNbb3Blbmdyb3Vwcy5sZW5ndGggLSAxXS5tYXRjaGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYXRjaCA9IG1hdGNoZXMucG9wKCkpLmlzR3JvdXAgfHwgKChncm91cFRva2VuID0gbmV3IFJlZ2V4VG9rZW4oITApKS5tYXRjaGVzLnB1c2gobWF0Y2gpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGdyb3VwVG9rZW4pLCBtYXRjaGVzLnB1c2gobWF0Y2gpLCBtYXRjaGVzLnB1c2gocXVhbnRpZmllclRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAobWF0Y2ggPSBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wb3AoKSkuaXNHcm91cCB8fCAoKGdyb3VwVG9rZW4gPSBuZXcgUmVnZXhUb2tlbighMCkpLm1hdGNoZXMucHVzaChtYXRjaCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBncm91cFRva2VuKSwgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChtYXRjaCksIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gocXVhbnRpZmllclRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5ncm91cHMubGVuZ3RoID4gMCA/IG9wZW5ncm91cHNbb3Blbmdyb3Vwcy5sZW5ndGggLSAxXS5tYXRjaGVzLnB1c2gobSkgOiBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKG0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCA+IDAgJiYgb3B0cy5yZWdleFRva2Vucy5wdXNoKGN1cnJlbnRUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSgpLCBjYnVmZmVyLnNwbGljZShwb3MsIDAsIGNocnMpLCBidWZmZXJTdHIgPSBjYnVmZmVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRzLnJlZ2V4VG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWdleFRva2VuID0gb3B0cy5yZWdleFRva2Vuc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgPSB2YWxpZGF0ZVJlZ2V4VG9rZW4ocmVnZXhUb2tlbiwgcmVnZXhUb2tlbi5pc0dyb3VwKSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCBJbnB1dG1hc2s7XG4gICAgfSk7XG59LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXywgX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9IDogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgICAhZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgICAgICBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gWyBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpIF0sIFxuICAgICAgICB2b2lkIDAgIT09IChfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IGZhY3RvcnkpID8gX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyk7XG4gICAgfShmdW5jdGlvbigkLCBJbnB1dG1hc2spIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gJC5mbi5pbnB1dG1hc2sgJiYgKCQuZm4uaW5wdXRtYXNrID0gZnVuY3Rpb24oZm4sIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBucHRtYXNrLCBpbnB1dCA9IHRoaXNbMF07XG4gICAgICAgICAgICBpZiAodm9pZCAwID09PSBvcHRpb25zICYmIChvcHRpb25zID0ge30pLCBcInN0cmluZ1wiID09IHR5cGVvZiBmbikgc3dpdGNoIChmbikge1xuICAgICAgICAgICAgICBjYXNlIFwidW5tYXNrZWR2YWx1ZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCAmJiBpbnB1dC5pbnB1dG1hc2sgPyBpbnB1dC5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpIDogJChpbnB1dCkudmFsKCk7XG5cbiAgICAgICAgICAgICAgY2FzZSBcInJlbW92ZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRtYXNrICYmIHRoaXMuaW5wdXRtYXNrLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJnZXRlbXB0eW1hc2tcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgJiYgaW5wdXQuaW5wdXRtYXNrID8gaW5wdXQuaW5wdXRtYXNrLmdldGVtcHR5bWFzaygpIDogXCJcIjtcblxuICAgICAgICAgICAgICBjYXNlIFwiaGFzTWFza2VkVmFsdWVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gISghaW5wdXQgfHwgIWlucHV0LmlucHV0bWFzaykgJiYgaW5wdXQuaW5wdXRtYXNrLmhhc01hc2tlZFZhbHVlKCk7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImlzQ29tcGxldGVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlucHV0IHx8ICFpbnB1dC5pbnB1dG1hc2sgfHwgaW5wdXQuaW5wdXRtYXNrLmlzQ29tcGxldGUoKTtcblxuICAgICAgICAgICAgICBjYXNlIFwiZ2V0bWV0YWRhdGFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgJiYgaW5wdXQuaW5wdXRtYXNrID8gaW5wdXQuaW5wdXRtYXNrLmdldG1ldGFkYXRhKCkgOiB2b2lkIDA7XG5cbiAgICAgICAgICAgICAgY2FzZSBcInNldHZhbHVlXCI6XG4gICAgICAgICAgICAgICAgJChpbnB1dCkudmFsKG9wdGlvbnMpLCBpbnB1dCAmJiB2b2lkIDAgPT09IGlucHV0LmlucHV0bWFzayAmJiAkKGlucHV0KS50cmlnZ2VySGFuZGxlcihcInNldHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJvcHRpb25cIjpcbiAgICAgICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2Ygb3B0aW9ucykgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gdGhpcy5pbnB1dG1hc2spIHJldHVybiB0aGlzLmlucHV0bWFzay5vcHRpb24ob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ICYmIHZvaWQgMCAhPT0gaW5wdXQuaW5wdXRtYXNrKSByZXR1cm4gaW5wdXQuaW5wdXRtYXNrLm9wdGlvbihvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmFsaWFzID0gZm4sIG5wdG1hc2sgPSBuZXcgSW5wdXRtYXNrKG9wdGlvbnMpLCB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIG5wdG1hc2subWFzayh0aGlzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKFwib2JqZWN0XCIgPT0gKHZvaWQgMCA9PT0gZm4gPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihmbikpKSByZXR1cm4gbnB0bWFzayA9IG5ldyBJbnB1dG1hc2soZm4pLCBcbiAgICAgICAgICAgICAgICB2b2lkIDAgPT09IGZuLm1hc2sgJiYgdm9pZCAwID09PSBmbi5hbGlhcyA/IHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gdGhpcy5pbnB1dG1hc2spIHJldHVybiB0aGlzLmlucHV0bWFzay5vcHRpb24oZm4pO1xuICAgICAgICAgICAgICAgICAgICBucHRtYXNrLm1hc2sodGhpcyk7XG4gICAgICAgICAgICAgICAgfSkgOiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIG5wdG1hc2subWFzayh0aGlzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBmbikgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgKG5wdG1hc2sgPSBuZXcgSW5wdXRtYXNrKG9wdGlvbnMpKS5tYXNrKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgJC5mbi5pbnB1dG1hc2s7XG4gICAgfSk7XG59IF0pOyIsIihmdW5jdGlvbigpIHtcbiAgICAvL2h0dHBzOi8vY2htbG4uZ2l0aHViLmlvL2ZsYXRwaWNrci9cblxuICAgICQoJ1tkYXRhLWZsYXRwaWNrcl0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBsb2NhbGU6ICdydScsXG4gICAgICAgICAgICAgICAgZGF0ZUZvcm1hdDogJ2QubS5ZJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFsdE9wdGlvbnMgPSAkKHRoaXMpLmRhdGEoJ2ZsYXRwaWNrcicpO1xuXG4gICAgICAgIGZvciAodmFyIG9wdGlvbiBpbiBhbHRPcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zW29wdGlvbl0gPSBhbHRPcHRpb25zW29wdGlvbl07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdW50aWxUb2RheSA9ICQodGhpcykuZGF0YSgndW50aWx0b2RheScpO1xuXG4gICAgICAgIGlmICh1bnRpbFRvZGF5KSB7XG4gICAgICAgICAgICBvcHRpb25zWydkaXNhYmxlJ10gPSBbXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZSA+IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcykuZmxhdHBpY2tyKG9wdGlvbnMpO1xuICAgIH0pXG59KSgpO1xuIiwiLyogZmxhdHBpY2tyIHY0LjEuNCwgQGxpY2Vuc2UgTUlUICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG5cdChmYWN0b3J5KChnbG9iYWwucnUgPSB7fSkpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIGZwID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuZmxhdHBpY2tyICE9PSB1bmRlZmluZWRcclxuICAgID8gd2luZG93LmZsYXRwaWNrclxyXG4gICAgOiB7XHJcbiAgICAgICAgbDEwbnM6IHt9LFxyXG4gICAgfTtcclxudmFyIFJ1c3NpYW4gPSB7XHJcbiAgICBmaXJzdERheU9mV2VlazogMSxcclxuICAgIHdlZWtkYXlzOiB7XHJcbiAgICAgICAgc2hvcnRoYW5kOiBbXCLQktGBXCIsIFwi0J/QvVwiLCBcItCS0YJcIiwgXCLQodGAXCIsIFwi0KfRglwiLCBcItCf0YJcIiwgXCLQodCxXCJdLFxyXG4gICAgICAgIGxvbmdoYW5kOiBbXHJcbiAgICAgICAgICAgIFwi0JLQvtGB0LrRgNC10YHQtdC90YzQtVwiLFxyXG4gICAgICAgICAgICBcItCf0L7QvdC10LTQtdC70YzQvdC40LpcIixcclxuICAgICAgICAgICAgXCLQktGC0L7RgNC90LjQulwiLFxyXG4gICAgICAgICAgICBcItCh0YDQtdC00LBcIixcclxuICAgICAgICAgICAgXCLQp9C10YLQstC10YDQs1wiLFxyXG4gICAgICAgICAgICBcItCf0Y/RgtC90LjRhtCwXCIsXHJcbiAgICAgICAgICAgIFwi0KHRg9Cx0LHQvtGC0LBcIixcclxuICAgICAgICBdLFxyXG4gICAgfSxcclxuICAgIG1vbnRoczoge1xyXG4gICAgICAgIHNob3J0aGFuZDogW1xyXG4gICAgICAgICAgICBcItCv0L3QslwiLFxyXG4gICAgICAgICAgICBcItCk0LXQslwiLFxyXG4gICAgICAgICAgICBcItCc0LDRgNGCXCIsXHJcbiAgICAgICAgICAgIFwi0JDQv9GAXCIsXHJcbiAgICAgICAgICAgIFwi0JzQsNC5XCIsXHJcbiAgICAgICAgICAgIFwi0JjRjtC90YxcIixcclxuICAgICAgICAgICAgXCLQmNGO0LvRjFwiLFxyXG4gICAgICAgICAgICBcItCQ0LLQs1wiLFxyXG4gICAgICAgICAgICBcItCh0LXQvVwiLFxyXG4gICAgICAgICAgICBcItCe0LrRglwiLFxyXG4gICAgICAgICAgICBcItCd0L7Rj1wiLFxyXG4gICAgICAgICAgICBcItCU0LXQulwiLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgbG9uZ2hhbmQ6IFtcclxuICAgICAgICAgICAgXCLQr9C90LLQsNGA0YxcIixcclxuICAgICAgICAgICAgXCLQpNC10LLRgNCw0LvRjFwiLFxyXG4gICAgICAgICAgICBcItCc0LDRgNGCXCIsXHJcbiAgICAgICAgICAgIFwi0JDQv9GA0LXQu9GMXCIsXHJcbiAgICAgICAgICAgIFwi0JzQsNC5XCIsXHJcbiAgICAgICAgICAgIFwi0JjRjtC90YxcIixcclxuICAgICAgICAgICAgXCLQmNGO0LvRjFwiLFxyXG4gICAgICAgICAgICBcItCQ0LLQs9GD0YHRglwiLFxyXG4gICAgICAgICAgICBcItCh0LXQvdGC0Y/QsdGA0YxcIixcclxuICAgICAgICAgICAgXCLQntC60YLRj9Cx0YDRjFwiLFxyXG4gICAgICAgICAgICBcItCd0L7Rj9Cx0YDRjFwiLFxyXG4gICAgICAgICAgICBcItCU0LXQutCw0LHRgNGMXCIsXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbiAgICByYW5nZVNlcGFyYXRvcjogXCIg4oCUIFwiLFxyXG4gICAgc2Nyb2xsVGl0bGU6IFwi0J/RgNC+0LrRgNGD0YLQuNGC0LUg0LTQu9GPINGD0LLQtdC70LjRh9C10L3QuNGPXCIsXHJcbiAgICB0b2dnbGVUaXRsZTogXCLQndCw0LbQvNC40YLQtSDQtNC70Y8g0L/QtdGA0LXQutC70Y7Rh9C10L3QuNGPXCIsXHJcbn07XHJcbmZwLmwxMG5zLnJ1ID0gUnVzc2lhbjtcclxudmFyIHJ1ID0gZnAubDEwbnM7XG5cbmV4cG9ydHMuUnVzc2lhbiA9IFJ1c3NpYW47XG5leHBvcnRzWydkZWZhdWx0J10gPSBydTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC50aXBweSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgYnJvd3NlciA9IHt9O1xuXG5pZiAoaXNCcm93c2VyKSB7XG4gIGJyb3dzZXIuc3VwcG9ydGVkID0gJ3JlcXVlc3RBbmltYXRpb25GcmFtZScgaW4gd2luZG93O1xuICBicm93c2VyLnN1cHBvcnRzVG91Y2ggPSAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3c7XG4gIGJyb3dzZXIudXNpbmdUb3VjaCA9IGZhbHNlO1xuICBicm93c2VyLmR5bmFtaWNJbnB1dERldGVjdGlvbiA9IHRydWU7XG4gIGJyb3dzZXIuaU9TID0gL2lQaG9uZXxpUGFkfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSAmJiAhd2luZG93Lk1TU3RyZWFtO1xuICBicm93c2VyLm9uVXNlcklucHV0Q2hhbmdlID0gZnVuY3Rpb24gKCkge307XG4gIGJyb3dzZXIuX2V2ZW50TGlzdGVuZXJzQm91bmQgPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBTZWxlY3RvciBjb25zdGFudHMgdXNlZCBmb3IgZ3JhYmJpbmcgZWxlbWVudHNcbiAqL1xudmFyIHNlbGVjdG9ycyA9IHtcbiAgUE9QUEVSOiAnLnRpcHB5LXBvcHBlcicsXG4gIFRPT0xUSVA6ICcudGlwcHktdG9vbHRpcCcsXG4gIENPTlRFTlQ6ICcudGlwcHktY29udGVudCcsXG4gIEJBQ0tEUk9QOiAnLnRpcHB5LWJhY2tkcm9wJyxcbiAgQVJST1c6ICcudGlwcHktYXJyb3cnLFxuICBST1VORF9BUlJPVzogJy50aXBweS1yb3VuZGFycm93JyxcbiAgUkVGRVJFTkNFOiAnW2RhdGEtdGlwcHldJ1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBvcHRpb25zIGFwcGxpZWQgdG8gZWFjaCBpbnN0YW5jZVxuICAgKi9cbn07dmFyIGRlZmF1bHRzID0ge1xuICBwbGFjZW1lbnQ6ICd0b3AnLFxuICB0cmlnZ2VyOiAnbW91c2VlbnRlciBmb2N1cycsXG4gIGFuaW1hdGlvbjogJ3NoaWZ0LWF3YXknLFxuICBodG1sOiBmYWxzZSxcbiAgYW5pbWF0ZUZpbGw6IHRydWUsXG4gIGFycm93OiBmYWxzZSxcbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiBbMzUwLCAzMDBdLFxuICBpbnRlcmFjdGl2ZTogZmFsc2UsXG4gIGludGVyYWN0aXZlQm9yZGVyOiAyLFxuICB0aGVtZTogJ2RhcmsnLFxuICBzaXplOiAncmVndWxhcicsXG4gIGRpc3RhbmNlOiAxMCxcbiAgb2Zmc2V0OiAwLFxuICBoaWRlT25DbGljazogdHJ1ZSxcbiAgbXVsdGlwbGU6IGZhbHNlLFxuICBmb2xsb3dDdXJzb3I6IGZhbHNlLFxuICBpbmVydGlhOiBmYWxzZSxcbiAgdXBkYXRlRHVyYXRpb246IDM1MCxcbiAgc3RpY2t5OiBmYWxzZSxcbiAgYXBwZW5kVG86IGZ1bmN0aW9uIGFwcGVuZFRvKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9LFxuICB6SW5kZXg6IDk5OTksXG4gIHRvdWNoSG9sZDogZmFsc2UsXG4gIHBlcmZvcm1hbmNlOiBmYWxzZSxcbiAgZHluYW1pY1RpdGxlOiBmYWxzZSxcbiAgZmxpcDogdHJ1ZSxcbiAgZmxpcEJlaGF2aW9yOiAnZmxpcCcsXG4gIGFycm93VHlwZTogJ3NoYXJwJyxcbiAgYXJyb3dUcmFuc2Zvcm06ICcnLFxuICBtYXhXaWR0aDogJycsXG4gIHBvcHBlck9wdGlvbnM6IHt9LFxuICBjcmVhdGVQb3BwZXJJbnN0YW5jZU9uSW5pdDogZmFsc2UsXG4gIG9uU2hvdzogZnVuY3Rpb24gb25TaG93KCkge30sXG4gIG9uU2hvd246IGZ1bmN0aW9uIG9uU2hvd24oKSB7fSxcbiAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7fSxcbiAgb25IaWRkZW46IGZ1bmN0aW9uIG9uSGlkZGVuKCkge31cbn07XG5cbi8qKlxuICogVGhlIGtleXMgb2YgdGhlIGRlZmF1bHRzIG9iamVjdCBmb3IgcmVkdWNpbmcgZG93biBpbnRvIGEgbmV3IG9iamVjdFxuICogVXNlZCBpbiBgZ2V0SW5kaXZpZHVhbE9wdGlvbnMoKWBcbiAqL1xudmFyIGRlZmF1bHRzS2V5cyA9IGJyb3dzZXIuc3VwcG9ydGVkICYmIE9iamVjdC5rZXlzKGRlZmF1bHRzKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYW4gb2JqZWN0IGxpdGVyYWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGl0ZXJhbCh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyBiYXNlZCBvbiB0aGUgc2VsZWN0b3IgaW5wdXRcbiAqIEBwYXJhbSB7U3RyaW5nfEVsZW1lbnR8RWxlbWVudFtdfE5vZGVMaXN0fE9iamVjdH0gc2VsZWN0b3JcbiAqIEByZXR1cm4ge0VsZW1lbnRbXX1cbiAqL1xuZnVuY3Rpb24gZ2V0QXJyYXlPZkVsZW1lbnRzKHNlbGVjdG9yKSB7XG4gIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIEVsZW1lbnQgfHwgaXNPYmplY3RMaXRlcmFsKHNlbGVjdG9yKSkge1xuICAgIHJldHVybiBbc2VsZWN0b3JdO1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcbiAgICByZXR1cm4gW10uc2xpY2UuY2FsbChzZWxlY3Rvcik7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RvcikpIHtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCBwcm9wZXJ0eSAtIG9ubHkgYHdlYmtpdGAgaXMgbmVlZGVkLCBgbW96YCwgYG1zYCBhbmQgYG9gIGFyZSBvYnNvbGV0ZVxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gKiBAcmV0dXJuIHtTdHJpbmd9IC0gYnJvd3NlciBzdXBwb3J0ZWQgcHJlZml4ZWQgcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gcHJlZml4KHByb3BlcnR5KSB7XG4gIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ3dlYmtpdCddO1xuICB2YXIgdXBwZXJQcm9wID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9wcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgcHJlZml4ZWRQcm9wID0gX3ByZWZpeCA/ICcnICsgX3ByZWZpeCArIHVwcGVyUHJvcCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVtwcmVmaXhlZFByb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHByZWZpeGVkUHJvcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgcG9wcGVyIGVsZW1lbnQgdGhlbiByZXR1cm5zIGl0XG4gKiBAcGFyYW0ge051bWJlcn0gaWQgLSB0aGUgcG9wcGVyIGlkXG4gKiBAcGFyYW0ge1N0cmluZ30gdGl0bGUgLSB0aGUgdG9vbHRpcCdzIGB0aXRsZWAgYXR0cmlidXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGluZGl2aWR1YWwgb3B0aW9uc1xuICogQHJldHVybiB7RWxlbWVudH0gLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9wcGVyRWxlbWVudChpZCwgdGl0bGUsIG9wdGlvbnMpIHtcbiAgdmFyIHBsYWNlbWVudCA9IG9wdGlvbnMucGxhY2VtZW50LFxuICAgICAgZGlzdGFuY2UgPSBvcHRpb25zLmRpc3RhbmNlLFxuICAgICAgYXJyb3cgPSBvcHRpb25zLmFycm93LFxuICAgICAgYXJyb3dUeXBlID0gb3B0aW9ucy5hcnJvd1R5cGUsXG4gICAgICBhcnJvd1RyYW5zZm9ybSA9IG9wdGlvbnMuYXJyb3dUcmFuc2Zvcm0sXG4gICAgICBhbmltYXRlRmlsbCA9IG9wdGlvbnMuYW5pbWF0ZUZpbGwsXG4gICAgICBpbmVydGlhID0gb3B0aW9ucy5pbmVydGlhLFxuICAgICAgYW5pbWF0aW9uID0gb3B0aW9ucy5hbmltYXRpb24sXG4gICAgICBzaXplID0gb3B0aW9ucy5zaXplLFxuICAgICAgdGhlbWUgPSBvcHRpb25zLnRoZW1lLFxuICAgICAgaHRtbCA9IG9wdGlvbnMuaHRtbCxcbiAgICAgIHpJbmRleCA9IG9wdGlvbnMuekluZGV4LFxuICAgICAgaW50ZXJhY3RpdmUgPSBvcHRpb25zLmludGVyYWN0aXZlLFxuICAgICAgbWF4V2lkdGggPSBvcHRpb25zLm1heFdpZHRoO1xuXG5cbiAgdmFyIHBvcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwb3BwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICd0aXBweS1wb3BwZXInKTtcbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgncm9sZScsICd0b29sdGlwJyk7XG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3RpcHB5LScgKyBpZCk7XG4gIHBvcHBlci5zdHlsZS56SW5kZXggPSB6SW5kZXg7XG4gIHBvcHBlci5zdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXG4gIHZhciB0b29sdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdjbGFzcycsICd0aXBweS10b29sdGlwJyk7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCBzaXplKTtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0aW9uJywgYW5pbWF0aW9uKTtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZGVuJyk7XG5cbiAgdGhlbWUuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgdG9vbHRpcC5jbGFzc0xpc3QuYWRkKHQgKyAnLXRoZW1lJyk7XG4gIH0pO1xuXG4gIGlmIChhcnJvdykge1xuICAgIHZhciBfYXJyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBfYXJyb3cuc3R5bGVbcHJlZml4KCd0cmFuc2Zvcm0nKV0gPSBhcnJvd1RyYW5zZm9ybTtcblxuICAgIGlmIChhcnJvd1R5cGUgPT09ICdyb3VuZCcpIHtcbiAgICAgIF9hcnJvdy5jbGFzc0xpc3QuYWRkKCd0aXBweS1yb3VuZGFycm93Jyk7XG4gICAgICBfYXJyb3cuaW5uZXJIVE1MID0gJ1xcbiAgICAgIDxzdmcgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIHZpZXdCb3g9XCIwIDAgNjQgMjBcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHN0eWxlPVwiZmlsbC1ydWxlOmV2ZW5vZGQ7Y2xpcC1ydWxlOmV2ZW5vZGQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEuNDE0MjE7XCI+XFxuICAgICAgICA8ZyB0cmFuc2Zvcm09XCJtYXRyaXgoMS4wNDAwOSwwLDAsMS40NTEzOSwtMS4yNjI5NywtNjUuOTE0NSlcIj5cXG4gICAgICAgICAgPHBhdGggZD1cIk0xLjIxNCw1OS4xODVDMS4yMTQsNTkuMTg1IDEyLjg2OCw1OS45OTIgMjEuNSw1MS41NUMyOS44ODcsNDMuMzQ3IDMzLjg5OCw0My4zMDggNDIuNSw1MS41NUM1MS4zNTIsNjAuMDMxIDYyLjc0Nyw1OS4xODUgNjIuNzQ3LDU5LjE4NUwxLjIxNCw1OS4xODVaXCIvPlxcbiAgICAgICAgPC9nPlxcbiAgICAgIDwvc3ZnPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9hcnJvdy5jbGFzc0xpc3QuYWRkKCd0aXBweS1hcnJvdycpO1xuICAgIH1cblxuICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQoX2Fycm93KTtcbiAgfVxuXG4gIGlmIChhbmltYXRlRmlsbCkge1xuICAgIC8vIENyZWF0ZSBhbmltYXRlRmlsbCBjaXJjbGUgZWxlbWVudCBmb3IgYW5pbWF0aW9uXG4gICAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0ZWZpbGwnLCAnJyk7XG4gICAgdmFyIGNpcmNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZGVuJyk7XG4gICAgY2lyY2xlLmNsYXNzTGlzdC5hZGQoJ3RpcHB5LWJhY2tkcm9wJyk7XG4gICAgdG9vbHRpcC5hcHBlbmRDaGlsZChjaXJjbGUpO1xuICB9XG5cbiAgaWYgKGluZXJ0aWEpIHtcbiAgICAvLyBDaGFuZ2UgdHJhbnNpdGlvbiB0aW1pbmcgZnVuY3Rpb24gY3ViaWMgYmV6aWVyXG4gICAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW5lcnRpYScsICcnKTtcbiAgfVxuXG4gIGlmIChpbnRlcmFjdGl2ZSkge1xuICAgIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWludGVyYWN0aXZlJywgJycpO1xuICB9XG5cbiAgdmFyIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29udGVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3RpcHB5LWNvbnRlbnQnKTtcblxuICBpZiAoaHRtbCkge1xuICAgIHZhciB0ZW1wbGF0ZUlkID0gdm9pZCAwO1xuXG4gICAgaWYgKGh0bWwgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICBjb250ZW50LmFwcGVuZENoaWxkKGh0bWwpO1xuICAgICAgdGVtcGxhdGVJZCA9ICcjJyArIGh0bWwuaWQgfHwgJ3RpcHB5LWh0bWwtdGVtcGxhdGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50LmlubmVySFRNTCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaHRtbCkuaW5uZXJIVE1MO1xuICAgICAgdGVtcGxhdGVJZCA9IGh0bWw7XG4gICAgfVxuXG4gICAgcG9wcGVyLnNldEF0dHJpYnV0ZSgnZGF0YS1odG1sJywgJycpO1xuICAgIGludGVyYWN0aXZlICYmIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGVtcGxhdGUtaWQnLCB0ZW1wbGF0ZUlkKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZW50LmlubmVySFRNTCA9IHRpdGxlO1xuICB9XG5cbiAgdG9vbHRpcC5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgcG9wcGVyLmFwcGVuZENoaWxkKHRvb2x0aXApO1xuXG4gIHJldHVybiBwb3BwZXI7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRyaWdnZXIgYnkgYWRkaW5nIHRoZSBuZWNlc3NhcnkgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50VHlwZSAtIHRoZSBjdXN0b20gZXZlbnQgc3BlY2lmaWVkIGluIHRoZSBgdHJpZ2dlcmAgc2V0dGluZ1xuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kbGVycyAtIHRoZSBoYW5kbGVycyBmb3IgZWFjaCBldmVudFxuICogQHBhcmFtIHtCb29sZWFufSB0b3VjaEhvbGRcbiAqIEByZXR1cm4ge0FycmF5fSAtIGFycmF5IG9mIGxpc3RlbmVyIG9iamVjdHNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVHJpZ2dlcihldmVudFR5cGUsIHJlZmVyZW5jZSwgaGFuZGxlcnMsIHRvdWNoSG9sZCkge1xuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgaWYgKGV2ZW50VHlwZSA9PT0gJ21hbnVhbCcpIHJldHVybiBsaXN0ZW5lcnM7XG5cbiAgLy8gU2hvd1xuICByZWZlcmVuY2UuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXJzLmhhbmRsZVRyaWdnZXIpO1xuICBsaXN0ZW5lcnMucHVzaCh7XG4gICAgZXZlbnQ6IGV2ZW50VHlwZSxcbiAgICBoYW5kbGVyOiBoYW5kbGVycy5oYW5kbGVUcmlnZ2VyXG4gIH0pO1xuXG4gIC8vIEhpZGVcbiAgaWYgKGV2ZW50VHlwZSA9PT0gJ21vdXNlZW50ZXInKSB7XG4gICAgaWYgKGJyb3dzZXIuc3VwcG9ydHNUb3VjaCAmJiB0b3VjaEhvbGQpIHtcbiAgICAgIHJlZmVyZW5jZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlcnMuaGFuZGxlVHJpZ2dlcik7XG4gICAgICBsaXN0ZW5lcnMucHVzaCh7XG4gICAgICAgIGV2ZW50OiAndG91Y2hzdGFydCcsXG4gICAgICAgIGhhbmRsZXI6IGhhbmRsZXJzLmhhbmRsZVRyaWdnZXJcbiAgICAgIH0pO1xuICAgICAgcmVmZXJlbmNlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgaGFuZGxlcnMuaGFuZGxlTW91c2VsZWF2ZSk7XG4gICAgICBsaXN0ZW5lcnMucHVzaCh7XG4gICAgICAgIGV2ZW50OiAndG91Y2hlbmQnLFxuICAgICAgICBoYW5kbGVyOiBoYW5kbGVycy5oYW5kbGVNb3VzZWxlYXZlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZWZlcmVuY2UuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGhhbmRsZXJzLmhhbmRsZU1vdXNlbGVhdmUpO1xuICAgIGxpc3RlbmVycy5wdXNoKHtcbiAgICAgIGV2ZW50OiAnbW91c2VsZWF2ZScsXG4gICAgICBoYW5kbGVyOiBoYW5kbGVycy5oYW5kbGVNb3VzZWxlYXZlXG4gICAgfSk7XG4gIH1cblxuICBpZiAoZXZlbnRUeXBlID09PSAnZm9jdXMnKSB7XG4gICAgcmVmZXJlbmNlLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBoYW5kbGVycy5oYW5kbGVCbHVyKTtcbiAgICBsaXN0ZW5lcnMucHVzaCh7XG4gICAgICBldmVudDogJ2JsdXInLFxuICAgICAgaGFuZGxlcjogaGFuZGxlcnMuaGFuZGxlQmx1clxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGxpc3RlbmVycztcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG5cblxuXG5cblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Ygc2V0dGluZ3MgdG8gb3ZlcnJpZGUgZ2xvYmFsIHNldHRpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlT3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSAtIGluZGl2aWR1YWwgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBnZXRJbmRpdmlkdWFsT3B0aW9ucyhyZWZlcmVuY2UsIGluc3RhbmNlT3B0aW9ucykge1xuICB2YXIgb3B0aW9ucyA9IGRlZmF1bHRzS2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgdmFyIHZhbCA9IHJlZmVyZW5jZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcHktJyArIGtleS50b0xvd2VyQ2FzZSgpKSB8fCBpbnN0YW5jZU9wdGlvbnNba2V5XTtcblxuICAgIC8vIENvbnZlcnQgc3RyaW5ncyB0byBib29sZWFuc1xuICAgIGlmICh2YWwgPT09ICdmYWxzZScpIHZhbCA9IGZhbHNlO1xuICAgIGlmICh2YWwgPT09ICd0cnVlJykgdmFsID0gdHJ1ZTtcblxuICAgIC8vIENvbnZlcnQgbnVtYmVyIHN0cmluZ3MgdG8gdHJ1ZSBudW1iZXJzXG4gICAgaWYgKGlzRmluaXRlKHZhbCkgJiYgIWlzTmFOKHBhcnNlRmxvYXQodmFsKSkpIHtcbiAgICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsKTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IGFycmF5IHN0cmluZ3MgdG8gYWN0dWFsIGFycmF5c1xuICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiB2YWwudHJpbSgpLmNoYXJBdCgwKSA9PT0gJ1snKSB7XG4gICAgICB2YWwgPSBKU09OLnBhcnNlKHZhbCk7XG4gICAgfVxuXG4gICAgYWNjW2tleV0gPSB2YWw7XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBpbnN0YW5jZU9wdGlvbnMsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIEV2YWx1YXRlcy9tb2RpZmllcyB0aGUgb3B0aW9ucyBvYmplY3QgZm9yIGFwcHJvcHJpYXRlIGJlaGF2aW9yXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IG1vZGlmaWVkL2V2YWx1YXRlZCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGV2YWx1YXRlT3B0aW9ucyhyZWZlcmVuY2UsIG9wdGlvbnMpIHtcbiAgLy8gYW5pbWF0ZUZpbGwgaXMgZGlzYWJsZWQgaWYgYW4gYXJyb3cgaXMgdHJ1ZVxuICBpZiAob3B0aW9ucy5hcnJvdykge1xuICAgIG9wdGlvbnMuYW5pbWF0ZUZpbGwgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmFwcGVuZFRvICYmIHR5cGVvZiBvcHRpb25zLmFwcGVuZFRvID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5hcHBlbmRUbyA9IG9wdGlvbnMuYXBwZW5kVG8oKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5odG1sID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5odG1sID0gb3B0aW9ucy5odG1sKHJlZmVyZW5jZSk7XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGlubmVyIGVsZW1lbnRzIG9mIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0SW5uZXJFbGVtZW50cyhwb3BwZXIpIHtcbiAgcmV0dXJuIHtcbiAgICB0b29sdGlwOiBwb3BwZXIucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMuVE9PTFRJUCksXG4gICAgYmFja2Ryb3A6IHBvcHBlci5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5CQUNLRFJPUCksXG4gICAgY29udGVudDogcG9wcGVyLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzLkNPTlRFTlQpXG4gIH07XG59XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgdGl0bGUgZnJvbSBhbiBlbGVtZW50LCBzZXR0aW5nIGBkYXRhLW9yaWdpbmFsLXRpdGxlYFxuICogYXBwcm9wcmlhdGVseVxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICovXG5mdW5jdGlvbiByZW1vdmVUaXRsZShlbCkge1xuICB2YXIgdGl0bGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gIC8vIE9ubHkgc2V0IGBkYXRhLW9yaWdpbmFsLXRpdGxlYCBhdHRyIGlmIHRoZXJlIGlzIGEgdGl0bGVcbiAgaWYgKHRpdGxlKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgdGl0bGUpO1xuICB9XG4gIGVsLnJlbW92ZUF0dHJpYnV0ZSgndGl0bGUnKTtcbn1cblxuLyoqIVxuICogQGZpbGVPdmVydmlldyBLaWNrYXNzIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBwbGFjZSBwb3BwZXJzIG5lYXIgdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnRzLlxuICogQHZlcnNpb24gMS4xMi45XG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IEZlZGVyaWNvIFppdm9sbyBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqL1xudmFyIGlzQnJvd3NlciQxID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbnZhciBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107XG52YXIgdGltZW91dER1cmF0aW9uID0gMDtcbmZvciAodmFyIGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gIGlmIChpc0Jyb3dzZXIkMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgdGltZW91dER1cmF0aW9uID0gMTtcbiAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyJDEgJiYgd2luZG93LlByb21pc2U7XG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG52YXIgZGVib3VuY2UgPSBzdXBwb3J0c01pY3JvVGFza3MgPyBtaWNyb3Rhc2tEZWJvdW5jZSA6IHRhc2tEZWJvdW5jZTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcblxuICB2YXIgX2dldFN0eWxlQ29tcHV0ZWRQcm9wID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WTtcblxuICBpZiAoLyhhdXRvfHNjcm9sbCkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQgJiYgZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gIHZhciBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEQgb3IgVEFCTEUgaW4gY2FzZVxuICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uXG4gIGlmIChbJ1REJywgJ1RBQkxFJ10uaW5kZXhPZihvZmZzZXRQYXJlbnQubm9kZU5hbWUpICE9PSAtMSAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufVxuXG5mdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZVxuICovXG5mdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgdmFyIHN0YXJ0ID0gb3JkZXIgPyBlbGVtZW50MSA6IGVsZW1lbnQyO1xuICB2YXIgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIHZhciBjb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcblxuICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5mdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCkge1xuICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3RvcCc7XG5cbiAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCkge1xuICB2YXIgc3VidHJhY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbi8qXG4gKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xuICogUmVzdWx0IG9mIGBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHlgIG9uIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYXhpcyAtIGB4YCBvciBgeWBcbiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXNcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHtcbiAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIHZhciBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUEgKyAnV2lkdGgnXSwgMTApICsgcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQiArICdXaWR0aCddLCAxMCk7XG59XG5cbi8qKlxuICogVGVsbHMgaWYgeW91IGFyZSBydW5uaW5nIEludGVybmV0IEV4cGxvcmVyIDEwXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRTEwXG4gKi9cbnZhciBpc0lFMTAgPSB1bmRlZmluZWQ7XG5cbnZhciBpc0lFMTAkMSA9IGZ1bmN0aW9uIGlzSUUxMCQxKCkge1xuICBpZiAoaXNJRTEwID09PSB1bmRlZmluZWQpIHtcbiAgICBpc0lFMTAgPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdNU0lFIDEwJykgIT09IC0xO1xuICB9XG4gIHJldHVybiBpc0lFMTA7XG59O1xuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFMTAkMSgpID8gaHRtbFsnb2Zmc2V0JyArIGF4aXNdICsgY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdUb3AnIDogJ0xlZnQnKV0gKyBjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ0JvdHRvbScgOiAnUmlnaHQnKV0gOiAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoKSB7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gaXNJRTEwJDEoKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxuICB9O1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2skMSA9IGZ1bmN0aW9uIGNsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyQxID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkkMSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMkMSA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0c1xuICogQHJldHVybnMge09iamVjdH0gQ2xpZW50UmVjdCBsaWtlIG91dHB1dFxuICovXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzJDEoe30sIG9mZnNldHMsIHtcbiAgICByaWdodDogb2Zmc2V0cy5sZWZ0ICsgb2Zmc2V0cy53aWR0aCxcbiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHRcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIGlmIChpc0lFMTAkMSgpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuICB9IGVsc2Uge1xuICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgfTtcblxuICAvLyBzdWJ0cmFjdCBzY3JvbGxiYXIgc2l6ZSBmcm9tIHNpemVzXG4gIHZhciBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKCkgOiB7fTtcbiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQucmlnaHQgLSByZXN1bHQubGVmdDtcbiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuYm90dG9tIC0gcmVzdWx0LnRvcDtcblxuICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIHZhciB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcbiAgICBob3JpelNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd4Jyk7XG4gICAgdmVydFNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd5Jyk7XG5cbiAgICByZXN1bHQud2lkdGggLT0gaG9yaXpTY3JvbGxiYXI7XG4gICAgcmVzdWx0LmhlaWdodCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICB9XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgdmFyIGlzSUUxMCA9IGlzSUUxMCQxKCk7XG4gIHZhciBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJztcbiAgdmFyIGNoaWxkcmVuUmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChjaGlsZHJlbik7XG4gIHZhciBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pO1xuXG4gIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkocGFyZW50KTtcbiAgdmFyIGJvcmRlclRvcFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyVG9wV2lkdGgsIDEwKTtcbiAgdmFyIGJvcmRlckxlZnRXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCwgMTApO1xuXG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wLCAxMCk7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0LCAxMCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKGlzSUUxMCA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICB2YXIgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG5cbiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChodG1sKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKTtcblxuICB2YXIgb2Zmc2V0ID0ge1xuICAgIHRvcDogc2Nyb2xsVG9wIC0gcmVsYXRpdmVPZmZzZXQudG9wICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luVG9wLFxuICAgIGxlZnQ6IHNjcm9sbExlZnQgLSByZWxhdGl2ZU9mZnNldC5sZWZ0ICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luTGVmdCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkKGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG4vKipcbiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW1cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29yZGluYXRlcyBvZiB0aGUgYm91bmRhcmllc1xuICovXG5mdW5jdGlvbiBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgcmVmZXJlbmNlKTtcblxuICAvLyBIYW5kbGUgdmlld3BvcnQgY2FzZVxuICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd2aWV3cG9ydCcpIHtcbiAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSGFuZGxlIG90aGVyIGNhc2VzIGJhc2VkIG9uIERPTSBlbGVtZW50IHVzZWQgYXMgYm91bmRhcmllc1xuICAgIHZhciBib3VuZGFyaWVzTm9kZSA9IHZvaWQgMDtcbiAgICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKHJlZmVyZW5jZSkpO1xuICAgICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50O1xuICAgIH1cblxuICAgIHZhciBvZmZzZXRzID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGJvdW5kYXJpZXNOb2RlLCBvZmZzZXRQYXJlbnQpO1xuXG4gICAgLy8gSW4gY2FzZSBvZiBIVE1MLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGNvbXB1dGF0aW9uXG4gICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnSFRNTCcgJiYgIWlzRml4ZWQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgdmFyIF9nZXRXaW5kb3dTaXplcyA9IGdldFdpbmRvd1NpemVzKCksXG4gICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCxcbiAgICAgICAgICB3aWR0aCA9IF9nZXRXaW5kb3dTaXplcy53aWR0aDtcblxuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBib3VuZGFyaWVzLmxlZnQgKz0gcGFkZGluZztcbiAgYm91bmRhcmllcy50b3AgKz0gcGFkZGluZztcbiAgYm91bmRhcmllcy5yaWdodCAtPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBwYWRkaW5nO1xuXG4gIHJldHVybiBib3VuZGFyaWVzO1xufVxuXG5mdW5jdGlvbiBnZXRBcmVhKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuXG4gIHJldHVybiB3aWR0aCAqIGhlaWdodDtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IHVzZWQgdG8gdHJhbnNmb3JtIHRoZSBgYXV0b2AgcGxhY2VtZW50IHRvIHRoZSBwbGFjZW1lbnQgd2l0aCBtb3JlXG4gKiBhdmFpbGFibGUgc3BhY2UuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChwbGFjZW1lbnQsIHJlZlJlY3QsIHBvcHBlciwgcmVmZXJlbmNlLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgcGFkZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMDtcblxuICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ2F1dG8nKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCk7XG5cbiAgdmFyIHJlY3RzID0ge1xuICAgIHRvcDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlZlJlY3QudG9wIC0gYm91bmRhcmllcy50b3BcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy5yaWdodCAtIHJlZlJlY3QucmlnaHQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmJvdHRvbSAtIHJlZlJlY3QuYm90dG9tXG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICB3aWR0aDogcmVmUmVjdC5sZWZ0IC0gYm91bmRhcmllcy5sZWZ0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH1cbiAgfTtcblxuICB2YXIgc29ydGVkQXJlYXMgPSBPYmplY3Qua2V5cyhyZWN0cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMkMSh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICB2YXIgc3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3ApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tKTtcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0KSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblJpZ2h0KTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHhcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudFxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgdmFyIGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIHZhciBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgdmFyIHBvcHBlck9mZnNldHMgPSB7XG4gICAgd2lkdGg6IHBvcHBlclJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBwb3BwZXJSZWN0LmhlaWdodFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIHZhciBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICsgcmVmZXJlbmNlT2Zmc2V0c1ttZWFzdXJlbWVudF0gLyAyIC0gcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gLSBwb3BwZXJSZWN0W3NlY29uZGFyeU1lYXN1cmVtZW50XTtcbiAgfSBlbHNlIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cblxuLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJvcCwgdmFsdWUpIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoZnVuY3Rpb24gKGN1cikge1xuICAgICAgcmV0dXJuIGN1cltwcm9wXSA9PT0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICB2YXIgbWF0Y2ggPSBmaW5kKGFyciwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGFyci5pbmRleE9mKG1hdGNoKTtcbn1cblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XG5cbiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7XG4gICAgfVxuICAgIHZhciBmbiA9IG1vZGlmaWVyWydmdW5jdGlvbiddIHx8IG1vZGlmaWVyLmZuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIGlmIChtb2RpZmllci5lbmFibGVkICYmIGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAvLyBBZGQgcHJvcGVydGllcyB0byBvZmZzZXRzIHRvIG1ha2UgdGhlbSBhIGNvbXBsZXRlIGNsaWVudFJlY3Qgb2JqZWN0XG4gICAgICAvLyB3ZSBkbyB0aGlzIGJlZm9yZSBlYWNoIG1vZGlmaWVyIHRvIG1ha2Ugc3VyZSB0aGUgcHJldmlvdXMgb25lIGRvZXNuJ3RcbiAgICAgIC8vIG1lc3Mgd2l0aCB0aGVzZSB2YWx1ZXNcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSk7XG5cbiAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZ1xuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cbiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXG4gIGlmICh0aGlzLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSB7XG4gICAgaW5zdGFuY2U6IHRoaXMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBhcnJvd1N0eWxlczoge30sXG4gICAgYXR0cmlidXRlczoge30sXG4gICAgZmxpcHBlZDogZmFsc2UsXG4gICAgb2Zmc2V0czoge31cbiAgfTtcblxuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHModGhpcy5zdGF0ZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgZGF0YS5wbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudCh0aGlzLm9wdGlvbnMucGxhY2VtZW50LCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGBcbiAgZGF0YS5vcmlnaW5hbFBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gIC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKHRoaXMucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXG4gIC8vIHJ1biB0aGUgbW9kaWZpZXJzXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xuXG4gIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFja1xuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xuICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBpcyBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7XG4gIHJldHVybiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICBlbmFibGVkID0gX3JlZi5lbmFibGVkO1xuICAgIHJldHVybiBlbmFibGVkICYmIG5hbWUgPT09IG1vZGlmaWVyTmFtZTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddO1xuICB2YXIgdXBwZXJQcm9wID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgdG9DaGVjayA9IHByZWZpeCA/ICcnICsgcHJlZml4ICsgdXBwZXJQcm9wIDogcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRvQ2hlY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIERlc3Ryb3kgdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95XG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgIHRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufVxuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgdmFyIHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgb25VcGRhdGUgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUG9wcGVyLmpzIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBzdGF0ZSkge1xuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgdmFyIHJlZmVyZW5jZU9mZnNldHMgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIHZhciBwbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudChvcHRpb25zLnBsYWNlbWVudCwgcmVmZXJlbmNlT2Zmc2V0cywgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnLCBwbGFjZW1lbnQpO1xuXG4gIC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2VcbiAgLy8gd2l0aG91dCB0aGUgcG9zaXRpb24gYXBwbGllZCB3ZSBjYW4ndCBndWFyYW50ZWUgY29ycmVjdCBjb21wdXRhdGlvbnNcbiAgc2V0U3R5bGVzKHBvcHBlciwgeyBwb3NpdGlvbjogJ2Fic29sdXRlJyB9KTtcblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIHggPSBvcHRpb25zLngsXG4gICAgICB5ID0gb3B0aW9ucy55O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjJcblxuICB2YXIgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlJztcbiAgfSkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJyk7XG4gIH1cbiAgdmFyIGdwdUFjY2VsZXJhdGlvbiA9IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkID8gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIDogb3B0aW9ucy5ncHVBY2NlbGVyYXRpb247XG5cbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvblxuICB9O1xuXG4gIC8vIGZsb29yIHNpZGVzIHRvIGF2b2lkIGJsdXJyeSB0ZXh0XG4gIHZhciBvZmZzZXRzID0ge1xuICAgIGxlZnQ6IE1hdGguZmxvb3IocG9wcGVyLmxlZnQpLFxuICAgIHRvcDogTWF0aC5mbG9vcihwb3BwZXIudG9wKSxcbiAgICBib3R0b206IE1hdGguZmxvb3IocG9wcGVyLmJvdHRvbSksXG4gICAgcmlnaHQ6IE1hdGguZmxvb3IocG9wcGVyLnJpZ2h0KVxuICB9O1xuXG4gIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIHZhciBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICB2YXIgbGVmdCA9IHZvaWQgMCxcbiAgICAgIHRvcCA9IHZvaWQgMDtcbiAgaWYgKHNpZGVBID09PSAnYm90dG9tJykge1xuICAgIHRvcCA9IC1vZmZzZXRQYXJlbnRSZWN0LmhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICB9IGVsc2Uge1xuICAgIHRvcCA9IG9mZnNldHMudG9wO1xuICB9XG4gIGlmIChzaWRlQiA9PT0gJ3JpZ2h0Jykge1xuICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50UmVjdC53aWR0aCArIG9mZnNldHMucmlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgbGVmdCA9IG9mZnNldHMubGVmdDtcbiAgfVxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uICYmIHByZWZpeGVkUHJvcGVydHkpIHtcbiAgICBzdHlsZXNbcHJlZml4ZWRQcm9wZXJ0eV0gPSAndHJhbnNsYXRlM2QoJyArIGxlZnQgKyAncHgsICcgKyB0b3AgKyAncHgsIDApJztcbiAgICBzdHlsZXNbc2lkZUFdID0gMDtcbiAgICBzdHlsZXNbc2lkZUJdID0gMDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9ICd0cmFuc2Zvcm0nO1xuICB9IGVsc2Uge1xuICAgIC8vIG90aHdlcmlzZSwgd2UgdXNlIHRoZSBzdGFuZGFyZCBgdG9wYCwgYGxlZnRgLCBgYm90dG9tYCBhbmQgYHJpZ2h0YCBwcm9wZXJ0aWVzXG4gICAgdmFyIGludmVydFRvcCA9IHNpZGVBID09PSAnYm90dG9tJyA/IC0xIDogMTtcbiAgICB2YXIgaW52ZXJ0TGVmdCA9IHNpZGVCID09PSAncmlnaHQnID8gLTEgOiAxO1xuICAgIHN0eWxlc1tzaWRlQV0gPSB0b3AgKiBpbnZlcnRUb3A7XG4gICAgc3R5bGVzW3NpZGVCXSA9IGxlZnQgKiBpbnZlcnRMZWZ0O1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gc2lkZUEgKyAnLCAnICsgc2lkZUI7XG4gIH1cblxuICAvLyBBdHRyaWJ1dGVzXG4gIHZhciBhdHRyaWJ1dGVzID0ge1xuICAgICd4LXBsYWNlbWVudCc6IGRhdGEucGxhY2VtZW50XG4gIH07XG5cbiAgLy8gVXBkYXRlIGBkYXRhYCBhdHRyaWJ1dGVzLCBzdHlsZXMgYW5kIGFycm93U3R5bGVzXG4gIGRhdGEuYXR0cmlidXRlcyA9IF9leHRlbmRzJDEoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XG4gIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMkMSh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyQxKHt9LCBkYXRhLm9mZnNldHMuYXJyb3csIGRhdGEuYXJyb3dTdHlsZXMpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGRlcGVuZHMgZnJvbSBhbm90aGVyIG9uZS48YnIgLz5cbiAqIEl0IGNoZWNrcyBpZiB0aGUgbmVlZGVkIG1vZGlmaWVyIGlzIGxpc3RlZCBhbmQgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVycyAtIGxpc3Qgb2YgbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGluZ05hbWUgLSBuYW1lIG9mIHJlcXVlc3RpbmcgbW9kaWZpZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0ZWROYW1lIC0gbmFtZSBvZiByZXF1ZXN0ZWQgbW9kaWZpZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyUmVxdWlyZWQobW9kaWZpZXJzLCByZXF1ZXN0aW5nTmFtZSwgcmVxdWVzdGVkTmFtZSkge1xuICB2YXIgcmVxdWVzdGluZyA9IGZpbmQobW9kaWZpZXJzLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgIHJldHVybiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZTtcbiAgfSk7XG5cbiAgdmFyIGlzUmVxdWlyZWQgPSAhIXJlcXVlc3RpbmcgJiYgbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09IHJlcXVlc3RlZE5hbWUgJiYgbW9kaWZpZXIuZW5hYmxlZCAmJiBtb2RpZmllci5vcmRlciA8IHJlcXVlc3Rpbmcub3JkZXI7XG4gIH0pO1xuXG4gIGlmICghaXNSZXF1aXJlZCkge1xuICAgIHZhciBfcmVxdWVzdGluZyA9ICdgJyArIHJlcXVlc3RpbmdOYW1lICsgJ2AnO1xuICAgIHZhciByZXF1ZXN0ZWQgPSAnYCcgKyByZXF1ZXN0ZWROYW1lICsgJ2AnO1xuICAgIGNvbnNvbGUud2FybihyZXF1ZXN0ZWQgKyAnIG1vZGlmaWVyIGlzIHJlcXVpcmVkIGJ5ICcgKyBfcmVxdWVzdGluZyArICcgbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSAnICsgX3JlcXVlc3RpbmcgKyAnIScpO1xuICB9XG4gIHJldHVybiBpc1JlcXVpcmVkO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gYXJyb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyRhcnJvdztcblxuICAvLyBhcnJvdyBkZXBlbmRzIG9uIGtlZXBUb2dldGhlciBpbiBvcmRlciB0byB3b3JrXG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnYXJyb3cnLCAna2VlcFRvZ2V0aGVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGEgc3RyaW5nLCBzdXBwb3NlIGl0J3MgYSBDU1Mgc2VsZWN0b3JcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllclxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlIGFycm93RWxlbWVudCBpc24ndCBhIHF1ZXJ5IHNlbGVjdG9yIHdlIG11c3QgY2hlY2sgdGhhdCB0aGVcbiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGVcbiAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGFycm93LmVsZW1lbnRgIG11c3QgYmUgY2hpbGQgb2YgaXRzIHBvcHBlciBlbGVtZW50IScpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzaWRlQ2FwaXRhbGl6ZWQgPSBpc1ZlcnRpY2FsID8gJ1RvcCcgOiAnTGVmdCc7XG4gIHZhciBzaWRlID0gc2lkZUNhcGl0YWxpemVkLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBhbHRTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdib3R0b20nIDogJ3JpZ2h0JztcbiAgdmFyIGFycm93RWxlbWVudFNpemUgPSBnZXRPdXRlclNpemVzKGFycm93RWxlbWVudClbbGVuXTtcblxuICAvL1xuICAvLyBleHRlbmRzIGtlZXBUb2dldGhlciBiZWhhdmlvciBtYWtpbmcgc3VyZSB0aGUgcG9wcGVyIGFuZCBpdHNcbiAgLy8gcmVmZXJlbmNlIGhhdmUgZW5vdWdoIHBpeGVscyBpbiBjb25qdWN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPSByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSwgMTApO1xuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10sIDEwKTtcbiAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0gKF9kYXRhJG9mZnNldHMkYXJyb3cgPSB7fSwgZGVmaW5lUHJvcGVydHkkMShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eSQxKF9kYXRhJG9mZnNldHMkYXJyb3csIGFsdFNpZGUsICcnKSwgX2RhdGEkb2Zmc2V0cyRhcnJvdyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgdmFyaWF0aW9uIG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudCB2YXJpYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKSB7XG4gIGlmICh2YXJpYXRpb24gPT09ICdlbmQnKSB7XG4gICAgcmV0dXJuICdzdGFydCc7XG4gIH0gZWxzZSBpZiAodmFyaWF0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgcmV0dXJuICdlbmQnO1xuICB9XG4gIHJldHVybiB2YXJpYXRpb247XG59XG5cbi8qKlxuICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz5cbiAqIFZhbGlkIHBsYWNlbWVudHMgYXJlOlxuICogLSBgYXV0b2BcbiAqIC0gYHRvcGBcbiAqIC0gYHJpZ2h0YFxuICogLSBgYm90dG9tYFxuICogLSBgbGVmdGBcbiAqXG4gKiBFYWNoIHBsYWNlbWVudCBjYW4gaGF2ZSBhIHZhcmlhdGlvbiBmcm9tIHRoaXMgbGlzdDpcbiAqIC0gYC1zdGFydGBcbiAqIC0gYC1lbmRgXG4gKlxuICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0XG4gKiB3cml0dGVuIGxhbmd1YWdlcy4gSG9yaXpvbnRhbGx5IChgdG9wYCBhbmQgYGJvdHRvbWApLCBgc3RhcnRgIGlzIGxlZnQgYW5kIGBlbmRgXG4gKiBpcyByaWdodC48YnIgLz5cbiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uXG4gKlxuICogU29tZSB2YWxpZCBleGFtcGxlcyBhcmU6XG4gKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZClcbiAqIC0gYHJpZ2h0LXN0YXJ0YCAob24gcmlnaHQgb2YgcmVmZXJlbmNlLCB0b3AgYWxpZ25lZClcbiAqIC0gYGJvdHRvbWAgKG9uIGJvdHRvbSwgY2VudGVyZWQpXG4gKiAtIGBhdXRvLXJpZ2h0YCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCk7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdIHx8ICcnO1xuXG4gIHZhciBmbGlwT3JkZXIgPSBbXTtcblxuICBzd2l0Y2ggKG9wdGlvbnMuYmVoYXZpb3IpIHtcbiAgICBjYXNlIEJFSEFWSU9SUy5GTElQOlxuICAgICAgZmxpcE9yZGVyID0gW3BsYWNlbWVudCwgcGxhY2VtZW50T3Bwb3NpdGVdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DT1VOVEVSQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCwgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZmxpcE9yZGVyID0gb3B0aW9ucy5iZWhhdmlvcjtcbiAgfVxuXG4gIGZsaXBPcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwLCBpbmRleCkge1xuICAgIGlmIChwbGFjZW1lbnQgIT09IHN0ZXAgfHwgZmxpcE9yZGVyLmxlbmd0aCA9PT0gaW5kZXggKyAxKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICAgIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBwb3BwZXJPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcbiAgICB2YXIgcmVmT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgICAvLyB1c2luZyBmbG9vciBiZWNhdXNlIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyBtYXkgY29udGFpbiBkZWNpbWFscyB3ZSBhcmUgbm90IGdvaW5nIHRvIGNvbnNpZGVyIGhlcmVcbiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgIHZhciBvdmVybGFwc1JlZiA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IocmVmT2Zmc2V0cy5sZWZ0KSB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKHJlZk9mZnNldHMucmlnaHQpIHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IocmVmT2Zmc2V0cy50b3ApIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IocmVmT2Zmc2V0cy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0xlZnQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IoYm91bmRhcmllcy5sZWZ0KTtcbiAgICB2YXIgb3ZlcmZsb3dzUmlnaHQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKGJvdW5kYXJpZXMucmlnaHQpO1xuICAgIHZhciBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7XG4gICAgdmFyIG92ZXJmbG93c0JvdHRvbSA9IGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKGJvdW5kYXJpZXMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NCb3VuZGFyaWVzID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBvdmVyZmxvd3NUb3AgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBvdmVyZmxvd3NCb3R0b207XG5cbiAgICAvLyBmbGlwIHRoZSB2YXJpYXRpb24gaWYgcmVxdWlyZWRcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb24gPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnMgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NUb3AgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xuXG4gICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMgfHwgZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgLy8gdGhpcyBib29sZWFuIHRvIGRldGVjdCBhbnkgZmxpcCBsb29wXG4gICAgICBkYXRhLmZsaXBwZWQgPSB0cnVlO1xuXG4gICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykge1xuICAgICAgICBwbGFjZW1lbnQgPSBmbGlwT3JkZXJbaW5kZXggKyAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgICAgdmFyaWF0aW9uID0gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5wbGFjZW1lbnQgPSBwbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xuXG4gICAgICAvLyB0aGlzIG9iamVjdCBjb250YWlucyBgcG9zaXRpb25gLCB3ZSB3YW50IHRvIHByZXNlcnZlIGl0IGFsb25nIHdpdGhcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHByb3BlcnR5IHdlIG1heSBhZGQgaW4gdGhlIGZ1dHVyZVxuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzJDEoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZChmcmFnbWVudHMsIGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcbiAgfSkpO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiBvcFxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfVxuICAgIH0sIFtdKVxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgIC5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBvZmZzZXQoZGF0YSwgX3JlZikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCxcbiAgICAgIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgdmFyIG9mZnNldHMgPSB2b2lkIDA7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYm91bmRhcmllc0VsZW1lbnQgPSBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpO1xuICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzO1xuXG4gIHZhciBvcmRlciA9IG9wdGlvbnMucHJpb3JpdHk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIHZhciBjaGVjayA9IHtcbiAgICBwcmltYXJ5OiBmdW5jdGlvbiBwcmltYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW3BsYWNlbWVudF07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPCBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWF4KHBvcHBlcltwbGFjZW1lbnRdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5JDEoe30sIHBsYWNlbWVudCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5OiBmdW5jdGlvbiBzZWNvbmRhcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHBvcHBlclttYWluU2lkZV0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkkMSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgdmFyIHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IF9leHRlbmRzJDEoe30sIHBvcHBlciwgY2hlY2tbc2lkZV0ocGxhY2VtZW50KSk7XG4gIH0pO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBwb3BwZXI7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHNoaWZ0KGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgc2hpZnR2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICAvLyBpZiBzaGlmdCBzaGlmdHZhcmlhdGlvbiBpcyBzcGVjaWZpZWQsIHJ1biB0aGUgbW9kaWZpZXJcbiAgaWYgKHNoaWZ0dmFyaWF0aW9uKSB7XG4gICAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcjtcblxuICAgIHZhciBpc1ZlcnRpY2FsID0gWydib3R0b20nLCAndG9wJ10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICAgIHZhciBzaGlmdE9mZnNldHMgPSB7XG4gICAgICBzdGFydDogZGVmaW5lUHJvcGVydHkkMSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdKSxcbiAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkkMSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0pXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyQxKHt9LCBwb3BwZXIsIHNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBoaWRlKGRhdGEpIHtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdoaWRlJywgJ3ByZXZlbnRPdmVyZmxvdycpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciBib3VuZCA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcbiAgfSkuYm91bmRhcmllcztcblxuICBpZiAocmVmUmVjdC5ib3R0b20gPCBib3VuZC50b3AgfHwgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHwgcmVmUmVjdC50b3AgPiBib3VuZC5ib3R0b20gfHwgcmVmUmVjdC5yaWdodCA8IGJvdW5kLmxlZnQpIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSB0cnVlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IGZhbHNlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaW5uZXIoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNIb3JpeiA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTtcblxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9IHJlZmVyZW5jZVtiYXNlUGxhY2VtZW50XSAtIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApO1xuXG4gIGRhdGEucGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QocG9wcGVyKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBNb2RpZmllciBmdW5jdGlvbiwgZWFjaCBtb2RpZmllciBjYW4gaGF2ZSBhIGZ1bmN0aW9uIG9mIHRoaXMgdHlwZSBhc3NpZ25lZFxuICogdG8gaXRzIGBmbmAgcHJvcGVydHkuPGJyIC8+XG4gKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQgb24gZWFjaCB1cGRhdGUsIHRoaXMgbWVhbnMgdGhhdCB5b3UgbXVzdFxuICogbWFrZSBzdXJlIHRoZXkgYXJlIHBlcmZvcm1hbnQgZW5vdWdoIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2tzLlxuICpcbiAqIEBmdW5jdGlvbiBNb2RpZmllckZuXG4gKiBAYXJndW1lbnQge2RhdGFPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge2RhdGFPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuXG4vKipcbiAqIE1vZGlmaWVycyBhcmUgcGx1Z2lucyB1c2VkIHRvIGFsdGVyIHRoZSBiZWhhdmlvciBvZiB5b3VyIHBvcHBlcnMuPGJyIC8+XG4gKiBQb3BwZXIuanMgdXNlcyBhIHNldCBvZiA5IG1vZGlmaWVycyB0byBwcm92aWRlIGFsbCB0aGUgYmFzaWMgZnVuY3Rpb25hbGl0aWVzXG4gKiBuZWVkZWQgYnkgdGhlIGxpYnJhcnkuXG4gKlxuICogVXN1YWxseSB5b3UgZG9uJ3Qgd2FudCB0byBvdmVycmlkZSB0aGUgYG9yZGVyYCwgYGZuYCBhbmQgYG9uTG9hZGAgcHJvcHMuXG4gKiBBbGwgdGhlIG90aGVyIHByb3BlcnRpZXMgYXJlIGNvbmZpZ3VyYXRpb25zIHRoYXQgY291bGQgYmUgdHdlYWtlZC5cbiAqIEBuYW1lc3BhY2UgbW9kaWZpZXJzXG4gKi9cbnZhciBtb2RpZmllcnMgPSB7XG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlXG4gICAqIGVsZW1lbnQuPGJyIC8+XG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgdmFyaWF0aW9uIG9mIHRoZSBgcGxhY2VtZW50YCBwcm9wZXJ0eS48YnIgLz5cbiAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgc2hpZnQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAxMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBzaGlmdFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgYG9mZnNldGAgbW9kaWZpZXIgY2FuIHNoaWZ0IHlvdXIgcG9wcGVyIG9uIGJvdGggaXRzIGF4aXMuXG4gICAqXG4gICAqIEl0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyB1bml0czpcbiAgICogLSBgcHhgIG9yIHVuaXRsZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogLSBgdndgLCBDU1Mgdmlld3BvcnQgd2lkdGggdW5pdFxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxuICAgKlxuICAgKiBGb3IgbGVuZ3RoIGlzIGludGVuZGVkIHRoZSBtYWluIGF4aXMgcmVsYXRpdmUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wcGVyLjxiciAvPlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxuICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBoZWlnaHQuXG4gICAqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIHNpbmdsZSB2YWx1ZSAoYXMgYE51bWJlcmAgb3IgYFN0cmluZ2ApLCBvciBhIHBhaXIgb2YgdmFsdWVzXG4gICAqIGFzIGBTdHJpbmdgIGRpdmlkZWQgYnkgYSBjb21tYSBvciBvbmUgKG9yIG1vcmUpIHdoaXRlIHNwYWNlcy48YnIgLz5cbiAgICogVGhlIGxhdHRlciBpcyBhIGRlcHJlY2F0ZWQgbWV0aG9kIGJlY2F1c2UgaXQgbGVhZHMgdG8gY29uZnVzaW9uIGFuZCB3aWxsIGJlXG4gICAqIHJlbW92ZWQgaW4gdjIuPGJyIC8+XG4gICAqIEFkZGl0aW9uYWxseSwgaXQgYWNjZXB0cyBhZGRpdGlvbnMgYW5kIHN1YnRyYWN0aW9ucyBiZXR3ZWVuIGRpZmZlcmVudCB1bml0cy5cbiAgICogTm90ZSB0aGF0IG11bHRpcGxpY2F0aW9ucyBhbmQgZGl2aXNpb25zIGFyZW4ndCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIFZhbGlkIGV4YW1wbGVzIGFyZTpcbiAgICogYGBgXG4gICAqIDEwXG4gICAqICcxMCUnXG4gICAqICcxMCwgMTAnXG4gICAqICcxMCUsIDEwJ1xuICAgKiAnMTAgKyAxMCUnXG4gICAqICcxMCAtIDV2aCArIDMlJ1xuICAgKiAnLTEwcHggKyA1dmgsIDVweCAtIDYlJ1xuICAgKiBgYGBcbiAgICogPiAqKk5CKio6IElmIHlvdSBkZXNpcmUgdG8gYXBwbHkgb2Zmc2V0cyB0byB5b3VyIHBvcHBlcnMgaW4gYSB3YXkgdGhhdCBtYXkgbWFrZSB0aGVtIG92ZXJsYXBcbiAgICogPiB3aXRoIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50LCB1bmZvcnR1bmF0ZWx5LCB5b3Ugd2lsbCBoYXZlIHRvIGRpc2FibGUgdGhlIGBmbGlwYCBtb2RpZmllci5cbiAgICogPiBNb3JlIG9uIHRoaXMgW3JlYWRpbmcgdGhpcyBpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MylcbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIG9mZnNldDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0yMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDIwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IG9mZnNldCxcbiAgICAvKiogQHByb3Age051bWJlcnxTdHJpbmd9IG9mZnNldD0wXG4gICAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgb2Zmc2V0OiAwXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS5cbiAgICpcbiAgICogQW4gc2NlbmFyaW8gZXhpc3RzIHdoZXJlIHRoZSByZWZlcmVuY2UgaXRzZWxmIGlzIG5vdCB3aXRoaW4gdGhlIGJvdW5kYXJpZXMuPGJyIC8+XG4gICAqIFdlIGNhbiBzYXkgaXQgaGFzIFwiZXNjYXBlZCB0aGUgYm91bmRhcmllc1wiIOKAlCBvciBqdXN0IFwiZXNjYXBlZFwiLjxiciAvPlxuICAgKiBJbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBkZWNpZGUgd2hldGhlciB0aGUgcG9wcGVyIHNob3VsZCBlaXRoZXI6XG4gICAqXG4gICAqIC0gZGV0YWNoIGZyb20gdGhlIHJlZmVyZW5jZSBhbmQgcmVtYWluIFwidHJhcHBlZFwiIGluIHRoZSBib3VuZGFyaWVzLCBvclxuICAgKiAtIGlmIGl0IHNob3VsZCBpZ25vcmUgdGhlIGJvdW5kYXJ5IGFuZCBcImVzY2FwZSB3aXRoIGl0cyByZWZlcmVuY2VcIlxuICAgKlxuICAgKiBXaGVuIGBlc2NhcGVXaXRoUmVmZXJlbmNlYCBpcyBzZXQgdG9gdHJ1ZWAgYW5kIHJlZmVyZW5jZSBpcyBjb21wbGV0ZWx5XG4gICAqIG91dHNpZGUgaXRzIGJvdW5kYXJpZXMsIHRoZSBwb3BwZXIgd2lsbCBvdmVyZmxvdyAob3IgY29tcGxldGVseSBsZWF2ZSlcbiAgICogdGhlIGJvdW5kYXJpZXMgaW4gb3JkZXIgdG8gcmVtYWluIGF0dGFjaGVkIHRvIHRoZSBlZGdlIG9mIHRoZSByZWZlcmVuY2UuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAzMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gICAgLyoqXG4gICAgICogQHByb3Age0FycmF5fSBbcHJpb3JpdHk9WydsZWZ0JywncmlnaHQnLCd0b3AnLCdib3R0b20nXV1cbiAgICAgKiBQb3BwZXIgd2lsbCB0cnkgdG8gcHJldmVudCBvdmVyZmxvdyBmb2xsb3dpbmcgdGhlc2UgcHJpb3JpdGllcyBieSBkZWZhdWx0LFxuICAgICAqIHRoZW4sIGl0IGNvdWxkIG92ZXJmbG93IG9uIHRoZSBsZWZ0IGFuZCBvbiB0b3Agb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwcmlvcml0eTogWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBBbW91bnQgb2YgcGl4ZWwgdXNlZCB0byBkZWZpbmUgYSBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gdGhlIGJvdW5kYXJpZXNcbiAgICAgKiBhbmQgdGhlIHBvcHBlciB0aGlzIG1ha2VzIHN1cmUgdGhlIHBvcHBlciBoYXMgYWx3YXlzIGEgbGl0dGxlIHBhZGRpbmdcbiAgICAgKiBiZXR3ZWVuIHRoZSBlZGdlcyBvZiBpdHMgY29udGFpbmVyXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0nc2Nyb2xsUGFyZW50J1xuICAgICAqIEJvdW5kYXJpZXMgdXNlZCBieSB0aGUgbW9kaWZpZXIsIGNhbiBiZSBgc2Nyb2xsUGFyZW50YCwgYHdpbmRvd2AsXG4gICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICdzY3JvbGxQYXJlbnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2hvdGhlcnNcbiAgICogd2l0aG91dCBsZWF2aW5nIGFueSBnYXAgYmV0d2VlbiB0aGUgdHdvLiBFeHBlY2lhbGx5IHVzZWZ1bCB3aGVuIHRoZSBhcnJvdyBpc1xuICAgKiBlbmFibGVkIGFuZCB5b3Ugd2FudCB0byBhc3N1cmUgaXQgdG8gcG9pbnQgdG8gaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLCB5b3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpblxuICAgKiBiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGtlZXBUb2dldGhlcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDQwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGtlZXBUb2dldGhlclxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG1vZGlmaWVyIGlzIHVzZWQgdG8gbW92ZSB0aGUgYGFycm93RWxlbWVudGAgb2YgdGhlIHBvcHBlciB0byBtYWtlXG4gICAqIHN1cmUgaXQgaXMgcG9zaXRpb25lZCBiZXR3ZWVuIHRoZSByZWZlcmVuY2UgZWxlbWVudCBhbmQgaXRzIHBvcHBlciBlbGVtZW50LlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIG91dGVyIHNpemUgb2YgdGhlIGBhcnJvd0VsZW1lbnRgIG5vZGUgdG8gZGV0ZWN0IGhvdyBtYW55XG4gICAqIHBpeGVscyBvZiBjb25qdWN0aW9uIGFyZSBuZWVkZWQuXG4gICAqXG4gICAqIEl0IGhhcyBubyBlZmZlY3QgaWYgbm8gYGFycm93RWxlbWVudGAgaXMgcHJvdmlkZWQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcnJvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDUwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFycm93LFxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXG4gICAgZWxlbWVudDogJ1t4LWFycm93XSdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBmbGlwIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQgd2hlbiBpdCBzdGFydHMgdG8gb3ZlcmxhcCBpdHNcbiAgICogcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICpcbiAgICogKipOT1RFOioqIHRoaXMgbW9kaWZpZXIgd2lsbCBpbnRlcnJ1cHQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlIGFuZCB3aWxsXG4gICAqIHJlc3RhcnQgaXQgaWYgaXQgZGV0ZWN0cyB0aGUgbmVlZCB0byBmbGlwIHRoZSBwbGFjZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBmbGlwOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTYwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogZmxpcCxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEFycmF5fSBiZWhhdmlvcj0nZmxpcCdcbiAgICAgKiBUaGUgYmVoYXZpb3IgdXNlZCB0byBjaGFuZ2UgdGhlIHBvcHBlcidzIHBsYWNlbWVudC4gSXQgY2FuIGJlIG9uZSBvZlxuICAgICAqIGBmbGlwYCwgYGNsb2Nrd2lzZWAsIGBjb3VudGVyY2xvY2t3aXNlYCBvciBhbiBhcnJheSB3aXRoIGEgbGlzdCBvZiB2YWxpZFxuICAgICAqIHBsYWNlbWVudHMgKHdpdGggb3B0aW9uYWwgdmFyaWF0aW9ucykuXG4gICAgICovXG4gICAgYmVoYXZpb3I6ICdmbGlwJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgZmxpcCBpZiBpdCBoaXRzIHRoZSBlZGdlcyBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3ZpZXdwb3J0J1xuICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24sXG4gICAgICogdGhlIHBvcHBlciB3aWxsIG5ldmVyIGJlIHBsYWNlZCBvdXRzaWRlIG9mIHRoZSBkZWZpbmVkIGJvdW5kYXJpZXNcbiAgICAgKiAoZXhjZXB0IGlmIGtlZXBUb2dldGhlciBpcyBlbmFibGVkKVxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAndmlld3BvcnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSB0aGUgcG9wcGVyIGZsb3cgdG93YXJkIHRoZSBpbm5lciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGlubmVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD1mYWxzZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBpbm5lclxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGhpZGUgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXRzaWRlIG9mIHRoZVxuICAgKiBwb3BwZXIgYm91bmRhcmllcy4gSXQgd2lsbCBzZXQgYSBgeC1vdXQtb2YtYm91bmRhcmllc2AgYXR0cmlidXRlIHdoaWNoIGNhblxuICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpc1xuICAgKiBvdXQgb2YgYm91bmRhcmllcy5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaGlkZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDgwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGhpZGVcbiAgfSxcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgZWxlbWVudCB0byBnZXRzXG4gICAqIHByb3Blcmx5IHBvc2l0aW9uZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIG1vZGlmaWVyIHdpbGwgbm90IHRvdWNoIHRoZSBET00sIGl0IGp1c3QgcHJlcGFyZXMgdGhlIHN0eWxlc1xuICAgKiBzbyB0aGF0IGBhcHBseVN0eWxlYCBtb2RpZmllciBjYW4gYXBwbHkgaXQuIFRoaXMgc2VwYXJhdGlvbiBpcyB1c2VmdWxcbiAgICogaW4gY2FzZSB5b3UgbmVlZCB0byByZXBsYWNlIGBhcHBseVN0eWxlYCB3aXRoIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLlxuICAgKlxuICAgKiBUaGlzIG1vZGlmaWVyIGhhcyBgODUwYCBhcyBgb3JkZXJgIHZhbHVlIHRvIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICogd2l0aCBwcmV2aW91cyB2ZXJzaW9ucyBvZiBQb3BwZXIuanMuIEV4cGVjdCB0aGUgbW9kaWZpZXJzIG9yZGVyaW5nIG1ldGhvZFxuICAgKiB0byBjaGFuZ2UgaW4gZnV0dXJlIG1ham9yIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgY29tcHV0ZVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTg1MCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODUwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogY29tcHV0ZVN0eWxlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzZCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHRydWUsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2JvdHRvbSddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBYIGF4aXMgKGBib3R0b21gIG9yIGB0b3BgKS4gQUtBIFggb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgYm90dG9tYFxuICAgICAqL1xuICAgIHg6ICdib3R0b20nLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdsZWZ0J11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFkgYXhpcyAoYGxlZnRgIG9yIGByaWdodGApLiBBS0EgWSBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGByaWdodGBcbiAgICAgKi9cbiAgICB5OiAncmlnaHQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIGNvbXB1dGVkIHN0eWxlcyB0byB0aGUgcG9wcGVyIGVsZW1lbnQuXG4gICAqXG4gICAqIEFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgYXJlIGxpbWl0ZWQgdG8gdGhpcyBtb2RpZmllci4gVGhpcyBpcyB1c2VmdWwgaW4gY2FzZVxuICAgKiB5b3Ugd2FudCB0byBpbnRlZ3JhdGUgUG9wcGVyLmpzIGluc2lkZSBhIGZyYW1ld29yayBvciB2aWV3IGxpYnJhcnkgYW5kIHlvdVxuICAgKiB3YW50IHRvIGRlbGVnYXRlIGFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgdG8gaXQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3UgZGlzYWJsZSB0aGlzIG1vZGlmaWVyLCB5b3UgbXVzdCBtYWtlIHN1cmUgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIGhhcyBpdHMgcG9zaXRpb24gc2V0IHRvIGBhYnNvbHV0ZWAgYmVmb3JlIFBvcHBlci5qcyBjYW4gZG8gaXRzIHdvcmshXG4gICAqXG4gICAqIEp1c3QgZGlzYWJsZSB0aGlzIG1vZGlmaWVyIGFuZCBkZWZpbmUgeW91IG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFwcGx5U3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA5MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcHBseVN0eWxlLFxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXG4gICAgb25Mb2FkOiBhcHBseVN0eWxlT25Mb2FkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM2QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB1bmRlZmluZWRcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgYGRhdGFPYmplY3RgIGlzIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgaW5mb3JtYXRpb25zIHVzZWQgYnkgUG9wcGVyLmpzXG4gKiB0aGlzIG9iamVjdCBnZXQgcGFzc2VkIHRvIG1vZGlmaWVycyBhbmQgdG8gdGhlIGBvbkNyZWF0ZWAgYW5kIGBvblVwZGF0ZWAgY2FsbGJhY2tzLlxuICogQG5hbWUgZGF0YU9iamVjdFxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEucGxhY2VtZW50IFBsYWNlbWVudCBhcHBsaWVkIHRvIHBvcHBlclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgUGxhY2VtZW50IG9yaWdpbmFsbHkgZGVmaW5lZCBvbiBpbml0XG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5oaWRlIFRydWUgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dCBvZiBib3VuZGFyaWVzLCB1c2VmdWwgdG8ga25vdyB3aGVuIHRvIGhpZGUgdGhlIHBvcHBlci5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGRhdGEuYXJyb3dFbGVtZW50IE5vZGUgdXNlZCBhcyBhcnJvdyBieSBhcnJvdyBtb2RpZmllclxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuc3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLCBpdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYXJyb3dTdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgYXJyb3csIGl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5ib3VuZGFyaWVzIE9mZnNldHMgb2YgdGhlIHBvcHBlciBib3VuZGFyaWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzIFRoZSBtZWFzdXJlbWVudHMgb2YgcG9wcGVyLCByZWZlcmVuY2UgYW5kIGFycm93IGVsZW1lbnRzLlxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5wb3BwZXIgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMuYXJyb3ddIGB0b3BgIGFuZCBgbGVmdGAgb2Zmc2V0cywgb25seSBvbmUgb2YgdGhlbSB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIDBcbiAqL1xuXG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBwcm92aWRlZCB0byBQb3BwZXIuanMgY29uc3RydWN0b3IuPGJyIC8+XG4gKiBUaGVzZSBjYW4gYmUgb3ZlcnJpZGVuIHVzaW5nIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgb2YgUG9wcGVyLmpzLjxiciAvPlxuICogVG8gb3ZlcnJpZGUgYW4gb3B0aW9uLCBzaW1wbHkgcGFzcyBhcyAzcmQgYXJndW1lbnQgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWVcbiAqIHN0cnVjdHVyZSBvZiB0aGlzIG9iamVjdCwgZXhhbXBsZTpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWYsIHBvcCwge1xuICogICBtb2RpZmllcnM6IHtcbiAqICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogZmFsc2UgfVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgRGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBQb3BwZXIncyBwbGFjZW1lbnRcbiAgICogQHByb3Age1BvcHBlci5wbGFjZW1lbnRzfSBwbGFjZW1lbnQ9J2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQsIHRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qc1xuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayQxKHRoaXMsIFBvcHBlcik7XG5cbiAgICB0aGlzLnNjaGVkdWxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShfdGhpcy51cGRhdGUpO1xuICAgIH07XG5cbiAgICAvLyBtYWtlIHVwZGF0ZSgpIGRlYm91bmNlZCwgc28gdGhhdCBpdCBvbmx5IHJ1bnMgYXQgbW9zdCBvbmNlLXBlci10aWNrXG4gICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIHdpdGgge30gd2UgY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvcHRpb25zIGluc2lkZSBpdFxuICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzJDEoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXVxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF9leHRlbmRzJDEoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyQxKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzW25hbWVdIHx8IHt9LCBvcHRpb25zLm1vZGlmaWVycyA/IG9wdGlvbnMubW9kaWZpZXJzW25hbWVdIDoge30pO1xuICAgIH0pO1xuXG4gICAgLy8gUmVmYWN0b3JpbmcgbW9kaWZpZXJzJyBsaXN0IChPYmplY3QgPT4gQXJyYXkpXG4gICAgdGhpcy5tb2RpZmllcnMgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kaWZpZXJzKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyQxKHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pO1xuICAgIH0pXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICB9KTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuXG5cbiAgY3JlYXRlQ2xhc3MkMShQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlIGFuIHVwZGF0ZSwgaXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZVxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB1c2VmdWwgd2hlbiB3cml0aW5nIGN1c3RvbSBtb2RpZmllcnMuXG4gICAgICogU3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDEuNywgdGhpcyBtZXRob2QgaXMgYXZhaWxhYmxlIG9ubHkgaWYgeW91XG4gICAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXG4gICAgICpcbiAgICAgKiAqKkRFUFJFQ0FUSU9OKio6IFRoaXMgd2F5IHRvIGFjY2VzcyBQb3BwZXJVdGlscyBpcyBkZXByZWNhdGVkXG4gICAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICAgKiBEdWUgdG8gdGhlIGhpZ2ggaW5zdGFiaWxpdHkgb2YgdGhlIG1ldGhvZHMgY29udGFpbmVkIGluIFV0aWxzLCB3ZSBjYW4ndFxuICAgICAqIGd1YXJhbnRlZSB0aGVtIHRvIGZvbGxvdyBzZW12ZXIuIFVzZSB0aGVtIGF0IHlvdXIgb3duIHJpc2shXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxuICAgICAqIEBtZW1iZXIgVXRpbHNcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cbiAgfV0pO1xuICByZXR1cm4gUG9wcGVyO1xufSgpO1xuXG4vKipcbiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qc1xuICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+XG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXG4gKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS5cbiAqXG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTtcbiAqIGBgYFxuICpcbiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuUG9wcGVyLlV0aWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKS5Qb3BwZXJVdGlscztcblBvcHBlci5wbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblBvcHBlci5EZWZhdWx0cyA9IERlZmF1bHRzO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvcmUgcGxhY2VtZW50ICgndG9wJywgJ2JvdHRvbScsICdsZWZ0JywgJ3JpZ2h0Jykgb2YgYSBwb3BwZXJcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldFBvcHBlclBsYWNlbWVudChwb3BwZXIpIHtcbiAgcmV0dXJuIHBvcHBlci5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JykucmVwbGFjZSgvLS4rLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIG1vdXNlJ3MgY3Vyc29yIGlzIG91dHNpZGUgdGhlIGludGVyYWN0aXZlIGJvcmRlclxuICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudFxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBjdXJzb3JJc091dHNpZGVJbnRlcmFjdGl2ZUJvcmRlcihldmVudCwgcG9wcGVyLCBvcHRpb25zKSB7XG4gIGlmICghcG9wcGVyLmdldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKSkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHggPSBldmVudC5jbGllbnRYLFxuICAgICAgeSA9IGV2ZW50LmNsaWVudFk7XG4gIHZhciBpbnRlcmFjdGl2ZUJvcmRlciA9IG9wdGlvbnMuaW50ZXJhY3RpdmVCb3JkZXIsXG4gICAgICBkaXN0YW5jZSA9IG9wdGlvbnMuZGlzdGFuY2U7XG5cblxuICB2YXIgcmVjdCA9IHBvcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHBsYWNlbWVudCA9IGdldFBvcHBlclBsYWNlbWVudChwb3BwZXIpO1xuICB2YXIgYm9yZGVyV2l0aERpc3RhbmNlID0gaW50ZXJhY3RpdmVCb3JkZXIgKyBkaXN0YW5jZTtcblxuICB2YXIgZXhjZWVkcyA9IHtcbiAgICB0b3A6IHJlY3QudG9wIC0geSA+IGludGVyYWN0aXZlQm9yZGVyLFxuICAgIGJvdHRvbTogeSAtIHJlY3QuYm90dG9tID4gaW50ZXJhY3RpdmVCb3JkZXIsXG4gICAgbGVmdDogcmVjdC5sZWZ0IC0geCA+IGludGVyYWN0aXZlQm9yZGVyLFxuICAgIHJpZ2h0OiB4IC0gcmVjdC5yaWdodCA+IGludGVyYWN0aXZlQm9yZGVyXG4gIH07XG5cbiAgc3dpdGNoIChwbGFjZW1lbnQpIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgZXhjZWVkcy50b3AgPSByZWN0LnRvcCAtIHkgPiBib3JkZXJXaXRoRGlzdGFuY2U7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgZXhjZWVkcy5ib3R0b20gPSB5IC0gcmVjdC5ib3R0b20gPiBib3JkZXJXaXRoRGlzdGFuY2U7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIGV4Y2VlZHMubGVmdCA9IHJlY3QubGVmdCAtIHggPiBib3JkZXJXaXRoRGlzdGFuY2U7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICBleGNlZWRzLnJpZ2h0ID0geCAtIHJlY3QucmlnaHQgPiBib3JkZXJXaXRoRGlzdGFuY2U7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBleGNlZWRzLnRvcCB8fCBleGNlZWRzLmJvdHRvbSB8fCBleGNlZWRzLmxlZnQgfHwgZXhjZWVkcy5yaWdodDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSBgYXJyb3dUcmFuc2Zvcm1gIG51bWJlcnMgYmFzZWQgb24gdGhlIHBsYWNlbWVudCBheGlzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAnc2NhbGUnIG9yICd0cmFuc2xhdGUnXG4gKiBAcGFyYW0ge051bWJlcltdfSBudW1iZXJzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzVmVydGljYWxcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZXZlcnNlXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybU51bWJlcnNCYXNlZE9uUGxhY2VtZW50QXhpcyh0eXBlLCBudW1iZXJzLCBpc1ZlcnRpY2FsLCBpc1JldmVyc2UpIHtcbiAgaWYgKCFudW1iZXJzLmxlbmd0aCkgcmV0dXJuICcnO1xuXG4gIHZhciB0cmFuc2Zvcm1zID0ge1xuICAgIHNjYWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAobnVtYmVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuICcnICsgbnVtYmVyc1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpc1ZlcnRpY2FsID8gbnVtYmVyc1swXSArICcsICcgKyBudW1iZXJzWzFdIDogbnVtYmVyc1sxXSArICcsICcgKyBudW1iZXJzWzBdO1xuICAgICAgfVxuICAgIH0oKSxcbiAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChudW1iZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gaXNSZXZlcnNlID8gLW51bWJlcnNbMF0gKyAncHgnIDogbnVtYmVyc1swXSArICdweCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNWZXJ0aWNhbCkge1xuICAgICAgICAgIHJldHVybiBpc1JldmVyc2UgPyBudW1iZXJzWzBdICsgJ3B4LCAnICsgLW51bWJlcnNbMV0gKyAncHgnIDogbnVtYmVyc1swXSArICdweCwgJyArIG51bWJlcnNbMV0gKyAncHgnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBpc1JldmVyc2UgPyAtbnVtYmVyc1sxXSArICdweCwgJyArIG51bWJlcnNbMF0gKyAncHgnIDogbnVtYmVyc1sxXSArICdweCwgJyArIG51bWJlcnNbMF0gKyAncHgnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSgpXG4gIH07XG5cbiAgcmV0dXJuIHRyYW5zZm9ybXNbdHlwZV07XG59XG5cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgYGFycm93VHJhbnNmb3JtYCB4IG9yIHkgYXhpcyBiYXNlZCBvbiB0aGUgcGxhY2VtZW50IGF4aXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBheGlzICdYJywgJ1knLCAnJ1xuICogQHBhcmFtIHtCb29sZWFufSBpc1ZlcnRpY2FsXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybUF4aXMoYXhpcywgaXNWZXJ0aWNhbCkge1xuICBpZiAoIWF4aXMpIHJldHVybiAnJztcbiAgdmFyIG1hcCA9IHtcbiAgICBYOiAnWScsXG4gICAgWTogJ1gnXG4gIH07XG4gIHJldHVybiBpc1ZlcnRpY2FsID8gYXhpcyA6IG1hcFtheGlzXTtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhbmQgYXBwbGllcyB0aGUgbmVjZXNzYXJ5IGFycm93IHRyYW5zZm9ybVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7RWxlbWVudH0gYXJyb3dcbiAqIEBwYXJhbSB7U3RyaW5nfSBhcnJvd1RyYW5zZm9ybVxuICovXG5mdW5jdGlvbiBjb21wdXRlQXJyb3dUcmFuc2Zvcm0ocG9wcGVyLCBhcnJvdywgYXJyb3dUcmFuc2Zvcm0pIHtcbiAgdmFyIHBsYWNlbWVudCA9IGdldFBvcHBlclBsYWNlbWVudChwb3BwZXIpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IHBsYWNlbWVudCA9PT0gJ3RvcCcgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJztcbiAgdmFyIGlzUmV2ZXJzZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nO1xuXG4gIHZhciBnZXRBeGlzID0gZnVuY3Rpb24gZ2V0QXhpcyhyZSkge1xuICAgIHZhciBtYXRjaCA9IGFycm93VHJhbnNmb3JtLm1hdGNoKHJlKTtcbiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnO1xuICB9O1xuXG4gIHZhciBnZXROdW1iZXJzID0gZnVuY3Rpb24gZ2V0TnVtYmVycyhyZSkge1xuICAgIHZhciBtYXRjaCA9IGFycm93VHJhbnNmb3JtLm1hdGNoKHJlKTtcbiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdCgnLCcpLm1hcChwYXJzZUZsb2F0KSA6IFtdO1xuICB9O1xuXG4gIHZhciByZSA9IHtcbiAgICB0cmFuc2xhdGU6IC90cmFuc2xhdGVYP1k/XFwoKFteKV0rKVxcKS8sXG4gICAgc2NhbGU6IC9zY2FsZVg/WT9cXCgoW14pXSspXFwpL1xuICB9O1xuXG4gIHZhciBtYXRjaGVzID0ge1xuICAgIHRyYW5zbGF0ZToge1xuICAgICAgYXhpczogZ2V0QXhpcygvdHJhbnNsYXRlKFtYWV0pLyksXG4gICAgICBudW1iZXJzOiBnZXROdW1iZXJzKHJlLnRyYW5zbGF0ZSlcbiAgICB9LFxuICAgIHNjYWxlOiB7XG4gICAgICBheGlzOiBnZXRBeGlzKC9zY2FsZShbWFldKS8pLFxuICAgICAgbnVtYmVyczogZ2V0TnVtYmVycyhyZS5zY2FsZSlcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNvbXB1dGVkVHJhbnNmb3JtID0gYXJyb3dUcmFuc2Zvcm0ucmVwbGFjZShyZS50cmFuc2xhdGUsICd0cmFuc2xhdGUnICsgdHJhbnNmb3JtQXhpcyhtYXRjaGVzLnRyYW5zbGF0ZS5heGlzLCBpc1ZlcnRpY2FsKSArICcoJyArIHRyYW5zZm9ybU51bWJlcnNCYXNlZE9uUGxhY2VtZW50QXhpcygndHJhbnNsYXRlJywgbWF0Y2hlcy50cmFuc2xhdGUubnVtYmVycywgaXNWZXJ0aWNhbCwgaXNSZXZlcnNlKSArICcpJykucmVwbGFjZShyZS5zY2FsZSwgJ3NjYWxlJyArIHRyYW5zZm9ybUF4aXMobWF0Y2hlcy5zY2FsZS5heGlzLCBpc1ZlcnRpY2FsKSArICcoJyArIHRyYW5zZm9ybU51bWJlcnNCYXNlZE9uUGxhY2VtZW50QXhpcygnc2NhbGUnLCBtYXRjaGVzLnNjYWxlLm51bWJlcnMsIGlzVmVydGljYWwsIGlzUmV2ZXJzZSkgKyAnKScpO1xuXG4gIGFycm93LnN0eWxlW3ByZWZpeCgndHJhbnNmb3JtJyldID0gY29tcHV0ZWRUcmFuc2Zvcm07XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhbiBlbGVtZW50IGlzIHZpc2libGUgaW4gdGhlIHZpZXdwb3J0XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBlbGVtZW50SXNJblZpZXdwb3J0KGVsKSB7XG4gIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgcmV0dXJuIHJlY3QudG9wID49IDAgJiYgcmVjdC5sZWZ0ID49IDAgJiYgcmVjdC5ib3R0b20gPD0gKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSAmJiByZWN0LnJpZ2h0IDw9ICh3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGRpc3RhbmNlIHRha2luZyBpbnRvIGFjY291bnQgdGhlIGRlZmF1bHQgZGlzdGFuY2UgZHVlIHRvXG4gKiB0aGUgdHJhbnNmb3JtOiB0cmFuc2xhdGUgc2V0dGluZyBpbiBDU1NcbiAqIEBwYXJhbSB7TnVtYmVyfSBkaXN0YW5jZVxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRPZmZzZXREaXN0YW5jZUluUHgoZGlzdGFuY2UpIHtcbiAgcmV0dXJuIC0oZGlzdGFuY2UgLSBkZWZhdWx0cy5kaXN0YW5jZSkgKyAncHgnO1xufVxuXG4vKipcbiAqIFdhaXRzIHVudGlsIG5leHQgcmVwYWludCB0byBleGVjdXRlIGEgZm5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGRlZmVyKGZuKSB7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbik7XG4gIH0pO1xufVxuXG52YXIgbWF0Y2hlcyA9IHt9O1xuXG5pZiAoaXNCcm93c2VyKSB7XG4gIHZhciBlID0gRWxlbWVudC5wcm90b3R5cGU7XG4gIG1hdGNoZXMgPSBlLm1hdGNoZXMgfHwgZS5tYXRjaGVzU2VsZWN0b3IgfHwgZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZS5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgZS5tc01hdGNoZXNTZWxlY3RvciB8fCBmdW5jdGlvbiAocykge1xuICAgIHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpO1xuICAgIHZhciBpID0gbWF0Y2hlcy5sZW5ndGg7XG4gICAgd2hpbGUgKC0taSA+PSAwICYmIG1hdGNoZXMuaXRlbShpKSAhPT0gdGhpcykge31cbiAgICByZXR1cm4gaSA+IC0xO1xuICB9O1xufVxuXG52YXIgbWF0Y2hlcyQxID0gbWF0Y2hlcztcblxuLyoqXG4gKiBQb255ZmlsbCB0byBnZXQgdGhlIGNsb3Nlc3QgcGFyZW50IGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIGNoaWxkIG9mIHBhcmVudCB0byBiZSByZXR1cm5lZFxuICogQHBhcmFtIHtTdHJpbmd9IHBhcmVudFNlbGVjdG9yIC0gc2VsZWN0b3IgdG8gbWF0Y2ggdGhlIHBhcmVudCBpZiBmb3VuZFxuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gY2xvc2VzdChlbGVtZW50LCBwYXJlbnRTZWxlY3Rvcikge1xuICB2YXIgZm4gPSBFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0IHx8IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgIHZhciBlbCA9IHRoaXM7XG4gICAgd2hpbGUgKGVsKSB7XG4gICAgICBpZiAobWF0Y2hlcyQxLmNhbGwoZWwsIHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9XG4gICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBmbi5jYWxsKGVsZW1lbnQsIHBhcmVudFNlbGVjdG9yKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGR1cmF0aW9uIHRha2luZyBpbnRvIGFjY291bnQgdGhlIG9wdGlvbiBiZWluZyBlaXRoZXIgYSBudW1iZXIgb3IgYXJyYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGdldER1cmF0aW9uKGR1cmF0aW9uLCBpbmRleCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShkdXJhdGlvbikgPyBkdXJhdGlvbltpbmRleF0gOiBkdXJhdGlvbjtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSB2aXNpYmlsaXR5IHN0YXRlIG9mIGFuIGVsZW1lbnQgZm9yIHRyYW5zaXRpb24gdG8gYmVnaW5cbiAqIEBwYXJhbSB7RWxlbWVudFtdfSBlbHMgLSBhcnJheSBvZiBlbGVtZW50c1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSAndmlzaWJsZScgb3IgJ2hpZGRlbidcbiAqL1xuZnVuY3Rpb24gc2V0VmlzaWJpbGl0eVN0YXRlKGVscywgdHlwZSkge1xuICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoIWVsKSByZXR1cm47XG4gICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgdHlwZSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFBvbnlmaWxsIGZvciBBcnJheS5wcm90b3R5cGUuZmluZFxuICogQHBhcmFtIHtBcnJheX0gYXJyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiBpdGVtIGluIHRoZSBhcnJheVxuICovXG5cbi8qKlxuICogQXBwbGllcyB0aGUgdHJhbnNpdGlvbiBkdXJhdGlvbiB0byBlYWNoIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudFtdfSBlbHMgLSBBcnJheSBvZiBlbGVtZW50c1xuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gKi9cbmZ1bmN0aW9uIGFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uKGVscywgZHVyYXRpb24pIHtcbiAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuICAgIGVsLnN0eWxlW3ByZWZpeCgndHJhbnNpdGlvbkR1cmF0aW9uJyldID0gZHVyYXRpb24gKyAnbXMnO1xuICB9KTtcbn1cblxudmFyIFQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIga2V5ID0ge307XG4gIHZhciBzdG9yZSA9IGZ1bmN0aW9uIHN0b3JlKGRhdGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGspIHtcbiAgICAgIHJldHVybiBrID09PSBrZXkgJiYgZGF0YTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBUaXBweSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaXBweShjb25maWcpIHtcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFRpcHB5KTtcblxuICAgICAgZm9yICh2YXIgX2tleSBpbiBjb25maWcpIHtcbiAgICAgICAgdGhpc1tfa2V5XSA9IGNvbmZpZ1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgZGVzdHJveWVkOiBmYWxzZSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuXyA9IHN0b3JlKHtcbiAgICAgICAgbXV0YXRpb25PYnNlcnZlcnM6IFtdXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSB0b29sdGlwIHRvIGFsbG93IGl0IHRvIHNob3cgb3IgaGlkZVxuICAgICAqIEBtZW1iZXJvZiBUaXBweVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cblxuXG4gICAgY3JlYXRlQ2xhc3MoVGlwcHksIFt7XG4gICAgICBrZXk6ICdlbmFibGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5lbmFibGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBEaXNhYmxlcyB0aGUgdG9vbHRpcCBmcm9tIHNob3dpbmcgb3IgaGlkaW5nLCBidXQgZG9lcyBub3QgZGVzdHJveSBpdFxuICAgICAgICogQG1lbWJlcm9mIFRpcHB5XG4gICAgICAgKiBAcHVibGljXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ2Rpc2FibGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNob3dzIHRoZSB0b29sdGlwXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgKiBAbWVtYmVyb2YgVGlwcHlcbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnc2hvdycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdyhkdXJhdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmRlc3Ryb3llZCB8fCAhdGhpcy5zdGF0ZS5lbmFibGVkKSByZXR1cm47XG5cbiAgICAgICAgdmFyIHBvcHBlciA9IHRoaXMucG9wcGVyLFxuICAgICAgICAgICAgcmVmZXJlbmNlID0gdGhpcy5yZWZlcmVuY2UsXG4gICAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIHZhciBfZ2V0SW5uZXJFbGVtZW50cyA9IGdldElubmVyRWxlbWVudHMocG9wcGVyKSxcbiAgICAgICAgICAgIHRvb2x0aXAgPSBfZ2V0SW5uZXJFbGVtZW50cy50b29sdGlwLFxuICAgICAgICAgICAgYmFja2Ryb3AgPSBfZ2V0SW5uZXJFbGVtZW50cy5iYWNrZHJvcCxcbiAgICAgICAgICAgIGNvbnRlbnQgPSBfZ2V0SW5uZXJFbGVtZW50cy5jb250ZW50O1xuXG4gICAgICAgIC8vIERlc3Ryb3kgdG9vbHRpcCBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgbm8gbG9uZ2VyIG9uIHRoZSBET01cblxuXG4gICAgICAgIGlmICghcmVmZXJlbmNlLnJlZk9iaiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKHJlZmVyZW5jZSkpIHtcbiAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zLm9uU2hvdy5jYWxsKHBvcHBlcik7XG5cbiAgICAgICAgZHVyYXRpb24gPSBnZXREdXJhdGlvbihkdXJhdGlvbiAhPT0gdW5kZWZpbmVkID8gZHVyYXRpb24gOiBvcHRpb25zLmR1cmF0aW9uLCAwKTtcblxuICAgICAgICAvLyBQcmV2ZW50IGEgdHJhbnNpdGlvbiB3aGVuIHBvcHBlciBjaGFuZ2VzIHBvc2l0aW9uXG4gICAgICAgIGFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uKFtwb3BwZXIsIHRvb2x0aXAsIGJhY2tkcm9wXSwgMCk7XG5cbiAgICAgICAgcG9wcGVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgIHRoaXMuc3RhdGUudmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgX21vdW50LmNhbGwodGhpcywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIH4yMG1zIGNhbiBlbGFwc2UgYmVmb3JlIHRoaXMgZGVmZXIgY2FsbGJhY2sgaXMgcnVuLCBzbyB0aGUgaGlkZSgpIG1ldGhvZFxuICAgICAgICAgIC8vIG1heSBoYXZlIGJlZW4gaW52b2tlZCAtLSBjaGVjayBpZiB0aGUgcG9wcGVyIGlzIHN0aWxsIHZpc2libGUgYW5kIGNhbmNlbFxuICAgICAgICAgIC8vIHRoaXMgY2FsbGJhY2sgaWYgbm90XG4gICAgICAgICAgaWYgKCFfdGhpcy5zdGF0ZS52aXNpYmxlKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoIW9wdGlvbnMuZm9sbG93Q3Vyc29yIHx8IGJyb3dzZXIudXNpbmdUb3VjaCkge1xuICAgICAgICAgICAgX3RoaXMucG9wcGVySW5zdGFuY2Uuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgICAgICAgIGFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uKFtwb3BwZXJdLCBvcHRpb25zLnVwZGF0ZUR1cmF0aW9uKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBTZXQgaW5pdGlhbCBwb3NpdGlvbiBuZWFyIHRoZSBjdXJzb3JcbiAgICAgICAgICBpZiAob3B0aW9ucy5mb2xsb3dDdXJzb3IgJiYgIWJyb3dzZXIudXNpbmdUb3VjaCkge1xuICAgICAgICAgICAgX3RoaXMucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgICAgICB2YXIgZGVsYXkgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMuZGVsYXkpID8gb3B0aW9ucy5kZWxheVswXSA6IG9wdGlvbnMuZGVsYXk7XG4gICAgICAgICAgICBpZiAoX3RoaXMuXyhrZXkpLmxhc3RUcmlnZ2VyRXZlbnQpIHtcbiAgICAgICAgICAgICAgX3RoaXMuXyhrZXkpLmZvbGxvd0N1cnNvckxpc3RlbmVyKGRlbGF5ICYmIF90aGlzLl8oa2V5KS5sYXN0TW91c2VNb3ZlRXZlbnQgPyBfdGhpcy5fKGtleSkubGFzdE1vdXNlTW92ZUV2ZW50IDogX3RoaXMuXyhrZXkpLmxhc3RUcmlnZ2VyRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFJlLWFwcGx5IHRyYW5zaXRpb24gZHVyYXRpb25zXG4gICAgICAgICAgYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24oW3Rvb2x0aXAsIGJhY2tkcm9wLCBiYWNrZHJvcCA/IGNvbnRlbnQgOiBudWxsXSwgZHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKGJhY2tkcm9wKSB7XG4gICAgICAgICAgICBnZXRDb21wdXRlZFN0eWxlKGJhY2tkcm9wKVtwcmVmaXgoJ3RyYW5zZm9ybScpXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5pbnRlcmFjdGl2ZSkge1xuICAgICAgICAgICAgcmVmZXJlbmNlLmNsYXNzTGlzdC5hZGQoJ3RpcHB5LWFjdGl2ZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvcHRpb25zLnN0aWNreSkge1xuICAgICAgICAgICAgX21ha2VTdGlja3kuY2FsbChfdGhpcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2V0VmlzaWJpbGl0eVN0YXRlKFt0b29sdGlwLCBiYWNrZHJvcF0sICd2aXNpYmxlJyk7XG5cbiAgICAgICAgICBfb25UcmFuc2l0aW9uRW5kLmNhbGwoX3RoaXMsIGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMudXBkYXRlRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgdG9vbHRpcC5jbGFzc0xpc3QuYWRkKCd0aXBweS1ub3RyYW5zaXRpb24nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaW50ZXJhY3RpdmUpIHtcbiAgICAgICAgICAgICAgcG9wcGVyLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMub25TaG93bi5jYWxsKHBvcHBlcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEhpZGVzIHRoZSB0b29sdGlwXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgKiBAbWVtYmVyb2YgVGlwcHlcbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnaGlkZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZShkdXJhdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5kZXN0cm95ZWQgfHwgIXRoaXMuc3RhdGUuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBwb3BwZXIgPSB0aGlzLnBvcHBlcixcbiAgICAgICAgICAgIHJlZmVyZW5jZSA9IHRoaXMucmVmZXJlbmNlLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICB2YXIgX2dldElubmVyRWxlbWVudHMyID0gZ2V0SW5uZXJFbGVtZW50cyhwb3BwZXIpLFxuICAgICAgICAgICAgdG9vbHRpcCA9IF9nZXRJbm5lckVsZW1lbnRzMi50b29sdGlwLFxuICAgICAgICAgICAgYmFja2Ryb3AgPSBfZ2V0SW5uZXJFbGVtZW50czIuYmFja2Ryb3AsXG4gICAgICAgICAgICBjb250ZW50ID0gX2dldElubmVyRWxlbWVudHMyLmNvbnRlbnQ7XG5cbiAgICAgICAgb3B0aW9ucy5vbkhpZGUuY2FsbChwb3BwZXIpO1xuXG4gICAgICAgIGR1cmF0aW9uID0gZ2V0RHVyYXRpb24oZHVyYXRpb24gIT09IHVuZGVmaW5lZCA/IGR1cmF0aW9uIDogb3B0aW9ucy5kdXJhdGlvbiwgMSk7XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLnVwZGF0ZUR1cmF0aW9uKSB7XG4gICAgICAgICAgdG9vbHRpcC5jbGFzc0xpc3QucmVtb3ZlKCd0aXBweS1ub3RyYW5zaXRpb24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmludGVyYWN0aXZlKSB7XG4gICAgICAgICAgcmVmZXJlbmNlLmNsYXNzTGlzdC5yZW1vdmUoJ3RpcHB5LWFjdGl2ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9wcGVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgdGhpcy5zdGF0ZS52aXNpYmxlID0gZmFsc2U7XG5cbiAgICAgICAgYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24oW3Rvb2x0aXAsIGJhY2tkcm9wLCBiYWNrZHJvcCA/IGNvbnRlbnQgOiBudWxsXSwgZHVyYXRpb24pO1xuXG4gICAgICAgIHNldFZpc2liaWxpdHlTdGF0ZShbdG9vbHRpcCwgYmFja2Ryb3BdLCAnaGlkZGVuJyk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaW50ZXJhY3RpdmUgJiYgb3B0aW9ucy50cmlnZ2VyLmluZGV4T2YoJ2NsaWNrJykgPiAtMSAmJiBlbGVtZW50SXNJblZpZXdwb3J0KHJlZmVyZW5jZSkpIHtcbiAgICAgICAgICByZWZlcmVuY2UuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qXG4gICAgICAgICogVGhpcyBjYWxsIGlzIGRlZmVycmVkIGJlY2F1c2Ugc29tZXRpbWVzIHdoZW4gdGhlIHRvb2x0aXAgaXMgc3RpbGwgdHJhbnNpdGlvbmluZyBpbiBidXQgaGlkZSgpXG4gICAgICAgICogaXMgY2FsbGVkIGJlZm9yZSBpdCBmaW5pc2hlcywgdGhlIENTUyB0cmFuc2l0aW9uIHdvbid0IHJldmVyc2UgcXVpY2tseSBlbm91Z2gsIG1lYW5pbmdcbiAgICAgICAgKiB0aGUgQ1NTIHRyYW5zaXRpb24gd2lsbCBmaW5pc2ggMS0yIGZyYW1lcyBsYXRlciwgYW5kIG9uSGlkZGVuKCkgd2lsbCBydW4gc2luY2UgdGhlIEpTIHNldCBpdFxuICAgICAgICAqIG1vcmUgcXVpY2tseS4gSXQgc2hvdWxkIGFjdHVhbGx5IGJlIG9uU2hvd24oKS4gU2VlbXMgdG8gYmUgc29tZXRoaW5nIENocm9tZSBkb2VzLCBub3QgU2FmYXJpXG4gICAgICAgICovXG4gICAgICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfb25UcmFuc2l0aW9uRW5kLmNhbGwoX3RoaXMyLCBkdXJhdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzMi5zdGF0ZS52aXNpYmxlIHx8ICFvcHRpb25zLmFwcGVuZFRvLmNvbnRhaW5zKHBvcHBlcikpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKCFfdGhpczIuXyhrZXkpLmlzUHJlcGFyaW5nVG9TaG93KSB7XG4gICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF90aGlzMi5fKGtleSkuZm9sbG93Q3Vyc29yTGlzdGVuZXIpO1xuICAgICAgICAgICAgICBfdGhpczIuXyhrZXkpLmxhc3RNb3VzZU1vdmVFdmVudCA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90aGlzMi5wb3BwZXJJbnN0YW5jZS5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIG9wdGlvbnMuYXBwZW5kVG8ucmVtb3ZlQ2hpbGQocG9wcGVyKTtcbiAgICAgICAgICAgIG9wdGlvbnMub25IaWRkZW4uY2FsbChwb3BwZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBEZXN0cm95cyB0aGUgdG9vbHRpcFxuICAgICAgICogQG1lbWJlcm9mIFRpcHB5XG4gICAgICAgKiBAcHVibGljXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgICAgIC8vIEVuc3VyZSB0aGUgcG9wcGVyIGlzIGhpZGRlblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS52aXNpYmxlKSB7XG4gICAgICAgICAgdGhpcy5oaWRlKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICBfdGhpczMucmVmZXJlbmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIobGlzdGVuZXIuZXZlbnQsIGxpc3RlbmVyLmhhbmRsZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBSZXN0b3JlIHRpdGxlXG4gICAgICAgIHRoaXMucmVmZXJlbmNlLnNldEF0dHJpYnV0ZSgndGl0bGUnLCB0aGlzLnJlZmVyZW5jZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKSk7XG5cbiAgICAgICAgZGVsZXRlIHRoaXMucmVmZXJlbmNlLl90aXBweTtbJ2RhdGEtb3JpZ2luYWwtdGl0bGUnLCAnZGF0YS10aXBweScsICdhcmlhLWRlc2NyaWJlZGJ5J10uZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgIF90aGlzMy5yZWZlcmVuY2UucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgICAgIHRoaXMucG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fKGtleSkubXV0YXRpb25PYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFRpcHB5O1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBQcml2YXRlIG1ldGhvZHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIFN0YW5kYWxvbmUgZnVuY3Rpb25zIHRvIGJlIGNhbGxlZCB3aXRoIHRoZSBpbnN0YW5jZSdzIGB0aGlzYCBjb250ZXh0IHRvIG1ha2VcbiAgICogdGhlbSB0cnVseSBwcml2YXRlIGFuZCBub3QgYWNjZXNzaWJsZSBvbiB0aGUgcHJvdG90eXBlXG4gICAqL1xuXG4gIC8qKlxuICAgKiBNZXRob2QgdXNlZCBieSBldmVudCBsaXN0ZW5lcnMgdG8gaW52b2tlIHRoZSBzaG93IG1ldGhvZCwgdGFraW5nIGludG8gYWNjb3VudCBkZWxheXMgYW5kXG4gICAqIHRoZSBgd2FpdGAgb3B0aW9uXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqIEBtZW1iZXJvZiBUaXBweVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIF9lbnRlcihldmVudCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgX2NsZWFyRGVsYXlUaW1lb3V0cy5jYWxsKHRoaXMpO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUudmlzaWJsZSkgcmV0dXJuO1xuXG4gICAgdGhpcy5fKGtleSkuaXNQcmVwYXJpbmdUb1Nob3cgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy53YWl0KSB7XG4gICAgICB0aGlzLm9wdGlvbnMud2FpdC5jYWxsKHRoaXMucG9wcGVyLCB0aGlzLnNob3cuYmluZCh0aGlzKSwgZXZlbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSB0b29sdGlwIGhhcyBhIGRlbGF5LCB3ZSBuZWVkIHRvIGJlIGxpc3RlbmluZyB0byB0aGUgbW91c2Vtb3ZlIGFzIHNvb24gYXMgdGhlIHRyaWdnZXJcbiAgICAvLyBldmVudCBpcyBmaXJlZCBzbyB0aGF0IGl0J3MgaW4gdGhlIGNvcnJlY3QgcG9zaXRpb24gdXBvbiBtb3VudC5cbiAgICBpZiAodGhpcy5vcHRpb25zLmZvbGxvd0N1cnNvciAmJiAhYnJvd3Nlci51c2luZ1RvdWNoKSB7XG4gICAgICBpZiAoIXRoaXMuXyhrZXkpLmZvbGxvd0N1cnNvckxpc3RlbmVyKSB7XG4gICAgICAgIF9zZXRGb2xsb3dDdXJzb3JMaXN0ZW5lci5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5fKGtleSkuZm9sbG93Q3Vyc29yTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWxheSA9IEFycmF5LmlzQXJyYXkodGhpcy5vcHRpb25zLmRlbGF5KSA/IHRoaXMub3B0aW9ucy5kZWxheVswXSA6IHRoaXMub3B0aW9ucy5kZWxheTtcblxuICAgIGlmIChkZWxheSkge1xuICAgICAgdGhpcy5fKGtleSkuc2hvd1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM0LnNob3coKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB1c2VkIGJ5IGV2ZW50IGxpc3RlbmVycyB0byBpbnZva2UgdGhlIGhpZGUgbWV0aG9kLCB0YWtpbmcgaW50byBhY2NvdW50IGRlbGF5c1xuICAgKiBAbWVtYmVyb2YgVGlwcHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIF9sZWF2ZSgpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIF9jbGVhckRlbGF5VGltZW91dHMuY2FsbCh0aGlzKTtcblxuICAgIGlmICghdGhpcy5zdGF0ZS52aXNpYmxlKSByZXR1cm47XG5cbiAgICB0aGlzLl8oa2V5KS5pc1ByZXBhcmluZ1RvU2hvdyA9IGZhbHNlO1xuXG4gICAgdmFyIGRlbGF5ID0gQXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMuZGVsYXkpID8gdGhpcy5vcHRpb25zLmRlbGF5WzFdIDogdGhpcy5vcHRpb25zLmRlbGF5O1xuXG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICB0aGlzLl8oa2V5KS5oaWRlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzNS5zdGF0ZS52aXNpYmxlKSByZXR1cm47XG4gICAgICAgIF90aGlzNS5oaWRlKCk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHJlbGV2YW50IGxpc3RlbmVycyBmb3IgdGhlIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge09iamVjdH0gb2YgbGlzdGVuZXJzXG4gICAqIEBtZW1iZXJvZiBUaXBweVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gX2dldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgdmFyIGhhbmRsZVRyaWdnZXIgPSBmdW5jdGlvbiBoYW5kbGVUcmlnZ2VyKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzNi5zdGF0ZS5lbmFibGVkKSByZXR1cm47XG5cbiAgICAgIHZhciBzaG91bGRTdG9wRXZlbnQgPSBicm93c2VyLnN1cHBvcnRzVG91Y2ggJiYgYnJvd3Nlci51c2luZ1RvdWNoICYmIChldmVudC50eXBlID09PSAnbW91c2VlbnRlcicgfHwgZXZlbnQudHlwZSA9PT0gJ2ZvY3VzJyk7XG5cbiAgICAgIGlmIChzaG91bGRTdG9wRXZlbnQgJiYgX3RoaXM2Lm9wdGlvbnMudG91Y2hIb2xkKSByZXR1cm47XG5cbiAgICAgIF90aGlzNi5fKGtleSkubGFzdFRyaWdnZXJFdmVudCA9IGV2ZW50O1xuXG4gICAgICAvLyBUb2dnbGUgc2hvdy9oaWRlIHdoZW4gY2xpY2tpbmcgY2xpY2stdHJpZ2dlcmVkIHRvb2x0aXBzXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJyAmJiBfdGhpczYub3B0aW9ucy5oaWRlT25DbGljayAhPT0gJ3BlcnNpc3RlbnQnICYmIF90aGlzNi5zdGF0ZS52aXNpYmxlKSB7XG4gICAgICAgIF9sZWF2ZS5jYWxsKF90aGlzNik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfZW50ZXIuY2FsbChfdGhpczYsIGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gaU9TIHByZXZlbnRzIGNsaWNrIGV2ZW50cyBmcm9tIGZpcmluZ1xuICAgICAgaWYgKHNob3VsZFN0b3BFdmVudCAmJiBicm93c2VyLmlPUyAmJiBfdGhpczYucmVmZXJlbmNlLmNsaWNrKSB7XG4gICAgICAgIF90aGlzNi5yZWZlcmVuY2UuY2xpY2soKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGhhbmRsZU1vdXNlbGVhdmUgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZWxlYXZlKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlbGVhdmUnICYmIGJyb3dzZXIuc3VwcG9ydHNUb3VjaCAmJiBicm93c2VyLnVzaW5nVG91Y2ggJiYgX3RoaXM2Lm9wdGlvbnMudG91Y2hIb2xkKSByZXR1cm47XG5cbiAgICAgIGlmIChfdGhpczYub3B0aW9ucy5pbnRlcmFjdGl2ZSkge1xuICAgICAgICB2YXIgaGlkZSA9IF9sZWF2ZS5iaW5kKF90aGlzNik7XG5cbiAgICAgICAgLy8gVGVtcG9yYXJpbHkgaGFuZGxlIG1vdXNlbW92ZSB0byBjaGVjayBpZiB0aGUgbW91c2UgbGVmdCBzb21ld2hlcmUgb3RoZXIgdGhhbiB0aGUgcG9wcGVyXG4gICAgICAgIHZhciBoYW5kbGVNb3VzZW1vdmUgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZW1vdmUoZXZlbnQpIHtcbiAgICAgICAgICB2YXIgcmVmZXJlbmNlQ3Vyc29ySXNPdmVyID0gY2xvc2VzdChldmVudC50YXJnZXQsIHNlbGVjdG9ycy5SRUZFUkVOQ0UpO1xuICAgICAgICAgIHZhciBjdXJzb3JJc092ZXJQb3BwZXIgPSBjbG9zZXN0KGV2ZW50LnRhcmdldCwgc2VsZWN0b3JzLlBPUFBFUikgPT09IF90aGlzNi5wb3BwZXI7XG4gICAgICAgICAgdmFyIGN1cnNvcklzT3ZlclJlZmVyZW5jZSA9IHJlZmVyZW5jZUN1cnNvcklzT3ZlciA9PT0gX3RoaXM2LnJlZmVyZW5jZTtcblxuICAgICAgICAgIGlmIChjdXJzb3JJc092ZXJQb3BwZXIgfHwgY3Vyc29ySXNPdmVyUmVmZXJlbmNlKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoY3Vyc29ySXNPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIoZXZlbnQsIF90aGlzNi5wb3BwZXIsIF90aGlzNi5vcHRpb25zKSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgaGlkZSk7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3VzZW1vdmUpO1xuXG4gICAgICAgICAgICBfbGVhdmUuY2FsbChfdGhpczYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgaGlkZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZU1vdXNlbW92ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX2xlYXZlLmNhbGwoX3RoaXM2KTtcbiAgICB9O1xuXG4gICAgdmFyIGhhbmRsZUJsdXIgPSBmdW5jdGlvbiBoYW5kbGVCbHVyKGV2ZW50KSB7XG4gICAgICBpZiAoIWV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgYnJvd3Nlci51c2luZ1RvdWNoKSByZXR1cm47XG4gICAgICBpZiAoY2xvc2VzdChldmVudC5yZWxhdGVkVGFyZ2V0LCBzZWxlY3RvcnMuUE9QUEVSKSkgcmV0dXJuO1xuXG4gICAgICBfbGVhdmUuY2FsbChfdGhpczYpO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgaGFuZGxlVHJpZ2dlcjogaGFuZGxlVHJpZ2dlcixcbiAgICAgIGhhbmRsZU1vdXNlbGVhdmU6IGhhbmRsZU1vdXNlbGVhdmUsXG4gICAgICBoYW5kbGVCbHVyOiBoYW5kbGVCbHVyXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IHBvcHBlciBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtQb3BwZXJ9XG4gICAqIEBtZW1iZXJvZiBUaXBweVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gX2NyZWF0ZVBvcHBlckluc3RhbmNlKCkge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgdmFyIHBvcHBlciA9IHRoaXMucG9wcGVyLFxuICAgICAgICByZWZlcmVuY2UgPSB0aGlzLnJlZmVyZW5jZSxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIHZhciBfZ2V0SW5uZXJFbGVtZW50czMgPSBnZXRJbm5lckVsZW1lbnRzKHBvcHBlciksXG4gICAgICAgIHRvb2x0aXAgPSBfZ2V0SW5uZXJFbGVtZW50czMudG9vbHRpcDtcblxuICAgIHZhciBwb3BwZXJPcHRpb25zID0gb3B0aW9ucy5wb3BwZXJPcHRpb25zO1xuXG4gICAgdmFyIGFycm93U2VsZWN0b3IgPSBvcHRpb25zLmFycm93VHlwZSA9PT0gJ3JvdW5kJyA/IHNlbGVjdG9ycy5ST1VORF9BUlJPVyA6IHNlbGVjdG9ycy5BUlJPVztcbiAgICB2YXIgYXJyb3cgPSB0b29sdGlwLnF1ZXJ5U2VsZWN0b3IoYXJyb3dTZWxlY3Rvcik7XG5cbiAgICB2YXIgY29uZmlnID0gX2V4dGVuZHMoe1xuICAgICAgcGxhY2VtZW50OiBvcHRpb25zLnBsYWNlbWVudFxuICAgIH0sIHBvcHBlck9wdGlvbnMgfHwge30sIHtcbiAgICAgIG1vZGlmaWVyczogX2V4dGVuZHMoe30sIHBvcHBlck9wdGlvbnMgPyBwb3BwZXJPcHRpb25zLm1vZGlmaWVycyA6IHt9LCB7XG4gICAgICAgIGFycm93OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgZWxlbWVudDogYXJyb3dTZWxlY3RvclxuICAgICAgICB9LCBwb3BwZXJPcHRpb25zICYmIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzID8gcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMuYXJyb3cgOiB7fSksXG4gICAgICAgIGZsaXA6IF9leHRlbmRzKHtcbiAgICAgICAgICBlbmFibGVkOiBvcHRpb25zLmZsaXAsXG4gICAgICAgICAgcGFkZGluZzogb3B0aW9ucy5kaXN0YW5jZSArIDUgLyogNXB4IGZyb20gdmlld3BvcnQgYm91bmRhcnkgKi9cbiAgICAgICAgICAsIGJlaGF2aW9yOiBvcHRpb25zLmZsaXBCZWhhdmlvclxuICAgICAgICB9LCBwb3BwZXJPcHRpb25zICYmIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzID8gcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMuZmxpcCA6IHt9KSxcbiAgICAgICAgb2Zmc2V0OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgb2Zmc2V0OiBvcHRpb25zLm9mZnNldFxuICAgICAgICB9LCBwb3BwZXJPcHRpb25zICYmIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzID8gcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMub2Zmc2V0IDoge30pXG4gICAgICB9KSxcbiAgICAgIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHtcbiAgICAgICAgdG9vbHRpcC5zdHlsZVtnZXRQb3BwZXJQbGFjZW1lbnQocG9wcGVyKV0gPSBnZXRPZmZzZXREaXN0YW5jZUluUHgob3B0aW9ucy5kaXN0YW5jZSk7XG5cbiAgICAgICAgaWYgKGFycm93ICYmIG9wdGlvbnMuYXJyb3dUcmFuc2Zvcm0pIHtcbiAgICAgICAgICBjb21wdXRlQXJyb3dUcmFuc2Zvcm0ocG9wcGVyLCBhcnJvdywgb3B0aW9ucy5hcnJvd1RyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoKSB7XG4gICAgICAgIHZhciBzdHlsZXMgPSB0b29sdGlwLnN0eWxlO1xuICAgICAgICBzdHlsZXMudG9wID0gJyc7XG4gICAgICAgIHN0eWxlcy5ib3R0b20gPSAnJztcbiAgICAgICAgc3R5bGVzLmxlZnQgPSAnJztcbiAgICAgICAgc3R5bGVzLnJpZ2h0ID0gJyc7XG4gICAgICAgIHN0eWxlc1tnZXRQb3BwZXJQbGFjZW1lbnQocG9wcGVyKV0gPSBnZXRPZmZzZXREaXN0YW5jZUluUHgob3B0aW9ucy5kaXN0YW5jZSk7XG5cbiAgICAgICAgaWYgKGFycm93ICYmIG9wdGlvbnMuYXJyb3dUcmFuc2Zvcm0pIHtcbiAgICAgICAgICBjb21wdXRlQXJyb3dUcmFuc2Zvcm0ocG9wcGVyLCBhcnJvdywgb3B0aW9ucy5hcnJvd1RyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9hZGRNdXRhdGlvbk9ic2VydmVyLmNhbGwodGhpcywge1xuICAgICAgdGFyZ2V0OiBwb3BwZXIsXG4gICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICAgIHZhciBzdHlsZXMgPSBwb3BwZXIuc3R5bGU7XG4gICAgICAgIHN0eWxlc1twcmVmaXgoJ3RyYW5zaXRpb25EdXJhdGlvbicpXSA9IG51bGw7XG5cbiAgICAgICAgdmFyIF9vblVwZGF0ZSA9IF90aGlzNy5wb3BwZXJJbnN0YW5jZS5vcHRpb25zLm9uVXBkYXRlO1xuICAgICAgICBfdGhpczcucG9wcGVySW5zdGFuY2Uub3B0aW9ucy5vblVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczcucG9wcGVyLm9mZnNldEhlaWdodDtcbiAgICAgICAgICBzdHlsZXNbcHJlZml4KCd0cmFuc2l0aW9uRHVyYXRpb24nKV0gPSBvcHRpb25zLnVwZGF0ZUR1cmF0aW9uICsgJ21zJztcbiAgICAgICAgICBfdGhpczcucG9wcGVySW5zdGFuY2Uub3B0aW9ucy5vblVwZGF0ZSA9IF9vblVwZGF0ZTtcbiAgICAgICAgfTtcblxuICAgICAgICBfdGhpczcucG9wcGVySW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6IHRydWUsXG4gICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyLCBjb25maWcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIHBvcHBlciBlbGVtZW50IHRvIHRoZSBET00sIHVwZGF0aW5nIG9yIGNyZWF0aW5nIHRoZSBwb3BwZXIgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQG1lbWJlcm9mIFRpcHB5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBfbW91bnQoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgIGlmICghdGhpcy5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgdGhpcy5wb3BwZXJJbnN0YW5jZSA9IF9jcmVhdGVQb3BwZXJJbnN0YW5jZS5jYWxsKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBvcHBlci5zdHlsZVtwcmVmaXgoJ3RyYW5zZm9ybScpXSA9IG51bGw7XG4gICAgICB0aGlzLnBvcHBlckluc3RhbmNlLnNjaGVkdWxlVXBkYXRlKCk7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmZvbGxvd0N1cnNvciB8fCBicm93c2VyLnVzaW5nVG91Y2gpIHtcbiAgICAgICAgdGhpcy5wb3BwZXJJbnN0YW5jZS5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfb25DcmVhdGUgPSB0aGlzLnBvcHBlckluc3RhbmNlLm9wdGlvbnMub25DcmVhdGU7XG4gICAgdmFyIF9vblVwZGF0ZSA9IHRoaXMucG9wcGVySW5zdGFuY2Uub3B0aW9ucy5vblVwZGF0ZTtcblxuICAgIHRoaXMucG9wcGVySW5zdGFuY2Uub3B0aW9ucy5vbkNyZWF0ZSA9IHRoaXMucG9wcGVySW5zdGFuY2Uub3B0aW9ucy5vblVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzOC5wb3BwZXIub2Zmc2V0SGVpZ2h0OyAvLyB3ZSBuZWVkIHRvIGNhdXNlIGRvY3VtZW50IHJlZmxvd1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIF90aGlzOC5wb3BwZXJJbnN0YW5jZS5vcHRpb25zLm9uVXBkYXRlID0gX29uVXBkYXRlO1xuICAgICAgX3RoaXM4LnBvcHBlckluc3RhbmNlLm9wdGlvbnMub25DcmVhdGUgPSBfb25DcmVhdGU7XG4gICAgfTtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLmFwcGVuZFRvLmNvbnRhaW5zKHRoaXMucG9wcGVyKSkge1xuICAgICAgdGhpcy5vcHRpb25zLmFwcGVuZFRvLmFwcGVuZENoaWxkKHRoaXMucG9wcGVyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBzaG93IGFuZCBoaWRlIGRlbGF5IHRpbWVvdXRzXG4gICAqIEBtZW1iZXJvZiBUaXBweVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gX2NsZWFyRGVsYXlUaW1lb3V0cygpIHtcbiAgICB2YXIgX3JlZiA9IHRoaXMuXyhrZXkpLFxuICAgICAgICBzaG93VGltZW91dCA9IF9yZWYuc2hvd1RpbWVvdXQsXG4gICAgICAgIGhpZGVUaW1lb3V0ID0gX3JlZi5oaWRlVGltZW91dDtcblxuICAgIGNsZWFyVGltZW91dChzaG93VGltZW91dCk7XG4gICAgY2xlYXJUaW1lb3V0KGhpZGVUaW1lb3V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBtb3VzZW1vdmUgZXZlbnQgbGlzdGVuZXIgZnVuY3Rpb24gZm9yIGBmb2xsb3dDdXJzb3JgIG9wdGlvblxuICAgKiBAbWVtYmVyb2YgVGlwcHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIF9zZXRGb2xsb3dDdXJzb3JMaXN0ZW5lcigpIHtcbiAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgIHRoaXMuXyhrZXkpLmZvbGxvd0N1cnNvckxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBJZ25vcmUgaWYgdGhlIHRvb2x0aXAgd2FzIHRyaWdnZXJlZCBieSBgZm9jdXNgXG4gICAgICBpZiAoX3RoaXM5Ll8oa2V5KS5sYXN0VHJpZ2dlckV2ZW50ICYmIF90aGlzOS5fKGtleSkubGFzdFRyaWdnZXJFdmVudC50eXBlID09PSAnZm9jdXMnKSByZXR1cm47XG5cbiAgICAgIF90aGlzOS5fKGtleSkubGFzdE1vdXNlTW92ZUV2ZW50ID0gZXZlbnQ7XG5cbiAgICAgIC8vIEV4cGVuc2l2ZSBvcGVyYXRpb25zLCBidXQgdGhlaXIgZGltZW5zaW9ucyBjYW4gY2hhbmdlIGZyZWVseVxuICAgICAgdmFyIHBhZ2VXaWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRXaWR0aCB8fCBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoO1xuICAgICAgdmFyIGhhbGZQb3BwZXJXaWR0aCA9IE1hdGgucm91bmQoX3RoaXM5LnBvcHBlci5vZmZzZXRXaWR0aCAvIDIpO1xuICAgICAgdmFyIGhhbGZQb3BwZXJIZWlnaHQgPSBNYXRoLnJvdW5kKF90aGlzOS5wb3BwZXIub2Zmc2V0SGVpZ2h0IC8gMik7XG4gICAgICB2YXIgb2Zmc2V0ID0gX3RoaXM5Lm9wdGlvbnMub2Zmc2V0O1xuICAgICAgdmFyIHBhZ2VYID0gZXZlbnQucGFnZVgsXG4gICAgICAgICAgcGFnZVkgPSBldmVudC5wYWdlWTtcblxuICAgICAgdmFyIFBBRERJTkcgPSA1O1xuXG4gICAgICB2YXIgcGxhY2VtZW50ID0gX3RoaXM5Lm9wdGlvbnMucGxhY2VtZW50LnJlcGxhY2UoLy0uKy8sICcnKTtcbiAgICAgIGlmIChfdGhpczkucG9wcGVyLmdldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSBnZXRQb3BwZXJQbGFjZW1lbnQoX3RoaXM5LnBvcHBlcik7XG4gICAgICB9XG5cbiAgICAgIHZhciB4ID0gdm9pZCAwLFxuICAgICAgICAgIHkgPSB2b2lkIDA7XG5cbiAgICAgIHN3aXRjaCAocGxhY2VtZW50KSB7XG4gICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgeCA9IHBhZ2VYIC0gaGFsZlBvcHBlcldpZHRoICsgb2Zmc2V0O1xuICAgICAgICAgIHkgPSBwYWdlWSAtIDIgKiBoYWxmUG9wcGVySGVpZ2h0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgIHggPSBwYWdlWCAtIGhhbGZQb3BwZXJXaWR0aCArIG9mZnNldDtcbiAgICAgICAgICB5ID0gcGFnZVkgKyAxMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgeCA9IHBhZ2VYIC0gMiAqIGhhbGZQb3BwZXJXaWR0aDtcbiAgICAgICAgICB5ID0gcGFnZVkgLSBoYWxmUG9wcGVySGVpZ2h0ICsgb2Zmc2V0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgeCA9IHBhZ2VYICsgNTtcbiAgICAgICAgICB5ID0gcGFnZVkgLSBoYWxmUG9wcGVySGVpZ2h0ICsgb2Zmc2V0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNSaWdodE92ZXJmbG93aW5nID0gcGFnZVggKyBQQURESU5HICsgaGFsZlBvcHBlcldpZHRoICsgb2Zmc2V0ID4gcGFnZVdpZHRoO1xuICAgICAgdmFyIGlzTGVmdE92ZXJmbG93aW5nID0gcGFnZVggLSBQQURESU5HIC0gaGFsZlBvcHBlcldpZHRoICsgb2Zmc2V0IDwgMDtcblxuICAgICAgLy8gUHJldmVudCBsZWZ0L3JpZ2h0IG92ZXJmbG93XG4gICAgICBpZiAocGxhY2VtZW50ID09PSAndG9wJyB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgICAgIGlmIChpc1JpZ2h0T3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgICB4ID0gcGFnZVdpZHRoIC0gUEFERElORyAtIDIgKiBoYWxmUG9wcGVyV2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNMZWZ0T3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgICB4ID0gUEFERElORztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfdGhpczkucG9wcGVyLnN0eWxlW3ByZWZpeCgndHJhbnNmb3JtJyldID0gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJ3B4LCAnICsgeSArICdweCwgMCknO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgcG9wcGVyJ3MgcG9zaXRpb24gb24gZWFjaCBhbmltYXRpb24gZnJhbWVcbiAgICogQG1lbWJlcm9mIFRpcHB5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBfbWFrZVN0aWNreSgpIHtcbiAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG5cbiAgICB2YXIgYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24kJDEgPSBmdW5jdGlvbiBhcHBseVRyYW5zaXRpb25EdXJhdGlvbiQkMSgpIHtcbiAgICAgIF90aGlzMTAucG9wcGVyLnN0eWxlW3ByZWZpeCgndHJhbnNpdGlvbkR1cmF0aW9uJyldID0gX3RoaXMxMC5vcHRpb25zLnVwZGF0ZUR1cmF0aW9uICsgJ21zJztcbiAgICB9O1xuXG4gICAgdmFyIHJlbW92ZVRyYW5zaXRpb25EdXJhdGlvbiA9IGZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25EdXJhdGlvbigpIHtcbiAgICAgIF90aGlzMTAucG9wcGVyLnN0eWxlW3ByZWZpeCgndHJhbnNpdGlvbkR1cmF0aW9uJyldID0gJyc7XG4gICAgfTtcblxuICAgIHZhciB1cGRhdGVQb3NpdGlvbiA9IGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKCkge1xuICAgICAgaWYgKF90aGlzMTAucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgICAgX3RoaXMxMC5wb3BwZXJJbnN0YW5jZS5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbiQkMSgpO1xuXG4gICAgICBpZiAoX3RoaXMxMC5zdGF0ZS52aXNpYmxlKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGVQb3NpdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uRHVyYXRpb24oKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gV2FpdCB1bnRpbCB0aGUgcG9wcGVyJ3MgcG9zaXRpb24gaGFzIGJlZW4gdXBkYXRlZCBpbml0aWFsbHlcbiAgICBkZWZlcih1cGRhdGVQb3NpdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIG11dGF0aW9uIG9ic2VydmVyIHRvIGFuIGVsZW1lbnQgYW5kIHN0b3JlcyBpdCBpbiB0aGUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtPYmplY3R9XG4gICAqIEBtZW1iZXJvZiBUaXBweVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gX2FkZE11dGF0aW9uT2JzZXJ2ZXIoX3JlZjIpIHtcbiAgICB2YXIgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0LFxuICAgICAgICBjYWxsYmFjayA9IF9yZWYyLmNhbGxiYWNrLFxuICAgICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucztcblxuICAgIGlmICghd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpIHJldHVybjtcblxuICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl8oa2V5KS5tdXRhdGlvbk9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB0aGUgY2FsbGJhY2sgZnVuY3Rpb25zIG9uY2UgdGhlIENTUyB0cmFuc2l0aW9uIGVuZHMgZm9yIGBzaG93YCBhbmQgYGhpZGVgIG1ldGhvZHNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSBvbmNlIHRyYW5zaXRpb24gY29tcGxldGVzXG4gICAqIEBtZW1iZXJvZiBUaXBweVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gX29uVHJhbnNpdGlvbkVuZChkdXJhdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBNYWtlIGNhbGxiYWNrIHN5bmNocm9ub3VzIGlmIGR1cmF0aW9uIGlzIDBcbiAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICB2YXIgX2dldElubmVyRWxlbWVudHM0ID0gZ2V0SW5uZXJFbGVtZW50cyh0aGlzLnBvcHBlciksXG4gICAgICAgIHRvb2x0aXAgPSBfZ2V0SW5uZXJFbGVtZW50czQudG9vbHRpcDtcblxuICAgIHZhciB0b2dnbGVMaXN0ZW5lcnMgPSBmdW5jdGlvbiB0b2dnbGVMaXN0ZW5lcnMoYWN0aW9uLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKCFsaXN0ZW5lcikgcmV0dXJuO1xuICAgICAgdG9vbHRpcFthY3Rpb24gKyAnRXZlbnRMaXN0ZW5lciddKCdvbnRyYW5zaXRpb25lbmQnIGluIHdpbmRvdyA/ICd0cmFuc2l0aW9uZW5kJyA6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJywgbGlzdGVuZXIpO1xuICAgIH07XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcihlKSB7XG4gICAgICBpZiAoZS50YXJnZXQgPT09IHRvb2x0aXApIHtcbiAgICAgICAgdG9nZ2xlTGlzdGVuZXJzKCdyZW1vdmUnLCBsaXN0ZW5lcik7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRvZ2dsZUxpc3RlbmVycygncmVtb3ZlJywgdGhpcy5fKGtleSkudHJhbnNpdGlvbmVuZExpc3RlbmVyKTtcbiAgICB0b2dnbGVMaXN0ZW5lcnMoJ2FkZCcsIGxpc3RlbmVyKTtcblxuICAgIHRoaXMuXyhrZXkpLnRyYW5zaXRpb25lbmRMaXN0ZW5lciA9IGxpc3RlbmVyO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBUaXBweTogVGlwcHksXG4gICAgX2dldEV2ZW50TGlzdGVuZXJzOiBfZ2V0RXZlbnRMaXN0ZW5lcnMsXG4gICAgX2FkZE11dGF0aW9uT2JzZXJ2ZXI6IF9hZGRNdXRhdGlvbk9ic2VydmVyLFxuICAgIF9jcmVhdGVQb3BwZXJJbnN0YW5jZTogX2NyZWF0ZVBvcHBlckluc3RhbmNlLFxuICAgIF9vblRyYW5zaXRpb25FbmQ6IF9vblRyYW5zaXRpb25FbmRcbiAgfTtcbn0pKCk7XG5cbnZhciBUaXBweSA9IFQuVGlwcHk7XG52YXIgX2dldEV2ZW50TGlzdGVuZXJzID0gVC5fZ2V0RXZlbnRMaXN0ZW5lcnM7XG52YXIgX2NyZWF0ZVBvcHBlckluc3RhbmNlID0gVC5fY3JlYXRlUG9wcGVySW5zdGFuY2U7XG52YXIgX2FkZE11dGF0aW9uT2JzZXJ2ZXIgPSBULl9hZGRNdXRhdGlvbk9ic2VydmVyO1xuXG5cbnZhciBpZENvdW50ZXIgPSAxO1xuXG4vKipcbiAqIENyZWF0ZXMgdG9vbHRpcHMgZm9yIGVhY2ggcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudFtdfSBlbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAqIEByZXR1cm4ge1RpcHB5W119IEFycmF5IG9mIFRpcHB5IGluc3RhbmNlc1xuICovXG5mdW5jdGlvbiBjcmVhdGVUb29sdGlwcyhlbHMsIGNvbmZpZykge1xuICByZXR1cm4gZWxzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCByZWZlcmVuY2UpIHtcbiAgICB2YXIgaWQgPSBpZENvdW50ZXI7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGV2YWx1YXRlT3B0aW9ucyhyZWZlcmVuY2UsIGNvbmZpZy5wZXJmb3JtYW5jZSA/IGNvbmZpZyA6IGdldEluZGl2aWR1YWxPcHRpb25zKHJlZmVyZW5jZSwgY29uZmlnKSk7XG5cbiAgICB2YXIgdGl0bGUgPSByZWZlcmVuY2UuZ2V0QXR0cmlidXRlKCd0aXRsZScpO1xuICAgIGlmICghdGl0bGUgJiYgIW9wdGlvbnMuaHRtbCkgcmV0dXJuIGFjYztcblxuICAgIHJlZmVyZW5jZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcHknLCAnJyk7XG4gICAgcmVmZXJlbmNlLnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsICd0aXBweS0nICsgaWQpO1xuXG4gICAgcmVtb3ZlVGl0bGUocmVmZXJlbmNlKTtcblxuICAgIHZhciBwb3BwZXIgPSBjcmVhdGVQb3BwZXJFbGVtZW50KGlkLCB0aXRsZSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgdGlwcHkgPSBuZXcgVGlwcHkoe1xuICAgICAgaWQ6IGlkLFxuICAgICAgcmVmZXJlbmNlOiByZWZlcmVuY2UsXG4gICAgICBwb3BwZXI6IHBvcHBlcixcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICBwb3BwZXJJbnN0YW5jZTogbnVsbFxuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMuY3JlYXRlUG9wcGVySW5zdGFuY2VPbkluaXQpIHtcbiAgICAgIHRpcHB5LnBvcHBlckluc3RhbmNlID0gX2NyZWF0ZVBvcHBlckluc3RhbmNlLmNhbGwodGlwcHkpO1xuICAgICAgdGlwcHkucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IF9nZXRFdmVudExpc3RlbmVycy5jYWxsKHRpcHB5KTtcbiAgICB0aXBweS5saXN0ZW5lcnMgPSBvcHRpb25zLnRyaWdnZXIudHJpbSgpLnNwbGl0KCcgJykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGV2ZW50VHlwZSkge1xuICAgICAgcmV0dXJuIGFjYy5jb25jYXQoY3JlYXRlVHJpZ2dlcihldmVudFR5cGUsIHJlZmVyZW5jZSwgbGlzdGVuZXJzLCBvcHRpb25zLnRvdWNoSG9sZCkpO1xuICAgIH0sIFtdKTtcblxuICAgIC8vIFVwZGF0ZSB0b29sdGlwIGNvbnRlbnQgd2hlbmV2ZXIgdGhlIHRpdGxlIGF0dHJpYnV0ZSBvbiB0aGUgcmVmZXJlbmNlIGNoYW5nZXNcbiAgICBpZiAob3B0aW9ucy5keW5hbWljVGl0bGUpIHtcbiAgICAgIF9hZGRNdXRhdGlvbk9ic2VydmVyLmNhbGwodGlwcHksIHtcbiAgICAgICAgdGFyZ2V0OiByZWZlcmVuY2UsXG4gICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgICAgICB2YXIgX2dldElubmVyRWxlbWVudHMgPSBnZXRJbm5lckVsZW1lbnRzKHBvcHBlciksXG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBfZ2V0SW5uZXJFbGVtZW50cy5jb250ZW50O1xuXG4gICAgICAgICAgdmFyIHRpdGxlID0gcmVmZXJlbmNlLmdldEF0dHJpYnV0ZSgndGl0bGUnKTtcbiAgICAgICAgICBpZiAodGl0bGUpIHtcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MID0gdGl0bGU7XG4gICAgICAgICAgICByZW1vdmVUaXRsZShyZWZlcmVuY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgYXR0cmlidXRlczogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBTaG9ydGN1dHNcbiAgICByZWZlcmVuY2UuX3RpcHB5ID0gdGlwcHk7XG4gICAgcG9wcGVyLl9yZWZlcmVuY2UgPSByZWZlcmVuY2U7XG5cbiAgICBhY2MucHVzaCh0aXBweSk7XG5cbiAgICBpZENvdW50ZXIrKztcblxuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKTtcbn1cblxuLyoqXG4gKiBIaWRlcyBhbGwgcG9wcGVyc1xuICogQHBhcmFtIHtUaXBweX0gZXhjbHVkZVRpcHB5IC0gdGlwcHkgdG8gZXhjbHVkZSBpZiBuZWVkZWRcbiAqL1xuZnVuY3Rpb24gaGlkZUFsbFBvcHBlcnMoZXhjbHVkZVRpcHB5KSB7XG4gIHZhciBwb3BwZXJzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9ycy5QT1BQRVIpKTtcblxuICBwb3BwZXJzLmZvckVhY2goZnVuY3Rpb24gKHBvcHBlcikge1xuICAgIHZhciB0aXBweSA9IHBvcHBlci5fcmVmZXJlbmNlLl90aXBweTtcbiAgICB2YXIgb3B0aW9ucyA9IHRpcHB5Lm9wdGlvbnM7XG5cblxuICAgIGlmICgob3B0aW9ucy5oaWRlT25DbGljayA9PT0gdHJ1ZSB8fCBvcHRpb25zLnRyaWdnZXIuaW5kZXhPZignZm9jdXMnKSA+IC0xKSAmJiAoIWV4Y2x1ZGVUaXBweSB8fCBwb3BwZXIgIT09IGV4Y2x1ZGVUaXBweS5wb3BwZXIpKSB7XG4gICAgICB0aXBweS5oaWRlKCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBuZWVkZWQgZXZlbnQgbGlzdGVuZXJzXG4gKi9cbmZ1bmN0aW9uIGJpbmRFdmVudExpc3RlbmVycygpIHtcbiAgdmFyIHRvdWNoSGFuZGxlciA9IGZ1bmN0aW9uIHRvdWNoSGFuZGxlcigpIHtcbiAgICBpZiAoYnJvd3Nlci51c2luZ1RvdWNoKSByZXR1cm47XG5cbiAgICBicm93c2VyLnVzaW5nVG91Y2ggPSB0cnVlO1xuXG4gICAgaWYgKGJyb3dzZXIuaU9TKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3RpcHB5LXRvdWNoJyk7XG4gICAgfVxuXG4gICAgaWYgKGJyb3dzZXIuZHluYW1pY0lucHV0RGV0ZWN0aW9uICYmIHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW91c2Vtb3ZlSGFuZGxlcik7XG4gICAgfVxuXG4gICAgYnJvd3Nlci5vblVzZXJJbnB1dENoYW5nZSgndG91Y2gnKTtcbiAgfTtcblxuICB2YXIgbW91c2Vtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGltZSA9IHZvaWQgMDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICAgIC8vIENocm9tZSA2MCsgaXMgMSBtb3VzZW1vdmUgcGVyIGFuaW1hdGlvbiBmcmFtZSwgdXNlIDIwbXMgdGltZSBkaWZmZXJlbmNlXG4gICAgICBpZiAobm93IC0gdGltZSA8IDIwKSB7XG4gICAgICAgIGJyb3dzZXIudXNpbmdUb3VjaCA9IGZhbHNlO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3VzZW1vdmVIYW5kbGVyKTtcbiAgICAgICAgaWYgKCFicm93c2VyLmlPUykge1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgndGlwcHktdG91Y2gnKTtcbiAgICAgICAgfVxuICAgICAgICBicm93c2VyLm9uVXNlcklucHV0Q2hhbmdlKCdtb3VzZScpO1xuICAgICAgfVxuXG4gICAgICB0aW1lID0gbm93O1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gY2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gICAgLy8gU2ltdWxhdGVkIGV2ZW50cyBkaXNwYXRjaGVkIG9uIHRoZSBkb2N1bWVudFxuICAgIGlmICghKGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gaGlkZUFsbFBvcHBlcnMoKTtcbiAgICB9XG5cbiAgICB2YXIgcmVmZXJlbmNlID0gY2xvc2VzdChldmVudC50YXJnZXQsIHNlbGVjdG9ycy5SRUZFUkVOQ0UpO1xuICAgIHZhciBwb3BwZXIgPSBjbG9zZXN0KGV2ZW50LnRhcmdldCwgc2VsZWN0b3JzLlBPUFBFUik7XG5cbiAgICBpZiAocG9wcGVyICYmIHBvcHBlci5fcmVmZXJlbmNlLl90aXBweS5vcHRpb25zLmludGVyYWN0aXZlKSByZXR1cm47XG5cbiAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHJlZmVyZW5jZS5fdGlwcHkub3B0aW9ucztcblxuICAgICAgLy8gSGlkZSBhbGwgcG9wcGVycyBleGNlcHQgdGhlIG9uZSBiZWxvbmdpbmcgdG8gdGhlIGVsZW1lbnQgdGhhdCB3YXMgY2xpY2tlZCBJRlxuICAgICAgLy8gYG11bHRpcGxlYCBpcyBmYWxzZSBBTkQgdGhleSBhcmUgYSB0b3VjaCB1c2VyLCBPUlxuICAgICAgLy8gYG11bHRpcGxlYCBpcyBmYWxzZSBBTkQgaXQncyB0cmlnZ2VyZWQgYnkgYSBjbGlja1xuXG4gICAgICBpZiAoIW9wdGlvbnMubXVsdGlwbGUgJiYgYnJvd3Nlci51c2luZ1RvdWNoIHx8ICFvcHRpb25zLm11bHRpcGxlICYmIG9wdGlvbnMudHJpZ2dlci5pbmRleE9mKCdjbGljaycpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIGhpZGVBbGxQb3BwZXJzKHJlZmVyZW5jZS5fdGlwcHkpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5oaWRlT25DbGljayAhPT0gdHJ1ZSB8fCBvcHRpb25zLnRyaWdnZXIuaW5kZXhPZignY2xpY2snKSA+IC0xKSByZXR1cm47XG4gICAgfVxuXG4gICAgaGlkZUFsbFBvcHBlcnMoKTtcbiAgfTtcblxuICB2YXIgYmx1ckhhbmRsZXIgPSBmdW5jdGlvbiBibHVySGFuZGxlcihldmVudCkge1xuICAgIHZhciBfZG9jdW1lbnQgPSBkb2N1bWVudCxcbiAgICAgICAgZWwgPSBfZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICAgIGlmIChlbCAmJiBlbC5ibHVyICYmIG1hdGNoZXMkMS5jYWxsKGVsLCBzZWxlY3RvcnMuUkVGRVJFTkNFKSkge1xuICAgICAgZWwuYmx1cigpO1xuICAgIH1cbiAgfTtcblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsaWNrSGFuZGxlcik7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0b3VjaEhhbmRsZXIpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGJsdXJIYW5kbGVyKTtcblxuICBpZiAoIWJyb3dzZXIuc3VwcG9ydHNUb3VjaCAmJiAobmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzKSkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdG91Y2hIYW5kbGVyKTtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgdG9vbHRpcHNcbiAqIEBwYXJhbSB7U3RyaW5nfEVsZW1lbnR8RWxlbWVudFtdfE5vZGVMaXN0fE9iamVjdH0gc2VsZWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHRpcHB5JDIoc2VsZWN0b3IsIG9wdGlvbnMpIHtcbiAgaWYgKGJyb3dzZXIuc3VwcG9ydGVkICYmICFicm93c2VyLl9ldmVudExpc3RlbmVyc0JvdW5kKSB7XG4gICAgYmluZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgYnJvd3Nlci5fZXZlbnRMaXN0ZW5lcnNCb3VuZCA9IHRydWU7XG4gIH1cblxuICBpZiAoaXNPYmplY3RMaXRlcmFsKHNlbGVjdG9yKSkge1xuICAgIHNlbGVjdG9yLnJlZk9iaiA9IHRydWU7XG4gICAgc2VsZWN0b3IuYXR0cmlidXRlcyA9IHNlbGVjdG9yLmF0dHJpYnV0ZXMgfHwge307XG4gICAgc2VsZWN0b3Iuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24gKGtleSwgdmFsKSB7XG4gICAgICBzZWxlY3Rvci5hdHRyaWJ1dGVzW2tleV0gPSB2YWw7XG4gICAgfTtcbiAgICBzZWxlY3Rvci5nZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3IuYXR0cmlidXRlc1trZXldO1xuICAgIH07XG4gICAgc2VsZWN0b3IucmVtb3ZlQXR0cmlidXRlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVsZXRlIHNlbGVjdG9yLmF0dHJpYnV0ZXNba2V5XTtcbiAgICB9O1xuICAgIHNlbGVjdG9yLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBzZWxlY3Rvci5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKCkge307XG4gICAgc2VsZWN0b3IuY2xhc3NMaXN0ID0ge1xuICAgICAgY2xhc3NOYW1lczoge30sXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yLmNsYXNzTGlzdC5jbGFzc05hbWVzW2tleV0gPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGtleSkge1xuICAgICAgICBkZWxldGUgc2VsZWN0b3IuY2xhc3NMaXN0LmNsYXNzTmFtZXNba2V5XTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgICAgY29udGFpbnM6IGZ1bmN0aW9uIGNvbnRhaW5zKGtleSkge1xuICAgICAgICByZXR1cm4gISFzZWxlY3Rvci5jbGFzc0xpc3QuY2xhc3NOYW1lc1trZXldO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBvcHRpb25zID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICByZXR1cm4ge1xuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgIHRvb2x0aXBzOiBicm93c2VyLnN1cHBvcnRlZCA/IGNyZWF0ZVRvb2x0aXBzKGdldEFycmF5T2ZFbGVtZW50cyhzZWxlY3RvciksIG9wdGlvbnMpIDogW10sXG4gICAgZGVzdHJveUFsbDogZnVuY3Rpb24gZGVzdHJveUFsbCgpIHtcbiAgICAgIHRoaXMudG9vbHRpcHMuZm9yRWFjaChmdW5jdGlvbiAodG9vbHRpcCkge1xuICAgICAgICByZXR1cm4gdG9vbHRpcC5kZXN0cm95KCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMudG9vbHRpcHMgPSBbXTtcbiAgICB9XG4gIH07XG59XG5cbnRpcHB5JDIuYnJvd3NlciA9IGJyb3dzZXI7XG50aXBweSQyLmRlZmF1bHRzID0gZGVmYXVsdHM7XG5cbnJldHVybiB0aXBweSQyO1xuXG59KSkpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaG93RGF0ZVN0YXRlID0gZnVuY3Rpb24oYnV0dG9uKSB7XG4gICAgICAgIHZhciByb3cgPSAkKGJ1dHRvbikucGFyZW50cygnLmNhYmluZXQtcmlza3MtcmVjb21tZW5kYXRpb24nKTtcbiAgICAgICAgcm93LmZpbmQoJy5jYWJpbmV0LXJpc2tzLXJlY29tbWVuZGF0aW9uLWRlZmF1bHQtc3RhdGUnKS5oaWRlKCk7XG4gICAgICAgIHJvdy5maW5kKCcuY2FiaW5ldC1yaXNrcy1yZWNvbW1lbmRhdGlvbi1lbnRlci1kYXRlLXN0YXRlJykuc2hvdygpO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgc2hvd0RlZmF1bHRTdGF0ZSA9IGZ1bmN0aW9uKGJ1dHRvbikge1xuICAgICAgICB2YXIgcm93ID0gJChidXR0b24pLnBhcmVudHMoJy5jYWJpbmV0LXJpc2tzLXJlY29tbWVuZGF0aW9uJyk7XG4gICAgICAgIHJvdy5maW5kKCcuY2FiaW5ldC1yaXNrcy1yZWNvbW1lbmRhdGlvbi1kZWZhdWx0LXN0YXRlJykuc2hvdygpO1xuICAgICAgICByb3cuZmluZCgnLmNhYmluZXQtcmlza3MtcmVjb21tZW5kYXRpb24tZW50ZXItZGF0ZS1zdGF0ZScpLmhpZGUoKTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgJCgnW2RhdGEtZW50ZXItZGF0ZV0nKS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICBpZiAoJCh0aGlzKS5hdHRyKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNob3dEYXRlU3RhdGUodGhpcyk7XG4gICAgfSk7XG5cbiAgICAkKCdbZGF0YS1zYXZlLWRhdGVdJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBidXR0b24gPSB0aGlzO1xuICAgIFx0dmFyIHByb2NlZHVyZSA9ICQodGhpcykuZGF0YSgnc2F2ZS1kYXRlJyk7XG4gICAgXHR2YXIgcm93ID0gJCh0aGlzKS5wYXJlbnRzKCcuY2FiaW5ldC1yaXNrcy1yZWNvbW1lbmRhdGlvbicpO1xuICAgIFx0dmFyIGRhdGUgPSByb3cuZmluZCgnLmNhYmluZXQtcmlza3MtcmVjb21tZW5kYXRpb24tZW50ZXItZGF0ZSBpbnB1dCcpLnZhbCgpO1xuXG4gICAgXHRpZiAoISBkYXRlKSB7XG5cdFx0XHRyb3cuZmluZCgnLmNhYmluZXQtcmlza3MtcmVjb21tZW5kYXRpb24tZW50ZXItZGF0ZSBpbnB1dCcpLmZvY3VzKCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7ICBcdFx0XG4gICAgXHR9XG4gICAgXHRcbiAgICBcdCQuYWpheCh7XG4gICAgXHRcdG1ldGhvZDogJ1BPU1QnLFxuICAgIFx0XHR1cmw6ICcvcHJvY2VkdXJlJyxcbiAgICBcdFx0ZGF0YVR5cGU6ICdqc29uJyxcbiAgICBcdFx0ZGF0YToge1xuICAgIFx0XHRcdGRhdGU6IGRhdGUsXG4gICAgXHRcdFx0cHJvY2VkdXJlOiBwcm9jZWR1cmUsXG4gICAgXHRcdFx0X3Rva2VuOiAkKCdpbnB1dFtuYW1lPV90b2tlbl0nKS52YWwoKVxuICAgIFx0XHR9LFxuICAgIFx0XHRzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgIFx0XHRcdHJvdy5maW5kKCcuY2FiaW5ldC1yaXNrcy1yZWNvbW1lbmRhdGlvbi1kYXRlJykudGV4dChyZXNwb25zZS5uZXh0RGF0ZSk7XG4gICAgXHRcdFx0c2hvd0RlZmF1bHRTdGF0ZShidXR0b24pO1xuICAgIFx0XHR9XG4gICAgXHR9KTtcblxuICAgIFx0cmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgJCgnW2RhdGEtY2xvc2UtZW50ZXItZGF0ZV0nKS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gc2hvd0RlZmF1bHRTdGF0ZSh0aGlzKTtcbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICQoJy5qcy1oZWFkZXItc2xpZGVyJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoZWFkZXJTbGlkZXIgPSAkKHRoaXMpLmJ4U2xpZGVyKHtcbiAgICAgICAgICAgIGluZmluaXRlTG9vcDogdHJ1ZSxcbiAgICAgICAgICAgIHBhZ2VyOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICAkKCcuanMtaGVhZGVyLXNsaWRlci1uZXh0JykuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGhlYWRlclNsaWRlci5nb1RvTmV4dFNsaWRlKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoJy5qcy1oZWFkZXItc2xpZGVyLXByZXYnKS5jbGljayhmdW5jdGlvbigpe1xuICAgICAgICAgICAgaGVhZGVyU2xpZGVyLmdvVG9QcmV2U2xpZGUoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgaGVhZGVyU2xpZGVyLnJlbG9hZFNsaWRlcigpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgICQoJy5qcy1oZWFkZXItYWJvdXQtc2xpZGVyJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoZWFkZXJTbGlkZXJBYm91dCA9ICQodGhpcykuYnhTbGlkZXIoe1xuICAgICAgICAgICAgaW5maW5pdGVMb29wOiB0cnVlLFxuICAgICAgICAgICAgcGFnZXI6IGZhbHNlLFxuICAgICAgICAgICAgY29udHJvbHM6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgaGVhZGVyU2xpZGVyQWJvdXQucmVsb2FkU2xpZGVyKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJCgnLmpzLWxvZ290eXBlcy1zbGlkZXInKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxvZ290eXBlc1NsaWRlciA9ICQodGhpcykuYnhTbGlkZXIoe1xuICAgICAgICAgICAgaW5maW5pdGVMb29wOiB0cnVlLFxuICAgICAgICAgICAgcGFnZXI6IGZhbHNlLFxuICAgICAgICAgICAgY29udHJvbHM6IGZhbHNlXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQodGhpcykuY2xvc2VzdCgnLmxvZ290eXBlcy1ibG9jay1zbGlkZXInKS5maW5kKCcuanMtbG9nb3R5cGVzLXNsaWRlci1uZXh0JykuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxvZ290eXBlc1NsaWRlci5nb1RvTmV4dFNsaWRlKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQodGhpcykuY2xvc2VzdCgnLmxvZ290eXBlcy1ibG9jay1zbGlkZXInKS5maW5kKCcuanMtbG9nb3R5cGVzLXNsaWRlci1wcmV2JykuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxvZ290eXBlc1NsaWRlci5nb1RvUHJldlNsaWRlKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxvZ290eXBlc1NsaWRlci5yZWxvYWRTbGlkZXIoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICAkKCcjcmVjb21tZW5kYXRpb25zLXN1YnNjcmliZScpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgZm9ybSA9ICQodGhpcykucGFyZW50cygnZm9ybScpO1xuXG4gICAgICAgIGlmICh3aW5kb3cucmVjb21tZW5kYXRpb25UaW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQod2luZG93LnJlY29tbWVuZGF0aW9uVGltZW91dCk7XG4gICAgICAgIH1cblxuICAgICAgICB3aW5kb3cucmVjb21tZW5kYXRpb25UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgZm9ybS5zdWJtaXQoKTtcbiAgICAgICAgfSwgMTMwMCk7XG4gICAgfSlcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIGhpZGVFdmVudChlLCBjbG9zZXN0RWwsIGhpZGVGdW5jKSB7XG4gICAgICAgIGlmKCEkKGUudGFyZ2V0KS5jbG9zZXN0KGNsb3Nlc3RFbCkubGVuZ3RoKSB7XG4gICAgICAgICAgICBoaWRlRnVuYygpO1xuICAgICAgICAgICAgJChkb2N1bWVudCkub2ZmKCdjbGljaycsICdib2R5JywgaGlkZUV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICQoJy5qcy1vZmZjYW52YXMnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvZmZjYW52YXNPdmVybGF5ID0gJyNvZmZjYW52YXMnLFxuICAgICAgICAgICAgb2ZmY2FudmFzID0gJyNvZmZjYW52YXMgPiAubWFpbi1vZmZjYW52YXMnO1xuXG4gICAgICAgIGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICAgICAgICAkKCcuanMtb2ZmY2FudmFzJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgJChvZmZjYW52YXNPdmVybGF5KS5hZGRDbGFzcygnYWN0aXZlJyk7XG5cbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdib2R5JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBoaWRlRXZlbnQoZSwgb2ZmY2FudmFzLCBoaWRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgICAgICAgICQoJy5qcy1vZmZjYW52YXMsICcgKyBvZmZjYW52YXNPdmVybGF5KS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcbiAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNob3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCAkICkge1xuICAgICQuZm4udG9nZ2xlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHRoaXMpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvZ2dsZVRhcmdldCA9ICQodGhpcykuZGF0YSgndG9nZ2xlJykgfHwgJCh0aGlzKS5hdHRyKCdocmVmJyksXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzID0gJCh0aGlzKS5kYXRhKCd0b2dnbGUtY2xhc3MnKSB8fCAnYWN0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlR3JvdXAgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZS1ncm91cCcpLFxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVTZWxmRGVhY3RpdmUgPSAkKHRoaXMpLmlzKCdbZGF0YS10b2dnbGUtc2VsZi1kZWFjdGl2ZV0nKTtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRvZ2dsZVRhcmdldCwgdG9nZ2xlQ2xhc3MsIHRvZ2dsZUdyb3VwKTtcblxuICAgICAgICAgICAgICAgICQoJ1tkYXRhLXRvZ2dsZS1ncm91cD1cIicgKyB0b2dnbGVHcm91cCArICdcIl0nKS5ub3QodGhpcykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZScpIHx8ICQodGhpcykuYXR0cignaHJlZicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q2xhc3MgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZS1jbGFzcycpIHx8ICdhY3RpdmUnO1xuXG4gICAgICAgICAgICAgICAgICAgICQodGFyZ2V0KS5yZW1vdmVDbGFzcyh0YXJnZXRDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3ModGFyZ2V0Q2xhc3MpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3ModG9nZ2xlQ2xhc3MpICYmIHRvZ2dsZVNlbGZEZWFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKHRvZ2dsZUNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgJCh0b2dnbGVUYXJnZXQpLnJlbW92ZUNsYXNzKHRvZ2dsZUNsYXNzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKHRvZ2dsZUNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgJCh0b2dnbGVUYXJnZXQpLmFkZENsYXNzKHRvZ2dsZUNsYXNzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbn0oIGpRdWVyeSApKTsiLCIkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtdG9nZ2xlXScpLnRvZ2dsZXIoKTtcbiAgICAkKCc6aW5wdXQnKS5pbnB1dG1hc2soKTtcbiAgICB0aXBweSgnW2RhdGEtdG9vbHRpcF0nLCB7XG4gICAgICAgIHRoZW1lOiAnbGlnaHQnXG4gICAgfSk7XG59KTsiXX0=
