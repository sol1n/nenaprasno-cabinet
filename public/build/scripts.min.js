!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";var n=[],i=e.document,r=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,l=n.indexOf,c={},u=c.toString,d=c.hasOwnProperty,f=d.toString,p=f.call(Object),h={};function g(e,t){var n=(t=t||i).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}var m=function(e,t){return new m.fn.init(e,t)},v=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,y=/^-ms-/,b=/-([a-z])/g,x=function(e,t){return t.toUpperCase()};m.fn=m.prototype={jquery:"3.2.1",constructor:m,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=m.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return m.each(this,e)},map:function(e){return this.pushStack(m.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},m.extend=m.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||m.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(i=e[t])&&(c&&i&&(m.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&m.isPlainObject(n)?n:{},a[t]=m.extend(c,o,i)):void 0!==i&&(a[t]=i));return a},m.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===m.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=m.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==u.call(e))&&(!(t=r(e))||"function"==typeof(n=d.call(t,"constructor")&&t.constructor)&&f.call(n)===p)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[u.call(e)]||"object":typeof e},globalEval:function(e){g(e)},camelCase:function(e){return e.replace(y,"ms-").replace(b,x)},each:function(e,t){var n,i=0;if(w(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(v,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(w(Object(e))?m.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:l.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(w(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return a.apply([],s)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),m.isFunction(e))return i=o.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(o.call(arguments)))}).guid=e.guid=e.guid||m.guid++,r},now:Date.now,support:h}),"function"==typeof Symbol&&(m.fn[Symbol.iterator]=n[Symbol.iterator]),m.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){c["[object "+t+"]"]=t.toLowerCase()});function w(e){var t=!!e&&"length"in e&&e.length,n=m.type(e);return"function"!==n&&!m.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}var k=function(e){var t,n,i,r,o,a,s,l,c,u,d,f,p,h,g,m,v,y,b,x="sizzle"+1*new Date,w=e.document,k=0,C=0,S=ae(),E=ae(),T=ae(),P=function(e,t){return e===t&&(d=!0),0},D={}.hasOwnProperty,M=[],A=M.pop,O=M.push,L=M.push,N=M.slice,I=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},j="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",$="\\["+F+"*("+R+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+F+"*\\]",_=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+$+")*)|.*)\\)|)",H=new RegExp(F+"+","g"),B=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),q=new RegExp("^"+F+"*,"+F+"*"),W=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),Y=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),z=new RegExp(_),U=new RegExp("^"+R+"$"),G={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+$),PSEUDO:new RegExp("^"+_),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+j+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,V=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,J=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig"),ee=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){f()},re=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{L.apply(M=N.call(w.childNodes),w.childNodes),M[w.childNodes.length].nodeType}catch(e){L={apply:M.length?function(e,t){O.apply(e,N.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(e,t,i,r){var o,s,c,u,d,h,v,y=t&&t.ownerDocument,k=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return i;if(!r&&((t?t.ownerDocument||t:w)!==p&&f(t),t=t||p,g)){if(11!==k&&(d=Z.exec(e)))if(o=d[1]){if(9===k){if(!(c=t.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(y&&(c=y.getElementById(o))&&b(t,c)&&c.id===o)return i.push(c),i}else{if(d[2])return L.apply(i,t.getElementsByTagName(e)),i;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!T[e+" "]&&(!m||!m.test(e))){if(1!==k)y=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((u=t.getAttribute("id"))?u=u.replace(te,ne):t.setAttribute("id",u=x),s=(h=a(e)).length;s--;)h[s]="#"+u+" "+ve(h[s]);v=h.join(","),y=Q.test(e)&&pe(t.parentNode)||t}if(v)try{return L.apply(i,y.querySelectorAll(v)),i}catch(e){}finally{u===x&&t.removeAttribute("id")}}}return l(e.replace(B,"$1"),t,i,r)}function ae(){var e=[];function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}return t}function se(e){return e[x]=!0,e}function le(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function ue(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function fe(e){return se(function(t){return t=+t,se(function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))})})}function pe(e){return e&&void 0!==e.getElementsByTagName&&e}n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},f=oe.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:w;return a!==p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,g=!o(p),w!==p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=le(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=K.test(p.getElementsByClassName),n.getById=le(function(e){return h.appendChild(e).id=x,!p.getElementsByName||!p.getElementsByName(x).length}),n.getById?(i.filter.ID=function(e){var t=e.replace(J,ee);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(J,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=K.test(p.querySelectorAll))&&(le(function(e){h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+F+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+F+"*(?:value|"+j+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+F+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=K.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&le(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",_)}),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=K.test(h.compareDocumentPosition),b=t||K.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},P=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===p||e.ownerDocument===w&&b(w,e)?-1:t===p||t.ownerDocument===w&&b(w,t)?1:u?I(u,e)-I(u,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!r||!o)return e===p?-1:t===p?1:r?-1:o?1:u?I(u,e)-I(u,t):0;if(r===o)return ue(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?ue(a[i],s[i]):a[i]===w?-1:s[i]===w?1:0},p):p},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&f(e),t=t.replace(Y,"='$1']"),n.matchesSelector&&g&&!T[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return oe(t,p,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==p&&f(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==p&&f(e);var r=i.attrHandle[t.toLowerCase()],o=r&&D.call(i.attrHandle,t.toLowerCase())?r(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],r=0,o=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(P),d){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return u=null,e},r=oe.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=oe.selectors={cacheLength:50,createPseudo:se,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(J,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(J,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(J,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=S[e+" "];return t||(t=new RegExp("(^|"+F+")"+e+"("+F+"|$)"))&&S(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=oe.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(H," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,f,p,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(m){if(o){for(;g;){for(f=t;f=f[g];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(b=(p=(c=(u=(d=(f=m)[x]||(f[x]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===k&&c[1])&&c[2],f=p&&m.childNodes[p];f=++p&&f&&f[g]||(b=p=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){u[e]=[k,p,b];break}}else if(y&&(b=p=(c=(u=(d=(f=t)[x]||(f[x]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===k&&c[1]),!1===b)for(;(f=++p&&f&&f[g]||(b=p=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++b||(y&&((u=(d=f[x]||(f[x]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[k,b]),f!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[x]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var i,o=r(e,t),a=o.length;a--;)e[i=I(e,o[a])]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:se(function(e){var t=[],n=[],i=s(e.replace(B,"$1"));return i[x]?se(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(J,ee),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:se(function(e){return U.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(J,ee).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return V.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:fe(function(){return[0]}),last:fe(function(e,t){return[t-1]}),eq:fe(function(e,t,n){return[n<0?n+t:n]}),even:fe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:fe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:fe(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:fe(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=(he=t,function(e){return"input"===e.nodeName.toLowerCase()&&e.type===he});var he;for(t in{submit:!0,reset:!0})i.pseudos[t]=(ge=t,function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===ge});var ge;function me(){}me.prototype=i.filters=i.pseudos,i.setFilters=new me,a=oe.tokenize=function(e,t){var n,r,o,a,s,l,c,u=E[e+" "];if(u)return t?0:u.slice(0);for(s=e,l=[],c=i.preFilter;s;){n&&!(r=q.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),n=!1,(r=W.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(B," ")}),s=s.slice(n.length));for(a in i.filter)!(r=G[a].exec(s))||c[a]&&!(r=c[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):E(e,l).slice(0)};function ve(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ye(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&"parentNode"===o,s=C++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,l){var c,u,d,f=[k,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(u=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[o])&&c[0]===k&&c[1]===s)return f[2]=c[2];if(u[o]=f,f[2]=e(t,n,l))return!0}return!1}}function be(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function xe(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),c&&t.push(s)));return a}function we(e,t,n,i,r,o){return i&&!i[x]&&(i=we(i)),r&&!r[x]&&(r=we(r,o)),se(function(o,a,s,l){var c,u,d,f=[],p=[],h=a.length,g=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)oe(e,t[i],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:xe(g,f,e,s,l),v=n?r||(o?e:h||i)?[]:a:m;if(n&&n(m,v,s,l),i)for(c=xe(v,p),i(c,[],s,l),u=c.length;u--;)(d=c[u])&&(v[p[u]]=!(m[p[u]]=d));if(o){if(r||e){if(r){for(c=[],u=v.length;u--;)(d=v[u])&&c.push(m[u]=d);r(null,v=[],c,l)}for(u=v.length;u--;)(d=v[u])&&(c=r?I(o,d):f[u])>-1&&(o[c]=!(a[c]=d))}}else v=xe(v===a?v.splice(h,v.length):v),r?r(null,a,v,l):L.apply(a,v)})}function ke(e){for(var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,u=ye(function(e){return e===t},s,!0),d=ye(function(e){return I(t,e)>-1},s,!0),f=[function(e,n,i){var r=!a&&(i||n!==c)||((t=n).nodeType?u(e,n,i):d(e,n,i));return t=null,r}];l<o;l++)if(n=i.relative[e[l].type])f=[ye(be(f),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[x]){for(r=++l;r<o&&!i.relative[e[r].type];r++);return we(l>1&&be(f),l>1&&ve(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(B,"$1"),n,l<r&&ke(e.slice(l,r)),r<o&&ke(e=e.slice(r)),r<o&&ve(e))}f.push(n)}return be(f)}return s=oe.compile=function(e,t){var n,r=[],o=[],s=T[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=ke(t[n]))[x]?r.push(s):o.push(s);(s=T(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,a,s,l,u){var d,h,m,v=0,y="0",b=o&&[],x=[],w=c,C=o||r&&i.find.TAG("*",u),S=k+=null==w?1:Math.random()||.1,E=C.length;for(u&&(c=a===p||a||u);y!==E&&null!=(d=C[y]);y++){if(r&&d){for(h=0,a||d.ownerDocument===p||(f(d),s=!g);m=e[h++];)if(m(d,a||p,s)){l.push(d);break}u&&(k=S)}n&&((d=!m&&d)&&v--,o&&b.push(d))}if(v+=y,n&&y!==v){for(h=0;m=t[h++];)m(b,x,a,s);if(o){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=A.call(l));x=xe(x)}L.apply(l,x),u&&!o&&x.length>0&&v+t.length>1&&oe.uniqueSort(l)}return u&&(k=S,c=w),b};return n?se(o):o}(o,r))).selector=e}return s},l=oe.select=function(e,t,n,r){var o,l,c,u,d,f="function"==typeof e&&e,p=!r&&a(e=f.selector||e);if(n=n||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&g&&i.relative[l[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(J,ee),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=G.needsContext.test(e)?0:l.length;o--&&(c=l[o],!i.relative[u=c.type]);)if((d=i.find[u])&&(r=d(c.matches[0].replace(J,ee),Q.test(l[0].type)&&pe(t.parentNode)||t))){if(l.splice(o,1),!(e=r.length&&ve(l)))return L.apply(n,r),n;break}}return(f||s(e,p))(r,t,!g,n,!t||Q.test(e)&&pe(t.parentNode)||t),n},n.sortStable=x.split("").sort(P).join("")===x,n.detectDuplicates=!!d,f(),n.sortDetached=le(function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||ce(j,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(e);m.find=k,m.expr=k.selectors,m.expr[":"]=m.expr.pseudos,m.uniqueSort=m.unique=k.uniqueSort,m.text=k.getText,m.isXMLDoc=k.isXML,m.contains=k.contains,m.escapeSelector=k.escape;var C=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&m(e).is(n))break;i.push(e)}return i},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},E=m.expr.match.needsContext;function T(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var P=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,D=/^.[^:#\[\.,]*$/;function M(e,t,n){return m.isFunction(t)?m.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?m.grep(e,function(e){return e===t!==n}):"string"!=typeof t?m.grep(e,function(e){return l.call(t,e)>-1!==n}):D.test(t)?m.filter(t,e,n):(t=m.filter(t,e),m.grep(e,function(e){return l.call(t,e)>-1!==n&&1===e.nodeType}))}m.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?m.find.matchesSelector(i,e)?[i]:[]:m.find.matches(e,m.grep(t,function(e){return 1===e.nodeType}))},m.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(m(e).filter(function(){for(t=0;t<i;t++)if(m.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)m.find(e,r[t],n);return i>1?m.uniqueSort(n):n},filter:function(e){return this.pushStack(M(this,e||[],!1))},not:function(e){return this.pushStack(M(this,e||[],!0))},is:function(e){return!!M(this,"string"==typeof e&&E.test(e)?m(e):e||[],!1).length}});var A,O=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(m.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||A,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:O.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof m?t[0]:t,m.merge(this,m.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:i,!0)),P.test(r[1])&&m.isPlainObject(t))for(r in t)m.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=i.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m.isFunction(e)?void 0!==n.ready?n.ready(e):e(m):m.makeArray(e,this)}).prototype=m.fn,A=m(i);var L=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};m.fn.extend({has:function(e){var t=m(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(m.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&m(e);if(!E.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&m.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?m.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?l.call(m(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(m.uniqueSort(m.merge(this.get(),m(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function I(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}m.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,n){return C(e,"parentNode",n)},next:function(e){return I(e,"nextSibling")},prev:function(e){return I(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,n){return C(e,"nextSibling",n)},prevUntil:function(e,t,n){return C(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return T(e,"iframe")?e.contentDocument:(T(e,"template")&&(e=e.content||e),m.merge([],e.childNodes))}},function(e,t){m.fn[e]=function(n,i){var r=m.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=m.filter(i,r)),this.length>1&&(N[e]||m.uniqueSort(r),L.test(e)&&r.reverse()),this.pushStack(r)}});var j=/[^\x20\t\r\n\f]+/g;m.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return m.each(e.match(j)||[],function(e,n){t[n]=!0}),t}(e):m.extend({},e);var t,n,i,r,o=[],a=[],s=-1,l=function(){for(r=r||e.once,i=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){m.each(n,function(n,i){m.isFunction(i)?e.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==m.type(i)&&t(i)})}(arguments),n&&!t&&l()),this},remove:function(){return m.each(arguments,function(e,t){for(var n;(n=m.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?m.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=a=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c};function F(e){return e}function R(e){throw e}function $(e,t,n,i){var r;try{e&&m.isFunction(r=e.promise)?r.call(e).done(t).fail(n):e&&m.isFunction(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}m.extend({Deferred:function(t){var n=[["notify","progress",m.Callbacks("memory"),m.Callbacks("memory"),2],["resolve","done",m.Callbacks("once memory"),m.Callbacks("once memory"),0,"resolved"],["reject","fail",m.Callbacks("once memory"),m.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return m.Deferred(function(t){m.each(n,function(n,i){var r=m.isFunction(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&m.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(t,i,r){var o=0;function a(t,n,i,r){return function(){var s=this,l=arguments,c=function(){var e,c;if(!(t<o)){if((e=i.apply(s,l))===n.promise())throw new TypeError("Thenable self-resolution");c=e&&("object"==typeof e||"function"==typeof e)&&e.then,m.isFunction(c)?r?c.call(e,a(o,n,F,r),a(o,n,R,r)):(o++,c.call(e,a(o,n,F,r),a(o,n,R,r),a(o,n,F,n.notifyWith))):(i!==F&&(s=void 0,l=[e]),(r||n.resolveWith)(s,l))}},u=r?c:function(){try{c()}catch(e){m.Deferred.exceptionHook&&m.Deferred.exceptionHook(e,u.stackTrace),t+1>=o&&(i!==R&&(s=void 0,l=[e]),n.rejectWith(s,l))}};t?u():(m.Deferred.getStackHook&&(u.stackTrace=m.Deferred.getStackHook()),e.setTimeout(u))}}return m.Deferred(function(e){n[0][3].add(a(0,e,m.isFunction(r)?r:F,e.notifyWith)),n[1][3].add(a(0,e,m.isFunction(t)?t:F)),n[2][3].add(a(0,e,m.isFunction(i)?i:R))}).promise()},promise:function(e){return null!=e?m.extend(e,r):r}},o={};return m.each(n,function(e,t){var a=t[2],s=t[5];r[t[1]]=a.add,s&&a.add(function(){i=s},n[3-e][2].disable,n[0][2].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=o.call(arguments),a=m.Deferred(),s=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?o.call(arguments):n,--t||a.resolveWith(i,r)}};if(t<=1&&($(e,a.done(s(n)).resolve,a.reject,!t),"pending"===a.state()||m.isFunction(r[n]&&r[n].then)))return a.then();for(;n--;)$(r[n],s(n),a.reject);return a.promise()}});var _=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;m.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&_.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},m.readyException=function(t){e.setTimeout(function(){throw t})};var H=m.Deferred();m.fn.ready=function(e){return H.then(e).catch(function(e){m.readyException(e)}),this},m.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--m.readyWait:m.isReady)||(m.isReady=!0,!0!==e&&--m.readyWait>0||H.resolveWith(i,[m]))}}),m.ready.then=H.then;function B(){i.removeEventListener("DOMContentLoaded",B),e.removeEventListener("load",B),m.ready()}"complete"===i.readyState||"loading"!==i.readyState&&!i.documentElement.doScroll?e.setTimeout(m.ready):(i.addEventListener("DOMContentLoaded",B),e.addEventListener("load",B));var q=function(e,t,n,i,r,o,a){var s=0,l=e.length,c=null==n;if("object"===m.type(n)){r=!0;for(s in n)q(e,t,s,n[s],!0,o,a)}else if(void 0!==i&&(r=!0,m.isFunction(i)||(a=!0),c&&(a?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(m(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:c?t.call(e):l?t(e[0],n):o},W=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=m.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},W(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[m.camelCase(t)]=n;else for(i in t)r[m.camelCase(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][m.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(m.camelCase):(t=m.camelCase(t))in i?[t]:t.match(j)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||m.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!m.isEmptyObject(t)}};var z=new Y,U=new Y,G=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,X=/[A-Z]/g;function V(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(X,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:G.test(r)?JSON.parse(r):r)}catch(e){}U.set(e,t,n)}else n=void 0;var r;return n}m.extend({hasData:function(e){return U.hasData(e)||z.hasData(e)},data:function(e,t,n){return U.access(e,t,n)},removeData:function(e,t){U.remove(e,t)},_data:function(e,t,n){return z.access(e,t,n)},_removeData:function(e,t){z.remove(e,t)}}),m.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=U.get(o),1===o.nodeType&&!z.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=m.camelCase(i.slice(5)),V(o,i,r[i]));z.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){U.set(this,e)}):q(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=U.get(o,e)))return n;if(void 0!==(n=V(o,e)))return n}else this.each(function(){U.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){U.remove(this,e)})}}),m.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=z.get(e,t),n&&(!i||Array.isArray(n)?i=z.access(e,t,m.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=m.queue(e,t),i=n.length,r=n.shift(),o=m._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){m.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return z.get(e,n)||z.access(e,n,{empty:m.Callbacks("once memory").add(function(){z.remove(e,[t+"queue",n])})})}}),m.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?m.queue(this[0],e):void 0===t?this:this.each(function(){var n=m.queue(this,e,t);m._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&m.dequeue(this,e)})},dequeue:function(e){return this.each(function(){m.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=m.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=z.get(o[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var K=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Z=new RegExp("^(?:([+-])=|)("+K+")([a-z%]*)$","i"),Q=["Top","Right","Bottom","Left"],J=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&m.contains(e.ownerDocument,e)&&"none"===m.css(e,"display")},ee=function(e,t,n,i){var r,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];r=n.apply(e,i||[]);for(o in t)e.style[o]=a[o];return r};function te(e,t,n,i){var r,o=1,a=20,s=i?function(){return i.cur()}:function(){return m.css(e,t,"")},l=s(),c=n&&n[3]||(m.cssNumber[t]?"":"px"),u=(m.cssNumber[t]||"px"!==c&&+l)&&Z.exec(m.css(e,t));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{u/=o=o||".5",m.style(e,t,u+c)}while(o!==(o=s()/l)&&1!==o&&--a)}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var ne={};function ie(e){var t,n=e.ownerDocument,i=e.nodeName,r=ne[i];return r||(t=n.body.appendChild(n.createElement(i)),r=m.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ne[i]=r,r)}function re(e,t){for(var n,i,r=[],o=0,a=e.length;o<a;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=z.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&J(i)&&(r[o]=ie(i))):"none"!==n&&(r[o]="none",z.set(i,"display",n)));for(o=0;o<a;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}m.fn.extend({show:function(){return re(this,!0)},hide:function(){return re(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){J(this)?m(this).show():m(this).hide()})}});var oe=/^(?:checkbox|radio)$/i,ae=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,se=/^$|\/(?:java|ecma)script/i,le={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};le.optgroup=le.option,le.tbody=le.tfoot=le.colgroup=le.caption=le.thead,le.th=le.td;function ce(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&T(e,t)?m.merge([e],n):n}function ue(e,t){for(var n=0,i=e.length;n<i;n++)z.set(e[n],"globalEval",!t||z.get(t[n],"globalEval"))}var de=/<|&#?\w+;/;function fe(e,t,n,i,r){for(var o,a,s,l,c,u,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===m.type(o))m.merge(f,o.nodeType?[o]:o);else if(de.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(ae.exec(o)||["",""])[1].toLowerCase(),l=le[s]||le._default,a.innerHTML=l[1]+m.htmlPrefilter(o)+l[2],u=l[0];u--;)a=a.lastChild;m.merge(f,a.childNodes),(a=d.firstChild).textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",p=0;o=f[p++];)if(i&&m.inArray(o,i)>-1)r&&r.push(o);else if(c=m.contains(o.ownerDocument,o),a=ce(d.appendChild(o),"script"),c&&ue(a),n)for(u=0;o=a[u++];)se.test(o.type||"")&&n.push(o);return d}!function(){var e=i.createDocumentFragment().appendChild(i.createElement("div")),t=i.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),h.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var pe=i.documentElement,he=/^key/,ge=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,me=/^([^.]*)(?:\.(.+)|)/;function ve(){return!0}function ye(){return!1}function be(){try{return i.activeElement}catch(e){}}function xe(e,t,n,i,r,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(s in t)xe(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=ye;else if(!r)return e;return 1===o&&(a=r,(r=function(e){return m().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=m.guid++)),e.each(function(){m.event.add(this,t,r,i,n)})}m.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,c,u,d,f,p,h,g,v=z.get(e);if(v)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&m.find.matchesSelector(pe,r),n.guid||(n.guid=m.guid++),(l=v.events)||(l=v.events={}),(a=v.handle)||(a=v.handle=function(t){return void 0!==m&&m.event.triggered!==t.type?m.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(j)||[""]).length;c--;)p=g=(s=me.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p&&(d=m.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=m.event.special[p]||{},u=m.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&m.expr.match.needsContext.test(r),namespace:h.join(".")},o),(f=l[p])||((f=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,h,a)||e.addEventListener&&e.addEventListener(p,a)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,u):f.push(u),m.event.global[p]=!0)},remove:function(e,t,n,i,r){var o,a,s,l,c,u,d,f,p,h,g,v=z.hasData(e)&&z.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(j)||[""]).length;c--;)if(p=g=(s=me.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p){for(d=m.event.special[p]||{},f=l[p=(i?d.delegateType:d.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)u=f[o],!r&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(o,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(e,u));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,v.handle)||m.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)m.event.remove(e,p+t[c],n,i,!0);m.isEmptyObject(l)&&z.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=m.event.fix(e),l=new Array(arguments.length),c=(z.get(this,"events")||{})[s.type]||[],u=m.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,s)){for(a=m.event.handlers.call(this,s,c),t=0;(r=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(i=((m.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(s.result=i)&&(s.preventDefault(),s.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[r=(i=t[n]).selector+" "]&&(a[r]=i.needsContext?m(r,this).index(c)>-1:m.find(r,this,null,[c]).length),a[r]&&o.push(i);o.length&&s.push({elem:c,handlers:o})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(m.Event.prototype,e,{enumerable:!0,configurable:!0,get:m.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[m.expando]?e:new m.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==be()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===be()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&T(this,"input"))return this.click(),!1},_default:function(e){return T(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},m.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},m.Event=function(e,t){if(!(this instanceof m.Event))return new m.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ve:ye,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&m.extend(this,t),this.timeStamp=e&&e.timeStamp||m.now(),this[m.expando]=!0},m.Event.prototype={constructor:m.Event,isDefaultPrevented:ye,isPropagationStopped:ye,isImmediatePropagationStopped:ye,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ve,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ve,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ve,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},m.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&he.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&ge.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},m.event.addProp),m.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){m.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||m.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),m.fn.extend({on:function(e,t,n,i){return xe(this,e,t,n,i)},one:function(e,t,n,i){return xe(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,m(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ye),this.each(function(){m.event.remove(this,e,n,t)})}});var we=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ke=/<script|<style|<link/i,Ce=/checked\s*(?:[^=]|=\s*.checked.)/i,Se=/^true\/(.*)/,Ee=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Te(e,t){return T(e,"table")&&T(11!==t.nodeType?t:t.firstChild,"tr")?m(">tbody",e)[0]||e:e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){var t=Se.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function Me(e,t){var n,i,r,o,a,s,l,c;if(1===t.nodeType){if(z.hasData(e)&&(o=z.access(e),a=z.set(t,o),c=o.events)){delete a.handle,a.events={};for(r in c)for(n=0,i=c[r].length;n<i;n++)m.event.add(t,r,c[r][n])}U.hasData(e)&&(s=U.access(e),l=m.extend({},s),U.set(t,l))}}function Ae(e,t){var n=t.nodeName.toLowerCase();"input"===n&&oe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Oe(e,t,n,i){t=a.apply([],t);var r,o,s,l,c,u,d=0,f=e.length,p=f-1,v=t[0],y=m.isFunction(v);if(y||f>1&&"string"==typeof v&&!h.checkClone&&Ce.test(v))return e.each(function(r){var o=e.eq(r);y&&(t[0]=v.call(this,r,o.html())),Oe(o,t,n,i)});if(f&&(o=(r=fe(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(l=(s=m.map(ce(r,"script"),Pe)).length;d<f;d++)c=r,d!==p&&(c=m.clone(c,!0,!0),l&&m.merge(s,ce(c,"script"))),n.call(e[d],c,d);if(l)for(u=s[s.length-1].ownerDocument,m.map(s,De),d=0;d<l;d++)c=s[d],se.test(c.type||"")&&!z.access(c,"globalEval")&&m.contains(u,c)&&(c.src?m._evalUrl&&m._evalUrl(c.src):g(c.textContent.replace(Ee,""),u))}return e}function Le(e,t,n){for(var i,r=t?m.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||m.cleanData(ce(i)),i.parentNode&&(n&&m.contains(i.ownerDocument,i)&&ue(ce(i,"script")),i.parentNode.removeChild(i));return e}m.extend({htmlPrefilter:function(e){return e.replace(we,"<$1></$2>")},clone:function(e,t,n){var i,r,o,a,s=e.cloneNode(!0),l=m.contains(e.ownerDocument,e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||m.isXMLDoc(e)))for(a=ce(s),i=0,r=(o=ce(e)).length;i<r;i++)Ae(o[i],a[i]);if(t)if(n)for(o=o||ce(e),a=a||ce(s),i=0,r=o.length;i<r;i++)Me(o[i],a[i]);else Me(e,s);return(a=ce(s,"script")).length>0&&ue(a,!l&&ce(e,"script")),s},cleanData:function(e){for(var t,n,i,r=m.event.special,o=0;void 0!==(n=e[o]);o++)if(W(n)){if(t=n[z.expando]){if(t.events)for(i in t.events)r[i]?m.event.remove(n,i):m.removeEvent(n,i,t.handle);n[z.expando]=void 0}n[U.expando]&&(n[U.expando]=void 0)}}}),m.fn.extend({detach:function(e){return Le(this,e,!0)},remove:function(e){return Le(this,e)},text:function(e){return q(this,function(e){return void 0===e?m.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Oe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){Te(this,e).appendChild(e)}})},prepend:function(){return Oe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Te(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(m.cleanData(ce(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return m.clone(this,e,t)})},html:function(e){return q(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ke.test(e)&&!le[(ae.exec(e)||["",""])[1].toLowerCase()]){e=m.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(m.cleanData(ce(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Oe(this,arguments,function(t){var n=this.parentNode;m.inArray(this,e)<0&&(m.cleanData(ce(this)),n&&n.replaceChild(t,this))},e)}}),m.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){m.fn[e]=function(e){for(var n,i=[],r=m(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),m(r[a])[t](n),s.apply(i,n.get());return this.pushStack(i)}});var Ne=/^margin/,Ie=new RegExp("^("+K+")(?!px)[a-z%]+$","i"),je=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(l){l.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",l.innerHTML="",pe.appendChild(s);var t=e.getComputedStyle(l);n="1%"!==t.top,a="2px"===t.marginLeft,r="4px"===t.width,l.style.marginRight="50%",o="4px"===t.marginRight,pe.removeChild(s),l=null}}var n,r,o,a,s=i.createElement("div"),l=i.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===l.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(l),m.extend(h,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),o},reliableMarginLeft:function(){return t(),a}}))}();function Fe(e,t,n){var i,r,o,a,s=e.style;return(n=n||je(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||m.contains(e.ownerDocument,e)||(a=m.style(e,t)),!h.pixelMarginRight()&&Ie.test(a)&&Ne.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function Re(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}var $e=/^(none|table(?!-c[ea]).+)/,_e=/^--/,He={position:"absolute",visibility:"hidden",display:"block"},Be={letterSpacing:"0",fontWeight:"400"},qe=["Webkit","Moz","ms"],We=i.createElement("div").style;function Ye(e){var t=m.cssProps[e];return t||(t=m.cssProps[e]=function(e){if(e in We)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=qe.length;n--;)if((e=qe[n]+t)in We)return e}(e)||e),t}function ze(e,t,n){var i=Z.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Ue(e,t,n,i,r){var o,a=0;for(o=n===(i?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(a+=m.css(e,n+Q[o],!0,r)),i?("content"===n&&(a-=m.css(e,"padding"+Q[o],!0,r)),"margin"!==n&&(a-=m.css(e,"border"+Q[o]+"Width",!0,r))):(a+=m.css(e,"padding"+Q[o],!0,r),"padding"!==n&&(a+=m.css(e,"border"+Q[o]+"Width",!0,r)));return a}function Ge(e,t,n){var i,r=je(e),o=Fe(e,t,r),a="border-box"===m.css(e,"boxSizing",!1,r);return Ie.test(o)?o:(i=a&&(h.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+Ue(e,t,n||(a?"border":"content"),i,r)+"px")}m.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=m.camelCase(t),l=_e.test(t),c=e.style;if(l||(t=Ye(s)),a=m.cssHooks[t]||m.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:c[t];"string"===(o=typeof n)&&(r=Z.exec(n))&&r[1]&&(n=te(e,t,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(m.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,a,s=m.camelCase(t);return _e.test(t)||(t=Ye(s)),(a=m.cssHooks[t]||m.cssHooks[s])&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=Fe(e,t,i)),"normal"===r&&t in Be&&(r=Be[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),m.each(["height","width"],function(e,t){m.cssHooks[t]={get:function(e,n,i){if(n)return!$e.test(m.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Ge(e,t,i):ee(e,He,function(){return Ge(e,t,i)})},set:function(e,n,i){var r,o=i&&je(e),a=i&&Ue(e,t,i,"border-box"===m.css(e,"boxSizing",!1,o),o);return a&&(r=Z.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=m.css(e,t)),ze(0,n,a)}}}),m.cssHooks.marginLeft=Re(h.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-ee(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),m.each({margin:"",padding:"",border:"Width"},function(e,t){m.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+Q[i]+t]=o[i]||o[i-2]||o[0];return r}},Ne.test(e)||(m.cssHooks[e+t].set=ze)}),m.fn.extend({css:function(e,t){return q(this,function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){for(i=je(e),r=t.length;a<r;a++)o[t[a]]=m.css(e,t[a],!1,i);return o}return void 0!==n?m.style(e,t,n):m.css(e,t)},e,t,arguments.length>1)}});function Xe(e,t,n,i,r){return new Xe.prototype.init(e,t,n,i,r)}m.Tween=Xe,(Xe.prototype={constructor:Xe,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||m.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(m.cssNumber[n]?"":"px")},cur:function(){var e=Xe.propHooks[this.prop];return e&&e.get?e.get(this):Xe.propHooks._default.get(this)},run:function(e){var t,n=Xe.propHooks[this.prop];return this.options.duration?this.pos=t=m.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Xe.propHooks._default.set(this),this}}).init.prototype=Xe.prototype,(Xe.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=m.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){m.fx.step[e.prop]?m.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[m.cssProps[e.prop]]&&!m.cssHooks[e.prop]?e.elem[e.prop]=e.now:m.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=Xe.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},m.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},m.fx=Xe.prototype.init,m.fx.step={};var Ve,Ke,Ze=/^(?:toggle|show|hide)$/,Qe=/queueHooks$/;function Je(){Ke&&(!1===i.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(Je):e.setTimeout(Je,m.fx.interval),m.fx.tick())}function et(){return e.setTimeout(function(){Ve=void 0}),Ve=m.now()}function tt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=Q[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function nt(e,t,n){for(var i,r=(it.tweeners[t]||[]).concat(it.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function it(e,t,n){var i,r,o=0,a=it.prefilters.length,s=m.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=Ve||et(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(i);return s.notifyWith(e,[c,i,n]),i<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:m.extend({},t),opts:m.extend(!0,{specialEasing:{},easing:m.easing._default},n),originalProperties:t,originalOptions:n,startTime:Ve||et(),duration:n.duration,tweens:[],createTween:function(t,n){var i=m.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,i,r,o,a;for(n in e)if(r=t[i=m.camelCase(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=m.cssHooks[i])&&"expand"in a){o=a.expand(o),delete e[i];for(n in o)n in e||(e[n]=o[n],t[n]=r)}else t[i]=r}(u,c.opts.specialEasing);o<a;o++)if(i=it.prefilters[o].call(c,e,u,c.opts))return m.isFunction(i.stop)&&(m._queueHooks(c.elem,c.opts.queue).stop=m.proxy(i.stop,i)),i;return m.map(u,nt,c),m.isFunction(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),m.fx.timer(m.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}m.Animation=m.extend(it,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return te(n.elem,e,Z.exec(t),n),n}]},tweener:function(e,t){m.isFunction(e)?(t=e,e=["*"]):e=e.match(j);for(var n,i=0,r=e.length;i<r;i++)n=e[i],it.tweeners[n]=it.tweeners[n]||[],it.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,a,s,l,c,u,d="width"in t||"height"in t,f=this,p={},h=e.style,g=e.nodeType&&J(e),v=z.get(e,"fxshow");n.queue||(null==(a=m._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,m.queue(e,"fx").length||a.empty.fire()})}));for(i in t)if(r=t[i],Ze.test(r)){if(delete t[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;g=!0}p[i]=v&&v[i]||m.style(e,i)}if((l=!m.isEmptyObject(t))||!m.isEmptyObject(p)){d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=v&&v.display)&&(c=z.get(e,"display")),"none"===(u=m.css(e,"display"))&&(c?u=c:(re([e],!0),c=e.style.display||c,u=m.css(e,"display"),re([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===m.css(e,"float")&&(l||(f.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1;for(i in p)l||(v?"hidden"in v&&(g=v.hidden):v=z.access(e,"fxshow",{display:c}),o&&(v.hidden=!g),g&&re([e],!0),f.done(function(){g||re([e]),z.remove(e,"fxshow");for(i in p)m.style(e,i,p[i])})),l=nt(g?v[i]:0,i,f),i in v||(v[i]=l.start,g&&(l.end=l.start,l.start=0))}}],prefilter:function(e,t){t?it.prefilters.unshift(e):it.prefilters.push(e)}}),m.speed=function(e,t,n){var i=e&&"object"==typeof e?m.extend({},e):{complete:n||!n&&t||m.isFunction(e)&&e,duration:e,easing:n&&t||t&&!m.isFunction(t)&&t};return m.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in m.fx.speeds?i.duration=m.fx.speeds[i.duration]:i.duration=m.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){m.isFunction(i.old)&&i.old.call(this),i.queue&&m.dequeue(this,i.queue)},i},m.fn.extend({fadeTo:function(e,t,n,i){return this.filter(J).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=m.isEmptyObject(e),o=m.speed(t,n,i),a=function(){var t=it(this,m.extend({},e),o);(r||z.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=m.timers,a=z.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&Qe.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||m.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=z.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=m.timers,a=i?i.length:0;for(n.finish=!0,m.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),m.each(["toggle","show","hide"],function(e,t){var n=m.fn[t];m.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(tt(t,!0),e,i,r)}}),m.each({slideDown:tt("show"),slideUp:tt("hide"),slideToggle:tt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){m.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),m.timers=[],m.fx.tick=function(){var e,t=0,n=m.timers;for(Ve=m.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||m.fx.stop(),Ve=void 0},m.fx.timer=function(e){m.timers.push(e),m.fx.start()},m.fx.interval=13,m.fx.start=function(){Ke||(Ke=!0,Je())},m.fx.stop=function(){Ke=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(t,n){return t=m.fx?m.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})},function(){var e=i.createElement("input"),t=i.createElement("select").appendChild(i.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=i.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var rt,ot=m.expr.attrHandle;m.fn.extend({attr:function(e,t){return q(this,m.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){m.removeAttr(this,e)})}}),m.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?m.prop(e,t,n):(1===o&&m.isXMLDoc(e)||(r=m.attrHooks[t.toLowerCase()]||(m.expr.match.bool.test(t)?rt:void 0)),void 0!==n?null===n?void m.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=m.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&T(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(j);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),rt={set:function(e,t,n){return!1===t?m.removeAttr(e,n):e.setAttribute(n,n),n}},m.each(m.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ot[t]||m.find.attr;ot[t]=function(e,t,i){var r,o,a=t.toLowerCase();return i||(o=ot[a],ot[a]=r,r=null!=n(e,t,i)?a:null,ot[a]=o),r}});var at=/^(?:input|select|textarea|button)$/i,st=/^(?:a|area)$/i;m.fn.extend({prop:function(e,t){return q(this,m.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[m.propFix[e]||e]})}}),m.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&m.isXMLDoc(e)||(t=m.propFix[t]||t,r=m.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=m.find.attr(e,"tabindex");return t?parseInt(t,10):at.test(e.nodeName)||st.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.optSelected||(m.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),m.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){m.propFix[this.toLowerCase()]=this});function lt(e){return(e.match(j)||[]).join(" ")}function ct(e){return e.getAttribute&&e.getAttribute("class")||""}m.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(m.isFunction(e))return this.each(function(t){m(this).addClass(e.call(this,t,ct(this)))});if("string"==typeof e&&e)for(t=e.match(j)||[];n=this[l++];)if(r=ct(n),i=1===n.nodeType&&" "+lt(r)+" "){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(s=lt(i))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(m.isFunction(e))return this.each(function(t){m(this).removeClass(e.call(this,t,ct(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(j)||[];n=this[l++];)if(r=ct(n),i=1===n.nodeType&&" "+lt(r)+" "){for(a=0;o=t[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(s=lt(i))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):m.isFunction(e)?this.each(function(n){m(this).toggleClass(e.call(this,n,ct(this),t),t)}):this.each(function(){var t,i,r,o;if("string"===n)for(i=0,r=m(this),o=e.match(j)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=ct(this))&&z.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":z.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+lt(ct(n))+" ").indexOf(t)>-1)return!0;return!1}});var ut=/\r/g;m.fn.extend({val:function(e){var t,n,i,r=this[0];{if(arguments.length)return i=m.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,m(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=m.map(r,function(e){return null==e?"":e+""})),(t=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return(t=m.valHooks[r.type]||m.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(ut,""):null==n?"":n}}}),m.extend({valHooks:{option:{get:function(e){var t=m.find.attr(e,"value");return null!=t?t:lt(m.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:r.length;for(i=o<0?l:a?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!T(n.parentNode,"optgroup"))){if(t=m(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=m.makeArray(t),a=r.length;a--;)((i=r[a]).selected=m.inArray(m.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),m.each(["radio","checkbox"],function(){m.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=m.inArray(m(e).val(),t)>-1}},h.checkOn||(m.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var dt=/^(?:focusinfocus|focusoutblur)$/;m.extend(m.event,{trigger:function(t,n,r,o){var a,s,l,c,u,f,p,h=[r||i],g=d.call(t,"type")?t.type:t,v=d.call(t,"namespace")?t.namespace.split("."):[];if(s=l=r=r||i,3!==r.nodeType&&8!==r.nodeType&&!dt.test(g+m.event.triggered)&&(g.indexOf(".")>-1&&(g=(v=g.split(".")).shift(),v.sort()),u=g.indexOf(":")<0&&"on"+g,(t=t[m.expando]?t:new m.Event(g,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:m.makeArray(n,[t]),p=m.event.special[g]||{},o||!p.trigger||!1!==p.trigger.apply(r,n))){if(!o&&!p.noBubble&&!m.isWindow(r)){for(c=p.delegateType||g,dt.test(c+g)||(s=s.parentNode);s;s=s.parentNode)h.push(s),l=s;l===(r.ownerDocument||i)&&h.push(l.defaultView||l.parentWindow||e)}for(a=0;(s=h[a++])&&!t.isPropagationStopped();)t.type=a>1?c:p.bindType||g,(f=(z.get(s,"events")||{})[t.type]&&z.get(s,"handle"))&&f.apply(s,n),(f=u&&s[u])&&f.apply&&W(s)&&(t.result=f.apply(s,n),!1===t.result&&t.preventDefault());return t.type=g,o||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(h.pop(),n)||!W(r)||u&&m.isFunction(r[g])&&!m.isWindow(r)&&((l=r[u])&&(r[u]=null),m.event.triggered=g,r[g](),m.event.triggered=void 0,l&&(r[u]=l)),t.result}},simulate:function(e,t,n){var i=m.extend(new m.Event,n,{type:e,isSimulated:!0});m.event.trigger(i,null,t)}}),m.fn.extend({trigger:function(e,t){return this.each(function(){m.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return m.event.trigger(e,t,n,!0)}}),m.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){m.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),m.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),h.focusin="onfocusin"in e,h.focusin||m.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){m.event.simulate(t,e.target,m.event.fix(e))};m.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=z.access(i,t);r||i.addEventListener(e,n,!0),z.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=z.access(i,t)-1;r?z.access(i,t,r):(i.removeEventListener(e,n,!0),z.remove(i,t))}}});var ft=e.location,pt=m.now(),ht=/\?/;m.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||m.error("Invalid XML: "+t),n};var gt=/\[\]$/,mt=/\r?\n/g,vt=/^(?:submit|button|image|reset|file)$/i,yt=/^(?:input|select|textarea|keygen)/i;function bt(e,t,n,i){var r;if(Array.isArray(t))m.each(t,function(t,r){n||gt.test(e)?i(e,r):bt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==m.type(t))i(e,t);else for(r in t)bt(e+"["+r+"]",t[r],n,i)}m.param=function(e,t){var n,i=[],r=function(e,t){var n=m.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!m.isPlainObject(e))m.each(e,function(){r(this.name,this.value)});else for(n in e)bt(n,e[n],t,r);return i.join("&")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=m.prop(this,"elements");return e?m.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!m(this).is(":disabled")&&yt.test(this.nodeName)&&!vt.test(e)&&(this.checked||!oe.test(e))}).map(function(e,t){var n=m(this).val();return null==n?null:Array.isArray(n)?m.map(n,function(e){return{name:t.name,value:e.replace(mt,"\r\n")}}):{name:t.name,value:n.replace(mt,"\r\n")}}).get()}});var xt=/%20/g,wt=/#.*$/,kt=/([?&])_=[^&]*/,Ct=/^(.*?):[ \t]*([^\r\n]*)$/gm,St=/^(?:GET|HEAD)$/,Et=/^\/\//,Tt={},Pt={},Dt="*/".concat("*"),Mt=i.createElement("a");Mt.href=ft.href;function At(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(j)||[];if(m.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Ot(e,t,n,i){var r={},o=e===Pt;function a(s){var l;return r[s]=!0,m.each(e[s]||[],function(e,s){var c=s(t,n,i);return"string"!=typeof c||o||r[c]?o?!(l=c):void 0:(t.dataTypes.unshift(c),a(c),!1)}),l}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Lt(e,t){var n,i,r=m.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&m.extend(!0,e,i),e}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ft.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ft.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Dt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Lt(Lt(e,m.ajaxSettings),t):Lt(m.ajaxSettings,e)},ajaxPrefilter:At(Tt),ajaxTransport:At(Pt),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,o,a,s,l,c,u,d,f,p,h=m.ajaxSetup({},n),g=h.context||h,v=h.context&&(g.nodeType||g.jquery)?m(g):m.event,y=m.Deferred(),b=m.Callbacks("once memory"),x=h.statusCode||{},w={},k={},C="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=Ct.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?a:null},setRequestHeader:function(e,t){return null==u&&(e=k[e.toLowerCase()]=k[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)S.always(e[S.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||C;return r&&r.abort(t),E(0,t),this}};if(y.promise(S),h.url=((t||h.url||ft.href)+"").replace(Et,ft.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(j)||[""],null==h.crossDomain){c=i.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Mt.protocol+"//"+Mt.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=m.param(h.data,h.traditional)),Ot(Tt,h,n,S),u)return S;(d=m.event&&h.global)&&0==m.active++&&m.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!St.test(h.type),o=h.url.replace(wt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(xt,"+")):(p=h.url.slice(o.length),h.data&&(o+=(ht.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(kt,"$1"),p=(ht.test(o)?"&":"?")+"_="+pt+++p),h.url=o+p),h.ifModified&&(m.lastModified[o]&&S.setRequestHeader("If-Modified-Since",m.lastModified[o]),m.etag[o]&&S.setRequestHeader("If-None-Match",m.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&S.setRequestHeader("Content-Type",h.contentType),S.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Dt+"; q=0.01":""):h.accepts["*"]);for(f in h.headers)S.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(g,S,h)||u))return S.abort();if(C="abort",b.add(h.complete),S.done(h.success),S.fail(h.error),r=Ot(Pt,h,n,S)){if(S.readyState=1,d&&v.trigger("ajaxSend",[S,h]),u)return S;h.async&&h.timeout>0&&(l=e.setTimeout(function(){S.abort("timeout")},h.timeout));try{u=!1,r.send(w,E)}catch(e){if(u)throw e;E(-1,e)}}else E(-1,"No Transport");function E(t,n,i,s){var c,f,p,w,k,C=n;u||(u=!0,l&&e.clearTimeout(l),r=void 0,a=s||"",S.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(w=function(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(h,S,i)),w=function(e,t,n,i){var r,o,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=c[l+" "+o]||c["* "+o]))for(r in c)if((s=r.split(" "))[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[r]:!0!==c[r]&&(o=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(h,w,S,c),c?(h.ifModified&&((k=S.getResponseHeader("Last-Modified"))&&(m.lastModified[o]=k),(k=S.getResponseHeader("etag"))&&(m.etag[o]=k)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=w.state,f=w.data,c=!(p=w.error))):(p=C,!t&&C||(C="error",t<0&&(t=0))),S.status=t,S.statusText=(n||C)+"",c?y.resolveWith(g,[f,C,S]):y.rejectWith(g,[S,C,p]),S.statusCode(x),x=void 0,d&&v.trigger(c?"ajaxSuccess":"ajaxError",[S,h,c?f:p]),b.fireWith(g,[S,C]),d&&(v.trigger("ajaxComplete",[S,h]),--m.active||m.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return m.get(e,t,n,"json")},getScript:function(e,t){return m.get(e,void 0,t,"script")}}),m.each(["get","post"],function(e,t){m[t]=function(e,n,i,r){return m.isFunction(n)&&(r=r||i,i=n,n=void 0),m.ajax(m.extend({url:e,type:t,dataType:r,data:n,success:i},m.isPlainObject(e)&&e))}}),m._evalUrl=function(e){return m.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},m.fn.extend({wrapAll:function(e){var t;return this[0]&&(m.isFunction(e)&&(e=e.call(this[0])),t=m(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return m.isFunction(e)?this.each(function(t){m(this).wrapInner(e.call(this,t))}):this.each(function(){var t=m(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=m.isFunction(e);return this.each(function(n){m(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){m(this).replaceWith(this.childNodes)}),this}}),m.expr.pseudos.hidden=function(e){return!m.expr.pseudos.visible(e)},m.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},m.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Nt={0:200,1223:204},It=m.ajaxSettings.xhr();h.cors=!!It&&"withCredentials"in It,h.ajax=It=!!It,m.ajaxTransport(function(t){var n,i;if(h.cors||It&&!t.crossDomain)return{send:function(r,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(a in r)s.setRequestHeader(a,r[a]);n=function(e){return function(){n&&(n=i=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Nt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),i=s.onerror=n("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),m.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),m.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return m.globalEval(e),e}}}),m.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),m.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,o){t=m("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),i.head.appendChild(t[0])},abort:function(){n&&n()}}}});var jt=[],Ft=/(=)\?(?=&|$)|\?\?/;m.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=jt.pop()||m.expando+"_"+pt++;return this[e]=!0,e}}),m.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,a,s=!1!==t.jsonp&&(Ft.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ft.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=m.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Ft,"$1"+r):!1!==t.jsonp&&(t.url+=(ht.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return a||m.error(r+" was not called"),a[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){a=arguments},i.always(function(){void 0===o?m(e).removeProp(r):e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,jt.push(r)),a&&m.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),h.createHTMLDocument=function(){var e=i.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),m.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,o,a;return t||(h.createHTMLDocument?((r=(t=i.implementation.createHTMLDocument("")).createElement("base")).href=i.location.href,t.head.appendChild(r)):t=i),o=P.exec(e),a=!n&&[],o?[t.createElement(o[1])]:(o=fe([e],t,a),a&&a.length&&m(a).remove(),m.merge([],o.childNodes))},m.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return s>-1&&(i=lt(e.slice(s)),e=e.slice(0,s)),m.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&m.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(i?m("<div>").append(m.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},m.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){m.fn[t]=function(e){return this.on(t,e)}}),m.expr.pseudos.animated=function(e){return m.grep(m.timers,function(t){return e===t.elem}).length},m.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,c=m.css(e,"position"),u=m(e),d={};"static"===c&&(e.style.position="relative"),s=u.offset(),o=m.css(e,"top"),l=m.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(a=(i=u.position()).top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),m.isFunction(t)&&(t=t.call(e,n,m.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+r),"using"in t?t.using.call(e,d):u.css(d)}},m.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){m.offset.setOffset(this,e,t)});var t,n,i,r,o=this[0];if(o)return o.getClientRects().length?(i=o.getBoundingClientRect(),n=(t=o.ownerDocument).documentElement,r=t.defaultView,{top:i.top+r.pageYOffset-n.clientTop,left:i.left+r.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===m.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),T(e[0],"html")||(i=e.offset()),i={top:i.top+m.css(e[0],"borderTopWidth",!0),left:i.left+m.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-m.css(n,"marginTop",!0),left:t.left-i.left-m.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===m.css(e,"position");)e=e.offsetParent;return e||pe})}}),m.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;m.fn[e]=function(i){return q(this,function(e,i,r){var o;if(m.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r},e,i,arguments.length)}}),m.each(["top","left"],function(e,t){m.cssHooks[t]=Re(h.pixelPosition,function(e,n){if(n)return n=Fe(e,t),Ie.test(n)?m(e).position()[t]+"px":n})}),m.each({Height:"height",Width:"width"},function(e,t){m.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){m.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===o?"margin":"border");return q(this,function(t,n,r){var o;return m.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?m.css(t,n,s):m.style(t,n,r,s)},t,a?r:void 0,a)}})}),m.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),m.holdReady=function(e){e?m.readyWait++:m.ready(!0)},m.isArray=Array.isArray,m.parseJSON=JSON.parse,m.nodeName=T,"function"==typeof define&&define.amd&&define("jquery",[],function(){return m});var Rt=e.jQuery,$t=e.$;return m.noConflict=function(t){return e.$===m&&(e.$=$t),t&&e.jQuery===m&&(e.jQuery=Rt),m},t||(e.jQuery=e.$=m),m}),function(e){var t={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};e.fn.bxSlider=function(n){if(0===this.length)return this;if(this.length>1)return this.each(function(){e(this).bxSlider(n)}),this;var r={},o=this,a=e(window).width(),s=e(window).height();if(!e(o).data("bxSlider")){var l=function(){e(o).data("bxSlider")||(r.settings=e.extend({},t,n),r.settings.slideWidth=parseInt(r.settings.slideWidth),r.children=o.children(r.settings.slideSelector),r.children.length<r.settings.minSlides&&(r.settings.minSlides=r.children.length),r.children.length<r.settings.maxSlides&&(r.settings.maxSlides=r.children.length),r.settings.randomStart&&(r.settings.startSlide=Math.floor(Math.random()*r.children.length)),r.active={index:r.settings.startSlide},r.carousel=r.settings.minSlides>1||r.settings.maxSlides>1,r.carousel&&(r.settings.preloadImages="all"),r.minThreshold=r.settings.minSlides*r.settings.slideWidth+(r.settings.minSlides-1)*r.settings.slideMargin,r.maxThreshold=r.settings.maxSlides*r.settings.slideWidth+(r.settings.maxSlides-1)*r.settings.slideMargin,r.working=!1,r.controls={},r.interval=null,r.animProp="vertical"===r.settings.mode?"top":"left",r.usingCSS=r.settings.useCSS&&"fade"!==r.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return r.cssPrefix=t[n].replace("Perspective","").toLowerCase(),r.animProp="-"+r.cssPrefix+"-transform",!0;return!1}(),"vertical"===r.settings.mode&&(r.settings.maxSlides=r.settings.minSlides),o.data("origStyle",o.attr("style")),o.children(r.settings.slideSelector).each(function(){e(this).data("origStyle",e(this).attr("style"))}),c())},c=function(){var t=r.children.eq(r.settings.startSlide);o.wrap('<div class="'+r.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),r.viewport=o.parent(),r.settings.ariaLive&&!r.settings.ticker&&r.viewport.attr("aria-live","polite"),r.loader=e('<div class="bx-loading" />'),r.viewport.prepend(r.loader),o.css({width:"horizontal"===r.settings.mode?1e3*r.children.length+215+"%":"auto",position:"relative"}),r.usingCSS&&r.settings.easing?o.css("-"+r.cssPrefix+"-transition-timing-function",r.settings.easing):r.settings.easing||(r.settings.easing="swing"),r.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),r.viewport.parent().css({maxWidth:p()}),r.children.css({float:"horizontal"===r.settings.mode?"left":"none",listStyle:"none",position:"relative"}),r.children.css("width",h()),"horizontal"===r.settings.mode&&r.settings.slideMargin>0&&r.children.css("marginRight",r.settings.slideMargin),"vertical"===r.settings.mode&&r.settings.slideMargin>0&&r.children.css("marginBottom",r.settings.slideMargin),"fade"===r.settings.mode&&(r.children.css({position:"absolute",zIndex:0,display:"none"}),r.children.eq(r.settings.startSlide).css({zIndex:r.settings.slideZIndex,display:"block"})),r.controls.el=e('<div class="bx-controls" />'),r.settings.captions&&S(),r.active.last=r.settings.startSlide===m()-1,r.settings.video&&o.fitVids(),("all"===r.settings.preloadImages||r.settings.ticker)&&(t=r.children),r.settings.ticker?r.settings.pager=!1:(r.settings.controls&&k(),r.settings.auto&&r.settings.autoControls&&C(),r.settings.pager&&w(),(r.settings.controls||r.settings.autoControls||r.settings.pager)&&r.viewport.after(r.controls.el)),u(t,d)},u=function(t,n){var i=t.find('img:not([src=""]), iframe').length,r=0;0!==i?t.find('img:not([src=""]), iframe').each(function(){e(this).one("load error",function(){++r===i&&n()}).each(function(){(this.complete||""==this.src)&&e(this).trigger("load")})}):n()},d=function(){if(r.settings.infiniteLoop&&"fade"!==r.settings.mode&&!r.settings.ticker){var t="vertical"===r.settings.mode?r.settings.minSlides:r.settings.maxSlides,n=r.children.slice(0,t).clone(!0).addClass("bx-clone"),i=r.children.slice(-t).clone(!0).addClass("bx-clone");r.settings.ariaHidden&&(n.attr("aria-hidden",!0),i.attr("aria-hidden",!0)),o.append(n).prepend(i)}r.loader.remove(),y(),"vertical"===r.settings.mode&&(r.settings.adaptiveHeight=!0),r.viewport.height(f()),o.redrawSlider(),r.settings.onSliderLoad.call(o,r.active.index),r.initialized=!0,r.settings.responsive&&e(window).bind("resize",z),r.settings.auto&&r.settings.autoStart&&(m()>1||r.settings.autoSlideForOnePage)&&F(),r.settings.ticker&&R(),r.settings.pager&&A(r.settings.startSlide),r.settings.controls&&N(),r.settings.touchEnabled&&!r.settings.ticker&&H(),r.settings.keyboardEnabled&&!r.settings.ticker&&e(document).keydown(_)},f=function(){var t=0,n=e();if("vertical"===r.settings.mode||r.settings.adaptiveHeight)if(r.carousel){var o=1===r.settings.moveSlides?r.active.index:r.active.index*v();for(n=r.children.eq(o),i=1;i<=r.settings.maxSlides-1;i++)n=o+i>=r.children.length?n.add(r.children.eq(i-1)):n.add(r.children.eq(o+i))}else n=r.children.eq(r.active.index);else n=r.children;return"vertical"===r.settings.mode?(n.each(function(n){t+=e(this).outerHeight()}),r.settings.slideMargin>0&&(t+=r.settings.slideMargin*(r.settings.minSlides-1))):t=Math.max.apply(Math,n.map(function(){return e(this).outerHeight(!1)}).get()),"border-box"===r.viewport.css("box-sizing")?t+=parseFloat(r.viewport.css("padding-top"))+parseFloat(r.viewport.css("padding-bottom"))+parseFloat(r.viewport.css("border-top-width"))+parseFloat(r.viewport.css("border-bottom-width")):"padding-box"===r.viewport.css("box-sizing")&&(t+=parseFloat(r.viewport.css("padding-top"))+parseFloat(r.viewport.css("padding-bottom"))),t},p=function(){var e="100%";return r.settings.slideWidth>0&&(e="horizontal"===r.settings.mode?r.settings.maxSlides*r.settings.slideWidth+(r.settings.maxSlides-1)*r.settings.slideMargin:r.settings.slideWidth),e},h=function(){var e=r.settings.slideWidth,t=r.viewport.width();if(0===r.settings.slideWidth||r.settings.slideWidth>t&&!r.carousel||"vertical"===r.settings.mode)e=t;else if(r.settings.maxSlides>1&&"horizontal"===r.settings.mode){if(t>r.maxThreshold)return e;t<r.minThreshold?e=(t-r.settings.slideMargin*(r.settings.minSlides-1))/r.settings.minSlides:r.settings.shrinkItems&&(e=Math.floor((t+r.settings.slideMargin)/Math.ceil((t+r.settings.slideMargin)/(e+r.settings.slideMargin))-r.settings.slideMargin))}return e},g=function(){var e=1,t=null;return"horizontal"===r.settings.mode&&r.settings.slideWidth>0?r.viewport.width()<r.minThreshold?e=r.settings.minSlides:r.viewport.width()>r.maxThreshold?e=r.settings.maxSlides:(t=r.children.first().width()+r.settings.slideMargin,e=Math.floor((r.viewport.width()+r.settings.slideMargin)/t)||1):"vertical"===r.settings.mode&&(e=r.settings.minSlides),e},m=function(){var e=0,t=0,n=0;if(r.settings.moveSlides>0){if(!r.settings.infiniteLoop){for(;t<r.children.length;)++e,t=n+g(),n+=r.settings.moveSlides<=g()?r.settings.moveSlides:g();return n}e=Math.ceil(r.children.length/v())}else e=Math.ceil(r.children.length/g());return e},v=function(){return r.settings.moveSlides>0&&r.settings.moveSlides<=g()?r.settings.moveSlides:g()},y=function(){var e,t,n;r.children.length>r.settings.maxSlides&&r.active.last&&!r.settings.infiniteLoop?"horizontal"===r.settings.mode?(e=(t=r.children.last()).position(),b(-(e.left-(r.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===r.settings.mode&&(n=r.children.length-r.settings.minSlides,e=r.children.eq(n).position(),b(-e.top,"reset",0)):(e=r.children.eq(r.active.index*v()).position(),r.active.index===m()-1&&(r.active.last=!0),void 0!==e&&("horizontal"===r.settings.mode?b(-e.left,"reset",0):"vertical"===r.settings.mode&&b(-e.top,"reset",0)))},b=function(t,n,i,a){var s,l;r.usingCSS?(l="vertical"===r.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)",o.css("-"+r.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"===n?(o.css(r.animProp,l),0!==i?o.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){e(t.target).is(o)&&(o.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),O())}):O()):"reset"===n?o.css(r.animProp,l):"ticker"===n&&(o.css("-"+r.cssPrefix+"-transition-timing-function","linear"),o.css(r.animProp,l),0!==i?o.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){e(t.target).is(o)&&(o.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),b(a.resetValue,"reset",0),$())}):(b(a.resetValue,"reset",0),$()))):((s={})[r.animProp]=t,"slide"===n?o.animate(s,i,r.settings.easing,function(){O()}):"reset"===n?o.css(r.animProp,t):"ticker"===n&&o.animate(s,i,"linear",function(){b(a.resetValue,"reset",0),$()}))},x=function(){for(var t="",n="",i=m(),o=0;o<i;o++)n="",r.settings.buildPager&&e.isFunction(r.settings.buildPager)||r.settings.pagerCustom?(n=r.settings.buildPager(o),r.pagerEl.addClass("bx-custom-pager")):(n=o+1,r.pagerEl.addClass("bx-default-pager")),t+='<div class="bx-pager-item"><a href="" data-slide-index="'+o+'" class="bx-pager-link">'+n+"</a></div>";r.pagerEl.html(t)},w=function(){r.settings.pagerCustom?r.pagerEl=e(r.settings.pagerCustom):(r.pagerEl=e('<div class="bx-pager" />'),r.settings.pagerSelector?e(r.settings.pagerSelector).html(r.pagerEl):r.controls.el.addClass("bx-has-pager").append(r.pagerEl),x()),r.pagerEl.on("click touchend","a",M)},k=function(){r.controls.next=e('<a class="bx-next" href="">'+r.settings.nextText+"</a>"),r.controls.prev=e('<a class="bx-prev" href="">'+r.settings.prevText+"</a>"),r.controls.next.bind("click touchend",E),r.controls.prev.bind("click touchend",T),r.settings.nextSelector&&e(r.settings.nextSelector).append(r.controls.next),r.settings.prevSelector&&e(r.settings.prevSelector).append(r.controls.prev),r.settings.nextSelector||r.settings.prevSelector||(r.controls.directionEl=e('<div class="bx-controls-direction" />'),r.controls.directionEl.append(r.controls.prev).append(r.controls.next),r.controls.el.addClass("bx-has-controls-direction").append(r.controls.directionEl))},C=function(){r.controls.start=e('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+r.settings.startText+"</a></div>"),r.controls.stop=e('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+r.settings.stopText+"</a></div>"),r.controls.autoEl=e('<div class="bx-controls-auto" />'),r.controls.autoEl.on("click",".bx-start",P),r.controls.autoEl.on("click",".bx-stop",D),r.settings.autoControlsCombine?r.controls.autoEl.append(r.controls.start):r.controls.autoEl.append(r.controls.start).append(r.controls.stop),r.settings.autoControlsSelector?e(r.settings.autoControlsSelector).html(r.controls.autoEl):r.controls.el.addClass("bx-has-controls-auto").append(r.controls.autoEl),L(r.settings.autoStart?"stop":"start")},S=function(){r.children.each(function(t){var n=e(this).find("img:first").attr("title");void 0!==n&&(""+n).length&&e(this).append('<div class="bx-caption"><span>'+n+"</span></div>")})},E=function(e){e.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),o.goToNextSlide())},T=function(e){e.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),o.goToPrevSlide())},P=function(e){o.startAuto(),e.preventDefault()},D=function(e){o.stopAuto(),e.preventDefault()},M=function(t){var n,i;t.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),void 0!==(n=e(t.currentTarget)).attr("data-slide-index")&&(i=parseInt(n.attr("data-slide-index")))!==r.active.index&&o.goToSlide(i))},A=function(t){var n=r.children.length;if("short"===r.settings.pagerType)return r.settings.maxSlides>1&&(n=Math.ceil(r.children.length/r.settings.maxSlides)),void r.pagerEl.html(t+1+r.settings.pagerShortSeparator+n);r.pagerEl.find("a").removeClass("active"),r.pagerEl.each(function(n,i){e(i).find("a").eq(t).addClass("active")})},O=function(){if(r.settings.infiniteLoop){var e="";0===r.active.index?e=r.children.eq(0).position():r.active.index===m()-1&&r.carousel?e=r.children.eq((m()-1)*v()).position():r.active.index===r.children.length-1&&(e=r.children.eq(r.children.length-1).position()),e&&("horizontal"===r.settings.mode?b(-e.left,"reset",0):"vertical"===r.settings.mode&&b(-e.top,"reset",0))}r.working=!1,r.settings.onSlideAfter.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)},L=function(e){r.settings.autoControlsCombine?r.controls.autoEl.html(r.controls[e]):(r.controls.autoEl.find("a").removeClass("active"),r.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},N=function(){1===m()?(r.controls.prev.addClass("disabled"),r.controls.next.addClass("disabled")):!r.settings.infiniteLoop&&r.settings.hideControlOnEnd&&(0===r.active.index?(r.controls.prev.addClass("disabled"),r.controls.next.removeClass("disabled")):r.active.index===m()-1?(r.controls.next.addClass("disabled"),r.controls.prev.removeClass("disabled")):(r.controls.prev.removeClass("disabled"),r.controls.next.removeClass("disabled")))},I=function(){o.startAuto()},j=function(){o.stopAuto()},F=function(){if(r.settings.autoDelay>0)setTimeout(o.startAuto,r.settings.autoDelay);else o.startAuto(),e(window).focus(I).blur(j);r.settings.autoHover&&o.hover(function(){r.interval&&(o.stopAuto(!0),r.autoPaused=!0)},function(){r.autoPaused&&(o.startAuto(!0),r.autoPaused=null)})},R=function(){var t,n,i,a,s,l,c,u,d=0;"next"===r.settings.autoDirection?o.append(r.children.clone().addClass("bx-clone")):(o.prepend(r.children.clone().addClass("bx-clone")),t=r.children.first().position(),d="horizontal"===r.settings.mode?-t.left:-t.top),b(d,"reset",0),r.settings.pager=!1,r.settings.controls=!1,r.settings.autoControls=!1,r.settings.tickerHover&&(r.usingCSS?(a="horizontal"===r.settings.mode?4:5,r.viewport.hover(function(){n=o.css("-"+r.cssPrefix+"-transform"),i=parseFloat(n.split(",")[a]),b(i,"reset",0)},function(){u=0,r.children.each(function(t){u+="horizontal"===r.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),s=r.settings.speed/u,l="horizontal"===r.settings.mode?"left":"top",c=s*(u-Math.abs(parseInt(i))),$(c)})):r.viewport.hover(function(){o.stop()},function(){u=0,r.children.each(function(t){u+="horizontal"===r.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),s=r.settings.speed/u,l="horizontal"===r.settings.mode?"left":"top",c=s*(u-Math.abs(parseInt(o.css(l)))),$(c)})),$()},$=function(e){var t,n,i=e||r.settings.speed,a={left:0,top:0},s={left:0,top:0};"next"===r.settings.autoDirection?a=o.find(".bx-clone").first().position():s=r.children.first().position(),t="horizontal"===r.settings.mode?-a.left:-a.top,n="horizontal"===r.settings.mode?-s.left:-s.top,b(t,"ticker",i,{resetValue:n})},_=function(t){var n=document.activeElement.tagName.toLowerCase();if(null==new RegExp(n,["i"]).exec("input|textarea")&&function(t){var n=e(window),i={top:n.scrollTop(),left:n.scrollLeft()},r=t.offset();return i.right=i.left+n.width(),i.bottom=i.top+n.height(),r.right=r.left+t.outerWidth(),r.bottom=r.top+t.outerHeight(),!(i.right<r.left||i.left>r.right||i.bottom<r.top||i.top>r.bottom)}(o)){if(39===t.keyCode)return E(t),!1;if(37===t.keyCode)return T(t),!1}},H=function(){r.touch={start:{x:0,y:0},end:{x:0,y:0}},r.viewport.bind("touchstart MSPointerDown pointerdown",B),r.viewport.on("click",".bxslider a",function(e){r.viewport.hasClass("click-disabled")&&(e.preventDefault(),r.viewport.removeClass("click-disabled"))})},B=function(e){if(r.controls.el.addClass("disabled"),r.working)e.preventDefault(),r.controls.el.removeClass("disabled");else{r.touch.originalPos=o.position();var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t];r.touch.start.x=n[0].pageX,r.touch.start.y=n[0].pageY,r.viewport.get(0).setPointerCapture&&(r.pointerId=t.pointerId,r.viewport.get(0).setPointerCapture(r.pointerId)),r.viewport.bind("touchmove MSPointerMove pointermove",W),r.viewport.bind("touchend MSPointerUp pointerup",Y),r.viewport.bind("MSPointerCancel pointercancel",q)}},q=function(e){b(r.touch.originalPos.left,"reset",0),r.controls.el.removeClass("disabled"),r.viewport.unbind("MSPointerCancel pointercancel",q),r.viewport.unbind("touchmove MSPointerMove pointermove",W),r.viewport.unbind("touchend MSPointerUp pointerup",Y),r.viewport.get(0).releasePointerCapture&&r.viewport.get(0).releasePointerCapture(r.pointerId)},W=function(e){var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-r.touch.start.x),o=Math.abs(n[0].pageY-r.touch.start.y),a=0,s=0;3*i>o&&r.settings.preventDefaultSwipeX?e.preventDefault():3*o>i&&r.settings.preventDefaultSwipeY&&e.preventDefault(),"fade"!==r.settings.mode&&r.settings.oneToOneTouch&&("horizontal"===r.settings.mode?(s=n[0].pageX-r.touch.start.x,a=r.touch.originalPos.left+s):(s=n[0].pageY-r.touch.start.y,a=r.touch.originalPos.top+s),b(a,"reset",0))},Y=function(e){r.viewport.unbind("touchmove MSPointerMove pointermove",W),r.controls.el.removeClass("disabled");var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=0,a=0;r.touch.end.x=n[0].pageX,r.touch.end.y=n[0].pageY,"fade"===r.settings.mode?(a=Math.abs(r.touch.start.x-r.touch.end.x))>=r.settings.swipeThreshold&&(r.touch.start.x>r.touch.end.x?o.goToNextSlide():o.goToPrevSlide(),o.stopAuto()):("horizontal"===r.settings.mode?(a=r.touch.end.x-r.touch.start.x,i=r.touch.originalPos.left):(a=r.touch.end.y-r.touch.start.y,i=r.touch.originalPos.top),!r.settings.infiniteLoop&&(0===r.active.index&&a>0||r.active.last&&a<0)?b(i,"reset",200):Math.abs(a)>=r.settings.swipeThreshold?(a<0?o.goToNextSlide():o.goToPrevSlide(),o.stopAuto()):b(i,"reset",200)),r.viewport.unbind("touchend MSPointerUp pointerup",Y),r.viewport.get(0).releasePointerCapture&&r.viewport.get(0).releasePointerCapture(r.pointerId)},z=function(t){if(r.initialized)if(r.working)window.setTimeout(z,10);else{var n=e(window).width(),i=e(window).height();a===n&&s===i||(a=n,s=i,o.redrawSlider(),r.settings.onSliderResize.call(o,r.active.index))}},U=function(e){var t=g();r.settings.ariaHidden&&!r.settings.ticker&&(r.children.attr("aria-hidden","true"),r.children.slice(e,e+t).attr("aria-hidden","false"))};return o.goToSlide=function(t,n){var i,a,s,l,c=!0,u=0,d={left:0,top:0},p=null;r.oldIndex=r.active.index,r.active.index=(h=t,h<0?r.settings.infiniteLoop?m()-1:r.active.index:h>=m()?r.settings.infiniteLoop?0:r.active.index:h);var h;if(!r.working&&r.active.index!==r.oldIndex){if(r.working=!0,void 0!==(c=r.settings.onSlideBefore.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index))&&!c)return r.active.index=r.oldIndex,void(r.working=!1);"next"===n?r.settings.onSlideNext.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)||(c=!1):"prev"===n&&(r.settings.onSlidePrev.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)||(c=!1)),r.active.last=r.active.index>=m()-1,(r.settings.pager||r.settings.pagerCustom)&&A(r.active.index),r.settings.controls&&N(),"fade"===r.settings.mode?(r.settings.adaptiveHeight&&r.viewport.height()!==f()&&r.viewport.animate({height:f()},r.settings.adaptiveHeightSpeed),r.children.filter(":visible").fadeOut(r.settings.speed).css({zIndex:0}),r.children.eq(r.active.index).css("zIndex",r.settings.slideZIndex+1).fadeIn(r.settings.speed,function(){e(this).css("zIndex",r.settings.slideZIndex),O()})):(r.settings.adaptiveHeight&&r.viewport.height()!==f()&&r.viewport.animate({height:f()},r.settings.adaptiveHeightSpeed),!r.settings.infiniteLoop&&r.carousel&&r.active.last?"horizontal"===r.settings.mode?(d=(p=r.children.eq(r.children.length-1)).position(),u=r.viewport.width()-p.outerWidth()):(i=r.children.length-r.settings.minSlides,d=r.children.eq(i).position()):r.carousel&&r.active.last&&"prev"===n?(a=1===r.settings.moveSlides?r.settings.maxSlides-v():(m()-1)*v()-(r.children.length-r.settings.maxSlides),d=(p=o.children(".bx-clone").eq(a)).position()):"next"===n&&0===r.active.index?(d=o.find("> .bx-clone").eq(r.settings.maxSlides).position(),r.active.last=!1):t>=0&&(l=t*parseInt(v()),d=r.children.eq(l).position()),void 0!==d&&(s="horizontal"===r.settings.mode?-(d.left-u):-d.top,b(s,"slide",r.settings.speed)),r.working=!1),r.settings.ariaHidden&&U(r.active.index*v())}},o.goToNextSlide=function(){if((r.settings.infiniteLoop||!r.active.last)&&1!=r.working){var e=parseInt(r.active.index)+1;o.goToSlide(e,"next")}},o.goToPrevSlide=function(){if((r.settings.infiniteLoop||0!==r.active.index)&&1!=r.working){var e=parseInt(r.active.index)-1;o.goToSlide(e,"prev")}},o.startAuto=function(e){r.interval||(r.interval=setInterval(function(){"next"===r.settings.autoDirection?o.goToNextSlide():o.goToPrevSlide()},r.settings.pause),r.settings.onAutoChange.call(o,!0),r.settings.autoControls&&!0!==e&&L("stop"))},o.stopAuto=function(e){r.interval&&(clearInterval(r.interval),r.interval=null,r.settings.onAutoChange.call(o,!1),r.settings.autoControls&&!0!==e&&L("start"))},o.getCurrentSlide=function(){return r.active.index},o.getCurrentSlideElement=function(){return r.children.eq(r.active.index)},o.getSlideElement=function(e){return r.children.eq(e)},o.getSlideCount=function(){return r.children.length},o.isWorking=function(){return r.working},o.redrawSlider=function(){r.children.add(o.find(".bx-clone")).outerWidth(h()),r.viewport.css("height",f()),r.settings.ticker||y(),r.active.last&&(r.active.index=m()-1),r.active.index>=m()&&(r.active.last=!0),r.settings.pager&&!r.settings.pagerCustom&&(x(),A(r.active.index)),r.settings.ariaHidden&&U(r.active.index*v())},o.destroySlider=function(){r.initialized&&(r.initialized=!1,e(".bx-clone",this).remove(),r.children.each(function(){void 0!==e(this).data("origStyle")?e(this).attr("style",e(this).data("origStyle")):e(this).removeAttr("style")}),void 0!==e(this).data("origStyle")?this.attr("style",e(this).data("origStyle")):e(this).removeAttr("style"),e(this).unwrap().unwrap(),r.controls.el&&r.controls.el.remove(),r.controls.next&&r.controls.next.remove(),r.controls.prev&&r.controls.prev.remove(),r.pagerEl&&r.settings.controls&&!r.settings.pagerCustom&&r.pagerEl.remove(),e(".bx-caption",this).remove(),r.controls.autoEl&&r.controls.autoEl.remove(),clearInterval(r.interval),r.settings.responsive&&e(window).unbind("resize",z),r.settings.keyboardEnabled&&e(document).unbind("keydown",_),e(this).removeData("bxSlider"),e(window).off("blur",j).off("focus",I))},o.reloadSlider=function(t){void 0!==t&&(n=t),o.destroySlider(),l(),e(o).data("bxSlider",this)},l(),e(o).data("bxSlider",this),this}}}(jQuery),function(e,t,n,i){"use strict";if(n)if(n.fn.fancybox)"console"in e&&console.log("fancyBox already initialized");else{var r={loop:!1,margin:[44,0],gutter:50,keyboard:!0,arrows:!0,infobar:!0,toolbar:!0,buttons:["slideShow","fullScreen","thumbs","share","close"],idleTime:3,smallBtn:"auto",protect:!1,modal:!1,image:{preload:"auto"},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},defaultType:"image",animationEffect:"zoom",animationDuration:500,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}<p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}"><svg viewBox="0 0 40 40"><path d="M20,23 L20,8 L20,23 L13,16 L20,23 L27,16 L20,23 M26,28 L13,28 L27,28 L14,28" /></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg viewBox="0 0 40 40"><path d="M 18,17 m-8,0 a 8,8 0 1,0 16,0 a 8,8 0 1,0 -16,0 M25,23 L31,29 L25,23" /></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg viewBox="0 0 40 40"><path d="M10,10 L30,30 M30,10 L10,30" /></svg></button>',smallBtn:'<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><svg viewBox="0 0 40 40"><path d="M10,20 L30,20 L10,20 L18,28 L10,20 L18,12 L10,20"></path></svg></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><svg viewBox="0 0 40 40"><path d="M30,20 L10,20 L30,20 L22,28 L30,20 L22,12 L30,20"></path></svg></button>'},parentEl:"body",autoFocus:!1,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:4e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{margin:0,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"ZurÃ¼ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es spÃ¤ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"MaÃstab"}}},o=n(e),a=n(t),s=0,l=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)},c=function(){var e,n=t.createElement("fakeelement"),r={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in r)if(n.style[e]!==i)return r[e];return"transitionend"}(),u=function(e){return e&&e.length&&e[0].offsetHeight},d=function(e,i,r){this.opts=n.extend(!0,{index:r},n.fancybox.defaults,i||{}),n.fancybox.isMobile&&(this.opts=n.extend(!0,{},this.opts,this.opts.mobile)),i&&n.isArray(i.buttons)&&(this.opts.buttons=i.buttons),this.id=this.opts.id||++s,this.group=[],this.currIndex=parseInt(this.opts.index,10)||0,this.prevIndex=null,this.prevPos=null,this.currPos=0,this.firstRun=null,this.createGroup(e),this.group.length&&(this.$lastFocus=n(t.activeElement).blur(),this.slides={},this.init())};n.extend(d.prototype,{init:function(){var r,o,s,l=this,c=l.group[l.currIndex],u=c.opts,d=n.fancybox.scrollbarWidth;l.scrollTop=a.scrollTop(),l.scrollLeft=a.scrollLeft(),n.fancybox.getInstance()||(n("body").addClass("fancybox-active"),/iPad|iPhone|iPod/.test(navigator.userAgent)&&!e.MSStream?"image"!==c.type&&n("body").css("top",-1*n("body").scrollTop()).addClass("fancybox-iosfix"):!n.fancybox.isMobile&&t.body.scrollHeight>e.innerHeight&&(d===i&&(r=n('<div style="width:50px;height:50px;overflow:scroll;" />').appendTo("body"),d=n.fancybox.scrollbarWidth=r[0].offsetWidth-r[0].clientWidth,r.remove()),n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar { margin-right: '+d+"px; }</style>"),n("body").addClass("compensate-for-scrollbar"))),s="",n.each(u.buttons,function(e,t){s+=u.btnTpl[t]||""}),o=n(l.translate(l,u.baseTpl.replace("{{buttons}}",s).replace("{{arrows}}",u.btnTpl.arrowLeft+u.btnTpl.arrowRight))).attr("id","fancybox-container-"+l.id).addClass("fancybox-is-hidden").addClass(u.baseClass).data("FancyBox",l).appendTo(u.parentEl),l.$refs={container:o},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){l.$refs[e]=o.find(".fancybox-"+e)}),l.trigger("onInit"),l.activate(),l.jumpTo(l.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang];return t.replace(/\{\{(\w+)\}\}/g,function(e,t){var r=n[t];return r===i?e:r})},createGroup:function(e){var t=this,r=n.makeArray(e);n.each(r,function(e,r){var o,a,s,l,c={},u={};n.isPlainObject(r)?(c=r,u=r.opts||r):"object"===n.type(r)&&n(r).length?(u=(o=n(r)).data(),(u=n.extend({},u,u.options||{})).$orig=o,c.src=u.src||o.attr("href"),c.type||c.src||(c.type="inline",c.src=r)):c={type:"html",src:r+""},c.opts=n.extend(!0,{},t.opts,u),n.isArray(u.buttons)&&(c.opts.buttons=u.buttons),a=c.type||c.opts.type,s=c.src||"",!a&&s&&(s.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?a="image":s.match(/\.(pdf)((\?|#).*)?$/i)?a="pdf":"#"===s.charAt(0)&&(a="inline")),a?c.type=a:t.trigger("objectNeedsType",c),c.index=t.group.length,c.opts.$orig&&!c.opts.$orig.length&&delete c.opts.$orig,!c.opts.$thumb&&c.opts.$orig&&(c.opts.$thumb=c.opts.$orig.find("img:first")),c.opts.$thumb&&!c.opts.$thumb.length&&delete c.opts.$thumb,"function"===n.type(c.opts.caption)&&(c.opts.caption=c.opts.caption.apply(r,[t,c])),"function"===n.type(t.opts.caption)&&(c.opts.caption=t.opts.caption.apply(r,[t,c])),c.opts.caption instanceof n||(c.opts.caption=c.opts.caption===i?"":c.opts.caption+""),"ajax"===a&&(l=s.split(/\s+/,2)).length>1&&(c.src=l.shift(),c.opts.filter=l.shift()),"auto"==c.opts.smallBtn&&(n.inArray(a,["html","inline","ajax"])>-1?(c.opts.toolbar=!1,c.opts.smallBtn=!0):c.opts.smallBtn=!1),"pdf"===a&&(c.type="iframe",c.opts.iframe.preload=!1),c.opts.modal&&(c.opts=n.extend(!0,c.opts,{infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),t.group.push(c)})},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("click.fb-prev touchend.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("click.fb-next touchend.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}).on("click.fb","[data-fancybox-zoom]",function(e){i[i.isScaledDown()?"scaleToActual":"scaleToFit"]()}),o.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?l(function(){i.update()}):(i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update()},600))}),a.on("focusin.fb",function(e){var r=n.fancybox?n.fancybox.getInstance():null;r.isClosing||!r.current||!r.current.opts.trapFocus||n(e.target).hasClass("fancybox-container")||n(e.target).is(t)||r&&"fixed"!==n(e.target).css("position")&&!r.$refs.container.has(e.target).length&&(e.stopPropagation(),r.focus(),o.scrollTop(i.scrollTop).scrollLeft(i.scrollLeft))}),a.on("keydown.fb",function(e){var t=i.current,r=e.keyCode||e.which;if(t&&t.opts.keyboard&&!n(e.target).is("input")&&!n(e.target).is("textarea"))return 8===r||27===r?(e.preventDefault(),void i.close(e)):37===r||38===r?(e.preventDefault(),void i.previous()):39===r||40===r?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,r)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,a.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=e.setInterval(function(){i.idleSecondsCounter++,i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){o.off("orientationchange.fb resize.fb"),a.off("focusin.fb keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(e.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,t,r){var o,a,s,l,c,d,f,p=this,h=p.group.length;if(!(p.isSliding||p.isClosing||p.isAnimating&&p.firstRun)){if(e=parseInt(e,10),!(a=p.current?p.current.opts.loop:p.opts.loop)&&(e<0||e>=h))return!1;if(o=p.firstRun=null===p.firstRun,!(h<2&&!o&&p.isSliding)){if(l=p.current,p.prevIndex=p.currIndex,p.prevPos=p.currPos,s=p.createSlide(e),h>1&&((a||s.index>0)&&p.createSlide(e-1),(a||s.index<h-1)&&p.createSlide(e+1)),p.current=s,p.currIndex=s.index,p.currPos=s.pos,p.trigger("beforeShow",o),p.updateControls(),d=n.fancybox.getTranslate(s.$slide),s.isMoved=(0!==d.left||0!==d.top)&&!s.$slide.hasClass("fancybox-animated"),s.forcedDuration=i,n.isNumeric(t)?s.forcedDuration=t:t=s.opts[o?"animationDuration":"transitionDuration"],t=parseInt(t,10),o)return s.opts.animationEffect&&t&&p.$refs.container.css("transition-duration",t+"ms"),p.$refs.container.removeClass("fancybox-is-hidden"),u(p.$refs.container),p.$refs.container.addClass("fancybox-is-open"),s.$slide.addClass("fancybox-slide--current"),p.loadSlide(s),void p.preload();n.each(p.slides,function(e,t){n.fancybox.stop(t.$slide)}),s.$slide.removeClass("fancybox-slide--next fancybox-slide--previous").addClass("fancybox-slide--current"),s.isMoved?(c=Math.round(s.$slide.width()),n.each(p.slides,function(e,i){var r=i.pos-s.pos;n.fancybox.animate(i.$slide,{top:0,left:r*c+r*i.opts.gutter},t,function(){i.$slide.removeAttr("style").removeClass("fancybox-slide--next fancybox-slide--previous"),i.pos===p.currPos&&(s.isMoved=!1,p.complete())})})):p.$refs.stage.children().removeAttr("style"),s.isLoaded?p.revealContent(s):p.loadSlide(s),p.preload(),l.pos!==s.pos&&(f="fancybox-slide--"+(l.pos>s.pos?"next":"previous"),l.$slide.removeClass("fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous"),l.isComplete=!1,t&&(s.isMoved||s.opts.transitionEffect)&&(s.isMoved?l.$slide.addClass(f):(f="fancybox-animated "+f+" fancybox-fx-"+s.opts.transitionEffect,n.fancybox.animate(l.$slide,f,t,function(){l.$slide.removeClass(f).removeAttr("style")}))))}}},createSlide:function(e){var t,i;return i=(i=e%this.group.length)<0?this.group.length+i:i,!this.slides[e]&&this.group[i]&&(t=n('<div class="fancybox-slide"></div>').appendTo(this.$refs.stage),this.slides[e]=n.extend(!0,{},this.group[i],{pos:e,$slide:t,isLoaded:!1}),this.updateSlide(this.slides[e])),this.slides[e]},scaleToActual:function(e,t,r){var o,a,s,l,c,u=this,d=u.current,f=d.$content,p=parseInt(d.$slide.width(),10),h=parseInt(d.$slide.height(),10),g=d.width,m=d.height;"image"!=d.type||d.hasError||!f||u.isAnimating||(n.fancybox.stop(f),u.isAnimating=!0,e=e===i?.5*p:e,t=t===i?.5*h:t,l=g/(o=n.fancybox.getTranslate(f)).width,c=m/o.height,a=.5*p-.5*g,s=.5*h-.5*m,g>p&&((a=o.left*l-(e*l-e))>0&&(a=0),a<p-g&&(a=p-g)),m>h&&((s=o.top*c-(t*c-t))>0&&(s=0),s<h-m&&(s=h-m)),u.updateCursor(g,m),n.fancybox.animate(f,{top:s,left:a,scaleX:l,scaleY:c},r||330,function(){u.isAnimating=!1}),u.SlideShow&&u.SlideShow.isActive&&u.SlideShow.stop())},scaleToFit:function(e){var t,i=this,r=i.current,o=r.$content;"image"!=r.type||r.hasError||!o||i.isAnimating||(n.fancybox.stop(o),i.isAnimating=!0,t=i.getFitPos(r),i.updateCursor(t.width,t.height),n.fancybox.animate(o,{top:t.top,left:t.left,scaleX:t.width/o.width(),scaleY:t.height/o.height()},e||330,function(){i.isAnimating=!1}))},getFitPos:function(e){var t,i,r,o,a,s=e.$content,l=e.width,c=e.height,u=e.opts.margin;return!(!s||!s.length||!l&&!c)&&("number"===n.type(u)&&(u=[u,u]),2==u.length&&(u=[u[0],u[1],u[0],u[1]]),t=parseInt(this.$refs.stage.width(),10)-(u[1]+u[3]),i=parseInt(this.$refs.stage.height(),10)-(u[0]+u[2]),r=Math.min(1,t/l,i/c),o=Math.floor(r*l),a=Math.floor(r*c),{top:Math.floor(.5*(i-a))+u[0],left:Math.floor(.5*(t-o))+u[3],width:o,height:a})},update:function(){var e=this;n.each(e.slides,function(t,n){e.updateSlide(n)})},updateSlide:function(e){var t=e.$content;t&&(e.width||e.height)&&(this.isAnimating=!1,n.fancybox.stop(t),n.fancybox.setTranslate(t,this.getFitPos(e)),e.pos===this.currPos&&this.updateCursor()),e.$slide.trigger("refresh"),this.trigger("onUpdate",e)},updateCursor:function(e,t){var n=this.$refs.container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut");this.current&&!this.isClosing&&(this.isZoomable()?(n.addClass("fancybox-is-zoomable"),(e!==i&&t!==i?e<this.current.width&&t<this.current.height:this.isScaledDown())?n.addClass("fancybox-can-zoomIn"):this.current.opts.touch?n.addClass("fancybox-can-drag"):n.addClass("fancybox-can-zoomOut")):this.current.opts.touch&&n.addClass("fancybox-can-drag"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing)return!!("image"===t.type&&t.isLoaded&&!t.hasError&&("zoom"===t.opts.clickContent||n.isFunction(t.opts.clickContent)&&"zoom"===t.opts.clickContent(t))&&(e=this.getFitPos(t),t.width>e.width||t.height>e.height))},isScaledDown:function(){var e=this.current,t=e.$content,i=!1;return t&&(i=(i=n.fancybox.getTranslate(t)).width<e.width||i.height<e.height),i},canPan:function(){var e=this.current,t=e.$content,n=!1;return t&&(n=this.getFitPos(e),n=Math.abs(t.width()-n.width)>1||Math.abs(t.height()-n.height)>1),n},loadSlide:function(e){var t,i,r,o=this;if(!e.isLoading&&!e.isLoaded){switch(e.isLoading=!0,o.trigger("beforeLoad",e),t=e.type,(i=e.$slide).off("refresh").trigger("onReset").addClass("fancybox-slide--"+(t||"unknown")).addClass(e.opts.slideClass),t){case"image":o.setImage(e);break;case"iframe":o.setIframe(e);break;case"html":o.setContent(e,e.src||e.content);break;case"inline":n(e.src).length?o.setContent(e,n(e.src)):o.setError(e);break;case"ajax":o.showLoading(e),r=n.ajax(n.extend({},e.opts.ajax.settings,{url:e.src,success:function(t,n){"success"===n&&o.setContent(e,t)},error:function(t,n){t&&"abort"!==n&&o.setError(e)}})),i.one("onReset",function(){r.abort()});break;default:o.setError(e)}return!0}},setImage:function(t){var i,r,o,a,s=this,l=t.opts.srcset||t.opts.image.srcset;if(l){o=e.devicePixelRatio||1,a=e.innerWidth*o,(r=l.split(",").map(function(e){var t={};return e.trim().split(/\s+/).forEach(function(e,n){var i=parseInt(e.substring(0,e.length-1),10);if(0===n)return t.url=e;i&&(t.value=i,t.postfix=e[e.length-1])}),t})).sort(function(e,t){return e.value-t.value});for(var c=0;c<r.length;c++){var u=r[c];if("w"===u.postfix&&u.value>=a||"x"===u.postfix&&u.value>=o){i=u;break}}!i&&r.length&&(i=r[r.length-1]),i&&(t.src=i.url,t.width&&t.height&&"w"==i.postfix&&(t.height=t.width/t.height*i.value,t.width=i.value))}t.$content=n('<div class="fancybox-image-wrap"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&(t.opts.thumb||t.opts.$thumb)?(t.width=t.opts.width,t.height=t.opts.height,t.$ghost=n("<img />").one("error",function(){n(this).remove(),t.$ghost=null,s.setBigImage(t)}).one("load",function(){s.afterLoad(t),s.setBigImage(t)}).addClass("fancybox-image").appendTo(t.$content).attr("src",t.opts.thumb||t.opts.$thumb.attr("src"))):s.setBigImage(t)},setBigImage:function(e){var t=this,i=n("<img />");e.$image=i.one("error",function(){t.setError(e)}).one("load",function(){clearTimeout(e.timouts),e.timouts=null,t.isClosing||(e.width=this.naturalWidth,e.height=this.naturalHeight,e.opts.image.srcset&&i.attr("sizes","100vw").attr("srcset",e.opts.image.srcset),t.hideLoading(e),e.$ghost?e.timouts=setTimeout(function(){e.timouts=null,e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))):t.afterLoad(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),(i[0].complete||"complete"==i[0].readyState)&&i[0].naturalWidth&&i[0].naturalHeight?i.trigger("load"):i[0].error?i.trigger("error"):e.timouts=setTimeout(function(){i[0].complete||e.hasError||t.showLoading(e)},100)},setIframe:function(e){var t,r=this,o=e.opts.iframe,a=e.$slide;e.$content=n('<div class="fancybox-content'+(o.preload?" fancybox-is-hidden":"")+'"></div>').css(o.css).appendTo(a),t=n(o.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(o.attr).appendTo(e.$content),o.preload?(r.showLoading(e),t.on("load.fb error.fb",function(t){this.isReady=1,e.$slide.trigger("refresh"),r.afterLoad(e)}),a.on("refresh.fb",function(){var n,r,a=e.$content,s=o.css.width,l=o.css.height;if(1===t[0].isReady){try{r=t.contents().find("body")}catch(e){}r&&r.length&&(s===i&&(n=t[0].contentWindow.document.documentElement.scrollWidth,s=Math.ceil(r.outerWidth(!0)+(a.width()-n)),s+=a.outerWidth()-a.innerWidth()),l===i&&(l=Math.ceil(r.outerHeight(!0)),l+=a.outerHeight()-a.innerHeight()),s&&a.width(s),l&&a.height(l)),a.removeClass("fancybox-is-hidden")}})):this.afterLoad(e),t.attr("src",e.src),!0===e.opts.smallBtn&&e.$content.prepend(r.translate(e,e.opts.btnTpl.smallBtn)),a.one("onReset",function(){try{n(this).find("iframe").hide().attr("src","//about:blank")}catch(e){}n(this).empty(),e.isLoaded=!1})},setContent:function(e,t){if(!this.isClosing){this.hideLoading(e),e.$slide.empty(),(i=t)&&i.hasOwnProperty&&i instanceof n&&t.parent().length?(t.parent(".fancybox-slide--inline").trigger("onReset"),e.$placeholder=n("<div></div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===n.type(t)&&3===(t=n("<div>").append(n.trim(t)).contents())[0].nodeType&&(t=n("<div>").html(t)),e.opts.filter&&(t=n("<div>").html(t).find(e.opts.filter)));var i;e.$slide.one("onReset",function(){e.$placeholder&&(e.$placeholder.after(t.hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(n(this).empty(),e.isLoaded=!1)}),e.$content=n(t).appendTo(e.$slide),this.afterLoad(e)}},setError:function(e){e.hasError=!0,e.$slide.removeClass("fancybox-slide--"+e.type),this.setContent(e,this.translate(e,e.opts.errorTpl))},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=n(this.opts.spinnerTpl).appendTo(e.$slide))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.remove(),delete e.$spinner)},afterLoad:function(e){this.isClosing||(e.isLoading=!1,e.isLoaded=!0,this.trigger("afterLoad",e),this.hideLoading(e),e.opts.smallBtn&&!e.$smallBtn&&(e.$smallBtn=n(this.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content.filter("div,form").first())),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&n('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),this.revealContent(e))},revealContent:function(e){var t,r,o,a,s,l=this,c=e.$slide,d=!1;return t=e.opts[l.firstRun?"animationEffect":"transitionEffect"],o=e.opts[l.firstRun?"animationDuration":"transitionDuration"],o=parseInt(e.forcedDuration===i?o:e.forcedDuration,10),!e.isMoved&&e.pos===l.currPos&&o||(t=!1),"zoom"!==t||e.pos===l.currPos&&o&&"image"===e.type&&!e.hasError&&(d=l.getThumbPos(e))||(t="fade"),"zoom"===t?((s=l.getFitPos(e)).scaleX=s.width/d.width,s.scaleY=s.height/d.height,delete s.width,delete s.height,"auto"==(a=e.opts.zoomOpacity)&&(a=Math.abs(e.width/e.height-d.width/d.height)>.1),a&&(d.opacity=.1,s.opacity=1),n.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),d),u(e.$content),void n.fancybox.animate(e.$content,s,o,function(){l.complete()})):(l.updateSlide(e),t?(n.fancybox.stop(c),r="fancybox-animated fancybox-slide--"+(e.pos>=l.prevPos?"next":"previous")+" fancybox-fx-"+t,c.removeAttr("style").removeClass("fancybox-slide--current fancybox-slide--next fancybox-slide--previous").addClass(r),e.$content.removeClass("fancybox-is-hidden"),u(c),void n.fancybox.animate(c,"fancybox-slide--current",o,function(t){c.removeClass(r).removeAttr("style"),e.pos===l.currPos&&l.complete()},!0)):(u(c),e.$content.removeClass("fancybox-is-hidden"),void(e.pos===l.currPos&&l.complete())))},getThumbPos:function(i){var r,o=!1,a=i.opts.$thumb,s=a?a.offset():0;return s&&a[0].ownerDocument===t&&function(t){for(var i=t[0],r=i.getBoundingClientRect(),o=[];null!==i.parentElement;)"hidden"!==n(i.parentElement).css("overflow")&&"auto"!==n(i.parentElement).css("overflow")||o.push(i.parentElement.getBoundingClientRect()),i=i.parentElement;return o.every(function(e){var t=Math.min(r.right,e.right)-Math.max(r.left,e.left),n=Math.min(r.bottom,e.bottom)-Math.max(r.top,e.top);return t>0&&n>0})&&r.bottom>0&&r.right>0&&r.left<n(e).width()&&r.top<n(e).height()}(a)&&(r=this.$refs.stage.offset(),o={top:s.top-r.top+parseFloat(a.css("border-top-width")||0),left:s.left-r.left+parseFloat(a.css("border-left-width")||0),width:a.width(),height:a.height(),scaleX:1,scaleY:1}),o},complete:function(){var e=this,i=e.current,r={};i.isMoved||!i.isLoaded||i.isComplete||(i.isComplete=!0,i.$slide.siblings().trigger("onReset"),u(i.$slide),i.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,i){i.pos>=e.currPos-1&&i.pos<=e.currPos+1?r[i.pos]=i:i&&(n.fancybox.stop(i.$slide),i.$slide.off().remove())}),e.slides=r,e.updateCursor(),e.trigger("afterShow"),(n(t.activeElement).is("[disabled]")||i.opts.autoFocus&&"image"!=i.type&&"iframe"!==i.type)&&e.focus())},preload:function(){var e,t;this.group.length<2||(e=this.slides[this.currPos+1],t=this.slides[this.currPos-1],e&&"image"===e.type&&this.loadSlide(e),t&&"image"===t.type&&this.loadSlide(t))},focus:function(){var e,t=this.current;this.isClosing||(t&&t.isComplete&&((e=t.$slide.find("input[autofocus]:enabled:visible:first")).length||(e=t.$slide.find("button,:input,[tabindex],a").filter(":enabled:visible:first"))),(e=e&&e.length?e:this.$refs.container).focus())},activate:function(){var e=this;n(".fancybox-container").each(function(){var t=n(this).data("FancyBox");t&&t.id!==e.id&&!t.isClosing&&(t.trigger("onDeactivate"),t.removeEvents(),t.isVisible=!1)}),e.isVisible=!0,(e.current||e.isIdle)&&(e.update(),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(e,t){var i,r,o,a,s,d,f=this,p=f.current,h=function(){f.cleanUp(e)};return!f.isClosing&&(f.isClosing=!0,!1===f.trigger("beforeClose",e)?(f.isClosing=!1,l(function(){f.update()}),!1):(f.removeEvents(),p.timouts&&clearTimeout(p.timouts),o=p.$content,i=p.opts.animationEffect,r=n.isNumeric(t)?t:i?p.opts.animationDuration:0,p.$slide.off(c).removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),p.$slide.siblings().trigger("onReset").remove(),r&&f.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing"),f.hideLoading(p),f.hideControls(),f.updateCursor(),"zoom"!==i||!0!==e&&o&&r&&"image"===p.type&&!p.hasError&&(d=f.getThumbPos(p))||(i="fade"),"zoom"===i?(n.fancybox.stop(o),(s=n.fancybox.getTranslate(o)).width=s.width*s.scaleX,s.height=s.height*s.scaleY,"auto"==(a=p.opts.zoomOpacity)&&(a=Math.abs(p.width/p.height-d.width/d.height)>.1),a&&(d.opacity=0),s.scaleX=s.width/d.width,s.scaleY=s.height/d.height,s.width=d.width,s.height=d.height,n.fancybox.setTranslate(p.$content,s),u(p.$content),n.fancybox.animate(p.$content,d,r,h),!0):(i&&r?!0===e?setTimeout(h,r):n.fancybox.animate(p.$slide.removeClass("fancybox-slide--current"),"fancybox-animated fancybox-slide--previous fancybox-fx-"+i,r,h):h(),!0)))},cleanUp:function(e){var i,r,a=n("body");this.current.$slide.trigger("onReset"),this.$refs.container.empty().remove(),this.trigger("afterClose",e),this.$lastFocus&&this.current.opts.backFocus&&this.$lastFocus.focus(),this.current=null,(i=n.fancybox.getInstance())?i.activate():(o.scrollTop(this.scrollTop).scrollLeft(this.scrollLeft),a.removeClass("fancybox-active compensate-for-scrollbar"),a.hasClass("fancybox-iosfix")&&(r=parseInt(t.body.style.top,10),a.removeClass("fancybox-iosfix").css("top","").scrollTop(-1*r)),n("#fancybox-style-noscroll").remove())},trigger:function(e,t){var i,r=Array.prototype.slice.call(arguments,1),o=t&&t.opts?t:this.current;if(o?r.unshift(o):o=this,r.unshift(this),n.isFunction(o.opts[e])&&(i=o.opts[e].apply(o,r)),!1===i)return i;"afterClose"!==e&&this.$refs?this.$refs.container.trigger(e+".fb",r):a.trigger(e+".fb",r)},updateControls:function(e){var t=this.current,n=t.index,i=t.opts.caption,r=this.$refs.container,o=this.$refs.caption;t.$slide.trigger("refresh"),this.$caption=i&&i.length?o.html(i):null,this.isHiddenControls||this.isIdle||this.showControls(),r.find("[data-fancybox-count]").html(this.group.length),r.find("[data-fancybox-index]").html(n+1),r.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&n<=0),r.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&n>=this.group.length-1),"image"===t.type?r.find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():r.find("[data-fancybox-download],[data-fancybox-zoom]").hide()},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav")},showControls:function(){var e=this.current?this.current.opts:this.opts,t=this.$refs.container;this.isHiddenControls=!1,this.idleSecondsCounter=0,t.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&this.group.length>1)).toggleClass("fancybox-show-nav",!!(e.arrows&&this.group.length>1)).toggleClass("fancybox-is-modal",!!e.modal),this.$caption?t.addClass("fancybox-show-caption "):t.removeClass("fancybox-show-caption")},toggleControls:function(){this.isHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.2.5",defaults:r,getInstance:function(e){var t=n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return t instanceof d&&("string"===n.type(e)?t[e].apply(t,i):"function"===n.type(e)&&e.apply(t,i),t)},open:function(e,t,n){return new d(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close())},destroy:function(){this.close(!0),a.off("click.fb-start")},isMobile:t.createTouch!==i&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:function(){var n=t.createElement("div");return e.getComputedStyle&&e.getComputedStyle(n).getPropertyValue("transform")&&!(t.documentMode&&t.documentMode<11)}(),getTranslate:function(e){var t;if(!e||!e.length)return!1;if((t=(t=e.eq(0).css("transform"))&&-1!==t.indexOf("matrix")?(t=(t=t.split("(")[1]).split(")")[0]).split(","):[]).length)t=(t=t.length>10?[t[13],t[12],t[0],t[5]]:[t[5],t[4],t[0],t[3]]).map(parseFloat);else{t=[0,0,1,1];var n=/\.*translate\((.*)px,(.*)px\)/i.exec(e.eq(0).attr("style"));n&&(t[0]=parseFloat(n[2]),t[1]=parseFloat(n[1]))}return{top:t[0],left:t[1],scaleX:t[2],scaleY:t[3],opacity:parseFloat(e.css("opacity")),width:e.width(),height:e.height()}},setTranslate:function(e,t){var n="",r={};if(e&&t)return t.left===i&&t.top===i||(n=(t.left===i?e.position().left:t.left)+"px, "+(t.top===i?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),t.scaleX!==i&&t.scaleY!==i&&(n=(n.length?n+" ":"")+"scale("+t.scaleX+", "+t.scaleY+")"),n.length&&(r.transform=n),t.opacity!==i&&(r.opacity=t.opacity),t.width!==i&&(r.width=t.width),t.height!==i&&(r.height=t.height),e.css(r)},animate:function(e,t,r,o,a){n.isFunction(r)&&(o=r,r=null),n.isPlainObject(t)||e.removeAttr("style"),e.on(c,function(r){(!r||!r.originalEvent||e.is(r.originalEvent.target)&&"z-index"!=r.originalEvent.propertyName)&&(n.fancybox.stop(e),n.isPlainObject(t)?t.scaleX!==i&&t.scaleY!==i&&(e.css("transition-duration",""),t.width=Math.round(e.width()*t.scaleX),t.height=Math.round(e.height()*t.scaleY),t.scaleX=1,t.scaleY=1,n.fancybox.setTranslate(e,t)):!0!==a&&e.removeClass(t),n.isFunction(o)&&o(r))}),n.isNumeric(r)&&e.css("transition-duration",r+"ms"),n.isPlainObject(t)?n.fancybox.setTranslate(e,t):e.addClass(t),t.scaleX&&e.hasClass("fancybox-image-wrap")&&e.parent().addClass("fancybox-is-scaling"),e.data("timer",setTimeout(function(){e.trigger("transitionend")},r+16))},stop:function(e){clearTimeout(e.data("timer")),e.off("transitionend").css("transition-duration",""),e.hasClass("fancybox-image-wrap")&&e.parent().removeClass("fancybox-is-scaling")}},n.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?n("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},f):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},f),this},a.on("click.fb-start","[data-fancybox]",f)}function f(e){var t=n(e.currentTarget),i=e.data?e.data.options:{},r=t.attr("data-fancybox")||"",o=0,a=[];e.isDefaultPrevented()||(e.preventDefault(),r?(o=(a=(a=i.selector?n(i.selector):e.data?e.data.items:[]).length?a.filter('[data-fancybox="'+r+'"]'):n('[data-fancybox="'+r+'"]')).index(t))<0&&(o=0):a=[t],n.fancybox.open(a,i,o))}}(window,document,window.jQuery||jQuery),function(e){"use strict";var t=function(t,n,i){if(t)return i=i||"","object"===e.type(i)&&(i=e.param(i,!0)),e.each(n,function(e,n){t=t.replace("$"+e,n||"")}),i.length&&(t+=(t.indexOf("?")>0?"&":"?")+i),t},n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12])+"&output="+(e[12]&&e[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};e(document).on("objectNeedsType.fb",function(i,r,o){var a,s,l,c,u,d,f=o.src||"",p=!1;a=e.extend(!0,{},n,o.opts.media),e.each(a,function(n,i){if(l=f.match(i.matcher)){if(p=i.type,d={},i.paramPlace&&l[i.paramPlace]){"?"==(u=l[i.paramPlace])[0]&&(u=u.substring(1)),u=u.split("&");for(var r=0;r<u.length;++r){var a=u[r].split("=",2);2==a.length&&(d[a[0]]=decodeURIComponent(a[1].replace(/\+/g," ")))}}return c=e.extend(!0,{},i.params,o.opts[n],d),f="function"===e.type(i.url)?i.url.call(this,l,c,o):t(i.url,l,c),s="function"===e.type(i.thumb)?i.thumb.call(this,l,c,o):t(i.thumb,l),"vimeo"===n&&(f=f.replace("&%23","#")),!1}}),p?(o.src=f,o.type=p,o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=s),"iframe"===p&&(e.extend(!0,o.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}}),o.contentProvider=void 0,o.opts.slideClass+=" fancybox-slide--video")):f&&(o.type=o.opts.defaultType)})}(window.jQuery||jQuery),function(e,t,n){"use strict";var i=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)},r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.mozCancelAnimationFrame||e.oCancelAnimationFrame||function(t){e.clearTimeout(t)},o=function(t){var n=[];t=(t=t.originalEvent||t||e.e).touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t];for(var i in t)t[i].pageX?n.push({x:t[i].pageX,y:t[i].pageY}):t[i].clientX&&n.push({x:t[i].clientX,y:t[i].clientY});return n},a=function(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0},s=function(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea')||n.isFunction(e.get(0).onclick)||e.data("selectable"))return!0;for(var t=0,i=e[0].attributes,r=i.length;t<r;t++)if("data-fancybox-"===i[t].nodeName.substr(0,14))return!0;return!1},l=function(t){var n=e.getComputedStyle(t)["overflow-y"],i=e.getComputedStyle(t)["overflow-x"],r=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,o=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth;return r||o},c=function(e){for(var t=!1;!(t=l(e.get(0)))&&(e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body"););return t},u=function(e){this.instance=e,this.$bg=e.$refs.bg,this.$stage=e.$refs.stage,this.$container=e.$refs.container,this.destroy(),this.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(this,"ontouchstart"))};u.prototype.destroy=function(){this.$container.off(".fb.touch")},u.prototype.ontouchstart=function(i){var r=n(i.target),l=this.instance,u=l.current,d=u.$content,f="touchstart"==i.type;if(f&&this.$container.off("mousedown.fb.touch"),!u||this.instance.isAnimating||this.instance.isClosing)return i.stopPropagation(),void i.preventDefault();i.originalEvent&&2==i.originalEvent.button||!r.length||s(r)||s(r.parent())||i.originalEvent.clientX>r[0].clientWidth+r.offset().left||(this.startPoints=o(i),!this.startPoints||this.startPoints.length>1&&l.isSliding||(this.$target=r,this.$content=d,this.canTap=!0,this.opts=u.opts.touch,n(t).off(".fb.touch"),n(t).on(f?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(this,"ontouchend")),n(t).on(f?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(this,"ontouchmove")),(this.opts||l.canPan())&&(r.is(this.$stage)||this.$stage.find(r).length)?(i.stopPropagation(),n.fancybox.isMobile&&(c(this.$target)||c(this.$target.parent()))||i.preventDefault(),this.canvasWidth=Math.round(u.$slide[0].clientWidth),this.canvasHeight=Math.round(u.$slide[0].clientHeight),this.startTime=(new Date).getTime(),this.distanceX=this.distanceY=this.distance=0,this.isPanning=!1,this.isSwiping=!1,this.isZooming=!1,this.sliderStartPos=this.sliderLastPos||{top:0,left:0},this.contentStartPos=n.fancybox.getTranslate(this.$content),this.contentLastPos=null,1!==this.startPoints.length||this.isZooming||(this.canTap=!l.isSliding,"image"===u.type&&(this.contentStartPos.width>this.canvasWidth+1||this.contentStartPos.height>this.canvasHeight+1)?(n.fancybox.stop(this.$content),this.$content.css("transition-duration","0ms"),this.isPanning=!0):this.isSwiping=!0,this.$container.addClass("fancybox-controls--isGrabbing")),2!==this.startPoints.length||l.isAnimating||u.hasError||"image"!==u.type||!u.isLoaded&&!u.$ghost||(this.isZooming=!0,this.isSwiping=!1,this.isPanning=!1,n.fancybox.stop(this.$content),this.$content.css("transition-duration","0ms"),this.centerPointStartX=.5*(this.startPoints[0].x+this.startPoints[1].x)-n(e).scrollLeft(),this.centerPointStartY=.5*(this.startPoints[0].y+this.startPoints[1].y)-n(e).scrollTop(),this.percentageOfImageAtPinchPointX=(this.centerPointStartX-this.contentStartPos.left)/this.contentStartPos.width,this.percentageOfImageAtPinchPointY=(this.centerPointStartY-this.contentStartPos.top)/this.contentStartPos.height,this.startDistanceBetweenFingers=a(this.startPoints[0],this.startPoints[1]))):r.is("img")&&i.preventDefault()))},u.prototype.ontouchmove=function(e){if(this.newPoints=o(e),n.fancybox.isMobile&&(c(this.$target)||c(this.$target.parent())))return e.stopPropagation(),void(this.canTap=!1);if((this.opts||this.instance.canPan())&&this.newPoints&&this.newPoints.length&&(this.distanceX=a(this.newPoints[0],this.startPoints[0],"x"),this.distanceY=a(this.newPoints[0],this.startPoints[0],"y"),this.distance=a(this.newPoints[0],this.startPoints[0]),this.distance>0)){if(!this.$target.is(this.$stage)&&!this.$stage.find(this.$target).length)return;e.stopPropagation(),e.preventDefault(),this.isSwiping?this.onSwipe():this.isPanning?this.onPan():this.isZooming&&this.onZoom()}},u.prototype.onSwipe=function(){var t,o=this,a=o.isSwiping,s=o.sliderStartPos.left||0;!0===a?Math.abs(o.distance)>10&&(o.canTap=!1,o.instance.group.length<2&&o.opts.vertical?o.isSwiping="y":o.instance.isSliding||!1===o.opts.vertical||"auto"===o.opts.vertical&&n(e).width()>800?o.isSwiping="x":(t=Math.abs(180*Math.atan2(o.distanceY,o.distanceX)/Math.PI),o.isSwiping=t>45&&t<135?"y":"x"),o.instance.isSliding=o.isSwiping,o.startPoints=o.newPoints,n.each(o.instance.slides,function(e,t){n.fancybox.stop(t.$slide),t.$slide.css("transition-duration","0ms"),t.inTransition=!1,t.pos===o.instance.current.pos&&(o.sliderStartPos.left=n.fancybox.getTranslate(t.$slide).left)}),o.instance.SlideShow&&o.instance.SlideShow.isActive&&o.instance.SlideShow.stop()):("x"==a&&(o.distanceX>0&&(o.instance.group.length<2||0===o.instance.current.index&&!o.instance.current.opts.loop)?s+=Math.pow(o.distanceX,.8):o.distanceX<0&&(o.instance.group.length<2||o.instance.current.index===o.instance.group.length-1&&!o.instance.current.opts.loop)?s-=Math.pow(-o.distanceX,.8):s+=o.distanceX),o.sliderLastPos={top:"x"==a?0:o.sliderStartPos.top+o.distanceY,left:s},o.requestId&&(r(o.requestId),o.requestId=null),o.requestId=i(function(){o.sliderLastPos&&(n.each(o.instance.slides,function(e,t){var i=t.pos-o.instance.currPos;n.fancybox.setTranslate(t.$slide,{top:o.sliderLastPos.top,left:o.sliderLastPos.left+i*o.canvasWidth+i*t.opts.gutter})}),o.$container.addClass("fancybox-is-sliding"))}))},u.prototype.onPan=function(){var e,t,o,a=this;a.canTap=!1,e=a.contentStartPos.width>a.canvasWidth?a.contentStartPos.left+a.distanceX:a.contentStartPos.left,t=a.contentStartPos.top+a.distanceY,(o=a.limitMovement(e,t,a.contentStartPos.width,a.contentStartPos.height)).scaleX=a.contentStartPos.scaleX,o.scaleY=a.contentStartPos.scaleY,a.contentLastPos=o,a.requestId&&(r(a.requestId),a.requestId=null),a.requestId=i(function(){n.fancybox.setTranslate(a.$content,a.contentLastPos)})},u.prototype.limitMovement=function(e,t,n,i){var r,o,a,s,l=this.canvasWidth,c=this.canvasHeight,u=this.contentStartPos.left,d=this.contentStartPos.top,f=this.distanceX,p=this.distanceY;return r=Math.max(0,.5*l-.5*n),o=Math.max(0,.5*c-.5*i),a=Math.min(l-n,.5*l-.5*n),s=Math.min(c-i,.5*c-.5*i),n>l&&(f>0&&e>r&&(e=r-1+Math.pow(-r+u+f,.8)||0),f<0&&e<a&&(e=a+1-Math.pow(a-u-f,.8)||0)),i>c&&(p>0&&t>o&&(t=o-1+Math.pow(-o+d+p,.8)||0),p<0&&t<s&&(t=s+1-Math.pow(s-d-p,.8)||0)),{top:t,left:e}},u.prototype.limitPosition=function(e,t,n,i){var r=this.canvasWidth,o=this.canvasHeight;return e=n>r?(e=e>0?0:e)<r-n?r-n:e:Math.max(0,r/2-n/2),{top:t=i>o?(t=t>0?0:t)<o-i?o-i:t:Math.max(0,o/2-i/2),left:e}},u.prototype.onZoom=function(){var t=this,o=t.contentStartPos.width,s=t.contentStartPos.height,l=t.contentStartPos.left,c=t.contentStartPos.top,u=a(t.newPoints[0],t.newPoints[1])/t.startDistanceBetweenFingers,d=Math.floor(o*u),f=Math.floor(s*u),p=(o-d)*t.percentageOfImageAtPinchPointX,h=(s-f)*t.percentageOfImageAtPinchPointY,g=(t.newPoints[0].x+t.newPoints[1].x)/2-n(e).scrollLeft(),m=(t.newPoints[0].y+t.newPoints[1].y)/2-n(e).scrollTop(),v=g-t.centerPointStartX,y={top:c+(h+(m-t.centerPointStartY)),left:l+(p+v),scaleX:t.contentStartPos.scaleX*u,scaleY:t.contentStartPos.scaleY*u};t.canTap=!1,t.newWidth=d,t.newHeight=f,t.contentLastPos=y,t.requestId&&(r(t.requestId),t.requestId=null),t.requestId=i(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})},u.prototype.ontouchend=function(e){var i=Math.max((new Date).getTime()-this.startTime,1),a=this.isSwiping,s=this.isPanning,l=this.isZooming;if(this.endPoints=o(e),this.$container.removeClass("fancybox-controls--isGrabbing"),n(t).off(".fb.touch"),this.requestId&&(r(this.requestId),this.requestId=null),this.isSwiping=!1,this.isPanning=!1,this.isZooming=!1,this.canTap)return this.onTap(e);this.speed=366,this.velocityX=this.distanceX/i*.5,this.velocityY=this.distanceY/i*.5,this.speedX=Math.max(.5*this.speed,Math.min(1.5*this.speed,1/Math.abs(this.velocityX)*this.speed)),s?this.endPanning():l?this.endZooming():this.endSwiping(a)},u.prototype.endSwiping=function(e){var t=!1;this.instance.isSliding=!1,this.sliderLastPos=null,"y"==e&&Math.abs(this.distanceY)>50?(n.fancybox.animate(this.instance.current.$slide,{top:this.sliderStartPos.top+this.distanceY+150*this.velocityY,opacity:0},150),t=this.instance.close(!0,300)):"x"==e&&this.distanceX>50&&this.instance.group.length>1?t=this.instance.previous(this.speedX):"x"==e&&this.distanceX<-50&&this.instance.group.length>1&&(t=this.instance.next(this.speedX)),!1!==t||"x"!=e&&"y"!=e||this.instance.jumpTo(this.instance.current.index,150),this.$container.removeClass("fancybox-is-sliding")},u.prototype.endPanning=function(){var e,t,i;this.contentLastPos&&(!1===this.opts.momentum?(e=this.contentLastPos.left,t=this.contentLastPos.top):(e=this.contentLastPos.left+this.velocityX*this.speed,t=this.contentLastPos.top+this.velocityY*this.speed),(i=this.limitPosition(e,t,this.contentStartPos.width,this.contentStartPos.height)).width=this.contentStartPos.width,i.height=this.contentStartPos.height,n.fancybox.animate(this.$content,i,330))},u.prototype.endZooming=function(){var e,t,i,r,o=this.instance.current,a=this.newWidth,s=this.newHeight;this.contentLastPos&&(e=this.contentLastPos.left,r={top:t=this.contentLastPos.top,left:e,width:a,height:s,scaleX:1,scaleY:1},n.fancybox.setTranslate(this.$content,r),a<this.canvasWidth&&s<this.canvasHeight?this.instance.scaleToFit(150):a>o.width||s>o.height?this.instance.scaleToActual(this.centerPointStartX,this.centerPointStartY,150):(i=this.limitPosition(e,t,a,s),n.fancybox.setTranslate(this.content,n.fancybox.getTranslate(this.$content)),n.fancybox.animate(this.$content,i,150)))},u.prototype.onTap=function(e){var t,i=this,r=n(e.target),a=i.instance,s=a.current,l=e&&o(e)||i.startPoints,c=l[0]?l[0].x-i.$stage.offset().left:0,u=l[0]?l[0].y-i.$stage.offset().top:0,d=function(t){var r=s.opts[t];if(n.isFunction(r)&&(r=r.apply(a,[s,e])),r)switch(r){case"close":a.close(i.startEvent);break;case"toggleControls":a.toggleControls(!0);break;case"next":a.next();break;case"nextOrClose":a.group.length>1?a.next():a.close(i.startEvent);break;case"zoom":"image"==s.type&&(s.isLoaded||s.$ghost)&&(a.canPan()?a.scaleToFit():a.isScaledDown()?a.scaleToActual(c,u):a.group.length<2&&a.close(i.startEvent))}};if(!(e.originalEvent&&2==e.originalEvent.button||a.isSliding||c>r[0].clientWidth+r.offset().left)){if(r.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(r.is(".fancybox-slide"))t="Slide";else{if(!a.current.$content||!a.current.$content.has(e.target).length)return;t="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,Math.abs(c-i.tapX)>50||Math.abs(u-i.tapY)>50||a.isSliding)return this;d("dblclick"+t)}else i.tapX=c,i.tapY=u,s.opts["dblclick"+t]&&s.opts["dblclick"+t]!==s.opts["click"+t]?i.tapped=setTimeout(function(){i.tapped=null,d("click"+t)},300):d("click"+t);return this}},n(t).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new u(t))}),n(t).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,window.jQuery||jQuery),function(e,t){"use strict";t.extend(!0,t.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg viewBox="0 0 40 40"><path d="M13,12 L27,20 L13,27 Z" /><path d="M15,10 v19 M23,10 v19" /></svg></button>'},slideShow:{autoStart:!1,speed:3e3}});var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this;e.$button=e.instance.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),(e.instance.group.length<2||!e.instance.group[e.instance.currIndex].opts.slideShow)&&e.$button.hide()},set:function(e){var t=this;t.instance&&t.instance.current&&(!0===e||t.instance.current.opts.loop||t.instance.currIndex<t.instance.group.length-1)?t.timer=setTimeout(function(){t.isActive&&t.instance.jumpTo((t.instance.currIndex+1)%t.instance.group.length)},t.instance.current.opts.slideShow.speed):(t.stop(),t.instance.idleSecondsCounter=0,t.instance.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null},start:function(){var e=this.instance.current;e&&(this.isActive=!0,this.$button.attr("title",e.opts.i18n[e.opts.lang].PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),this.set(!0))},stop:function(){var e=this.instance.current;this.clear(),this.$button.attr("title",e.opts.i18n[e.opts.lang].PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),this.isActive=!1},toggle:function(){this.isActive?this.stop():this.start()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,i){var r=t&&t.SlideShow;i?r&&n.opts.slideShow.autoStart&&r.start():r&&r.isActive&&r.clear()},"afterShow.fb":function(e,t,n){var i=t&&t.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(n,i,r,o,a){var s=i&&i.SlideShow;!s||!r.opts.slideShow||80!==a&&32!==a||t(e.activeElement).is("button,a,input")||(o.preventDefault(),s.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),t(e).on("visibilitychange",function(){var n=t.fancybox.getInstance(),i=n&&n.SlideShow;i&&i.isActive&&(e.hidden?i.clear():i.set())})}(document,window.jQuery||jQuery),function(e,t){"use strict";var n=function(){var t,n,i,r=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],o={};for(n=0;n<r.length;n++)if((t=r[n])&&t[1]in e){for(i=0;i<t.length;i++)o[r[0][i]]=t[i];return o}return!1}();if(n){var i={request:function(t){(t=t||e.documentElement)[n.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){e[n.exitFullscreen]()},toggle:function(t){t=t||e.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(e[n.fullscreenElement])},enabled:function(){return Boolean(e[n.fullscreenEnabled])}};t.extend(!0,t.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}"><svg viewBox="0 0 40 40"><path d="M9,12 h22 v16 h-22 v-16 v16 h22 v-16 Z" /></svg></button>'},fullScreen:{autoStart:!1}}),t(e).on({"onInit.fb":function(e,t){var n;t&&t.group[t.currIndex].opts.fullScreen?((n=t.$refs.container).on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle(n[0])}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(n[0]),t.FullScreen=i):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide()},"afterKeydown.fb":function(e,t,n,i,r){t&&t.FullScreen&&70===r&&(i.preventDefault(),t.FullScreen.toggle(t.$refs.container[0]))},"beforeClose.fb":function(e){e&&e.FullScreen&&i.exit()}}),t(e).on(n.fullscreenchange,function(){var e=i.isFullscreen(),n=t.fancybox.getInstance();n&&(n.current&&"image"===n.current.type&&n.isAnimating&&(n.current.$content.css("transition","none"),n.isAnimating=!1,n.update(!0,!0,0)),n.trigger("onFullscreenChange",e),n.$refs.container.toggleClass("fancybox-is-fullscreen",e))})}else t&&t.fancybox&&(t.fancybox.defaults.btnTpl.fullScreen=!1)}(document,window.jQuery||jQuery),function(e,t){"use strict";t.fancybox.defaults=t.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg viewBox="0 0 120 120"><path d="M30,30 h14 v14 h-14 Z M50,30 h14 v14 h-14 Z M70,30 h14 v14 h-14 Z M30,50 h14 v14 h-14 Z M50,50 h14 v14 h-14 Z M70,50 h14 v14 h-14 Z M30,70 h14 v14 h-14 Z M50,70 h14 v14 h-14 Z M70,70 h14 v14 h-14 Z" /></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},t.fancybox.defaults);var n=function(e){this.init(e)};t.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this;t.instance=e,e.Thumbs=t;var n=e.group[0],i=e.group[1];t.opts=e.group[e.currIndex].opts.thumbs,t.$button=e.$refs.toolbar.find("[data-fancybox-thumbs]"),t.opts&&n&&i&&("image"==n.type||n.opts.thumb||n.opts.$thumb)&&("image"==i.type||i.opts.thumb||i.opts.$thumb)?(t.$button.show().on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var e,n,i=this.instance,r=this.opts.parentEl;this.$grid=t('<div class="fancybox-thumbs fancybox-thumbs-'+this.opts.axis+'"></div>').appendTo(i.$refs.container.find(r).addBack().filter(r)),e="<ul>",t.each(i.group,function(t,i){(n=i.opts.thumb||(i.opts.$thumb?i.opts.$thumb.attr("src"):null))||"image"!==i.type||(n=i.src),n&&n.length&&(e+='<li data-index="'+t+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+n+'" /></li>')}),e+="</ul>",this.$list=t(e).appendTo(this.$grid).on("click","li",function(){i.jumpTo(t(this).data("index"))}),this.$list.find("img").hide().one("load",function(){var e,n,i,r,o=t(this).parent().removeClass("fancybox-thumbs-loading"),a=o.outerWidth(),s=o.outerHeight();e=this.naturalWidth||this.width,r=(n=this.naturalHeight||this.height)/s,(i=e/a)>=1&&r>=1&&(i>r?(e/=r,n=s):(e=a,n/=i)),t(this).css({width:Math.floor(e),height:Math.floor(n),"margin-top":n>s?Math.floor(.3*s-.3*n):Math.floor(.5*s-.5*n),"margin-left":Math.floor(.5*a-.5*e)}).show()}).each(function(){this.src=t(this).data("src")}),"x"===this.opts.axis&&this.$list.width(parseInt(this.$grid.css("padding-right"))+i.group.length*this.$list.children().eq(0).outerWidth(!0)+"px")},focus:function(e){var t,n,i=this.$list;this.instance.current&&(n=(t=i.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active")).position(),"y"===this.opts.axis&&(n.top<0||n.top>i.height()-t.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},e):"x"===this.opts.axis&&(n.left<i.parent().scrollLeft()||n.left>i.parent().scrollLeft()+(i.parent().width()-t.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},e))},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus(0)):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),t(e).on({"onInit.fb":function(e,t){var i;t&&!t.Thumbs&&(i=new n(t)).isActive&&!0===i.opts.autoStart&&i.show()},"beforeShow.fb":function(e,t,n,i){var r=t&&t.Thumbs;r&&r.isVisible&&r.focus(i?0:250)},"afterKeydown.fb":function(e,t,n,i,r){var o=t&&t.Thumbs;o&&o.isActive&&71===r&&(i.preventDefault(),o.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,window.jQuery),function(e,t){"use strict";t.extend(!0,t.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg viewBox="0 0 40 40"><path d="M6,30 C8,18 19,16 23,16 L23,16 L23,10 L33,20 L23,29 L23,24 C19,24 8,27 6,30 Z"></svg></button>'},share:{tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a href="https://www.facebook.com/sharer/sharer.php?u={{src}}" target="_blank" class="fancybox-share_button"><svg version="1.1" viewBox="0 0 32 32" fill="#3b5998"><path d="M27.6 3h-23.2c-.8 0-1.4.6-1.4 1.4v23.1c0 .9.6 1.5 1.4 1.5h12.5v-10.1h-3.4v-3.9h3.4v-2.9c0-3.4 2.1-5.2 5-5.2 1.4 0 2.7.1 3 .2v3.5h-2.1c-1.6 0-1.9.8-1.9 1.9v2.5h3.9l-.5 3.9h-3.4v10.1h6.6c.8 0 1.4-.6 1.4-1.4v-23.2c.1-.8-.5-1.4-1.3-1.4z"></path></svg><span>Facebook</span></a><a href="https://www.pinterest.com/pin/create/button/?url={{src}}&amp;description={{descr}}" target="_blank" class="fancybox-share_button"><svg version="1.1" viewBox="0 0 32 32" fill="#c92228"><path d="M16 3c-7.2 0-13 5.8-13 13 0 5.5 3.4 10.2 8.3 12.1-.1-1-.2-2.6 0-3.7.2-1 1.5-6.5 1.5-6.5s-.4-.8-.4-1.9c0-1.8 1-3.2 2.4-3.2 1.1 0 1.6.8 1.6 1.8 0 1.1-.7 2.8-1.1 4.3-.3 1.3.6 2.3 1.9 2.3 2.3 0 4.1-2.4 4.1-6 0-3.1-2.2-5.3-5.4-5.3-3.7 0-5.9 2.8-5.9 5.6 0 1.1.4 2.3 1 3 .1.1.1.2.1.4-.1.4-.3 1.3-.4 1.5-.1.2-.2.3-.4.2-1.6-.8-2.6-3.1-2.6-5 0-4.1 3-7.9 8.6-7.9 4.5 0 8 3.2 8 7.5 0 4.5-2.8 8.1-6.7 8.1-1.3 0-2.6-.7-3-1.5 0 0-.7 2.5-.8 3.1-.3 1.1-1.1 2.5-1.6 3.4 1.2.4 2.5.6 3.8.6 7.2 0 13-5.8 13-13 0-7.1-5.8-12.9-13-12.9z"></path></svg><span>Pinterest</span></a><a href="https://twitter.com/intent/tweet?url={{src}}&amp;text={{descr}}" target="_blank" class="fancybox-share_button"><svg version="1.1" viewBox="0 0 32 32" fill="#1da1f2"><path d="M30 7.3c-1 .5-2.1.8-3.3.9 1.2-.7 2.1-1.8 2.5-3.2-1.1.7-2.3 1.1-3.6 1.4-1-1.1-2.5-1.8-4.2-1.8-3.2 0-5.7 2.6-5.7 5.7 0 .5.1.9.1 1.3-4.8-.2-9-2.5-11.8-6-.5.9-.8 1.9-.8 3 0 2 1 3.8 2.6 4.8-.9 0-1.8-.3-2.6-.7v.1c0 2.8 2 5.1 4.6 5.6-.5.1-1 .2-1.5.2-.4 0-.7 0-1.1-.1.7 2.3 2.9 3.9 5.4 4-2 1.5-4.4 2.5-7.1 2.5-.5 0-.9 0-1.4-.1 2.5 1.6 5.6 2.6 8.8 2.6 10.6 0 16.3-8.8 16.3-16.3v-.7c1.1-1 2-2 2.8-3.2z"></path></svg><span>Twitter</span></a></p><p><input type="text" value="{{src_raw}}" onfocus="this.select()" /></p></div>'}});t(e).on("click","[data-fancybox-share]",function(){var e,n,i=t.fancybox.getInstance();i&&(e=!1===i.current.opts.hash?i.current.src:window.location,n=i.current.opts.share.tpl.replace(/\{\{src\}\}/g,encodeURIComponent(e)).replace(/\{\{src_raw\}\}/g,function(e){var t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(e).replace(/[&<>"'`=\/]/g,function(e){return t[e]})}(e)).replace(/\{\{descr\}\}/g,i.$caption?encodeURIComponent(i.$caption.text()):""),t.fancybox.open({src:i.translate(i,n),type:"html",opts:{animationEffect:"fade",animationDuration:250}}))})}(document,window.jQuery||jQuery),function(e,t,n){"use strict";n.escapeSelector||(n.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})});var i=!0,r=null,o=null;function a(){var e=t.location.hash.substr(1),n=e.split("-"),i=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,r=n.join("-");return i<1&&(i=1),{hash:e,index:i,gallery:r}}function s(e){var t;""!==e.gallery&&((t=n("[data-fancybox='"+n.escapeSelector(e.gallery)+"']").eq(e.index-1)).length||(t=n("#"+n.escapeSelector(e.gallery))),t.length&&(i=!1,t.trigger("click")))}function l(e){var t;return!!e&&((t=e.current?e.current.opts:e.opts).hash||(t.$orig?t.$orig.data("fancybox"):""))}n(function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function(e,t){var n,i;!1!==t.group[t.currIndex].opts.hash&&(n=a(),(i=l(t))&&n.gallery&&i==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(n,a,s){var c;s&&!1!==s.opts.hash&&(c=l(a))&&""!==c&&(t.location.hash.indexOf(c)<0&&(a.opts.origHash=t.location.hash),r=c+(a.group.length>1?"-"+(s.index+1):""),"replaceState"in t.history?(o&&clearTimeout(o),o=setTimeout(function(){t.history[i?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+r),o=null,i=!1},300)):t.location.hash=r)},"beforeClose.fb":function(i,a,s){var c,u;o&&clearTimeout(o),!1!==s.opts.hash&&(c=l(a),u=a&&a.opts.origHash?a.opts.origHash:"",c&&""!==c&&("replaceState"in history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+u):(t.location.hash=u,n(t).scrollTop(a.scrollTop).scrollLeft(a.scrollLeft))),r=null)}}),n(t).on("hashchange.fb",function(){var e=a();n.fancybox.getInstance()?!r||r===e.gallery+"-"+e.index||1===e.index&&r==e.gallery||(r=null,n.fancybox.close()):""!==e.gallery&&s(e)}),setTimeout(function(){s(a())},50))})}(document,window,window.jQuery||jQuery),function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=3)}([function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,r=[n(2)],void 0!==(o="function"==typeof(i=function(e){return e})?i.apply(t,r):i)&&(e.exports=o)},function(e,t,n){"use strict";var i,r,o,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};r=[n(0),n(10),n(11)],void 0!==(o="function"==typeof(i=function(e,t,n,i){function r(t,n,a){if(!(this instanceof r))return new r(t,n,a);this.el=i,this.events={},this.maskset=i,this.refreshValue=!1,!0!==a&&(e.isPlainObject(t)?n=t:(n=n||{}).alias=t,this.opts=e.extend(!0,{},this.defaults,n),this.noMasksCache=n&&n.definitions!==i,this.userOptions=n||{},this.isRTL=this.opts.numericInput,o(this.opts.alias,n,this.opts))}function o(t,n,a){var s=r.prototype.aliases[t];return s?(s.alias&&o(s.alias,i,a),e.extend(!0,a,s),e.extend(!0,a,n),!0):(null===a.mask&&(a.mask=t),!1)}function s(t,n){function o(t,o,a){var s=!1;if(null!==t&&""!==t||((s=null!==a.regex)?t=(t=a.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(s=!0,t=".*")),1===t.length&&!1===a.greedy&&0!==a.repeat&&(a.placeholder=""),a.repeat>0||"*"===a.repeat||"+"===a.repeat){var l="*"===a.repeat?0:"+"===a.repeat?1:a.repeat;t=a.groupmarker.start+t+a.groupmarker.end+a.quantifiermarker.start+l+","+a.repeat+a.quantifiermarker.end}var c,u=s?"regex_"+a.regex:a.numericInput?t.split("").reverse().join(""):t;return r.prototype.masksCache[u]===i||!0===n?(c={mask:t,maskToken:r.prototype.analyseMask(t,s,a),validPositions:{},_buffer:i,buffer:i,tests:{},metadata:o,maskLength:i},!0!==n&&(r.prototype.masksCache[u]=c,c=e.extend(!0,{},r.prototype.masksCache[u]))):c=e.extend(!0,{},r.prototype.masksCache[u]),c}if(e.isFunction(t.mask)&&(t.mask=t.mask(t)),e.isArray(t.mask)){if(t.mask.length>1){t.keepStatic=null===t.keepStatic||t.keepStatic;var a=t.groupmarker.start;return e.each(t.numericInput?t.mask.reverse():t.mask,function(n,r){a.length>1&&(a+=t.groupmarker.end+t.alternatormarker+t.groupmarker.start),r.mask===i||e.isFunction(r.mask)?a+=r:a+=r.mask}),o(a+=t.groupmarker.end,t.mask,t)}t.mask=t.mask.pop()}return t.mask&&t.mask.mask!==i&&!e.isFunction(t.mask.mask)?o(t.mask.mask,t.mask,t):o(t.mask,t.mask,t)}function l(o,s,c){function h(e,t,n){t=t||0;var r,o,a,s=[],l=0,u=v();do{!0===e&&g().validPositions[l]?(o=(a=g().validPositions[l]).match,r=a.locator.slice(),s.push(!0===n?a.input:!1===n?o.nativeDef:N(l,o))):(o=(a=x(l,r,l-1)).match,r=a.locator.slice(),(!1===c.jitMasking||l<u||"number"==typeof c.jitMasking&&isFinite(c.jitMasking)&&c.jitMasking>l)&&s.push(!1===n?o.nativeDef:N(l,o))),l++}while((z===i||l<z)&&(null!==o.fn||""!==o.def)||t>l);return""===s[s.length-1]&&s.pop(),g().maskLength=l+1,s}function g(){return s}function m(e){var t=g();t.buffer=i,!0!==e&&(t.validPositions={},t.p=0)}function v(e,t,n){var r=-1,o=-1,a=n||g().validPositions;e===i&&(e=-1);for(var s in a){var l=parseInt(s);a[l]&&(t||!0!==a[l].generatedInput)&&(l<=e&&(r=l),l>=e&&(o=l))}return-1!==r&&e-r>1||o<e?r:o}function y(t,n,r,o){var a,s=t,l=e.extend(!0,{},g().validPositions),u=!1;for(g().p=t,a=n-1;a>=s;a--)g().validPositions[a]!==i&&(!0!==r&&(!g().validPositions[a].match.optionality&&function(e){var t=g().validPositions[e];if(t!==i&&null===t.match.fn){var n=g().validPositions[e-1],r=g().validPositions[e+1];return n!==i&&r!==i}return!1}(a)||!1===c.canClearPosition(g(),a,v(),o,c))||delete g().validPositions[a]);for(m(!0),a=s+1;a<=v();){for(;g().validPositions[s]!==i;)s++;if(a<s&&(a=s+1),g().validPositions[a]===i&&M(a))a++;else{var d=x(a);!1===u&&l[s]&&l[s].match.def===d.match.def?(g().validPositions[s]=e.extend(!0,{},l[s]),g().validPositions[s].input=d.input,delete g().validPositions[a],a++):k(s,d.match.def)?!1!==D(s,d.input||N(a),!0)&&(delete g().validPositions[a],a++,u=!0):M(a)||(a++,s--),s++}}m(!0)}function b(e,t){for(var n,r=e,o=v(),a=g().validPositions[o]||C(0)[0],s=a.alternation!==i?a.locator[a.alternation].toString().split(","):[],l=0;l<r.length&&(!((n=r[l]).match&&(c.greedy&&!0!==n.match.optionalQuantifier||(!1===n.match.optionality||!1===n.match.newBlockMarker)&&!0!==n.match.optionalQuantifier)&&(a.alternation===i||a.alternation!==n.alternation||n.locator[a.alternation]!==i&&P(n.locator[a.alternation].toString().split(","),s)))||!0===t&&(null!==n.match.fn||/[0-9a-bA-Z]/.test(n.match.def)));l++);return n}function x(e,t,n){return g().validPositions[e]||b(C(e,t?t.slice():t,n))}function w(e){return g().validPositions[e]?g().validPositions[e]:C(e)[0]}function k(e,t){for(var n=!1,i=C(e),r=0;r<i.length;r++)if(i[r].match&&i[r].match.def===t){n=!0;break}return n}function C(t,n,r){function o(n,r,a,l){function d(a,l,m){function v(t,n){var i=0===e.inArray(t,n.matches);return i||e.each(n.matches,function(e,r){if(!0===r.isQuantifier&&(i=v(t,n.matches[e-1])))return!1}),i}function y(t,n,r){var o,a;if(g().validPositions[t-1]&&r&&g().tests[t])for(var s=g().validPositions[t-1].locator,l=g().tests[t][0].locator,c=0;c<r;c++)if(s[c]!==l[c])return s.slice(r+1);return(g().tests[t]||g().validPositions[t])&&e.each(g().tests[t]||[g().validPositions[t]],function(e,t){var s=r!==i?r:t.alternation,l=t.locator[s]!==i?t.locator[s].toString().indexOf(n):-1;(a===i||l<a)&&-1!==l&&(o=t,a=l)}),o?o.locator.slice((r!==i?r:o.alternation)+1):r!==i?y(t,n):i}if(u>1e4)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+g().mask;if(u===t&&a.matches===i)return f.push({match:a,locator:l.reverse(),cd:h}),!0;if(a.matches!==i){if(a.isGroup&&m!==a){if(a=d(n.matches[e.inArray(a,n.matches)+1],l))return!0}else if(a.isOptional){var b=a;if(a=o(a,r,l,m)){if(!v(s=f[f.length-1].match,b))return!0;p=!0,u=t}}else if(a.isAlternator){var x,w=a,k=[],C=f.slice(),S=l.length,E=r.length>0?r.shift():-1;if(-1===E||"string"==typeof E){var T,P=u,D=r.slice(),M=[];if("string"==typeof E)M=E.split(",");else for(T=0;T<w.matches.length;T++)M.push(T);for(var A=0;A<M.length;A++){if(T=parseInt(M[A]),f=[],r=y(u,T,S)||D.slice(),!0!==(a=d(w.matches[T]||n.matches[T],[T].concat(l),m)||a)&&a!==i&&M[M.length-1]<w.matches.length){var O=e.inArray(a,n.matches)+1;n.matches.length>O&&(a=d(n.matches[O],[O].concat(l.slice(1,l.length)),m))&&(M.push(O.toString()),e.each(f,function(e,t){t.alternation=l.length-1}))}x=f.slice(),u=P,f=[];for(var L=0;L<x.length;L++){var N=x[L],I=!1;N.alternation=N.alternation||S;for(var j=0;j<k.length;j++){var F=k[j];if("string"!=typeof E||-1!==e.inArray(N.locator[N.alternation].toString(),M)){if(z=F,(Y=N).match.nativeDef===z.match.nativeDef||Y.match.def===z.match.nativeDef||Y.match.nativeDef===z.match.def){I=!0,N.alternation===F.alternation&&-1===F.locator[F.alternation].toString().indexOf(N.locator[N.alternation])&&(F.locator[F.alternation]=F.locator[F.alternation]+","+N.locator[N.alternation],F.alternation=N.alternation),N.match.nativeDef===F.match.def&&(N.locator[N.alternation]=F.locator[F.alternation],k.splice(k.indexOf(F),1,N));break}if(N.match.def===F.match.def){I=!1;break}if(W=F,null===(q=N).match.fn&&null!==W.match.fn&&W.match.fn.test(q.match.def,g(),t,!1,c,!1)||(H=N,B=F,null!==H.match.fn&&null!==B.match.fn&&B.match.fn.test(H.match.def.replace(/[\[\]]/g,""),g(),t,!1,c,!1))){N.alternation===F.alternation&&-1===N.locator[N.alternation].toString().indexOf(F.locator[F.alternation].toString().split("")[0])&&(N.na=N.na||N.locator[N.alternation].toString(),-1===N.na.indexOf(N.locator[N.alternation].toString().split("")[0])&&(N.na=N.na+","+N.locator[F.alternation].toString().split("")[0]),I=!0,N.locator[N.alternation]=F.locator[F.alternation].toString().split("")[0]+","+N.locator[N.alternation],k.splice(k.indexOf(F),0,N));break}}}I||k.push(N)}}"string"==typeof E&&(k=e.map(k,function(t,n){if(isFinite(n)){var r=t.alternation,o=t.locator[r].toString().split(",");t.locator[r]=i,t.alternation=i;for(var a=0;a<o.length;a++)-1!==e.inArray(o[a],M)&&(t.locator[r]!==i?(t.locator[r]+=",",t.locator[r]+=o[a]):t.locator[r]=parseInt(o[a]),t.alternation=r);if(t.locator[r]!==i)return t}})),f=C.concat(k),u=t,p=f.length>0,a=k.length>0,r=D.slice()}else a=d(w.matches[E]||n.matches[E],[E].concat(l),m);if(a)return!0}else if(a.isQuantifier&&m!==n.matches[e.inArray(a,n.matches)-1])for(var R=a,$=r.length>0?r.shift():0;$<(isNaN(R.quantifier.max)?$+1:R.quantifier.max)&&u<=t;$++){var _=n.matches[e.inArray(R,n.matches)-1];if(a=d(_,[$].concat(l),_)){if((s=f[f.length-1].match).optionalQuantifier=$>R.quantifier.min-1,v(s,_)){if($>R.quantifier.min-1){p=!0,u=t;break}return!0}return!0}}else if(a=o(a,r,l,m))return!0}else u++;var H,B,q,W,Y,z}for(var m=r.length>0?r.shift():0;m<n.matches.length;m++)if(!0!==n.matches[m].isQuantifier){var v=d(n.matches[m],[m].concat(a),l);if(v&&u===t)return v;if(u>t)break}}function a(e){if(c.keepStatic&&t>0&&e.length>1+(""===e[e.length-1].match.def?1:0)&&!0!==e[0].match.optionality&&!0!==e[0].match.optionalQuantifier&&null===e[0].match.fn&&!/[0-9a-bA-Z]/.test(e[0].match.def)){if(g().validPositions[t-1]===i)return[b(e)];if(g().validPositions[t-1].alternation===e[0].alternation)return[b(e)];if(g().validPositions[t-1])return[b(e)]}return e}var s,l=g().maskToken,u=n?r:0,d=n?n.slice():[0],f=[],p=!1,h=n?n.join(""):"";if(t>-1){if(n===i){for(var m,v=t-1;(m=g().validPositions[v]||g().tests[v])===i&&v>-1;)v--;m!==i&&v>-1&&(d=function(t){var n=[];return e.isArray(t)||(t=[t]),t.length>0&&(t[0].alternation===i?0===(n=b(t.slice()).locator.slice()).length&&(n=t[0].locator.slice()):e.each(t,function(e,t){if(""!==t.def)if(0===n.length)n=t.locator.slice();else for(var i=0;i<n.length;i++)t.locator[i]&&-1===n[i].toString().indexOf(t.locator[i])&&(n[i]+=","+t.locator[i])})),n}(m),h=d.join(""),u=v)}if(g().tests[t]&&g().tests[t][0].cd===h)return a(g().tests[t]);for(var y=d.shift();y<l.length&&!(o(l[y],d,[y])&&u===t||u>t);y++);}return(0===f.length||p)&&f.push({match:{fn:null,cardinality:0,optionality:!0,casing:null,def:"",placeholder:""},locator:[],cd:h}),n!==i&&g().tests[t]?a(e.extend(!0,[],f)):(g().tests[t]=e.extend(!0,[],f),a(g().tests[t]))}function S(){return g()._buffer===i&&(g()._buffer=h(!1,1),g().buffer===i&&(g().buffer=g()._buffer.slice())),g()._buffer}function E(e){return g().buffer!==i&&!0!==e||(g().buffer=h(!0,v(),!0)),g().buffer}function T(e,t,n){var r,o;if(!0===e)m(),e=0,t=n.length;else for(r=e;r<t;r++)delete g().validPositions[r];for(o=e,r=e;r<t;r++)if(m(!0),n[r]!==c.skipOptionalPartCharacter){var a=D(o,n[r],!0,!0);!1!==a&&(m(!0),o=a.caret!==i?a.caret:a.pos+1)}}function P(t,n,r){for(var o,a=c.greedy?n:n.slice(0,1),s=!1,l=r!==i?r.split(","):[],u=0;u<l.length;u++)-1!==(o=t.indexOf(l[u]))&&t.splice(o,1);for(var d=0;d<t.length;d++)if(-1!==e.inArray(t[d],a)){s=!0;break}return s}function D(t,n,o,a,s,l){function u(e){var t=V?e.begin-e.end>1||e.begin-e.end==1:e.end-e.begin>1||e.end-e.begin==1;return t&&0===e.begin&&e.end===g().maskLength?"full":t}function d(n,o,s){var l=!1;return e.each(C(n),function(d,p){for(var h=p.match,b=o?1:0,x="",w=h.cardinality;w>b;w--)x+=(k=n-(w-1),g().validPositions[k]===i?N(k):g().validPositions[k].input);var k;if(o&&(x+=o),E(!0),!1!==(l=null!=h.fn?h.fn.test(x,g(),n,s,c,u(t)):(o===h.def||o===c.skipOptionalPartCharacter)&&""!==h.def&&{c:N(n,h,!0)||h.def,pos:n})){var C=l.c!==i?l.c:o;C=C===c.skipOptionalPartCharacter&&null===h.fn?N(n,h,!0)||h.def:C;var S=n,P=E();if(l.remove!==i&&(e.isArray(l.remove)||(l.remove=[l.remove]),e.each(l.remove.sort(function(e,t){return t-e}),function(e,t){y(t,t+1,!0)})),l.insert!==i&&(e.isArray(l.insert)||(l.insert=[l.insert]),e.each(l.insert.sort(function(e,t){return e-t}),function(e,t){D(t.pos,t.c,!0,a)})),l.refreshFromBuffer){var M=l.refreshFromBuffer;if(T(!0===M?M:M.start,M.end,P),l.pos===i&&l.c===i)return l.pos=v(),!1;if((S=l.pos!==i?l.pos:n)!==n)return l=e.extend(l,D(S,C,!0,a)),!1}else if(!0!==l&&l.pos!==i&&l.pos!==n&&(S=l.pos,T(n,S,E().slice()),S!==n))return l=e.extend(l,D(S,C,!0)),!1;return(!0===l||l.pos!==i||l.c!==i)&&(d>0&&m(!0),f(S,e.extend({},p,{input:function(t,n,i){switch(c.casing||n.casing){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase();break;case"title":var o=g().validPositions[i-1];t=0===i||o&&o.input===String.fromCharCode(r.keyCode.SPACE)?t.toUpperCase():t.toLowerCase();break;default:if(e.isFunction(c.casing)){var a=Array.prototype.slice.call(arguments);a.push(g().validPositions),t=c.casing.apply(this,a)}}return t}(C,h,S)}),a,u(t))||(l=!1),!1)}}),l}function f(t,n,r,o){if(o||c.insertMode&&g().validPositions[t]!==i&&r===i){var a,s=e.extend(!0,{},g().validPositions),l=v(i,!0);for(a=t;a<=l;a++)delete g().validPositions[a];g().validPositions[t]=e.extend(!0,{},n);var u,d=!0,f=g().validPositions,h=!1,y=g().maskLength;for(a=u=t;a<=l;a++){var b=s[a];if(b!==i)for(var x=u;x<g().maskLength&&(null===b.match.fn&&f[a]&&(!0===f[a].match.optionalQuantifier||!0===f[a].match.optionality)||null!=b.match.fn);){if(x++,!1===h&&s[x]&&s[x].match.def===b.match.def)g().validPositions[x]=e.extend(!0,{},s[x]),g().validPositions[x].input=b.input,p(x),u=x,d=!0;else if(k(x,b.match.def)){var w=D(x,b.input,!0,!0);d=!1!==w,u=w.caret||w.insert?v():x,h=!0}else if(!(d=!0===b.generatedInput)&&x>=g().maskLength-1)break;if(g().maskLength<y&&(g().maskLength=y),d)break}if(!d)break}if(!d)return g().validPositions=e.extend(!0,{},s),m(!0),!1}else g().validPositions[t]=e.extend(!0,{},n);return m(!0),!0}function p(t){for(var n=t-1;n>-1&&!g().validPositions[n];n--);var r,o;for(n++;n<t;n++)g().validPositions[n]===i&&(!1===c.jitMasking||c.jitMasking>n)&&(""===(o=C(n,x(n-1).locator,n-1).slice())[o.length-1].match.def&&o.pop(),(r=b(o))&&(r.match.def===c.radixPointDefinitionSymbol||!M(n,!0)||e.inArray(c.radixPoint,E())<n&&r.match.fn&&r.match.fn.test(N(n),g(),n,!1,c))&&!1!==(w=d(n,N(n,r.match,!0)||(null==r.match.fn?r.match.def:""!==N(n)?N(n):E()[n]),!0))&&(g().validPositions[w.pos||n].generatedInput=!0))}o=!0===o;var h=t;t.begin!==i&&(h=V&&!u(t)?t.end:t.begin);var w=!0,S=e.extend(!0,{},g().validPositions);if(e.isFunction(c.preValidation)&&!o&&!0!==a&&!0!==l&&(w=c.preValidation(E(),h,n,u(t),c)),!0===w){if(p(h),u(t)&&(H(i,r.keyCode.DELETE,t,!0,!0),h=g().p),h<g().maskLength&&(z===i||h<z)&&(w=d(h,n,o),(!o||!0===a)&&!1===w&&!0!==l)){var O=g().validPositions[h];if(!O||null!==O.match.fn||O.match.def!==n&&n!==c.skipOptionalPartCharacter){if((c.insertMode||g().validPositions[A(h)]===i)&&!M(h,!0))for(var L=h+1,I=A(h);L<=I;L++)if(!1!==(w=d(L,n,o))){!function(t,n){var r=g().validPositions[n];if(r)for(var o=r.locator,a=o.length,s=t;s<n;s++)if(g().validPositions[s]===i&&!M(s,!0)){var l=C(s).slice(),c=b(l,!0),u=-1;""===l[l.length-1].match.def&&l.pop(),e.each(l,function(e,t){for(var n=0;n<a;n++){if(t.locator[n]===i||!P(t.locator[n].toString().split(","),o[n].toString().split(","),t.na)){var r=o[n],s=c.locator[n],l=t.locator[n];r-s>Math.abs(r-l)&&(c=t);break}u<n&&(u=n,c=t)}}),(c=e.extend({},c,{input:N(s,c.match,!0)||c.match.def})).generatedInput=!0,f(s,c,!0),g().validPositions[n]=i,d(n,r.input,!0)}}(h,w.pos!==i?w.pos:L),h=L;break}}else w={caret:A(h)}}!1===w&&c.keepStatic&&!o&&!0!==s&&(w=function(t,n,r){var o,s,l,u,d,f,p,h,y=e.extend(!0,{},g().validPositions),b=!1,x=v();for(u=g().validPositions[x];x>=0;x--)if((l=g().validPositions[x])&&l.alternation!==i){if(o=x,s=g().validPositions[o].alternation,u.locator[l.alternation]!==l.locator[l.alternation])break;u=l}if(s!==i){h=parseInt(o);var w=u.locator[u.alternation||s]!==i?u.locator[u.alternation||s]:p[0];w.length>0&&(w=w.split(",")[0]);var k=g().validPositions[h],S=g().validPositions[h-1];e.each(C(h,S?S.locator:i,h-1),function(o,l){p=l.locator[s]?l.locator[s].toString().split(","):[];for(var u=0;u<p.length;u++){var x=[],C=0,S=0,E=!1;if(w<p[u]&&(l.na===i||-1===e.inArray(p[u],l.na.split(","))||-1===e.inArray(w.toString(),p))){g().validPositions[h]=e.extend(!0,{},l);var T=g().validPositions[h].locator;for(g().validPositions[h].locator[s]=parseInt(p[u]),null==l.match.fn?(k.input!==l.match.def&&(E=!0,!0!==k.generatedInput&&x.push(k.input)),S++,g().validPositions[h].generatedInput=!/[0-9a-bA-Z]/.test(l.match.def),g().validPositions[h].input=l.match.def):g().validPositions[h].input=k.input,d=h+1;d<v(i,!0)+1;d++)(f=g().validPositions[d])&&!0!==f.generatedInput&&/[0-9a-bA-Z]/.test(f.input)?x.push(f.input):d<t&&C++,delete g().validPositions[d];for(E&&x[0]===l.match.def&&x.shift(),m(!0),b=!0;x.length>0;){var P=x.shift();if(P!==c.skipOptionalPartCharacter&&!(b=D(v(i,!0)+1,P,!1,a,!0)))break}if(b){g().validPositions[h].locator=T;var M=v(t)+1;for(d=h+1;d<v()+1;d++)((f=g().validPositions[d])===i||null==f.match.fn)&&d<t+(S-C)&&S++;b=D((t+=S-C)>M?M:t,n,r,a,!0)}if(b)return!1;m(),g().validPositions=e.extend(!0,{},y)}}})}return b}(h,n,o)),!0===w&&(w={pos:h})}if(e.isFunction(c.postValidation)&&!1!==w&&!o&&!0!==a&&!0!==l){var j=c.postValidation(E(!0),w,c);if(j.refreshFromBuffer&&j.buffer){var F=j.refreshFromBuffer;T(!0===F?F:F.start,F.end,j.buffer)}w=!0===j?w:j}return w&&w.pos===i&&(w.pos=h),!1!==w&&!0!==l||(m(!0),g().validPositions=e.extend(!0,{},S)),w}function M(e,t){var n=x(e).match;if(""===n.def&&(n=w(e).match),null!=n.fn)return n.fn;if(!0!==t&&e>-1){var i=C(e);return i.length>1+(""===i[i.length-1].match.def?1:0)}return!1}function A(e,t){var n=g().maskLength;if(e>=n)return n;var i=e;for(C(n+1).length>1&&(h(!0,n+1,!0),n=g().maskLength);++i<n&&(!0===t&&(!0!==w(i).match.newBlockMarker||!M(i))||!0!==t&&!M(i)););return i}function O(e,t){var n,i=e;if(i<=0)return 0;for(;--i>0&&(!0===t&&!0!==w(i).match.newBlockMarker||!0!==t&&!M(i)&&((n=C(i)).length<2||2===n.length&&""===n[1].match.def)););return i}function L(t,n,r,o,a){if(o&&e.isFunction(c.onBeforeWrite)){var s=c.onBeforeWrite.call(G,o,n,r,c);if(s){if(s.refreshFromBuffer){var l=s.refreshFromBuffer;T(!0===l?l:l.start,l.end,s.buffer||n),n=E(!0)}r!==i&&(r=s.caret!==i?s.caret:r)}}t!==i&&(t.inputmask._valueSet(n.join("")),r===i||o!==i&&"blur"===o.type?q(t,r,0===n.length):p&&o&&"input"===o.type?setTimeout(function(){F(t,r)},0):F(t,r),!0===a&&(Z=!0,e(t).trigger("input")))}function N(t,n,r){if((n=n||w(t).match).placeholder!==i||!0===r)return e.isFunction(n.placeholder)?n.placeholder(c):n.placeholder;if(null===n.fn){if(t>-1&&g().validPositions[t]===i){var o,a=C(t),s=[];if(a.length>1+(""===a[a.length-1].match.def?1:0))for(var l=0;l<a.length;l++)if(!0!==a[l].match.optionality&&!0!==a[l].match.optionalQuantifier&&(null===a[l].match.fn||o===i||!1!==a[l].match.fn.test(o.match.def,g(),t,!0,c))&&(s.push(a[l]),null===a[l].match.fn&&(o=a[l]),s.length>1&&/[0-9a-bA-Z]/.test(s[0].match.def)))return c.placeholder.charAt(t%c.placeholder.length)}return n.def}return c.placeholder.charAt(t%c.placeholder.length)}function I(t,o,a,s,l){var u=s.slice(),d="",f=-1,p=i;if(m(),a||!0===c.autoUnmask)f=A(f);else{var h=S().slice(0,A(-1)).join(""),y=u.join("").match(new RegExp("^"+r.escapeRegex(h),"g"));y&&y.length>0&&(u.splice(0,y.length*h.length),f=A(f))}if(-1===f?(g().p=A(f),f=0):g().p=f,e.each(u,function(n,r){if(r!==i)if(g().validPositions[n]===i&&u[n]===N(n)&&M(n,!0)&&!1===D(n,u[n],!0,i,i,!0))g().p++;else{var o=new e.Event("_checkval");o.which=r.charCodeAt(0),d+=r;var s=v(i,!0),l=g().validPositions[s],h=x(s+1,l?l.locator.slice():i,s);if(C=f,P=d,-1===S().slice(C,A(C)).join("").indexOf(P)||M(C)||w(C).match.nativeDef!==P.charAt(P.length-1)||a||c.autoUnmask){var y=a?n:null==h.match.fn&&h.match.optionality&&s+1<g().p?s+1:g().p;p=te.keypressEvent.call(t,o,!0,!1,a,y),f=y+1,d=""}else p=te.keypressEvent.call(t,o,!0,!1,!0,s+1);if(!1!==p&&!a&&e.isFunction(c.onBeforeWrite)){var b=p;if(p=c.onBeforeWrite.call(G,o,E(),p.forwardPosition,c),(p=e.extend(b,p))&&p.refreshFromBuffer){var k=p.refreshFromBuffer;T(!0===k?k:k.start,k.end,p.buffer),m(!0),p.caret&&(g().p=p.caret,p.forwardPosition=p.caret)}}}var C,P}),o){var b=i;n.activeElement===t&&p&&(b=c.numericInput?O(p.forwardPosition):p.forwardPosition),L(t,E(),b,l||new e.Event("checkval"),l&&"input"===l.type)}}function j(t){if(t){if(t.inputmask===i)return t.value;t.inputmask&&t.inputmask.refreshValue&&te.setValueEvent.call(t)}var n=[],r=g().validPositions;for(var o in r)r[o].match&&null!=r[o].match.fn&&n.push(r[o].input);var a=0===n.length?"":(V?n.reverse():n).join("");if(e.isFunction(c.onUnMask)){var s=(V?E().slice().reverse():E()).join("");a=c.onUnMask.call(G,s,a,c)}return a}function F(e,r,o,a){function s(e){return!0===a||!V||"number"!=typeof e||c.greedy&&""===c.placeholder||(e=E().join("").length-e),e}var l;if(r===i)return e.setSelectionRange?(r=e.selectionStart,o=e.selectionEnd):t.getSelection?(l=t.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==e&&l.commonAncestorContainer!==e||(r=l.startOffset,o=l.endOffset):n.selection&&n.selection.createRange&&(o=(r=0-(l=n.selection.createRange()).duplicate().moveStart("character",-e.inputmask._valueGet().length))+l.text.length),{begin:s(r),end:s(o)};if(r.begin!==i&&(o=r.end,r=r.begin),"number"==typeof r){r=s(r),o="number"==typeof(o=s(o))?o:r;var d=parseInt(((e.ownerDocument.defaultView||t).getComputedStyle?(e.ownerDocument.defaultView||t).getComputedStyle(e,null):e.currentStyle).fontSize)*o;if(e.scrollLeft=d>e.scrollWidth?d:0,u||!1!==c.insertMode||r!==o||o++,e.setSelectionRange)e.selectionStart=r,e.selectionEnd=o;else if(t.getSelection){if(l=n.createRange(),e.firstChild===i||null===e.firstChild){var f=n.createTextNode("");e.appendChild(f)}l.setStart(e.firstChild,r<e.inputmask._valueGet().length?r:e.inputmask._valueGet().length),l.setEnd(e.firstChild,o<e.inputmask._valueGet().length?o:e.inputmask._valueGet().length),l.collapse(!0);var p=t.getSelection();p.removeAllRanges(),p.addRange(l)}else e.createTextRange&&((l=e.createTextRange()).collapse(!0),l.moveEnd("character",o),l.moveStart("character",r),l.select());q(e,{begin:r,end:o})}}function R(t){var n,r,o=E(),a=o.length,s=v(),l={},c=g().validPositions[s],u=c!==i?c.locator.slice():i;for(n=s+1;n<o.length;n++)u=(r=x(n,u,n-1)).locator.slice(),l[n]=e.extend(!0,{},r);var d=c&&c.alternation!==i?c.locator[c.alternation]:i;for(n=a-1;n>s&&((r=l[n]).match.optionality||r.match.optionalQuantifier&&r.match.newBlockMarker||d&&(d!==l[n].locator[c.alternation]&&null!=r.match.fn||null===r.match.fn&&r.locator[c.alternation]&&P(r.locator[c.alternation].toString().split(","),d.toString().split(","))&&""!==C(n)[0].def))&&o[n]===N(n,r.match);n--)a--;return t?{l:a,def:l[a]?l[a].match:i}:a}function $(e){for(var t,n=R(),r=e.length,o=g().validPositions[v()];n<r&&!M(n,!0)&&(t=o!==i?x(n,o.locator.slice(""),o):w(n))&&!0!==t.match.optionality&&(!0!==t.match.optionalQuantifier&&!0!==t.match.newBlockMarker||n+1===r&&""===(o!==i?x(n+1,o.locator.slice(""),o):w(n+1)).match.def);)n++;for(;(t=g().validPositions[n-1])&&t&&t.match.optionality&&t.input===c.skipOptionalPartCharacter;)n--;return e.splice(n),e}function _(t){if(e.isFunction(c.isComplete))return c.isComplete(t,c);if("*"===c.repeat)return i;var n=!1,r=R(!0),o=O(r.l);if(r.def===i||r.def.newBlockMarker||r.def.optionality||r.def.optionalQuantifier){n=!0;for(var a=0;a<=o;a++){var s=x(a).match;if(null!==s.fn&&g().validPositions[a]===i&&!0!==s.optionality&&!0!==s.optionalQuantifier||null===s.fn&&t[a]!==N(a,s)){n=!1;break}}}return n}function H(t,n,o,a,s){if((c.numericInput||V)&&(n===r.keyCode.BACKSPACE?n=r.keyCode.DELETE:n===r.keyCode.DELETE&&(n=r.keyCode.BACKSPACE),V)){var l=o.end;o.end=o.begin,o.begin=l}n===r.keyCode.BACKSPACE&&(o.end-o.begin<1||!1===c.insertMode)?(o.begin=O(o.begin),g().validPositions[o.begin]!==i&&g().validPositions[o.begin].input===c.groupSeparator&&o.begin--):n===r.keyCode.DELETE&&o.begin===o.end&&(o.end=M(o.end,!0)&&g().validPositions[o.end]&&g().validPositions[o.end].input!==c.radixPoint?o.end+1:A(o.end)+1,g().validPositions[o.begin]!==i&&g().validPositions[o.begin].input===c.groupSeparator&&o.end++),y(o.begin,o.end,!1,a),!0!==a&&function(){if(c.keepStatic){for(var n=[],r=v(-1,!0),o=e.extend(!0,{},g().validPositions),a=g().validPositions[r];r>=0;r--){var s=g().validPositions[r];if(s){if(!0!==s.generatedInput&&/[0-9a-bA-Z]/.test(s.input)&&n.push(s.input),delete g().validPositions[r],s.alternation!==i&&s.locator[s.alternation]!==a.locator[s.alternation])break;a=s}}if(r>-1)for(g().p=A(v(-1,!0));n.length>0;){var l=new e.Event("keypress");l.which=n.pop().charCodeAt(0),te.keypressEvent.call(t,l,!0,!1,!1,g().p)}else g().validPositions=e.extend(!0,{},o)}}();var u=v(o.begin,!0);if(u<o.begin)g().p=A(u);else if(!0!==a&&(g().p=o.begin,!0!==s))for(;g().p<u&&g().validPositions[g().p]===i;)g().p++}function B(i){var r=(i.ownerDocument.defaultView||t).getComputedStyle(i,null),o=n.createElement("div");o.style.width=r.width,o.style.textAlign=r.textAlign,(U=n.createElement("div")).className="im-colormask",i.parentNode.insertBefore(U,i),i.parentNode.removeChild(i),U.appendChild(o),U.appendChild(i),i.style.left=o.offsetLeft+"px",e(i).on("click",function(e){return F(i,function(e){var t,o=n.createElement("span");for(var a in r)isNaN(a)&&-1!==a.indexOf("font")&&(o.style[a]=r[a]);o.style.textTransform=r.textTransform,o.style.letterSpacing=r.letterSpacing,o.style.position="absolute",o.style.height="auto",o.style.width="auto",o.style.visibility="hidden",o.style.whiteSpace="nowrap",n.body.appendChild(o);var s,l=i.inputmask._valueGet(),c=0;for(t=0,s=l.length;t<=s;t++){if(o.innerHTML+=l.charAt(t)||"_",o.offsetWidth>=e){var u=e-c,d=o.offsetWidth-e;o.innerHTML=l.charAt(t),t=(u-=o.offsetWidth/3)<d?t-1:t;break}c=o.offsetWidth}return n.body.removeChild(o),t}(e.clientX)),te.clickEvent.call(i,[e])}),e(i).on("keydown",function(e){e.shiftKey||!1===c.insertMode||setTimeout(function(){q(i)},0)})}function q(e,t,r){function o(){f||null!==s.fn&&l.input!==i?f&&(null!==s.fn&&l.input!==i||""===s.def)&&(f=!1,d+="</span>"):(f=!0,d+="<span class='im-static'>")}function a(i){!0!==i&&p!==t.begin||n.activeElement!==e||(d+="<span class='im-caret' style='border-right-width: 1px;border-right-style: solid;'></span>")}var s,l,u,d="",f=!1,p=0;if(U!==i){var h=E();if(t===i?t=F(e):t.begin===i&&(t={begin:t,end:t}),!0!==r){var m=v();do{a(),g().validPositions[p]?(l=g().validPositions[p],s=l.match,u=l.locator.slice(),o(),d+=h[p]):(l=x(p,u,p-1),s=l.match,u=l.locator.slice(),(!1===c.jitMasking||p<m||"number"==typeof c.jitMasking&&isFinite(c.jitMasking)&&c.jitMasking>p)&&(o(),d+=N(p,s))),p++}while((z===i||p<z)&&(null!==s.fn||""!==s.def)||m>p||f);-1===d.indexOf("im-caret")&&a(!0),f&&o()}var y=U.getElementsByTagName("div")[0];y.innerHTML=d,e.inputmask.positionColorMask(e,y)}}s=s||this.maskset,c=c||this.opts;var W,Y,z,U,G=this,X=this.el,V=this.isRTL,K=!1,Z=!1,Q=!1,J=!1,ee={on:function(t,n,o){var a=function(t){if(this.inputmask===i&&"FORM"!==this.nodeName){var n=e.data(this,"_inputmask_opts");n?new r(n).mask(this):ee.off(this)}else{if("setvalue"===t.type||"FORM"===this.nodeName||!(this.disabled||this.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||!1===c.tabThrough&&t.keyCode===r.keyCode.TAB))){switch(t.type){case"input":if(!0===Z)return Z=!1,t.preventDefault();break;case"keydown":K=!1,Z=!1;break;case"keypress":if(!0===K)return t.preventDefault();K=!0;break;case"click":if(d||f){var a=this,s=arguments;return setTimeout(function(){o.apply(a,s)},0),!1}}var l=o.apply(this,arguments);return!1===l&&(t.preventDefault(),t.stopPropagation()),l}t.preventDefault()}};t.inputmask.events[n]=t.inputmask.events[n]||[],t.inputmask.events[n].push(a),-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).on(n,a):e(t).on(n,a)},off:function(t,n){if(t.inputmask&&t.inputmask.events){var i;n?(i=[])[n]=t.inputmask.events[n]:i=t.inputmask.events,e.each(i,function(n,i){for(;i.length>0;){var r=i.pop();-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).off(n,r):e(t).off(n,r)}delete t.inputmask.events[n]})}}},te={keydownEvent:function(t){var i=this,o=e(i),a=t.keyCode,s=F(i);if(a===r.keyCode.BACKSPACE||a===r.keyCode.DELETE||f&&a===r.keyCode.BACKSPACE_SAFARI||t.ctrlKey&&a===r.keyCode.X&&!function(e){var t=n.createElement("input"),i="oncut"in t;return i||(t.setAttribute("oncut","return;"),i="function"==typeof t.oncut),t=null,i}())t.preventDefault(),H(i,a,s),L(i,E(!0),g().p,t,i.inputmask._valueGet()!==E().join("")),i.inputmask._valueGet()===S().join("")?o.trigger("cleared"):!0===_(E())&&o.trigger("complete");else if(a===r.keyCode.END||a===r.keyCode.PAGE_DOWN){t.preventDefault();var l=A(v());c.insertMode||l!==g().maskLength||t.shiftKey||l--,F(i,t.shiftKey?s.begin:l,l,!0)}else a===r.keyCode.HOME&&!t.shiftKey||a===r.keyCode.PAGE_UP?(t.preventDefault(),F(i,0,t.shiftKey?s.begin:0,!0)):(c.undoOnEscape&&a===r.keyCode.ESCAPE||90===a&&t.ctrlKey)&&!0!==t.altKey?(I(i,!0,!1,W.split("")),o.trigger("click")):a!==r.keyCode.INSERT||t.shiftKey||t.ctrlKey?!0===c.tabThrough&&a===r.keyCode.TAB?(!0===t.shiftKey?(null===w(s.begin).match.fn&&(s.begin=A(s.begin)),s.end=O(s.begin,!0),s.begin=O(s.end,!0)):(s.begin=A(s.begin,!0),s.end=A(s.begin,!0),s.end<g().maskLength&&s.end--),s.begin<g().maskLength&&(t.preventDefault(),F(i,s.begin,s.end))):t.shiftKey||!1===c.insertMode&&(a===r.keyCode.RIGHT?setTimeout(function(){var e=F(i);F(i,e.begin)},0):a===r.keyCode.LEFT&&setTimeout(function(){var e=F(i);F(i,V?e.begin+1:e.begin-1)},0)):(c.insertMode=!c.insertMode,F(i,c.insertMode||s.begin!==g().maskLength?s.begin:s.begin-1));c.onKeyDown.call(this,t,E(),F(i).begin,c),Q=-1!==e.inArray(a,c.ignorables)},keypressEvent:function(t,n,o,a,s){var l=this,u=e(l),d=t.which||t.charCode||t.keyCode;if(!(!0===n||t.ctrlKey&&t.altKey)&&(t.ctrlKey||t.metaKey||Q))return d===r.keyCode.ENTER&&W!==E().join("")&&(W=E().join(""),setTimeout(function(){u.trigger("change")},0)),!0;if(d){46===d&&!1===t.shiftKey&&""!==c.radixPoint&&(d=c.radixPoint.charCodeAt(0));var f,p=n?{begin:s,end:s}:F(l),h=String.fromCharCode(d);g().writeOutBuffer=!0;var v=D(p,h,a);if(!1!==v&&(m(!0),f=v.caret!==i?v.caret:n?v.pos+1:A(v.pos),g().p=f),!1!==o&&(setTimeout(function(){c.onKeyValidation.call(l,d,v,c)},0),g().writeOutBuffer&&!1!==v)){var y=E();L(l,y,c.numericInput&&v.caret===i?O(f):f,t,!0!==n),!0!==n&&setTimeout(function(){!0===_(y)&&u.trigger("complete")},0)}if(t.preventDefault(),n)return!1!==v&&(v.forwardPosition=f),v}},pasteEvent:function(n){var i,r=n.originalEvent||n,o=e(this),a=this.inputmask._valueGet(!0),s=F(this);V&&(i=s.end,s.end=s.begin,s.begin=i);var l=a.substr(0,s.begin),u=a.substr(s.end,a.length);if(l===(V?S().reverse():S()).slice(0,s.begin).join("")&&(l=""),u===(V?S().reverse():S()).slice(s.end).join("")&&(u=""),V&&(i=l,l=u,u=i),t.clipboardData&&t.clipboardData.getData)a=l+t.clipboardData.getData("Text")+u;else{if(!r.clipboardData||!r.clipboardData.getData)return!0;a=l+r.clipboardData.getData("text/plain")+u}var d=a;if(e.isFunction(c.onBeforePaste)){if(!1===(d=c.onBeforePaste.call(G,a,c)))return n.preventDefault();d||(d=a)}return I(this,!1,!1,V?d.split("").reverse():d.toString().split("")),L(this,E(),A(v()),n,W!==E().join("")),!0===_(E())&&o.trigger("complete"),n.preventDefault()},inputFallBackEvent:function(t){var n=this,i=n.inputmask._valueGet();if(E().join("")!==i){var o=F(n);if(!1===function(t,n,i){if("."===n.charAt(i.begin-1)&&""!==c.radixPoint&&((n=n.split(""))[i.begin-1]=c.radixPoint.charAt(0),n=n.join("")),n.charAt(i.begin-1)===c.radixPoint&&n.length>E().length){var r=new e.Event("keypress");return r.which=c.radixPoint.charCodeAt(0),te.keypressEvent.call(t,r,!0,!0,!1,i.begin-1),!1}}(n,i,o))return!1;if(i=i.replace(new RegExp("("+r.escapeRegex(S().join(""))+")*"),""),!1===function(t,n,i){if(d){var r=n.replace(E().join(""),"");if(1===r.length){var o=new e.Event("keypress");return o.which=r.charCodeAt(0),te.keypressEvent.call(t,o,!0,!0,!1,g().validPositions[i.begin-1]?i.begin:i.begin-1),!1}}}(n,i,o))return!1;o.begin>i.length&&(F(n,i.length),o=F(n));var a=E().join(""),s=i.substr(0,o.begin),l=i.substr(o.begin),u=a.substr(0,o.begin),f=a.substr(o.begin),p=o,h="",m=!1;if(s!==u){p.begin=0;for(var v=(m=s.length>=u.length)?s.length:u.length,y=0;s.charAt(y)===u.charAt(y)&&y<v;y++)p.begin++;m&&(h+=s.slice(p.begin,p.end))}l!==f&&(l.length>f.length?m&&(p.end=p.begin):l.length<f.length?p.end+=f.length-l.length:l.charAt(0)!==f.charAt(0)&&p.end++),L(n,E(),p),h.length>0?e.each(h.split(""),function(t,i){var r=new e.Event("keypress");r.which=i.charCodeAt(0),Q=!1,te.keypressEvent.call(n,r)}):(p.begin===p.end-1&&F(n,O(p.begin+1),p.end),t.keyCode=r.keyCode.DELETE,te.keydownEvent.call(n,t)),t.preventDefault()}},setValueEvent:function(t){this.inputmask.refreshValue=!1;var n=this.inputmask._valueGet(!0);e.isFunction(c.onBeforeMask)&&(n=c.onBeforeMask.call(G,n,c)||n),n=n.split(""),I(this,!0,!1,V?n.reverse():n),W=E().join(""),(c.clearMaskOnLostFocus||c.clearIncomplete)&&this.inputmask._valueGet()===S().join("")&&this.inputmask._valueSet("")},focusEvent:function(e){var t=this.inputmask._valueGet();c.showMaskOnFocus&&(!c.showMaskOnHover||c.showMaskOnHover&&""===t)&&(this.inputmask._valueGet()!==E().join("")?L(this,E(),A(v())):!1===J&&F(this,A(v()))),!0===c.positionCaretOnTab&&!1===J&&""!==t&&(L(this,E(),F(this)),te.clickEvent.apply(this,[e,!0])),W=E().join("")},mouseleaveEvent:function(e){if(J=!1,c.clearMaskOnLostFocus&&n.activeElement!==this){var t=E().slice(),i=this.inputmask._valueGet();i!==this.getAttribute("placeholder")&&""!==i&&(-1===v()&&i===S().join("")?t=[]:$(t),L(this,t))}},clickEvent:function(t,r){var o=this;setTimeout(function(){if(n.activeElement===o){var t=F(o);if(r&&(V?t.end=t.begin:t.begin=t.end),t.begin===t.end)switch(c.positionCaretOnClick){case"none":break;case"radixFocus":if(function(t){if(""!==c.radixPoint){var n=g().validPositions;if(n[t]===i||n[t].input===N(t)){if(t<A(-1))return!0;var r=e.inArray(c.radixPoint,E());if(-1!==r){for(var o in n)if(r<o&&n[o].input!==N(o))return!1;return!0}}}return!1}(t.begin)){var a=E().join("").indexOf(c.radixPoint);F(o,c.numericInput?A(a):a);break}default:var s=t.begin,l=v(s,!0),u=A(l);if(s<u)F(o,M(s,!0)||M(s-1,!0)?s:A(s));else{var d=g().validPositions[l],f=x(u,d?d.match.locator:i,d),p=N(u,f.match);if(""!==p&&E()[u]!==p&&!0!==f.match.optionalQuantifier&&!0!==f.match.newBlockMarker||!M(u,!0)&&f.match.def===p){var h=A(u);(s>=h||s===u)&&(u=h)}F(o,u)}}}},0)},dblclickEvent:function(e){var t=this;setTimeout(function(){F(t,0,A(v()))},0)},cutEvent:function(i){var o=e(this),a=F(this),s=i.originalEvent||i,l=t.clipboardData||s.clipboardData,c=V?E().slice(a.end,a.begin):E().slice(a.begin,a.end);l.setData("text",V?c.reverse().join(""):c.join("")),n.execCommand&&n.execCommand("copy"),H(this,r.keyCode.DELETE,a),L(this,E(),g().p,i,W!==E().join("")),this.inputmask._valueGet()===S().join("")&&o.trigger("cleared")},blurEvent:function(t){var n=e(this);if(this.inputmask){var r=this.inputmask._valueGet(),o=E().slice();""!==r&&(c.clearMaskOnLostFocus&&(-1===v()&&r===S().join("")?o=[]:$(o)),!1===_(o)&&(setTimeout(function(){n.trigger("incomplete")},0),c.clearIncomplete&&(m(),o=c.clearMaskOnLostFocus?[]:S().slice())),L(this,o,i,t)),W!==E().join("")&&(W=o.join(""),n.trigger("change"))}},mouseenterEvent:function(e){J=!0,n.activeElement!==this&&c.showMaskOnHover&&this.inputmask._valueGet()!==E().join("")&&L(this,E())},submitEvent:function(e){W!==E().join("")&&Y.trigger("change"),c.clearMaskOnLostFocus&&-1===v()&&X.inputmask._valueGet&&X.inputmask._valueGet()===S().join("")&&X.inputmask._valueSet(""),c.removeMaskOnSubmit&&(X.inputmask._valueSet(X.inputmask.unmaskedvalue(),!0),setTimeout(function(){L(X,E())},0))},resetEvent:function(e){X.inputmask.refreshValue=!0,setTimeout(function(){Y.trigger("setvalue")},0)}};r.prototype.positionColorMask=function(e,t){e.style.left=t.offsetLeft+"px"};var ne;if(o!==i)switch(o.action){case"isComplete":return X=o.el,_(E());case"unmaskedvalue":return X!==i&&o.value===i||(ne=o.value,ne=(e.isFunction(c.onBeforeMask)?c.onBeforeMask.call(G,ne,c)||ne:ne).split(""),I(i,!1,!1,V?ne.reverse():ne),e.isFunction(c.onBeforeWrite)&&c.onBeforeWrite.call(G,i,E(),0,c)),j(X);case"mask":!function(t){ee.off(t);var r=function(t,r){var o=t.getAttribute("type"),s="INPUT"===t.tagName&&-1!==e.inArray(o,r.supportsInputType)||t.isContentEditable||"TEXTAREA"===t.tagName;if(!s)if("INPUT"===t.tagName){var l=n.createElement("input");l.setAttribute("type",o),s="text"===l.type,l=null}else s="partial";return!1!==s?function(t){function o(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==v()||!0!==r.nullable?n.activeElement===this&&r.clearMaskOnLostFocus?(V?$(E().slice()).reverse():$(E().slice())).join(""):l.call(this):"":l.call(this)}function s(t){c.call(this,t),this.inputmask&&e(this).trigger("setvalue")}var l,c;if(!t.inputmask.__valueGet){if(!0!==r.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"===a("test".__proto__)?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var u=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):i;u&&u.get&&u.set?(l=u.get,c=u.set,Object.defineProperty(t,"value",{get:o,set:s,configurable:!0})):"INPUT"!==t.tagName&&(l=function(){return this.textContent},c=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:o,set:s,configurable:!0}))}else n.__lookupGetter__&&t.__lookupGetter__("value")&&(l=t.__lookupGetter__("value"),c=t.__lookupSetter__("value"),t.__defineGetter__("value",o),t.__defineSetter__("value",s));t.inputmask.__valueGet=l,t.inputmask.__valueSet=c}t.inputmask._valueGet=function(e){return V&&!0!==e?l.call(this.el).split("").reverse().join(""):l.call(this.el)},t.inputmask._valueSet=function(e,t){c.call(this.el,null===e||e===i?"":!0!==t&&V?e.split("").reverse().join(""):e)},l===i&&(l=function(){return this.value},c=function(e){this.value=e},function(t){if(e.valHooks&&(e.valHooks[t]===i||!0!==e.valHooks[t].inputmaskpatch)){var n=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},o=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=n(e);return-1!==v(i,i,e.inputmask.maskset.validPositions)||!0!==r.nullable?t:""}return n(e)},set:function(t,n){var i,r=e(t);return i=o(t,n),t.inputmask&&r.trigger("setvalue"),i},inputmaskpatch:!0}}}(t.type),d=t,ee.on(d,"mouseenter",function(t){var n=e(this);this.inputmask._valueGet()!==E().join("")&&n.trigger("setvalue")}))}var d}(t):t.inputmask=i,s}(t,c);if(!1!==r&&(X=t,Y=e(X),-1===(z=X!==i?X.maxLength:i)&&(z=i),!0===c.colorMask&&B(X),p&&(X.hasOwnProperty("inputmode")&&(X.inputmode=c.inputmode,X.setAttribute("inputmode",c.inputmode)),"rtfm"===c.androidHack&&(!0!==c.colorMask&&B(X),X.type="password")),!0===r&&(ee.on(X,"submit",te.submitEvent),ee.on(X,"reset",te.resetEvent),ee.on(X,"mouseenter",te.mouseenterEvent),ee.on(X,"blur",te.blurEvent),ee.on(X,"focus",te.focusEvent),ee.on(X,"mouseleave",te.mouseleaveEvent),!0!==c.colorMask&&ee.on(X,"click",te.clickEvent),ee.on(X,"dblclick",te.dblclickEvent),ee.on(X,"paste",te.pasteEvent),ee.on(X,"dragdrop",te.pasteEvent),ee.on(X,"drop",te.pasteEvent),ee.on(X,"cut",te.cutEvent),ee.on(X,"complete",c.oncomplete),ee.on(X,"incomplete",c.onincomplete),ee.on(X,"cleared",c.oncleared),p||!0===c.inputEventOnly?X.removeAttribute("maxLength"):(ee.on(X,"keydown",te.keydownEvent),ee.on(X,"keypress",te.keypressEvent)),ee.on(X,"compositionstart",e.noop),ee.on(X,"compositionupdate",e.noop),ee.on(X,"compositionend",e.noop),ee.on(X,"keyup",e.noop),ee.on(X,"input",te.inputFallBackEvent),ee.on(X,"beforeinput",e.noop)),ee.on(X,"setvalue",te.setValueEvent),W=S().join(""),""!==X.inputmask._valueGet(!0)||!1===c.clearMaskOnLostFocus||n.activeElement===X)){var o=e.isFunction(c.onBeforeMask)?c.onBeforeMask.call(G,X.inputmask._valueGet(!0),c)||X.inputmask._valueGet(!0):X.inputmask._valueGet(!0);""!==o&&I(X,!0,!1,V?o.split("").reverse():o.split(""));var s=E().slice();W=s.join(""),!1===_(s)&&c.clearIncomplete&&m(),c.clearMaskOnLostFocus&&n.activeElement!==X&&(-1===v()?s=[]:$(s)),L(X,s),n.activeElement===X&&F(X,A(v()))}}(X);break;case"format":return ne=(e.isFunction(c.onBeforeMask)?c.onBeforeMask.call(G,o.value,c)||o.value:o.value).split(""),I(i,!0,!1,V?ne.reverse():ne),o.metadata?{value:V?E().slice().reverse().join(""):E().join(""),metadata:l.call(this,{action:"getmetadata"},s,c)}:V?E().slice().reverse().join(""):E().join("");case"isValid":o.value?(ne=o.value.split(""),I(i,!0,!0,V?ne.reverse():ne)):o.value=E().join("");for(var ie=E(),re=R(),oe=ie.length-1;oe>re&&!M(oe);oe--);return ie.splice(re,oe+1-re),_(ie)&&o.value===E().join("");case"getemptymask":return S().join("");case"remove":return X&&X.inputmask&&(Y=e(X),X.inputmask._valueSet(c.autoUnmask?j(X):X.inputmask._valueGet(!0)),ee.off(X),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(X),"value")&&X.inputmask.__valueGet&&Object.defineProperty(X,"value",{get:X.inputmask.__valueGet,set:X.inputmask.__valueSet,configurable:!0}):n.__lookupGetter__&&X.__lookupGetter__("value")&&X.inputmask.__valueGet&&(X.__defineGetter__("value",X.inputmask.__valueGet),X.__defineSetter__("value",X.inputmask.__valueSet)),X.inputmask=i),X;case"getmetadata":if(e.isArray(s.metadata)){var ae=h(!0,0,!1).join("");return e.each(s.metadata,function(e,t){if(t.mask===ae)return ae=t,!1}),ae}return s.metadata}}var c=navigator.userAgent,u=/mobile/i.test(c),d=/iemobile/i.test(c),f=/iphone/i.test(c)&&!d,p=/android/i.test(c)&&!d;return r.prototype={dataAttribute:"data-inputmask",defaults:{placeholder:"_",optionalmarker:{start:"[",end:"]"},quantifiermarker:{start:"{",end:"}"},groupmarker:{start:"(",end:")"},alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!0,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,n){return e.isFunction(n.onBeforeMask)?n.onBeforeMask.call(this,t,n):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:e.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",radixPointDefinitionSymbol:i,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","password"],ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,canClearPosition:e.noop,preValidation:null,postValidation:null,staticDefinitionSymbol:i,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"verbatim",colorMask:!1,androidHack:!1,importDataAttributes:!0},definitions:{9:{validator:"[0-9ï¼-ï¼]",cardinality:1,definitionSymbol:"*"},a:{validator:"[A-Za-zÐ-ÑÐÑÃ-Ã¿Âµ]",cardinality:1,definitionSymbol:"*"},"*":{validator:"[0-9ï¼-ï¼A-Za-zÐ-ÑÐÑÃ-Ã¿Âµ]",cardinality:1}},aliases:{},masksCache:{},mask:function(a){var c=this;return"string"==typeof a&&(a=n.getElementById(a)||n.querySelectorAll(a)),a=a.nodeName?[a]:a,e.each(a,function(n,a){var u=e.extend(!0,{},c.opts);!function(n,r,a,s){if(!0===r.importDataAttributes){var l,c,u,d,f=function(e,r){null!==(r=r!==i?r:n.getAttribute(s+"-"+e))&&("string"==typeof r&&(0===e.indexOf("on")?r=t[r]:"false"===r?r=!1:"true"===r&&(r=!0)),a[e]=r)},p=n.getAttribute(s);if(p&&""!==p&&(p=p.replace(new RegExp("'","g"),'"'),c=JSON.parse("{"+p+"}")),c){u=i;for(d in c)if("alias"===d.toLowerCase()){u=c[d];break}}f("alias",u),a.alias&&o(a.alias,a,r);for(l in r){if(c){u=i;for(d in c)if(d.toLowerCase()===l.toLowerCase()){u=c[d];break}}f(l,u)}}e.extend(!0,r,a),("rtl"===n.dir||r.rightAlign)&&(n.style.textAlign="right"),("rtl"===n.dir||r.numericInput)&&(n.dir="ltr",n.removeAttribute("dir"),r.isRTL=!0)}(a,u,e.extend(!0,{},c.userOptions),c.dataAttribute);var d=s(u,c.noMasksCache);d!==i&&(a.inputmask!==i&&(a.inputmask.opts.autoUnmask=!0,a.inputmask.remove()),a.inputmask=new r(i,i,!0),a.inputmask.opts=u,a.inputmask.noMasksCache=c.noMasksCache,a.inputmask.userOptions=e.extend(!0,{},c.userOptions),a.inputmask.isRTL=u.isRTL||u.numericInput,a.inputmask.el=a,a.inputmask.maskset=d,e.data(a,"_inputmask_opts",u),l.call(a.inputmask,{action:"mask"}))}),a&&a[0]?a[0].inputmask||this:this},option:function(t,n){return"string"==typeof t?this.opts[t]:"object"===(void 0===t?"undefined":a(t))?(e.extend(this.userOptions,t),this.el&&!0!==n&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return l.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||s(this.opts,this.noMasksCache),l.call(this,{action:"format",value:e,metadata:t})},analyseMask:function(t,n,o){function a(e,t,n,i){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=i||!1,this.quantifier={min:1,max:1}}function s(t,a,s){s=s!==i?s:t.matches.length;var l=t.matches[s-1];if(n)0===a.indexOf("[")||x&&/\\d|\\s|\\w]/i.test(a)||"."===a?t.matches.splice(s++,0,{fn:new RegExp(a,o.casing?"i":""),cardinality:1,optionality:t.isOptional,newBlockMarker:l===i||l.def!==a,casing:null,def:a,placeholder:i,nativeDef:a}):(x&&(a=a[a.length-1]),e.each(a.split(""),function(e,n){l=t.matches[s-1],t.matches.splice(s++,0,{fn:null,cardinality:0,optionality:t.isOptional,newBlockMarker:l===i||l.def!==n&&null!==l.fn,casing:null,def:o.staticDefinitionSymbol||n,placeholder:o.staticDefinitionSymbol!==i?n:i,nativeDef:n})})),x=!1;else{var c=(o.definitions?o.definitions[a]:i)||r.prototype.definitions[a];if(c&&!x){for(var u=c.prevalidator,d=u?u.length:0,f=1;f<c.cardinality;f++){var p=d>=f?u[f-1]:[],h=p.validator,g=p.cardinality;t.matches.splice(s++,0,{fn:h?"string"==typeof h?new RegExp(h,o.casing?"i":""):new function(){this.test=h}:new RegExp("."),cardinality:g||1,optionality:t.isOptional,newBlockMarker:l===i||l.def!==(c.definitionSymbol||a),casing:c.casing,def:c.definitionSymbol||a,placeholder:c.placeholder,nativeDef:a}),l=t.matches[s-1]}t.matches.splice(s++,0,{fn:c.validator?"string"==typeof c.validator?new RegExp(c.validator,o.casing?"i":""):new function(){this.test=c.validator}:new RegExp("."),cardinality:c.cardinality,optionality:t.isOptional,newBlockMarker:l===i||l.def!==(c.definitionSymbol||a),casing:c.casing,def:c.definitionSymbol||a,placeholder:c.placeholder,nativeDef:a})}else t.matches.splice(s++,0,{fn:null,cardinality:0,optionality:t.isOptional,newBlockMarker:l===i||l.def!==a&&null!==l.fn,casing:null,def:o.staticDefinitionSymbol||a,placeholder:o.staticDefinitionSymbol!==i?a:i,nativeDef:a}),x=!1}}function l(t){t&&t.matches&&e.each(t.matches,function(e,r){var a=t.matches[e+1];(a===i||a.matches===i||!1===a.isQuantifier)&&r&&r.isGroup&&(r.isGroup=!1,n||(s(r,o.groupmarker.start,0),!0!==r.openGroup&&s(r,o.groupmarker.end))),l(r)})}function c(){if(k.length>0){if(s(h=k[k.length-1],f),h.isAlternator){g=k.pop();for(var e=0;e<g.matches.length;e++)g.matches[e].isGroup=!1;k.length>0?(h=k[k.length-1]).matches.push(g):w.matches.push(g)}}else s(w,f)}function u(e){e.matches=e.matches.reverse();for(var t in e.matches)if(e.matches.hasOwnProperty(t)){var n=parseInt(t);if(e.matches[t].isQuantifier&&e.matches[n+1]&&e.matches[n+1].isGroup){var r=e.matches[t];e.matches.splice(t,1),e.matches.splice(n+1,0,r)}e.matches[t].matches!==i?e.matches[t]=u(e.matches[t]):e.matches[t]=(a=e.matches[t],a===o.optionalmarker.start?a=o.optionalmarker.end:a===o.optionalmarker.end?a=o.optionalmarker.start:a===o.groupmarker.start?a=o.groupmarker.end:a===o.groupmarker.end&&(a=o.groupmarker.start),a)}var a;return e}var d,f,p,h,g,m,v,y=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,b=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,x=!1,w=new a,k=[],C=[];for(n&&(o.optionalmarker.start=i,o.optionalmarker.end=i);d=n?b.exec(t):y.exec(t);){if(f=d[0],n)switch(f.charAt(0)){case"?":f="{0,1}";break;case"+":case"*":f="{"+f+"}"}if(x)c();else switch(f.charAt(0)){case o.escapeChar:x=!0,n&&c();break;case o.optionalmarker.end:case o.groupmarker.end:if((p=k.pop()).openGroup=!1,p!==i)if(k.length>0){if((h=k[k.length-1]).matches.push(p),h.isAlternator){g=k.pop();for(var S=0;S<g.matches.length;S++)g.matches[S].isGroup=!1,g.matches[S].alternatorGroup=!1;k.length>0?(h=k[k.length-1]).matches.push(g):w.matches.push(g)}}else w.matches.push(p);else c();break;case o.optionalmarker.start:k.push(new a(!1,!0));break;case o.groupmarker.start:k.push(new a(!0));break;case o.quantifiermarker.start:var E=new a(!1,!1,!0),T=(f=f.replace(/[{}]/g,"")).split(","),P=isNaN(T[0])?T[0]:parseInt(T[0]),D=1===T.length?P:isNaN(T[1])?T[1]:parseInt(T[1]);if("*"!==D&&"+"!==D||(P="*"===D?0:1),E.quantifier={min:P,max:D},k.length>0){var M=k[k.length-1].matches;(d=M.pop()).isGroup||((v=new a(!0)).matches.push(d),d=v),M.push(d),M.push(E)}else(d=w.matches.pop()).isGroup||(n&&null===d.fn&&"."===d.def&&(d.fn=new RegExp(d.def,o.casing?"i":"")),(v=new a(!0)).matches.push(d),d=v),w.matches.push(d),w.matches.push(E);break;case o.alternatormarker:if(k.length>0){var A=(h=k[k.length-1]).matches[h.matches.length-1];m=h.openGroup&&(A.matches===i||!1===A.isGroup&&!1===A.isAlternator)?k.pop():h.matches.pop()}else m=w.matches.pop();if(m.isAlternator)k.push(m);else if(m.alternatorGroup?(g=k.pop(),m.alternatorGroup=!1):g=new a(!1,!1,!1,!0),g.matches.push(m),k.push(g),m.openGroup){m.openGroup=!1;var O=new a(!0);O.alternatorGroup=!0,k.push(O)}break;default:c()}}for(;k.length>0;)p=k.pop(),w.matches.push(p);return w.matches.length>0&&(l(w),C.push(w)),(o.numericInput||o.isRTL)&&u(C[0]),C}},r.extendDefaults=function(t){e.extend(!0,r.prototype.defaults,t)},r.extendDefinitions=function(t){e.extend(!0,r.prototype.definitions,t)},r.extendAliases=function(t){e.extend(!0,r.prototype.aliases,t)},r.format=function(e,t,n){return r(t).format(e,n)},r.unmask=function(e,t){return r(t).unmaskedvalue(e)},r.isValid=function(e,t){return r(t).isValid(e)},r.remove=function(t){e.each(t,function(e,t){t.inputmask&&t.inputmask.remove()})},r.escapeRegex=function(e){return e.replace(new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim"),"\\$1")},r.keyCode={ALT:18,BACKSPACE:8,BACKSPACE_SAFARI:127,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91,X:88},r})?i.apply(t,r):i)&&(e.exports=o)},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}n(4),n(9),n(12),n(13),n(14),n(15);var r=i(n(1)),o=i(n(0)),a=i(n(2));o.default===a.default&&n(16),window.Inputmask=r.default},function(e,t,n){var i=n(5);"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0};r.transform=void 0,n(7)(i,r),i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(6)(void 0)).push([e.i,"span.im-caret {\r\n    -webkit-animation: 1s blink step-end infinite;\r\n    animation: 1s blink step-end infinite;\r\n}\r\n\r\n@keyframes blink {\r\n    from, to {\r\n        border-right-color: black;\r\n    }\r\n    50% {\r\n        border-right-color: transparent;\r\n    }\r\n}\r\n\r\n@-webkit-keyframes blink {\r\n    from, to {\r\n        border-right-color: black;\r\n    }\r\n    50% {\r\n        border-right-color: transparent;\r\n    }\r\n}\r\n\r\nspan.im-static {\r\n    color: grey;\r\n}\r\n\r\ndiv.im-colormask {\r\n    display: inline-block;\r\n    border-style: inset;\r\n    border-width: 2px;\r\n    -webkit-appearance: textfield;\r\n    -moz-appearance: textfield;\r\n    appearance: textfield;\r\n}\r\n\r\ndiv.im-colormask > input {\r\n    position: absolute;\r\n    display: inline-block;\r\n    background-color: transparent;\r\n    color: transparent;\r\n    -webkit-appearance: caret;\r\n    -moz-appearance: caret;\r\n    appearance: caret;\r\n    border-style: none;\r\n    left: 0; /*calculated*/\r\n}\r\n\r\ndiv.im-colormask > input:focus {\r\n    outline: none;\r\n}\r\n\r\ndiv.im-colormask > input::-moz-selection{\r\n    background: none;\r\n}\r\n\r\ndiv.im-colormask > input::selection{\r\n    background: none;\r\n}\r\ndiv.im-colormask > input::-moz-selection{\r\n    background: none;\r\n}\r\n\r\ndiv.im-colormask > div {\r\n    color: black;\r\n    display: inline-block;\r\n    width: 100px; /*calculated*/\r\n}",""])},function(e,t){function n(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var r=(a=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=i.sources.map(function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"});return[n].concat(o).concat([r]).join("\n")}var a;return[n].join("\n")}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var i=n(t,e);return t[2]?"@media "+t[2]+"{"+i+"}":i}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},r=0;r<this.length;r++){var o=this[r][0];"number"==typeof o&&(i[o]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&i[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){function i(e,t){for(var n=0;n<e.length;n++){var i=e[n],r=d[i.id];if(r){for(r.refs++,a=0;a<r.parts.length;a++)r.parts[a](i.parts[a]);for(;a<i.parts.length;a++)r.parts.push(c(i.parts[a],t))}else{for(var o=[],a=0;a<i.parts.length;a++)o.push(c(i.parts[a],t));d[i.id]={id:i.id,refs:1,parts:o}}}}function r(e,t){for(var n=[],i={},r=0;r<e.length;r++){var o=e[r],a=t.base?o[0]+t.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};i[a]?i[a].parts.push(s):n.push(i[a]={id:a,parts:[s]})}return n}function o(e,t){var n=p(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=m[m.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),m.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=p(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=m.indexOf(e);t>=0&&m.splice(t,1)}function s(e){var t=document.createElement("style");return e.attrs.type="text/css",l(t,e.attrs),o(e,t),t}function l(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function c(e,t){var n,i,r,c;if(t.transform&&e.css){if(!(c=t.transform(e.css)))return function(){};e.css=c}if(t.singleton){var d=g++;n=h||(h=s(t)),i=u.bind(null,n,d,!1),r=u.bind(null,n,d,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",l(t,e.attrs),o(e,t),t}(t),i=function(e,t,n){var i=n.css,r=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||o)&&(i=v(i)),r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([i],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),r=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(t),i=function(e,t){var n=t.css,i=t.media;if(i&&e.setAttribute("media",i),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){a(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}function u(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=y(t,r);else{var o=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}var d={},f=function(e){var t;return function(){return void 0===t&&(t=function(){return window&&document&&document.all&&!window.atob}.apply(this,arguments)),t}}(),p=function(e){var t={};return function(e){if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),h=null,g=0,m=[],v=n(8);e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=f()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=r(e,t);return i(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var s=n[a];(l=d[s.id]).refs--,o.push(l)}for(e&&i(r(e,t),t),a=0;a<o.length;a++){var l=o[a];if(0===l.refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete d[l.id]}}}};var y=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(r))return e;var o;return o=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(o)+")"})}},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,r=[n(0),n(1)],void 0!==(o="function"==typeof(i=function(e,t){return t.extendAliases({"dd/mm/yyyy":{mask:"1/2/y",placeholder:"dd/mm/yyyy",regex:{val1pre:new RegExp("[0-3]"),val1:new RegExp("0[1-9]|[12][0-9]|3[01]"),val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9]|3[01])"+n+"[01])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9])"+n+"(0[1-9]|1[012]))|(30"+n+"(0[13-9]|1[012]))|(31"+n+"(0[13578]|1[02]))")}},leapday:"29/02/",separator:"/",yearrange:{minyear:1900,maxyear:2099},isInYearRange:function(e,t,n){if(isNaN(e))return!1;var i=parseInt(e.concat(t.toString().slice(e.length))),r=parseInt(e.concat(n.toString().slice(e.length)));return!isNaN(i)&&t<=i&&i<=n||!isNaN(r)&&t<=r&&r<=n},determinebaseyear:function(e,t,n){var i=(new Date).getFullYear();if(e>i)return e;if(t<i){for(var r=t.toString().slice(0,2),o=t.toString().slice(2,4);t<r+n;)r--;var a=r+o;return e>a?e:a}if(e<=i&&i<=t){for(var s=i.toString().slice(0,2);t<s+n;)s--;var l=s+n;return l<e?e:l}return i},onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val(s.getDate().toString()+(s.getMonth()+1).toString()+s.getFullYear().toString()),a.trigger("setvalue")}},getFrontValue:function(e,t,n){for(var i=0,r=0,o=0;o<e.length&&"2"!==e.charAt(o);o++){var a=n.definitions[e.charAt(o)];a?(i+=r,r=a.cardinality):r++}return t.join("").substr(i,r)},postValidation:function(e,t,n){var i,r,o=e.join("");return 0===n.mask.indexOf("y")?(r=o.substr(0,4),i=o.substring(4,10)):(r=o.substring(6,10),i=o.substr(0,6)),t&&(i!==n.leapday||(a=r,isNaN(a)||29===new Date(a,2,0).getDate()));var a},definitions:{1:{validator:function(e,t,n,i,r){var o=r.regex.val1.test(e);return i||o||e.charAt(1)!==r.separator&&-1==="-./".indexOf(e.charAt(1))||!(o=r.regex.val1.test("0"+e.charAt(0)))?o:(t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)})},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=e;isNaN(t.buffer[n+1])||(o+=t.buffer[n+1]);var a=1===o.length?r.regex.val1pre.test(o):r.regex.val1.test(o);if(a&&t.validPositions[n]&&(r.regex.val2(r.separator).test(e+t.validPositions[n].input)||(t.validPositions[n].input="0"===e?"1":"0")),!i&&!a){if(a=r.regex.val1.test(e+"0"))return t.buffer[n]=e,t.buffer[++n]="0",{pos:n,c:"0"};if(a=r.regex.val1.test("0"+e))return t.buffer[n]="0",n++,{pos:n}}return a},cardinality:1}]},2:{validator:function(e,t,n,i,r){var o=r.getFrontValue(t.mask,t.buffer,r);-1!==o.indexOf(r.placeholder[0])&&(o="01"+r.separator);var a=r.regex.val2(r.separator).test(o+e);return i||a||e.charAt(1)!==r.separator&&-1==="-./".indexOf(e.charAt(1))||!(a=r.regex.val2(r.separator).test(o+"0"+e.charAt(0)))?a:(t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)})},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){isNaN(t.buffer[n+1])||(e+=t.buffer[n+1]);var o=r.getFrontValue(t.mask,t.buffer,r);-1!==o.indexOf(r.placeholder[0])&&(o="01"+r.separator);var a=1===e.length?r.regex.val2pre(r.separator).test(o+e):r.regex.val2(r.separator).test(o+e);return a&&t.validPositions[n]&&(r.regex.val2(r.separator).test(e+t.validPositions[n].input)||(t.validPositions[n].input="0"===e?"1":"0")),i||a||!(a=r.regex.val2(r.separator).test(o+"0"+e))?a:(t.buffer[n]="0",{pos:++n})},cardinality:1}]},y:{validator:function(e,t,n,i,r){return r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear)},cardinality:4,prevalidator:[{validator:function(e,t,n,i,r){var o=r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear);if(!i&&!o){var a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e+"0").toString().slice(0,1);if(o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(0),{pos:n};if(a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e+"0").toString().slice(0,2),o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(0),t.buffer[n++]=a.charAt(1),{pos:n}}return o},cardinality:1},{validator:function(e,t,n,i,r){var o=r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear);if(!i&&!o){var a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e).toString().slice(0,2);if(o=r.isInYearRange(e[0]+a[1]+e[1],r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(1),{pos:n};if(a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e).toString().slice(0,2),o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n-1]=a.charAt(0),t.buffer[n++]=a.charAt(1),t.buffer[n++]=e.charAt(0),{refreshFromBuffer:{start:n-3,end:n},pos:n}}return o},cardinality:2},{validator:function(e,t,n,i,r){return r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear)},cardinality:3}]}},insertMode:!1,autoUnmask:!1},"mm/dd/yyyy":{placeholder:"mm/dd/yyyy",alias:"dd/mm/yyyy",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val((s.getMonth()+1).toString()+s.getDate().toString()+s.getFullYear().toString()),a.trigger("setvalue")}}},"yyyy/mm/dd":{mask:"y/1/2",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",leapday:"/02/29",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val(s.getFullYear().toString()+(s.getMonth()+1).toString()+s.getDate().toString()),a.trigger("setvalue")}}},"dd.mm.yyyy":{mask:"1.2.y",placeholder:"dd.mm.yyyy",leapday:"29.02.",separator:".",alias:"dd/mm/yyyy"},"dd-mm-yyyy":{mask:"1-2-y",placeholder:"dd-mm-yyyy",leapday:"29-02-",separator:"-",alias:"dd/mm/yyyy"},"mm.dd.yyyy":{mask:"1.2.y",placeholder:"mm.dd.yyyy",leapday:"02.29.",separator:".",alias:"mm/dd/yyyy"},"mm-dd-yyyy":{mask:"1-2-y",placeholder:"mm-dd-yyyy",leapday:"02-29-",separator:"-",alias:"mm/dd/yyyy"},"yyyy.mm.dd":{mask:"y.1.2",placeholder:"yyyy.mm.dd",leapday:".02.29",separator:".",alias:"yyyy/mm/dd"},"yyyy-mm-dd":{mask:"y-1-2",placeholder:"yyyy-mm-dd",leapday:"-02-29",separator:"-",alias:"yyyy/mm/dd"},datetime:{mask:"1/2/y h:s",placeholder:"dd/mm/yyyy hh:mm",alias:"dd/mm/yyyy",regex:{hrspre:new RegExp("[012]"),hrs24:new RegExp("2[0-4]|1[3-9]"),hrs:new RegExp("[01][0-9]|2[0-4]"),ampm:new RegExp("^[a|p|A|P][m|M]"),mspre:new RegExp("[0-5]"),ms:new RegExp("[0-5][0-9]")},timeseparator:":",hourFormat:"24",definitions:{h:{validator:function(e,t,n,i,r){if("24"===r.hourFormat&&24===parseInt(e,10))return t.buffer[n-1]="0",t.buffer[n]="0",{refreshFromBuffer:{start:n-1,end:n},c:"0"};var o=r.regex.hrs.test(e);if(!i&&!o&&(e.charAt(1)===r.timeseparator||-1!=="-.:".indexOf(e.charAt(1)))&&(o=r.regex.hrs.test("0"+e.charAt(0))))return t.buffer[n-1]="0",t.buffer[n]=e.charAt(0),n++,{refreshFromBuffer:{start:n-2,end:n},pos:n,c:r.timeseparator};if(o&&"24"!==r.hourFormat&&r.regex.hrs24.test(e)){var a=parseInt(e,10);return 24===a?(t.buffer[n+5]="a",t.buffer[n+6]="m"):(t.buffer[n+5]="p",t.buffer[n+6]="m"),(a-=12)<10?(t.buffer[n]=a.toString(),t.buffer[n-1]="0"):(t.buffer[n]=a.toString().charAt(1),t.buffer[n-1]=a.toString().charAt(0)),{refreshFromBuffer:{start:n-1,end:n+6},c:t.buffer[n]}}return o},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=r.regex.hrspre.test(e);return i||o||!(o=r.regex.hrs.test("0"+e))?o:(t.buffer[n]="0",{pos:++n})},cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=r.regex.mspre.test(e);return i||o||!(o=r.regex.ms.test("0"+e))?o:(t.buffer[n]="0",{pos:++n})},cardinality:1}]},t:{validator:function(e,t,n,i,r){return r.regex.ampm.test(e+"m")},casing:"lower",cardinality:1}},insertMode:!1,autoUnmask:!1},datetime12:{mask:"1/2/y h:s t\\m",placeholder:"dd/mm/yyyy hh:mm xm",alias:"datetime",hourFormat:"12"},"mm/dd/yyyy hh:mm xm":{mask:"1/2/y h:s t\\m",placeholder:"mm/dd/yyyy hh:mm xm",alias:"datetime12",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val((s.getMonth()+1).toString()+s.getDate().toString()+s.getFullYear().toString()),a.trigger("setvalue")}}},"hh:mm t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"h:s t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"hh:mm:ss":{mask:"h:s:s",placeholder:"hh:mm:ss",alias:"datetime",autoUnmask:!1},"hh:mm":{mask:"h:s",placeholder:"hh:mm",alias:"datetime",autoUnmask:!1},date:{alias:"dd/mm/yyyy"},"mm/yyyy":{mask:"1/y",placeholder:"mm/yyyy",leapday:"donotuse",separator:"/",alias:"mm/dd/yyyy"},shamsi:{regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"[0-3])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[1-9]|1[012])"+n+"30)|((0[1-6])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},yearrange:{minyear:1300,maxyear:1499},mask:"y/1/2",leapday:"/12/30",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",clearIncomplete:!0},"yyyy-mm-dd hh:mm:ss":{mask:"y-1-2 h:s:s",placeholder:"yyyy-mm-dd hh:mm:ss",alias:"datetime",separator:"-",leapday:"-02-29",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},onKeyDown:function(e,t,n,i){}}}),t})?i.apply(t,r):i)&&(e.exports=o)},function(e,t,n){"use strict";var i;"function"==typeof Symbol&&Symbol.iterator,void 0!==(i=function(){return window}.call(t,n,t,e))&&(e.exports=i)},function(e,t,n){"use strict";var i;"function"==typeof Symbol&&Symbol.iterator,void 0!==(i=function(){return document}.call(t,n,t,e))&&(e.exports=i)},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,r=[n(0),n(1)],void 0!==(o="function"==typeof(i=function(e,t){return t.extendDefinitions({A:{validator:"[A-Za-zÐ-ÑÐÑÃ-Ã¿Âµ]",cardinality:1,casing:"upper"},"&":{validator:"[0-9A-Za-zÐ-ÑÐÑÃ-Ã¿Âµ]",cardinality:1,casing:"upper"},"#":{validator:"[0-9A-Fa-f]",cardinality:1,casing:"upper"}}),t.extendAliases({url:{definitions:{i:{validator:".",cardinality:1}},mask:"(\\http://)|(\\http\\s://)|(ftp://)|(ftp\\s://)i{+}",insertMode:!1,autoUnmask:!1,inputmode:"url"},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,n,i,r){return n-1>-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,e=n-2>-1&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):e="00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)},cardinality:1}},onUnMask:function(e,t,n){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",cardinality:1,casing:"lower"},"-":{validator:"[0-9A-Za-z-]",cardinality:1,casing:"lower"}},onUnMask:function(e,t,n){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",cardinality:1,casing:"upper"}},clearIncomplete:!0,autoUnmask:!0}}),t})?i.apply(t,r):i)&&(e.exports=o)},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,r=[n(0),n(1)],void 0!==(o="function"==typeof(i=function(e,t,n){function i(e,n){for(var i="",r=0;r<e.length;r++)t.prototype.definitions[e.charAt(r)]||n.definitions[e.charAt(r)]||n.optionalmarker.start===e.charAt(r)||n.optionalmarker.end===e.charAt(r)||n.quantifiermarker.start===e.charAt(r)||n.quantifiermarker.end===e.charAt(r)||n.groupmarker.start===e.charAt(r)||n.groupmarker.end===e.charAt(r)||n.alternatormarker===e.charAt(r)?i+="\\"+e.charAt(r):i+=e.charAt(r);return i}return t.extendAliases({numeric:{mask:function(e){if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=n),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var t=Math.floor(e.integerDigits/e.groupSize),r=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===r?t-1:t),e.integerDigits<1&&(e.integerDigits="*")}e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&!1===e.integerOptional&&(e.positionCaretOnClick="lvp"),e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",!0===e.numericInput&&(e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var o="[+]";if(o+=i(e.prefix,e),!0===e.integerOptional?o+="~{1,"+e.integerDigits+"}":o+="~{"+e.integerDigits+"}",e.digits!==n){e.radixPointDefinitionSymbol=e.decimalProtect?":":e.radixPoint;var a=e.digits.toString().split(",");isFinite(a[0]&&a[1]&&isFinite(a[1]))?o+=e.radixPointDefinitionSymbol+";{"+e.digits+"}":(isNaN(e.digits)||parseInt(e.digits)>0)&&(e.digitsOptional?o+="["+e.radixPointDefinitionSymbol+";{1,"+e.digits+"}]":o+=e.radixPointDefinitionSymbol+";{"+e.digits+"}")}return o+=i(e.suffix,e),o+="[-]",e.greedy=!1,o},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",groupSize:3,groupSeparator:"",autoGroup:!1,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,inputmode:"numeric",preValidation:function(t,i,r,o,a){if("-"===r||r===a.negationSymbol.front)return!0===a.allowMinus&&(a.isNegative=a.isNegative===n||!a.isNegative,""===t.join("")||{caret:i,dopost:!0});if(!1===o&&r===a.radixPoint&&a.digits!==n&&(isNaN(a.digits)||parseInt(a.digits)>0)){var s=e.inArray(a.radixPoint,t);if(-1!==s)return!0===a.numericInput?i===s:{caret:s+1}}return!0},postValidation:function(i,r,o){var a=o.suffix.split(""),s=o.prefix.split("");if(r.pos===n&&r.caret!==n&&!0!==r.dopost)return r;var l=r.caret!==n?r.caret:r.pos,c=i.slice();o.numericInput&&(l=c.length-l-1,c=c.reverse());var u=c[l];if(u===o.groupSeparator&&(u=c[l+=1]),l===c.length-o.suffix.length-1&&u===o.radixPoint)return r;u!==n&&u!==o.radixPoint&&u!==o.negationSymbol.front&&u!==o.negationSymbol.back&&(c[l]="?",o.prefix.length>0&&l>=(!1===o.isNegative?1:0)&&l<o.prefix.length-1+(!1===o.isNegative?1:0)?s[l-(!1===o.isNegative?1:0)]="?":o.suffix.length>0&&l>=c.length-o.suffix.length-(!1===o.isNegative?1:0)&&(a[l-(c.length-o.suffix.length-(!1===o.isNegative?1:0))]="?")),s=s.join(""),a=a.join("");var d=c.join("").replace(s,"");if(d=(d=(d=(d=d.replace(a,"")).replace(new RegExp(t.escapeRegex(o.groupSeparator),"g"),"")).replace(new RegExp("[-"+t.escapeRegex(o.negationSymbol.front)+"]","g"),"")).replace(new RegExp(t.escapeRegex(o.negationSymbol.back)+"$"),""),isNaN(o.placeholder)&&(d=d.replace(new RegExp(t.escapeRegex(o.placeholder),"g"),"")),d.length>1&&1!==d.indexOf(o.radixPoint)&&("0"===u&&(d=d.replace(/^\?/g,"")),d=d.replace(/^0/g,"")),d.charAt(0)===o.radixPoint&&""!==o.radixPoint&&!0!==o.numericInput&&(d="0"+d),""!==d){if(d=d.split(""),(!o.digitsOptional||o.enforceDigitsOnBlur&&"blur"===r.event)&&isFinite(o.digits)){var f=e.inArray(o.radixPoint,d),p=e.inArray(o.radixPoint,c);-1===f&&(d.push(o.radixPoint),f=d.length-1);for(var h=1;h<=o.digits;h++)o.digitsOptional&&(!o.enforceDigitsOnBlur||"blur"!==r.event)||d[f+h]!==n&&d[f+h]!==o.placeholder.charAt(0)?-1!==p&&c[p+h]!==n&&(d[f+h]=d[f+h]||c[p+h]):d[f+h]=r.placeholder||o.placeholder.charAt(0)}if(!0!==o.autoGroup||""===o.groupSeparator||u===o.radixPoint&&r.pos===n&&!r.dopost)d=d.join("");else{var g=d[d.length-1]===o.radixPoint&&r.c===o.radixPoint;d=t(function(e,t){var n="";if(n+="("+t.groupSeparator+"*{"+t.groupSize+"}){*}",""!==t.radixPoint){var i=e.join("").split(t.radixPoint);i[1]&&(n+=t.radixPoint+"*{"+i[1].match(/^\d*\??\d*/)[0].length+"}")}return n}(d,o),{numericInput:!0,jitMasking:!0,definitions:{"*":{validator:"[0-9?]",cardinality:1}}}).format(d.join("")),g&&(d+=o.radixPoint),d.charAt(0)===o.groupSeparator&&d.substr(1)}}if(o.isNegative&&"blur"===r.event&&(o.isNegative="0"!==d),d=s+d,d+=a,o.isNegative&&(d=o.negationSymbol.front+d,d+=o.negationSymbol.back),d=d.split(""),u!==n)if(u!==o.radixPoint&&u!==o.negationSymbol.front&&u!==o.negationSymbol.back)(l=e.inArray("?",d))>-1?d[l]=u:l=r.caret||0;else if(u===o.radixPoint||u===o.negationSymbol.front||u===o.negationSymbol.back){var m=e.inArray(u,d);-1!==m&&(l=m)}o.numericInput&&(l=d.length-l-1,d=d.reverse());var v={caret:u===n||r.pos!==n?l+(o.numericInput?-1:1):l,buffer:d,refreshFromBuffer:r.dopost||i.join("")!==d.join("")};return v.refreshFromBuffer?v:r},onBeforeWrite:function(i,r,o,a){if(i)switch(i.type){case"keydown":return a.postValidation(r,{caret:o,dopost:!0},a);case"blur":case"checkval":var s;if((l=a).parseMinMaxOptions===n&&(null!==l.min&&(l.min=l.min.toString().replace(new RegExp(t.escapeRegex(l.groupSeparator),"g"),""),","===l.radixPoint&&(l.min=l.min.replace(l.radixPoint,".")),l.min=isFinite(l.min)?parseFloat(l.min):NaN,isNaN(l.min)&&(l.min=Number.MIN_VALUE)),null!==l.max&&(l.max=l.max.toString().replace(new RegExp(t.escapeRegex(l.groupSeparator),"g"),""),","===l.radixPoint&&(l.max=l.max.replace(l.radixPoint,".")),l.max=isFinite(l.max)?parseFloat(l.max):NaN,isNaN(l.max)&&(l.max=Number.MAX_VALUE)),l.parseMinMaxOptions="done"),null!==a.min||null!==a.max){if(s=a.onUnMask(r.join(""),n,e.extend({},a,{unmaskAsNumber:!0})),null!==a.min&&s<a.min)return a.isNegative=a.min<0,a.postValidation(a.min.toString().replace(".",a.radixPoint).split(""),{caret:o,dopost:!0,placeholder:"0"},a);if(null!==a.max&&s>a.max)return a.isNegative=a.max<0,a.postValidation(a.max.toString().replace(".",a.radixPoint).split(""),{caret:o,dopost:!0,placeholder:"0"},a)}return a.postValidation(r,{caret:o,placeholder:"0",event:"blur"},a);case"_checkval":return{caret:o}}var l},regex:{integerPart:function(e,n){return n?new RegExp("["+t.escapeRegex(e.negationSymbol.front)+"+]?"):new RegExp("["+t.escapeRegex(e.negationSymbol.front)+"+]?\\d+")},integerNPart:function(e){return new RegExp("[\\d"+t.escapeRegex(e.groupSeparator)+t.escapeRegex(e.placeholder.charAt(0))+"]+")}},definitions:{"~":{validator:function(e,i,r,o,a,s){var l=o?new RegExp("[0-9"+t.escapeRegex(a.groupSeparator)+"]").test(e):new RegExp("[0-9]").test(e);if(!0===l){if(!0!==a.numericInput&&i.validPositions[r]!==n&&"~"===i.validPositions[r].match.def&&!s){var c=i.buffer.join(""),u=(c=(c=c.replace(new RegExp("[-"+t.escapeRegex(a.negationSymbol.front)+"]","g"),"")).replace(new RegExp(t.escapeRegex(a.negationSymbol.back)+"$"),"")).split(a.radixPoint);u.length>1&&(u[1]=u[1].replace(/0/g,a.placeholder.charAt(0))),"0"===u[0]&&(u[0]=u[0].replace(/0/g,a.placeholder.charAt(0))),c=u[0]+a.radixPoint+u[1]||"";var d=i._buffer.join("");for(c===a.radixPoint&&(c=d);null===c.match(t.escapeRegex(d)+"$");)d=d.slice(1);l=(c=(c=c.replace(d,"")).split(""))[r]===n?{pos:r,remove:r}:{pos:r}}}else o||e!==a.radixPoint||i.validPositions[r-1]!==n||(i.buffer[r]="0",l={pos:r+1});return l},cardinality:1},"+":{validator:function(e,t,n,i,r){return r.allowMinus&&("-"===e||e===r.negationSymbol.front)},cardinality:1,placeholder:""},"-":{validator:function(e,t,n,i,r){return r.allowMinus&&e===r.negationSymbol.back},cardinality:1,placeholder:""},":":{validator:function(e,n,i,r,o){var a="["+t.escapeRegex(o.radixPoint)+"]",s=new RegExp(a).test(e);return s&&n.validPositions[i]&&n.validPositions[i].match.placeholder===o.radixPoint&&(s={caret:i+1}),s},cardinality:1,placeholder:function(e){return e.radixPoint}}},onUnMask:function(e,n,i){if(""===n&&!0===i.nullable)return n;var r=e.replace(i.prefix,"");return r=(r=r.replace(i.suffix,"")).replace(new RegExp(t.escapeRegex(i.groupSeparator),"g"),""),""!==i.placeholder.charAt(0)&&(r=r.replace(new RegExp(i.placeholder.charAt(0),"g"),"0")),i.unmaskAsNumber?(""!==i.radixPoint&&-1!==r.indexOf(i.radixPoint)&&(r=r.replace(t.escapeRegex.call(this,i.radixPoint),".")),r=(r=r.replace(new RegExp("^"+t.escapeRegex(i.negationSymbol.front)),"-")).replace(new RegExp(t.escapeRegex(i.negationSymbol.back)+"$"),""),Number(r)):r},isComplete:function(e,n){var i=e.join("");if(e.slice().join("")!==i)return!1;var r=i.replace(n.prefix,"");return r=(r=r.replace(n.suffix,"")).replace(new RegExp(t.escapeRegex(n.groupSeparator),"g"),""),","===n.radixPoint&&(r=r.replace(t.escapeRegex(n.radixPoint),".")),isFinite(r)},onBeforeMask:function(e,i){if(i.isNegative=n,e=e.toString().charAt(e.length-1)===i.radixPoint?e.toString().substr(0,e.length-1):e.toString(),""!==i.radixPoint&&isFinite(e)){var r=e.split("."),o=""!==i.groupSeparator?parseInt(i.groupSize):0;2===r.length&&(r[0].length>o||r[1].length>o||r[0].length<=o&&r[1].length<o)&&(e=e.replace(".",i.radixPoint))}var a=e.match(/,/g),s=e.match(/\./g);if(e=s&&a?s.length>a.length?(e=e.replace(/\./g,"")).replace(",",i.radixPoint):a.length>s.length?(e=e.replace(/,/g,"")).replace(".",i.radixPoint):e.indexOf(".")<e.indexOf(",")?e.replace(/\./g,""):e.replace(/,/g,""):e.replace(new RegExp(t.escapeRegex(i.groupSeparator),"g"),""),0===i.digits&&(-1!==e.indexOf(".")?e=e.substring(0,e.indexOf(".")):-1!==e.indexOf(",")&&(e=e.substring(0,e.indexOf(",")))),""!==i.radixPoint&&isFinite(i.digits)&&-1!==e.indexOf(i.radixPoint)){var l=e.split(i.radixPoint)[1].match(new RegExp("\\d*"))[0];if(parseInt(i.digits)<l.toString().length){var c=Math.pow(10,parseInt(i.digits));e=e.replace(t.escapeRegex(i.radixPoint),"."),e=(e=Math.round(parseFloat(e)*c)/c).toString().replace(".",i.radixPoint)}}return e},canClearPosition:function(e,t,n,i,r){var o=e.validPositions[t],a=o.input!==r.radixPoint||null!==e.validPositions[t].match.fn&&!1===r.decimalProtect||o.input===r.radixPoint&&e.validPositions[t+1]&&null===e.validPositions[t+1].match.fn||isFinite(o.input)||t===n||o.input===r.groupSeparator||o.input===r.negationSymbol.front||o.input===r.negationSymbol.back;return!a||"+"!==o.match.nativeDef&&"-"!==o.match.nativeDef||(r.isNegative=!1),a},onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey)switch(n.keyCode){case t.keyCode.UP:a.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(o.step)),a.trigger("setvalue");break;case t.keyCode.DOWN:a.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(o.step)),a.trigger("setvalue")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,digitsOptional:!0,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowMinus:!1}}),t})?i.apply(t,r):i)&&(e.exports=o)},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,r=[n(0),n(1)],void 0!==(o="function"==typeof(i=function(e,t){function n(e,t){var n=(e.mask||e).replace(/#/g,"9").replace(/\)/,"9").replace(/[+()#-]/g,""),i=(t.mask||t).replace(/#/g,"9").replace(/\)/,"9").replace(/[+()#-]/g,""),r=(e.mask||e).split("#")[0],o=(t.mask||t).split("#")[0];return 0===o.indexOf(r)?-1:0===r.indexOf(o)?1:n.localeCompare(i)}var i=t.prototype.analyseMask;return t.prototype.analyseMask=function(t,n,r){function o(e,n,i){n=n||"",i=i||s,""!==n&&(i[n]={});for(var r="",a=i[n]||i,l=e.length-1;l>=0;l--)a[r=(t=e[l].mask||e[l]).substr(0,1)]=a[r]||[],a[r].unshift(t.substr(1)),e.splice(l,1);for(var c in a)a[c].length>500&&o(a[c].slice(),c,a)}function a(t){var n="",i=[];for(var o in t)e.isArray(t[o])?1===t[o].length?i.push(o+t[o]):i.push(o+r.groupmarker.start+t[o].join(r.groupmarker.end+r.alternatormarker+r.groupmarker.start)+r.groupmarker.end):i.push(o+a(t[o]));return 1===i.length?n+=i[0]:n+=r.groupmarker.start+i.join(r.groupmarker.end+r.alternatormarker+r.groupmarker.start)+r.groupmarker.end,n}var s={};return r.phoneCodes&&(r.phoneCodes&&r.phoneCodes.length>1e3&&(o((t=t.substr(1,t.length-2)).split(r.groupmarker.end+r.alternatormarker+r.groupmarker.start)),t=a(s)),t=t.replace(/9/g,"\\9")),i.call(this,t,n,r)},t.extendAliases({abstractphone:{groupmarker:{start:"<",end:">"},countrycode:"",phoneCodes:[],mask:function(e){return e.definitions={"#":t.prototype.definitions[9]},e.phoneCodes.sort(n)},keepStatic:!0,onBeforeMask:function(e,t){var n=e.replace(/^0{1,2}/,"").replace(/[\s]/g,"");return(n.indexOf(t.countrycode)>1||-1===n.indexOf(t.countrycode))&&(n="+"+t.countrycode+n),n},onUnMask:function(e,t,n){return e.replace(/[()#-]/g,"")},inputmode:"tel"}}),t})?i.apply(t,r):i)&&(e.exports=o)},function(e,t,n){"use strict";var i,r,o;"function"==typeof Symbol&&Symbol.iterator,r=[n(0),n(1)],void 0!==(o="function"==typeof(i=function(e,t){return t.extendAliases({Regex:{mask:"r",greedy:!1,repeat:"*",regex:null,regexTokens:null,tokenizer:/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,quantifierFilter:/[0-9]+[^,]/,isComplete:function(e,t){return new RegExp(t.regex,t.casing?"i":"").test(e.join(""))},definitions:{r:{validator:function(t,n,i,r,o){function a(e,t){this.matches=[],this.isGroup=e||!1,this.isQuantifier=t||!1,this.quantifier={min:1,max:1},this.repeaterPart=void 0}function s(t,n){var i=!1;n&&(d+="(",p++);for(var r=0;r<t.matches.length;r++){var a=t.matches[r];if(!0===a.isGroup)i=s(a,!0);else if(!0===a.isQuantifier){var c=e.inArray(a,t.matches),u=t.matches[c-1],f=d;if(isNaN(a.quantifier.max)){for(;a.repeaterPart&&a.repeaterPart!==d&&a.repeaterPart.length>d.length&&!(i=s(u,!0)););(i=i||s(u,!0))&&(a.repeaterPart=d),d=f+a.quantifier.max}else{for(var h=0,g=a.quantifier.max-1;h<g&&!(i=s(u,!0));h++);d=f+"{"+a.quantifier.min+","+a.quantifier.max+"}"}}else if(void 0!==a.matches)for(var m=0;m<a.length&&!(i=s(a[m],n));m++);else{var v;if("["==a.charAt(0)){for(v=d,v+=a,x=0;x<p;x++)v+=")";i=(w=new RegExp("^("+v+")$",o.casing?"i":"")).test(l)}else for(var y=0,b=a.length;y<b;y++)if("\\"!==a.charAt(y)){v=d,v=(v+=a.substr(0,y+1)).replace(/\|$/,"");for(var x=0;x<p;x++)v+=")";var w=new RegExp("^("+v+")$",o.casing?"i":"");if(i=w.test(l))break}d+=a}if(i)break}return n&&(d+=")",p--),i}var l,c,u=n.buffer.slice(),d="",f=!1,p=0;null===o.regexTokens&&function(){var e,t,n=new a,i=[];for(o.regexTokens=[];e=o.tokenizer.exec(o.regex);)switch((t=e[0]).charAt(0)){case"(":i.push(new a(!0));break;case")":c=i.pop(),i.length>0?i[i.length-1].matches.push(c):n.matches.push(c);break;case"{":case"+":case"*":var r=new a(!1,!0),s=(t=t.replace(/[{}]/g,"")).split(","),l=isNaN(s[0])?s[0]:parseInt(s[0]),u=1===s.length?l:isNaN(s[1])?s[1]:parseInt(s[1]);if(r.quantifier={min:l,max:u},i.length>0){var d=i[i.length-1].matches;(e=d.pop()).isGroup||((c=new a(!0)).matches.push(e),e=c),d.push(e),d.push(r)}else(e=n.matches.pop()).isGroup||((c=new a(!0)).matches.push(e),e=c),n.matches.push(e),n.matches.push(r);break;default:i.length>0?i[i.length-1].matches.push(t):n.matches.push(t)}n.matches.length>0&&o.regexTokens.push(n)}(),u.splice(i,0,t),l=u.join("");for(var h=0;h<o.regexTokens.length;h++){var g=o.regexTokens[h];if(f=s(g,g.isGroup))break}return f},cardinality:1}}}}),t})?i.apply(t,r):i)&&(e.exports=o)},function(e,t,n){"use strict";var i,r,o,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};r=[n(2),n(1)],void 0!==(o="function"==typeof(i=function(e,t){return void 0===e.fn.inputmask&&(e.fn.inputmask=function(n,i){var r,o=this[0];if(void 0===i&&(i={}),"string"==typeof n)switch(n){case"unmaskedvalue":return o&&o.inputmask?o.inputmask.unmaskedvalue():e(o).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return o&&o.inputmask?o.inputmask.getemptymask():"";case"hasMaskedValue":return!(!o||!o.inputmask)&&o.inputmask.hasMaskedValue();case"isComplete":return!o||!o.inputmask||o.inputmask.isComplete();case"getmetadata":return o&&o.inputmask?o.inputmask.getmetadata():void 0;case"setvalue":e(o).val(i),o&&void 0===o.inputmask&&e(o).triggerHandler("setvalue");break;case"option":if("string"!=typeof i)return this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(i)});if(o&&void 0!==o.inputmask)return o.inputmask.option(i);break;default:return i.alias=n,r=new t(i),this.each(function(){r.mask(this)})}else{if("object"==(void 0===n?"undefined":a(n)))return r=new t(n),void 0===n.mask&&void 0===n.alias?this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(n);r.mask(this)}):this.each(function(){r.mask(this)});if(void 0===n)return this.each(function(){(r=new t(i)).mask(this)})}}),e.fn.inputmask})?i.apply(t,r):i)&&(e.exports=o)}]),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.flatpickr=t()}(this,function(){"use strict";var e=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};function t(e,t,n){return!1!==n?new Date(e.getTime()).setHours(0,0,0,0)-new Date(t.getTime()).setHours(0,0,0,0):e.getTime()-t.getTime()}var n=function(e,t,n){return n.months[t?"shorthand":"longhand"][e]},i={DAY:864e5},r={_disable:[],_enable:[],allowInput:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enable:[],enableSeconds:!1,enableTime:!1,errorHandler:console.warn,getWeek:function(e){var t=new Date(e.getFullYear(),0,1);return Math.ceil(((e.getTime()-t.getTime())/864e5+t.getDay()+1)/7)},hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1},o={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function(e){var t=e%100;if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"]},a=function(e){return("0"+e).slice(-2)},s=function(e){return!0===e?1:0};function l(e,t,n){void 0===n&&(n=!1);var i;return function(){var r=this,o=arguments;null!==i&&clearTimeout(i),i=window.setTimeout(function(){i=null,n||e.apply(r,o)},t),n&&!i&&e.apply(r,o)}}var c=function(e){return e instanceof Array?e:[e]};function u(e,t,n){if(!0===n)return e.classList.add(t);e.classList.remove(t)}function d(e,t,n){var i=window.document.createElement(e);return t=t||"",n=n||"",i.className=t,void 0!==n&&(i.textContent=n),i}function f(e,t){return t(e)?e:e.parentNode?f(e.parentNode,t):void 0}function p(e){var t=d("div","numInputWrapper"),n=d("input","numInput "+e),i=d("span","arrowUp"),r=d("span","arrowDown");return n.type="text",n.pattern="\\d*",t.appendChild(n),t.appendChild(i),t.appendChild(r),t}var h=function(){},g={D:h,F:function(e,t,n){e.setMonth(n.months.longhand.indexOf(t))},G:function(e,t){e.setHours(parseFloat(t))},H:function(e,t){e.setHours(parseFloat(t))},J:function(e,t){e.setDate(parseFloat(t))},K:function(e,t,n){e.setHours(e.getHours()%12+12*s(new RegExp(n.amPM[1],"i").test(t)))},M:function(e,t,n){e.setMonth(n.months.shorthand.indexOf(t))},S:function(e,t){e.setSeconds(parseFloat(t))},U:function(e,t){return new Date(1e3*parseFloat(t))},W:function(e,t){var n=parseInt(t);return new Date(e.getFullYear(),0,2+7*(n-1),0,0,0,0)},Y:function(e,t){e.setFullYear(parseFloat(t))},Z:function(e,t){return new Date(t)},d:function(e,t){e.setDate(parseFloat(t))},h:function(e,t){e.setHours(parseFloat(t))},i:function(e,t){e.setMinutes(parseFloat(t))},j:function(e,t){e.setDate(parseFloat(t))},l:h,m:function(e,t){e.setMonth(parseFloat(t)-1)},n:function(e,t){e.setMonth(parseFloat(t)-1)},s:function(e,t){e.setSeconds(parseFloat(t))},w:h,y:function(e,t){e.setFullYear(2e3+parseFloat(t))}},m={D:"(\\w+)",F:"(\\w+)",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"",M:"(\\w+)",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"(\\w+)",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},v={Z:function(e){return e.toISOString()},D:function(e,t,n){return t.weekdays.shorthand[v.w(e,t,n)]},F:function(e,t,i){return n(v.n(e,t,i)-1,!1,t)},G:function(e,t,n){return a(v.h(e,t,n))},H:function(e){return a(e.getHours())},J:function(e,t){return void 0!==t.ordinal?e.getDate()+t.ordinal(e.getDate()):e.getDate()},K:function(e,t){return t.amPM[s(e.getHours()>11)]},M:function(e,t){return n(e.getMonth(),!0,t)},S:function(e){return a(e.getSeconds())},U:function(e){return e.getTime()/1e3},W:function(e,t,n){return n.getWeek(e)},Y:function(e){return e.getFullYear()},d:function(e){return a(e.getDate())},h:function(e){return e.getHours()%12?e.getHours()%12:12},i:function(e){return a(e.getMinutes())},j:function(e){return e.getDate()},l:function(e,t){return t.weekdays.longhand[e.getDay()]},m:function(e){return a(e.getMonth()+1)},n:function(e){return e.getMonth()+1},s:function(e){return e.getSeconds()},w:function(e){return e.getDay()},y:function(e){return String(e.getFullYear()).substring(2)}};"function"!=typeof Object.assign&&(Object.assign=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(!e)throw TypeError("Cannot convert undefined or null to object");for(var i=0,r=t;i<r.length;i++){var o=r[i];(a=o)&&Object.keys(a).forEach(function(t){return e[t]=a[t]})}var a;return e});function y(r,o){var h={};h.parseDate=J,h.formatDate=function(e,t){return void 0!==h.config&&void 0!==h.config.formatDate?h.config.formatDate(e,t):t.split("").map(function(t,n,i){return v[t]&&"\\"!==i[n-1]?v[t](e,h.l10n,h.config):"\\"!==t?t:""}).join("")},h._animationLoop=[],h._handlers=[],h._bind=E,h._setHoursFromDate=k,h.changeMonth=_,h.changeYear=q,h.clear=function(e){void 0===e&&(e=!0);h.input.value="",h.altInput&&(h.altInput.value="");h.mobileInput&&(h.mobileInput.value="");h.selectedDates=[],h.latestSelectedDateObj=void 0,h.showTimeInput=!1,h.redraw(),e&&ee("onChange")},h.close=function(){h.isOpen=!1,h.isMobile||(h.calendarContainer.classList.remove("open"),h._input.classList.remove("active"));ee("onClose")},h._createElement=d,h.destroy=function(){void 0!==h.config&&ee("onDestroy");for(var e=h._handlers.length;e--;){var t=h._handlers[e];t.element.removeEventListener(t.event,t.handler)}h._handlers=[],h.mobileInput?(h.mobileInput.parentNode&&h.mobileInput.parentNode.removeChild(h.mobileInput),h.mobileInput=void 0):h.calendarContainer&&h.calendarContainer.parentNode&&h.calendarContainer.parentNode.removeChild(h.calendarContainer);h.altInput&&(h.input.type="text",h.altInput.parentNode&&h.altInput.parentNode.removeChild(h.altInput),delete h.altInput);h.input&&(h.input.type=h.input._type,h.input.classList.remove("flatpickr-input"),h.input.removeAttribute("readonly"),h.input.value="");["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach(function(e){try{delete h[e]}catch(e){}})},h.isEnabled=W,h.jumpToDate=O,h.open=function(e,t){void 0===t&&(t=h._input);if(h.isMobile)return e&&(e.preventDefault(),e.target&&e.target.blur()),setTimeout(function(){void 0!==h.mobileInput&&h.mobileInput.click()},0),void ee("onOpen");if(h._input.disabled||h.config.inline)return;var n=h.isOpen;h.isOpen=!0,X(t),h.calendarContainer.classList.add("open"),h._input.classList.add("active"),!n&&ee("onOpen")},h.redraw=V,h.set=function(e,t){null!==e&&"object"==typeof e?Object.assign(h.config,e):h.config[e]=t;h.redraw(),O()},h.setDate=function(e,t,n){void 0===t&&(t=!1);if(0!==e&&!e)return h.clear(t);Z(e,n),h.showTimeInput=h.selectedDates.length>0,h.latestSelectedDateObj=h.selectedDates[0],h.redraw(),O(),k(),re(t),t&&ee("onChange")},h.toggle=function(){if(h.isOpen)return h.close();h.open()};function y(e){return e.bind(h)}function b(e){if(h.config.noCalendar&&0===h.selectedDates.length){var t=h.config.minDate;h.setDate((new Date).setHours(t?t.getHours():h.config.defaultHour,t?t.getMinutes():h.config.defaultMinute,t&&h.config.enableSeconds?t.getSeconds():h.config.defaultSeconds),!1),w(),re()}!function(e){e.preventDefault();var t="keydown"===e.type,n=e.target;void 0!==h.amPM&&e.target===h.amPM&&(h.amPM.textContent=h.l10n.amPM[s(h.amPM.textContent===h.l10n.amPM[0])]);var i=Number(n.min),r=Number(n.max),o=Number(n.step),l=parseInt(n.value,10),c=e.delta||(t?38===e.which?1:-1:Math.max(-1,Math.min(1,e.wheelDelta||-e.deltaY))||0),u=l+o*c;if(void 0!==n.value&&2===n.value.length){var d=n===h.hourElement,f=n===h.minuteElement;u<i?(u=r+u+s(!d)+(s(d)&&s(!h.amPM)),f&&N(void 0,-1,h.hourElement)):u>r&&(u=n===h.hourElement?u-r-s(!h.amPM):i,f&&N(void 0,1,h.hourElement)),h.amPM&&d&&(1===o?u+l===23:Math.abs(u-l)>o)&&(h.amPM.textContent=h.l10n.amPM[s(h.amPM.textContent===h.l10n.amPM[0])]),n.value=a(u)}}(e),0!==h.selectedDates.length&&(!h.minDateHasTime||"input"!==e.type||e.target.value.length>=2?(w(),re()):setTimeout(function(){w(),re()},1e3))}function w(){if(void 0!==h.hourElement&&void 0!==h.minuteElement){var e=(parseInt(h.hourElement.value.slice(-2),10)||0)%24,n=(parseInt(h.minuteElement.value,10)||0)%60,i=void 0!==h.secondElement?(parseInt(h.secondElement.value,10)||0)%60:0;void 0!==h.amPM&&(r=e,o=h.amPM.textContent,e=r%12+12*s(o===h.l10n.amPM[1]));var r,o;h.config.minDate&&h.minDateHasTime&&h.latestSelectedDateObj&&0===t(h.latestSelectedDateObj,h.config.minDate)&&(e=Math.max(e,h.config.minDate.getHours()))===h.config.minDate.getHours()&&(n=Math.max(n,h.config.minDate.getMinutes())),h.config.maxDate&&h.maxDateHasTime&&h.latestSelectedDateObj&&0===t(h.latestSelectedDateObj,h.config.maxDate)&&(e=Math.min(e,h.config.maxDate.getHours()))===h.config.maxDate.getHours()&&(n=Math.min(n,h.config.maxDate.getMinutes())),C(e,n,i)}}function k(e){var t=e||h.latestSelectedDateObj;t&&C(t.getHours(),t.getMinutes(),t.getSeconds())}function C(e,t,n){void 0!==h.latestSelectedDateObj&&h.latestSelectedDateObj.setHours(e%24,t,n||0,0),h.hourElement&&h.minuteElement&&!h.isMobile&&(h.hourElement.value=a(h.config.time_24hr?e:(12+e)%12+12*s(e%12==0)),h.minuteElement.value=a(t),void 0!==h.amPM&&(h.amPM.textContent=h.l10n.amPM[s(e>=12)]),void 0!==h.secondElement&&(h.secondElement.value=a(n)))}function S(e){var t=parseInt(e.target.value)+(e.delta||0);4!==t.toString().length&&"Enter"!==e.key||(h.currentYearElement.blur(),/[^\d]/.test(t.toString())||q(t))}function E(e,t,n){return t instanceof Array?t.forEach(function(t){return E(e,t,n)}):e instanceof Array?e.forEach(function(e){return E(e,t,n)}):(e.addEventListener(t,n),void h._handlers.push({element:e,event:t,handler:n}))}function T(e){return function(t){1===t.which&&e(t)}}function P(){ee("onChange")}function D(){h._animationLoop.forEach(function(e){return e()}),h._animationLoop=[]}function M(e){if(h.daysContainer&&h.daysContainer.childNodes.length>1)switch(e.animationName){case"fpSlideLeft":h.daysContainer.lastChild&&h.daysContainer.lastChild.classList.remove("slideLeftNew"),h.daysContainer.removeChild(h.daysContainer.firstChild),h.days=h.daysContainer.firstChild,D();break;case"fpSlideRight":h.daysContainer.firstChild&&h.daysContainer.firstChild.classList.remove("slideRightNew"),h.daysContainer.removeChild(h.daysContainer.lastChild),h.days=h.daysContainer.firstChild,D()}}function A(e){switch(e.animationName){case"fpSlideLeftNew":case"fpSlideRightNew":h.navigationCurrentMonth.classList.remove("slideLeftNew"),h.navigationCurrentMonth.classList.remove("slideRightNew");for(var t=h.navigationCurrentMonth;t.nextSibling&&/curr/.test(t.nextSibling.className);)h.monthNav.removeChild(t.nextSibling);for(;t.previousSibling&&/curr/.test(t.previousSibling.className);)h.monthNav.removeChild(t.previousSibling);h.oldCurMonth=void 0}}function O(e){var t=void 0!==e?J(e):h.latestSelectedDateObj||(h.config.minDate&&h.config.minDate>h.now?h.config.minDate:h.config.maxDate&&h.config.maxDate<h.now?h.config.maxDate:h.now);try{void 0!==t&&(h.currentYear=t.getFullYear(),h.currentMonth=t.getMonth())}catch(e){e.message="Invalid date supplied: "+t,h.config.errorHandler(e)}h.redraw()}function L(e){~e.target.className.indexOf("arrow")&&N(e,e.target.classList.contains("arrowUp")?1:-1)}function N(e,t,n){var i=e&&e.target,r=n||i&&i.parentNode&&i.parentNode.firstChild,o=te("increment");o.delta=t,r&&r.dispatchEvent(o)}function I(e,n,i,r){var o=W(n,!0),a=d("span","flatpickr-day "+e,n.getDate().toString());a.dateObj=n,a.$i=r,a.setAttribute("aria-label",h.formatDate(n,h.config.ariaDateFormat)),0===t(n,h.now)&&(h.todayDateElem=a,a.classList.add("today")),o?(a.tabIndex=-1,ne(n)&&(a.classList.add("selected"),h.selectedDateElem=a,"range"===h.config.mode&&(u(a,"startRange",h.selectedDates[0]&&0===t(n,h.selectedDates[0])),u(a,"endRange",h.selectedDates[1]&&0===t(n,h.selectedDates[1]))))):(a.classList.add("disabled"),h.selectedDates[0]&&h.minRangeDate&&n>h.minRangeDate&&n<h.selectedDates[0]?h.minRangeDate=n:h.selectedDates[0]&&h.maxRangeDate&&n<h.maxRangeDate&&n>h.selectedDates[0]&&(h.maxRangeDate=n)),"range"===h.config.mode&&(s=n,!("range"!==h.config.mode||h.selectedDates.length<2)&&t(s,h.selectedDates[0])>=0&&t(s,h.selectedDates[1])<=0&&!ne(n)&&a.classList.add("inRange"),1===h.selectedDates.length&&void 0!==h.minRangeDate&&void 0!==h.maxRangeDate&&(n<h.minRangeDate||n>h.maxRangeDate)&&a.classList.add("notAllowed"));var s;return h.weekNumbers&&"prevMonthDay"!==e&&i%7==1&&h.weekNumbers.insertAdjacentHTML("beforeend","<span class='disabled flatpickr-day'>"+h.config.getWeek(n)+"</span>"),ee("onDayCreate",a),a}function j(e,t){var n=e+t||0,i=void 0!==e?h.days.childNodes[n]:h.selectedDateElem||h.todayDateElem||h.days.childNodes[0],r=function(){(i=i||h.days.childNodes[n]).focus(),"range"===h.config.mode&&z(i)};if(void 0===i&&0!==t)return t>0?(h.changeMonth(1,!0,void 0,!0),n%=42):t<0&&(h.changeMonth(-1,!0,void 0,!0),n+=42),F(r);r()}function F(e){!0===h.config.animate?h._animationLoop.push(e):e()}function R(e){if(void 0!==h.daysContainer){var t=(new Date(h.currentYear,h.currentMonth,1).getDay()-h.l10n.firstDayOfWeek+7)%7,n="range"===h.config.mode,i=h.utils.getDaysInMonth((h.currentMonth-1+12)%12),r=h.utils.getDaysInMonth(),o=window.document.createDocumentFragment(),a=i+1-t,s=0;for(h.weekNumbers&&h.weekNumbers.firstChild&&(h.weekNumbers.textContent=""),n&&(h.minRangeDate=new Date(h.currentYear,h.currentMonth-1,a),h.maxRangeDate=new Date(h.currentYear,h.currentMonth+1,(42-t)%r));a<=i;a++,s++)o.appendChild(I("prevMonthDay",new Date(h.currentYear,h.currentMonth-1,a),a,s));for(a=1;a<=r;a++,s++)o.appendChild(I("",new Date(h.currentYear,h.currentMonth,a),a,s));for(var l=r+1;l<=42-t;l++,s++)o.appendChild(I("nextMonthDay",new Date(h.currentYear,h.currentMonth+1,l%r),l,s));n&&1===h.selectedDates.length&&o.childNodes[0]?(h._hidePrevMonthArrow=h._hidePrevMonthArrow||!!h.minRangeDate&&h.minRangeDate>o.childNodes[0].dateObj,h._hideNextMonthArrow=h._hideNextMonthArrow||!!h.maxRangeDate&&h.maxRangeDate<new Date(h.currentYear,h.currentMonth+1,1)):ie();var c=d("div","dayContainer");if(c.appendChild(o),h.config.animate&&void 0!==e)for(;h.daysContainer.childNodes.length>1;)h.daysContainer.removeChild(h.daysContainer.firstChild);else!function(e){for(;e.firstChild;)e.removeChild(e.firstChild)}(h.daysContainer);e&&e>=0?h.daysContainer.appendChild(c):h.daysContainer.insertBefore(c,h.daysContainer.firstChild),h.days=h.daysContainer.childNodes[0]}}function $(){h.weekdayContainer||(h.weekdayContainer=d("div","flatpickr-weekdays"));var e=h.l10n.firstDayOfWeek,t=h.l10n.weekdays.shorthand.slice();return e>0&&e<t.length&&(t=t.splice(e,t.length).concat(t.splice(0,e))),h.weekdayContainer.innerHTML="\n    <span class=flatpickr-weekday>\n      "+t.join("</span><span class=flatpickr-weekday>")+"\n    </span>\n    ",h.weekdayContainer}function _(e,t,i,r){void 0===t&&(t=!0),void 0===i&&(i=h.config.animate),void 0===r&&(r=!1);var o=t?e:e-h.currentMonth;if(!(o<0&&h._hidePrevMonthArrow||o>0&&h._hideNextMonthArrow)){if(h.currentMonth+=o,(h.currentMonth<0||h.currentMonth>11)&&(h.currentYear+=h.currentMonth>11?1:-1,h.currentMonth=(h.currentMonth+12)%12,ee("onYearChange")),R(i?o:void 0),!i)return ee("onMonthChange"),ie();var a=h.navigationCurrentMonth;if(o<0)for(;a.nextSibling&&/curr/.test(a.nextSibling.className);)h.monthNav.removeChild(a.nextSibling);else if(o>0)for(;a.previousSibling&&/curr/.test(a.previousSibling.className);)h.monthNav.removeChild(a.previousSibling);h.oldCurMonth=h.navigationCurrentMonth,h.navigationCurrentMonth=h.monthNav.insertBefore(h.oldCurMonth.cloneNode(!0),o>0?h.oldCurMonth.nextSibling:h.oldCurMonth);var s=h.daysContainer;if(s.firstChild&&s.lastChild&&(o>0?(s.firstChild.classList.add("slideLeft"),s.lastChild.classList.add("slideLeftNew"),h.oldCurMonth.classList.add("slideLeft"),h.navigationCurrentMonth.classList.add("slideLeftNew")):o<0&&(s.firstChild.classList.add("slideRightNew"),s.lastChild.classList.add("slideRight"),h.oldCurMonth.classList.add("slideRight"),h.navigationCurrentMonth.classList.add("slideRightNew"))),h.currentMonthElement=h.navigationCurrentMonth.firstChild,h.currentYearElement=h.navigationCurrentMonth.lastChild.childNodes[0],ie(),h.oldCurMonth.firstChild&&(h.oldCurMonth.firstChild.textContent=n(h.currentMonth-o,h.config.shorthandCurrentMonth,h.l10n)),F(function(){return ee("onMonthChange")}),r&&document.activeElement&&document.activeElement.$i){var l=document.activeElement.$i;F(function(){j(l,0)})}}}function H(e){return!(!h.config.appendTo||!h.config.appendTo.contains(e))||h.calendarContainer.contains(e)}function B(e){if(h.isOpen&&!h.config.inline){var t=H(e.target),n=e.target===h.input||e.target===h.altInput||h.element.contains(e.target)||e.path&&e.path.indexOf&&(~e.path.indexOf(h.input)||~e.path.indexOf(h.altInput));("blur"===e.type?n&&e.relatedTarget&&!H(e.relatedTarget):!n&&!t)&&-1===h.config.ignoredFocusElements.indexOf(e.target)&&(h.close(),"range"===h.config.mode&&1===h.selectedDates.length&&(h.clear(!1),h.redraw()))}}function q(e){if(!(!e||h.currentYearElement.min&&e<parseInt(h.currentYearElement.min)||h.currentYearElement.max&&e>parseInt(h.currentYearElement.max))){var t=e,n=h.currentYear!==t;h.currentYear=t||h.currentYear,h.config.maxDate&&h.currentYear===h.config.maxDate.getFullYear()?h.currentMonth=Math.min(h.config.maxDate.getMonth(),h.currentMonth):h.config.minDate&&h.currentYear===h.config.minDate.getFullYear()&&(h.currentMonth=Math.max(h.config.minDate.getMonth(),h.currentMonth)),n&&(h.redraw(),ee("onYearChange"))}}function W(e,n){void 0===n&&(n=!0);var i=h.parseDate(e,void 0,n);if(h.config.minDate&&i&&t(i,h.config.minDate,void 0!==n?n:!h.minDateHasTime)<0||h.config.maxDate&&i&&t(i,h.config.maxDate,void 0!==n?n:!h.maxDateHasTime)>0)return!1;if(!h.config.enable.length&&!h.config.disable.length)return!0;if(void 0===i)return!1;for(var r=h.config.enable.length>0,o=r?h.config.enable:h.config.disable,a=0,s=void 0;a<o.length;a++){if("function"==typeof(s=o[a])&&s(i))return r;if(s instanceof Date&&void 0!==i&&s.getTime()===i.getTime())return r;if("string"==typeof s&&void 0!==i){var l=h.parseDate(s,void 0,!0);return l&&l.getTime()===i.getTime()?r:!r}if("object"==typeof s&&void 0!==i&&s.from&&s.to&&i.getTime()>=s.from.getTime()&&i.getTime()<=s.to.getTime())return r}return!r}function Y(e){var t=e.target===h._input,n=H(e.target),i=h.config.allowInput,r=h.isOpen&&(!i||!t),o=h.config.inline&&t&&!i;if("Enter"===e.key&&t){if(i)return h.setDate(h._input.value,!0,e.target===h.altInput?h.config.altFormat:h.config.dateFormat),e.target.blur();h.open()}else if(n||r||o){var a=!!h.timeContainer&&h.timeContainer.contains(e.target);switch(e.key){case"Enter":a?re():K(e);break;case"Escape":e.preventDefault(),h.close();break;case"Backspace":case"Delete":t&&!h.config.allowInput&&h.clear();break;case"ArrowLeft":case"ArrowRight":if(a)h.hourElement&&h.hourElement.focus();else if(e.preventDefault(),h.daysContainer){var s="ArrowRight"===e.key?1:-1;e.ctrlKey?_(s,!0,void 0,!0):j(e.target.$i,s)}break;case"ArrowUp":case"ArrowDown":e.preventDefault();var l="ArrowDown"===e.key?1:-1;h.daysContainer&&void 0!==e.target.$i?e.ctrlKey?(q(h.currentYear-l),j(e.target.$i,0)):a||j(e.target.$i,7*l):h.config.enableTime&&(!a&&h.hourElement&&h.hourElement.focus(),b(e),h._debouncedChange());break;case"Tab":e.target===h.hourElement?(e.preventDefault(),h.minuteElement.select()):e.target===h.minuteElement&&(h.secondElement||h.amPM)?(e.preventDefault(),void 0!==h.secondElement?h.secondElement.focus():void 0!==h.amPM&&h.amPM.focus()):e.target===h.secondElement&&h.amPM&&(e.preventDefault(),h.amPM.focus());break;case h.l10n.amPM[0].charAt(0):void 0!==h.amPM&&e.target===h.amPM&&(h.amPM.textContent=h.l10n.amPM[0],w(),re());break;case h.l10n.amPM[1].charAt(0):void 0!==h.amPM&&e.target===h.amPM&&(h.amPM.textContent=h.l10n.amPM[1],w(),re())}ee("onKeyDown",e)}}function z(e){if(1===h.selectedDates.length&&e.classList.contains("flatpickr-day")&&void 0!==h.minRangeDate&&void 0!==h.maxRangeDate){for(var t=e.dateObj,n=h.parseDate(h.selectedDates[0],void 0,!0),r=Math.min(t.getTime(),h.selectedDates[0].getTime()),o=Math.max(t.getTime(),h.selectedDates[0].getTime()),a=!1,s=r;s<o;s+=i.DAY)if(!W(new Date(s))){a=!0;break}for(var l=function(i,s){var l=s.getTime(),c=l<h.minRangeDate.getTime()||l>h.maxRangeDate.getTime(),u=h.days.childNodes[i];if(c)return u.classList.add("notAllowed"),["inRange","startRange","endRange"].forEach(function(e){u.classList.remove(e)}),"continue";if(a&&!c)return"continue";["startRange","inRange","endRange","notAllowed"].forEach(function(e){u.classList.remove(e)});var d=Math.max(h.minRangeDate.getTime(),r),f=Math.min(h.maxRangeDate.getTime(),o);e.classList.add(t<h.selectedDates[0]?"startRange":"endRange"),n<t&&l===n.getTime()?u.classList.add("startRange"):n>t&&l===n.getTime()&&u.classList.add("endRange"),l>=d&&l<=f&&u.classList.add("inRange")},c=0,u=h.days.childNodes[c].dateObj;c<42;c++,u=h.days.childNodes[c]&&h.days.childNodes[c].dateObj)l(c,u)}}function U(){!h.isOpen||h.config.static||h.config.inline||X()}function G(e){return function(t){var n=h.config["_"+e+"Date"]=h.parseDate(t),i=h.config["_"+("min"===e?"max":"min")+"Date"];void 0!==n&&(h["min"===e?"minDateHasTime":"maxDateHasTime"]=n.getHours()>0||n.getMinutes()>0||n.getSeconds()>0),h.selectedDates&&(h.selectedDates=h.selectedDates.filter(function(e){return W(e)}),h.selectedDates.length||"min"!==e||k(n),re()),h.daysContainer&&(V(),void 0!==n?h.currentYearElement[e]=n.getFullYear().toString():h.currentYearElement.removeAttribute(e),h.currentYearElement.disabled=!!i&&void 0!==n&&i.getFullYear()===n.getFullYear())}}function X(e){if(void 0===e&&(e=h._positionElement),void 0!==h.calendarContainer){var t=h.calendarContainer.offsetHeight,n=h.calendarContainer.offsetWidth,i=h.config.position,r=e.getBoundingClientRect(),o=window.innerHeight-r.bottom,a="above"===i||"below"!==i&&o<t&&r.top>t,s=window.pageYOffset+r.top+(a?-t-2:e.offsetHeight+2);if(u(h.calendarContainer,"arrowTop",!a),u(h.calendarContainer,"arrowBottom",a),!h.config.inline){var l=window.pageXOffset+r.left,c=window.document.body.offsetWidth-r.right,d=l+n>window.document.body.offsetWidth;u(h.calendarContainer,"rightMost",d),h.config.static||(h.calendarContainer.style.top=s+"px",d?(h.calendarContainer.style.left="auto",h.calendarContainer.style.right=c+"px"):(h.calendarContainer.style.left=l+"px",h.calendarContainer.style.right="auto"))}}}function V(){h.config.noCalendar||h.isMobile||($(),ie(),R())}function K(e){e.preventDefault(),e.stopPropagation();var n=f(e.target,function(e){return e.classList&&e.classList.contains("flatpickr-day")&&!e.classList.contains("disabled")&&!e.classList.contains("notAllowed")});if(void 0!==n){var i=n,r=h.latestSelectedDateObj=new Date(i.dateObj.getTime()),o=r.getMonth()!==h.currentMonth&&"range"!==h.config.mode;if(h.selectedDateElem=i,"single"===h.config.mode)h.selectedDates=[r];else if("multiple"===h.config.mode){var a=ne(r);a?h.selectedDates.splice(parseInt(a),1):h.selectedDates.push(r)}else"range"===h.config.mode&&(2===h.selectedDates.length&&h.clear(),h.selectedDates.push(r),0!==t(r,h.selectedDates[0],!0)&&h.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()}));if(w(),o){var s=h.currentYear!==r.getFullYear();h.currentYear=r.getFullYear(),h.currentMonth=r.getMonth(),s&&ee("onYearChange"),ee("onMonthChange")}if(R(),h.config.minDate&&h.minDateHasTime&&h.config.enableTime&&0===t(r,h.config.minDate)&&k(h.config.minDate),re(),h.config.enableTime&&setTimeout(function(){return h.showTimeInput=!0},50),"range"===h.config.mode&&(1===h.selectedDates.length?(z(i),h._hidePrevMonthArrow=h._hidePrevMonthArrow||void 0!==h.minRangeDate&&h.minRangeDate>h.days.childNodes[0].dateObj,h._hideNextMonthArrow=h._hideNextMonthArrow||void 0!==h.maxRangeDate&&h.maxRangeDate<new Date(h.currentYear,h.currentMonth+1,1)):ie()),ee("onChange"),o?F(function(){return h.selectedDateElem&&h.selectedDateElem.focus()}):j(i.$i,0),void 0!==h.hourElement&&setTimeout(function(){return void 0!==h.hourElement&&h.hourElement.select()},451),h.config.closeOnSelect){var l="single"===h.config.mode&&!h.config.enableTime,c="range"===h.config.mode&&2===h.selectedDates.length&&!h.config.enableTime;(l||c)&&h.close()}}}function Z(e,t){var n=[];if(e instanceof Array)n=e.map(function(e){return h.parseDate(e,t)});else if(e instanceof Date||"number"==typeof e)n=[h.parseDate(e,t)];else if("string"==typeof e)switch(h.config.mode){case"single":n=[h.parseDate(e,t)];break;case"multiple":n=e.split(h.config.conjunction).map(function(e){return h.parseDate(e,t)});break;case"range":n=e.split(h.l10n.rangeSeparator).map(function(e){return h.parseDate(e,t)})}else h.config.errorHandler(new Error("Invalid date supplied: "+JSON.stringify(e)));h.selectedDates=n.filter(function(e){return e instanceof Date&&W(e,!1)}),h.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()})}function Q(e){return e.map(function(e){return"string"==typeof e||"number"==typeof e||e instanceof Date?h.parseDate(e,void 0,!0):e&&"object"==typeof e&&e.from&&e.to?{from:h.parseDate(e.from,void 0),to:h.parseDate(e.to,void 0)}:e}).filter(function(e){return e})}function J(e,t,n){if(0===e||e){var i,r=e;if(e instanceof Date)i=new Date(e.getTime());else if("string"!=typeof e&&void 0!==e.toFixed)i=new Date(e);else if("string"==typeof e){var o=t||(h.config||x.defaultConfig).dateFormat,a=String(e).trim();if("today"===a)i=new Date,n=!0;else if(/Z$/.test(a)||/GMT$/.test(a))i=new Date(e);else if(h.config&&h.config.parseDate)i=h.config.parseDate(e,o);else{i=h.config&&h.config.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0);for(var s=void 0,l=[],c=0,u=0,d="";c<o.length;c++){var f=o[c],p="\\"===f,v="\\"===o[c-1]||p;if(m[f]&&!v){d+=m[f];var y=new RegExp(d).exec(e);y&&(s=!0)&&l["Y"!==f?"push":"unshift"]({fn:g[f],val:y[++u]})}else p||(d+=".");l.forEach(function(e){var t=e.fn,n=e.val;return i=t(i,n,h.l10n)||i})}i=s?i:void 0}}if(i instanceof Date)return!0===n&&i.setHours(0,0,0,0),i;h.config.errorHandler(new Error("Invalid date provided: "+r))}}function ee(e,t){var n=h.config[e];if(void 0!==n&&n.length>0)for(var i=0;n[i]&&i<n.length;i++)n[i](h.selectedDates,h.input.value,h,t);"onChange"===e&&(h.input.dispatchEvent(te("change")),h.input.dispatchEvent(te("input")))}function te(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}function ne(e){for(var n=0;n<h.selectedDates.length;n++)if(0===t(h.selectedDates[n],e))return""+n;return!1}function ie(){h.config.noCalendar||h.isMobile||!h.monthNav||(h.currentMonthElement.textContent=n(h.currentMonth,h.config.shorthandCurrentMonth,h.l10n)+" ",h.currentYearElement.value=h.currentYear.toString(),h._hidePrevMonthArrow=void 0!==h.config.minDate&&(h.currentYear===h.config.minDate.getFullYear()?h.currentMonth<=h.config.minDate.getMonth():h.currentYear<h.config.minDate.getFullYear()),h._hideNextMonthArrow=void 0!==h.config.maxDate&&(h.currentYear===h.config.maxDate.getFullYear()?h.currentMonth+1>h.config.maxDate.getMonth():h.currentYear>h.config.maxDate.getFullYear()))}function re(e){if(void 0===e&&(e=!0),!h.selectedDates.length)return h.clear(e);void 0!==h.mobileInput&&h.mobileFormatStr&&(h.mobileInput.value=void 0!==h.latestSelectedDateObj?h.formatDate(h.latestSelectedDateObj,h.mobileFormatStr):"");var t="range"!==h.config.mode?h.config.conjunction:h.l10n.rangeSeparator;h.input.value=h.selectedDates.map(function(e){return h.formatDate(e,h.config.dateFormat)}).join(t),void 0!==h.altInput&&(h.altInput.value=h.selectedDates.map(function(e){return h.formatDate(e,h.config.altFormat)}).join(t)),!1!==e&&ee("onValueUpdate")}function oe(e){e.preventDefault();var t=h.currentYearElement.parentNode&&h.currentYearElement.parentNode.contains(e.target);if(e.target===h.currentMonthElement||t){var n=(i=e,(i.wheelDelta||-i.deltaY)>=0?1:-1);t?(q(h.currentYear+n),e.target.value=h.currentYear.toString()):h.changeMonth(n,!0,!1)}var i}function ae(e){var t=h.prevMonthNav.contains(e.target),n=h.nextMonthNav.contains(e.target);t||n?_(t?-1:1):e.target===h.currentYearElement?(e.preventDefault(),h.currentYearElement.select()):"arrowUp"===e.target.className?h.changeYear(h.currentYear+1):"arrowDown"===e.target.className&&h.changeYear(h.currentYear-1)}return h.element=h.input=r,h.isOpen=!1,function(){var t=["wrap","weekNumbers","allowInput","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],n=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange"];h.config=e({},x.defaultConfig);var i=e({},o,JSON.parse(JSON.stringify(r.dataset||{}))),a={};Object.defineProperty(h.config,"enable",{get:function(){return h.config._enable||[]},set:function(e){h.config._enable=Q(e)}}),Object.defineProperty(h.config,"disable",{get:function(){return h.config._disable||[]},set:function(e){h.config._disable=Q(e)}}),!i.dateFormat&&i.enableTime&&(a.dateFormat=i.noCalendar?"H:i"+(i.enableSeconds?":S":""):x.defaultConfig.dateFormat+" H:i"+(i.enableSeconds?":S":"")),i.altInput&&i.enableTime&&!i.altFormat&&(a.altFormat=i.noCalendar?"h:i"+(i.enableSeconds?":S K":" K"):x.defaultConfig.altFormat+" h:i"+(i.enableSeconds?":S":"")+" K"),Object.defineProperty(h.config,"minDate",{get:function(){return h.config._minDate},set:G("min")}),Object.defineProperty(h.config,"maxDate",{get:function(){return h.config._maxDate},set:G("max")}),Object.assign(h.config,a,i);for(var s=0;s<t.length;s++)h.config[t[s]]=!0===h.config[t[s]]||"true"===h.config[t[s]];for(var s=n.length;s--;)void 0!==h.config[n[s]]&&(h.config[n[s]]=c(h.config[n[s]]||[]).map(y));for(var s=0;s<h.config.plugins.length;s++){var l=h.config.plugins[s](h)||{};for(var u in l)~n.indexOf(u)?h.config[u]=c(l[u]).map(y).concat(h.config[u]):void 0===i[u]&&(h.config[u]=l[u])}h.isMobile=!h.config.disableMobile&&!h.config.inline&&"single"===h.config.mode&&!h.config.disable.length&&!h.config.enable.length&&!h.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),ee("onParseConfig")}(),"object"!=typeof h.config.locale&&void 0===x.l10ns[h.config.locale]&&h.config.errorHandler(new Error("flatpickr: invalid locale "+h.config.locale)),h.l10n=e({},x.l10ns.default,"object"==typeof h.config.locale?h.config.locale:"default"!==h.config.locale?x.l10ns[h.config.locale]:void 0),m.K="("+h.l10n.amPM[0]+"|"+h.l10n.amPM[1]+"|"+h.l10n.amPM[0].toLowerCase()+"|"+h.l10n.amPM[1].toLowerCase()+")",h.input=h.config.wrap?r.querySelector("[data-input]"):r,h.input?(h.input._type=h.input.type,h.input.type="text",h.input.classList.add("flatpickr-input"),h._input=h.input,h.config.altInput&&(h.altInput=d(h.input.nodeName,h.input.className+" "+h.config.altInputClass),h._input=h.altInput,h.altInput.placeholder=h.input.placeholder,h.altInput.disabled=h.input.disabled,h.altInput.required=h.input.required,h.altInput.type="text",h.input.type="hidden",!h.config.static&&h.input.parentNode&&h.input.parentNode.insertBefore(h.altInput,h.input.nextSibling)),h.config.allowInput||h._input.setAttribute("readonly","readonly"),h._positionElement=h.config.positionElement||h._input):h.config.errorHandler(new Error("Invalid input element specified")),function(){h.selectedDates=[],h.now=new Date;var e=h.config.defaultDate||h.input.value;e&&Z(e,h.config.dateFormat);var t=h.selectedDates.length?h.selectedDates[0]:h.config.minDate&&h.config.minDate.getTime()>h.now.getTime()?h.config.minDate:h.config.maxDate&&h.config.maxDate.getTime()<h.now.getTime()?h.config.maxDate:h.now;h.currentYear=t.getFullYear(),h.currentMonth=t.getMonth(),h.selectedDates.length&&(h.latestSelectedDateObj=h.selectedDates[0]),h.minDateHasTime=!!h.config.minDate&&(h.config.minDate.getHours()>0||h.config.minDate.getMinutes()>0||h.config.minDate.getSeconds()>0),h.maxDateHasTime=!!h.config.maxDate&&(h.config.maxDate.getHours()>0||h.config.maxDate.getMinutes()>0||h.config.maxDate.getSeconds()>0),Object.defineProperty(h,"showTimeInput",{get:function(){return h._showTimeInput},set:function(e){h._showTimeInput=e,h.calendarContainer&&u(h.calendarContainer,"showTimeInput",e),X()}})}(),h.utils={getDaysInMonth:function(e,t){return void 0===e&&(e=h.currentMonth),void 0===t&&(t=h.currentYear),1===e&&(t%4==0&&t%100!=0||t%400==0)?29:h.l10n.daysInMonth[e]}},h.isMobile||function(){var e=window.document.createDocumentFragment();if(h.calendarContainer=d("div","flatpickr-calendar"),h.calendarContainer.tabIndex=-1,!h.config.noCalendar){if(e.appendChild(function(){var e=window.document.createDocumentFragment();h.monthNav=d("div","flatpickr-month"),h.prevMonthNav=d("span","flatpickr-prev-month"),h.prevMonthNav.innerHTML=h.config.prevArrow,h.currentMonthElement=d("span","cur-month"),h.currentMonthElement.title=h.l10n.scrollTitle;var t=p("cur-year");return h.currentYearElement=t.childNodes[0],h.currentYearElement.title=h.l10n.scrollTitle,h.config.minDate&&(h.currentYearElement.min=h.config.minDate.getFullYear().toString()),h.config.maxDate&&(h.currentYearElement.max=h.config.maxDate.getFullYear().toString(),h.currentYearElement.disabled=!!h.config.minDate&&h.config.minDate.getFullYear()===h.config.maxDate.getFullYear()),h.nextMonthNav=d("span","flatpickr-next-month"),h.nextMonthNav.innerHTML=h.config.nextArrow,h.navigationCurrentMonth=d("div","flatpickr-current-month"),h.navigationCurrentMonth.appendChild(h.currentMonthElement),h.navigationCurrentMonth.appendChild(t),e.appendChild(h.prevMonthNav),e.appendChild(h.navigationCurrentMonth),e.appendChild(h.nextMonthNav),h.monthNav.appendChild(e),Object.defineProperty(h,"_hidePrevMonthArrow",{get:function(){return h.__hidePrevMonthArrow},set:function(e){h.__hidePrevMonthArrow!==e&&(h.prevMonthNav.style.display=e?"none":"block"),h.__hidePrevMonthArrow=e}}),Object.defineProperty(h,"_hideNextMonthArrow",{get:function(){return h.__hideNextMonthArrow},set:function(e){h.__hideNextMonthArrow!==e&&(h.nextMonthNav.style.display=e?"none":"block"),h.__hideNextMonthArrow=e}}),ie(),h.monthNav}()),h.innerContainer=d("div","flatpickr-innerContainer"),h.config.weekNumbers){var t=function(){h.calendarContainer.classList.add("hasWeeks");var e=d("div","flatpickr-weekwrapper");e.appendChild(d("span","flatpickr-weekday",h.l10n.weekAbbreviation));var t=d("div","flatpickr-weeks");return e.appendChild(t),{weekWrapper:e,weekNumbers:t}}(),n=t.weekWrapper,i=t.weekNumbers;h.innerContainer.appendChild(n),h.weekNumbers=i,h.weekWrapper=n}h.rContainer=d("div","flatpickr-rContainer"),h.rContainer.appendChild($()),h.daysContainer||(h.daysContainer=d("div","flatpickr-days"),h.daysContainer.tabIndex=-1),R(),h.rContainer.appendChild(h.daysContainer),h.innerContainer.appendChild(h.rContainer),e.appendChild(h.innerContainer)}h.config.enableTime&&e.appendChild(function(){h.calendarContainer.classList.add("hasTime"),h.config.noCalendar&&h.calendarContainer.classList.add("noCalendar"),h.timeContainer=d("div","flatpickr-time"),h.timeContainer.tabIndex=-1;var e=d("span","flatpickr-time-separator",":"),t=p("flatpickr-hour");h.hourElement=t.childNodes[0];var n=p("flatpickr-minute");if(h.minuteElement=n.childNodes[0],h.hourElement.tabIndex=h.minuteElement.tabIndex=-1,h.hourElement.value=a(h.latestSelectedDateObj?h.latestSelectedDateObj.getHours():h.config.time_24hr?h.config.defaultHour:function(e){switch(e%24){case 0:case 12:return 12;default:return e%12}}(h.config.defaultHour)),h.minuteElement.value=a(h.latestSelectedDateObj?h.latestSelectedDateObj.getMinutes():h.config.defaultMinute),h.hourElement.step=h.config.hourIncrement.toString(),h.minuteElement.step=h.config.minuteIncrement.toString(),h.hourElement.min=h.config.time_24hr?"0":"1",h.hourElement.max=h.config.time_24hr?"23":"12",h.minuteElement.min="0",h.minuteElement.max="59",h.hourElement.title=h.minuteElement.title=h.l10n.scrollTitle,h.timeContainer.appendChild(t),h.timeContainer.appendChild(e),h.timeContainer.appendChild(n),h.config.time_24hr&&h.timeContainer.classList.add("time24hr"),h.config.enableSeconds){h.timeContainer.classList.add("hasSeconds");var i=p("flatpickr-second");h.secondElement=i.childNodes[0],h.secondElement.value=a(h.latestSelectedDateObj?h.latestSelectedDateObj.getSeconds():h.config.defaultSeconds),h.secondElement.step=h.minuteElement.step,h.secondElement.min=h.minuteElement.min,h.secondElement.max=h.minuteElement.max,h.timeContainer.appendChild(d("span","flatpickr-time-separator",":")),h.timeContainer.appendChild(i)}return h.config.time_24hr||(h.amPM=d("span","flatpickr-am-pm",h.l10n.amPM[s((h.latestSelectedDateObj?h.hourElement.value:h.config.defaultHour)>11)]),h.amPM.title=h.l10n.toggleTitle,h.amPM.tabIndex=-1,h.timeContainer.appendChild(h.amPM)),h.timeContainer}()),u(h.calendarContainer,"rangeMode","range"===h.config.mode),u(h.calendarContainer,"animate",h.config.animate),h.calendarContainer.appendChild(e);var r=void 0!==h.config.appendTo&&h.config.appendTo.nodeType;if((h.config.inline||h.config.static)&&(h.calendarContainer.classList.add(h.config.inline?"inline":"static"),h.config.inline&&(!r&&h.element.parentNode?h.element.parentNode.insertBefore(h.calendarContainer,h._input.nextSibling):void 0!==h.config.appendTo&&h.config.appendTo.appendChild(h.calendarContainer)),h.config.static)){var o=d("div","flatpickr-wrapper");h.element.parentNode&&h.element.parentNode.insertBefore(o,h.element),o.appendChild(h.element),h.altInput&&o.appendChild(h.altInput),o.appendChild(h.calendarContainer)}h.config.static||h.config.inline||(void 0!==h.config.appendTo?h.config.appendTo:window.document.body).appendChild(h.calendarContainer)}(),function(){if(h.config.wrap&&["open","close","toggle","clear"].forEach(function(e){Array.prototype.forEach.call(h.element.querySelectorAll("[data-"+e+"]"),function(t){return E(t,"click",h[e])})}),h.isMobile)!function(){var e=h.config.enableTime?h.config.noCalendar?"time":"datetime-local":"date";h.mobileInput=d("input",h.input.className+" flatpickr-mobile"),h.mobileInput.step=h.input.getAttribute("step")||"any",h.mobileInput.tabIndex=1,h.mobileInput.type=e,h.mobileInput.disabled=h.input.disabled,h.mobileInput.placeholder=h.input.placeholder,h.mobileFormatStr="datetime-local"===e?"Y-m-d\\TH:i:S":"date"===e?"Y-m-d":"H:i:S",h.selectedDates.length&&(h.mobileInput.defaultValue=h.mobileInput.value=h.formatDate(h.selectedDates[0],h.mobileFormatStr)),h.config.minDate&&(h.mobileInput.min=h.formatDate(h.config.minDate,"Y-m-d")),h.config.maxDate&&(h.mobileInput.max=h.formatDate(h.config.maxDate,"Y-m-d")),h.input.type="hidden",void 0!==h.altInput&&(h.altInput.type="hidden");try{h.input.parentNode&&h.input.parentNode.insertBefore(h.mobileInput,h.input.nextSibling)}catch(e){}E(h.mobileInput,"change",function(e){h.setDate(e.target.value,!1,h.mobileFormatStr),ee("onChange"),ee("onClose")})}();else{var e=l(U,50);h._debouncedChange=l(P,300),"range"===h.config.mode&&h.daysContainer&&!/iPhone|iPad|iPod/i.test(navigator.userAgent)&&E(h.daysContainer,"mouseover",function(e){return z(e.target)}),E(window.document.body,"keydown",Y),h.config.static||E(h._input,"keydown",Y),h.config.inline||h.config.static||E(window,"resize",e),void 0!==window.ontouchstart&&E(window.document.body,"touchstart",B),E(window.document.body,"mousedown",T(B)),E(h._input,"blur",B),!0===h.config.clickOpens&&(E(h._input,"focus",h.open),E(h._input,"mousedown",T(h.open))),void 0!==h.daysContainer&&(h.monthNav.addEventListener("wheel",function(e){return e.preventDefault()}),E(h.monthNav,"wheel",l(oe,10)),E(h.monthNav,"mousedown",T(ae)),E(h.monthNav,["keyup","increment"],S),E(h.daysContainer,"mousedown",T(K)),h.config.animate&&(E(h.daysContainer,["webkitAnimationEnd","animationend"],M),E(h.monthNav,["webkitAnimationEnd","animationend"],A))),void 0!==h.timeContainer&&void 0!==h.minuteElement&&void 0!==h.hourElement&&(E(h.timeContainer,["wheel","input","increment"],b),E(h.timeContainer,"mousedown",T(L)),E(h.timeContainer,["wheel","increment"],h._debouncedChange),E(h.timeContainer,"input",P),E([h.hourElement,h.minuteElement],["focus","click"],function(e){return e.target.select()}),void 0!==h.secondElement&&E(h.secondElement,"focus",function(){return h.secondElement&&h.secondElement.select()}),void 0!==h.amPM&&E(h.amPM,"mousedown",T(function(e){b(e),P()})))}}(),(h.selectedDates.length||h.config.noCalendar)&&(h.config.enableTime&&k(h.config.noCalendar?h.latestSelectedDateObj||h.config.minDate:void 0),re(!1)),h.showTimeInput=h.selectedDates.length>0||h.config.noCalendar,void 0!==h.weekWrapper&&void 0!==h.daysContainer&&(h.calendarContainer.style.width=h.daysContainer.offsetWidth+h.weekWrapper.offsetWidth+"px"),h.isMobile||X(),ee("onReady"),h}function b(e,t){for(var n=Array.prototype.slice.call(e),i=[],r=0;r<n.length;r++){var o=n[r];try{if(null!==o.getAttribute("data-fp-omit"))continue;void 0!==o._flatpickr&&(o._flatpickr.destroy(),o._flatpickr=void 0),o._flatpickr=y(o,t||{}),i.push(o._flatpickr)}catch(e){console.error(e)}}return 1===i.length?i[0]:i}"undefined"!=typeof HTMLElement&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(e){return b(this,e)},HTMLElement.prototype.flatpickr=function(e){return b([this],e)});var x;x=function(e,t){return e instanceof NodeList?b(e,t):b("string"==typeof e?window.document.querySelectorAll(e):[e],t)},"object"==typeof window&&(window.flatpickr=x),x.defaultConfig=r,x.l10ns={en:e({},o),default:e({},o)},x.localize=function(t){x.l10ns.default=e({},x.l10ns.default,t)},x.setDefaults=function(t){x.defaultConfig=e({},x.defaultConfig,t)},"undefined"!=typeof jQuery&&(jQuery.fn.flatpickr=function(e){return b(this,e)}),Date.prototype.fp_incr=function(e){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof e?parseInt(e,10):e))};return x}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.ru={})}(this,function(e){"use strict";var t="undefined"!=typeof window&&void 0!==window.flatpickr?window.flatpickr:{l10ns:{}},n={firstDayOfWeek:1,weekdays:{shorthand:["ÐÑ","ÐÐ½","ÐÑ","Ð¡Ñ","Ð§Ñ","ÐÑ","Ð¡Ð±"],longhand:["ÐÐ¾ÑÐºÑÐµÑÐµÐ½ÑÐµ","ÐÐ¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº","ÐÑÐ¾ÑÐ½Ð¸Ðº","Ð¡ÑÐµÐ´Ð°","Ð§ÐµÑÐ²ÐµÑÐ³","ÐÑÑÐ½Ð¸ÑÐ°","Ð¡ÑÐ±Ð±Ð¾ÑÐ°"]},months:{shorthand:["Ð¯Ð½Ð²","Ð¤ÐµÐ²","ÐÐ°ÑÑ","ÐÐ¿Ñ","ÐÐ°Ð¹","ÐÑÐ½Ñ","ÐÑÐ»Ñ","ÐÐ²Ð³","Ð¡ÐµÐ½","ÐÐºÑ","ÐÐ¾Ñ","ÐÐµÐº"],longhand:["Ð¯Ð½Ð²Ð°ÑÑ","Ð¤ÐµÐ²ÑÐ°Ð»Ñ","ÐÐ°ÑÑ","ÐÐ¿ÑÐµÐ»Ñ","ÐÐ°Ð¹","ÐÑÐ½Ñ","ÐÑÐ»Ñ","ÐÐ²Ð³ÑÑÑ","Ð¡ÐµÐ½ÑÑÐ±ÑÑ","ÐÐºÑÑÐ±ÑÑ","ÐÐ¾ÑÐ±ÑÑ","ÐÐµÐºÐ°Ð±ÑÑ"]},rangeSeparator:" â ",scrollTitle:"ÐÑÐ¾ÐºÑÑÑÐ¸ÑÐµ Ð´Ð»Ñ ÑÐ²ÐµÐ»Ð¸ÑÐµÐ½Ð¸Ñ",toggleTitle:"ÐÐ°Ð¶Ð¼Ð¸ÑÐµ Ð´Ð»Ñ Ð¿ÐµÑÐµÐºÐ»ÑÑÐµÐ½Ð¸Ñ"};t.l10ns.ru=n;var i=t.l10ns;e.Russian=n,e.default=i,Object.defineProperty(e,"__esModule",{value:!0})}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.tippy=t()}(this,function(){"use strict";var e="undefined"!=typeof window,t={};e&&(t.supported="requestAnimationFrame"in window,t.supportsTouch="ontouchstart"in window,t.usingTouch=!1,t.dynamicInputDetection=!0,t.iOS=/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,t.onUserInputChange=function(){},t._eventListenersBound=!1);var n={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow",REFERENCE:"[data-tippy]"},i={placement:"top",trigger:"mouseenter focus",animation:"shift-away",html:!1,animateFill:!0,arrow:!1,delay:0,duration:[350,300],interactive:!1,interactiveBorder:2,theme:"dark",size:"regular",distance:10,offset:0,hideOnClick:!0,multiple:!1,followCursor:!1,inertia:!1,updateDuration:350,sticky:!1,appendTo:function(){return document.body},zIndex:9999,touchHold:!1,performance:!1,dynamicTitle:!1,flip:!0,flipBehavior:"flip",arrowType:"sharp",arrowTransform:"",maxWidth:"",popperOptions:{},createPopperInstanceOnInit:!1,onShow:function(){},onShown:function(){},onHide:function(){},onHidden:function(){}},r=t.supported&&Object.keys(i);function o(e){return"[object Object]"===Object.prototype.toString.call(e)}function a(e){for(var t=[!1,"webkit"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length;i++){var r=t[i],o=r?""+r+n:e;if(void 0!==document.body.style[o])return o}return null}var s=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e};function u(e){return{tooltip:e.querySelector(n.TOOLTIP),backdrop:e.querySelector(n.BACKDROP),content:e.querySelector(n.CONTENT)}}function d(e){var t=e.getAttribute("title");t&&e.setAttribute("data-original-title",t),e.removeAttribute("title")}for(var f="undefined"!=typeof window&&"undefined"!=typeof document,p=["Edge","Trident","Firefox"],h=0,g=0;g<p.length;g+=1)if(f&&navigator.userAgent.indexOf(p[g])>=0){h=1;break}var m=f&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},h))}};function v(e){return e&&"[object Function]"==={}.toString.call(e)}function y(e,t){if(1!==e.nodeType)return[];var n=getComputedStyle(e,null);return t?n[t]:n}function b(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function x(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=y(e),n=t.overflow,i=t.overflowX,r=t.overflowY;return/(auto|scroll)/.test(n+r+i)?e:x(b(e))}function w(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(t.nodeName)&&"static"===y(t,"position")?w(t):t:e?e.ownerDocument.documentElement:document.documentElement}function k(e){return null!==e.parentNode?k(e.parentNode):e}function C(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,r=n?t:e,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var a=o.commonAncestorContainer;if(e!==a&&t!==a||i.contains(r))return function(e){var t=e.nodeName;return"BODY"!==t&&("HTML"===t||w(e.firstElementChild)===e)}(a)?a:w(a);var s=k(e);return s.host?C(s.host,t):C(e,k(t).host)}function S(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var i=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||i)[t]}return e[t]}function E(e,t){var n="x"===t?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+i+"Width"],10)}var T=void 0,P=function(){return void 0===T&&(T=-1!==navigator.appVersion.indexOf("MSIE 10")),T};function D(e,t,n,i){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],P()?n["offset"+e]+i["margin"+("Height"===e?"Top":"Left")]+i["margin"+("Height"===e?"Bottom":"Right")]:0)}function M(){var e=document.body,t=document.documentElement,n=P()&&getComputedStyle(t);return{height:D("Height",e,t,n),width:D("Width",e,t,n)}}var A=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},O=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),L=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},N=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e};function I(e){return N({},e,{right:e.left+e.width,bottom:e.top+e.height})}function j(e){var t={};if(P())try{t=e.getBoundingClientRect();var n=S(e,"top"),i=S(e,"left");t.top+=n,t.left+=i,t.bottom+=n,t.right+=i}catch(e){}else t=e.getBoundingClientRect();var r={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?M():{},a=o.width||e.clientWidth||r.right-r.left,s=o.height||e.clientHeight||r.bottom-r.top,l=e.offsetWidth-a,c=e.offsetHeight-s;if(l||c){var u=y(e);l-=E(u,"x"),c-=E(u,"y"),r.width-=l,r.height-=c}return I(r)}function F(e,t){var n=P(),i="HTML"===t.nodeName,r=j(e),o=j(t),a=x(e),s=y(t),l=parseFloat(s.borderTopWidth,10),c=parseFloat(s.borderLeftWidth,10),u=I({top:r.top-o.top-l,left:r.left-o.left-c,width:r.width,height:r.height});if(u.marginTop=0,u.marginLeft=0,!n&&i){var d=parseFloat(s.marginTop,10),f=parseFloat(s.marginLeft,10);u.top-=l-d,u.bottom-=l-d,u.left-=c-f,u.right-=c-f,u.marginTop=d,u.marginLeft=f}return(n?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=S(t,"top"),r=S(t,"left"),o=n?-1:1;return e.top+=i*o,e.bottom+=i*o,e.left+=r*o,e.right+=r*o,e}(u,t)),u}function R(e){var t=e.nodeName;return"BODY"!==t&&"HTML"!==t&&("fixed"===y(e,"position")||R(b(e)))}function $(e,t,n,i){var r={top:0,left:0},o=C(e,t);if("viewport"===i)r=function(e){var t=e.ownerDocument.documentElement,n=F(e,t),i=Math.max(t.clientWidth,window.innerWidth||0),r=Math.max(t.clientHeight,window.innerHeight||0),o=S(t),a=S(t,"left");return I({top:o-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:i,height:r})}(o);else{var a=void 0;"scrollParent"===i?"BODY"===(a=x(b(t))).nodeName&&(a=e.ownerDocument.documentElement):a="window"===i?e.ownerDocument.documentElement:i;var s=F(a,o);if("HTML"!==a.nodeName||R(o))r=s;else{var l=M(),c=l.height,u=l.width;r.top+=s.top-s.marginTop,r.bottom=c+s.top,r.left+=s.left-s.marginLeft,r.right=u+s.left}}return r.left+=n,r.top+=n,r.right-=n,r.bottom-=n,r}function _(e,t,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=$(n,i,o,r),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(s).map(function(e){return N({key:e},s[e],{area:(t=s[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),c=l.filter(function(e){var t=e.width,i=e.height;return t>=n.clientWidth&&i>=n.clientHeight}),u=c.length>0?c[0].key:l[0].key,d=e.split("-")[1];return u+(d?"-"+d:"")}function H(e,t,n){return F(n,C(t,n))}function B(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),i=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+i,height:e.offsetHeight+n}}function q(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function W(e,t,n){n=n.split("-")[0];var i=B(e),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",l=o?"height":"width",c=o?"width":"height";return r[a]=t[a]+t[l]/2-i[l]/2,r[s]=n===s?t[s]-i[c]:t[q(s)],r}function Y(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function z(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var i=Y(e,function(e){return e[t]===n});return e.indexOf(i)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&v(n)&&(t.offsets.popper=I(t.offsets.popper),t.offsets.reference=I(t.offsets.reference),t=n(t,e))}),t}function U(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function G(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length-1;i++){var r=t[i],o=r?""+r+n:e;if(void 0!==document.body.style[o])return o}return null}function X(e){var t=e.ownerDocument;return t?t.defaultView:window}function V(e,t,n,i){var r="BODY"===e.nodeName,o=r?e.ownerDocument.defaultView:e;o.addEventListener(t,n,{passive:!0}),r||V(x(o.parentNode),t,n,i),i.push(o)}function K(){this.state.eventsEnabled||(this.state=function(e,t,n,i){n.updateBound=i,X(e).addEventListener("resize",n.updateBound,{passive:!0});var r=x(e);return V(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}(this.reference,this.options,this.state,this.scheduleUpdate))}function Z(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,X(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t));var e,t}function Q(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function J(e,t){Object.keys(t).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&Q(t[n])&&(i="px"),e.style[n]=t[n]+i})}function ee(e,t,n){var i=Y(e,function(e){return e.name===t}),r=!!i&&e.some(function(e){return e.name===n&&e.enabled&&e.order<i.order});if(!r){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}var te=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],ne=te.slice(3);function ie(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=ne.indexOf(e),i=ne.slice(n+1).concat(ne.slice(0,n));return t?i.reverse():i}var re={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function oe(e,t,n,i){var r=[0,0],o=-1!==["right","left"].indexOf(i),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=a.indexOf(Y(a,function(e){return-1!==e.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(c=c.map(function(e,i){var r=(1===i?!o:o)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,i){var r=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],a=r[2];if(!o)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=i}return I(s)[t]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(e,r,t,n)})})).forEach(function(e,t){e.forEach(function(n,i){Q(n)&&(r[t]+=n*("-"===e[i-1]?-1:1))})}),r}var ae={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],i=t.split("-")[1];if(i){var r=e.offsets,o=r.reference,a=r.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",c=s?"width":"height",u={start:L({},l,o[l]),end:L({},l,o[l]+o[c]-a[c])};e.offsets.popper=N({},a,u[i])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,i=e.placement,r=e.offsets,o=r.popper,a=r.reference,s=i.split("-")[0],l=void 0;return l=Q(+n)?[+n,0]:oe(n,o,a,s),"left"===s?(o.top+=l[0],o.left-=l[1]):"right"===s?(o.top+=l[0],o.left+=l[1]):"top"===s?(o.left+=l[0],o.top-=l[1]):"bottom"===s&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||w(e.instance.popper);e.instance.reference===n&&(n=w(n));var i=$(e.instance.popper,e.instance.reference,t.padding,n);t.boundaries=i;var r=t.priority,o=e.offsets.popper,a={primary:function(e){var n=o[e];return o[e]<i[e]&&!t.escapeWithReference&&(n=Math.max(o[e],i[e])),L({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=o[n];return o[e]>i[e]&&!t.escapeWithReference&&(r=Math.min(o[n],i[e]-("right"===e?o.width:o.height))),L({},n,r)}};return r.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";o=N({},o,a[t](e))}),e.offsets.popper=o,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,i=t.reference,r=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(r),s=a?"right":"bottom",l=a?"left":"top",c=a?"width":"height";return n[s]<o(i[l])&&(e.offsets.popper[l]=o(i[l])-n[c]),n[l]>o(i[s])&&(e.offsets.popper[l]=o(i[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!ee(e.instance.modifiers,"arrow","keepTogether"))return e;var i=t.element;if("string"==typeof i){if(!(i=e.instance.popper.querySelector(i)))return e}else if(!e.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var r=e.placement.split("-")[0],o=e.offsets,a=o.popper,s=o.reference,l=-1!==["left","right"].indexOf(r),c=l?"height":"width",u=l?"Top":"Left",d=u.toLowerCase(),f=l?"left":"top",p=l?"bottom":"right",h=B(i)[c];s[p]-h<a[d]&&(e.offsets.popper[d]-=a[d]-(s[p]-h)),s[d]+h>a[p]&&(e.offsets.popper[d]+=s[d]+h-a[p]),e.offsets.popper=I(e.offsets.popper);var g=s[d]+s[c]/2-h/2,m=y(e.instance.popper),v=parseFloat(m["margin"+u],10),b=parseFloat(m["border"+u+"Width"],10),x=g-e.offsets.popper[d]-v-b;return x=Math.max(Math.min(a[c]-h,x),0),e.arrowElement=i,e.offsets.arrow=(n={},L(n,d,Math.round(x)),L(n,f,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(U(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=$(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),i=e.placement.split("-")[0],r=q(i),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case re.FLIP:a=[i,r];break;case re.CLOCKWISE:a=ie(i);break;case re.COUNTERCLOCKWISE:a=ie(i,!0);break;default:a=t.behavior}return a.forEach(function(s,l){if(i!==s||a.length===l+1)return e;i=e.placement.split("-")[0],r=q(i);var c=e.offsets.popper,u=e.offsets.reference,d=Math.floor,f="left"===i&&d(c.right)>d(u.left)||"right"===i&&d(c.left)<d(u.right)||"top"===i&&d(c.bottom)>d(u.top)||"bottom"===i&&d(c.top)<d(u.bottom),p=d(c.left)<d(n.left),h=d(c.right)>d(n.right),g=d(c.top)<d(n.top),m=d(c.bottom)>d(n.bottom),v="left"===i&&p||"right"===i&&h||"top"===i&&g||"bottom"===i&&m,y=-1!==["top","bottom"].indexOf(i),b=!!t.flipVariations&&(y&&"start"===o&&p||y&&"end"===o&&h||!y&&"start"===o&&g||!y&&"end"===o&&m);(f||v||b)&&(e.flipped=!0,(f||v)&&(i=a[l+1]),b&&(o="end"===(x=o)?"start":"start"===x?"end":x),e.placement=i+(o?"-"+o:""),e.offsets.popper=N({},e.offsets.popper,W(e.instance.popper,e.offsets.reference,e.placement)),e=z(e.instance.modifiers,e,"flip"));var x}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],i=e.offsets,r=i.popper,o=i.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return r[a?"left":"top"]=o[n]-(s?r[a?"width":"height"]:0),e.placement=q(t),e.offsets.popper=I(r),e}},hide:{order:800,enabled:!0,fn:function(e){if(!ee(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=Y(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,i=t.y,r=e.offsets.popper,o=Y(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,s=j(w(e.instance.popper)),l={position:r.position},c={left:Math.floor(r.left),top:Math.floor(r.top),bottom:Math.floor(r.bottom),right:Math.floor(r.right)},u="bottom"===n?"top":"bottom",d="right"===i?"left":"right",f=G("transform"),p=void 0,h=void 0;if(h="bottom"===u?-s.height+c.bottom:c.top,p="right"===d?-s.width+c.right:c.left,a&&f)l[f]="translate3d("+p+"px, "+h+"px, 0)",l[u]=0,l[d]=0,l.willChange="transform";else{var g="bottom"===u?-1:1,m="right"===d?-1:1;l[u]=h*g,l[d]=p*m,l.willChange=u+", "+d}var v={"x-placement":e.placement};return e.attributes=N({},v,e.attributes),e.styles=N({},l,e.styles),e.arrowStyles=N({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){J(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)});var t,n;return e.arrowElement&&Object.keys(e.arrowStyles).length&&J(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,i,r){var o=H(0,t,e),a=_(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),J(t,{position:"absolute"}),n},gpuAcceleration:void 0}}},se=function(){function e(t,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};A(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=m(this.update.bind(this)),this.options=N({},e.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(N({},e.Defaults.modifiers,r.modifiers)).forEach(function(t){i.options.modifiers[t]=N({},e.Defaults.modifiers[t]||{},r.modifiers?r.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return N({name:e},i.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&v(e.onLoad)&&e.onLoad(i.reference,i.popper,i.options,e,i.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return O(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=H(this.state,this.popper,this.reference),e.placement=_(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=W(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=z(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,U(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[G("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return K.call(this)}},{key:"disableEventListeners",value:function(){return Z.call(this)}}]),e}();se.Utils=("undefined"!=typeof window?window:global).PopperUtils,se.placements=te,se.Defaults=ae;function le(e){return e.getAttribute("x-placement").replace(/-.+/,"")}function ce(e,t,n,i){if(!t.length)return"";return{scale:1===t.length?""+t[0]:n?t[0]+", "+t[1]:t[1]+", "+t[0],translate:1===t.length?i?-t[0]+"px":t[0]+"px":n?i?t[0]+"px, "+-t[1]+"px":t[0]+"px, "+t[1]+"px":i?-t[1]+"px, "+t[0]+"px":t[1]+"px, "+t[0]+"px"}[e]}function ue(e,t){if(!e)return"";return t?e:{X:"Y",Y:"X"}[e]}function de(e,t,n){var i=le(e),r="top"===i||"bottom"===i,o="right"===i||"bottom"===i,s=function(e){var t=n.match(e);return t?t[1]:""},l=function(e){var t=n.match(e);return t?t[1].split(",").map(parseFloat):[]},c=/translateX?Y?\(([^)]+)\)/,u=/scaleX?Y?\(([^)]+)\)/,d={translate:{axis:s(/translate([XY])/),numbers:l(c)},scale:{axis:s(/scale([XY])/),numbers:l(u)}},f=n.replace(c,"translate"+ue(d.translate.axis,r)+"("+ce("translate",d.translate.numbers,r,o)+")").replace(u,"scale"+ue(d.scale.axis,r)+"("+ce("scale",d.scale.numbers,r,o)+")");t.style[a("transform")]=f}function fe(e){return-(e-i.distance)+"px"}function pe(e){requestAnimationFrame(function(){setTimeout(e)})}var he={};if(e){var ge=Element.prototype;he=ge.matches||ge.matchesSelector||ge.webkitMatchesSelector||ge.mozMatchesSelector||ge.msMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}}var me=he;function ve(e,t){return(Element.prototype.closest||function(e){for(var t=this;t;){if(me.call(t,e))return t;t=t.parentElement}}).call(e,t)}function ye(e,t){return Array.isArray(e)?e[t]:e}function be(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function xe(e,t){e.forEach(function(e){e&&(e.style[a("transitionDuration")]=t+"ms")})}var we=function(){var e={},i=function(t){return function(n){return n===e&&t}};function r(n){var i=this;if(f.call(this),!this.state.visible)if(this._(e).isPreparingToShow=!0,this.options.wait)this.options.wait.call(this.popper,this.show.bind(this),n);else{this.options.followCursor&&!t.usingTouch&&(this._(e).followCursorListener||function(){var t=this;this._(e).followCursorListener=function(n){if(!t._(e).lastTriggerEvent||"focus"!==t._(e).lastTriggerEvent.type){t._(e).lastMouseMoveEvent=n;var i=document.documentElement.offsetWidth||document.body.offsetWidth,r=Math.round(t.popper.offsetWidth/2),o=Math.round(t.popper.offsetHeight/2),s=t.options.offset,l=n.pageX,c=n.pageY,u=t.options.placement.replace(/-.+/,"");t.popper.getAttribute("x-placement")&&(u=le(t.popper));var d=void 0,f=void 0;switch(u){case"top":d=l-r+s,f=c-2*o;break;case"bottom":d=l-r+s,f=c+10;break;case"left":d=l-2*r,f=c-o+s;break;case"right":d=l+5,f=c-o+s}var p=l+5+r+s>i,h=l-5-r+s<0;"top"!==u&&"bottom"!==u||(p&&(d=i-5-2*r),h&&(d=5)),t.popper.style[a("transform")]="translate3d("+d+"px, "+f+"px, 0)"}}}.call(this),document.addEventListener("mousemove",this._(e).followCursorListener));var r=Array.isArray(this.options.delay)?this.options.delay[0]:this.options.delay;r?this._(e).showTimeout=setTimeout(function(){i.show()},r):this.show()}}function o(){var t=this;if(f.call(this),this.state.visible){this._(e).isPreparingToShow=!1;var n=Array.isArray(this.options.delay)?this.options.delay[1]:this.options.delay;n?this._(e).hideTimeout=setTimeout(function(){t.state.visible&&t.hide()},n):this.hide()}}function d(){var e=this,t=this.popper,i=this.reference,r=this.options,o=u(t).tooltip,s=r.popperOptions,l="round"===r.arrowType?n.ROUND_ARROW:n.ARROW,d=o.querySelector(l),f=c({placement:r.placement},s||{},{modifiers:c({},s?s.modifiers:{},{arrow:c({element:l},s&&s.modifiers?s.modifiers.arrow:{}),flip:c({enabled:r.flip,padding:r.distance+5,behavior:r.flipBehavior},s&&s.modifiers?s.modifiers.flip:{}),offset:c({offset:r.offset},s&&s.modifiers?s.modifiers.offset:{})}),onCreate:function(){o.style[le(t)]=fe(r.distance),d&&r.arrowTransform&&de(t,d,r.arrowTransform)},onUpdate:function(){var e=o.style;e.top="",e.bottom="",e.left="",e.right="",e[le(t)]=fe(r.distance),d&&r.arrowTransform&&de(t,d,r.arrowTransform)}});return p.call(this,{target:t,callback:function(){var n=t.style;n[a("transitionDuration")]=null;var i=e.popperInstance.options.onUpdate;e.popperInstance.options.onUpdate=function(){e.popper.offsetHeight,n[a("transitionDuration")]=r.updateDuration+"ms",e.popperInstance.options.onUpdate=i},e.popperInstance.update()},options:{childList:!0,subtree:!0,characterData:!0}}),new se(i,t,f)}function f(){var t=this._(e),n=t.showTimeout,i=t.hideTimeout;clearTimeout(n),clearTimeout(i)}function p(t){var n=t.target,i=t.callback,r=t.options;if(window.MutationObserver){var o=new MutationObserver(i);o.observe(n,r),this._(e).mutationObservers.push(o)}}function h(t,n){if(!t)return n();var i=u(this.popper).tooltip,r=function(e,t){t&&i[e+"EventListener"]("ontransitionend"in window?"transitionend":"webkitTransitionEnd",t)},o=function e(t){t.target===i&&(r("remove",e),n())};r("remove",this._(e).transitionendListener),r("add",o),this._(e).transitionendListener=o}return{Tippy:function(){function n(e){s(this,n);for(var t in e)this[t]=e[t];this.state={destroyed:!1,visible:!1,enabled:!0},this._=i({mutationObservers:[]})}return l(n,[{key:"enable",value:function(){this.state.enabled=!0}},{key:"disable",value:function(){this.state.enabled=!1}},{key:"show",value:function(n){var i=this;if(!this.state.destroyed&&this.state.enabled){var r=this.popper,o=this.reference,s=this.options,l=u(r),c=l.tooltip,f=l.backdrop,p=l.content;o.refObj||document.documentElement.contains(o)?(s.onShow.call(r),n=ye(void 0!==n?n:s.duration,0),xe([r,c,f],0),r.style.visibility="visible",this.state.visible=!0,function(e){var n=this;this.popperInstance?(this.popper.style[a("transform")]=null,this.popperInstance.scheduleUpdate(),this.options.followCursor&&!t.usingTouch||this.popperInstance.enableEventListeners()):this.popperInstance=d.call(this);var i=this.popperInstance.options.onCreate,r=this.popperInstance.options.onUpdate;this.popperInstance.options.onCreate=this.popperInstance.options.onUpdate=function(){n.popper.offsetHeight,e(),n.popperInstance.options.onUpdate=r,n.popperInstance.options.onCreate=i},this.options.appendTo.contains(this.popper)||this.options.appendTo.appendChild(this.popper)}.call(this,function(){if(i.state.visible){if(s.followCursor&&!t.usingTouch||(i.popperInstance.scheduleUpdate(),xe([r],s.updateDuration)),s.followCursor&&!t.usingTouch){i.popperInstance.disableEventListeners();var l=Array.isArray(s.delay)?s.delay[0]:s.delay;i._(e).lastTriggerEvent&&i._(e).followCursorListener(l&&i._(e).lastMouseMoveEvent?i._(e).lastMouseMoveEvent:i._(e).lastTriggerEvent)}xe([c,f,f?p:null],n),f&&getComputedStyle(f)[a("transform")],s.interactive&&o.classList.add("tippy-active"),s.sticky&&function(){var e=this;pe(function t(){e.popperInstance&&e.popperInstance.scheduleUpdate(),e.popper.style[a("transitionDuration")]=e.options.updateDuration+"ms",e.state.visible?requestAnimationFrame(t):e.popper.style[a("transitionDuration")]=""})}.call(i),be([c,f],"visible"),h.call(i,n,function(){s.updateDuration||c.classList.add("tippy-notransition"),s.interactive&&r.focus(),s.onShown.call(r)})}})):this.destroy()}}},{key:"hide",value:function(t){var n=this;if(!this.state.destroyed&&this.state.enabled){var i=this.popper,r=this.reference,o=this.options,a=u(i),s=a.tooltip,l=a.backdrop,c=a.content;o.onHide.call(i),t=ye(void 0!==t?t:o.duration,1),o.updateDuration||s.classList.remove("tippy-notransition"),o.interactive&&r.classList.remove("tippy-active"),i.style.visibility="hidden",this.state.visible=!1,xe([s,l,l?c:null],t),be([s,l],"hidden"),o.interactive&&o.trigger.indexOf("click")>-1&&function(e){var t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)}(r)&&r.focus(),pe(function(){h.call(n,t,function(){!n.state.visible&&o.appendTo.contains(i)&&(n._(e).isPreparingToShow||(document.removeEventListener("mousemove",n._(e).followCursorListener),n._(e).lastMouseMoveEvent=null),n.popperInstance.disableEventListeners(),o.appendTo.removeChild(i),o.onHidden.call(i))})})}}},{key:"destroy",value:function(){var t=this;this.state.destroyed||(this.state.visible&&this.hide(0),this.listeners.forEach(function(e){t.reference.removeEventListener(e.event,e.handler)}),this.reference.setAttribute("title",this.reference.getAttribute("data-original-title")),delete this.reference._tippy,["data-original-title","data-tippy","aria-describedby"].forEach(function(e){t.reference.removeAttribute(e)}),this.popperInstance&&this.popperInstance.destroy(),this._(e).mutationObservers.forEach(function(e){e.disconnect()}),this.state.destroyed=!0)}}]),n}(),_getEventListeners:function(){var i=this;return{handleTrigger:function(n){if(i.state.enabled){var a=t.supportsTouch&&t.usingTouch&&("mouseenter"===n.type||"focus"===n.type);a&&i.options.touchHold||(i._(e).lastTriggerEvent=n,"click"===n.type&&"persistent"!==i.options.hideOnClick&&i.state.visible?o.call(i):r.call(i,n),a&&t.iOS&&i.reference.click&&i.reference.click())}},handleMouseleave:function(e){if(!("mouseleave"===e.type&&t.supportsTouch&&t.usingTouch&&i.options.touchHold)){if(i.options.interactive){var r=o.bind(i);return document.body.addEventListener("mouseleave",r),void document.addEventListener("mousemove",function e(t){var a=ve(t.target,n.REFERENCE),s=ve(t.target,n.POPPER)===i.popper,l=a===i.reference;s||l||function(e,t,n){if(!t.getAttribute("x-placement"))return!0;var i=e.clientX,r=e.clientY,o=n.interactiveBorder,a=n.distance,s=t.getBoundingClientRect(),l=le(t),c=o+a,u={top:s.top-r>o,bottom:r-s.bottom>o,left:s.left-i>o,right:i-s.right>o};switch(l){case"top":u.top=s.top-r>c;break;case"bottom":u.bottom=r-s.bottom>c;break;case"left":u.left=s.left-i>c;break;case"right":u.right=i-s.right>c}return u.top||u.bottom||u.left||u.right}(t,i.popper,i.options)&&(document.body.removeEventListener("mouseleave",r),document.removeEventListener("mousemove",e),o.call(i))})}o.call(i)}},handleBlur:function(e){e.relatedTarget&&!t.usingTouch&&(ve(e.relatedTarget,n.POPPER)||o.call(i))}}},_addMutationObserver:p,_createPopperInstance:d,_onTransitionEnd:h}}(),ke=we.Tippy,Ce=we._getEventListeners,Se=we._createPopperInstance,Ee=we._addMutationObserver,Te=1;function Pe(e,n){return e.reduce(function(e,i){var o,s,l=Te,f=(o=i,s=n.performance?n:function(e,t){var n=r.reduce(function(n,i){var r=e.getAttribute("data-tippy-"+i.toLowerCase())||t[i];return"false"===r&&(r=!1),"true"===r&&(r=!0),isFinite(r)&&!isNaN(parseFloat(r))&&(r=parseFloat(r)),"string"==typeof r&&"["===r.trim().charAt(0)&&(r=JSON.parse(r)),n[i]=r,n},{});return c({},t,n)}(i,n),s.arrow&&(s.animateFill=!1),s.appendTo&&"function"==typeof s.appendTo&&(s.appendTo=s.appendTo()),"function"==typeof s.html&&(s.html=s.html(o)),s),p=i.getAttribute("title");if(!p&&!f.html)return e;i.setAttribute("data-tippy",""),i.setAttribute("aria-describedby","tippy-"+l),d(i);var h=function(e,t,n){n.placement,n.distance;var i=n.arrow,r=n.arrowType,o=n.arrowTransform,s=n.animateFill,l=n.inertia,c=n.animation,u=n.size,d=n.theme,f=n.html,p=n.zIndex,h=n.interactive,g=n.maxWidth,m=document.createElement("div");m.setAttribute("class","tippy-popper"),m.setAttribute("role","tooltip"),m.setAttribute("id","tippy-"+e),m.style.zIndex=p,m.style.maxWidth=g;var v=document.createElement("div");if(v.setAttribute("class","tippy-tooltip"),v.setAttribute("data-size",u),v.setAttribute("data-animation",c),v.setAttribute("data-state","hidden"),d.split(" ").forEach(function(e){v.classList.add(e+"-theme")}),i){var y=document.createElement("div");y.style[a("transform")]=o,"round"===r?(y.classList.add("tippy-roundarrow"),y.innerHTML='\n      <svg width="100%" height="100%" viewBox="0 0 64 20" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">\n        <g transform="matrix(1.04009,0,0,1.45139,-1.26297,-65.9145)">\n          <path d="M1.214,59.185C1.214,59.185 12.868,59.992 21.5,51.55C29.887,43.347 33.898,43.308 42.5,51.55C51.352,60.031 62.747,59.185 62.747,59.185L1.214,59.185Z"/>\n        </g>\n      </svg>'):y.classList.add("tippy-arrow"),v.appendChild(y)}if(s){v.setAttribute("data-animatefill","");var b=document.createElement("div");b.setAttribute("data-state","hidden"),b.classList.add("tippy-backdrop"),v.appendChild(b)}l&&v.setAttribute("data-inertia",""),h&&v.setAttribute("data-interactive","");var x=document.createElement("div");if(x.setAttribute("class","tippy-content"),f){var w=void 0;f instanceof Element?(x.appendChild(f),w="#"+f.id||"tippy-html-template"):(x.innerHTML=document.querySelector(f).innerHTML,w=f),m.setAttribute("data-html",""),h&&m.setAttribute("tabindex","-1"),v.setAttribute("data-template-id",w)}else x.innerHTML=t;return v.appendChild(x),m.appendChild(v),m}(l,p,f),g=new ke({id:l,reference:i,popper:h,options:f,popperInstance:null});f.createPopperInstanceOnInit&&(g.popperInstance=Se.call(g),g.popperInstance.disableEventListeners());var m=Ce.call(g);return g.listeners=f.trigger.trim().split(" ").reduce(function(e,n){return e.concat(function(e,n,i,r){var o=[];return"manual"===e?o:(n.addEventListener(e,i.handleTrigger),o.push({event:e,handler:i.handleTrigger}),"mouseenter"===e&&(t.supportsTouch&&r&&(n.addEventListener("touchstart",i.handleTrigger),o.push({event:"touchstart",handler:i.handleTrigger}),n.addEventListener("touchend",i.handleMouseleave),o.push({event:"touchend",handler:i.handleMouseleave})),n.addEventListener("mouseleave",i.handleMouseleave),o.push({event:"mouseleave",handler:i.handleMouseleave})),"focus"===e&&(n.addEventListener("blur",i.handleBlur),o.push({event:"blur",handler:i.handleBlur})),o)}(n,i,m,f.touchHold))},[]),f.dynamicTitle&&Ee.call(g,{target:i,callback:function(){var e=u(h).content,t=i.getAttribute("title");t&&(e.innerHTML=t,d(i))},options:{attributes:!0}}),i._tippy=g,h._reference=i,e.push(g),Te++,e},[])}function De(e){[].slice.call(document.querySelectorAll(n.POPPER)).forEach(function(t){var n=t._reference._tippy,i=n.options;!(!0===i.hideOnClick||i.trigger.indexOf("focus")>-1)||e&&t===e.popper||n.hide()})}function Me(e,r){return t.supported&&!t._eventListenersBound&&(!function(){var e=function(){t.usingTouch||(t.usingTouch=!0,t.iOS&&document.body.classList.add("tippy-touch"),t.dynamicInputDetection&&window.performance&&document.addEventListener("mousemove",i),t.onUserInputChange("touch"))},i=function(){var e=void 0;return function(){var n=performance.now();n-e<20&&(t.usingTouch=!1,document.removeEventListener("mousemove",i),t.iOS||document.body.classList.remove("tippy-touch"),t.onUserInputChange("mouse")),e=n}}();document.addEventListener("click",function(e){if(!(e.target instanceof Element))return De();var i=ve(e.target,n.REFERENCE),r=ve(e.target,n.POPPER);if(!r||!r._reference._tippy.options.interactive){if(i){var o=i._tippy.options;if(!o.multiple&&t.usingTouch||!o.multiple&&o.trigger.indexOf("click")>-1)return De(i._tippy);if(!0!==o.hideOnClick||o.trigger.indexOf("click")>-1)return}De()}}),document.addEventListener("touchstart",e),window.addEventListener("blur",function(e){var t=document.activeElement;t&&t.blur&&me.call(t,n.REFERENCE)&&t.blur()}),t.supportsTouch||!navigator.maxTouchPoints&&!navigator.msMaxTouchPoints||document.addEventListener("pointerdown",e)}(),t._eventListenersBound=!0),o(e)&&(e.refObj=!0,e.attributes=e.attributes||{},e.setAttribute=function(t,n){e.attributes[t]=n},e.getAttribute=function(t){return e.attributes[t]},e.removeAttribute=function(t){delete e.attributes[t]},e.addEventListener=function(){},e.removeEventListener=function(){},e.classList={classNames:{},add:function(t){return e.classList.classNames[t]=!0},remove:function(t){return delete e.classList.classNames[t],!0},contains:function(t){return!!e.classList.classNames[t]}}),r=c({},i,r),{selector:e,options:r,tooltips:t.supported?Pe(function(e){if(e instanceof Element||o(e))return[e];if(e instanceof NodeList)return[].slice.call(e);if(Array.isArray(e))return e;try{return[].slice.call(document.querySelectorAll(e))}catch(e){return[]}}(e),r):[],destroyAll:function(){this.tooltips.forEach(function(e){return e.destroy()}),this.tooltips=[]}}}return Me.browser=t,Me.defaults=i,Me}),function(){var e=function(e){var t=$(e).parents(".cabinet-risks-recommendation");return t.find(".cabinet-risks-recommendation-default-state").show(),t.find(".cabinet-risks-recommendation-enter-date-state").hide(),!1};$("[data-enter-date]").on("click",function(){return!$(this).attr("disabled")&&function(e){var t=$(e).parents(".cabinet-risks-recommendation");return t.find(".cabinet-risks-recommendation-default-state").hide(),t.find(".cabinet-risks-recommendation-enter-date-state").show(),!1}(this)}),$("[data-save-date]").on("click",function(){var t=this,n=$(this).data("save-date"),i=$(this).parents(".cabinet-risks-recommendation"),r=i.find(".cabinet-risks-recommendation-enter-date input").val();return r?($.ajax({method:"POST",url:"/procedure",dataType:"json",data:{date:r,procedure:n,_token:$("input[name=_token]").val()},success:function(n){i.find(".cabinet-risks-recommendation-date").text(n.nextDate),e(t)}}),!1):(i.find(".cabinet-risks-recommendation-enter-date input").focus(),!1)}),$("[data-close-enter-date]").on("click",function(){return e(this)})}(),$("[data-flatpickr]").each(function(){var e={locale:"ru",dateFormat:"d.m.Y"},t=$(this).data("flatpickr");for(var n in t)e[n]=t[n];$(this).flatpickr(e)}),$(".js-header-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(".js-header-slider-next").click(function(){return e.goToNextSlide(),!1}),$(".js-header-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})}),$(".js-header-about-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!0});$(window).resize(function(){e.reloadSlider()})}),$(".js-logotypes-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-next").click(function(){return e.goToNextSlide(),!1}),$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})}),$("#recommendations-subscribe").on("change",function(){var e=$(this).parents("form");window.recommendationTimeout&&clearTimeout(window.recommendationTimeout),window.recommendationTimeout=setTimeout(function(){e.submit()},1300)}),function(){function e(t,n,i){$(t.target).closest(n).length||(i(),$(document).off("click","body",e))}$(".js-offcanvas").click(function(){var t="#offcanvas",n="#offcanvas > .main-offcanvas";function i(){$(".js-offcanvas, "+t).removeClass("active")}return $(this).hasClass("active")?i():($(".js-offcanvas").addClass("active"),$(t).addClass("active"),$(document).on("click","body",function(t){e(t,n,i)})),!1})}(),function(e){e.fn.toggler=function(){return this.each(function(){e(this).on("click",function(t){var n=e(this).data("toggle")||e(this).attr("href"),i=e(this).data("toggle-class")||"active",r=e(this).data("toggle-group"),o=e(this).is("[data-toggle-self-deactive]");return console.log(n,i,r),e('[data-toggle-group="'+r+'"]').not(this).each(function(){var t=e(this).data("toggle")||e(this).attr("href"),n=e(this).data("toggle-class")||"active";e(t).removeClass(n),e(this).removeClass(n)}),e(this).hasClass(i)&&o?(e(this).removeClass(i),e(n).removeClass(i)):(e(this).addClass(i),e(n).addClass(i)),!1})}),this}}(jQuery),$(document).ready(function(){$("[data-toggle]").toggler(),$(":input").inputmask(),tippy("[data-tooltip]",{theme:"light"})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
